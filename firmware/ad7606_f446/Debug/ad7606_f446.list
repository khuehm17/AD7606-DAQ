
ad7606_f446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a24c  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800a414  0800a414  0001a414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a474  0800a474  0002011c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a474  0800a474  0001a474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a47c  0800a47c  0002011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a47c  0800a47c  0001a47c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a480  0800a480  0001a480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000011c  20000000  0800a484  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d4c  2000011c  0800a5a0  0002011c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e68  0800a5a0  00021e68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016f6a  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003655  00000000  00000000  000370b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e8  00000000  00000000  0003a710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001260  00000000  00000000  0003baf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025151  00000000  00000000  0003cd58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018577  00000000  00000000  00061ea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4496  00000000  00000000  0007a420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014e8b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005498  00000000  00000000  0014e908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000011c 	.word	0x2000011c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800a3fc 	.word	0x0800a3fc

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000120 	.word	0x20000120
 8000204:	0800a3fc 	.word	0x0800a3fc

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2f>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009ac:	bf24      	itt	cs
 80009ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009b6:	d90d      	bls.n	80009d4 <__aeabi_d2f+0x30>
 80009b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009cc:	bf08      	it	eq
 80009ce:	f020 0001 	biceq.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d8:	d121      	bne.n	8000a1e <__aeabi_d2f+0x7a>
 80009da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009de:	bfbc      	itt	lt
 80009e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009e4:	4770      	bxlt	lr
 80009e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ee:	f1c2 0218 	rsb	r2, r2, #24
 80009f2:	f1c2 0c20 	rsb	ip, r2, #32
 80009f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	bf18      	it	ne
 8000a00:	f040 0001 	orrne.w	r0, r0, #1
 8000a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a10:	ea40 000c 	orr.w	r0, r0, ip
 8000a14:	fa23 f302 	lsr.w	r3, r3, r2
 8000a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a1c:	e7cc      	b.n	80009b8 <__aeabi_d2f+0x14>
 8000a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a22:	d107      	bne.n	8000a34 <__aeabi_d2f+0x90>
 8000a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a28:	bf1e      	ittt	ne
 8000a2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a32:	4770      	bxne	lr
 8000a34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <__aeabi_uldivmod>:
 8000a44:	b953      	cbnz	r3, 8000a5c <__aeabi_uldivmod+0x18>
 8000a46:	b94a      	cbnz	r2, 8000a5c <__aeabi_uldivmod+0x18>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	2800      	cmpeq	r0, #0
 8000a4e:	bf1c      	itt	ne
 8000a50:	f04f 31ff 	movne.w	r1, #4294967295
 8000a54:	f04f 30ff 	movne.w	r0, #4294967295
 8000a58:	f000 b974 	b.w	8000d44 <__aeabi_idiv0>
 8000a5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a64:	f000 f806 	bl	8000a74 <__udivmoddi4>
 8000a68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a70:	b004      	add	sp, #16
 8000a72:	4770      	bx	lr

08000a74 <__udivmoddi4>:
 8000a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a78:	9d08      	ldr	r5, [sp, #32]
 8000a7a:	4604      	mov	r4, r0
 8000a7c:	468e      	mov	lr, r1
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d14d      	bne.n	8000b1e <__udivmoddi4+0xaa>
 8000a82:	428a      	cmp	r2, r1
 8000a84:	4694      	mov	ip, r2
 8000a86:	d969      	bls.n	8000b5c <__udivmoddi4+0xe8>
 8000a88:	fab2 f282 	clz	r2, r2
 8000a8c:	b152      	cbz	r2, 8000aa4 <__udivmoddi4+0x30>
 8000a8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a92:	f1c2 0120 	rsb	r1, r2, #32
 8000a96:	fa20 f101 	lsr.w	r1, r0, r1
 8000a9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000aa2:	4094      	lsls	r4, r2
 8000aa4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000aa8:	0c21      	lsrs	r1, r4, #16
 8000aaa:	fbbe f6f8 	udiv	r6, lr, r8
 8000aae:	fa1f f78c 	uxth.w	r7, ip
 8000ab2:	fb08 e316 	mls	r3, r8, r6, lr
 8000ab6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000aba:	fb06 f107 	mul.w	r1, r6, r7
 8000abe:	4299      	cmp	r1, r3
 8000ac0:	d90a      	bls.n	8000ad8 <__udivmoddi4+0x64>
 8000ac2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ac6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000aca:	f080 811f 	bcs.w	8000d0c <__udivmoddi4+0x298>
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	f240 811c 	bls.w	8000d0c <__udivmoddi4+0x298>
 8000ad4:	3e02      	subs	r6, #2
 8000ad6:	4463      	add	r3, ip
 8000ad8:	1a5b      	subs	r3, r3, r1
 8000ada:	b2a4      	uxth	r4, r4
 8000adc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ae0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ae4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ae8:	fb00 f707 	mul.w	r7, r0, r7
 8000aec:	42a7      	cmp	r7, r4
 8000aee:	d90a      	bls.n	8000b06 <__udivmoddi4+0x92>
 8000af0:	eb1c 0404 	adds.w	r4, ip, r4
 8000af4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000af8:	f080 810a 	bcs.w	8000d10 <__udivmoddi4+0x29c>
 8000afc:	42a7      	cmp	r7, r4
 8000afe:	f240 8107 	bls.w	8000d10 <__udivmoddi4+0x29c>
 8000b02:	4464      	add	r4, ip
 8000b04:	3802      	subs	r0, #2
 8000b06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b0a:	1be4      	subs	r4, r4, r7
 8000b0c:	2600      	movs	r6, #0
 8000b0e:	b11d      	cbz	r5, 8000b18 <__udivmoddi4+0xa4>
 8000b10:	40d4      	lsrs	r4, r2
 8000b12:	2300      	movs	r3, #0
 8000b14:	e9c5 4300 	strd	r4, r3, [r5]
 8000b18:	4631      	mov	r1, r6
 8000b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1e:	428b      	cmp	r3, r1
 8000b20:	d909      	bls.n	8000b36 <__udivmoddi4+0xc2>
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	f000 80ef 	beq.w	8000d06 <__udivmoddi4+0x292>
 8000b28:	2600      	movs	r6, #0
 8000b2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b2e:	4630      	mov	r0, r6
 8000b30:	4631      	mov	r1, r6
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	fab3 f683 	clz	r6, r3
 8000b3a:	2e00      	cmp	r6, #0
 8000b3c:	d14a      	bne.n	8000bd4 <__udivmoddi4+0x160>
 8000b3e:	428b      	cmp	r3, r1
 8000b40:	d302      	bcc.n	8000b48 <__udivmoddi4+0xd4>
 8000b42:	4282      	cmp	r2, r0
 8000b44:	f200 80f9 	bhi.w	8000d3a <__udivmoddi4+0x2c6>
 8000b48:	1a84      	subs	r4, r0, r2
 8000b4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b4e:	2001      	movs	r0, #1
 8000b50:	469e      	mov	lr, r3
 8000b52:	2d00      	cmp	r5, #0
 8000b54:	d0e0      	beq.n	8000b18 <__udivmoddi4+0xa4>
 8000b56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b5a:	e7dd      	b.n	8000b18 <__udivmoddi4+0xa4>
 8000b5c:	b902      	cbnz	r2, 8000b60 <__udivmoddi4+0xec>
 8000b5e:	deff      	udf	#255	; 0xff
 8000b60:	fab2 f282 	clz	r2, r2
 8000b64:	2a00      	cmp	r2, #0
 8000b66:	f040 8092 	bne.w	8000c8e <__udivmoddi4+0x21a>
 8000b6a:	eba1 010c 	sub.w	r1, r1, ip
 8000b6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b72:	fa1f fe8c 	uxth.w	lr, ip
 8000b76:	2601      	movs	r6, #1
 8000b78:	0c20      	lsrs	r0, r4, #16
 8000b7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b86:	fb0e f003 	mul.w	r0, lr, r3
 8000b8a:	4288      	cmp	r0, r1
 8000b8c:	d908      	bls.n	8000ba0 <__udivmoddi4+0x12c>
 8000b8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b92:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x12a>
 8000b98:	4288      	cmp	r0, r1
 8000b9a:	f200 80cb 	bhi.w	8000d34 <__udivmoddi4+0x2c0>
 8000b9e:	4643      	mov	r3, r8
 8000ba0:	1a09      	subs	r1, r1, r0
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ba8:	fb07 1110 	mls	r1, r7, r0, r1
 8000bac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bb4:	45a6      	cmp	lr, r4
 8000bb6:	d908      	bls.n	8000bca <__udivmoddi4+0x156>
 8000bb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bbc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bc0:	d202      	bcs.n	8000bc8 <__udivmoddi4+0x154>
 8000bc2:	45a6      	cmp	lr, r4
 8000bc4:	f200 80bb 	bhi.w	8000d3e <__udivmoddi4+0x2ca>
 8000bc8:	4608      	mov	r0, r1
 8000bca:	eba4 040e 	sub.w	r4, r4, lr
 8000bce:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bd2:	e79c      	b.n	8000b0e <__udivmoddi4+0x9a>
 8000bd4:	f1c6 0720 	rsb	r7, r6, #32
 8000bd8:	40b3      	lsls	r3, r6
 8000bda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bde:	ea4c 0c03 	orr.w	ip, ip, r3
 8000be2:	fa20 f407 	lsr.w	r4, r0, r7
 8000be6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bea:	431c      	orrs	r4, r3
 8000bec:	40f9      	lsrs	r1, r7
 8000bee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bf2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bf6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bfa:	0c20      	lsrs	r0, r4, #16
 8000bfc:	fa1f fe8c 	uxth.w	lr, ip
 8000c00:	fb09 1118 	mls	r1, r9, r8, r1
 8000c04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c08:	fb08 f00e 	mul.w	r0, r8, lr
 8000c0c:	4288      	cmp	r0, r1
 8000c0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c12:	d90b      	bls.n	8000c2c <__udivmoddi4+0x1b8>
 8000c14:	eb1c 0101 	adds.w	r1, ip, r1
 8000c18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c1c:	f080 8088 	bcs.w	8000d30 <__udivmoddi4+0x2bc>
 8000c20:	4288      	cmp	r0, r1
 8000c22:	f240 8085 	bls.w	8000d30 <__udivmoddi4+0x2bc>
 8000c26:	f1a8 0802 	sub.w	r8, r8, #2
 8000c2a:	4461      	add	r1, ip
 8000c2c:	1a09      	subs	r1, r1, r0
 8000c2e:	b2a4      	uxth	r4, r4
 8000c30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c34:	fb09 1110 	mls	r1, r9, r0, r1
 8000c38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c40:	458e      	cmp	lr, r1
 8000c42:	d908      	bls.n	8000c56 <__udivmoddi4+0x1e2>
 8000c44:	eb1c 0101 	adds.w	r1, ip, r1
 8000c48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c4c:	d26c      	bcs.n	8000d28 <__udivmoddi4+0x2b4>
 8000c4e:	458e      	cmp	lr, r1
 8000c50:	d96a      	bls.n	8000d28 <__udivmoddi4+0x2b4>
 8000c52:	3802      	subs	r0, #2
 8000c54:	4461      	add	r1, ip
 8000c56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c5e:	eba1 010e 	sub.w	r1, r1, lr
 8000c62:	42a1      	cmp	r1, r4
 8000c64:	46c8      	mov	r8, r9
 8000c66:	46a6      	mov	lr, r4
 8000c68:	d356      	bcc.n	8000d18 <__udivmoddi4+0x2a4>
 8000c6a:	d053      	beq.n	8000d14 <__udivmoddi4+0x2a0>
 8000c6c:	b15d      	cbz	r5, 8000c86 <__udivmoddi4+0x212>
 8000c6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c72:	eb61 010e 	sbc.w	r1, r1, lr
 8000c76:	fa01 f707 	lsl.w	r7, r1, r7
 8000c7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c7e:	40f1      	lsrs	r1, r6
 8000c80:	431f      	orrs	r7, r3
 8000c82:	e9c5 7100 	strd	r7, r1, [r5]
 8000c86:	2600      	movs	r6, #0
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	f1c2 0320 	rsb	r3, r2, #32
 8000c92:	40d8      	lsrs	r0, r3
 8000c94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c98:	fa21 f303 	lsr.w	r3, r1, r3
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4301      	orrs	r1, r0
 8000ca0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca4:	fa1f fe8c 	uxth.w	lr, ip
 8000ca8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cac:	fb07 3610 	mls	r6, r7, r0, r3
 8000cb0:	0c0b      	lsrs	r3, r1, #16
 8000cb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cb6:	fb00 f60e 	mul.w	r6, r0, lr
 8000cba:	429e      	cmp	r6, r3
 8000cbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x260>
 8000cc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cca:	d22f      	bcs.n	8000d2c <__udivmoddi4+0x2b8>
 8000ccc:	429e      	cmp	r6, r3
 8000cce:	d92d      	bls.n	8000d2c <__udivmoddi4+0x2b8>
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	4463      	add	r3, ip
 8000cd4:	1b9b      	subs	r3, r3, r6
 8000cd6:	b289      	uxth	r1, r1
 8000cd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cdc:	fb07 3316 	mls	r3, r7, r6, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x28a>
 8000cec:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cf4:	d216      	bcs.n	8000d24 <__udivmoddi4+0x2b0>
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d914      	bls.n	8000d24 <__udivmoddi4+0x2b0>
 8000cfa:	3e02      	subs	r6, #2
 8000cfc:	4461      	add	r1, ip
 8000cfe:	1ac9      	subs	r1, r1, r3
 8000d00:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d04:	e738      	b.n	8000b78 <__udivmoddi4+0x104>
 8000d06:	462e      	mov	r6, r5
 8000d08:	4628      	mov	r0, r5
 8000d0a:	e705      	b.n	8000b18 <__udivmoddi4+0xa4>
 8000d0c:	4606      	mov	r6, r0
 8000d0e:	e6e3      	b.n	8000ad8 <__udivmoddi4+0x64>
 8000d10:	4618      	mov	r0, r3
 8000d12:	e6f8      	b.n	8000b06 <__udivmoddi4+0x92>
 8000d14:	454b      	cmp	r3, r9
 8000d16:	d2a9      	bcs.n	8000c6c <__udivmoddi4+0x1f8>
 8000d18:	ebb9 0802 	subs.w	r8, r9, r2
 8000d1c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d20:	3801      	subs	r0, #1
 8000d22:	e7a3      	b.n	8000c6c <__udivmoddi4+0x1f8>
 8000d24:	4646      	mov	r6, r8
 8000d26:	e7ea      	b.n	8000cfe <__udivmoddi4+0x28a>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	e794      	b.n	8000c56 <__udivmoddi4+0x1e2>
 8000d2c:	4640      	mov	r0, r8
 8000d2e:	e7d1      	b.n	8000cd4 <__udivmoddi4+0x260>
 8000d30:	46d0      	mov	r8, sl
 8000d32:	e77b      	b.n	8000c2c <__udivmoddi4+0x1b8>
 8000d34:	3b02      	subs	r3, #2
 8000d36:	4461      	add	r1, ip
 8000d38:	e732      	b.n	8000ba0 <__udivmoddi4+0x12c>
 8000d3a:	4630      	mov	r0, r6
 8000d3c:	e709      	b.n	8000b52 <__udivmoddi4+0xde>
 8000d3e:	4464      	add	r4, ip
 8000d40:	3802      	subs	r0, #2
 8000d42:	e742      	b.n	8000bca <__udivmoddi4+0x156>

08000d44 <__aeabi_idiv0>:
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <AD7606_OS_SET>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void AD7606_OS_SET(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AD_OS0_GPIO_Port, AD_OS0_Pin, GPIO_PIN_RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2102      	movs	r1, #2
 8000d50:	4807      	ldr	r0, [pc, #28]	; (8000d70 <AD7606_OS_SET+0x28>)
 8000d52:	f001 fae9 	bl	8002328 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD_OS1_GPIO_Port, AD_OS1_Pin, GPIO_PIN_RESET);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2101      	movs	r1, #1
 8000d5a:	4805      	ldr	r0, [pc, #20]	; (8000d70 <AD7606_OS_SET+0x28>)
 8000d5c:	f001 fae4 	bl	8002328 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD_OS2_GPIO_Port, AD_OS2_Pin, GPIO_PIN_RESET);
 8000d60:	2200      	movs	r2, #0
 8000d62:	2108      	movs	r1, #8
 8000d64:	4803      	ldr	r0, [pc, #12]	; (8000d74 <AD7606_OS_SET+0x2c>)
 8000d66:	f001 fadf 	bl	8002328 <HAL_GPIO_WritePin>
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40020000 	.word	0x40020000
 8000d74:	40020800 	.word	0x40020800

08000d78 <AD7606_RST>:


void AD7606_RST(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AD_RST_GPIO_Port, AD_RST_Pin, GPIO_PIN_SET);
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	2104      	movs	r1, #4
 8000d80:	480b      	ldr	r0, [pc, #44]	; (8000db0 <AD7606_RST+0x38>)
 8000d82:	f001 fad1 	bl	8002328 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD_RST_GPIO_Port, AD_RST_Pin, GPIO_PIN_SET);
 8000d86:	2201      	movs	r2, #1
 8000d88:	2104      	movs	r1, #4
 8000d8a:	4809      	ldr	r0, [pc, #36]	; (8000db0 <AD7606_RST+0x38>)
 8000d8c:	f001 facc 	bl	8002328 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD_RST_GPIO_Port, AD_RST_Pin, GPIO_PIN_SET);
 8000d90:	2201      	movs	r2, #1
 8000d92:	2104      	movs	r1, #4
 8000d94:	4806      	ldr	r0, [pc, #24]	; (8000db0 <AD7606_RST+0x38>)
 8000d96:	f001 fac7 	bl	8002328 <HAL_GPIO_WritePin>
	AD7606_Delay(100);
 8000d9a:	2064      	movs	r0, #100	; 0x64
 8000d9c:	f000 f80a 	bl	8000db4 <AD7606_Delay>
	HAL_GPIO_WritePin(AD_RST_GPIO_Port, AD_RST_Pin, GPIO_PIN_RESET);
 8000da0:	2200      	movs	r2, #0
 8000da2:	2104      	movs	r1, #4
 8000da4:	4802      	ldr	r0, [pc, #8]	; (8000db0 <AD7606_RST+0x38>)
 8000da6:	f001 fabf 	bl	8002328 <HAL_GPIO_WritePin>
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40020800 	.word	0x40020800

08000db4 <AD7606_Delay>:

void AD7606_Delay (uint32_t Delay)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
	uint32_t i;
	for (i = 0; i < Delay; i++)
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	e003      	b.n	8000dca <AD7606_Delay+0x16>
	{
		__NOP();
 8000dc2:	bf00      	nop
	for (i = 0; i < Delay; i++)
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	68fa      	ldr	r2, [r7, #12]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d3f7      	bcc.n	8000dc2 <AD7606_Delay+0xe>
	}
	return;
 8000dd2:	bf00      	nop
}
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
	...

08000de0 <AD7606_StartReadBytes>:
void AD7606_StartReadBytes(SPI_HandleTypeDef *hspi, int16_t *pDst, uint16_t Length)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	4613      	mov	r3, r2
 8000dec:	80fb      	strh	r3, [r7, #6]
	while (HAL_GPIO_ReadPin(AD_BUSY_GPIO_Port, AD_BUSY_Pin) == GPIO_PIN_SET);
 8000dee:	bf00      	nop
 8000df0:	2110      	movs	r1, #16
 8000df2:	4808      	ldr	r0, [pc, #32]	; (8000e14 <AD7606_StartReadBytes+0x34>)
 8000df4:	f001 fa80 	bl	80022f8 <HAL_GPIO_ReadPin>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d0f8      	beq.n	8000df0 <AD7606_StartReadBytes+0x10>
	HAL_SPI_Receive_DMA(hspi, (uint8_t*)pDst, Length);
 8000dfe:	88fb      	ldrh	r3, [r7, #6]
 8000e00:	461a      	mov	r2, r3
 8000e02:	68b9      	ldr	r1, [r7, #8]
 8000e04:	68f8      	ldr	r0, [r7, #12]
 8000e06:	f003 fee5 	bl	8004bd4 <HAL_SPI_Receive_DMA>
	return;
 8000e0a:	bf00      	nop

}
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40020800 	.word	0x40020800

08000e18 <AD7606_ConvertToVoltage>:

void AD7606_ConvertToVoltage (uint16_t Length, int16_t *pSrc, float *pDst)
{
 8000e18:	b590      	push	{r4, r7, lr}
 8000e1a:	b087      	sub	sp, #28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
 8000e24:	81fb      	strh	r3, [r7, #14]
	uint16_t i;
	for (i = 0; i < Length; i++)
 8000e26:	2300      	movs	r3, #0
 8000e28:	82fb      	strh	r3, [r7, #22]
 8000e2a:	e03c      	b.n	8000ea6 <AD7606_ConvertToVoltage+0x8e>
	{
		pDst[i] = (float)pSrc[i] * 10.0 * 2.5 / 3.3 / 32768.0;
 8000e2c:	8afb      	ldrh	r3, [r7, #22]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	68ba      	ldr	r2, [r7, #8]
 8000e32:	4413      	add	r3, r2
 8000e34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e38:	ee07 3a90 	vmov	s15, r3
 8000e3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e40:	ee17 0a90 	vmov	r0, s15
 8000e44:	f7ff fb44 	bl	80004d0 <__aeabi_f2d>
 8000e48:	f04f 0200 	mov.w	r2, #0
 8000e4c:	4b1c      	ldr	r3, [pc, #112]	; (8000ec0 <AD7606_ConvertToVoltage+0xa8>)
 8000e4e:	f7ff fb97 	bl	8000580 <__aeabi_dmul>
 8000e52:	4602      	mov	r2, r0
 8000e54:	460b      	mov	r3, r1
 8000e56:	4610      	mov	r0, r2
 8000e58:	4619      	mov	r1, r3
 8000e5a:	f04f 0200 	mov.w	r2, #0
 8000e5e:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <AD7606_ConvertToVoltage+0xac>)
 8000e60:	f7ff fb8e 	bl	8000580 <__aeabi_dmul>
 8000e64:	4602      	mov	r2, r0
 8000e66:	460b      	mov	r3, r1
 8000e68:	4610      	mov	r0, r2
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	a312      	add	r3, pc, #72	; (adr r3, 8000eb8 <AD7606_ConvertToVoltage+0xa0>)
 8000e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e72:	f7ff fcaf 	bl	80007d4 <__aeabi_ddiv>
 8000e76:	4602      	mov	r2, r0
 8000e78:	460b      	mov	r3, r1
 8000e7a:	4610      	mov	r0, r2
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	f04f 0200 	mov.w	r2, #0
 8000e82:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <AD7606_ConvertToVoltage+0xb0>)
 8000e84:	f7ff fca6 	bl	80007d4 <__aeabi_ddiv>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	460b      	mov	r3, r1
 8000e8c:	4610      	mov	r0, r2
 8000e8e:	4619      	mov	r1, r3
 8000e90:	8afb      	ldrh	r3, [r7, #22]
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	18d4      	adds	r4, r2, r3
 8000e98:	f7ff fd84 	bl	80009a4 <__aeabi_d2f>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	6023      	str	r3, [r4, #0]
	for (i = 0; i < Length; i++)
 8000ea0:	8afb      	ldrh	r3, [r7, #22]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	82fb      	strh	r3, [r7, #22]
 8000ea6:	8afa      	ldrh	r2, [r7, #22]
 8000ea8:	89fb      	ldrh	r3, [r7, #14]
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d3be      	bcc.n	8000e2c <AD7606_ConvertToVoltage+0x14>
	}
	return;
 8000eae:	bf00      	nop
}
 8000eb0:	371c      	adds	r7, #28
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd90      	pop	{r4, r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	66666666 	.word	0x66666666
 8000ebc:	400a6666 	.word	0x400a6666
 8000ec0:	40240000 	.word	0x40240000
 8000ec4:	40040000 	.word	0x40040000
 8000ec8:	40e00000 	.word	0x40e00000

08000ecc <AD7606_CO_START>:


void AD7606_CO_START(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); //Start AD7606 Conversion
 8000ed0:	2104      	movs	r1, #4
 8000ed2:	4802      	ldr	r0, [pc, #8]	; (8000edc <AD7606_CO_START+0x10>)
 8000ed4:	f004 fb2a 	bl	800552c <HAL_TIM_PWM_Start>
}
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	200001f0 	.word	0x200001f0

08000ee0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee4:	f000 fb5c 	bl	80015a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee8:	f000 f822 	bl	8000f30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eec:	f000 f95c 	bl	80011a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ef0:	f000 f93a 	bl	8001168 <MX_DMA_Init>
  MX_TIM2_Init();
 8000ef4:	f000 f8c2 	bl	800107c <MX_TIM2_Init>
  MX_SPI1_Init();
 8000ef8:	f000 f888 	bl	800100c <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000efc:	f008 fce8 	bl	80098d0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  AD7606_OS_SET();
 8000f00:	f7ff ff22 	bl	8000d48 <AD7606_OS_SET>
  AD7606_RST();
 8000f04:	f7ff ff38 	bl	8000d78 <AD7606_RST>
  AD7606_CO_START();
 8000f08:	f7ff ffe0 	bl	8000ecc <AD7606_CO_START>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  AD7606_StartReadBytes(&hspi1, bufferi, 8);
 8000f0c:	2208      	movs	r2, #8
 8000f0e:	4905      	ldr	r1, [pc, #20]	; (8000f24 <main+0x44>)
 8000f10:	4805      	ldr	r0, [pc, #20]	; (8000f28 <main+0x48>)
 8000f12:	f7ff ff65 	bl	8000de0 <AD7606_StartReadBytes>
	  AD7606_ConvertToVoltage(8, bufferi, bufferf);
 8000f16:	4a05      	ldr	r2, [pc, #20]	; (8000f2c <main+0x4c>)
 8000f18:	4902      	ldr	r1, [pc, #8]	; (8000f24 <main+0x44>)
 8000f1a:	2008      	movs	r0, #8
 8000f1c:	f7ff ff7c 	bl	8000e18 <AD7606_ConvertToVoltage>
	  AD7606_StartReadBytes(&hspi1, bufferi, 8);
 8000f20:	e7f4      	b.n	8000f0c <main+0x2c>
 8000f22:	bf00      	nop
 8000f24:	20000000 	.word	0x20000000
 8000f28:	20000138 	.word	0x20000138
 8000f2c:	20000238 	.word	0x20000238

08000f30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b094      	sub	sp, #80	; 0x50
 8000f34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f36:	f107 031c 	add.w	r3, r7, #28
 8000f3a:	2234      	movs	r2, #52	; 0x34
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f009 fa54 	bl	800a3ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f44:	f107 0308 	add.w	r3, r7, #8
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f54:	2300      	movs	r3, #0
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	4b2a      	ldr	r3, [pc, #168]	; (8001004 <SystemClock_Config+0xd4>)
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5c:	4a29      	ldr	r2, [pc, #164]	; (8001004 <SystemClock_Config+0xd4>)
 8000f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f62:	6413      	str	r3, [r2, #64]	; 0x40
 8000f64:	4b27      	ldr	r3, [pc, #156]	; (8001004 <SystemClock_Config+0xd4>)
 8000f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f70:	2300      	movs	r3, #0
 8000f72:	603b      	str	r3, [r7, #0]
 8000f74:	4b24      	ldr	r3, [pc, #144]	; (8001008 <SystemClock_Config+0xd8>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f7c:	4a22      	ldr	r2, [pc, #136]	; (8001008 <SystemClock_Config+0xd8>)
 8000f7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f82:	6013      	str	r3, [r2, #0]
 8000f84:	4b20      	ldr	r3, [pc, #128]	; (8001008 <SystemClock_Config+0xd8>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f8c:	603b      	str	r3, [r7, #0]
 8000f8e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f90:	2301      	movs	r3, #1
 8000f92:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f98:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fa2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fa4:	2308      	movs	r3, #8
 8000fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fa8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000fac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000fae:	2304      	movs	r3, #4
 8000fb0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fb2:	2307      	movs	r3, #7
 8000fb4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fba:	f107 031c 	add.w	r3, r7, #28
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f003 fae0 	bl	8004584 <HAL_RCC_OscConfig>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000fca:	f000 f96d 	bl	80012a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fce:	230f      	movs	r3, #15
 8000fd0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fde:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fe4:	f107 0308 	add.w	r3, r7, #8
 8000fe8:	2102      	movs	r1, #2
 8000fea:	4618      	mov	r0, r3
 8000fec:	f002 fc7e 	bl	80038ec <HAL_RCC_ClockConfig>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000ff6:	f000 f957 	bl	80012a8 <Error_Handler>
  }
}
 8000ffa:	bf00      	nop
 8000ffc:	3750      	adds	r7, #80	; 0x50
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40023800 	.word	0x40023800
 8001008:	40007000 	.word	0x40007000

0800100c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001010:	4b18      	ldr	r3, [pc, #96]	; (8001074 <MX_SPI1_Init+0x68>)
 8001012:	4a19      	ldr	r2, [pc, #100]	; (8001078 <MX_SPI1_Init+0x6c>)
 8001014:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001016:	4b17      	ldr	r3, [pc, #92]	; (8001074 <MX_SPI1_Init+0x68>)
 8001018:	f44f 7282 	mov.w	r2, #260	; 0x104
 800101c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800101e:	4b15      	ldr	r3, [pc, #84]	; (8001074 <MX_SPI1_Init+0x68>)
 8001020:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001024:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001026:	4b13      	ldr	r3, [pc, #76]	; (8001074 <MX_SPI1_Init+0x68>)
 8001028:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800102c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800102e:	4b11      	ldr	r3, [pc, #68]	; (8001074 <MX_SPI1_Init+0x68>)
 8001030:	2202      	movs	r2, #2
 8001032:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001034:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <MX_SPI1_Init+0x68>)
 8001036:	2201      	movs	r2, #1
 8001038:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <MX_SPI1_Init+0x68>)
 800103c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001040:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <MX_SPI1_Init+0x68>)
 8001044:	2218      	movs	r2, #24
 8001046:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001048:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <MX_SPI1_Init+0x68>)
 800104a:	2200      	movs	r2, #0
 800104c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <MX_SPI1_Init+0x68>)
 8001050:	2200      	movs	r2, #0
 8001052:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001054:	4b07      	ldr	r3, [pc, #28]	; (8001074 <MX_SPI1_Init+0x68>)
 8001056:	2200      	movs	r2, #0
 8001058:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <MX_SPI1_Init+0x68>)
 800105c:	220a      	movs	r2, #10
 800105e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001060:	4804      	ldr	r0, [pc, #16]	; (8001074 <MX_SPI1_Init+0x68>)
 8001062:	f003 fd2d 	bl	8004ac0 <HAL_SPI_Init>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 800106c:	f000 f91c 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000138 	.word	0x20000138
 8001078:	40013000 	.word	0x40013000

0800107c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08e      	sub	sp, #56	; 0x38
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001082:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
 800108e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001090:	f107 0320 	add.w	r3, r7, #32
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
 80010a8:	615a      	str	r2, [r3, #20]
 80010aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */


  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010ac:	4b2d      	ldr	r3, [pc, #180]	; (8001164 <MX_TIM2_Init+0xe8>)
 80010ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840;
 80010b4:	4b2b      	ldr	r3, [pc, #172]	; (8001164 <MX_TIM2_Init+0xe8>)
 80010b6:	f44f 7252 	mov.w	r2, #840	; 0x348
 80010ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010bc:	4b29      	ldr	r3, [pc, #164]	; (8001164 <MX_TIM2_Init+0xe8>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80010c2:	4b28      	ldr	r3, [pc, #160]	; (8001164 <MX_TIM2_Init+0xe8>)
 80010c4:	2263      	movs	r2, #99	; 0x63
 80010c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c8:	4b26      	ldr	r3, [pc, #152]	; (8001164 <MX_TIM2_Init+0xe8>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ce:	4b25      	ldr	r3, [pc, #148]	; (8001164 <MX_TIM2_Init+0xe8>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010d4:	4823      	ldr	r0, [pc, #140]	; (8001164 <MX_TIM2_Init+0xe8>)
 80010d6:	f004 f981 	bl	80053dc <HAL_TIM_Base_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80010e0:	f000 f8e2 	bl	80012a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010ee:	4619      	mov	r1, r3
 80010f0:	481c      	ldr	r0, [pc, #112]	; (8001164 <MX_TIM2_Init+0xe8>)
 80010f2:	f004 fba5 	bl	8005840 <HAL_TIM_ConfigClockSource>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80010fc:	f000 f8d4 	bl	80012a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001100:	4818      	ldr	r0, [pc, #96]	; (8001164 <MX_TIM2_Init+0xe8>)
 8001102:	f004 f9ba 	bl	800547a <HAL_TIM_PWM_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800110c:	f000 f8cc 	bl	80012a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001110:	2300      	movs	r3, #0
 8001112:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001114:	2300      	movs	r3, #0
 8001116:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001118:	f107 0320 	add.w	r3, r7, #32
 800111c:	4619      	mov	r1, r3
 800111e:	4811      	ldr	r0, [pc, #68]	; (8001164 <MX_TIM2_Init+0xe8>)
 8001120:	f004 ff66 	bl	8005ff0 <HAL_TIMEx_MasterConfigSynchronization>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800112a:	f000 f8bd 	bl	80012a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800112e:	2360      	movs	r3, #96	; 0x60
 8001130:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 97;
 8001132:	2361      	movs	r3, #97	; 0x61
 8001134:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	2204      	movs	r2, #4
 8001142:	4619      	mov	r1, r3
 8001144:	4807      	ldr	r0, [pc, #28]	; (8001164 <MX_TIM2_Init+0xe8>)
 8001146:	f004 fab9 	bl	80056bc <HAL_TIM_PWM_ConfigChannel>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001150:	f000 f8aa 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */


  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001154:	4803      	ldr	r0, [pc, #12]	; (8001164 <MX_TIM2_Init+0xe8>)
 8001156:	f000 f971 	bl	800143c <HAL_TIM_MspPostInit>

}
 800115a:	bf00      	nop
 800115c:	3738      	adds	r7, #56	; 0x38
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200001f0 	.word	0x200001f0

08001168 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <MX_DMA_Init+0x3c>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a0b      	ldr	r2, [pc, #44]	; (80011a4 <MX_DMA_Init+0x3c>)
 8001178:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <MX_DMA_Init+0x3c>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800118a:	2200      	movs	r2, #0
 800118c:	2100      	movs	r1, #0
 800118e:	2038      	movs	r0, #56	; 0x38
 8001190:	f000 fb77 	bl	8001882 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001194:	2038      	movs	r0, #56	; 0x38
 8001196:	f000 fb90 	bl	80018ba <HAL_NVIC_EnableIRQ>

}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40023800 	.word	0x40023800

080011a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	; 0x28
 80011ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ae:	f107 0314 	add.w	r3, r7, #20
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]
 80011bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	613b      	str	r3, [r7, #16]
 80011c2:	4b36      	ldr	r3, [pc, #216]	; (800129c <MX_GPIO_Init+0xf4>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a35      	ldr	r2, [pc, #212]	; (800129c <MX_GPIO_Init+0xf4>)
 80011c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b33      	ldr	r3, [pc, #204]	; (800129c <MX_GPIO_Init+0xf4>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	4b2f      	ldr	r3, [pc, #188]	; (800129c <MX_GPIO_Init+0xf4>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a2e      	ldr	r2, [pc, #184]	; (800129c <MX_GPIO_Init+0xf4>)
 80011e4:	f043 0304 	orr.w	r3, r3, #4
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b2c      	ldr	r3, [pc, #176]	; (800129c <MX_GPIO_Init+0xf4>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0304 	and.w	r3, r3, #4
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	4b28      	ldr	r3, [pc, #160]	; (800129c <MX_GPIO_Init+0xf4>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a27      	ldr	r2, [pc, #156]	; (800129c <MX_GPIO_Init+0xf4>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b25      	ldr	r3, [pc, #148]	; (800129c <MX_GPIO_Init+0xf4>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	4b21      	ldr	r3, [pc, #132]	; (800129c <MX_GPIO_Init+0xf4>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a20      	ldr	r2, [pc, #128]	; (800129c <MX_GPIO_Init+0xf4>)
 800121c:	f043 0302 	orr.w	r3, r3, #2
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b1e      	ldr	r3, [pc, #120]	; (800129c <MX_GPIO_Init+0xf4>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD_RST_Pin|AD_OS2_Pin, GPIO_PIN_RESET);
 800122e:	2200      	movs	r2, #0
 8001230:	210c      	movs	r1, #12
 8001232:	481b      	ldr	r0, [pc, #108]	; (80012a0 <MX_GPIO_Init+0xf8>)
 8001234:	f001 f878 	bl	8002328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AD_OS1_Pin|AD_OS0_Pin, GPIO_PIN_RESET);
 8001238:	2200      	movs	r2, #0
 800123a:	2103      	movs	r1, #3
 800123c:	4819      	ldr	r0, [pc, #100]	; (80012a4 <MX_GPIO_Init+0xfc>)
 800123e:	f001 f873 	bl	8002328 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : AD_RST_Pin AD_OS2_Pin */
  GPIO_InitStruct.Pin = AD_RST_Pin|AD_OS2_Pin;
 8001242:	230c      	movs	r3, #12
 8001244:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001246:	2301      	movs	r3, #1
 8001248:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124e:	2300      	movs	r3, #0
 8001250:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	4619      	mov	r1, r3
 8001258:	4811      	ldr	r0, [pc, #68]	; (80012a0 <MX_GPIO_Init+0xf8>)
 800125a:	f000 feb9 	bl	8001fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD_OS1_Pin AD_OS0_Pin */
  GPIO_InitStruct.Pin = AD_OS1_Pin|AD_OS0_Pin;
 800125e:	2303      	movs	r3, #3
 8001260:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001262:	2301      	movs	r3, #1
 8001264:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126a:	2300      	movs	r3, #0
 800126c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126e:	f107 0314 	add.w	r3, r7, #20
 8001272:	4619      	mov	r1, r3
 8001274:	480b      	ldr	r0, [pc, #44]	; (80012a4 <MX_GPIO_Init+0xfc>)
 8001276:	f000 feab 	bl	8001fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD_BUSY_Pin AD_FRST_Pin */
  GPIO_InitStruct.Pin = AD_BUSY_Pin|AD_FRST_Pin;
 800127a:	2330      	movs	r3, #48	; 0x30
 800127c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800127e:	2300      	movs	r3, #0
 8001280:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	4619      	mov	r1, r3
 800128c:	4804      	ldr	r0, [pc, #16]	; (80012a0 <MX_GPIO_Init+0xf8>)
 800128e:	f000 fe9f 	bl	8001fd0 <HAL_GPIO_Init>

}
 8001292:	bf00      	nop
 8001294:	3728      	adds	r7, #40	; 0x28
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40023800 	.word	0x40023800
 80012a0:	40020800 	.word	0x40020800
 80012a4:	40020000 	.word	0x40020000

080012a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012ac:	b672      	cpsid	i
}
 80012ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <Error_Handler+0x8>
	...

080012b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	607b      	str	r3, [r7, #4]
 80012be:	4b10      	ldr	r3, [pc, #64]	; (8001300 <HAL_MspInit+0x4c>)
 80012c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c2:	4a0f      	ldr	r2, [pc, #60]	; (8001300 <HAL_MspInit+0x4c>)
 80012c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012c8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ca:	4b0d      	ldr	r3, [pc, #52]	; (8001300 <HAL_MspInit+0x4c>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	603b      	str	r3, [r7, #0]
 80012da:	4b09      	ldr	r3, [pc, #36]	; (8001300 <HAL_MspInit+0x4c>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	4a08      	ldr	r2, [pc, #32]	; (8001300 <HAL_MspInit+0x4c>)
 80012e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e4:	6413      	str	r3, [r2, #64]	; 0x40
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <HAL_MspInit+0x4c>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ee:	603b      	str	r3, [r7, #0]
 80012f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	40023800 	.word	0x40023800

08001304 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08a      	sub	sp, #40	; 0x28
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a31      	ldr	r2, [pc, #196]	; (80013e8 <HAL_SPI_MspInit+0xe4>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d15b      	bne.n	80013de <HAL_SPI_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	4b30      	ldr	r3, [pc, #192]	; (80013ec <HAL_SPI_MspInit+0xe8>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	4a2f      	ldr	r2, [pc, #188]	; (80013ec <HAL_SPI_MspInit+0xe8>)
 8001330:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001334:	6453      	str	r3, [r2, #68]	; 0x44
 8001336:	4b2d      	ldr	r3, [pc, #180]	; (80013ec <HAL_SPI_MspInit+0xe8>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800133e:	613b      	str	r3, [r7, #16]
 8001340:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	4b29      	ldr	r3, [pc, #164]	; (80013ec <HAL_SPI_MspInit+0xe8>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a28      	ldr	r2, [pc, #160]	; (80013ec <HAL_SPI_MspInit+0xe8>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b26      	ldr	r3, [pc, #152]	; (80013ec <HAL_SPI_MspInit+0xe8>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = AD_CS_Pin|AD_SCK_Pin|AD_DOU_A_Pin;
 800135e:	2370      	movs	r3, #112	; 0x70
 8001360:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001362:	2302      	movs	r3, #2
 8001364:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136a:	2300      	movs	r3, #0
 800136c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800136e:	2305      	movs	r3, #5
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001372:	f107 0314 	add.w	r3, r7, #20
 8001376:	4619      	mov	r1, r3
 8001378:	481d      	ldr	r0, [pc, #116]	; (80013f0 <HAL_SPI_MspInit+0xec>)
 800137a:	f000 fe29 	bl	8001fd0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 800137e:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <HAL_SPI_MspInit+0xf0>)
 8001380:	4a1d      	ldr	r2, [pc, #116]	; (80013f8 <HAL_SPI_MspInit+0xf4>)
 8001382:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001384:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <HAL_SPI_MspInit+0xf0>)
 8001386:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800138a:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800138c:	4b19      	ldr	r3, [pc, #100]	; (80013f4 <HAL_SPI_MspInit+0xf0>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001392:	4b18      	ldr	r3, [pc, #96]	; (80013f4 <HAL_SPI_MspInit+0xf0>)
 8001394:	2200      	movs	r2, #0
 8001396:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001398:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <HAL_SPI_MspInit+0xf0>)
 800139a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800139e:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013a0:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <HAL_SPI_MspInit+0xf0>)
 80013a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013a6:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013a8:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <HAL_SPI_MspInit+0xf0>)
 80013aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013ae:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80013b0:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <HAL_SPI_MspInit+0xf0>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013b6:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <HAL_SPI_MspInit+0xf0>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013bc:	4b0d      	ldr	r3, [pc, #52]	; (80013f4 <HAL_SPI_MspInit+0xf0>)
 80013be:	2200      	movs	r2, #0
 80013c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80013c2:	480c      	ldr	r0, [pc, #48]	; (80013f4 <HAL_SPI_MspInit+0xf0>)
 80013c4:	f000 fa94 	bl	80018f0 <HAL_DMA_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 80013ce:	f7ff ff6b 	bl	80012a8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a07      	ldr	r2, [pc, #28]	; (80013f4 <HAL_SPI_MspInit+0xf0>)
 80013d6:	64da      	str	r2, [r3, #76]	; 0x4c
 80013d8:	4a06      	ldr	r2, [pc, #24]	; (80013f4 <HAL_SPI_MspInit+0xf0>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80013de:	bf00      	nop
 80013e0:	3728      	adds	r7, #40	; 0x28
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40013000 	.word	0x40013000
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40020000 	.word	0x40020000
 80013f4:	20000190 	.word	0x20000190
 80013f8:	40026410 	.word	0x40026410

080013fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800140c:	d10d      	bne.n	800142a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <HAL_TIM_Base_MspInit+0x3c>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	4a08      	ldr	r2, [pc, #32]	; (8001438 <HAL_TIM_Base_MspInit+0x3c>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	6413      	str	r3, [r2, #64]	; 0x40
 800141e:	4b06      	ldr	r3, [pc, #24]	; (8001438 <HAL_TIM_Base_MspInit+0x3c>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800142a:	bf00      	nop
 800142c:	3714      	adds	r7, #20
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	40023800 	.word	0x40023800

0800143c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b088      	sub	sp, #32
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	f107 030c 	add.w	r3, r7, #12
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800145c:	d11d      	bne.n	800149a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <HAL_TIM_MspPostInit+0x68>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a0f      	ldr	r2, [pc, #60]	; (80014a4 <HAL_TIM_MspPostInit+0x68>)
 8001468:	f043 0302 	orr.w	r3, r3, #2
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b0d      	ldr	r3, [pc, #52]	; (80014a4 <HAL_TIM_MspPostInit+0x68>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = AD_CO_A_Pin;
 800147a:	2308      	movs	r3, #8
 800147c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147e:	2302      	movs	r3, #2
 8001480:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001482:	2301      	movs	r3, #1
 8001484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001486:	2300      	movs	r3, #0
 8001488:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800148a:	2301      	movs	r3, #1
 800148c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AD_CO_A_GPIO_Port, &GPIO_InitStruct);
 800148e:	f107 030c 	add.w	r3, r7, #12
 8001492:	4619      	mov	r1, r3
 8001494:	4804      	ldr	r0, [pc, #16]	; (80014a8 <HAL_TIM_MspPostInit+0x6c>)
 8001496:	f000 fd9b 	bl	8001fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800149a:	bf00      	nop
 800149c:	3720      	adds	r7, #32
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40020400 	.word	0x40020400

080014ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014b0:	e7fe      	b.n	80014b0 <NMI_Handler+0x4>

080014b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b6:	e7fe      	b.n	80014b6 <HardFault_Handler+0x4>

080014b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014bc:	e7fe      	b.n	80014bc <MemManage_Handler+0x4>

080014be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c2:	e7fe      	b.n	80014c2 <BusFault_Handler+0x4>

080014c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c8:	e7fe      	b.n	80014c8 <UsageFault_Handler+0x4>

080014ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014f8:	f000 f8a4 	bl	8001644 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}

08001500 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001504:	4802      	ldr	r0, [pc, #8]	; (8001510 <DMA2_Stream0_IRQHandler+0x10>)
 8001506:	f000 faf9 	bl	8001afc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000190 	.word	0x20000190

08001514 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001518:	4802      	ldr	r0, [pc, #8]	; (8001524 <OTG_FS_IRQHandler+0x10>)
 800151a:	f001 f875 	bl	8002608 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	2000173c 	.word	0x2000173c

08001528 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <SystemInit+0x20>)
 800152e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001532:	4a05      	ldr	r2, [pc, #20]	; (8001548 <SystemInit+0x20>)
 8001534:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001538:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800154c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001584 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001550:	480d      	ldr	r0, [pc, #52]	; (8001588 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001552:	490e      	ldr	r1, [pc, #56]	; (800158c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001554:	4a0e      	ldr	r2, [pc, #56]	; (8001590 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001556:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001558:	e002      	b.n	8001560 <LoopCopyDataInit>

0800155a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800155a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800155c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800155e:	3304      	adds	r3, #4

08001560 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001560:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001562:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001564:	d3f9      	bcc.n	800155a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001566:	4a0b      	ldr	r2, [pc, #44]	; (8001594 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001568:	4c0b      	ldr	r4, [pc, #44]	; (8001598 <LoopFillZerobss+0x26>)
  movs r3, #0
 800156a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800156c:	e001      	b.n	8001572 <LoopFillZerobss>

0800156e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800156e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001570:	3204      	adds	r2, #4

08001572 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001572:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001574:	d3fb      	bcc.n	800156e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001576:	f7ff ffd7 	bl	8001528 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800157a:	f008 ff13 	bl	800a3a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800157e:	f7ff fcaf 	bl	8000ee0 <main>
  bx  lr    
 8001582:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001584:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001588:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800158c:	2000011c 	.word	0x2000011c
  ldr r2, =_sidata
 8001590:	0800a484 	.word	0x0800a484
  ldr r2, =_sbss
 8001594:	2000011c 	.word	0x2000011c
  ldr r4, =_ebss
 8001598:	20001e68 	.word	0x20001e68

0800159c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800159c:	e7fe      	b.n	800159c <ADC_IRQHandler>
	...

080015a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015a4:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <HAL_Init+0x40>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a0d      	ldr	r2, [pc, #52]	; (80015e0 <HAL_Init+0x40>)
 80015aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015b0:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <HAL_Init+0x40>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a0a      	ldr	r2, [pc, #40]	; (80015e0 <HAL_Init+0x40>)
 80015b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015bc:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <HAL_Init+0x40>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a07      	ldr	r2, [pc, #28]	; (80015e0 <HAL_Init+0x40>)
 80015c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c8:	2003      	movs	r0, #3
 80015ca:	f000 f94f 	bl	800186c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ce:	200f      	movs	r0, #15
 80015d0:	f000 f808 	bl	80015e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015d4:	f7ff fe6e 	bl	80012b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40023c00 	.word	0x40023c00

080015e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015ec:	4b12      	ldr	r3, [pc, #72]	; (8001638 <HAL_InitTick+0x54>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4b12      	ldr	r3, [pc, #72]	; (800163c <HAL_InitTick+0x58>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	4619      	mov	r1, r3
 80015f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80015fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001602:	4618      	mov	r0, r3
 8001604:	f000 f967 	bl	80018d6 <HAL_SYSTICK_Config>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e00e      	b.n	8001630 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b0f      	cmp	r3, #15
 8001616:	d80a      	bhi.n	800162e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001618:	2200      	movs	r2, #0
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	f04f 30ff 	mov.w	r0, #4294967295
 8001620:	f000 f92f 	bl	8001882 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001624:	4a06      	ldr	r2, [pc, #24]	; (8001640 <HAL_InitTick+0x5c>)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800162a:	2300      	movs	r3, #0
 800162c:	e000      	b.n	8001630 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
}
 8001630:	4618      	mov	r0, r3
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000010 	.word	0x20000010
 800163c:	20000018 	.word	0x20000018
 8001640:	20000014 	.word	0x20000014

08001644 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001648:	4b06      	ldr	r3, [pc, #24]	; (8001664 <HAL_IncTick+0x20>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	461a      	mov	r2, r3
 800164e:	4b06      	ldr	r3, [pc, #24]	; (8001668 <HAL_IncTick+0x24>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4413      	add	r3, r2
 8001654:	4a04      	ldr	r2, [pc, #16]	; (8001668 <HAL_IncTick+0x24>)
 8001656:	6013      	str	r3, [r2, #0]
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	20000018 	.word	0x20000018
 8001668:	20000258 	.word	0x20000258

0800166c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  return uwTick;
 8001670:	4b03      	ldr	r3, [pc, #12]	; (8001680 <HAL_GetTick+0x14>)
 8001672:	681b      	ldr	r3, [r3, #0]
}
 8001674:	4618      	mov	r0, r3
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	20000258 	.word	0x20000258

08001684 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800168c:	f7ff ffee 	bl	800166c <HAL_GetTick>
 8001690:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800169c:	d005      	beq.n	80016aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800169e:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <HAL_Delay+0x44>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	461a      	mov	r2, r3
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	4413      	add	r3, r2
 80016a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016aa:	bf00      	nop
 80016ac:	f7ff ffde 	bl	800166c <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d8f7      	bhi.n	80016ac <HAL_Delay+0x28>
  {
  }
}
 80016bc:	bf00      	nop
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000018 	.word	0x20000018

080016cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016dc:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <__NVIC_SetPriorityGrouping+0x44>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016e2:	68ba      	ldr	r2, [r7, #8]
 80016e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016e8:	4013      	ands	r3, r2
 80016ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016fe:	4a04      	ldr	r2, [pc, #16]	; (8001710 <__NVIC_SetPriorityGrouping+0x44>)
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	60d3      	str	r3, [r2, #12]
}
 8001704:	bf00      	nop
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001718:	4b04      	ldr	r3, [pc, #16]	; (800172c <__NVIC_GetPriorityGrouping+0x18>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	0a1b      	lsrs	r3, r3, #8
 800171e:	f003 0307 	and.w	r3, r3, #7
}
 8001722:	4618      	mov	r0, r3
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800173a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173e:	2b00      	cmp	r3, #0
 8001740:	db0b      	blt.n	800175a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	f003 021f 	and.w	r2, r3, #31
 8001748:	4907      	ldr	r1, [pc, #28]	; (8001768 <__NVIC_EnableIRQ+0x38>)
 800174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174e:	095b      	lsrs	r3, r3, #5
 8001750:	2001      	movs	r0, #1
 8001752:	fa00 f202 	lsl.w	r2, r0, r2
 8001756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	e000e100 	.word	0xe000e100

0800176c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	6039      	str	r1, [r7, #0]
 8001776:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177c:	2b00      	cmp	r3, #0
 800177e:	db0a      	blt.n	8001796 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	b2da      	uxtb	r2, r3
 8001784:	490c      	ldr	r1, [pc, #48]	; (80017b8 <__NVIC_SetPriority+0x4c>)
 8001786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178a:	0112      	lsls	r2, r2, #4
 800178c:	b2d2      	uxtb	r2, r2
 800178e:	440b      	add	r3, r1
 8001790:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001794:	e00a      	b.n	80017ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	b2da      	uxtb	r2, r3
 800179a:	4908      	ldr	r1, [pc, #32]	; (80017bc <__NVIC_SetPriority+0x50>)
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	f003 030f 	and.w	r3, r3, #15
 80017a2:	3b04      	subs	r3, #4
 80017a4:	0112      	lsls	r2, r2, #4
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	440b      	add	r3, r1
 80017aa:	761a      	strb	r2, [r3, #24]
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	e000e100 	.word	0xe000e100
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b089      	sub	sp, #36	; 0x24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	f1c3 0307 	rsb	r3, r3, #7
 80017da:	2b04      	cmp	r3, #4
 80017dc:	bf28      	it	cs
 80017de:	2304      	movcs	r3, #4
 80017e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	3304      	adds	r3, #4
 80017e6:	2b06      	cmp	r3, #6
 80017e8:	d902      	bls.n	80017f0 <NVIC_EncodePriority+0x30>
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	3b03      	subs	r3, #3
 80017ee:	e000      	b.n	80017f2 <NVIC_EncodePriority+0x32>
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f4:	f04f 32ff 	mov.w	r2, #4294967295
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43da      	mvns	r2, r3
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	401a      	ands	r2, r3
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001808:	f04f 31ff 	mov.w	r1, #4294967295
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	fa01 f303 	lsl.w	r3, r1, r3
 8001812:	43d9      	mvns	r1, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001818:	4313      	orrs	r3, r2
         );
}
 800181a:	4618      	mov	r0, r3
 800181c:	3724      	adds	r7, #36	; 0x24
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
	...

08001828 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3b01      	subs	r3, #1
 8001834:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001838:	d301      	bcc.n	800183e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800183a:	2301      	movs	r3, #1
 800183c:	e00f      	b.n	800185e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800183e:	4a0a      	ldr	r2, [pc, #40]	; (8001868 <SysTick_Config+0x40>)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3b01      	subs	r3, #1
 8001844:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001846:	210f      	movs	r1, #15
 8001848:	f04f 30ff 	mov.w	r0, #4294967295
 800184c:	f7ff ff8e 	bl	800176c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001850:	4b05      	ldr	r3, [pc, #20]	; (8001868 <SysTick_Config+0x40>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001856:	4b04      	ldr	r3, [pc, #16]	; (8001868 <SysTick_Config+0x40>)
 8001858:	2207      	movs	r2, #7
 800185a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	e000e010 	.word	0xe000e010

0800186c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7ff ff29 	bl	80016cc <__NVIC_SetPriorityGrouping>
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001882:	b580      	push	{r7, lr}
 8001884:	b086      	sub	sp, #24
 8001886:	af00      	add	r7, sp, #0
 8001888:	4603      	mov	r3, r0
 800188a:	60b9      	str	r1, [r7, #8]
 800188c:	607a      	str	r2, [r7, #4]
 800188e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001894:	f7ff ff3e 	bl	8001714 <__NVIC_GetPriorityGrouping>
 8001898:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	68b9      	ldr	r1, [r7, #8]
 800189e:	6978      	ldr	r0, [r7, #20]
 80018a0:	f7ff ff8e 	bl	80017c0 <NVIC_EncodePriority>
 80018a4:	4602      	mov	r2, r0
 80018a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018aa:	4611      	mov	r1, r2
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ff5d 	bl	800176c <__NVIC_SetPriority>
}
 80018b2:	bf00      	nop
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	4603      	mov	r3, r0
 80018c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ff31 	bl	8001730 <__NVIC_EnableIRQ>
}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff ffa2 	bl	8001828 <SysTick_Config>
 80018e4:	4603      	mov	r3, r0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
	...

080018f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80018fc:	f7ff feb6 	bl	800166c <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d101      	bne.n	800190c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e099      	b.n	8001a40 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2202      	movs	r2, #2
 8001910:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f022 0201 	bic.w	r2, r2, #1
 800192a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800192c:	e00f      	b.n	800194e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800192e:	f7ff fe9d 	bl	800166c <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b05      	cmp	r3, #5
 800193a:	d908      	bls.n	800194e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2220      	movs	r2, #32
 8001940:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2203      	movs	r2, #3
 8001946:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e078      	b.n	8001a40 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1e8      	bne.n	800192e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	4b38      	ldr	r3, [pc, #224]	; (8001a48 <HAL_DMA_Init+0x158>)
 8001968:	4013      	ands	r3, r2
 800196a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800197a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001986:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001992:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a1b      	ldr	r3, [r3, #32]
 8001998:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	4313      	orrs	r3, r2
 800199e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a4:	2b04      	cmp	r3, #4
 80019a6:	d107      	bne.n	80019b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b0:	4313      	orrs	r3, r2
 80019b2:	697a      	ldr	r2, [r7, #20]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	697a      	ldr	r2, [r7, #20]
 80019be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	f023 0307 	bic.w	r3, r3, #7
 80019ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d4:	697a      	ldr	r2, [r7, #20]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019de:	2b04      	cmp	r3, #4
 80019e0:	d117      	bne.n	8001a12 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e6:	697a      	ldr	r2, [r7, #20]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d00e      	beq.n	8001a12 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f000 fa6f 	bl	8001ed8 <DMA_CheckFifoParam>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d008      	beq.n	8001a12 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2240      	movs	r2, #64	; 0x40
 8001a04:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e016      	b.n	8001a40 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 fa26 	bl	8001e6c <DMA_CalcBaseAndBitshift>
 8001a20:	4603      	mov	r3, r0
 8001a22:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a28:	223f      	movs	r2, #63	; 0x3f
 8001a2a:	409a      	lsls	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3718      	adds	r7, #24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	f010803f 	.word	0xf010803f

08001a4c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
 8001a58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a62:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d101      	bne.n	8001a72 <HAL_DMA_Start_IT+0x26>
 8001a6e:	2302      	movs	r3, #2
 8001a70:	e040      	b.n	8001af4 <HAL_DMA_Start_IT+0xa8>
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2201      	movs	r2, #1
 8001a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d12f      	bne.n	8001ae6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2202      	movs	r2, #2
 8001a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2200      	movs	r2, #0
 8001a92:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	68b9      	ldr	r1, [r7, #8]
 8001a9a:	68f8      	ldr	r0, [r7, #12]
 8001a9c:	f000 f9b8 	bl	8001e10 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa4:	223f      	movs	r2, #63	; 0x3f
 8001aa6:	409a      	lsls	r2, r3
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f042 0216 	orr.w	r2, r2, #22
 8001aba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d007      	beq.n	8001ad4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f042 0208 	orr.w	r2, r2, #8
 8001ad2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f042 0201 	orr.w	r2, r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	e005      	b.n	8001af2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001aee:	2302      	movs	r3, #2
 8001af0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001af2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b04:	2300      	movs	r3, #0
 8001b06:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b08:	4b8e      	ldr	r3, [pc, #568]	; (8001d44 <HAL_DMA_IRQHandler+0x248>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a8e      	ldr	r2, [pc, #568]	; (8001d48 <HAL_DMA_IRQHandler+0x24c>)
 8001b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b12:	0a9b      	lsrs	r3, r3, #10
 8001b14:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b26:	2208      	movs	r2, #8
 8001b28:	409a      	lsls	r2, r3
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d01a      	beq.n	8001b68 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d013      	beq.n	8001b68 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 0204 	bic.w	r2, r2, #4
 8001b4e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b54:	2208      	movs	r2, #8
 8001b56:	409a      	lsls	r2, r3
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b60:	f043 0201 	orr.w	r2, r3, #1
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	409a      	lsls	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4013      	ands	r3, r2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d012      	beq.n	8001b9e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d00b      	beq.n	8001b9e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	409a      	lsls	r2, r3
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b96:	f043 0202 	orr.w	r2, r3, #2
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba2:	2204      	movs	r2, #4
 8001ba4:	409a      	lsls	r2, r3
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d012      	beq.n	8001bd4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d00b      	beq.n	8001bd4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc0:	2204      	movs	r2, #4
 8001bc2:	409a      	lsls	r2, r3
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bcc:	f043 0204 	orr.w	r2, r3, #4
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd8:	2210      	movs	r2, #16
 8001bda:	409a      	lsls	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4013      	ands	r3, r2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d043      	beq.n	8001c6c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0308 	and.w	r3, r3, #8
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d03c      	beq.n	8001c6c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf6:	2210      	movs	r2, #16
 8001bf8:	409a      	lsls	r2, r3
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d018      	beq.n	8001c3e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d108      	bne.n	8001c2c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d024      	beq.n	8001c6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	4798      	blx	r3
 8001c2a:	e01f      	b.n	8001c6c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d01b      	beq.n	8001c6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	4798      	blx	r3
 8001c3c:	e016      	b.n	8001c6c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d107      	bne.n	8001c5c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f022 0208 	bic.w	r2, r2, #8
 8001c5a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d003      	beq.n	8001c6c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c70:	2220      	movs	r2, #32
 8001c72:	409a      	lsls	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	4013      	ands	r3, r2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	f000 808f 	beq.w	8001d9c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0310 	and.w	r3, r3, #16
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f000 8087 	beq.w	8001d9c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c92:	2220      	movs	r2, #32
 8001c94:	409a      	lsls	r2, r3
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b05      	cmp	r3, #5
 8001ca4:	d136      	bne.n	8001d14 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f022 0216 	bic.w	r2, r2, #22
 8001cb4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	695a      	ldr	r2, [r3, #20]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cc4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d103      	bne.n	8001cd6 <HAL_DMA_IRQHandler+0x1da>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d007      	beq.n	8001ce6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f022 0208 	bic.w	r2, r2, #8
 8001ce4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cea:	223f      	movs	r2, #63	; 0x3f
 8001cec:	409a      	lsls	r2, r3
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d07e      	beq.n	8001e08 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	4798      	blx	r3
        }
        return;
 8001d12:	e079      	b.n	8001e08 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d01d      	beq.n	8001d5e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d10d      	bne.n	8001d4c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d031      	beq.n	8001d9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	4798      	blx	r3
 8001d40:	e02c      	b.n	8001d9c <HAL_DMA_IRQHandler+0x2a0>
 8001d42:	bf00      	nop
 8001d44:	20000010 	.word	0x20000010
 8001d48:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d023      	beq.n	8001d9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	4798      	blx	r3
 8001d5c:	e01e      	b.n	8001d9c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d10f      	bne.n	8001d8c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f022 0210 	bic.w	r2, r2, #16
 8001d7a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d003      	beq.n	8001d9c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d032      	beq.n	8001e0a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d022      	beq.n	8001df6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2205      	movs	r2, #5
 8001db4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f022 0201 	bic.w	r2, r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d307      	bcc.n	8001de4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f2      	bne.n	8001dc8 <HAL_DMA_IRQHandler+0x2cc>
 8001de2:	e000      	b.n	8001de6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001de4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2201      	movs	r2, #1
 8001dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d005      	beq.n	8001e0a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	4798      	blx	r3
 8001e06:	e000      	b.n	8001e0a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001e08:	bf00      	nop
    }
  }
}
 8001e0a:	3718      	adds	r7, #24
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
 8001e1c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e2c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	2b40      	cmp	r3, #64	; 0x40
 8001e3c:	d108      	bne.n	8001e50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68ba      	ldr	r2, [r7, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001e4e:	e007      	b.n	8001e60 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68ba      	ldr	r2, [r7, #8]
 8001e56:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	60da      	str	r2, [r3, #12]
}
 8001e60:	bf00      	nop
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	3b10      	subs	r3, #16
 8001e7c:	4a14      	ldr	r2, [pc, #80]	; (8001ed0 <DMA_CalcBaseAndBitshift+0x64>)
 8001e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e82:	091b      	lsrs	r3, r3, #4
 8001e84:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e86:	4a13      	ldr	r2, [pc, #76]	; (8001ed4 <DMA_CalcBaseAndBitshift+0x68>)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2b03      	cmp	r3, #3
 8001e98:	d909      	bls.n	8001eae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001ea2:	f023 0303 	bic.w	r3, r3, #3
 8001ea6:	1d1a      	adds	r2, r3, #4
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	659a      	str	r2, [r3, #88]	; 0x58
 8001eac:	e007      	b.n	8001ebe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001eb6:	f023 0303 	bic.w	r3, r3, #3
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3714      	adds	r7, #20
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	aaaaaaab 	.word	0xaaaaaaab
 8001ed4:	0800a46c 	.word	0x0800a46c

08001ed8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d11f      	bne.n	8001f32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	2b03      	cmp	r3, #3
 8001ef6:	d856      	bhi.n	8001fa6 <DMA_CheckFifoParam+0xce>
 8001ef8:	a201      	add	r2, pc, #4	; (adr r2, 8001f00 <DMA_CheckFifoParam+0x28>)
 8001efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001efe:	bf00      	nop
 8001f00:	08001f11 	.word	0x08001f11
 8001f04:	08001f23 	.word	0x08001f23
 8001f08:	08001f11 	.word	0x08001f11
 8001f0c:	08001fa7 	.word	0x08001fa7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d046      	beq.n	8001faa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f20:	e043      	b.n	8001faa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f26:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f2a:	d140      	bne.n	8001fae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f30:	e03d      	b.n	8001fae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f3a:	d121      	bne.n	8001f80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	2b03      	cmp	r3, #3
 8001f40:	d837      	bhi.n	8001fb2 <DMA_CheckFifoParam+0xda>
 8001f42:	a201      	add	r2, pc, #4	; (adr r2, 8001f48 <DMA_CheckFifoParam+0x70>)
 8001f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f48:	08001f59 	.word	0x08001f59
 8001f4c:	08001f5f 	.word	0x08001f5f
 8001f50:	08001f59 	.word	0x08001f59
 8001f54:	08001f71 	.word	0x08001f71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8001f5c:	e030      	b.n	8001fc0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d025      	beq.n	8001fb6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f6e:	e022      	b.n	8001fb6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f74:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f78:	d11f      	bne.n	8001fba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f7e:	e01c      	b.n	8001fba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d903      	bls.n	8001f8e <DMA_CheckFifoParam+0xb6>
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	2b03      	cmp	r3, #3
 8001f8a:	d003      	beq.n	8001f94 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f8c:	e018      	b.n	8001fc0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	73fb      	strb	r3, [r7, #15]
      break;
 8001f92:	e015      	b.n	8001fc0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d00e      	beq.n	8001fbe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8001fa4:	e00b      	b.n	8001fbe <DMA_CheckFifoParam+0xe6>
      break;
 8001fa6:	bf00      	nop
 8001fa8:	e00a      	b.n	8001fc0 <DMA_CheckFifoParam+0xe8>
      break;
 8001faa:	bf00      	nop
 8001fac:	e008      	b.n	8001fc0 <DMA_CheckFifoParam+0xe8>
      break;
 8001fae:	bf00      	nop
 8001fb0:	e006      	b.n	8001fc0 <DMA_CheckFifoParam+0xe8>
      break;
 8001fb2:	bf00      	nop
 8001fb4:	e004      	b.n	8001fc0 <DMA_CheckFifoParam+0xe8>
      break;
 8001fb6:	bf00      	nop
 8001fb8:	e002      	b.n	8001fc0 <DMA_CheckFifoParam+0xe8>
      break;   
 8001fba:	bf00      	nop
 8001fbc:	e000      	b.n	8001fc0 <DMA_CheckFifoParam+0xe8>
      break;
 8001fbe:	bf00      	nop
    }
  } 
  
  return status; 
 8001fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3714      	adds	r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop

08001fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b089      	sub	sp, #36	; 0x24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61fb      	str	r3, [r7, #28]
 8001fea:	e165      	b.n	80022b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fec:	2201      	movs	r2, #1
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	697a      	ldr	r2, [r7, #20]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	429a      	cmp	r2, r3
 8002006:	f040 8154 	bne.w	80022b2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f003 0303 	and.w	r3, r3, #3
 8002012:	2b01      	cmp	r3, #1
 8002014:	d005      	beq.n	8002022 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800201e:	2b02      	cmp	r3, #2
 8002020:	d130      	bne.n	8002084 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	2203      	movs	r2, #3
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43db      	mvns	r3, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4013      	ands	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	68da      	ldr	r2, [r3, #12]
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4313      	orrs	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002058:	2201      	movs	r2, #1
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	091b      	lsrs	r3, r3, #4
 800206e:	f003 0201 	and.w	r2, r3, #1
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4313      	orrs	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f003 0303 	and.w	r3, r3, #3
 800208c:	2b03      	cmp	r3, #3
 800208e:	d017      	beq.n	80020c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	2203      	movs	r2, #3
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	43db      	mvns	r3, r3
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4013      	ands	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f003 0303 	and.w	r3, r3, #3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d123      	bne.n	8002114 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	08da      	lsrs	r2, r3, #3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3208      	adds	r2, #8
 80020d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	f003 0307 	and.w	r3, r3, #7
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	220f      	movs	r2, #15
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	43db      	mvns	r3, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4013      	ands	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	691a      	ldr	r2, [r3, #16]
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	4313      	orrs	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	08da      	lsrs	r2, r3, #3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	3208      	adds	r2, #8
 800210e:	69b9      	ldr	r1, [r7, #24]
 8002110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	2203      	movs	r2, #3
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4013      	ands	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f003 0203 	and.w	r2, r3, #3
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4313      	orrs	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002150:	2b00      	cmp	r3, #0
 8002152:	f000 80ae 	beq.w	80022b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	4b5d      	ldr	r3, [pc, #372]	; (80022d0 <HAL_GPIO_Init+0x300>)
 800215c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215e:	4a5c      	ldr	r2, [pc, #368]	; (80022d0 <HAL_GPIO_Init+0x300>)
 8002160:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002164:	6453      	str	r3, [r2, #68]	; 0x44
 8002166:	4b5a      	ldr	r3, [pc, #360]	; (80022d0 <HAL_GPIO_Init+0x300>)
 8002168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002172:	4a58      	ldr	r2, [pc, #352]	; (80022d4 <HAL_GPIO_Init+0x304>)
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	089b      	lsrs	r3, r3, #2
 8002178:	3302      	adds	r3, #2
 800217a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800217e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	220f      	movs	r2, #15
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43db      	mvns	r3, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4013      	ands	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a4f      	ldr	r2, [pc, #316]	; (80022d8 <HAL_GPIO_Init+0x308>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d025      	beq.n	80021ea <HAL_GPIO_Init+0x21a>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a4e      	ldr	r2, [pc, #312]	; (80022dc <HAL_GPIO_Init+0x30c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d01f      	beq.n	80021e6 <HAL_GPIO_Init+0x216>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a4d      	ldr	r2, [pc, #308]	; (80022e0 <HAL_GPIO_Init+0x310>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d019      	beq.n	80021e2 <HAL_GPIO_Init+0x212>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a4c      	ldr	r2, [pc, #304]	; (80022e4 <HAL_GPIO_Init+0x314>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d013      	beq.n	80021de <HAL_GPIO_Init+0x20e>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a4b      	ldr	r2, [pc, #300]	; (80022e8 <HAL_GPIO_Init+0x318>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d00d      	beq.n	80021da <HAL_GPIO_Init+0x20a>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a4a      	ldr	r2, [pc, #296]	; (80022ec <HAL_GPIO_Init+0x31c>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d007      	beq.n	80021d6 <HAL_GPIO_Init+0x206>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a49      	ldr	r2, [pc, #292]	; (80022f0 <HAL_GPIO_Init+0x320>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d101      	bne.n	80021d2 <HAL_GPIO_Init+0x202>
 80021ce:	2306      	movs	r3, #6
 80021d0:	e00c      	b.n	80021ec <HAL_GPIO_Init+0x21c>
 80021d2:	2307      	movs	r3, #7
 80021d4:	e00a      	b.n	80021ec <HAL_GPIO_Init+0x21c>
 80021d6:	2305      	movs	r3, #5
 80021d8:	e008      	b.n	80021ec <HAL_GPIO_Init+0x21c>
 80021da:	2304      	movs	r3, #4
 80021dc:	e006      	b.n	80021ec <HAL_GPIO_Init+0x21c>
 80021de:	2303      	movs	r3, #3
 80021e0:	e004      	b.n	80021ec <HAL_GPIO_Init+0x21c>
 80021e2:	2302      	movs	r3, #2
 80021e4:	e002      	b.n	80021ec <HAL_GPIO_Init+0x21c>
 80021e6:	2301      	movs	r3, #1
 80021e8:	e000      	b.n	80021ec <HAL_GPIO_Init+0x21c>
 80021ea:	2300      	movs	r3, #0
 80021ec:	69fa      	ldr	r2, [r7, #28]
 80021ee:	f002 0203 	and.w	r2, r2, #3
 80021f2:	0092      	lsls	r2, r2, #2
 80021f4:	4093      	lsls	r3, r2
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021fc:	4935      	ldr	r1, [pc, #212]	; (80022d4 <HAL_GPIO_Init+0x304>)
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	089b      	lsrs	r3, r3, #2
 8002202:	3302      	adds	r3, #2
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800220a:	4b3a      	ldr	r3, [pc, #232]	; (80022f4 <HAL_GPIO_Init+0x324>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	43db      	mvns	r3, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4013      	ands	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	4313      	orrs	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800222e:	4a31      	ldr	r2, [pc, #196]	; (80022f4 <HAL_GPIO_Init+0x324>)
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002234:	4b2f      	ldr	r3, [pc, #188]	; (80022f4 <HAL_GPIO_Init+0x324>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	43db      	mvns	r3, r3
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	4013      	ands	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d003      	beq.n	8002258 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	4313      	orrs	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002258:	4a26      	ldr	r2, [pc, #152]	; (80022f4 <HAL_GPIO_Init+0x324>)
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800225e:	4b25      	ldr	r3, [pc, #148]	; (80022f4 <HAL_GPIO_Init+0x324>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	43db      	mvns	r3, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4013      	ands	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002282:	4a1c      	ldr	r2, [pc, #112]	; (80022f4 <HAL_GPIO_Init+0x324>)
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002288:	4b1a      	ldr	r3, [pc, #104]	; (80022f4 <HAL_GPIO_Init+0x324>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	43db      	mvns	r3, r3
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4013      	ands	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d003      	beq.n	80022ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022ac:	4a11      	ldr	r2, [pc, #68]	; (80022f4 <HAL_GPIO_Init+0x324>)
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	3301      	adds	r3, #1
 80022b6:	61fb      	str	r3, [r7, #28]
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	2b0f      	cmp	r3, #15
 80022bc:	f67f ae96 	bls.w	8001fec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022c0:	bf00      	nop
 80022c2:	bf00      	nop
 80022c4:	3724      	adds	r7, #36	; 0x24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	40023800 	.word	0x40023800
 80022d4:	40013800 	.word	0x40013800
 80022d8:	40020000 	.word	0x40020000
 80022dc:	40020400 	.word	0x40020400
 80022e0:	40020800 	.word	0x40020800
 80022e4:	40020c00 	.word	0x40020c00
 80022e8:	40021000 	.word	0x40021000
 80022ec:	40021400 	.word	0x40021400
 80022f0:	40021800 	.word	0x40021800
 80022f4:	40013c00 	.word	0x40013c00

080022f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	460b      	mov	r3, r1
 8002302:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	691a      	ldr	r2, [r3, #16]
 8002308:	887b      	ldrh	r3, [r7, #2]
 800230a:	4013      	ands	r3, r2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d002      	beq.n	8002316 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002310:	2301      	movs	r3, #1
 8002312:	73fb      	strb	r3, [r7, #15]
 8002314:	e001      	b.n	800231a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002316:	2300      	movs	r3, #0
 8002318:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800231a:	7bfb      	ldrb	r3, [r7, #15]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	460b      	mov	r3, r1
 8002332:	807b      	strh	r3, [r7, #2]
 8002334:	4613      	mov	r3, r2
 8002336:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002338:	787b      	ldrb	r3, [r7, #1]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d003      	beq.n	8002346 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800233e:	887a      	ldrh	r2, [r7, #2]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002344:	e003      	b.n	800234e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002346:	887b      	ldrh	r3, [r7, #2]
 8002348:	041a      	lsls	r2, r3, #16
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	619a      	str	r2, [r3, #24]
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800235a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800235c:	b08f      	sub	sp, #60	; 0x3c
 800235e:	af0a      	add	r7, sp, #40	; 0x28
 8002360:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e116      	b.n	800259a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d106      	bne.n	800238c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f007 fc94 	bl	8009cb4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2203      	movs	r2, #3
 8002390:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239c:	2b00      	cmp	r3, #0
 800239e:	d102      	bne.n	80023a6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f003 ffb1 	bl	8006312 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	603b      	str	r3, [r7, #0]
 80023b6:	687e      	ldr	r6, [r7, #4]
 80023b8:	466d      	mov	r5, sp
 80023ba:	f106 0410 	add.w	r4, r6, #16
 80023be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80023ce:	1d33      	adds	r3, r6, #4
 80023d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023d2:	6838      	ldr	r0, [r7, #0]
 80023d4:	f003 fe88 	bl	80060e8 <USB_CoreInit>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d005      	beq.n	80023ea <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2202      	movs	r2, #2
 80023e2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e0d7      	b.n	800259a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2100      	movs	r1, #0
 80023f0:	4618      	mov	r0, r3
 80023f2:	f003 ff9f 	bl	8006334 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023f6:	2300      	movs	r3, #0
 80023f8:	73fb      	strb	r3, [r7, #15]
 80023fa:	e04a      	b.n	8002492 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023fc:	7bfa      	ldrb	r2, [r7, #15]
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	4613      	mov	r3, r2
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	4413      	add	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	440b      	add	r3, r1
 800240a:	333d      	adds	r3, #61	; 0x3d
 800240c:	2201      	movs	r2, #1
 800240e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002410:	7bfa      	ldrb	r2, [r7, #15]
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	4613      	mov	r3, r2
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	4413      	add	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	440b      	add	r3, r1
 800241e:	333c      	adds	r3, #60	; 0x3c
 8002420:	7bfa      	ldrb	r2, [r7, #15]
 8002422:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002424:	7bfa      	ldrb	r2, [r7, #15]
 8002426:	7bfb      	ldrb	r3, [r7, #15]
 8002428:	b298      	uxth	r0, r3
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	4613      	mov	r3, r2
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	4413      	add	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	440b      	add	r3, r1
 8002436:	3344      	adds	r3, #68	; 0x44
 8002438:	4602      	mov	r2, r0
 800243a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800243c:	7bfa      	ldrb	r2, [r7, #15]
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	4613      	mov	r3, r2
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	4413      	add	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	440b      	add	r3, r1
 800244a:	3340      	adds	r3, #64	; 0x40
 800244c:	2200      	movs	r2, #0
 800244e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002450:	7bfa      	ldrb	r2, [r7, #15]
 8002452:	6879      	ldr	r1, [r7, #4]
 8002454:	4613      	mov	r3, r2
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	4413      	add	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	440b      	add	r3, r1
 800245e:	3348      	adds	r3, #72	; 0x48
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002464:	7bfa      	ldrb	r2, [r7, #15]
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	4613      	mov	r3, r2
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	4413      	add	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	440b      	add	r3, r1
 8002472:	334c      	adds	r3, #76	; 0x4c
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002478:	7bfa      	ldrb	r2, [r7, #15]
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	4613      	mov	r3, r2
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	4413      	add	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	440b      	add	r3, r1
 8002486:	3354      	adds	r3, #84	; 0x54
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800248c:	7bfb      	ldrb	r3, [r7, #15]
 800248e:	3301      	adds	r3, #1
 8002490:	73fb      	strb	r3, [r7, #15]
 8002492:	7bfa      	ldrb	r2, [r7, #15]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	429a      	cmp	r2, r3
 800249a:	d3af      	bcc.n	80023fc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800249c:	2300      	movs	r3, #0
 800249e:	73fb      	strb	r3, [r7, #15]
 80024a0:	e044      	b.n	800252c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80024a2:	7bfa      	ldrb	r2, [r7, #15]
 80024a4:	6879      	ldr	r1, [r7, #4]
 80024a6:	4613      	mov	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	4413      	add	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	440b      	add	r3, r1
 80024b0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80024b4:	2200      	movs	r2, #0
 80024b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024b8:	7bfa      	ldrb	r2, [r7, #15]
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	4613      	mov	r3, r2
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	4413      	add	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	440b      	add	r3, r1
 80024c6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80024ca:	7bfa      	ldrb	r2, [r7, #15]
 80024cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024ce:	7bfa      	ldrb	r2, [r7, #15]
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	4613      	mov	r3, r2
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	4413      	add	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	440b      	add	r3, r1
 80024dc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80024e0:	2200      	movs	r2, #0
 80024e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024e4:	7bfa      	ldrb	r2, [r7, #15]
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	4613      	mov	r3, r2
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	4413      	add	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024fa:	7bfa      	ldrb	r2, [r7, #15]
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	4613      	mov	r3, r2
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	4413      	add	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	440b      	add	r3, r1
 8002508:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002510:	7bfa      	ldrb	r2, [r7, #15]
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	4613      	mov	r3, r2
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	4413      	add	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002526:	7bfb      	ldrb	r3, [r7, #15]
 8002528:	3301      	adds	r3, #1
 800252a:	73fb      	strb	r3, [r7, #15]
 800252c:	7bfa      	ldrb	r2, [r7, #15]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	429a      	cmp	r2, r3
 8002534:	d3b5      	bcc.n	80024a2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	603b      	str	r3, [r7, #0]
 800253c:	687e      	ldr	r6, [r7, #4]
 800253e:	466d      	mov	r5, sp
 8002540:	f106 0410 	add.w	r4, r6, #16
 8002544:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002546:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002548:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800254a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800254c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002550:	e885 0003 	stmia.w	r5, {r0, r1}
 8002554:	1d33      	adds	r3, r6, #4
 8002556:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002558:	6838      	ldr	r0, [r7, #0]
 800255a:	f003 ff37 	bl	80063cc <USB_DevInit>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d005      	beq.n	8002570 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2202      	movs	r2, #2
 8002568:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e014      	b.n	800259a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002584:	2b01      	cmp	r3, #1
 8002586:	d102      	bne.n	800258e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f001 f98b 	bl	80038a4 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f005 f879 	bl	800768a <USB_DevDisconnect>

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3714      	adds	r7, #20
 800259e:	46bd      	mov	sp, r7
 80025a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080025a2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b084      	sub	sp, #16
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d101      	bne.n	80025be <HAL_PCD_Start+0x1c>
 80025ba:	2302      	movs	r3, #2
 80025bc:	e020      	b.n	8002600 <HAL_PCD_Start+0x5e>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d109      	bne.n	80025e2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d005      	beq.n	80025e2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f003 fe82 	bl	80062f0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f005 f829 	bl	8007648 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002608:	b590      	push	{r4, r7, lr}
 800260a:	b08d      	sub	sp, #52	; 0x34
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002616:	6a3b      	ldr	r3, [r7, #32]
 8002618:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f005 f8e7 	bl	80077f2 <USB_GetMode>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	f040 84b7 	bne.w	8002f9a <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4618      	mov	r0, r3
 8002632:	f005 f84b 	bl	80076cc <USB_ReadInterrupts>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 84ad 	beq.w	8002f98 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	0a1b      	lsrs	r3, r3, #8
 8002648:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f005 f838 	bl	80076cc <USB_ReadInterrupts>
 800265c:	4603      	mov	r3, r0
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b02      	cmp	r3, #2
 8002664:	d107      	bne.n	8002676 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	695a      	ldr	r2, [r3, #20]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f002 0202 	and.w	r2, r2, #2
 8002674:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f005 f826 	bl	80076cc <USB_ReadInterrupts>
 8002680:	4603      	mov	r3, r0
 8002682:	f003 0310 	and.w	r3, r3, #16
 8002686:	2b10      	cmp	r3, #16
 8002688:	d161      	bne.n	800274e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	699a      	ldr	r2, [r3, #24]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 0210 	bic.w	r2, r2, #16
 8002698:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	f003 020f 	and.w	r2, r3, #15
 80026a6:	4613      	mov	r3, r2
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	4413      	add	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	4413      	add	r3, r2
 80026b6:	3304      	adds	r3, #4
 80026b8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	0c5b      	lsrs	r3, r3, #17
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d124      	bne.n	8002710 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80026cc:	4013      	ands	r3, r2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d035      	beq.n	800273e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	091b      	lsrs	r3, r3, #4
 80026da:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80026dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	461a      	mov	r2, r3
 80026e4:	6a38      	ldr	r0, [r7, #32]
 80026e6:	f004 fe5d 	bl	80073a4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	691a      	ldr	r2, [r3, #16]
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	091b      	lsrs	r3, r3, #4
 80026f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026f6:	441a      	add	r2, r3
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	6a1a      	ldr	r2, [r3, #32]
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	091b      	lsrs	r3, r3, #4
 8002704:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002708:	441a      	add	r2, r3
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	621a      	str	r2, [r3, #32]
 800270e:	e016      	b.n	800273e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	0c5b      	lsrs	r3, r3, #17
 8002714:	f003 030f 	and.w	r3, r3, #15
 8002718:	2b06      	cmp	r3, #6
 800271a:	d110      	bne.n	800273e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002722:	2208      	movs	r2, #8
 8002724:	4619      	mov	r1, r3
 8002726:	6a38      	ldr	r0, [r7, #32]
 8002728:	f004 fe3c 	bl	80073a4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	6a1a      	ldr	r2, [r3, #32]
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	091b      	lsrs	r3, r3, #4
 8002734:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002738:	441a      	add	r2, r3
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	699a      	ldr	r2, [r3, #24]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f042 0210 	orr.w	r2, r2, #16
 800274c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f004 ffba 	bl	80076cc <USB_ReadInterrupts>
 8002758:	4603      	mov	r3, r0
 800275a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800275e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002762:	f040 80a7 	bne.w	80028b4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002766:	2300      	movs	r3, #0
 8002768:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f004 ffbf 	bl	80076f2 <USB_ReadDevAllOutEpInterrupt>
 8002774:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002776:	e099      	b.n	80028ac <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 808e 	beq.w	80028a0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	4611      	mov	r1, r2
 800278e:	4618      	mov	r0, r3
 8002790:	f004 ffe3 	bl	800775a <USB_ReadDevOutEPInterrupt>
 8002794:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00c      	beq.n	80027ba <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	015a      	lsls	r2, r3, #5
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	4413      	add	r3, r2
 80027a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027ac:	461a      	mov	r2, r3
 80027ae:	2301      	movs	r3, #1
 80027b0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80027b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 feef 	bl	8003598 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	f003 0308 	and.w	r3, r3, #8
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00c      	beq.n	80027de <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	015a      	lsls	r2, r3, #5
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	4413      	add	r3, r2
 80027cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027d0:	461a      	mov	r2, r3
 80027d2:	2308      	movs	r3, #8
 80027d4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80027d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 ffc5 	bl	8003768 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	f003 0310 	and.w	r3, r3, #16
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d008      	beq.n	80027fa <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80027e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ea:	015a      	lsls	r2, r3, #5
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	4413      	add	r3, r2
 80027f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027f4:	461a      	mov	r2, r3
 80027f6:	2310      	movs	r3, #16
 80027f8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d030      	beq.n	8002866 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002804:	6a3b      	ldr	r3, [r7, #32]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800280c:	2b80      	cmp	r3, #128	; 0x80
 800280e:	d109      	bne.n	8002824 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	69fa      	ldr	r2, [r7, #28]
 800281a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800281e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002822:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002826:	4613      	mov	r3, r2
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	4413      	add	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	4413      	add	r3, r2
 8002836:	3304      	adds	r3, #4
 8002838:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	78db      	ldrb	r3, [r3, #3]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d108      	bne.n	8002854 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	2200      	movs	r2, #0
 8002846:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	b2db      	uxtb	r3, r3
 800284c:	4619      	mov	r1, r3
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f007 fb4c 	bl	8009eec <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	015a      	lsls	r2, r3, #5
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	4413      	add	r3, r2
 800285c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002860:	461a      	mov	r2, r3
 8002862:	2302      	movs	r3, #2
 8002864:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	f003 0320 	and.w	r3, r3, #32
 800286c:	2b00      	cmp	r3, #0
 800286e:	d008      	beq.n	8002882 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002872:	015a      	lsls	r2, r3, #5
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	4413      	add	r3, r2
 8002878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800287c:	461a      	mov	r2, r3
 800287e:	2320      	movs	r3, #32
 8002880:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d009      	beq.n	80028a0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	015a      	lsls	r2, r3, #5
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	4413      	add	r3, r2
 8002894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002898:	461a      	mov	r2, r3
 800289a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800289e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80028a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a2:	3301      	adds	r3, #1
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80028a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a8:	085b      	lsrs	r3, r3, #1
 80028aa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80028ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f47f af62 	bne.w	8002778 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f004 ff07 	bl	80076cc <USB_ReadInterrupts>
 80028be:	4603      	mov	r3, r0
 80028c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80028c8:	f040 80db 	bne.w	8002a82 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f004 ff28 	bl	8007726 <USB_ReadDevAllInEpInterrupt>
 80028d6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80028d8:	2300      	movs	r3, #0
 80028da:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80028dc:	e0cd      	b.n	8002a7a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80028de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 80c2 	beq.w	8002a6e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f0:	b2d2      	uxtb	r2, r2
 80028f2:	4611      	mov	r1, r2
 80028f4:	4618      	mov	r0, r3
 80028f6:	f004 ff4e 	bl	8007796 <USB_ReadDevInEPInterrupt>
 80028fa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b00      	cmp	r3, #0
 8002904:	d057      	beq.n	80029b6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	f003 030f 	and.w	r3, r3, #15
 800290c:	2201      	movs	r2, #1
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800291a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	43db      	mvns	r3, r3
 8002920:	69f9      	ldr	r1, [r7, #28]
 8002922:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002926:	4013      	ands	r3, r2
 8002928:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	015a      	lsls	r2, r3, #5
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	4413      	add	r3, r2
 8002932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002936:	461a      	mov	r2, r3
 8002938:	2301      	movs	r3, #1
 800293a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d132      	bne.n	80029aa <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002948:	4613      	mov	r3, r2
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	4413      	add	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	334c      	adds	r3, #76	; 0x4c
 8002954:	6819      	ldr	r1, [r3, #0]
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800295a:	4613      	mov	r3, r2
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	4413      	add	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4403      	add	r3, r0
 8002964:	3348      	adds	r3, #72	; 0x48
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4419      	add	r1, r3
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800296e:	4613      	mov	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	4413      	add	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4403      	add	r3, r0
 8002978:	334c      	adds	r3, #76	; 0x4c
 800297a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	2b00      	cmp	r3, #0
 8002980:	d113      	bne.n	80029aa <HAL_PCD_IRQHandler+0x3a2>
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002986:	4613      	mov	r3, r2
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	4413      	add	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	440b      	add	r3, r1
 8002990:	3354      	adds	r3, #84	; 0x54
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d108      	bne.n	80029aa <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6818      	ldr	r0, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80029a2:	461a      	mov	r2, r3
 80029a4:	2101      	movs	r1, #1
 80029a6:	f004 ff55 	bl	8007854 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	4619      	mov	r1, r3
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f007 fa16 	bl	8009de2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	f003 0308 	and.w	r3, r3, #8
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d008      	beq.n	80029d2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	015a      	lsls	r2, r3, #5
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	4413      	add	r3, r2
 80029c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029cc:	461a      	mov	r2, r3
 80029ce:	2308      	movs	r3, #8
 80029d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	f003 0310 	and.w	r3, r3, #16
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d008      	beq.n	80029ee <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80029dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029de:	015a      	lsls	r2, r3, #5
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	4413      	add	r3, r2
 80029e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029e8:	461a      	mov	r2, r3
 80029ea:	2310      	movs	r3, #16
 80029ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d008      	beq.n	8002a0a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80029f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fa:	015a      	lsls	r2, r3, #5
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	4413      	add	r3, r2
 8002a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a04:	461a      	mov	r2, r3
 8002a06:	2340      	movs	r3, #64	; 0x40
 8002a08:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d023      	beq.n	8002a5c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002a14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a16:	6a38      	ldr	r0, [r7, #32]
 8002a18:	f003 fe36 	bl	8006688 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a1e:	4613      	mov	r3, r2
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	4413      	add	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	3338      	adds	r3, #56	; 0x38
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	3304      	adds	r3, #4
 8002a2e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	78db      	ldrb	r3, [r3, #3]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d108      	bne.n	8002a4a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	4619      	mov	r1, r3
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f007 fa63 	bl	8009f10 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4c:	015a      	lsls	r2, r3, #5
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	4413      	add	r3, r2
 8002a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a56:	461a      	mov	r2, r3
 8002a58:	2302      	movs	r3, #2
 8002a5a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002a66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 fd08 	bl	800347e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	3301      	adds	r3, #1
 8002a72:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a76:	085b      	lsrs	r3, r3, #1
 8002a78:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f47f af2e 	bne.w	80028de <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f004 fe20 	bl	80076cc <USB_ReadInterrupts>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a96:	d122      	bne.n	8002ade <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	69fa      	ldr	r2, [r7, #28]
 8002aa2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aa6:	f023 0301 	bic.w	r3, r3, #1
 8002aaa:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d108      	bne.n	8002ac8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002abe:	2100      	movs	r1, #0
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f007 fbdd 	bl	800a280 <HAL_PCDEx_LPM_Callback>
 8002ac6:	e002      	b.n	8002ace <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f007 fa01 	bl	8009ed0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	695a      	ldr	r2, [r3, #20]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002adc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f004 fdf2 	bl	80076cc <USB_ReadInterrupts>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002af2:	d112      	bne.n	8002b1a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d102      	bne.n	8002b0a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f007 f9bd 	bl	8009e84 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	695a      	ldr	r2, [r3, #20]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002b18:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f004 fdd4 	bl	80076cc <USB_ReadInterrupts>
 8002b24:	4603      	mov	r3, r0
 8002b26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b2e:	d121      	bne.n	8002b74 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	695a      	ldr	r2, [r3, #20]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002b3e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d111      	bne.n	8002b6e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b58:	089b      	lsrs	r3, r3, #2
 8002b5a:	f003 020f 	and.w	r2, r3, #15
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002b64:	2101      	movs	r1, #1
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f007 fb8a 	bl	800a280 <HAL_PCDEx_LPM_Callback>
 8002b6c:	e002      	b.n	8002b74 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f007 f988 	bl	8009e84 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f004 fda7 	bl	80076cc <USB_ReadInterrupts>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b88:	f040 80b7 	bne.w	8002cfa <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	69fa      	ldr	r2, [r7, #28]
 8002b96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b9a:	f023 0301 	bic.w	r3, r3, #1
 8002b9e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2110      	movs	r1, #16
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f003 fd6e 	bl	8006688 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bac:	2300      	movs	r3, #0
 8002bae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bb0:	e046      	b.n	8002c40 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb4:	015a      	lsls	r2, r3, #5
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	4413      	add	r3, r2
 8002bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002bc4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc8:	015a      	lsls	r2, r3, #5
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	4413      	add	r3, r2
 8002bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bd6:	0151      	lsls	r1, r2, #5
 8002bd8:	69fa      	ldr	r2, [r7, #28]
 8002bda:	440a      	add	r2, r1
 8002bdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002be0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002be4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be8:	015a      	lsls	r2, r3, #5
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	4413      	add	r3, r2
 8002bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002bf8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bfc:	015a      	lsls	r2, r3, #5
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	4413      	add	r3, r2
 8002c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c0a:	0151      	lsls	r1, r2, #5
 8002c0c:	69fa      	ldr	r2, [r7, #28]
 8002c0e:	440a      	add	r2, r1
 8002c10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c14:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c18:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c1c:	015a      	lsls	r2, r3, #5
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	4413      	add	r3, r2
 8002c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c2a:	0151      	lsls	r1, r2, #5
 8002c2c:	69fa      	ldr	r2, [r7, #28]
 8002c2e:	440a      	add	r2, r1
 8002c30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c34:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002c38:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d3b3      	bcc.n	8002bb2 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c50:	69db      	ldr	r3, [r3, #28]
 8002c52:	69fa      	ldr	r2, [r7, #28]
 8002c54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c58:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002c5c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d016      	beq.n	8002c94 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c70:	69fa      	ldr	r2, [r7, #28]
 8002c72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c76:	f043 030b 	orr.w	r3, r3, #11
 8002c7a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c86:	69fa      	ldr	r2, [r7, #28]
 8002c88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c8c:	f043 030b 	orr.w	r3, r3, #11
 8002c90:	6453      	str	r3, [r2, #68]	; 0x44
 8002c92:	e015      	b.n	8002cc0 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	69fa      	ldr	r2, [r7, #28]
 8002c9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ca2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ca6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002caa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	69fa      	ldr	r2, [r7, #28]
 8002cb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cba:	f043 030b 	orr.w	r3, r3, #11
 8002cbe:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	69fa      	ldr	r2, [r7, #28]
 8002cca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cce:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002cd2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6818      	ldr	r0, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	f004 fdb5 	bl	8007854 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	695a      	ldr	r2, [r3, #20]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002cf8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f004 fce4 	bl	80076cc <USB_ReadInterrupts>
 8002d04:	4603      	mov	r3, r0
 8002d06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d0e:	d124      	bne.n	8002d5a <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f004 fd7a 	bl	800780e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f003 fd2f 	bl	8006782 <USB_GetDevSpeed>
 8002d24:	4603      	mov	r3, r0
 8002d26:	461a      	mov	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681c      	ldr	r4, [r3, #0]
 8002d30:	f000 fec2 	bl	8003ab8 <HAL_RCC_GetHCLKFreq>
 8002d34:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	4620      	mov	r0, r4
 8002d40:	f003 fa34 	bl	80061ac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f007 f874 	bl	8009e32 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	695a      	ldr	r2, [r3, #20]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002d58:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f004 fcb4 	bl	80076cc <USB_ReadInterrupts>
 8002d64:	4603      	mov	r3, r0
 8002d66:	f003 0308 	and.w	r3, r3, #8
 8002d6a:	2b08      	cmp	r3, #8
 8002d6c:	d10a      	bne.n	8002d84 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f007 f851 	bl	8009e16 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	695a      	ldr	r2, [r3, #20]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f002 0208 	and.w	r2, r2, #8
 8002d82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f004 fc9f 	bl	80076cc <USB_ReadInterrupts>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d94:	2b80      	cmp	r3, #128	; 0x80
 8002d96:	d122      	bne.n	8002dde <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002d98:	6a3b      	ldr	r3, [r7, #32]
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002da0:	6a3b      	ldr	r3, [r7, #32]
 8002da2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002da4:	2301      	movs	r3, #1
 8002da6:	627b      	str	r3, [r7, #36]	; 0x24
 8002da8:	e014      	b.n	8002dd4 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002daa:	6879      	ldr	r1, [r7, #4]
 8002dac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dae:	4613      	mov	r3, r2
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	4413      	add	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	440b      	add	r3, r1
 8002db8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d105      	bne.n	8002dce <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 fb27 	bl	800341c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d3e5      	bcc.n	8002daa <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f004 fc72 	bl	80076cc <USB_ReadInterrupts>
 8002de8:	4603      	mov	r3, r0
 8002dea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002df2:	d13b      	bne.n	8002e6c <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002df4:	2301      	movs	r3, #1
 8002df6:	627b      	str	r3, [r7, #36]	; 0x24
 8002df8:	e02b      	b.n	8002e52 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfc:	015a      	lsls	r2, r3, #5
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	4413      	add	r3, r2
 8002e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e0e:	4613      	mov	r3, r2
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	4413      	add	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	440b      	add	r3, r1
 8002e18:	3340      	adds	r3, #64	; 0x40
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d115      	bne.n	8002e4c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002e20:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	da12      	bge.n	8002e4c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	4413      	add	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	440b      	add	r3, r1
 8002e34:	333f      	adds	r3, #63	; 0x3f
 8002e36:	2201      	movs	r2, #1
 8002e38:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	4619      	mov	r1, r3
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 fae8 	bl	800341c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4e:	3301      	adds	r3, #1
 8002e50:	627b      	str	r3, [r7, #36]	; 0x24
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d3ce      	bcc.n	8002dfa <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	695a      	ldr	r2, [r3, #20]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002e6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f004 fc2b 	bl	80076cc <USB_ReadInterrupts>
 8002e76:	4603      	mov	r3, r0
 8002e78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e80:	d155      	bne.n	8002f2e <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e82:	2301      	movs	r3, #1
 8002e84:	627b      	str	r3, [r7, #36]	; 0x24
 8002e86:	e045      	b.n	8002f14 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8a:	015a      	lsls	r2, r3, #5
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	4413      	add	r3, r2
 8002e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e98:	6879      	ldr	r1, [r7, #4]
 8002e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	4413      	add	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d12e      	bne.n	8002f0e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002eb0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	da2b      	bge.n	8002f0e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002ec2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d121      	bne.n	8002f0e <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ece:	4613      	mov	r3, r2
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	4413      	add	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	440b      	add	r3, r1
 8002ed8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002edc:	2201      	movs	r2, #1
 8002ede:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002ee0:	6a3b      	ldr	r3, [r7, #32]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002ee8:	6a3b      	ldr	r3, [r7, #32]
 8002eea:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002eec:	6a3b      	ldr	r3, [r7, #32]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10a      	bne.n	8002f0e <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	69fa      	ldr	r2, [r7, #28]
 8002f02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f0a:	6053      	str	r3, [r2, #4]
            break;
 8002f0c:	e007      	b.n	8002f1e <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	3301      	adds	r3, #1
 8002f12:	627b      	str	r3, [r7, #36]	; 0x24
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d3b4      	bcc.n	8002e88 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	695a      	ldr	r2, [r3, #20]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002f2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f004 fbca 	bl	80076cc <USB_ReadInterrupts>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f42:	d10a      	bne.n	8002f5a <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f006 fff5 	bl	8009f34 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	695a      	ldr	r2, [r3, #20]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002f58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f004 fbb4 	bl	80076cc <USB_ReadInterrupts>
 8002f64:	4603      	mov	r3, r0
 8002f66:	f003 0304 	and.w	r3, r3, #4
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	d115      	bne.n	8002f9a <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	f003 0304 	and.w	r3, r3, #4
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d002      	beq.n	8002f86 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f006 ffe5 	bl	8009f50 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6859      	ldr	r1, [r3, #4]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	605a      	str	r2, [r3, #4]
 8002f96:	e000      	b.n	8002f9a <HAL_PCD_IRQHandler+0x992>
      return;
 8002f98:	bf00      	nop
    }
  }
}
 8002f9a:	3734      	adds	r7, #52	; 0x34
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd90      	pop	{r4, r7, pc}

08002fa0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	460b      	mov	r3, r1
 8002faa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d101      	bne.n	8002fba <HAL_PCD_SetAddress+0x1a>
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	e013      	b.n	8002fe2 <HAL_PCD_SetAddress+0x42>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	78fa      	ldrb	r2, [r7, #3]
 8002fc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	78fa      	ldrb	r2, [r7, #3]
 8002fd0:	4611      	mov	r1, r2
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f004 fb12 	bl	80075fc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b084      	sub	sp, #16
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
 8002ff2:	4608      	mov	r0, r1
 8002ff4:	4611      	mov	r1, r2
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	70fb      	strb	r3, [r7, #3]
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	803b      	strh	r3, [r7, #0]
 8003000:	4613      	mov	r3, r2
 8003002:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003004:	2300      	movs	r3, #0
 8003006:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003008:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800300c:	2b00      	cmp	r3, #0
 800300e:	da0f      	bge.n	8003030 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003010:	78fb      	ldrb	r3, [r7, #3]
 8003012:	f003 020f 	and.w	r2, r3, #15
 8003016:	4613      	mov	r3, r2
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	4413      	add	r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	3338      	adds	r3, #56	; 0x38
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	4413      	add	r3, r2
 8003024:	3304      	adds	r3, #4
 8003026:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2201      	movs	r2, #1
 800302c:	705a      	strb	r2, [r3, #1]
 800302e:	e00f      	b.n	8003050 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003030:	78fb      	ldrb	r3, [r7, #3]
 8003032:	f003 020f 	and.w	r2, r3, #15
 8003036:	4613      	mov	r3, r2
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	4413      	add	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	4413      	add	r3, r2
 8003046:	3304      	adds	r3, #4
 8003048:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003050:	78fb      	ldrb	r3, [r7, #3]
 8003052:	f003 030f 	and.w	r3, r3, #15
 8003056:	b2da      	uxtb	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800305c:	883a      	ldrh	r2, [r7, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	78ba      	ldrb	r2, [r7, #2]
 8003066:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	785b      	ldrb	r3, [r3, #1]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d004      	beq.n	800307a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	b29a      	uxth	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800307a:	78bb      	ldrb	r3, [r7, #2]
 800307c:	2b02      	cmp	r3, #2
 800307e:	d102      	bne.n	8003086 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800308c:	2b01      	cmp	r3, #1
 800308e:	d101      	bne.n	8003094 <HAL_PCD_EP_Open+0xaa>
 8003090:	2302      	movs	r3, #2
 8003092:	e00e      	b.n	80030b2 <HAL_PCD_EP_Open+0xc8>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68f9      	ldr	r1, [r7, #12]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f003 fb92 	bl	80067cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80030b0:	7afb      	ldrb	r3, [r7, #11]
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b084      	sub	sp, #16
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
 80030c2:	460b      	mov	r3, r1
 80030c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	da0f      	bge.n	80030ee <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030ce:	78fb      	ldrb	r3, [r7, #3]
 80030d0:	f003 020f 	and.w	r2, r3, #15
 80030d4:	4613      	mov	r3, r2
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	4413      	add	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	3338      	adds	r3, #56	; 0x38
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	4413      	add	r3, r2
 80030e2:	3304      	adds	r3, #4
 80030e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2201      	movs	r2, #1
 80030ea:	705a      	strb	r2, [r3, #1]
 80030ec:	e00f      	b.n	800310e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030ee:	78fb      	ldrb	r3, [r7, #3]
 80030f0:	f003 020f 	and.w	r2, r3, #15
 80030f4:	4613      	mov	r3, r2
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	4413      	add	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	4413      	add	r3, r2
 8003104:	3304      	adds	r3, #4
 8003106:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800310e:	78fb      	ldrb	r3, [r7, #3]
 8003110:	f003 030f 	and.w	r3, r3, #15
 8003114:	b2da      	uxtb	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003120:	2b01      	cmp	r3, #1
 8003122:	d101      	bne.n	8003128 <HAL_PCD_EP_Close+0x6e>
 8003124:	2302      	movs	r3, #2
 8003126:	e00e      	b.n	8003146 <HAL_PCD_EP_Close+0x8c>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68f9      	ldr	r1, [r7, #12]
 8003136:	4618      	mov	r0, r3
 8003138:	f003 fbd0 	bl	80068dc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b086      	sub	sp, #24
 8003152:	af00      	add	r7, sp, #0
 8003154:	60f8      	str	r0, [r7, #12]
 8003156:	607a      	str	r2, [r7, #4]
 8003158:	603b      	str	r3, [r7, #0]
 800315a:	460b      	mov	r3, r1
 800315c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800315e:	7afb      	ldrb	r3, [r7, #11]
 8003160:	f003 020f 	and.w	r2, r3, #15
 8003164:	4613      	mov	r3, r2
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	4413      	add	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	4413      	add	r3, r2
 8003174:	3304      	adds	r3, #4
 8003176:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	2200      	movs	r2, #0
 8003188:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	2200      	movs	r2, #0
 800318e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003190:	7afb      	ldrb	r3, [r7, #11]
 8003192:	f003 030f 	and.w	r3, r3, #15
 8003196:	b2da      	uxtb	r2, r3
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d102      	bne.n	80031aa <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031aa:	7afb      	ldrb	r3, [r7, #11]
 80031ac:	f003 030f 	and.w	r3, r3, #15
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d109      	bne.n	80031c8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6818      	ldr	r0, [r3, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	461a      	mov	r2, r3
 80031c0:	6979      	ldr	r1, [r7, #20]
 80031c2:	f003 feaf 	bl	8006f24 <USB_EP0StartXfer>
 80031c6:	e008      	b.n	80031da <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6818      	ldr	r0, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	461a      	mov	r2, r3
 80031d4:	6979      	ldr	r1, [r7, #20]
 80031d6:	f003 fc5d 	bl	8006a94 <USB_EPStartXfer>
  }

  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3718      	adds	r7, #24
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	460b      	mov	r3, r1
 80031ee:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80031f0:	78fb      	ldrb	r3, [r7, #3]
 80031f2:	f003 020f 	and.w	r2, r3, #15
 80031f6:	6879      	ldr	r1, [r7, #4]
 80031f8:	4613      	mov	r3, r2
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	4413      	add	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	440b      	add	r3, r1
 8003202:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003206:	681b      	ldr	r3, [r3, #0]
}
 8003208:	4618      	mov	r0, r3
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	607a      	str	r2, [r7, #4]
 800321e:	603b      	str	r3, [r7, #0]
 8003220:	460b      	mov	r3, r1
 8003222:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003224:	7afb      	ldrb	r3, [r7, #11]
 8003226:	f003 020f 	and.w	r2, r3, #15
 800322a:	4613      	mov	r3, r2
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	4413      	add	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	3338      	adds	r3, #56	; 0x38
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	4413      	add	r3, r2
 8003238:	3304      	adds	r3, #4
 800323a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	2200      	movs	r2, #0
 800324c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	2201      	movs	r2, #1
 8003252:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003254:	7afb      	ldrb	r3, [r7, #11]
 8003256:	f003 030f 	and.w	r3, r3, #15
 800325a:	b2da      	uxtb	r2, r3
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d102      	bne.n	800326e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800326e:	7afb      	ldrb	r3, [r7, #11]
 8003270:	f003 030f 	and.w	r3, r3, #15
 8003274:	2b00      	cmp	r3, #0
 8003276:	d109      	bne.n	800328c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6818      	ldr	r0, [r3, #0]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	b2db      	uxtb	r3, r3
 8003282:	461a      	mov	r2, r3
 8003284:	6979      	ldr	r1, [r7, #20]
 8003286:	f003 fe4d 	bl	8006f24 <USB_EP0StartXfer>
 800328a:	e008      	b.n	800329e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6818      	ldr	r0, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	b2db      	uxtb	r3, r3
 8003296:	461a      	mov	r2, r3
 8003298:	6979      	ldr	r1, [r7, #20]
 800329a:	f003 fbfb 	bl	8006a94 <USB_EPStartXfer>
  }

  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3718      	adds	r7, #24
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	460b      	mov	r3, r1
 80032b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80032b4:	78fb      	ldrb	r3, [r7, #3]
 80032b6:	f003 020f 	and.w	r2, r3, #15
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d901      	bls.n	80032c6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e050      	b.n	8003368 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	da0f      	bge.n	80032ee <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032ce:	78fb      	ldrb	r3, [r7, #3]
 80032d0:	f003 020f 	and.w	r2, r3, #15
 80032d4:	4613      	mov	r3, r2
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	4413      	add	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	3338      	adds	r3, #56	; 0x38
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	4413      	add	r3, r2
 80032e2:	3304      	adds	r3, #4
 80032e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2201      	movs	r2, #1
 80032ea:	705a      	strb	r2, [r3, #1]
 80032ec:	e00d      	b.n	800330a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80032ee:	78fa      	ldrb	r2, [r7, #3]
 80032f0:	4613      	mov	r3, r2
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	4413      	add	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	4413      	add	r3, r2
 8003300:	3304      	adds	r3, #4
 8003302:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2201      	movs	r2, #1
 800330e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003310:	78fb      	ldrb	r3, [r7, #3]
 8003312:	f003 030f 	and.w	r3, r3, #15
 8003316:	b2da      	uxtb	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003322:	2b01      	cmp	r3, #1
 8003324:	d101      	bne.n	800332a <HAL_PCD_EP_SetStall+0x82>
 8003326:	2302      	movs	r3, #2
 8003328:	e01e      	b.n	8003368 <HAL_PCD_EP_SetStall+0xc0>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68f9      	ldr	r1, [r7, #12]
 8003338:	4618      	mov	r0, r3
 800333a:	f004 f88b 	bl	8007454 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800333e:	78fb      	ldrb	r3, [r7, #3]
 8003340:	f003 030f 	and.w	r3, r3, #15
 8003344:	2b00      	cmp	r3, #0
 8003346:	d10a      	bne.n	800335e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6818      	ldr	r0, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	b2d9      	uxtb	r1, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003358:	461a      	mov	r2, r3
 800335a:	f004 fa7b 	bl	8007854 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	460b      	mov	r3, r1
 800337a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800337c:	78fb      	ldrb	r3, [r7, #3]
 800337e:	f003 020f 	and.w	r2, r3, #15
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	429a      	cmp	r2, r3
 8003388:	d901      	bls.n	800338e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e042      	b.n	8003414 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800338e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003392:	2b00      	cmp	r3, #0
 8003394:	da0f      	bge.n	80033b6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003396:	78fb      	ldrb	r3, [r7, #3]
 8003398:	f003 020f 	and.w	r2, r3, #15
 800339c:	4613      	mov	r3, r2
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	4413      	add	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	3338      	adds	r3, #56	; 0x38
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	4413      	add	r3, r2
 80033aa:	3304      	adds	r3, #4
 80033ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2201      	movs	r2, #1
 80033b2:	705a      	strb	r2, [r3, #1]
 80033b4:	e00f      	b.n	80033d6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033b6:	78fb      	ldrb	r3, [r7, #3]
 80033b8:	f003 020f 	and.w	r2, r3, #15
 80033bc:	4613      	mov	r3, r2
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	4413      	add	r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	4413      	add	r3, r2
 80033cc:	3304      	adds	r3, #4
 80033ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033dc:	78fb      	ldrb	r3, [r7, #3]
 80033de:	f003 030f 	and.w	r3, r3, #15
 80033e2:	b2da      	uxtb	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d101      	bne.n	80033f6 <HAL_PCD_EP_ClrStall+0x86>
 80033f2:	2302      	movs	r3, #2
 80033f4:	e00e      	b.n	8003414 <HAL_PCD_EP_ClrStall+0xa4>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68f9      	ldr	r1, [r7, #12]
 8003404:	4618      	mov	r0, r3
 8003406:	f004 f893 	bl	8007530 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	460b      	mov	r3, r1
 8003426:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003428:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800342c:	2b00      	cmp	r3, #0
 800342e:	da0c      	bge.n	800344a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003430:	78fb      	ldrb	r3, [r7, #3]
 8003432:	f003 020f 	and.w	r2, r3, #15
 8003436:	4613      	mov	r3, r2
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	4413      	add	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	3338      	adds	r3, #56	; 0x38
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	4413      	add	r3, r2
 8003444:	3304      	adds	r3, #4
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	e00c      	b.n	8003464 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800344a:	78fb      	ldrb	r3, [r7, #3]
 800344c:	f003 020f 	and.w	r2, r3, #15
 8003450:	4613      	mov	r3, r2
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	4413      	add	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	4413      	add	r3, r2
 8003460:	3304      	adds	r3, #4
 8003462:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68f9      	ldr	r1, [r7, #12]
 800346a:	4618      	mov	r0, r3
 800346c:	f003 feb2 	bl	80071d4 <USB_EPStopXfer>
 8003470:	4603      	mov	r3, r0
 8003472:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003474:	7afb      	ldrb	r3, [r7, #11]
}
 8003476:	4618      	mov	r0, r3
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b08a      	sub	sp, #40	; 0x28
 8003482:	af02      	add	r7, sp, #8
 8003484:	6078      	str	r0, [r7, #4]
 8003486:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	4613      	mov	r3, r2
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	4413      	add	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	3338      	adds	r3, #56	; 0x38
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	4413      	add	r3, r2
 80034a2:	3304      	adds	r3, #4
 80034a4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6a1a      	ldr	r2, [r3, #32]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d901      	bls.n	80034b6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e06c      	b.n	8003590 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	699a      	ldr	r2, [r3, #24]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	69fa      	ldr	r2, [r7, #28]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d902      	bls.n	80034d2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	3303      	adds	r3, #3
 80034d6:	089b      	lsrs	r3, r3, #2
 80034d8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034da:	e02b      	b.n	8003534 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	699a      	ldr	r2, [r3, #24]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	69fa      	ldr	r2, [r7, #28]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d902      	bls.n	80034f8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	3303      	adds	r3, #3
 80034fc:	089b      	lsrs	r3, r3, #2
 80034fe:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6919      	ldr	r1, [r3, #16]
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	b2da      	uxtb	r2, r3
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003510:	b2db      	uxtb	r3, r3
 8003512:	9300      	str	r3, [sp, #0]
 8003514:	4603      	mov	r3, r0
 8003516:	6978      	ldr	r0, [r7, #20]
 8003518:	f003 ff06 	bl	8007328 <USB_WritePacket>

    ep->xfer_buff  += len;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	691a      	ldr	r2, [r3, #16]
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	441a      	add	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6a1a      	ldr	r2, [r3, #32]
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	441a      	add	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	015a      	lsls	r2, r3, #5
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	4413      	add	r3, r2
 800353c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	b29b      	uxth	r3, r3
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	429a      	cmp	r2, r3
 8003548:	d809      	bhi.n	800355e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6a1a      	ldr	r2, [r3, #32]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003552:	429a      	cmp	r2, r3
 8003554:	d203      	bcs.n	800355e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1be      	bne.n	80034dc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	699a      	ldr	r2, [r3, #24]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	429a      	cmp	r2, r3
 8003568:	d811      	bhi.n	800358e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	f003 030f 	and.w	r3, r3, #15
 8003570:	2201      	movs	r2, #1
 8003572:	fa02 f303 	lsl.w	r3, r2, r3
 8003576:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800357e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	43db      	mvns	r3, r3
 8003584:	6939      	ldr	r1, [r7, #16]
 8003586:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800358a:	4013      	ands	r3, r2
 800358c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3720      	adds	r7, #32
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b088      	sub	sp, #32
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	333c      	adds	r3, #60	; 0x3c
 80035b0:	3304      	adds	r3, #4
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	015a      	lsls	r2, r3, #5
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	4413      	add	r3, r2
 80035be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d17b      	bne.n	80036c6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	f003 0308 	and.w	r3, r3, #8
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d015      	beq.n	8003604 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	4a61      	ldr	r2, [pc, #388]	; (8003760 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	f240 80b9 	bls.w	8003754 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 80b3 	beq.w	8003754 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	015a      	lsls	r2, r3, #5
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	4413      	add	r3, r2
 80035f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035fa:	461a      	mov	r2, r3
 80035fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003600:	6093      	str	r3, [r2, #8]
 8003602:	e0a7      	b.n	8003754 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	f003 0320 	and.w	r3, r3, #32
 800360a:	2b00      	cmp	r3, #0
 800360c:	d009      	beq.n	8003622 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	015a      	lsls	r2, r3, #5
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	4413      	add	r3, r2
 8003616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800361a:	461a      	mov	r2, r3
 800361c:	2320      	movs	r3, #32
 800361e:	6093      	str	r3, [r2, #8]
 8003620:	e098      	b.n	8003754 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003628:	2b00      	cmp	r3, #0
 800362a:	f040 8093 	bne.w	8003754 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	4a4b      	ldr	r2, [pc, #300]	; (8003760 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d90f      	bls.n	8003656 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00a      	beq.n	8003656 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	015a      	lsls	r2, r3, #5
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	4413      	add	r3, r2
 8003648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800364c:	461a      	mov	r2, r3
 800364e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003652:	6093      	str	r3, [r2, #8]
 8003654:	e07e      	b.n	8003754 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	4613      	mov	r3, r2
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	4413      	add	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	4413      	add	r3, r2
 8003668:	3304      	adds	r3, #4
 800366a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	69da      	ldr	r2, [r3, #28]
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	0159      	lsls	r1, r3, #5
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	440b      	add	r3, r1
 8003678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003682:	1ad2      	subs	r2, r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d114      	bne.n	80036b8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d109      	bne.n	80036aa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6818      	ldr	r0, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80036a0:	461a      	mov	r2, r3
 80036a2:	2101      	movs	r1, #1
 80036a4:	f004 f8d6 	bl	8007854 <USB_EP0_OutStart>
 80036a8:	e006      	b.n	80036b8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	691a      	ldr	r2, [r3, #16]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	441a      	add	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	4619      	mov	r1, r3
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f006 fb74 	bl	8009dac <HAL_PCD_DataOutStageCallback>
 80036c4:	e046      	b.n	8003754 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	4a26      	ldr	r2, [pc, #152]	; (8003764 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d124      	bne.n	8003718 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00a      	beq.n	80036ee <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	015a      	lsls	r2, r3, #5
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	4413      	add	r3, r2
 80036e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036e4:	461a      	mov	r2, r3
 80036e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036ea:	6093      	str	r3, [r2, #8]
 80036ec:	e032      	b.n	8003754 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	f003 0320 	and.w	r3, r3, #32
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d008      	beq.n	800370a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	015a      	lsls	r2, r3, #5
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	4413      	add	r3, r2
 8003700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003704:	461a      	mov	r2, r3
 8003706:	2320      	movs	r3, #32
 8003708:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	b2db      	uxtb	r3, r3
 800370e:	4619      	mov	r1, r3
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f006 fb4b 	bl	8009dac <HAL_PCD_DataOutStageCallback>
 8003716:	e01d      	b.n	8003754 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d114      	bne.n	8003748 <PCD_EP_OutXfrComplete_int+0x1b0>
 800371e:	6879      	ldr	r1, [r7, #4]
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	4613      	mov	r3, r2
 8003724:	00db      	lsls	r3, r3, #3
 8003726:	4413      	add	r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	440b      	add	r3, r1
 800372c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d108      	bne.n	8003748 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6818      	ldr	r0, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003740:	461a      	mov	r2, r3
 8003742:	2100      	movs	r1, #0
 8003744:	f004 f886 	bl	8007854 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	b2db      	uxtb	r3, r3
 800374c:	4619      	mov	r1, r3
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f006 fb2c 	bl	8009dac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3720      	adds	r7, #32
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	4f54300a 	.word	0x4f54300a
 8003764:	4f54310a 	.word	0x4f54310a

08003768 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	333c      	adds	r3, #60	; 0x3c
 8003780:	3304      	adds	r3, #4
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	015a      	lsls	r2, r3, #5
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	4413      	add	r3, r2
 800378e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	4a15      	ldr	r2, [pc, #84]	; (80037f0 <PCD_EP_OutSetupPacket_int+0x88>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d90e      	bls.n	80037bc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d009      	beq.n	80037bc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	015a      	lsls	r2, r3, #5
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	4413      	add	r3, r2
 80037b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037b4:	461a      	mov	r2, r3
 80037b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037ba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f006 fae3 	bl	8009d88 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	4a0a      	ldr	r2, [pc, #40]	; (80037f0 <PCD_EP_OutSetupPacket_int+0x88>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d90c      	bls.n	80037e4 <PCD_EP_OutSetupPacket_int+0x7c>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d108      	bne.n	80037e4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6818      	ldr	r0, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80037dc:	461a      	mov	r2, r3
 80037de:	2101      	movs	r1, #1
 80037e0:	f004 f838 	bl	8007854 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3718      	adds	r7, #24
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	4f54300a 	.word	0x4f54300a

080037f4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	460b      	mov	r3, r1
 80037fe:	70fb      	strb	r3, [r7, #3]
 8003800:	4613      	mov	r3, r2
 8003802:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800380c:	78fb      	ldrb	r3, [r7, #3]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d107      	bne.n	8003822 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003812:	883b      	ldrh	r3, [r7, #0]
 8003814:	0419      	lsls	r1, r3, #16
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	430a      	orrs	r2, r1
 800381e:	629a      	str	r2, [r3, #40]	; 0x28
 8003820:	e028      	b.n	8003874 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003828:	0c1b      	lsrs	r3, r3, #16
 800382a:	68ba      	ldr	r2, [r7, #8]
 800382c:	4413      	add	r3, r2
 800382e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003830:	2300      	movs	r3, #0
 8003832:	73fb      	strb	r3, [r7, #15]
 8003834:	e00d      	b.n	8003852 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	7bfb      	ldrb	r3, [r7, #15]
 800383c:	3340      	adds	r3, #64	; 0x40
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4413      	add	r3, r2
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	0c1b      	lsrs	r3, r3, #16
 8003846:	68ba      	ldr	r2, [r7, #8]
 8003848:	4413      	add	r3, r2
 800384a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800384c:	7bfb      	ldrb	r3, [r7, #15]
 800384e:	3301      	adds	r3, #1
 8003850:	73fb      	strb	r3, [r7, #15]
 8003852:	7bfa      	ldrb	r2, [r7, #15]
 8003854:	78fb      	ldrb	r3, [r7, #3]
 8003856:	3b01      	subs	r3, #1
 8003858:	429a      	cmp	r2, r3
 800385a:	d3ec      	bcc.n	8003836 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800385c:	883b      	ldrh	r3, [r7, #0]
 800385e:	0418      	lsls	r0, r3, #16
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6819      	ldr	r1, [r3, #0]
 8003864:	78fb      	ldrb	r3, [r7, #3]
 8003866:	3b01      	subs	r3, #1
 8003868:	68ba      	ldr	r2, [r7, #8]
 800386a:	4302      	orrs	r2, r0
 800386c:	3340      	adds	r3, #64	; 0x40
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3714      	adds	r7, #20
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
 800388a:	460b      	mov	r3, r1
 800388c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	887a      	ldrh	r2, [r7, #2]
 8003894:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038d6:	f043 0303 	orr.w	r3, r3, #3
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3714      	adds	r7, #20
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d101      	bne.n	8003900 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e0cc      	b.n	8003a9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003900:	4b68      	ldr	r3, [pc, #416]	; (8003aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 030f 	and.w	r3, r3, #15
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	429a      	cmp	r2, r3
 800390c:	d90c      	bls.n	8003928 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800390e:	4b65      	ldr	r3, [pc, #404]	; (8003aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	b2d2      	uxtb	r2, r2
 8003914:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003916:	4b63      	ldr	r3, [pc, #396]	; (8003aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 030f 	and.w	r3, r3, #15
 800391e:	683a      	ldr	r2, [r7, #0]
 8003920:	429a      	cmp	r2, r3
 8003922:	d001      	beq.n	8003928 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e0b8      	b.n	8003a9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d020      	beq.n	8003976 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b00      	cmp	r3, #0
 800393e:	d005      	beq.n	800394c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003940:	4b59      	ldr	r3, [pc, #356]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	4a58      	ldr	r2, [pc, #352]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003946:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800394a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0308 	and.w	r3, r3, #8
 8003954:	2b00      	cmp	r3, #0
 8003956:	d005      	beq.n	8003964 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003958:	4b53      	ldr	r3, [pc, #332]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	4a52      	ldr	r2, [pc, #328]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800395e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003962:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003964:	4b50      	ldr	r3, [pc, #320]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	494d      	ldr	r1, [pc, #308]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003972:	4313      	orrs	r3, r2
 8003974:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	d044      	beq.n	8003a0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d107      	bne.n	800399a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800398a:	4b47      	ldr	r3, [pc, #284]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d119      	bne.n	80039ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e07f      	b.n	8003a9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d003      	beq.n	80039aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039a6:	2b03      	cmp	r3, #3
 80039a8:	d107      	bne.n	80039ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039aa:	4b3f      	ldr	r3, [pc, #252]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d109      	bne.n	80039ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e06f      	b.n	8003a9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ba:	4b3b      	ldr	r3, [pc, #236]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e067      	b.n	8003a9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ca:	4b37      	ldr	r3, [pc, #220]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f023 0203 	bic.w	r2, r3, #3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	4934      	ldr	r1, [pc, #208]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039dc:	f7fd fe46 	bl	800166c <HAL_GetTick>
 80039e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e2:	e00a      	b.n	80039fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039e4:	f7fd fe42 	bl	800166c <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e04f      	b.n	8003a9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039fa:	4b2b      	ldr	r3, [pc, #172]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f003 020c 	and.w	r2, r3, #12
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d1eb      	bne.n	80039e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a0c:	4b25      	ldr	r3, [pc, #148]	; (8003aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 030f 	and.w	r3, r3, #15
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d20c      	bcs.n	8003a34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a1a:	4b22      	ldr	r3, [pc, #136]	; (8003aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	b2d2      	uxtb	r2, r2
 8003a20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a22:	4b20      	ldr	r3, [pc, #128]	; (8003aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 030f 	and.w	r3, r3, #15
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d001      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e032      	b.n	8003a9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d008      	beq.n	8003a52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a40:	4b19      	ldr	r3, [pc, #100]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	4916      	ldr	r1, [pc, #88]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0308 	and.w	r3, r3, #8
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d009      	beq.n	8003a72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a5e:	4b12      	ldr	r3, [pc, #72]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	490e      	ldr	r1, [pc, #56]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a72:	f000 fb57 	bl	8004124 <HAL_RCC_GetSysClockFreq>
 8003a76:	4602      	mov	r2, r0
 8003a78:	4b0b      	ldr	r3, [pc, #44]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	091b      	lsrs	r3, r3, #4
 8003a7e:	f003 030f 	and.w	r3, r3, #15
 8003a82:	490a      	ldr	r1, [pc, #40]	; (8003aac <HAL_RCC_ClockConfig+0x1c0>)
 8003a84:	5ccb      	ldrb	r3, [r1, r3]
 8003a86:	fa22 f303 	lsr.w	r3, r2, r3
 8003a8a:	4a09      	ldr	r2, [pc, #36]	; (8003ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a8e:	4b09      	ldr	r3, [pc, #36]	; (8003ab4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7fd fda6 	bl	80015e4 <HAL_InitTick>

  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	40023c00 	.word	0x40023c00
 8003aa8:	40023800 	.word	0x40023800
 8003aac:	0800a45c 	.word	0x0800a45c
 8003ab0:	20000010 	.word	0x20000010
 8003ab4:	20000014 	.word	0x20000014

08003ab8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003abc:	4b03      	ldr	r3, [pc, #12]	; (8003acc <HAL_RCC_GetHCLKFreq+0x14>)
 8003abe:	681b      	ldr	r3, [r3, #0]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	20000010 	.word	0x20000010

08003ad0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b08c      	sub	sp, #48	; 0x30
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003adc:	2300      	movs	r3, #0
 8003ade:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003aec:	2300      	movs	r3, #0
 8003aee:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003af0:	2300      	movs	r3, #0
 8003af2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003af4:	2300      	movs	r3, #0
 8003af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003af8:	2300      	movs	r3, #0
 8003afa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d010      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003b08:	4b6f      	ldr	r3, [pc, #444]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b0e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b16:	496c      	ldr	r1, [pc, #432]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003b26:	2301      	movs	r3, #1
 8003b28:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d010      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003b36:	4b64      	ldr	r3, [pc, #400]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b3c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b44:	4960      	ldr	r1, [pc, #384]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d101      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003b54:	2301      	movs	r3, #1
 8003b56:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0304 	and.w	r3, r3, #4
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d017      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b64:	4b58      	ldr	r3, [pc, #352]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b72:	4955      	ldr	r1, [pc, #340]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b82:	d101      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003b84:	2301      	movs	r3, #1
 8003b86:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003b90:	2301      	movs	r3, #1
 8003b92:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0308 	and.w	r3, r3, #8
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d017      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ba0:	4b49      	ldr	r3, [pc, #292]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ba2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ba6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bae:	4946      	ldr	r1, [pc, #280]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bbe:	d101      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d101      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0320 	and.w	r3, r3, #32
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f000 808a 	beq.w	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bde:	2300      	movs	r3, #0
 8003be0:	60bb      	str	r3, [r7, #8]
 8003be2:	4b39      	ldr	r3, [pc, #228]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	4a38      	ldr	r2, [pc, #224]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bec:	6413      	str	r3, [r2, #64]	; 0x40
 8003bee:	4b36      	ldr	r3, [pc, #216]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf6:	60bb      	str	r3, [r7, #8]
 8003bf8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003bfa:	4b34      	ldr	r3, [pc, #208]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a33      	ldr	r2, [pc, #204]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c04:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003c06:	f7fd fd31 	bl	800166c <HAL_GetTick>
 8003c0a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003c0c:	e008      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003c0e:	f7fd fd2d 	bl	800166c <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d901      	bls.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e278      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003c20:	4b2a      	ldr	r3, [pc, #168]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d0f0      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c2c:	4b26      	ldr	r3, [pc, #152]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c34:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c36:	6a3b      	ldr	r3, [r7, #32]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d02f      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c44:	6a3a      	ldr	r2, [r7, #32]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d028      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c4a:	4b1f      	ldr	r3, [pc, #124]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c52:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c54:	4b1e      	ldr	r3, [pc, #120]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003c56:	2201      	movs	r2, #1
 8003c58:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c5a:	4b1d      	ldr	r3, [pc, #116]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003c60:	4a19      	ldr	r2, [pc, #100]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c66:	4b18      	ldr	r3, [pc, #96]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d114      	bne.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003c72:	f7fd fcfb 	bl	800166c <HAL_GetTick>
 8003c76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c78:	e00a      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c7a:	f7fd fcf7 	bl	800166c <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d901      	bls.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e240      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c90:	4b0d      	ldr	r3, [pc, #52]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d0ee      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ca4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ca8:	d114      	bne.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003caa:	4b07      	ldr	r3, [pc, #28]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003cba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cbe:	4902      	ldr	r1, [pc, #8]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	608b      	str	r3, [r1, #8]
 8003cc4:	e00c      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003cc6:	bf00      	nop
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	40007000 	.word	0x40007000
 8003cd0:	42470e40 	.word	0x42470e40
 8003cd4:	4b4a      	ldr	r3, [pc, #296]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	4a49      	ldr	r2, [pc, #292]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003cda:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003cde:	6093      	str	r3, [r2, #8]
 8003ce0:	4b47      	ldr	r3, [pc, #284]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ce2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cec:	4944      	ldr	r1, [pc, #272]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0310 	and.w	r3, r3, #16
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d004      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003d04:	4b3f      	ldr	r3, [pc, #252]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003d06:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00a      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003d14:	4b3a      	ldr	r3, [pc, #232]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d1a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d22:	4937      	ldr	r1, [pc, #220]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00a      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003d36:	4b32      	ldr	r3, [pc, #200]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d3c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d44:	492e      	ldr	r1, [pc, #184]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d011      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003d58:	4b29      	ldr	r3, [pc, #164]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d5e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d66:	4926      	ldr	r1, [pc, #152]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d76:	d101      	bne.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00a      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003d88:	4b1d      	ldr	r3, [pc, #116]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d8e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d96:	491a      	ldr	r1, [pc, #104]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d011      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003daa:	4b15      	ldr	r3, [pc, #84]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003dac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003db0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003db8:	4911      	ldr	r1, [pc, #68]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dc8:	d101      	bne.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d005      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ddc:	f040 80ff 	bne.w	8003fde <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003de0:	4b09      	ldr	r3, [pc, #36]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003de2:	2200      	movs	r2, #0
 8003de4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003de6:	f7fd fc41 	bl	800166c <HAL_GetTick>
 8003dea:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003dec:	e00e      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003dee:	f7fd fc3d 	bl	800166c <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d907      	bls.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e188      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003e00:	40023800 	.word	0x40023800
 8003e04:	424711e0 	.word	0x424711e0
 8003e08:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e0c:	4b7e      	ldr	r3, [pc, #504]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1ea      	bne.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d003      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d009      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d028      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d124      	bne.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003e40:	4b71      	ldr	r3, [pc, #452]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e46:	0c1b      	lsrs	r3, r3, #16
 8003e48:	f003 0303 	and.w	r3, r3, #3
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e52:	4b6d      	ldr	r3, [pc, #436]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e58:	0e1b      	lsrs	r3, r3, #24
 8003e5a:	f003 030f 	and.w	r3, r3, #15
 8003e5e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685a      	ldr	r2, [r3, #4]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	019b      	lsls	r3, r3, #6
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	085b      	lsrs	r3, r3, #1
 8003e70:	3b01      	subs	r3, #1
 8003e72:	041b      	lsls	r3, r3, #16
 8003e74:	431a      	orrs	r2, r3
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	061b      	lsls	r3, r3, #24
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	695b      	ldr	r3, [r3, #20]
 8003e80:	071b      	lsls	r3, r3, #28
 8003e82:	4961      	ldr	r1, [pc, #388]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0304 	and.w	r3, r3, #4
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d004      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e9e:	d00a      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d035      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003eb4:	d130      	bne.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003eb6:	4b54      	ldr	r3, [pc, #336]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003eb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ebc:	0c1b      	lsrs	r3, r3, #16
 8003ebe:	f003 0303 	and.w	r3, r3, #3
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ec8:	4b4f      	ldr	r3, [pc, #316]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003eca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ece:	0f1b      	lsrs	r3, r3, #28
 8003ed0:	f003 0307 	and.w	r3, r3, #7
 8003ed4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685a      	ldr	r2, [r3, #4]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	019b      	lsls	r3, r3, #6
 8003ee0:	431a      	orrs	r2, r3
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	085b      	lsrs	r3, r3, #1
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	041b      	lsls	r3, r3, #16
 8003eea:	431a      	orrs	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	061b      	lsls	r3, r3, #24
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	071b      	lsls	r3, r3, #28
 8003ef8:	4943      	ldr	r1, [pc, #268]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003f00:	4b41      	ldr	r3, [pc, #260]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f06:	f023 021f 	bic.w	r2, r3, #31
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	493d      	ldr	r1, [pc, #244]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d029      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f2c:	d124      	bne.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003f2e:	4b36      	ldr	r3, [pc, #216]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f34:	0c1b      	lsrs	r3, r3, #16
 8003f36:	f003 0303 	and.w	r3, r3, #3
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f40:	4b31      	ldr	r3, [pc, #196]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f46:	0f1b      	lsrs	r3, r3, #28
 8003f48:	f003 0307 	and.w	r3, r3, #7
 8003f4c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	019b      	lsls	r3, r3, #6
 8003f58:	431a      	orrs	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	085b      	lsrs	r3, r3, #1
 8003f60:	3b01      	subs	r3, #1
 8003f62:	041b      	lsls	r3, r3, #16
 8003f64:	431a      	orrs	r2, r3
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	061b      	lsls	r3, r3, #24
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	071b      	lsls	r3, r3, #28
 8003f70:	4925      	ldr	r1, [pc, #148]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d016      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	019b      	lsls	r3, r3, #6
 8003f8e:	431a      	orrs	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	085b      	lsrs	r3, r3, #1
 8003f96:	3b01      	subs	r3, #1
 8003f98:	041b      	lsls	r3, r3, #16
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	061b      	lsls	r3, r3, #24
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	071b      	lsls	r3, r3, #28
 8003faa:	4917      	ldr	r1, [pc, #92]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003fb2:	4b16      	ldr	r3, [pc, #88]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003fb8:	f7fd fb58 	bl	800166c <HAL_GetTick>
 8003fbc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003fc0:	f7fd fb54 	bl	800166c <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e09f      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fd2:	4b0d      	ldr	r3, [pc, #52]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d0f0      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	f040 8095 	bne.w	8004110 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003fe6:	4b0a      	ldr	r3, [pc, #40]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003fec:	f7fd fb3e 	bl	800166c <HAL_GetTick>
 8003ff0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ff2:	e00f      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003ff4:	f7fd fb3a 	bl	800166c <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d908      	bls.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e085      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004006:	bf00      	nop
 8004008:	40023800 	.word	0x40023800
 800400c:	42470068 	.word	0x42470068
 8004010:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004014:	4b41      	ldr	r3, [pc, #260]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800401c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004020:	d0e8      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0304 	and.w	r3, r3, #4
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004032:	2b00      	cmp	r3, #0
 8004034:	d009      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800403e:	2b00      	cmp	r3, #0
 8004040:	d02b      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004046:	2b00      	cmp	r3, #0
 8004048:	d127      	bne.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800404a:	4b34      	ldr	r3, [pc, #208]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800404c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004050:	0c1b      	lsrs	r3, r3, #16
 8004052:	f003 0303 	and.w	r3, r3, #3
 8004056:	3301      	adds	r3, #1
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	699a      	ldr	r2, [r3, #24]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	69db      	ldr	r3, [r3, #28]
 8004064:	019b      	lsls	r3, r3, #6
 8004066:	431a      	orrs	r2, r3
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	085b      	lsrs	r3, r3, #1
 800406c:	3b01      	subs	r3, #1
 800406e:	041b      	lsls	r3, r3, #16
 8004070:	431a      	orrs	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	061b      	lsls	r3, r3, #24
 8004078:	4928      	ldr	r1, [pc, #160]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800407a:	4313      	orrs	r3, r2
 800407c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004080:	4b26      	ldr	r3, [pc, #152]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004082:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004086:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408e:	3b01      	subs	r3, #1
 8004090:	021b      	lsls	r3, r3, #8
 8004092:	4922      	ldr	r1, [pc, #136]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004094:	4313      	orrs	r3, r2
 8004096:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d01d      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040ae:	d118      	bne.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80040b0:	4b1a      	ldr	r3, [pc, #104]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80040b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b6:	0e1b      	lsrs	r3, r3, #24
 80040b8:	f003 030f 	and.w	r3, r3, #15
 80040bc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	699a      	ldr	r2, [r3, #24]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	019b      	lsls	r3, r3, #6
 80040c8:	431a      	orrs	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	085b      	lsrs	r3, r3, #1
 80040d0:	3b01      	subs	r3, #1
 80040d2:	041b      	lsls	r3, r3, #16
 80040d4:	431a      	orrs	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	061b      	lsls	r3, r3, #24
 80040da:	4910      	ldr	r1, [pc, #64]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80040e2:	4b0f      	ldr	r3, [pc, #60]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80040e4:	2201      	movs	r2, #1
 80040e6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80040e8:	f7fd fac0 	bl	800166c <HAL_GetTick>
 80040ec:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040ee:	e008      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80040f0:	f7fd fabc 	bl	800166c <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d901      	bls.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e007      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004102:	4b06      	ldr	r3, [pc, #24]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800410a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800410e:	d1ef      	bne.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3730      	adds	r7, #48	; 0x30
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	40023800 	.word	0x40023800
 8004120:	42470070 	.word	0x42470070

08004124 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004124:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004128:	b0ae      	sub	sp, #184	; 0xb8
 800412a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800412c:	2300      	movs	r3, #0
 800412e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004132:	2300      	movs	r3, #0
 8004134:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004138:	2300      	movs	r3, #0
 800413a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800413e:	2300      	movs	r3, #0
 8004140:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004144:	2300      	movs	r3, #0
 8004146:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800414a:	4bcb      	ldr	r3, [pc, #812]	; (8004478 <HAL_RCC_GetSysClockFreq+0x354>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f003 030c 	and.w	r3, r3, #12
 8004152:	2b0c      	cmp	r3, #12
 8004154:	f200 8206 	bhi.w	8004564 <HAL_RCC_GetSysClockFreq+0x440>
 8004158:	a201      	add	r2, pc, #4	; (adr r2, 8004160 <HAL_RCC_GetSysClockFreq+0x3c>)
 800415a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415e:	bf00      	nop
 8004160:	08004195 	.word	0x08004195
 8004164:	08004565 	.word	0x08004565
 8004168:	08004565 	.word	0x08004565
 800416c:	08004565 	.word	0x08004565
 8004170:	0800419d 	.word	0x0800419d
 8004174:	08004565 	.word	0x08004565
 8004178:	08004565 	.word	0x08004565
 800417c:	08004565 	.word	0x08004565
 8004180:	080041a5 	.word	0x080041a5
 8004184:	08004565 	.word	0x08004565
 8004188:	08004565 	.word	0x08004565
 800418c:	08004565 	.word	0x08004565
 8004190:	08004395 	.word	0x08004395
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004194:	4bb9      	ldr	r3, [pc, #740]	; (800447c <HAL_RCC_GetSysClockFreq+0x358>)
 8004196:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800419a:	e1e7      	b.n	800456c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800419c:	4bb8      	ldr	r3, [pc, #736]	; (8004480 <HAL_RCC_GetSysClockFreq+0x35c>)
 800419e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80041a2:	e1e3      	b.n	800456c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041a4:	4bb4      	ldr	r3, [pc, #720]	; (8004478 <HAL_RCC_GetSysClockFreq+0x354>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041b0:	4bb1      	ldr	r3, [pc, #708]	; (8004478 <HAL_RCC_GetSysClockFreq+0x354>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d071      	beq.n	80042a0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041bc:	4bae      	ldr	r3, [pc, #696]	; (8004478 <HAL_RCC_GetSysClockFreq+0x354>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	099b      	lsrs	r3, r3, #6
 80041c2:	2200      	movs	r2, #0
 80041c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80041c8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80041cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80041d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80041d8:	2300      	movs	r3, #0
 80041da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80041de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80041e2:	4622      	mov	r2, r4
 80041e4:	462b      	mov	r3, r5
 80041e6:	f04f 0000 	mov.w	r0, #0
 80041ea:	f04f 0100 	mov.w	r1, #0
 80041ee:	0159      	lsls	r1, r3, #5
 80041f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041f4:	0150      	lsls	r0, r2, #5
 80041f6:	4602      	mov	r2, r0
 80041f8:	460b      	mov	r3, r1
 80041fa:	4621      	mov	r1, r4
 80041fc:	1a51      	subs	r1, r2, r1
 80041fe:	6439      	str	r1, [r7, #64]	; 0x40
 8004200:	4629      	mov	r1, r5
 8004202:	eb63 0301 	sbc.w	r3, r3, r1
 8004206:	647b      	str	r3, [r7, #68]	; 0x44
 8004208:	f04f 0200 	mov.w	r2, #0
 800420c:	f04f 0300 	mov.w	r3, #0
 8004210:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004214:	4649      	mov	r1, r9
 8004216:	018b      	lsls	r3, r1, #6
 8004218:	4641      	mov	r1, r8
 800421a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800421e:	4641      	mov	r1, r8
 8004220:	018a      	lsls	r2, r1, #6
 8004222:	4641      	mov	r1, r8
 8004224:	1a51      	subs	r1, r2, r1
 8004226:	63b9      	str	r1, [r7, #56]	; 0x38
 8004228:	4649      	mov	r1, r9
 800422a:	eb63 0301 	sbc.w	r3, r3, r1
 800422e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004230:	f04f 0200 	mov.w	r2, #0
 8004234:	f04f 0300 	mov.w	r3, #0
 8004238:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800423c:	4649      	mov	r1, r9
 800423e:	00cb      	lsls	r3, r1, #3
 8004240:	4641      	mov	r1, r8
 8004242:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004246:	4641      	mov	r1, r8
 8004248:	00ca      	lsls	r2, r1, #3
 800424a:	4610      	mov	r0, r2
 800424c:	4619      	mov	r1, r3
 800424e:	4603      	mov	r3, r0
 8004250:	4622      	mov	r2, r4
 8004252:	189b      	adds	r3, r3, r2
 8004254:	633b      	str	r3, [r7, #48]	; 0x30
 8004256:	462b      	mov	r3, r5
 8004258:	460a      	mov	r2, r1
 800425a:	eb42 0303 	adc.w	r3, r2, r3
 800425e:	637b      	str	r3, [r7, #52]	; 0x34
 8004260:	f04f 0200 	mov.w	r2, #0
 8004264:	f04f 0300 	mov.w	r3, #0
 8004268:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800426c:	4629      	mov	r1, r5
 800426e:	024b      	lsls	r3, r1, #9
 8004270:	4621      	mov	r1, r4
 8004272:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004276:	4621      	mov	r1, r4
 8004278:	024a      	lsls	r2, r1, #9
 800427a:	4610      	mov	r0, r2
 800427c:	4619      	mov	r1, r3
 800427e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004282:	2200      	movs	r2, #0
 8004284:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004288:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800428c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004290:	f7fc fbd8 	bl	8000a44 <__aeabi_uldivmod>
 8004294:	4602      	mov	r2, r0
 8004296:	460b      	mov	r3, r1
 8004298:	4613      	mov	r3, r2
 800429a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800429e:	e067      	b.n	8004370 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042a0:	4b75      	ldr	r3, [pc, #468]	; (8004478 <HAL_RCC_GetSysClockFreq+0x354>)
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	099b      	lsrs	r3, r3, #6
 80042a6:	2200      	movs	r2, #0
 80042a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80042ac:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80042b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80042ba:	2300      	movs	r3, #0
 80042bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80042be:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80042c2:	4622      	mov	r2, r4
 80042c4:	462b      	mov	r3, r5
 80042c6:	f04f 0000 	mov.w	r0, #0
 80042ca:	f04f 0100 	mov.w	r1, #0
 80042ce:	0159      	lsls	r1, r3, #5
 80042d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042d4:	0150      	lsls	r0, r2, #5
 80042d6:	4602      	mov	r2, r0
 80042d8:	460b      	mov	r3, r1
 80042da:	4621      	mov	r1, r4
 80042dc:	1a51      	subs	r1, r2, r1
 80042de:	62b9      	str	r1, [r7, #40]	; 0x28
 80042e0:	4629      	mov	r1, r5
 80042e2:	eb63 0301 	sbc.w	r3, r3, r1
 80042e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042e8:	f04f 0200 	mov.w	r2, #0
 80042ec:	f04f 0300 	mov.w	r3, #0
 80042f0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80042f4:	4649      	mov	r1, r9
 80042f6:	018b      	lsls	r3, r1, #6
 80042f8:	4641      	mov	r1, r8
 80042fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042fe:	4641      	mov	r1, r8
 8004300:	018a      	lsls	r2, r1, #6
 8004302:	4641      	mov	r1, r8
 8004304:	ebb2 0a01 	subs.w	sl, r2, r1
 8004308:	4649      	mov	r1, r9
 800430a:	eb63 0b01 	sbc.w	fp, r3, r1
 800430e:	f04f 0200 	mov.w	r2, #0
 8004312:	f04f 0300 	mov.w	r3, #0
 8004316:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800431a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800431e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004322:	4692      	mov	sl, r2
 8004324:	469b      	mov	fp, r3
 8004326:	4623      	mov	r3, r4
 8004328:	eb1a 0303 	adds.w	r3, sl, r3
 800432c:	623b      	str	r3, [r7, #32]
 800432e:	462b      	mov	r3, r5
 8004330:	eb4b 0303 	adc.w	r3, fp, r3
 8004334:	627b      	str	r3, [r7, #36]	; 0x24
 8004336:	f04f 0200 	mov.w	r2, #0
 800433a:	f04f 0300 	mov.w	r3, #0
 800433e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004342:	4629      	mov	r1, r5
 8004344:	028b      	lsls	r3, r1, #10
 8004346:	4621      	mov	r1, r4
 8004348:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800434c:	4621      	mov	r1, r4
 800434e:	028a      	lsls	r2, r1, #10
 8004350:	4610      	mov	r0, r2
 8004352:	4619      	mov	r1, r3
 8004354:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004358:	2200      	movs	r2, #0
 800435a:	673b      	str	r3, [r7, #112]	; 0x70
 800435c:	677a      	str	r2, [r7, #116]	; 0x74
 800435e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004362:	f7fc fb6f 	bl	8000a44 <__aeabi_uldivmod>
 8004366:	4602      	mov	r2, r0
 8004368:	460b      	mov	r3, r1
 800436a:	4613      	mov	r3, r2
 800436c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004370:	4b41      	ldr	r3, [pc, #260]	; (8004478 <HAL_RCC_GetSysClockFreq+0x354>)
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	0c1b      	lsrs	r3, r3, #16
 8004376:	f003 0303 	and.w	r3, r3, #3
 800437a:	3301      	adds	r3, #1
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004382:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004386:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800438a:	fbb2 f3f3 	udiv	r3, r2, r3
 800438e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004392:	e0eb      	b.n	800456c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004394:	4b38      	ldr	r3, [pc, #224]	; (8004478 <HAL_RCC_GetSysClockFreq+0x354>)
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800439c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043a0:	4b35      	ldr	r3, [pc, #212]	; (8004478 <HAL_RCC_GetSysClockFreq+0x354>)
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d06b      	beq.n	8004484 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043ac:	4b32      	ldr	r3, [pc, #200]	; (8004478 <HAL_RCC_GetSysClockFreq+0x354>)
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	099b      	lsrs	r3, r3, #6
 80043b2:	2200      	movs	r2, #0
 80043b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80043b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80043b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043be:	663b      	str	r3, [r7, #96]	; 0x60
 80043c0:	2300      	movs	r3, #0
 80043c2:	667b      	str	r3, [r7, #100]	; 0x64
 80043c4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80043c8:	4622      	mov	r2, r4
 80043ca:	462b      	mov	r3, r5
 80043cc:	f04f 0000 	mov.w	r0, #0
 80043d0:	f04f 0100 	mov.w	r1, #0
 80043d4:	0159      	lsls	r1, r3, #5
 80043d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043da:	0150      	lsls	r0, r2, #5
 80043dc:	4602      	mov	r2, r0
 80043de:	460b      	mov	r3, r1
 80043e0:	4621      	mov	r1, r4
 80043e2:	1a51      	subs	r1, r2, r1
 80043e4:	61b9      	str	r1, [r7, #24]
 80043e6:	4629      	mov	r1, r5
 80043e8:	eb63 0301 	sbc.w	r3, r3, r1
 80043ec:	61fb      	str	r3, [r7, #28]
 80043ee:	f04f 0200 	mov.w	r2, #0
 80043f2:	f04f 0300 	mov.w	r3, #0
 80043f6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80043fa:	4659      	mov	r1, fp
 80043fc:	018b      	lsls	r3, r1, #6
 80043fe:	4651      	mov	r1, sl
 8004400:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004404:	4651      	mov	r1, sl
 8004406:	018a      	lsls	r2, r1, #6
 8004408:	4651      	mov	r1, sl
 800440a:	ebb2 0801 	subs.w	r8, r2, r1
 800440e:	4659      	mov	r1, fp
 8004410:	eb63 0901 	sbc.w	r9, r3, r1
 8004414:	f04f 0200 	mov.w	r2, #0
 8004418:	f04f 0300 	mov.w	r3, #0
 800441c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004420:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004424:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004428:	4690      	mov	r8, r2
 800442a:	4699      	mov	r9, r3
 800442c:	4623      	mov	r3, r4
 800442e:	eb18 0303 	adds.w	r3, r8, r3
 8004432:	613b      	str	r3, [r7, #16]
 8004434:	462b      	mov	r3, r5
 8004436:	eb49 0303 	adc.w	r3, r9, r3
 800443a:	617b      	str	r3, [r7, #20]
 800443c:	f04f 0200 	mov.w	r2, #0
 8004440:	f04f 0300 	mov.w	r3, #0
 8004444:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004448:	4629      	mov	r1, r5
 800444a:	024b      	lsls	r3, r1, #9
 800444c:	4621      	mov	r1, r4
 800444e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004452:	4621      	mov	r1, r4
 8004454:	024a      	lsls	r2, r1, #9
 8004456:	4610      	mov	r0, r2
 8004458:	4619      	mov	r1, r3
 800445a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800445e:	2200      	movs	r2, #0
 8004460:	65bb      	str	r3, [r7, #88]	; 0x58
 8004462:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004464:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004468:	f7fc faec 	bl	8000a44 <__aeabi_uldivmod>
 800446c:	4602      	mov	r2, r0
 800446e:	460b      	mov	r3, r1
 8004470:	4613      	mov	r3, r2
 8004472:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004476:	e065      	b.n	8004544 <HAL_RCC_GetSysClockFreq+0x420>
 8004478:	40023800 	.word	0x40023800
 800447c:	00f42400 	.word	0x00f42400
 8004480:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004484:	4b3d      	ldr	r3, [pc, #244]	; (800457c <HAL_RCC_GetSysClockFreq+0x458>)
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	099b      	lsrs	r3, r3, #6
 800448a:	2200      	movs	r2, #0
 800448c:	4618      	mov	r0, r3
 800448e:	4611      	mov	r1, r2
 8004490:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004494:	653b      	str	r3, [r7, #80]	; 0x50
 8004496:	2300      	movs	r3, #0
 8004498:	657b      	str	r3, [r7, #84]	; 0x54
 800449a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800449e:	4642      	mov	r2, r8
 80044a0:	464b      	mov	r3, r9
 80044a2:	f04f 0000 	mov.w	r0, #0
 80044a6:	f04f 0100 	mov.w	r1, #0
 80044aa:	0159      	lsls	r1, r3, #5
 80044ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044b0:	0150      	lsls	r0, r2, #5
 80044b2:	4602      	mov	r2, r0
 80044b4:	460b      	mov	r3, r1
 80044b6:	4641      	mov	r1, r8
 80044b8:	1a51      	subs	r1, r2, r1
 80044ba:	60b9      	str	r1, [r7, #8]
 80044bc:	4649      	mov	r1, r9
 80044be:	eb63 0301 	sbc.w	r3, r3, r1
 80044c2:	60fb      	str	r3, [r7, #12]
 80044c4:	f04f 0200 	mov.w	r2, #0
 80044c8:	f04f 0300 	mov.w	r3, #0
 80044cc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80044d0:	4659      	mov	r1, fp
 80044d2:	018b      	lsls	r3, r1, #6
 80044d4:	4651      	mov	r1, sl
 80044d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044da:	4651      	mov	r1, sl
 80044dc:	018a      	lsls	r2, r1, #6
 80044de:	4651      	mov	r1, sl
 80044e0:	1a54      	subs	r4, r2, r1
 80044e2:	4659      	mov	r1, fp
 80044e4:	eb63 0501 	sbc.w	r5, r3, r1
 80044e8:	f04f 0200 	mov.w	r2, #0
 80044ec:	f04f 0300 	mov.w	r3, #0
 80044f0:	00eb      	lsls	r3, r5, #3
 80044f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044f6:	00e2      	lsls	r2, r4, #3
 80044f8:	4614      	mov	r4, r2
 80044fa:	461d      	mov	r5, r3
 80044fc:	4643      	mov	r3, r8
 80044fe:	18e3      	adds	r3, r4, r3
 8004500:	603b      	str	r3, [r7, #0]
 8004502:	464b      	mov	r3, r9
 8004504:	eb45 0303 	adc.w	r3, r5, r3
 8004508:	607b      	str	r3, [r7, #4]
 800450a:	f04f 0200 	mov.w	r2, #0
 800450e:	f04f 0300 	mov.w	r3, #0
 8004512:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004516:	4629      	mov	r1, r5
 8004518:	028b      	lsls	r3, r1, #10
 800451a:	4621      	mov	r1, r4
 800451c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004520:	4621      	mov	r1, r4
 8004522:	028a      	lsls	r2, r1, #10
 8004524:	4610      	mov	r0, r2
 8004526:	4619      	mov	r1, r3
 8004528:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800452c:	2200      	movs	r2, #0
 800452e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004530:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004532:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004536:	f7fc fa85 	bl	8000a44 <__aeabi_uldivmod>
 800453a:	4602      	mov	r2, r0
 800453c:	460b      	mov	r3, r1
 800453e:	4613      	mov	r3, r2
 8004540:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004544:	4b0d      	ldr	r3, [pc, #52]	; (800457c <HAL_RCC_GetSysClockFreq+0x458>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	0f1b      	lsrs	r3, r3, #28
 800454a:	f003 0307 	and.w	r3, r3, #7
 800454e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004552:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004556:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800455a:	fbb2 f3f3 	udiv	r3, r2, r3
 800455e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004562:	e003      	b.n	800456c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004564:	4b06      	ldr	r3, [pc, #24]	; (8004580 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004566:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800456a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800456c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004570:	4618      	mov	r0, r3
 8004572:	37b8      	adds	r7, #184	; 0xb8
 8004574:	46bd      	mov	sp, r7
 8004576:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800457a:	bf00      	nop
 800457c:	40023800 	.word	0x40023800
 8004580:	00f42400 	.word	0x00f42400

08004584 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b086      	sub	sp, #24
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e28d      	b.n	8004ab2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f000 8083 	beq.w	80046aa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80045a4:	4b94      	ldr	r3, [pc, #592]	; (80047f8 <HAL_RCC_OscConfig+0x274>)
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f003 030c 	and.w	r3, r3, #12
 80045ac:	2b04      	cmp	r3, #4
 80045ae:	d019      	beq.n	80045e4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80045b0:	4b91      	ldr	r3, [pc, #580]	; (80047f8 <HAL_RCC_OscConfig+0x274>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80045b8:	2b08      	cmp	r3, #8
 80045ba:	d106      	bne.n	80045ca <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80045bc:	4b8e      	ldr	r3, [pc, #568]	; (80047f8 <HAL_RCC_OscConfig+0x274>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045c8:	d00c      	beq.n	80045e4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045ca:	4b8b      	ldr	r3, [pc, #556]	; (80047f8 <HAL_RCC_OscConfig+0x274>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80045d2:	2b0c      	cmp	r3, #12
 80045d4:	d112      	bne.n	80045fc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045d6:	4b88      	ldr	r3, [pc, #544]	; (80047f8 <HAL_RCC_OscConfig+0x274>)
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045e2:	d10b      	bne.n	80045fc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045e4:	4b84      	ldr	r3, [pc, #528]	; (80047f8 <HAL_RCC_OscConfig+0x274>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d05b      	beq.n	80046a8 <HAL_RCC_OscConfig+0x124>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d157      	bne.n	80046a8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e25a      	b.n	8004ab2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004604:	d106      	bne.n	8004614 <HAL_RCC_OscConfig+0x90>
 8004606:	4b7c      	ldr	r3, [pc, #496]	; (80047f8 <HAL_RCC_OscConfig+0x274>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a7b      	ldr	r2, [pc, #492]	; (80047f8 <HAL_RCC_OscConfig+0x274>)
 800460c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004610:	6013      	str	r3, [r2, #0]
 8004612:	e01d      	b.n	8004650 <HAL_RCC_OscConfig+0xcc>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800461c:	d10c      	bne.n	8004638 <HAL_RCC_OscConfig+0xb4>
 800461e:	4b76      	ldr	r3, [pc, #472]	; (80047f8 <HAL_RCC_OscConfig+0x274>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a75      	ldr	r2, [pc, #468]	; (80047f8 <HAL_RCC_OscConfig+0x274>)
 8004624:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004628:	6013      	str	r3, [r2, #0]
 800462a:	4b73      	ldr	r3, [pc, #460]	; (80047f8 <HAL_RCC_OscConfig+0x274>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a72      	ldr	r2, [pc, #456]	; (80047f8 <HAL_RCC_OscConfig+0x274>)
 8004630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004634:	6013      	str	r3, [r2, #0]
 8004636:	e00b      	b.n	8004650 <HAL_RCC_OscConfig+0xcc>
 8004638:	4b6f      	ldr	r3, [pc, #444]	; (80047f8 <HAL_RCC_OscConfig+0x274>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a6e      	ldr	r2, [pc, #440]	; (80047f8 <HAL_RCC_OscConfig+0x274>)
 800463e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004642:	6013      	str	r3, [r2, #0]
 8004644:	4b6c      	ldr	r3, [pc, #432]	; (80047f8 <HAL_RCC_OscConfig+0x274>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a6b      	ldr	r2, [pc, #428]	; (80047f8 <HAL_RCC_OscConfig+0x274>)
 800464a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800464e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d013      	beq.n	8004680 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004658:	f7fd f808 	bl	800166c <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800465e:	e008      	b.n	8004672 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004660:	f7fd f804 	bl	800166c <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b64      	cmp	r3, #100	; 0x64
 800466c:	d901      	bls.n	8004672 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e21f      	b.n	8004ab2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004672:	4b61      	ldr	r3, [pc, #388]	; (80047f8 <HAL_RCC_OscConfig+0x274>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d0f0      	beq.n	8004660 <HAL_RCC_OscConfig+0xdc>
 800467e:	e014      	b.n	80046aa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004680:	f7fc fff4 	bl	800166c <HAL_GetTick>
 8004684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004686:	e008      	b.n	800469a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004688:	f7fc fff0 	bl	800166c <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	2b64      	cmp	r3, #100	; 0x64
 8004694:	d901      	bls.n	800469a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e20b      	b.n	8004ab2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800469a:	4b57      	ldr	r3, [pc, #348]	; (80047f8 <HAL_RCC_OscConfig+0x274>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1f0      	bne.n	8004688 <HAL_RCC_OscConfig+0x104>
 80046a6:	e000      	b.n	80046aa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d06f      	beq.n	8004796 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80046b6:	4b50      	ldr	r3, [pc, #320]	; (80047f8 <HAL_RCC_OscConfig+0x274>)
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f003 030c 	and.w	r3, r3, #12
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d017      	beq.n	80046f2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80046c2:	4b4d      	ldr	r3, [pc, #308]	; (80047f8 <HAL_RCC_OscConfig+0x274>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80046ca:	2b08      	cmp	r3, #8
 80046cc:	d105      	bne.n	80046da <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80046ce:	4b4a      	ldr	r3, [pc, #296]	; (80047f8 <HAL_RCC_OscConfig+0x274>)
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00b      	beq.n	80046f2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046da:	4b47      	ldr	r3, [pc, #284]	; (80047f8 <HAL_RCC_OscConfig+0x274>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80046e2:	2b0c      	cmp	r3, #12
 80046e4:	d11c      	bne.n	8004720 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046e6:	4b44      	ldr	r3, [pc, #272]	; (80047f8 <HAL_RCC_OscConfig+0x274>)
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d116      	bne.n	8004720 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046f2:	4b41      	ldr	r3, [pc, #260]	; (80047f8 <HAL_RCC_OscConfig+0x274>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d005      	beq.n	800470a <HAL_RCC_OscConfig+0x186>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d001      	beq.n	800470a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e1d3      	b.n	8004ab2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800470a:	4b3b      	ldr	r3, [pc, #236]	; (80047f8 <HAL_RCC_OscConfig+0x274>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	00db      	lsls	r3, r3, #3
 8004718:	4937      	ldr	r1, [pc, #220]	; (80047f8 <HAL_RCC_OscConfig+0x274>)
 800471a:	4313      	orrs	r3, r2
 800471c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800471e:	e03a      	b.n	8004796 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d020      	beq.n	800476a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004728:	4b34      	ldr	r3, [pc, #208]	; (80047fc <HAL_RCC_OscConfig+0x278>)
 800472a:	2201      	movs	r2, #1
 800472c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800472e:	f7fc ff9d 	bl	800166c <HAL_GetTick>
 8004732:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004734:	e008      	b.n	8004748 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004736:	f7fc ff99 	bl	800166c <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b02      	cmp	r3, #2
 8004742:	d901      	bls.n	8004748 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e1b4      	b.n	8004ab2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004748:	4b2b      	ldr	r3, [pc, #172]	; (80047f8 <HAL_RCC_OscConfig+0x274>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	2b00      	cmp	r3, #0
 8004752:	d0f0      	beq.n	8004736 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004754:	4b28      	ldr	r3, [pc, #160]	; (80047f8 <HAL_RCC_OscConfig+0x274>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	00db      	lsls	r3, r3, #3
 8004762:	4925      	ldr	r1, [pc, #148]	; (80047f8 <HAL_RCC_OscConfig+0x274>)
 8004764:	4313      	orrs	r3, r2
 8004766:	600b      	str	r3, [r1, #0]
 8004768:	e015      	b.n	8004796 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800476a:	4b24      	ldr	r3, [pc, #144]	; (80047fc <HAL_RCC_OscConfig+0x278>)
 800476c:	2200      	movs	r2, #0
 800476e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004770:	f7fc ff7c 	bl	800166c <HAL_GetTick>
 8004774:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004776:	e008      	b.n	800478a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004778:	f7fc ff78 	bl	800166c <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	2b02      	cmp	r3, #2
 8004784:	d901      	bls.n	800478a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e193      	b.n	8004ab2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800478a:	4b1b      	ldr	r3, [pc, #108]	; (80047f8 <HAL_RCC_OscConfig+0x274>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1f0      	bne.n	8004778 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0308 	and.w	r3, r3, #8
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d036      	beq.n	8004810 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d016      	beq.n	80047d8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047aa:	4b15      	ldr	r3, [pc, #84]	; (8004800 <HAL_RCC_OscConfig+0x27c>)
 80047ac:	2201      	movs	r2, #1
 80047ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047b0:	f7fc ff5c 	bl	800166c <HAL_GetTick>
 80047b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047b6:	e008      	b.n	80047ca <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047b8:	f7fc ff58 	bl	800166c <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e173      	b.n	8004ab2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047ca:	4b0b      	ldr	r3, [pc, #44]	; (80047f8 <HAL_RCC_OscConfig+0x274>)
 80047cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d0f0      	beq.n	80047b8 <HAL_RCC_OscConfig+0x234>
 80047d6:	e01b      	b.n	8004810 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047d8:	4b09      	ldr	r3, [pc, #36]	; (8004800 <HAL_RCC_OscConfig+0x27c>)
 80047da:	2200      	movs	r2, #0
 80047dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047de:	f7fc ff45 	bl	800166c <HAL_GetTick>
 80047e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047e4:	e00e      	b.n	8004804 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047e6:	f7fc ff41 	bl	800166c <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d907      	bls.n	8004804 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e15c      	b.n	8004ab2 <HAL_RCC_OscConfig+0x52e>
 80047f8:	40023800 	.word	0x40023800
 80047fc:	42470000 	.word	0x42470000
 8004800:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004804:	4b8a      	ldr	r3, [pc, #552]	; (8004a30 <HAL_RCC_OscConfig+0x4ac>)
 8004806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1ea      	bne.n	80047e6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0304 	and.w	r3, r3, #4
 8004818:	2b00      	cmp	r3, #0
 800481a:	f000 8097 	beq.w	800494c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800481e:	2300      	movs	r3, #0
 8004820:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004822:	4b83      	ldr	r3, [pc, #524]	; (8004a30 <HAL_RCC_OscConfig+0x4ac>)
 8004824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10f      	bne.n	800484e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800482e:	2300      	movs	r3, #0
 8004830:	60bb      	str	r3, [r7, #8]
 8004832:	4b7f      	ldr	r3, [pc, #508]	; (8004a30 <HAL_RCC_OscConfig+0x4ac>)
 8004834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004836:	4a7e      	ldr	r2, [pc, #504]	; (8004a30 <HAL_RCC_OscConfig+0x4ac>)
 8004838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800483c:	6413      	str	r3, [r2, #64]	; 0x40
 800483e:	4b7c      	ldr	r3, [pc, #496]	; (8004a30 <HAL_RCC_OscConfig+0x4ac>)
 8004840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004846:	60bb      	str	r3, [r7, #8]
 8004848:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800484a:	2301      	movs	r3, #1
 800484c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800484e:	4b79      	ldr	r3, [pc, #484]	; (8004a34 <HAL_RCC_OscConfig+0x4b0>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004856:	2b00      	cmp	r3, #0
 8004858:	d118      	bne.n	800488c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800485a:	4b76      	ldr	r3, [pc, #472]	; (8004a34 <HAL_RCC_OscConfig+0x4b0>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a75      	ldr	r2, [pc, #468]	; (8004a34 <HAL_RCC_OscConfig+0x4b0>)
 8004860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004864:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004866:	f7fc ff01 	bl	800166c <HAL_GetTick>
 800486a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800486c:	e008      	b.n	8004880 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800486e:	f7fc fefd 	bl	800166c <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	2b02      	cmp	r3, #2
 800487a:	d901      	bls.n	8004880 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e118      	b.n	8004ab2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004880:	4b6c      	ldr	r3, [pc, #432]	; (8004a34 <HAL_RCC_OscConfig+0x4b0>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004888:	2b00      	cmp	r3, #0
 800488a:	d0f0      	beq.n	800486e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d106      	bne.n	80048a2 <HAL_RCC_OscConfig+0x31e>
 8004894:	4b66      	ldr	r3, [pc, #408]	; (8004a30 <HAL_RCC_OscConfig+0x4ac>)
 8004896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004898:	4a65      	ldr	r2, [pc, #404]	; (8004a30 <HAL_RCC_OscConfig+0x4ac>)
 800489a:	f043 0301 	orr.w	r3, r3, #1
 800489e:	6713      	str	r3, [r2, #112]	; 0x70
 80048a0:	e01c      	b.n	80048dc <HAL_RCC_OscConfig+0x358>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	2b05      	cmp	r3, #5
 80048a8:	d10c      	bne.n	80048c4 <HAL_RCC_OscConfig+0x340>
 80048aa:	4b61      	ldr	r3, [pc, #388]	; (8004a30 <HAL_RCC_OscConfig+0x4ac>)
 80048ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ae:	4a60      	ldr	r2, [pc, #384]	; (8004a30 <HAL_RCC_OscConfig+0x4ac>)
 80048b0:	f043 0304 	orr.w	r3, r3, #4
 80048b4:	6713      	str	r3, [r2, #112]	; 0x70
 80048b6:	4b5e      	ldr	r3, [pc, #376]	; (8004a30 <HAL_RCC_OscConfig+0x4ac>)
 80048b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ba:	4a5d      	ldr	r2, [pc, #372]	; (8004a30 <HAL_RCC_OscConfig+0x4ac>)
 80048bc:	f043 0301 	orr.w	r3, r3, #1
 80048c0:	6713      	str	r3, [r2, #112]	; 0x70
 80048c2:	e00b      	b.n	80048dc <HAL_RCC_OscConfig+0x358>
 80048c4:	4b5a      	ldr	r3, [pc, #360]	; (8004a30 <HAL_RCC_OscConfig+0x4ac>)
 80048c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c8:	4a59      	ldr	r2, [pc, #356]	; (8004a30 <HAL_RCC_OscConfig+0x4ac>)
 80048ca:	f023 0301 	bic.w	r3, r3, #1
 80048ce:	6713      	str	r3, [r2, #112]	; 0x70
 80048d0:	4b57      	ldr	r3, [pc, #348]	; (8004a30 <HAL_RCC_OscConfig+0x4ac>)
 80048d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d4:	4a56      	ldr	r2, [pc, #344]	; (8004a30 <HAL_RCC_OscConfig+0x4ac>)
 80048d6:	f023 0304 	bic.w	r3, r3, #4
 80048da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d015      	beq.n	8004910 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e4:	f7fc fec2 	bl	800166c <HAL_GetTick>
 80048e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ea:	e00a      	b.n	8004902 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048ec:	f7fc febe 	bl	800166c <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e0d7      	b.n	8004ab2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004902:	4b4b      	ldr	r3, [pc, #300]	; (8004a30 <HAL_RCC_OscConfig+0x4ac>)
 8004904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d0ee      	beq.n	80048ec <HAL_RCC_OscConfig+0x368>
 800490e:	e014      	b.n	800493a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004910:	f7fc feac 	bl	800166c <HAL_GetTick>
 8004914:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004916:	e00a      	b.n	800492e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004918:	f7fc fea8 	bl	800166c <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	f241 3288 	movw	r2, #5000	; 0x1388
 8004926:	4293      	cmp	r3, r2
 8004928:	d901      	bls.n	800492e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e0c1      	b.n	8004ab2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800492e:	4b40      	ldr	r3, [pc, #256]	; (8004a30 <HAL_RCC_OscConfig+0x4ac>)
 8004930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1ee      	bne.n	8004918 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800493a:	7dfb      	ldrb	r3, [r7, #23]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d105      	bne.n	800494c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004940:	4b3b      	ldr	r3, [pc, #236]	; (8004a30 <HAL_RCC_OscConfig+0x4ac>)
 8004942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004944:	4a3a      	ldr	r2, [pc, #232]	; (8004a30 <HAL_RCC_OscConfig+0x4ac>)
 8004946:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800494a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	2b00      	cmp	r3, #0
 8004952:	f000 80ad 	beq.w	8004ab0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004956:	4b36      	ldr	r3, [pc, #216]	; (8004a30 <HAL_RCC_OscConfig+0x4ac>)
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f003 030c 	and.w	r3, r3, #12
 800495e:	2b08      	cmp	r3, #8
 8004960:	d060      	beq.n	8004a24 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	2b02      	cmp	r3, #2
 8004968:	d145      	bne.n	80049f6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800496a:	4b33      	ldr	r3, [pc, #204]	; (8004a38 <HAL_RCC_OscConfig+0x4b4>)
 800496c:	2200      	movs	r2, #0
 800496e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004970:	f7fc fe7c 	bl	800166c <HAL_GetTick>
 8004974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004976:	e008      	b.n	800498a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004978:	f7fc fe78 	bl	800166c <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b02      	cmp	r3, #2
 8004984:	d901      	bls.n	800498a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e093      	b.n	8004ab2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800498a:	4b29      	ldr	r3, [pc, #164]	; (8004a30 <HAL_RCC_OscConfig+0x4ac>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1f0      	bne.n	8004978 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	69da      	ldr	r2, [r3, #28]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	431a      	orrs	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a4:	019b      	lsls	r3, r3, #6
 80049a6:	431a      	orrs	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ac:	085b      	lsrs	r3, r3, #1
 80049ae:	3b01      	subs	r3, #1
 80049b0:	041b      	lsls	r3, r3, #16
 80049b2:	431a      	orrs	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b8:	061b      	lsls	r3, r3, #24
 80049ba:	431a      	orrs	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c0:	071b      	lsls	r3, r3, #28
 80049c2:	491b      	ldr	r1, [pc, #108]	; (8004a30 <HAL_RCC_OscConfig+0x4ac>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049c8:	4b1b      	ldr	r3, [pc, #108]	; (8004a38 <HAL_RCC_OscConfig+0x4b4>)
 80049ca:	2201      	movs	r2, #1
 80049cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ce:	f7fc fe4d 	bl	800166c <HAL_GetTick>
 80049d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049d4:	e008      	b.n	80049e8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049d6:	f7fc fe49 	bl	800166c <HAL_GetTick>
 80049da:	4602      	mov	r2, r0
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d901      	bls.n	80049e8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e064      	b.n	8004ab2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049e8:	4b11      	ldr	r3, [pc, #68]	; (8004a30 <HAL_RCC_OscConfig+0x4ac>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d0f0      	beq.n	80049d6 <HAL_RCC_OscConfig+0x452>
 80049f4:	e05c      	b.n	8004ab0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049f6:	4b10      	ldr	r3, [pc, #64]	; (8004a38 <HAL_RCC_OscConfig+0x4b4>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049fc:	f7fc fe36 	bl	800166c <HAL_GetTick>
 8004a00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a02:	e008      	b.n	8004a16 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a04:	f7fc fe32 	bl	800166c <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e04d      	b.n	8004ab2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a16:	4b06      	ldr	r3, [pc, #24]	; (8004a30 <HAL_RCC_OscConfig+0x4ac>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1f0      	bne.n	8004a04 <HAL_RCC_OscConfig+0x480>
 8004a22:	e045      	b.n	8004ab0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d107      	bne.n	8004a3c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e040      	b.n	8004ab2 <HAL_RCC_OscConfig+0x52e>
 8004a30:	40023800 	.word	0x40023800
 8004a34:	40007000 	.word	0x40007000
 8004a38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a3c:	4b1f      	ldr	r3, [pc, #124]	; (8004abc <HAL_RCC_OscConfig+0x538>)
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d030      	beq.n	8004aac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d129      	bne.n	8004aac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d122      	bne.n	8004aac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d119      	bne.n	8004aac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a82:	085b      	lsrs	r3, r3, #1
 8004a84:	3b01      	subs	r3, #1
 8004a86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d10f      	bne.n	8004aac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d107      	bne.n	8004aac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d001      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e000      	b.n	8004ab2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3718      	adds	r7, #24
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	40023800 	.word	0x40023800

08004ac0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d101      	bne.n	8004ad2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e07b      	b.n	8004bca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d108      	bne.n	8004aec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ae2:	d009      	beq.n	8004af8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	61da      	str	r2, [r3, #28]
 8004aea:	e005      	b.n	8004af8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d106      	bne.n	8004b18 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f7fc fbf6 	bl	8001304 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2202      	movs	r2, #2
 8004b1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b2e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b40:	431a      	orrs	r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	f003 0302 	and.w	r3, r3, #2
 8004b54:	431a      	orrs	r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	431a      	orrs	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b68:	431a      	orrs	r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	69db      	ldr	r3, [r3, #28]
 8004b6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b72:	431a      	orrs	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a1b      	ldr	r3, [r3, #32]
 8004b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b7c:	ea42 0103 	orr.w	r1, r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b84:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	430a      	orrs	r2, r1
 8004b8e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	0c1b      	lsrs	r3, r3, #16
 8004b96:	f003 0104 	and.w	r1, r3, #4
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9e:	f003 0210 	and.w	r2, r3, #16
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	69da      	ldr	r2, [r3, #28]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bb8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3708      	adds	r7, #8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
	...

08004bd4 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	4613      	mov	r3, r2
 8004be0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004be2:	2300      	movs	r3, #0
 8004be4:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d110      	bne.n	8004c10 <HAL_SPI_Receive_DMA+0x3c>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bf6:	d10b      	bne.n	8004c10 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2204      	movs	r2, #4
 8004bfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8004c00:	88fb      	ldrh	r3, [r7, #6]
 8004c02:	68ba      	ldr	r2, [r7, #8]
 8004c04:	68b9      	ldr	r1, [r7, #8]
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f000 f8ac 	bl	8004d64 <HAL_SPI_TransmitReceive_DMA>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	e09f      	b.n	8004d50 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d101      	bne.n	8004c1e <HAL_SPI_Receive_DMA+0x4a>
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	e098      	b.n	8004d50 <HAL_SPI_Receive_DMA+0x17c>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d002      	beq.n	8004c38 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8004c32:	2302      	movs	r3, #2
 8004c34:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004c36:	e086      	b.n	8004d46 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d002      	beq.n	8004c44 <HAL_SPI_Receive_DMA+0x70>
 8004c3e:	88fb      	ldrh	r3, [r7, #6]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d102      	bne.n	8004c4a <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004c48:	e07d      	b.n	8004d46 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2204      	movs	r2, #4
 8004c4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	88fa      	ldrh	r2, [r7, #6]
 8004c62:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	88fa      	ldrh	r2, [r7, #6]
 8004c68:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c8a:	d10f      	bne.n	8004cac <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c9a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004caa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cb0:	4a29      	ldr	r2, [pc, #164]	; (8004d58 <HAL_SPI_Receive_DMA+0x184>)
 8004cb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cb8:	4a28      	ldr	r2, [pc, #160]	; (8004d5c <HAL_SPI_Receive_DMA+0x188>)
 8004cba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cc0:	4a27      	ldr	r2, [pc, #156]	; (8004d60 <HAL_SPI_Receive_DMA+0x18c>)
 8004cc2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cc8:	2200      	movs	r2, #0
 8004cca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	330c      	adds	r3, #12
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cdc:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ce2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004ce4:	f7fc feb2 	bl	8001a4c <HAL_DMA_Start_IT>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00c      	beq.n	8004d08 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf2:	f043 0210 	orr.w	r2, r3, #16
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2201      	movs	r2, #1
 8004d02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8004d06:	e01e      	b.n	8004d46 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d12:	2b40      	cmp	r3, #64	; 0x40
 8004d14:	d007      	beq.n	8004d26 <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d24:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	685a      	ldr	r2, [r3, #4]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f042 0220 	orr.w	r2, r2, #32
 8004d34:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	685a      	ldr	r2, [r3, #4]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f042 0201 	orr.w	r2, r2, #1
 8004d44:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3718      	adds	r7, #24
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	08005105 	.word	0x08005105
 8004d5c:	08004fcd 	.word	0x08004fcd
 8004d60:	0800513d 	.word	0x0800513d

08004d64 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b086      	sub	sp, #24
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
 8004d70:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d72:	2300      	movs	r3, #0
 8004d74:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d101      	bne.n	8004d84 <HAL_SPI_TransmitReceive_DMA+0x20>
 8004d80:	2302      	movs	r3, #2
 8004d82:	e0e3      	b.n	8004f4c <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d92:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8004d9a:	7dbb      	ldrb	r3, [r7, #22]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d00d      	beq.n	8004dbc <HAL_SPI_TransmitReceive_DMA+0x58>
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004da6:	d106      	bne.n	8004db6 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d102      	bne.n	8004db6 <HAL_SPI_TransmitReceive_DMA+0x52>
 8004db0:	7dbb      	ldrb	r3, [r7, #22]
 8004db2:	2b04      	cmp	r3, #4
 8004db4:	d002      	beq.n	8004dbc <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8004db6:	2302      	movs	r3, #2
 8004db8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004dba:	e0c2      	b.n	8004f42 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d005      	beq.n	8004dce <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d002      	beq.n	8004dce <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004dc8:	887b      	ldrh	r3, [r7, #2]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d102      	bne.n	8004dd4 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004dd2:	e0b6      	b.n	8004f42 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	2b04      	cmp	r3, #4
 8004dde:	d003      	beq.n	8004de8 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2205      	movs	r2, #5
 8004de4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	68ba      	ldr	r2, [r7, #8]
 8004df2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	887a      	ldrh	r2, [r7, #2]
 8004df8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	887a      	ldrh	r2, [r7, #2]
 8004dfe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	887a      	ldrh	r2, [r7, #2]
 8004e0a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	887a      	ldrh	r2, [r7, #2]
 8004e10:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b04      	cmp	r3, #4
 8004e28:	d108      	bne.n	8004e3c <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e2e:	4a49      	ldr	r2, [pc, #292]	; (8004f54 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8004e30:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e36:	4a48      	ldr	r2, [pc, #288]	; (8004f58 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8004e38:	63da      	str	r2, [r3, #60]	; 0x3c
 8004e3a:	e007      	b.n	8004e4c <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e40:	4a46      	ldr	r2, [pc, #280]	; (8004f5c <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8004e42:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e48:	4a45      	ldr	r2, [pc, #276]	; (8004f60 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8004e4a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e50:	4a44      	ldr	r2, [pc, #272]	; (8004f64 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8004e52:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e58:	2200      	movs	r2, #0
 8004e5a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	330c      	adds	r3, #12
 8004e66:	4619      	mov	r1, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e72:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004e74:	f7fc fdea 	bl	8001a4c <HAL_DMA_Start_IT>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00c      	beq.n	8004e98 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e82:	f043 0210 	orr.w	r2, r3, #16
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2201      	movs	r2, #1
 8004e92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8004e96:	e054      	b.n	8004f42 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	685a      	ldr	r2, [r3, #4]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f042 0201 	orr.w	r2, r2, #1
 8004ea6:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eac:	2200      	movs	r2, #0
 8004eae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	330c      	adds	r3, #12
 8004ed8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ede:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004ee0:	f7fc fdb4 	bl	8001a4c <HAL_DMA_Start_IT>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00c      	beq.n	8004f04 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eee:	f043 0210 	orr.w	r2, r3, #16
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8004f02:	e01e      	b.n	8004f42 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f0e:	2b40      	cmp	r3, #64	; 0x40
 8004f10:	d007      	beq.n	8004f22 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f20:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	685a      	ldr	r2, [r3, #4]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f042 0220 	orr.w	r2, r2, #32
 8004f30:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f042 0202 	orr.w	r2, r2, #2
 8004f40:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3718      	adds	r7, #24
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	08005105 	.word	0x08005105
 8004f58:	08004fcd 	.word	0x08004fcd
 8004f5c:	08005121 	.word	0x08005121
 8004f60:	08005075 	.word	0x08005075
 8004f64:	0800513d 	.word	0x0800513d

08004f68 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8004f84:	bf00      	nop
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd8:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fda:	f7fc fb47 	bl	800166c <HAL_GetTick>
 8004fde:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fee:	d03b      	beq.n	8005068 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	685a      	ldr	r2, [r3, #4]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f022 0220 	bic.w	r2, r2, #32
 8004ffe:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d10d      	bne.n	8005024 <SPI_DMAReceiveCplt+0x58>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005010:	d108      	bne.n	8005024 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f022 0203 	bic.w	r2, r2, #3
 8005020:	605a      	str	r2, [r3, #4]
 8005022:	e007      	b.n	8005034 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685a      	ldr	r2, [r3, #4]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f022 0201 	bic.w	r2, r2, #1
 8005032:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005034:	68ba      	ldr	r2, [r7, #8]
 8005036:	2164      	movs	r1, #100	; 0x64
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f000 f927 	bl	800528c <SPI_EndRxTransaction>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d002      	beq.n	800504a <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2220      	movs	r2, #32
 8005048:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800505c:	2b00      	cmp	r3, #0
 800505e:	d003      	beq.n	8005068 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f7ff ffa9 	bl	8004fb8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005066:	e002      	b.n	800506e <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	f7ff ff7d 	bl	8004f68 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800506e:	3710      	adds	r7, #16
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005080:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005082:	f7fc faf3 	bl	800166c <HAL_GetTick>
 8005086:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005092:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005096:	d02f      	beq.n	80050f8 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685a      	ldr	r2, [r3, #4]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f022 0220 	bic.w	r2, r2, #32
 80050a6:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80050a8:	68ba      	ldr	r2, [r7, #8]
 80050aa:	2164      	movs	r1, #100	; 0x64
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f000 f953 	bl	8005358 <SPI_EndRxTxTransaction>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d005      	beq.n	80050c4 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050bc:	f043 0220 	orr.w	r2, r3, #32
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	685a      	ldr	r2, [r3, #4]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f022 0203 	bic.w	r2, r2, #3
 80050d2:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d003      	beq.n	80050f8 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80050f0:	68f8      	ldr	r0, [r7, #12]
 80050f2:	f7ff ff61 	bl	8004fb8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80050f6:	e002      	b.n	80050fe <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f7ff ff3f 	bl	8004f7c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005110:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8005112:	68f8      	ldr	r0, [r7, #12]
 8005114:	f7ff ff3c 	bl	8004f90 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005118:	bf00      	nop
 800511a:	3710      	adds	r7, #16
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f7ff ff38 	bl	8004fa4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005134:	bf00      	nop
 8005136:	3710      	adds	r7, #16
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005148:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	685a      	ldr	r2, [r3, #4]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f022 0203 	bic.w	r2, r2, #3
 8005158:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800515e:	f043 0210 	orr.w	r2, r3, #16
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f7ff ff22 	bl	8004fb8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005174:	bf00      	nop
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b088      	sub	sp, #32
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	603b      	str	r3, [r7, #0]
 8005188:	4613      	mov	r3, r2
 800518a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800518c:	f7fc fa6e 	bl	800166c <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005194:	1a9b      	subs	r3, r3, r2
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	4413      	add	r3, r2
 800519a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800519c:	f7fc fa66 	bl	800166c <HAL_GetTick>
 80051a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80051a2:	4b39      	ldr	r3, [pc, #228]	; (8005288 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	015b      	lsls	r3, r3, #5
 80051a8:	0d1b      	lsrs	r3, r3, #20
 80051aa:	69fa      	ldr	r2, [r7, #28]
 80051ac:	fb02 f303 	mul.w	r3, r2, r3
 80051b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051b2:	e054      	b.n	800525e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ba:	d050      	beq.n	800525e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051bc:	f7fc fa56 	bl	800166c <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	69fa      	ldr	r2, [r7, #28]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d902      	bls.n	80051d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d13d      	bne.n	800524e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	685a      	ldr	r2, [r3, #4]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80051e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051ea:	d111      	bne.n	8005210 <SPI_WaitFlagStateUntilTimeout+0x94>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051f4:	d004      	beq.n	8005200 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051fe:	d107      	bne.n	8005210 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800520e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005214:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005218:	d10f      	bne.n	800523a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005228:	601a      	str	r2, [r3, #0]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005238:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e017      	b.n	800527e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d101      	bne.n	8005258 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005254:	2300      	movs	r3, #0
 8005256:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	3b01      	subs	r3, #1
 800525c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	689a      	ldr	r2, [r3, #8]
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	4013      	ands	r3, r2
 8005268:	68ba      	ldr	r2, [r7, #8]
 800526a:	429a      	cmp	r2, r3
 800526c:	bf0c      	ite	eq
 800526e:	2301      	moveq	r3, #1
 8005270:	2300      	movne	r3, #0
 8005272:	b2db      	uxtb	r3, r3
 8005274:	461a      	mov	r2, r3
 8005276:	79fb      	ldrb	r3, [r7, #7]
 8005278:	429a      	cmp	r2, r3
 800527a:	d19b      	bne.n	80051b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3720      	adds	r7, #32
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	20000010 	.word	0x20000010

0800528c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b086      	sub	sp, #24
 8005290:	af02      	add	r7, sp, #8
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052a0:	d111      	bne.n	80052c6 <SPI_EndRxTransaction+0x3a>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052aa:	d004      	beq.n	80052b6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052b4:	d107      	bne.n	80052c6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052c4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052ce:	d12a      	bne.n	8005326 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052d8:	d012      	beq.n	8005300 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	9300      	str	r3, [sp, #0]
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	2200      	movs	r2, #0
 80052e2:	2180      	movs	r1, #128	; 0x80
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	f7ff ff49 	bl	800517c <SPI_WaitFlagStateUntilTimeout>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d02d      	beq.n	800534c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f4:	f043 0220 	orr.w	r2, r3, #32
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	e026      	b.n	800534e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	9300      	str	r3, [sp, #0]
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	2200      	movs	r2, #0
 8005308:	2101      	movs	r1, #1
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f7ff ff36 	bl	800517c <SPI_WaitFlagStateUntilTimeout>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d01a      	beq.n	800534c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800531a:	f043 0220 	orr.w	r2, r3, #32
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e013      	b.n	800534e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	9300      	str	r3, [sp, #0]
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	2200      	movs	r2, #0
 800532e:	2101      	movs	r1, #1
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f7ff ff23 	bl	800517c <SPI_WaitFlagStateUntilTimeout>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d007      	beq.n	800534c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005340:	f043 0220 	orr.w	r2, r3, #32
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e000      	b.n	800534e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
	...

08005358 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b088      	sub	sp, #32
 800535c:	af02      	add	r7, sp, #8
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005364:	4b1b      	ldr	r3, [pc, #108]	; (80053d4 <SPI_EndRxTxTransaction+0x7c>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a1b      	ldr	r2, [pc, #108]	; (80053d8 <SPI_EndRxTxTransaction+0x80>)
 800536a:	fba2 2303 	umull	r2, r3, r2, r3
 800536e:	0d5b      	lsrs	r3, r3, #21
 8005370:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005374:	fb02 f303 	mul.w	r3, r2, r3
 8005378:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005382:	d112      	bne.n	80053aa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	9300      	str	r3, [sp, #0]
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	2200      	movs	r2, #0
 800538c:	2180      	movs	r1, #128	; 0x80
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f7ff fef4 	bl	800517c <SPI_WaitFlagStateUntilTimeout>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d016      	beq.n	80053c8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800539e:	f043 0220 	orr.w	r2, r3, #32
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e00f      	b.n	80053ca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00a      	beq.n	80053c6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	3b01      	subs	r3, #1
 80053b4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053c0:	2b80      	cmp	r3, #128	; 0x80
 80053c2:	d0f2      	beq.n	80053aa <SPI_EndRxTxTransaction+0x52>
 80053c4:	e000      	b.n	80053c8 <SPI_EndRxTxTransaction+0x70>
        break;
 80053c6:	bf00      	nop
  }

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3718      	adds	r7, #24
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	20000010 	.word	0x20000010
 80053d8:	165e9f81 	.word	0x165e9f81

080053dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d101      	bne.n	80053ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e041      	b.n	8005472 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d106      	bne.n	8005408 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f7fb fffa 	bl	80013fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2202      	movs	r2, #2
 800540c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	3304      	adds	r3, #4
 8005418:	4619      	mov	r1, r3
 800541a:	4610      	mov	r0, r2
 800541c:	f000 fad8 	bl	80059d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3708      	adds	r7, #8
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800547a:	b580      	push	{r7, lr}
 800547c:	b082      	sub	sp, #8
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d101      	bne.n	800548c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e041      	b.n	8005510 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005492:	b2db      	uxtb	r3, r3
 8005494:	2b00      	cmp	r3, #0
 8005496:	d106      	bne.n	80054a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 f839 	bl	8005518 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2202      	movs	r2, #2
 80054aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	3304      	adds	r3, #4
 80054b6:	4619      	mov	r1, r3
 80054b8:	4610      	mov	r0, r2
 80054ba:	f000 fa89 	bl	80059d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2201      	movs	r2, #1
 8005502:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2201      	movs	r2, #1
 800550a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3708      	adds	r7, #8
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d109      	bne.n	8005550 <HAL_TIM_PWM_Start+0x24>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005542:	b2db      	uxtb	r3, r3
 8005544:	2b01      	cmp	r3, #1
 8005546:	bf14      	ite	ne
 8005548:	2301      	movne	r3, #1
 800554a:	2300      	moveq	r3, #0
 800554c:	b2db      	uxtb	r3, r3
 800554e:	e022      	b.n	8005596 <HAL_TIM_PWM_Start+0x6a>
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	2b04      	cmp	r3, #4
 8005554:	d109      	bne.n	800556a <HAL_TIM_PWM_Start+0x3e>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800555c:	b2db      	uxtb	r3, r3
 800555e:	2b01      	cmp	r3, #1
 8005560:	bf14      	ite	ne
 8005562:	2301      	movne	r3, #1
 8005564:	2300      	moveq	r3, #0
 8005566:	b2db      	uxtb	r3, r3
 8005568:	e015      	b.n	8005596 <HAL_TIM_PWM_Start+0x6a>
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2b08      	cmp	r3, #8
 800556e:	d109      	bne.n	8005584 <HAL_TIM_PWM_Start+0x58>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005576:	b2db      	uxtb	r3, r3
 8005578:	2b01      	cmp	r3, #1
 800557a:	bf14      	ite	ne
 800557c:	2301      	movne	r3, #1
 800557e:	2300      	moveq	r3, #0
 8005580:	b2db      	uxtb	r3, r3
 8005582:	e008      	b.n	8005596 <HAL_TIM_PWM_Start+0x6a>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800558a:	b2db      	uxtb	r3, r3
 800558c:	2b01      	cmp	r3, #1
 800558e:	bf14      	ite	ne
 8005590:	2301      	movne	r3, #1
 8005592:	2300      	moveq	r3, #0
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d001      	beq.n	800559e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e07c      	b.n	8005698 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d104      	bne.n	80055ae <HAL_TIM_PWM_Start+0x82>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2202      	movs	r2, #2
 80055a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055ac:	e013      	b.n	80055d6 <HAL_TIM_PWM_Start+0xaa>
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	2b04      	cmp	r3, #4
 80055b2:	d104      	bne.n	80055be <HAL_TIM_PWM_Start+0x92>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2202      	movs	r2, #2
 80055b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055bc:	e00b      	b.n	80055d6 <HAL_TIM_PWM_Start+0xaa>
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	2b08      	cmp	r3, #8
 80055c2:	d104      	bne.n	80055ce <HAL_TIM_PWM_Start+0xa2>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2202      	movs	r2, #2
 80055c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055cc:	e003      	b.n	80055d6 <HAL_TIM_PWM_Start+0xaa>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2202      	movs	r2, #2
 80055d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2201      	movs	r2, #1
 80055dc:	6839      	ldr	r1, [r7, #0]
 80055de:	4618      	mov	r0, r3
 80055e0:	f000 fce0 	bl	8005fa4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a2d      	ldr	r2, [pc, #180]	; (80056a0 <HAL_TIM_PWM_Start+0x174>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d004      	beq.n	80055f8 <HAL_TIM_PWM_Start+0xcc>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a2c      	ldr	r2, [pc, #176]	; (80056a4 <HAL_TIM_PWM_Start+0x178>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d101      	bne.n	80055fc <HAL_TIM_PWM_Start+0xd0>
 80055f8:	2301      	movs	r3, #1
 80055fa:	e000      	b.n	80055fe <HAL_TIM_PWM_Start+0xd2>
 80055fc:	2300      	movs	r3, #0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d007      	beq.n	8005612 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005610:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a22      	ldr	r2, [pc, #136]	; (80056a0 <HAL_TIM_PWM_Start+0x174>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d022      	beq.n	8005662 <HAL_TIM_PWM_Start+0x136>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005624:	d01d      	beq.n	8005662 <HAL_TIM_PWM_Start+0x136>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a1f      	ldr	r2, [pc, #124]	; (80056a8 <HAL_TIM_PWM_Start+0x17c>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d018      	beq.n	8005662 <HAL_TIM_PWM_Start+0x136>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a1d      	ldr	r2, [pc, #116]	; (80056ac <HAL_TIM_PWM_Start+0x180>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d013      	beq.n	8005662 <HAL_TIM_PWM_Start+0x136>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a1c      	ldr	r2, [pc, #112]	; (80056b0 <HAL_TIM_PWM_Start+0x184>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d00e      	beq.n	8005662 <HAL_TIM_PWM_Start+0x136>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a16      	ldr	r2, [pc, #88]	; (80056a4 <HAL_TIM_PWM_Start+0x178>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d009      	beq.n	8005662 <HAL_TIM_PWM_Start+0x136>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a18      	ldr	r2, [pc, #96]	; (80056b4 <HAL_TIM_PWM_Start+0x188>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d004      	beq.n	8005662 <HAL_TIM_PWM_Start+0x136>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a16      	ldr	r2, [pc, #88]	; (80056b8 <HAL_TIM_PWM_Start+0x18c>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d111      	bne.n	8005686 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f003 0307 	and.w	r3, r3, #7
 800566c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2b06      	cmp	r3, #6
 8005672:	d010      	beq.n	8005696 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f042 0201 	orr.w	r2, r2, #1
 8005682:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005684:	e007      	b.n	8005696 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f042 0201 	orr.w	r2, r2, #1
 8005694:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	40010000 	.word	0x40010000
 80056a4:	40010400 	.word	0x40010400
 80056a8:	40000400 	.word	0x40000400
 80056ac:	40000800 	.word	0x40000800
 80056b0:	40000c00 	.word	0x40000c00
 80056b4:	40014000 	.word	0x40014000
 80056b8:	40001800 	.word	0x40001800

080056bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b086      	sub	sp, #24
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056c8:	2300      	movs	r3, #0
 80056ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d101      	bne.n	80056da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80056d6:	2302      	movs	r3, #2
 80056d8:	e0ae      	b.n	8005838 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2201      	movs	r2, #1
 80056de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2b0c      	cmp	r3, #12
 80056e6:	f200 809f 	bhi.w	8005828 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80056ea:	a201      	add	r2, pc, #4	; (adr r2, 80056f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80056ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f0:	08005725 	.word	0x08005725
 80056f4:	08005829 	.word	0x08005829
 80056f8:	08005829 	.word	0x08005829
 80056fc:	08005829 	.word	0x08005829
 8005700:	08005765 	.word	0x08005765
 8005704:	08005829 	.word	0x08005829
 8005708:	08005829 	.word	0x08005829
 800570c:	08005829 	.word	0x08005829
 8005710:	080057a7 	.word	0x080057a7
 8005714:	08005829 	.word	0x08005829
 8005718:	08005829 	.word	0x08005829
 800571c:	08005829 	.word	0x08005829
 8005720:	080057e7 	.word	0x080057e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68b9      	ldr	r1, [r7, #8]
 800572a:	4618      	mov	r0, r3
 800572c:	f000 f9f0 	bl	8005b10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	699a      	ldr	r2, [r3, #24]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f042 0208 	orr.w	r2, r2, #8
 800573e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	699a      	ldr	r2, [r3, #24]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f022 0204 	bic.w	r2, r2, #4
 800574e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	6999      	ldr	r1, [r3, #24]
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	691a      	ldr	r2, [r3, #16]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	430a      	orrs	r2, r1
 8005760:	619a      	str	r2, [r3, #24]
      break;
 8005762:	e064      	b.n	800582e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68b9      	ldr	r1, [r7, #8]
 800576a:	4618      	mov	r0, r3
 800576c:	f000 fa40 	bl	8005bf0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	699a      	ldr	r2, [r3, #24]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800577e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	699a      	ldr	r2, [r3, #24]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800578e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6999      	ldr	r1, [r3, #24]
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	021a      	lsls	r2, r3, #8
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	430a      	orrs	r2, r1
 80057a2:	619a      	str	r2, [r3, #24]
      break;
 80057a4:	e043      	b.n	800582e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68b9      	ldr	r1, [r7, #8]
 80057ac:	4618      	mov	r0, r3
 80057ae:	f000 fa95 	bl	8005cdc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	69da      	ldr	r2, [r3, #28]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f042 0208 	orr.w	r2, r2, #8
 80057c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	69da      	ldr	r2, [r3, #28]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f022 0204 	bic.w	r2, r2, #4
 80057d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	69d9      	ldr	r1, [r3, #28]
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	691a      	ldr	r2, [r3, #16]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	430a      	orrs	r2, r1
 80057e2:	61da      	str	r2, [r3, #28]
      break;
 80057e4:	e023      	b.n	800582e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68b9      	ldr	r1, [r7, #8]
 80057ec:	4618      	mov	r0, r3
 80057ee:	f000 fae9 	bl	8005dc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	69da      	ldr	r2, [r3, #28]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005800:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	69da      	ldr	r2, [r3, #28]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005810:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	69d9      	ldr	r1, [r3, #28]
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	021a      	lsls	r2, r3, #8
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	430a      	orrs	r2, r1
 8005824:	61da      	str	r2, [r3, #28]
      break;
 8005826:	e002      	b.n	800582e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	75fb      	strb	r3, [r7, #23]
      break;
 800582c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005836:	7dfb      	ldrb	r3, [r7, #23]
}
 8005838:	4618      	mov	r0, r3
 800583a:	3718      	adds	r7, #24
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800584a:	2300      	movs	r3, #0
 800584c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005854:	2b01      	cmp	r3, #1
 8005856:	d101      	bne.n	800585c <HAL_TIM_ConfigClockSource+0x1c>
 8005858:	2302      	movs	r3, #2
 800585a:	e0b4      	b.n	80059c6 <HAL_TIM_ConfigClockSource+0x186>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2202      	movs	r2, #2
 8005868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800587a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005882:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68ba      	ldr	r2, [r7, #8]
 800588a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005894:	d03e      	beq.n	8005914 <HAL_TIM_ConfigClockSource+0xd4>
 8005896:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800589a:	f200 8087 	bhi.w	80059ac <HAL_TIM_ConfigClockSource+0x16c>
 800589e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058a2:	f000 8086 	beq.w	80059b2 <HAL_TIM_ConfigClockSource+0x172>
 80058a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058aa:	d87f      	bhi.n	80059ac <HAL_TIM_ConfigClockSource+0x16c>
 80058ac:	2b70      	cmp	r3, #112	; 0x70
 80058ae:	d01a      	beq.n	80058e6 <HAL_TIM_ConfigClockSource+0xa6>
 80058b0:	2b70      	cmp	r3, #112	; 0x70
 80058b2:	d87b      	bhi.n	80059ac <HAL_TIM_ConfigClockSource+0x16c>
 80058b4:	2b60      	cmp	r3, #96	; 0x60
 80058b6:	d050      	beq.n	800595a <HAL_TIM_ConfigClockSource+0x11a>
 80058b8:	2b60      	cmp	r3, #96	; 0x60
 80058ba:	d877      	bhi.n	80059ac <HAL_TIM_ConfigClockSource+0x16c>
 80058bc:	2b50      	cmp	r3, #80	; 0x50
 80058be:	d03c      	beq.n	800593a <HAL_TIM_ConfigClockSource+0xfa>
 80058c0:	2b50      	cmp	r3, #80	; 0x50
 80058c2:	d873      	bhi.n	80059ac <HAL_TIM_ConfigClockSource+0x16c>
 80058c4:	2b40      	cmp	r3, #64	; 0x40
 80058c6:	d058      	beq.n	800597a <HAL_TIM_ConfigClockSource+0x13a>
 80058c8:	2b40      	cmp	r3, #64	; 0x40
 80058ca:	d86f      	bhi.n	80059ac <HAL_TIM_ConfigClockSource+0x16c>
 80058cc:	2b30      	cmp	r3, #48	; 0x30
 80058ce:	d064      	beq.n	800599a <HAL_TIM_ConfigClockSource+0x15a>
 80058d0:	2b30      	cmp	r3, #48	; 0x30
 80058d2:	d86b      	bhi.n	80059ac <HAL_TIM_ConfigClockSource+0x16c>
 80058d4:	2b20      	cmp	r3, #32
 80058d6:	d060      	beq.n	800599a <HAL_TIM_ConfigClockSource+0x15a>
 80058d8:	2b20      	cmp	r3, #32
 80058da:	d867      	bhi.n	80059ac <HAL_TIM_ConfigClockSource+0x16c>
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d05c      	beq.n	800599a <HAL_TIM_ConfigClockSource+0x15a>
 80058e0:	2b10      	cmp	r3, #16
 80058e2:	d05a      	beq.n	800599a <HAL_TIM_ConfigClockSource+0x15a>
 80058e4:	e062      	b.n	80059ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6818      	ldr	r0, [r3, #0]
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	6899      	ldr	r1, [r3, #8]
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	685a      	ldr	r2, [r3, #4]
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	f000 fb35 	bl	8005f64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005908:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68ba      	ldr	r2, [r7, #8]
 8005910:	609a      	str	r2, [r3, #8]
      break;
 8005912:	e04f      	b.n	80059b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6818      	ldr	r0, [r3, #0]
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	6899      	ldr	r1, [r3, #8]
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	685a      	ldr	r2, [r3, #4]
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	f000 fb1e 	bl	8005f64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	689a      	ldr	r2, [r3, #8]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005936:	609a      	str	r2, [r3, #8]
      break;
 8005938:	e03c      	b.n	80059b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6818      	ldr	r0, [r3, #0]
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	6859      	ldr	r1, [r3, #4]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	461a      	mov	r2, r3
 8005948:	f000 fa92 	bl	8005e70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2150      	movs	r1, #80	; 0x50
 8005952:	4618      	mov	r0, r3
 8005954:	f000 faeb 	bl	8005f2e <TIM_ITRx_SetConfig>
      break;
 8005958:	e02c      	b.n	80059b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6818      	ldr	r0, [r3, #0]
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	6859      	ldr	r1, [r3, #4]
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	461a      	mov	r2, r3
 8005968:	f000 fab1 	bl	8005ece <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2160      	movs	r1, #96	; 0x60
 8005972:	4618      	mov	r0, r3
 8005974:	f000 fadb 	bl	8005f2e <TIM_ITRx_SetConfig>
      break;
 8005978:	e01c      	b.n	80059b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6818      	ldr	r0, [r3, #0]
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	6859      	ldr	r1, [r3, #4]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	461a      	mov	r2, r3
 8005988:	f000 fa72 	bl	8005e70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2140      	movs	r1, #64	; 0x40
 8005992:	4618      	mov	r0, r3
 8005994:	f000 facb 	bl	8005f2e <TIM_ITRx_SetConfig>
      break;
 8005998:	e00c      	b.n	80059b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4619      	mov	r1, r3
 80059a4:	4610      	mov	r0, r2
 80059a6:	f000 fac2 	bl	8005f2e <TIM_ITRx_SetConfig>
      break;
 80059aa:	e003      	b.n	80059b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	73fb      	strb	r3, [r7, #15]
      break;
 80059b0:	e000      	b.n	80059b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80059b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
	...

080059d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a40      	ldr	r2, [pc, #256]	; (8005ae4 <TIM_Base_SetConfig+0x114>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d013      	beq.n	8005a10 <TIM_Base_SetConfig+0x40>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ee:	d00f      	beq.n	8005a10 <TIM_Base_SetConfig+0x40>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a3d      	ldr	r2, [pc, #244]	; (8005ae8 <TIM_Base_SetConfig+0x118>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d00b      	beq.n	8005a10 <TIM_Base_SetConfig+0x40>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a3c      	ldr	r2, [pc, #240]	; (8005aec <TIM_Base_SetConfig+0x11c>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d007      	beq.n	8005a10 <TIM_Base_SetConfig+0x40>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a3b      	ldr	r2, [pc, #236]	; (8005af0 <TIM_Base_SetConfig+0x120>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d003      	beq.n	8005a10 <TIM_Base_SetConfig+0x40>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a3a      	ldr	r2, [pc, #232]	; (8005af4 <TIM_Base_SetConfig+0x124>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d108      	bne.n	8005a22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a2f      	ldr	r2, [pc, #188]	; (8005ae4 <TIM_Base_SetConfig+0x114>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d02b      	beq.n	8005a82 <TIM_Base_SetConfig+0xb2>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a30:	d027      	beq.n	8005a82 <TIM_Base_SetConfig+0xb2>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a2c      	ldr	r2, [pc, #176]	; (8005ae8 <TIM_Base_SetConfig+0x118>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d023      	beq.n	8005a82 <TIM_Base_SetConfig+0xb2>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a2b      	ldr	r2, [pc, #172]	; (8005aec <TIM_Base_SetConfig+0x11c>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d01f      	beq.n	8005a82 <TIM_Base_SetConfig+0xb2>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a2a      	ldr	r2, [pc, #168]	; (8005af0 <TIM_Base_SetConfig+0x120>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d01b      	beq.n	8005a82 <TIM_Base_SetConfig+0xb2>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a29      	ldr	r2, [pc, #164]	; (8005af4 <TIM_Base_SetConfig+0x124>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d017      	beq.n	8005a82 <TIM_Base_SetConfig+0xb2>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a28      	ldr	r2, [pc, #160]	; (8005af8 <TIM_Base_SetConfig+0x128>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d013      	beq.n	8005a82 <TIM_Base_SetConfig+0xb2>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a27      	ldr	r2, [pc, #156]	; (8005afc <TIM_Base_SetConfig+0x12c>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d00f      	beq.n	8005a82 <TIM_Base_SetConfig+0xb2>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a26      	ldr	r2, [pc, #152]	; (8005b00 <TIM_Base_SetConfig+0x130>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d00b      	beq.n	8005a82 <TIM_Base_SetConfig+0xb2>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a25      	ldr	r2, [pc, #148]	; (8005b04 <TIM_Base_SetConfig+0x134>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d007      	beq.n	8005a82 <TIM_Base_SetConfig+0xb2>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a24      	ldr	r2, [pc, #144]	; (8005b08 <TIM_Base_SetConfig+0x138>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d003      	beq.n	8005a82 <TIM_Base_SetConfig+0xb2>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a23      	ldr	r2, [pc, #140]	; (8005b0c <TIM_Base_SetConfig+0x13c>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d108      	bne.n	8005a94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	689a      	ldr	r2, [r3, #8]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a0a      	ldr	r2, [pc, #40]	; (8005ae4 <TIM_Base_SetConfig+0x114>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d003      	beq.n	8005ac8 <TIM_Base_SetConfig+0xf8>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a0c      	ldr	r2, [pc, #48]	; (8005af4 <TIM_Base_SetConfig+0x124>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d103      	bne.n	8005ad0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	691a      	ldr	r2, [r3, #16]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	615a      	str	r2, [r3, #20]
}
 8005ad6:	bf00      	nop
 8005ad8:	3714      	adds	r7, #20
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop
 8005ae4:	40010000 	.word	0x40010000
 8005ae8:	40000400 	.word	0x40000400
 8005aec:	40000800 	.word	0x40000800
 8005af0:	40000c00 	.word	0x40000c00
 8005af4:	40010400 	.word	0x40010400
 8005af8:	40014000 	.word	0x40014000
 8005afc:	40014400 	.word	0x40014400
 8005b00:	40014800 	.word	0x40014800
 8005b04:	40001800 	.word	0x40001800
 8005b08:	40001c00 	.word	0x40001c00
 8005b0c:	40002000 	.word	0x40002000

08005b10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b087      	sub	sp, #28
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a1b      	ldr	r3, [r3, #32]
 8005b1e:	f023 0201 	bic.w	r2, r3, #1
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f023 0303 	bic.w	r3, r3, #3
 8005b46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f023 0302 	bic.w	r3, r3, #2
 8005b58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	697a      	ldr	r2, [r7, #20]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a20      	ldr	r2, [pc, #128]	; (8005be8 <TIM_OC1_SetConfig+0xd8>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d003      	beq.n	8005b74 <TIM_OC1_SetConfig+0x64>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a1f      	ldr	r2, [pc, #124]	; (8005bec <TIM_OC1_SetConfig+0xdc>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d10c      	bne.n	8005b8e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	f023 0308 	bic.w	r3, r3, #8
 8005b7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	697a      	ldr	r2, [r7, #20]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	f023 0304 	bic.w	r3, r3, #4
 8005b8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a15      	ldr	r2, [pc, #84]	; (8005be8 <TIM_OC1_SetConfig+0xd8>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d003      	beq.n	8005b9e <TIM_OC1_SetConfig+0x8e>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a14      	ldr	r2, [pc, #80]	; (8005bec <TIM_OC1_SetConfig+0xdc>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d111      	bne.n	8005bc2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ba4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	695b      	ldr	r3, [r3, #20]
 8005bb2:	693a      	ldr	r2, [r7, #16]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	699b      	ldr	r3, [r3, #24]
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	685a      	ldr	r2, [r3, #4]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	697a      	ldr	r2, [r7, #20]
 8005bda:	621a      	str	r2, [r3, #32]
}
 8005bdc:	bf00      	nop
 8005bde:	371c      	adds	r7, #28
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr
 8005be8:	40010000 	.word	0x40010000
 8005bec:	40010400 	.word	0x40010400

08005bf0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b087      	sub	sp, #28
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	f023 0210 	bic.w	r2, r3, #16
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a1b      	ldr	r3, [r3, #32]
 8005c0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	021b      	lsls	r3, r3, #8
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	f023 0320 	bic.w	r3, r3, #32
 8005c3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	011b      	lsls	r3, r3, #4
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a22      	ldr	r2, [pc, #136]	; (8005cd4 <TIM_OC2_SetConfig+0xe4>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d003      	beq.n	8005c58 <TIM_OC2_SetConfig+0x68>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a21      	ldr	r2, [pc, #132]	; (8005cd8 <TIM_OC2_SetConfig+0xe8>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d10d      	bne.n	8005c74 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	011b      	lsls	r3, r3, #4
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a17      	ldr	r2, [pc, #92]	; (8005cd4 <TIM_OC2_SetConfig+0xe4>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d003      	beq.n	8005c84 <TIM_OC2_SetConfig+0x94>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a16      	ldr	r2, [pc, #88]	; (8005cd8 <TIM_OC2_SetConfig+0xe8>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d113      	bne.n	8005cac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	695b      	ldr	r3, [r3, #20]
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	693a      	ldr	r2, [r7, #16]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	699b      	ldr	r3, [r3, #24]
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	693a      	ldr	r2, [r7, #16]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	697a      	ldr	r2, [r7, #20]
 8005cc4:	621a      	str	r2, [r3, #32]
}
 8005cc6:	bf00      	nop
 8005cc8:	371c      	adds	r7, #28
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	40010000 	.word	0x40010000
 8005cd8:	40010400 	.word	0x40010400

08005cdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b087      	sub	sp, #28
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a1b      	ldr	r3, [r3, #32]
 8005cea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	69db      	ldr	r3, [r3, #28]
 8005d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f023 0303 	bic.w	r3, r3, #3
 8005d12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	021b      	lsls	r3, r3, #8
 8005d2c:	697a      	ldr	r2, [r7, #20]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a21      	ldr	r2, [pc, #132]	; (8005dbc <TIM_OC3_SetConfig+0xe0>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d003      	beq.n	8005d42 <TIM_OC3_SetConfig+0x66>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a20      	ldr	r2, [pc, #128]	; (8005dc0 <TIM_OC3_SetConfig+0xe4>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d10d      	bne.n	8005d5e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	021b      	lsls	r3, r3, #8
 8005d50:	697a      	ldr	r2, [r7, #20]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a16      	ldr	r2, [pc, #88]	; (8005dbc <TIM_OC3_SetConfig+0xe0>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d003      	beq.n	8005d6e <TIM_OC3_SetConfig+0x92>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a15      	ldr	r2, [pc, #84]	; (8005dc0 <TIM_OC3_SetConfig+0xe4>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d113      	bne.n	8005d96 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	011b      	lsls	r3, r3, #4
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	011b      	lsls	r3, r3, #4
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	685a      	ldr	r2, [r3, #4]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	697a      	ldr	r2, [r7, #20]
 8005dae:	621a      	str	r2, [r3, #32]
}
 8005db0:	bf00      	nop
 8005db2:	371c      	adds	r7, #28
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr
 8005dbc:	40010000 	.word	0x40010000
 8005dc0:	40010400 	.word	0x40010400

08005dc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b087      	sub	sp, #28
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
 8005dd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	69db      	ldr	r3, [r3, #28]
 8005dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005df2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	021b      	lsls	r3, r3, #8
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	031b      	lsls	r3, r3, #12
 8005e16:	693a      	ldr	r2, [r7, #16]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a12      	ldr	r2, [pc, #72]	; (8005e68 <TIM_OC4_SetConfig+0xa4>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d003      	beq.n	8005e2c <TIM_OC4_SetConfig+0x68>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a11      	ldr	r2, [pc, #68]	; (8005e6c <TIM_OC4_SetConfig+0xa8>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d109      	bne.n	8005e40 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	695b      	ldr	r3, [r3, #20]
 8005e38:	019b      	lsls	r3, r3, #6
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	685a      	ldr	r2, [r3, #4]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	621a      	str	r2, [r3, #32]
}
 8005e5a:	bf00      	nop
 8005e5c:	371c      	adds	r7, #28
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	40010000 	.word	0x40010000
 8005e6c:	40010400 	.word	0x40010400

08005e70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b087      	sub	sp, #28
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6a1b      	ldr	r3, [r3, #32]
 8005e80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6a1b      	ldr	r3, [r3, #32]
 8005e86:	f023 0201 	bic.w	r2, r3, #1
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	011b      	lsls	r3, r3, #4
 8005ea0:	693a      	ldr	r2, [r7, #16]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	f023 030a 	bic.w	r3, r3, #10
 8005eac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005eae:	697a      	ldr	r2, [r7, #20]
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	697a      	ldr	r2, [r7, #20]
 8005ec0:	621a      	str	r2, [r3, #32]
}
 8005ec2:	bf00      	nop
 8005ec4:	371c      	adds	r7, #28
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr

08005ece <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ece:	b480      	push	{r7}
 8005ed0:	b087      	sub	sp, #28
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	60f8      	str	r0, [r7, #12]
 8005ed6:	60b9      	str	r1, [r7, #8]
 8005ed8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	f023 0210 	bic.w	r2, r3, #16
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6a1b      	ldr	r3, [r3, #32]
 8005ef0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ef8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	031b      	lsls	r3, r3, #12
 8005efe:	697a      	ldr	r2, [r7, #20]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f0a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	011b      	lsls	r3, r3, #4
 8005f10:	693a      	ldr	r2, [r7, #16]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	693a      	ldr	r2, [r7, #16]
 8005f20:	621a      	str	r2, [r3, #32]
}
 8005f22:	bf00      	nop
 8005f24:	371c      	adds	r7, #28
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f2e:	b480      	push	{r7}
 8005f30:	b085      	sub	sp, #20
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
 8005f36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f46:	683a      	ldr	r2, [r7, #0]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	f043 0307 	orr.w	r3, r3, #7
 8005f50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	609a      	str	r2, [r3, #8]
}
 8005f58:	bf00      	nop
 8005f5a:	3714      	adds	r7, #20
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b087      	sub	sp, #28
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	607a      	str	r2, [r7, #4]
 8005f70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	021a      	lsls	r2, r3, #8
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	431a      	orrs	r2, r3
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	697a      	ldr	r2, [r7, #20]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	697a      	ldr	r2, [r7, #20]
 8005f96:	609a      	str	r2, [r3, #8]
}
 8005f98:	bf00      	nop
 8005f9a:	371c      	adds	r7, #28
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b087      	sub	sp, #28
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	f003 031f 	and.w	r3, r3, #31
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6a1a      	ldr	r2, [r3, #32]
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	43db      	mvns	r3, r3
 8005fc6:	401a      	ands	r2, r3
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6a1a      	ldr	r2, [r3, #32]
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	f003 031f 	and.w	r3, r3, #31
 8005fd6:	6879      	ldr	r1, [r7, #4]
 8005fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8005fdc:	431a      	orrs	r2, r3
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	621a      	str	r2, [r3, #32]
}
 8005fe2:	bf00      	nop
 8005fe4:	371c      	adds	r7, #28
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
	...

08005ff0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006000:	2b01      	cmp	r3, #1
 8006002:	d101      	bne.n	8006008 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006004:	2302      	movs	r3, #2
 8006006:	e05a      	b.n	80060be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2202      	movs	r2, #2
 8006014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800602e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	4313      	orrs	r3, r2
 8006038:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a21      	ldr	r2, [pc, #132]	; (80060cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d022      	beq.n	8006092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006054:	d01d      	beq.n	8006092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a1d      	ldr	r2, [pc, #116]	; (80060d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d018      	beq.n	8006092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a1b      	ldr	r2, [pc, #108]	; (80060d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d013      	beq.n	8006092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a1a      	ldr	r2, [pc, #104]	; (80060d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d00e      	beq.n	8006092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a18      	ldr	r2, [pc, #96]	; (80060dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d009      	beq.n	8006092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a17      	ldr	r2, [pc, #92]	; (80060e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d004      	beq.n	8006092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a15      	ldr	r2, [pc, #84]	; (80060e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d10c      	bne.n	80060ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006098:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	68ba      	ldr	r2, [r7, #8]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68ba      	ldr	r2, [r7, #8]
 80060aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3714      	adds	r7, #20
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	40010000 	.word	0x40010000
 80060d0:	40000400 	.word	0x40000400
 80060d4:	40000800 	.word	0x40000800
 80060d8:	40000c00 	.word	0x40000c00
 80060dc:	40010400 	.word	0x40010400
 80060e0:	40014000 	.word	0x40014000
 80060e4:	40001800 	.word	0x40001800

080060e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060e8:	b084      	sub	sp, #16
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b084      	sub	sp, #16
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
 80060f2:	f107 001c 	add.w	r0, r7, #28
 80060f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80060fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d122      	bne.n	8006146 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006104:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006114:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800612a:	2b01      	cmp	r3, #1
 800612c:	d105      	bne.n	800613a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f001 fbe8 	bl	8007910 <USB_CoreReset>
 8006140:	4603      	mov	r3, r0
 8006142:	73fb      	strb	r3, [r7, #15]
 8006144:	e01a      	b.n	800617c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f001 fbdc 	bl	8007910 <USB_CoreReset>
 8006158:	4603      	mov	r3, r0
 800615a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800615c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800615e:	2b00      	cmp	r3, #0
 8006160:	d106      	bne.n	8006170 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006166:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	639a      	str	r2, [r3, #56]	; 0x38
 800616e:	e005      	b.n	800617c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006174:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800617c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617e:	2b01      	cmp	r3, #1
 8006180:	d10b      	bne.n	800619a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	f043 0206 	orr.w	r2, r3, #6
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	f043 0220 	orr.w	r2, r3, #32
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800619a:	7bfb      	ldrb	r3, [r7, #15]
}
 800619c:	4618      	mov	r0, r3
 800619e:	3710      	adds	r7, #16
 80061a0:	46bd      	mov	sp, r7
 80061a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061a6:	b004      	add	sp, #16
 80061a8:	4770      	bx	lr
	...

080061ac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b087      	sub	sp, #28
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	4613      	mov	r3, r2
 80061b8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80061ba:	79fb      	ldrb	r3, [r7, #7]
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d165      	bne.n	800628c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	4a41      	ldr	r2, [pc, #260]	; (80062c8 <USB_SetTurnaroundTime+0x11c>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d906      	bls.n	80061d6 <USB_SetTurnaroundTime+0x2a>
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	4a40      	ldr	r2, [pc, #256]	; (80062cc <USB_SetTurnaroundTime+0x120>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d202      	bcs.n	80061d6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80061d0:	230f      	movs	r3, #15
 80061d2:	617b      	str	r3, [r7, #20]
 80061d4:	e062      	b.n	800629c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	4a3c      	ldr	r2, [pc, #240]	; (80062cc <USB_SetTurnaroundTime+0x120>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d306      	bcc.n	80061ec <USB_SetTurnaroundTime+0x40>
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	4a3b      	ldr	r2, [pc, #236]	; (80062d0 <USB_SetTurnaroundTime+0x124>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d202      	bcs.n	80061ec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80061e6:	230e      	movs	r3, #14
 80061e8:	617b      	str	r3, [r7, #20]
 80061ea:	e057      	b.n	800629c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	4a38      	ldr	r2, [pc, #224]	; (80062d0 <USB_SetTurnaroundTime+0x124>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d306      	bcc.n	8006202 <USB_SetTurnaroundTime+0x56>
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	4a37      	ldr	r2, [pc, #220]	; (80062d4 <USB_SetTurnaroundTime+0x128>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d202      	bcs.n	8006202 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80061fc:	230d      	movs	r3, #13
 80061fe:	617b      	str	r3, [r7, #20]
 8006200:	e04c      	b.n	800629c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	4a33      	ldr	r2, [pc, #204]	; (80062d4 <USB_SetTurnaroundTime+0x128>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d306      	bcc.n	8006218 <USB_SetTurnaroundTime+0x6c>
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	4a32      	ldr	r2, [pc, #200]	; (80062d8 <USB_SetTurnaroundTime+0x12c>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d802      	bhi.n	8006218 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006212:	230c      	movs	r3, #12
 8006214:	617b      	str	r3, [r7, #20]
 8006216:	e041      	b.n	800629c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	4a2f      	ldr	r2, [pc, #188]	; (80062d8 <USB_SetTurnaroundTime+0x12c>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d906      	bls.n	800622e <USB_SetTurnaroundTime+0x82>
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	4a2e      	ldr	r2, [pc, #184]	; (80062dc <USB_SetTurnaroundTime+0x130>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d802      	bhi.n	800622e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006228:	230b      	movs	r3, #11
 800622a:	617b      	str	r3, [r7, #20]
 800622c:	e036      	b.n	800629c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	4a2a      	ldr	r2, [pc, #168]	; (80062dc <USB_SetTurnaroundTime+0x130>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d906      	bls.n	8006244 <USB_SetTurnaroundTime+0x98>
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	4a29      	ldr	r2, [pc, #164]	; (80062e0 <USB_SetTurnaroundTime+0x134>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d802      	bhi.n	8006244 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800623e:	230a      	movs	r3, #10
 8006240:	617b      	str	r3, [r7, #20]
 8006242:	e02b      	b.n	800629c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	4a26      	ldr	r2, [pc, #152]	; (80062e0 <USB_SetTurnaroundTime+0x134>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d906      	bls.n	800625a <USB_SetTurnaroundTime+0xae>
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	4a25      	ldr	r2, [pc, #148]	; (80062e4 <USB_SetTurnaroundTime+0x138>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d202      	bcs.n	800625a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006254:	2309      	movs	r3, #9
 8006256:	617b      	str	r3, [r7, #20]
 8006258:	e020      	b.n	800629c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	4a21      	ldr	r2, [pc, #132]	; (80062e4 <USB_SetTurnaroundTime+0x138>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d306      	bcc.n	8006270 <USB_SetTurnaroundTime+0xc4>
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	4a20      	ldr	r2, [pc, #128]	; (80062e8 <USB_SetTurnaroundTime+0x13c>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d802      	bhi.n	8006270 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800626a:	2308      	movs	r3, #8
 800626c:	617b      	str	r3, [r7, #20]
 800626e:	e015      	b.n	800629c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	4a1d      	ldr	r2, [pc, #116]	; (80062e8 <USB_SetTurnaroundTime+0x13c>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d906      	bls.n	8006286 <USB_SetTurnaroundTime+0xda>
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	4a1c      	ldr	r2, [pc, #112]	; (80062ec <USB_SetTurnaroundTime+0x140>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d202      	bcs.n	8006286 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006280:	2307      	movs	r3, #7
 8006282:	617b      	str	r3, [r7, #20]
 8006284:	e00a      	b.n	800629c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006286:	2306      	movs	r3, #6
 8006288:	617b      	str	r3, [r7, #20]
 800628a:	e007      	b.n	800629c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800628c:	79fb      	ldrb	r3, [r7, #7]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d102      	bne.n	8006298 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006292:	2309      	movs	r3, #9
 8006294:	617b      	str	r3, [r7, #20]
 8006296:	e001      	b.n	800629c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006298:	2309      	movs	r3, #9
 800629a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	68da      	ldr	r2, [r3, #12]
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	029b      	lsls	r3, r3, #10
 80062b0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80062b4:	431a      	orrs	r2, r3
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80062ba:	2300      	movs	r3, #0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	371c      	adds	r7, #28
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr
 80062c8:	00d8acbf 	.word	0x00d8acbf
 80062cc:	00e4e1c0 	.word	0x00e4e1c0
 80062d0:	00f42400 	.word	0x00f42400
 80062d4:	01067380 	.word	0x01067380
 80062d8:	011a499f 	.word	0x011a499f
 80062dc:	01312cff 	.word	0x01312cff
 80062e0:	014ca43f 	.word	0x014ca43f
 80062e4:	016e3600 	.word	0x016e3600
 80062e8:	01a6ab1f 	.word	0x01a6ab1f
 80062ec:	01e84800 	.word	0x01e84800

080062f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f043 0201 	orr.w	r2, r3, #1
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	370c      	adds	r7, #12
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006312:	b480      	push	{r7}
 8006314:	b083      	sub	sp, #12
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	f023 0201 	bic.w	r2, r3, #1
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	460b      	mov	r3, r1
 800633e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006340:	2300      	movs	r3, #0
 8006342:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006350:	78fb      	ldrb	r3, [r7, #3]
 8006352:	2b01      	cmp	r3, #1
 8006354:	d115      	bne.n	8006382 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006362:	2001      	movs	r0, #1
 8006364:	f7fb f98e 	bl	8001684 <HAL_Delay>
      ms++;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	3301      	adds	r3, #1
 800636c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f001 fa3f 	bl	80077f2 <USB_GetMode>
 8006374:	4603      	mov	r3, r0
 8006376:	2b01      	cmp	r3, #1
 8006378:	d01e      	beq.n	80063b8 <USB_SetCurrentMode+0x84>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2b31      	cmp	r3, #49	; 0x31
 800637e:	d9f0      	bls.n	8006362 <USB_SetCurrentMode+0x2e>
 8006380:	e01a      	b.n	80063b8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006382:	78fb      	ldrb	r3, [r7, #3]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d115      	bne.n	80063b4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006394:	2001      	movs	r0, #1
 8006396:	f7fb f975 	bl	8001684 <HAL_Delay>
      ms++;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	3301      	adds	r3, #1
 800639e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f001 fa26 	bl	80077f2 <USB_GetMode>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d005      	beq.n	80063b8 <USB_SetCurrentMode+0x84>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2b31      	cmp	r3, #49	; 0x31
 80063b0:	d9f0      	bls.n	8006394 <USB_SetCurrentMode+0x60>
 80063b2:	e001      	b.n	80063b8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e005      	b.n	80063c4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2b32      	cmp	r3, #50	; 0x32
 80063bc:	d101      	bne.n	80063c2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e000      	b.n	80063c4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3710      	adds	r7, #16
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80063cc:	b084      	sub	sp, #16
 80063ce:	b580      	push	{r7, lr}
 80063d0:	b086      	sub	sp, #24
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
 80063d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80063da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80063de:	2300      	movs	r3, #0
 80063e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80063e6:	2300      	movs	r3, #0
 80063e8:	613b      	str	r3, [r7, #16]
 80063ea:	e009      	b.n	8006400 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	3340      	adds	r3, #64	; 0x40
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	4413      	add	r3, r2
 80063f6:	2200      	movs	r2, #0
 80063f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	3301      	adds	r3, #1
 80063fe:	613b      	str	r3, [r7, #16]
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	2b0e      	cmp	r3, #14
 8006404:	d9f2      	bls.n	80063ec <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006408:	2b00      	cmp	r3, #0
 800640a:	d11c      	bne.n	8006446 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800641a:	f043 0302 	orr.w	r3, r3, #2
 800641e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006424:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	601a      	str	r2, [r3, #0]
 8006444:	e005      	b.n	8006452 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800644a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006458:	461a      	mov	r2, r3
 800645a:	2300      	movs	r3, #0
 800645c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006464:	4619      	mov	r1, r3
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800646c:	461a      	mov	r2, r3
 800646e:	680b      	ldr	r3, [r1, #0]
 8006470:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006474:	2b01      	cmp	r3, #1
 8006476:	d10c      	bne.n	8006492 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800647a:	2b00      	cmp	r3, #0
 800647c:	d104      	bne.n	8006488 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800647e:	2100      	movs	r1, #0
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 f965 	bl	8006750 <USB_SetDevSpeed>
 8006486:	e008      	b.n	800649a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006488:	2101      	movs	r1, #1
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 f960 	bl	8006750 <USB_SetDevSpeed>
 8006490:	e003      	b.n	800649a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006492:	2103      	movs	r1, #3
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f000 f95b 	bl	8006750 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800649a:	2110      	movs	r1, #16
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 f8f3 	bl	8006688 <USB_FlushTxFifo>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d001      	beq.n	80064ac <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 f91f 	bl	80066f0 <USB_FlushRxFifo>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d001      	beq.n	80064bc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064c2:	461a      	mov	r2, r3
 80064c4:	2300      	movs	r3, #0
 80064c6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ce:	461a      	mov	r2, r3
 80064d0:	2300      	movs	r3, #0
 80064d2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064da:	461a      	mov	r2, r3
 80064dc:	2300      	movs	r3, #0
 80064de:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064e0:	2300      	movs	r3, #0
 80064e2:	613b      	str	r3, [r7, #16]
 80064e4:	e043      	b.n	800656e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	015a      	lsls	r2, r3, #5
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	4413      	add	r3, r2
 80064ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064fc:	d118      	bne.n	8006530 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d10a      	bne.n	800651a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	015a      	lsls	r2, r3, #5
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	4413      	add	r3, r2
 800650c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006510:	461a      	mov	r2, r3
 8006512:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006516:	6013      	str	r3, [r2, #0]
 8006518:	e013      	b.n	8006542 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	015a      	lsls	r2, r3, #5
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	4413      	add	r3, r2
 8006522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006526:	461a      	mov	r2, r3
 8006528:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800652c:	6013      	str	r3, [r2, #0]
 800652e:	e008      	b.n	8006542 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	015a      	lsls	r2, r3, #5
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	4413      	add	r3, r2
 8006538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800653c:	461a      	mov	r2, r3
 800653e:	2300      	movs	r3, #0
 8006540:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	015a      	lsls	r2, r3, #5
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	4413      	add	r3, r2
 800654a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800654e:	461a      	mov	r2, r3
 8006550:	2300      	movs	r3, #0
 8006552:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	015a      	lsls	r2, r3, #5
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	4413      	add	r3, r2
 800655c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006560:	461a      	mov	r2, r3
 8006562:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006566:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	3301      	adds	r3, #1
 800656c:	613b      	str	r3, [r7, #16]
 800656e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006570:	693a      	ldr	r2, [r7, #16]
 8006572:	429a      	cmp	r2, r3
 8006574:	d3b7      	bcc.n	80064e6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006576:	2300      	movs	r3, #0
 8006578:	613b      	str	r3, [r7, #16]
 800657a:	e043      	b.n	8006604 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	015a      	lsls	r2, r3, #5
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	4413      	add	r3, r2
 8006584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800658e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006592:	d118      	bne.n	80065c6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d10a      	bne.n	80065b0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	015a      	lsls	r2, r3, #5
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	4413      	add	r3, r2
 80065a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a6:	461a      	mov	r2, r3
 80065a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80065ac:	6013      	str	r3, [r2, #0]
 80065ae:	e013      	b.n	80065d8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	015a      	lsls	r2, r3, #5
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	4413      	add	r3, r2
 80065b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065bc:	461a      	mov	r2, r3
 80065be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80065c2:	6013      	str	r3, [r2, #0]
 80065c4:	e008      	b.n	80065d8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	015a      	lsls	r2, r3, #5
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	4413      	add	r3, r2
 80065ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d2:	461a      	mov	r2, r3
 80065d4:	2300      	movs	r3, #0
 80065d6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	015a      	lsls	r2, r3, #5
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	4413      	add	r3, r2
 80065e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e4:	461a      	mov	r2, r3
 80065e6:	2300      	movs	r3, #0
 80065e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	015a      	lsls	r2, r3, #5
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	4413      	add	r3, r2
 80065f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f6:	461a      	mov	r2, r3
 80065f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80065fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	3301      	adds	r3, #1
 8006602:	613b      	str	r3, [r7, #16]
 8006604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006606:	693a      	ldr	r2, [r7, #16]
 8006608:	429a      	cmp	r2, r3
 800660a:	d3b7      	bcc.n	800657c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800661a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800661e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800662c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800662e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006630:	2b00      	cmp	r3, #0
 8006632:	d105      	bne.n	8006640 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	699b      	ldr	r3, [r3, #24]
 8006638:	f043 0210 	orr.w	r2, r3, #16
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	699a      	ldr	r2, [r3, #24]
 8006644:	4b0f      	ldr	r3, [pc, #60]	; (8006684 <USB_DevInit+0x2b8>)
 8006646:	4313      	orrs	r3, r2
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800664c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800664e:	2b00      	cmp	r3, #0
 8006650:	d005      	beq.n	800665e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	f043 0208 	orr.w	r2, r3, #8
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800665e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006660:	2b01      	cmp	r3, #1
 8006662:	d107      	bne.n	8006674 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	699b      	ldr	r3, [r3, #24]
 8006668:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800666c:	f043 0304 	orr.w	r3, r3, #4
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006674:	7dfb      	ldrb	r3, [r7, #23]
}
 8006676:	4618      	mov	r0, r3
 8006678:	3718      	adds	r7, #24
 800667a:	46bd      	mov	sp, r7
 800667c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006680:	b004      	add	sp, #16
 8006682:	4770      	bx	lr
 8006684:	803c3800 	.word	0x803c3800

08006688 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006688:	b480      	push	{r7}
 800668a:	b085      	sub	sp, #20
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006692:	2300      	movs	r3, #0
 8006694:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	3301      	adds	r3, #1
 800669a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	4a13      	ldr	r2, [pc, #76]	; (80066ec <USB_FlushTxFifo+0x64>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d901      	bls.n	80066a8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e01b      	b.n	80066e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	daf2      	bge.n	8006696 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80066b0:	2300      	movs	r3, #0
 80066b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	019b      	lsls	r3, r3, #6
 80066b8:	f043 0220 	orr.w	r2, r3, #32
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	3301      	adds	r3, #1
 80066c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	4a08      	ldr	r2, [pc, #32]	; (80066ec <USB_FlushTxFifo+0x64>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d901      	bls.n	80066d2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	e006      	b.n	80066e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	691b      	ldr	r3, [r3, #16]
 80066d6:	f003 0320 	and.w	r3, r3, #32
 80066da:	2b20      	cmp	r3, #32
 80066dc:	d0f0      	beq.n	80066c0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3714      	adds	r7, #20
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr
 80066ec:	00030d40 	.word	0x00030d40

080066f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066f8:	2300      	movs	r3, #0
 80066fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	3301      	adds	r3, #1
 8006700:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	4a11      	ldr	r2, [pc, #68]	; (800674c <USB_FlushRxFifo+0x5c>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d901      	bls.n	800670e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	e018      	b.n	8006740 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	2b00      	cmp	r3, #0
 8006714:	daf2      	bge.n	80066fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006716:	2300      	movs	r3, #0
 8006718:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2210      	movs	r2, #16
 800671e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	3301      	adds	r3, #1
 8006724:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	4a08      	ldr	r2, [pc, #32]	; (800674c <USB_FlushRxFifo+0x5c>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d901      	bls.n	8006732 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800672e:	2303      	movs	r3, #3
 8006730:	e006      	b.n	8006740 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	f003 0310 	and.w	r3, r3, #16
 800673a:	2b10      	cmp	r3, #16
 800673c:	d0f0      	beq.n	8006720 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	3714      	adds	r7, #20
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr
 800674c:	00030d40 	.word	0x00030d40

08006750 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	460b      	mov	r3, r1
 800675a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	78fb      	ldrb	r3, [r7, #3]
 800676a:	68f9      	ldr	r1, [r7, #12]
 800676c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006770:	4313      	orrs	r3, r2
 8006772:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3714      	adds	r7, #20
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr

08006782 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006782:	b480      	push	{r7}
 8006784:	b087      	sub	sp, #28
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	f003 0306 	and.w	r3, r3, #6
 800679a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d102      	bne.n	80067a8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80067a2:	2300      	movs	r3, #0
 80067a4:	75fb      	strb	r3, [r7, #23]
 80067a6:	e00a      	b.n	80067be <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	d002      	beq.n	80067b4 <USB_GetDevSpeed+0x32>
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2b06      	cmp	r3, #6
 80067b2:	d102      	bne.n	80067ba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80067b4:	2302      	movs	r3, #2
 80067b6:	75fb      	strb	r3, [r7, #23]
 80067b8:	e001      	b.n	80067be <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80067ba:	230f      	movs	r3, #15
 80067bc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80067be:	7dfb      	ldrb	r3, [r7, #23]
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	371c      	adds	r7, #28
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	785b      	ldrb	r3, [r3, #1]
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d13a      	bne.n	800685e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ee:	69da      	ldr	r2, [r3, #28]
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	f003 030f 	and.w	r3, r3, #15
 80067f8:	2101      	movs	r1, #1
 80067fa:	fa01 f303 	lsl.w	r3, r1, r3
 80067fe:	b29b      	uxth	r3, r3
 8006800:	68f9      	ldr	r1, [r7, #12]
 8006802:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006806:	4313      	orrs	r3, r2
 8006808:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	015a      	lsls	r2, r3, #5
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	4413      	add	r3, r2
 8006812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800681c:	2b00      	cmp	r3, #0
 800681e:	d155      	bne.n	80068cc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	015a      	lsls	r2, r3, #5
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	4413      	add	r3, r2
 8006828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	791b      	ldrb	r3, [r3, #4]
 800683a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800683c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	059b      	lsls	r3, r3, #22
 8006842:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006844:	4313      	orrs	r3, r2
 8006846:	68ba      	ldr	r2, [r7, #8]
 8006848:	0151      	lsls	r1, r2, #5
 800684a:	68fa      	ldr	r2, [r7, #12]
 800684c:	440a      	add	r2, r1
 800684e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006852:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800685a:	6013      	str	r3, [r2, #0]
 800685c:	e036      	b.n	80068cc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006864:	69da      	ldr	r2, [r3, #28]
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	f003 030f 	and.w	r3, r3, #15
 800686e:	2101      	movs	r1, #1
 8006870:	fa01 f303 	lsl.w	r3, r1, r3
 8006874:	041b      	lsls	r3, r3, #16
 8006876:	68f9      	ldr	r1, [r7, #12]
 8006878:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800687c:	4313      	orrs	r3, r2
 800687e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	015a      	lsls	r2, r3, #5
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	4413      	add	r3, r2
 8006888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006892:	2b00      	cmp	r3, #0
 8006894:	d11a      	bne.n	80068cc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	015a      	lsls	r2, r3, #5
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	4413      	add	r3, r2
 800689e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	791b      	ldrb	r3, [r3, #4]
 80068b0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80068b2:	430b      	orrs	r3, r1
 80068b4:	4313      	orrs	r3, r2
 80068b6:	68ba      	ldr	r2, [r7, #8]
 80068b8:	0151      	lsls	r1, r2, #5
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	440a      	add	r2, r1
 80068be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068ca:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3714      	adds	r7, #20
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
	...

080068dc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	785b      	ldrb	r3, [r3, #1]
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d161      	bne.n	80069bc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	015a      	lsls	r2, r3, #5
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	4413      	add	r3, r2
 8006900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800690a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800690e:	d11f      	bne.n	8006950 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	015a      	lsls	r2, r3, #5
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	4413      	add	r3, r2
 8006918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68ba      	ldr	r2, [r7, #8]
 8006920:	0151      	lsls	r1, r2, #5
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	440a      	add	r2, r1
 8006926:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800692a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800692e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	015a      	lsls	r2, r3, #5
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	4413      	add	r3, r2
 8006938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68ba      	ldr	r2, [r7, #8]
 8006940:	0151      	lsls	r1, r2, #5
 8006942:	68fa      	ldr	r2, [r7, #12]
 8006944:	440a      	add	r2, r1
 8006946:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800694a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800694e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006956:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	f003 030f 	and.w	r3, r3, #15
 8006960:	2101      	movs	r1, #1
 8006962:	fa01 f303 	lsl.w	r3, r1, r3
 8006966:	b29b      	uxth	r3, r3
 8006968:	43db      	mvns	r3, r3
 800696a:	68f9      	ldr	r1, [r7, #12]
 800696c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006970:	4013      	ands	r3, r2
 8006972:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800697a:	69da      	ldr	r2, [r3, #28]
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	f003 030f 	and.w	r3, r3, #15
 8006984:	2101      	movs	r1, #1
 8006986:	fa01 f303 	lsl.w	r3, r1, r3
 800698a:	b29b      	uxth	r3, r3
 800698c:	43db      	mvns	r3, r3
 800698e:	68f9      	ldr	r1, [r7, #12]
 8006990:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006994:	4013      	ands	r3, r2
 8006996:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	015a      	lsls	r2, r3, #5
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	4413      	add	r3, r2
 80069a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	0159      	lsls	r1, r3, #5
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	440b      	add	r3, r1
 80069ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069b2:	4619      	mov	r1, r3
 80069b4:	4b35      	ldr	r3, [pc, #212]	; (8006a8c <USB_DeactivateEndpoint+0x1b0>)
 80069b6:	4013      	ands	r3, r2
 80069b8:	600b      	str	r3, [r1, #0]
 80069ba:	e060      	b.n	8006a7e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	015a      	lsls	r2, r3, #5
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	4413      	add	r3, r2
 80069c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069d2:	d11f      	bne.n	8006a14 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	015a      	lsls	r2, r3, #5
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	4413      	add	r3, r2
 80069dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68ba      	ldr	r2, [r7, #8]
 80069e4:	0151      	lsls	r1, r2, #5
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	440a      	add	r2, r1
 80069ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80069f2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	015a      	lsls	r2, r3, #5
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	4413      	add	r3, r2
 80069fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68ba      	ldr	r2, [r7, #8]
 8006a04:	0151      	lsls	r1, r2, #5
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	440a      	add	r2, r1
 8006a0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	f003 030f 	and.w	r3, r3, #15
 8006a24:	2101      	movs	r1, #1
 8006a26:	fa01 f303 	lsl.w	r3, r1, r3
 8006a2a:	041b      	lsls	r3, r3, #16
 8006a2c:	43db      	mvns	r3, r3
 8006a2e:	68f9      	ldr	r1, [r7, #12]
 8006a30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a34:	4013      	ands	r3, r2
 8006a36:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a3e:	69da      	ldr	r2, [r3, #28]
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	f003 030f 	and.w	r3, r3, #15
 8006a48:	2101      	movs	r1, #1
 8006a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a4e:	041b      	lsls	r3, r3, #16
 8006a50:	43db      	mvns	r3, r3
 8006a52:	68f9      	ldr	r1, [r7, #12]
 8006a54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a58:	4013      	ands	r3, r2
 8006a5a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	015a      	lsls	r2, r3, #5
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	4413      	add	r3, r2
 8006a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	0159      	lsls	r1, r3, #5
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	440b      	add	r3, r1
 8006a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a76:	4619      	mov	r1, r3
 8006a78:	4b05      	ldr	r3, [pc, #20]	; (8006a90 <USB_DeactivateEndpoint+0x1b4>)
 8006a7a:	4013      	ands	r3, r2
 8006a7c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006a7e:	2300      	movs	r3, #0
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3714      	adds	r7, #20
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr
 8006a8c:	ec337800 	.word	0xec337800
 8006a90:	eff37800 	.word	0xeff37800

08006a94 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b08a      	sub	sp, #40	; 0x28
 8006a98:	af02      	add	r7, sp, #8
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	785b      	ldrb	r3, [r3, #1]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	f040 815c 	bne.w	8006d6e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	699b      	ldr	r3, [r3, #24]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d132      	bne.n	8006b24 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	015a      	lsls	r2, r3, #5
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	69ba      	ldr	r2, [r7, #24]
 8006ace:	0151      	lsls	r1, r2, #5
 8006ad0:	69fa      	ldr	r2, [r7, #28]
 8006ad2:	440a      	add	r2, r1
 8006ad4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ad8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006adc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ae0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006ae2:	69bb      	ldr	r3, [r7, #24]
 8006ae4:	015a      	lsls	r2, r3, #5
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	4413      	add	r3, r2
 8006aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	69ba      	ldr	r2, [r7, #24]
 8006af2:	0151      	lsls	r1, r2, #5
 8006af4:	69fa      	ldr	r2, [r7, #28]
 8006af6:	440a      	add	r2, r1
 8006af8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006afc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	015a      	lsls	r2, r3, #5
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	4413      	add	r3, r2
 8006b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	69ba      	ldr	r2, [r7, #24]
 8006b12:	0151      	lsls	r1, r2, #5
 8006b14:	69fa      	ldr	r2, [r7, #28]
 8006b16:	440a      	add	r2, r1
 8006b18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b1c:	0cdb      	lsrs	r3, r3, #19
 8006b1e:	04db      	lsls	r3, r3, #19
 8006b20:	6113      	str	r3, [r2, #16]
 8006b22:	e074      	b.n	8006c0e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	015a      	lsls	r2, r3, #5
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	69ba      	ldr	r2, [r7, #24]
 8006b34:	0151      	lsls	r1, r2, #5
 8006b36:	69fa      	ldr	r2, [r7, #28]
 8006b38:	440a      	add	r2, r1
 8006b3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b3e:	0cdb      	lsrs	r3, r3, #19
 8006b40:	04db      	lsls	r3, r3, #19
 8006b42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	015a      	lsls	r2, r3, #5
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	69ba      	ldr	r2, [r7, #24]
 8006b54:	0151      	lsls	r1, r2, #5
 8006b56:	69fa      	ldr	r2, [r7, #28]
 8006b58:	440a      	add	r2, r1
 8006b5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b5e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b62:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	015a      	lsls	r2, r3, #5
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	4413      	add	r3, r2
 8006b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b74:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	6999      	ldr	r1, [r3, #24]
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	440b      	add	r3, r1
 8006b80:	1e59      	subs	r1, r3, #1
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	fbb1 f3f3 	udiv	r3, r1, r3
 8006b8a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006b8c:	4b9d      	ldr	r3, [pc, #628]	; (8006e04 <USB_EPStartXfer+0x370>)
 8006b8e:	400b      	ands	r3, r1
 8006b90:	69b9      	ldr	r1, [r7, #24]
 8006b92:	0148      	lsls	r0, r1, #5
 8006b94:	69f9      	ldr	r1, [r7, #28]
 8006b96:	4401      	add	r1, r0
 8006b98:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	015a      	lsls	r2, r3, #5
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bac:	691a      	ldr	r2, [r3, #16]
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bb6:	69b9      	ldr	r1, [r7, #24]
 8006bb8:	0148      	lsls	r0, r1, #5
 8006bba:	69f9      	ldr	r1, [r7, #28]
 8006bbc:	4401      	add	r1, r0
 8006bbe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	791b      	ldrb	r3, [r3, #4]
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d11f      	bne.n	8006c0e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	015a      	lsls	r2, r3, #5
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bda:	691b      	ldr	r3, [r3, #16]
 8006bdc:	69ba      	ldr	r2, [r7, #24]
 8006bde:	0151      	lsls	r1, r2, #5
 8006be0:	69fa      	ldr	r2, [r7, #28]
 8006be2:	440a      	add	r2, r1
 8006be4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006be8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006bec:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	015a      	lsls	r2, r3, #5
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	69ba      	ldr	r2, [r7, #24]
 8006bfe:	0151      	lsls	r1, r2, #5
 8006c00:	69fa      	ldr	r2, [r7, #28]
 8006c02:	440a      	add	r2, r1
 8006c04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c0c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006c0e:	79fb      	ldrb	r3, [r7, #7]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d14b      	bne.n	8006cac <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	695b      	ldr	r3, [r3, #20]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d009      	beq.n	8006c30 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	015a      	lsls	r2, r3, #5
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	4413      	add	r3, r2
 8006c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c28:	461a      	mov	r2, r3
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	695b      	ldr	r3, [r3, #20]
 8006c2e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	791b      	ldrb	r3, [r3, #4]
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d128      	bne.n	8006c8a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d110      	bne.n	8006c6a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	015a      	lsls	r2, r3, #5
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	4413      	add	r3, r2
 8006c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	69ba      	ldr	r2, [r7, #24]
 8006c58:	0151      	lsls	r1, r2, #5
 8006c5a:	69fa      	ldr	r2, [r7, #28]
 8006c5c:	440a      	add	r2, r1
 8006c5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c66:	6013      	str	r3, [r2, #0]
 8006c68:	e00f      	b.n	8006c8a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	015a      	lsls	r2, r3, #5
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	4413      	add	r3, r2
 8006c72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	69ba      	ldr	r2, [r7, #24]
 8006c7a:	0151      	lsls	r1, r2, #5
 8006c7c:	69fa      	ldr	r2, [r7, #28]
 8006c7e:	440a      	add	r2, r1
 8006c80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c88:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	015a      	lsls	r2, r3, #5
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	4413      	add	r3, r2
 8006c92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	69ba      	ldr	r2, [r7, #24]
 8006c9a:	0151      	lsls	r1, r2, #5
 8006c9c:	69fa      	ldr	r2, [r7, #28]
 8006c9e:	440a      	add	r2, r1
 8006ca0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ca4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ca8:	6013      	str	r3, [r2, #0]
 8006caa:	e133      	b.n	8006f14 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006cac:	69bb      	ldr	r3, [r7, #24]
 8006cae:	015a      	lsls	r2, r3, #5
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	69ba      	ldr	r2, [r7, #24]
 8006cbc:	0151      	lsls	r1, r2, #5
 8006cbe:	69fa      	ldr	r2, [r7, #28]
 8006cc0:	440a      	add	r2, r1
 8006cc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cc6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006cca:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	791b      	ldrb	r3, [r3, #4]
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d015      	beq.n	8006d00 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	699b      	ldr	r3, [r3, #24]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f000 811b 	beq.w	8006f14 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ce4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	f003 030f 	and.w	r3, r3, #15
 8006cee:	2101      	movs	r1, #1
 8006cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8006cf4:	69f9      	ldr	r1, [r7, #28]
 8006cf6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	634b      	str	r3, [r1, #52]	; 0x34
 8006cfe:	e109      	b.n	8006f14 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d110      	bne.n	8006d32 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	015a      	lsls	r2, r3, #5
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	4413      	add	r3, r2
 8006d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	69ba      	ldr	r2, [r7, #24]
 8006d20:	0151      	lsls	r1, r2, #5
 8006d22:	69fa      	ldr	r2, [r7, #28]
 8006d24:	440a      	add	r2, r1
 8006d26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d2e:	6013      	str	r3, [r2, #0]
 8006d30:	e00f      	b.n	8006d52 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	015a      	lsls	r2, r3, #5
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	4413      	add	r3, r2
 8006d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	69ba      	ldr	r2, [r7, #24]
 8006d42:	0151      	lsls	r1, r2, #5
 8006d44:	69fa      	ldr	r2, [r7, #28]
 8006d46:	440a      	add	r2, r1
 8006d48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d50:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	6919      	ldr	r1, [r3, #16]
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	781a      	ldrb	r2, [r3, #0]
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	699b      	ldr	r3, [r3, #24]
 8006d5e:	b298      	uxth	r0, r3
 8006d60:	79fb      	ldrb	r3, [r7, #7]
 8006d62:	9300      	str	r3, [sp, #0]
 8006d64:	4603      	mov	r3, r0
 8006d66:	68f8      	ldr	r0, [r7, #12]
 8006d68:	f000 fade 	bl	8007328 <USB_WritePacket>
 8006d6c:	e0d2      	b.n	8006f14 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	015a      	lsls	r2, r3, #5
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	4413      	add	r3, r2
 8006d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	69ba      	ldr	r2, [r7, #24]
 8006d7e:	0151      	lsls	r1, r2, #5
 8006d80:	69fa      	ldr	r2, [r7, #28]
 8006d82:	440a      	add	r2, r1
 8006d84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d88:	0cdb      	lsrs	r3, r3, #19
 8006d8a:	04db      	lsls	r3, r3, #19
 8006d8c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	015a      	lsls	r2, r3, #5
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	4413      	add	r3, r2
 8006d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	69ba      	ldr	r2, [r7, #24]
 8006d9e:	0151      	lsls	r1, r2, #5
 8006da0:	69fa      	ldr	r2, [r7, #28]
 8006da2:	440a      	add	r2, r1
 8006da4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006da8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006dac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006db0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	699b      	ldr	r3, [r3, #24]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d126      	bne.n	8006e08 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	015a      	lsls	r2, r3, #5
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dc6:	691a      	ldr	r2, [r3, #16]
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dd0:	69b9      	ldr	r1, [r7, #24]
 8006dd2:	0148      	lsls	r0, r1, #5
 8006dd4:	69f9      	ldr	r1, [r7, #28]
 8006dd6:	4401      	add	r1, r0
 8006dd8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	015a      	lsls	r2, r3, #5
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	4413      	add	r3, r2
 8006de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	69ba      	ldr	r2, [r7, #24]
 8006df0:	0151      	lsls	r1, r2, #5
 8006df2:	69fa      	ldr	r2, [r7, #28]
 8006df4:	440a      	add	r2, r1
 8006df6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dfa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006dfe:	6113      	str	r3, [r2, #16]
 8006e00:	e03a      	b.n	8006e78 <USB_EPStartXfer+0x3e4>
 8006e02:	bf00      	nop
 8006e04:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	699a      	ldr	r2, [r3, #24]
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	4413      	add	r3, r2
 8006e12:	1e5a      	subs	r2, r3, #1
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e1c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	8afa      	ldrh	r2, [r7, #22]
 8006e24:	fb03 f202 	mul.w	r2, r3, r2
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	015a      	lsls	r2, r3, #5
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	4413      	add	r3, r2
 8006e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e38:	691a      	ldr	r2, [r3, #16]
 8006e3a:	8afb      	ldrh	r3, [r7, #22]
 8006e3c:	04d9      	lsls	r1, r3, #19
 8006e3e:	4b38      	ldr	r3, [pc, #224]	; (8006f20 <USB_EPStartXfer+0x48c>)
 8006e40:	400b      	ands	r3, r1
 8006e42:	69b9      	ldr	r1, [r7, #24]
 8006e44:	0148      	lsls	r0, r1, #5
 8006e46:	69f9      	ldr	r1, [r7, #28]
 8006e48:	4401      	add	r1, r0
 8006e4a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	015a      	lsls	r2, r3, #5
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	4413      	add	r3, r2
 8006e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e5e:	691a      	ldr	r2, [r3, #16]
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	69db      	ldr	r3, [r3, #28]
 8006e64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e68:	69b9      	ldr	r1, [r7, #24]
 8006e6a:	0148      	lsls	r0, r1, #5
 8006e6c:	69f9      	ldr	r1, [r7, #28]
 8006e6e:	4401      	add	r1, r0
 8006e70:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006e74:	4313      	orrs	r3, r2
 8006e76:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006e78:	79fb      	ldrb	r3, [r7, #7]
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d10d      	bne.n	8006e9a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d009      	beq.n	8006e9a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	6919      	ldr	r1, [r3, #16]
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	015a      	lsls	r2, r3, #5
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	4413      	add	r3, r2
 8006e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e96:	460a      	mov	r2, r1
 8006e98:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	791b      	ldrb	r3, [r3, #4]
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d128      	bne.n	8006ef4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d110      	bne.n	8006ed4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	015a      	lsls	r2, r3, #5
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	4413      	add	r3, r2
 8006eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	69ba      	ldr	r2, [r7, #24]
 8006ec2:	0151      	lsls	r1, r2, #5
 8006ec4:	69fa      	ldr	r2, [r7, #28]
 8006ec6:	440a      	add	r2, r1
 8006ec8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ecc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ed0:	6013      	str	r3, [r2, #0]
 8006ed2:	e00f      	b.n	8006ef4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	015a      	lsls	r2, r3, #5
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	4413      	add	r3, r2
 8006edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	69ba      	ldr	r2, [r7, #24]
 8006ee4:	0151      	lsls	r1, r2, #5
 8006ee6:	69fa      	ldr	r2, [r7, #28]
 8006ee8:	440a      	add	r2, r1
 8006eea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ef2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	015a      	lsls	r2, r3, #5
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	4413      	add	r3, r2
 8006efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	69ba      	ldr	r2, [r7, #24]
 8006f04:	0151      	lsls	r1, r2, #5
 8006f06:	69fa      	ldr	r2, [r7, #28]
 8006f08:	440a      	add	r2, r1
 8006f0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f0e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f12:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3720      	adds	r7, #32
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	1ff80000 	.word	0x1ff80000

08006f24 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b087      	sub	sp, #28
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	4613      	mov	r3, r2
 8006f30:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	785b      	ldrb	r3, [r3, #1]
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	f040 80ce 	bne.w	80070e2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d132      	bne.n	8006fb4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	015a      	lsls	r2, r3, #5
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	4413      	add	r3, r2
 8006f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f5a:	691b      	ldr	r3, [r3, #16]
 8006f5c:	693a      	ldr	r2, [r7, #16]
 8006f5e:	0151      	lsls	r1, r2, #5
 8006f60:	697a      	ldr	r2, [r7, #20]
 8006f62:	440a      	add	r2, r1
 8006f64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f68:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f6c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	015a      	lsls	r2, r3, #5
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	4413      	add	r3, r2
 8006f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	693a      	ldr	r2, [r7, #16]
 8006f82:	0151      	lsls	r1, r2, #5
 8006f84:	697a      	ldr	r2, [r7, #20]
 8006f86:	440a      	add	r2, r1
 8006f88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	015a      	lsls	r2, r3, #5
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	4413      	add	r3, r2
 8006f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f9e:	691b      	ldr	r3, [r3, #16]
 8006fa0:	693a      	ldr	r2, [r7, #16]
 8006fa2:	0151      	lsls	r1, r2, #5
 8006fa4:	697a      	ldr	r2, [r7, #20]
 8006fa6:	440a      	add	r2, r1
 8006fa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fac:	0cdb      	lsrs	r3, r3, #19
 8006fae:	04db      	lsls	r3, r3, #19
 8006fb0:	6113      	str	r3, [r2, #16]
 8006fb2:	e04e      	b.n	8007052 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	015a      	lsls	r2, r3, #5
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	4413      	add	r3, r2
 8006fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	693a      	ldr	r2, [r7, #16]
 8006fc4:	0151      	lsls	r1, r2, #5
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	440a      	add	r2, r1
 8006fca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fce:	0cdb      	lsrs	r3, r3, #19
 8006fd0:	04db      	lsls	r3, r3, #19
 8006fd2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	015a      	lsls	r2, r3, #5
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	4413      	add	r3, r2
 8006fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	693a      	ldr	r2, [r7, #16]
 8006fe4:	0151      	lsls	r1, r2, #5
 8006fe6:	697a      	ldr	r2, [r7, #20]
 8006fe8:	440a      	add	r2, r1
 8006fea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ff2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ff6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	699a      	ldr	r2, [r3, #24]
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	429a      	cmp	r2, r3
 8007002:	d903      	bls.n	800700c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	68da      	ldr	r2, [r3, #12]
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	015a      	lsls	r2, r3, #5
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	4413      	add	r3, r2
 8007014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	693a      	ldr	r2, [r7, #16]
 800701c:	0151      	lsls	r1, r2, #5
 800701e:	697a      	ldr	r2, [r7, #20]
 8007020:	440a      	add	r2, r1
 8007022:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007026:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800702a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	015a      	lsls	r2, r3, #5
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	4413      	add	r3, r2
 8007034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007038:	691a      	ldr	r2, [r3, #16]
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	699b      	ldr	r3, [r3, #24]
 800703e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007042:	6939      	ldr	r1, [r7, #16]
 8007044:	0148      	lsls	r0, r1, #5
 8007046:	6979      	ldr	r1, [r7, #20]
 8007048:	4401      	add	r1, r0
 800704a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800704e:	4313      	orrs	r3, r2
 8007050:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007052:	79fb      	ldrb	r3, [r7, #7]
 8007054:	2b01      	cmp	r3, #1
 8007056:	d11e      	bne.n	8007096 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	695b      	ldr	r3, [r3, #20]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d009      	beq.n	8007074 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	015a      	lsls	r2, r3, #5
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	4413      	add	r3, r2
 8007068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800706c:	461a      	mov	r2, r3
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	695b      	ldr	r3, [r3, #20]
 8007072:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	015a      	lsls	r2, r3, #5
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	4413      	add	r3, r2
 800707c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	693a      	ldr	r2, [r7, #16]
 8007084:	0151      	lsls	r1, r2, #5
 8007086:	697a      	ldr	r2, [r7, #20]
 8007088:	440a      	add	r2, r1
 800708a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800708e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007092:	6013      	str	r3, [r2, #0]
 8007094:	e097      	b.n	80071c6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	015a      	lsls	r2, r3, #5
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	4413      	add	r3, r2
 800709e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	693a      	ldr	r2, [r7, #16]
 80070a6:	0151      	lsls	r1, r2, #5
 80070a8:	697a      	ldr	r2, [r7, #20]
 80070aa:	440a      	add	r2, r1
 80070ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80070b4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	699b      	ldr	r3, [r3, #24]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	f000 8083 	beq.w	80071c6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	f003 030f 	and.w	r3, r3, #15
 80070d0:	2101      	movs	r1, #1
 80070d2:	fa01 f303 	lsl.w	r3, r1, r3
 80070d6:	6979      	ldr	r1, [r7, #20]
 80070d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070dc:	4313      	orrs	r3, r2
 80070de:	634b      	str	r3, [r1, #52]	; 0x34
 80070e0:	e071      	b.n	80071c6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	015a      	lsls	r2, r3, #5
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	4413      	add	r3, r2
 80070ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ee:	691b      	ldr	r3, [r3, #16]
 80070f0:	693a      	ldr	r2, [r7, #16]
 80070f2:	0151      	lsls	r1, r2, #5
 80070f4:	697a      	ldr	r2, [r7, #20]
 80070f6:	440a      	add	r2, r1
 80070f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070fc:	0cdb      	lsrs	r3, r3, #19
 80070fe:	04db      	lsls	r3, r3, #19
 8007100:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	015a      	lsls	r2, r3, #5
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	4413      	add	r3, r2
 800710a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	693a      	ldr	r2, [r7, #16]
 8007112:	0151      	lsls	r1, r2, #5
 8007114:	697a      	ldr	r2, [r7, #20]
 8007116:	440a      	add	r2, r1
 8007118:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800711c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007120:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007124:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	699b      	ldr	r3, [r3, #24]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d003      	beq.n	8007136 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	68da      	ldr	r2, [r3, #12]
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	68da      	ldr	r2, [r3, #12]
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	015a      	lsls	r2, r3, #5
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	4413      	add	r3, r2
 8007146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	693a      	ldr	r2, [r7, #16]
 800714e:	0151      	lsls	r1, r2, #5
 8007150:	697a      	ldr	r2, [r7, #20]
 8007152:	440a      	add	r2, r1
 8007154:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007158:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800715c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	015a      	lsls	r2, r3, #5
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	4413      	add	r3, r2
 8007166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800716a:	691a      	ldr	r2, [r3, #16]
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	69db      	ldr	r3, [r3, #28]
 8007170:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007174:	6939      	ldr	r1, [r7, #16]
 8007176:	0148      	lsls	r0, r1, #5
 8007178:	6979      	ldr	r1, [r7, #20]
 800717a:	4401      	add	r1, r0
 800717c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007180:	4313      	orrs	r3, r2
 8007182:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007184:	79fb      	ldrb	r3, [r7, #7]
 8007186:	2b01      	cmp	r3, #1
 8007188:	d10d      	bne.n	80071a6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	691b      	ldr	r3, [r3, #16]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d009      	beq.n	80071a6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	6919      	ldr	r1, [r3, #16]
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	015a      	lsls	r2, r3, #5
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	4413      	add	r3, r2
 800719e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071a2:	460a      	mov	r2, r1
 80071a4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	015a      	lsls	r2, r3, #5
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	4413      	add	r3, r2
 80071ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	693a      	ldr	r2, [r7, #16]
 80071b6:	0151      	lsls	r1, r2, #5
 80071b8:	697a      	ldr	r2, [r7, #20]
 80071ba:	440a      	add	r2, r1
 80071bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80071c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80071c6:	2300      	movs	r3, #0
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	371c      	adds	r7, #28
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b087      	sub	sp, #28
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80071de:	2300      	movs	r3, #0
 80071e0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80071e2:	2300      	movs	r3, #0
 80071e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	785b      	ldrb	r3, [r3, #1]
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d14a      	bne.n	8007288 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	015a      	lsls	r2, r3, #5
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	4413      	add	r3, r2
 80071fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007206:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800720a:	f040 8086 	bne.w	800731a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	015a      	lsls	r2, r3, #5
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	4413      	add	r3, r2
 8007218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	683a      	ldr	r2, [r7, #0]
 8007220:	7812      	ldrb	r2, [r2, #0]
 8007222:	0151      	lsls	r1, r2, #5
 8007224:	693a      	ldr	r2, [r7, #16]
 8007226:	440a      	add	r2, r1
 8007228:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800722c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007230:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	015a      	lsls	r2, r3, #5
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	4413      	add	r3, r2
 800723c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	683a      	ldr	r2, [r7, #0]
 8007244:	7812      	ldrb	r2, [r2, #0]
 8007246:	0151      	lsls	r1, r2, #5
 8007248:	693a      	ldr	r2, [r7, #16]
 800724a:	440a      	add	r2, r1
 800724c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007250:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007254:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	3301      	adds	r3, #1
 800725a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007262:	4293      	cmp	r3, r2
 8007264:	d902      	bls.n	800726c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	75fb      	strb	r3, [r7, #23]
          break;
 800726a:	e056      	b.n	800731a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	015a      	lsls	r2, r3, #5
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	4413      	add	r3, r2
 8007276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007280:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007284:	d0e7      	beq.n	8007256 <USB_EPStopXfer+0x82>
 8007286:	e048      	b.n	800731a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	015a      	lsls	r2, r3, #5
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	4413      	add	r3, r2
 8007292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800729c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072a0:	d13b      	bne.n	800731a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	015a      	lsls	r2, r3, #5
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	4413      	add	r3, r2
 80072ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	683a      	ldr	r2, [r7, #0]
 80072b4:	7812      	ldrb	r2, [r2, #0]
 80072b6:	0151      	lsls	r1, r2, #5
 80072b8:	693a      	ldr	r2, [r7, #16]
 80072ba:	440a      	add	r2, r1
 80072bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80072c4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	015a      	lsls	r2, r3, #5
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	4413      	add	r3, r2
 80072d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	683a      	ldr	r2, [r7, #0]
 80072d8:	7812      	ldrb	r2, [r2, #0]
 80072da:	0151      	lsls	r1, r2, #5
 80072dc:	693a      	ldr	r2, [r7, #16]
 80072de:	440a      	add	r2, r1
 80072e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072e8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	3301      	adds	r3, #1
 80072ee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f242 7210 	movw	r2, #10000	; 0x2710
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d902      	bls.n	8007300 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80072fa:	2301      	movs	r3, #1
 80072fc:	75fb      	strb	r3, [r7, #23]
          break;
 80072fe:	e00c      	b.n	800731a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	015a      	lsls	r2, r3, #5
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	4413      	add	r3, r2
 800730a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007314:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007318:	d0e7      	beq.n	80072ea <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800731a:	7dfb      	ldrb	r3, [r7, #23]
}
 800731c:	4618      	mov	r0, r3
 800731e:	371c      	adds	r7, #28
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr

08007328 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007328:	b480      	push	{r7}
 800732a:	b089      	sub	sp, #36	; 0x24
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	4611      	mov	r1, r2
 8007334:	461a      	mov	r2, r3
 8007336:	460b      	mov	r3, r1
 8007338:	71fb      	strb	r3, [r7, #7]
 800733a:	4613      	mov	r3, r2
 800733c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007346:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800734a:	2b00      	cmp	r3, #0
 800734c:	d123      	bne.n	8007396 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800734e:	88bb      	ldrh	r3, [r7, #4]
 8007350:	3303      	adds	r3, #3
 8007352:	089b      	lsrs	r3, r3, #2
 8007354:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007356:	2300      	movs	r3, #0
 8007358:	61bb      	str	r3, [r7, #24]
 800735a:	e018      	b.n	800738e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800735c:	79fb      	ldrb	r3, [r7, #7]
 800735e:	031a      	lsls	r2, r3, #12
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	4413      	add	r3, r2
 8007364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007368:	461a      	mov	r2, r3
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007370:	69fb      	ldr	r3, [r7, #28]
 8007372:	3301      	adds	r3, #1
 8007374:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	3301      	adds	r3, #1
 800737a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800737c:	69fb      	ldr	r3, [r7, #28]
 800737e:	3301      	adds	r3, #1
 8007380:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	3301      	adds	r3, #1
 8007386:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	3301      	adds	r3, #1
 800738c:	61bb      	str	r3, [r7, #24]
 800738e:	69ba      	ldr	r2, [r7, #24]
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	429a      	cmp	r2, r3
 8007394:	d3e2      	bcc.n	800735c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007396:	2300      	movs	r3, #0
}
 8007398:	4618      	mov	r0, r3
 800739a:	3724      	adds	r7, #36	; 0x24
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b08b      	sub	sp, #44	; 0x2c
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	4613      	mov	r3, r2
 80073b0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80073ba:	88fb      	ldrh	r3, [r7, #6]
 80073bc:	089b      	lsrs	r3, r3, #2
 80073be:	b29b      	uxth	r3, r3
 80073c0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80073c2:	88fb      	ldrh	r3, [r7, #6]
 80073c4:	f003 0303 	and.w	r3, r3, #3
 80073c8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80073ca:	2300      	movs	r3, #0
 80073cc:	623b      	str	r3, [r7, #32]
 80073ce:	e014      	b.n	80073fa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073da:	601a      	str	r2, [r3, #0]
    pDest++;
 80073dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073de:	3301      	adds	r3, #1
 80073e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80073e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e4:	3301      	adds	r3, #1
 80073e6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80073e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ea:	3301      	adds	r3, #1
 80073ec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80073ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f0:	3301      	adds	r3, #1
 80073f2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80073f4:	6a3b      	ldr	r3, [r7, #32]
 80073f6:	3301      	adds	r3, #1
 80073f8:	623b      	str	r3, [r7, #32]
 80073fa:	6a3a      	ldr	r2, [r7, #32]
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	429a      	cmp	r2, r3
 8007400:	d3e6      	bcc.n	80073d0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007402:	8bfb      	ldrh	r3, [r7, #30]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d01e      	beq.n	8007446 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007408:	2300      	movs	r3, #0
 800740a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007412:	461a      	mov	r2, r3
 8007414:	f107 0310 	add.w	r3, r7, #16
 8007418:	6812      	ldr	r2, [r2, #0]
 800741a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800741c:	693a      	ldr	r2, [r7, #16]
 800741e:	6a3b      	ldr	r3, [r7, #32]
 8007420:	b2db      	uxtb	r3, r3
 8007422:	00db      	lsls	r3, r3, #3
 8007424:	fa22 f303 	lsr.w	r3, r2, r3
 8007428:	b2da      	uxtb	r2, r3
 800742a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742c:	701a      	strb	r2, [r3, #0]
      i++;
 800742e:	6a3b      	ldr	r3, [r7, #32]
 8007430:	3301      	adds	r3, #1
 8007432:	623b      	str	r3, [r7, #32]
      pDest++;
 8007434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007436:	3301      	adds	r3, #1
 8007438:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800743a:	8bfb      	ldrh	r3, [r7, #30]
 800743c:	3b01      	subs	r3, #1
 800743e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007440:	8bfb      	ldrh	r3, [r7, #30]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d1ea      	bne.n	800741c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007448:	4618      	mov	r0, r3
 800744a:	372c      	adds	r7, #44	; 0x2c
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr

08007454 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007454:	b480      	push	{r7}
 8007456:	b085      	sub	sp, #20
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	785b      	ldrb	r3, [r3, #1]
 800746c:	2b01      	cmp	r3, #1
 800746e:	d12c      	bne.n	80074ca <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	015a      	lsls	r2, r3, #5
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	4413      	add	r3, r2
 8007478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2b00      	cmp	r3, #0
 8007480:	db12      	blt.n	80074a8 <USB_EPSetStall+0x54>
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d00f      	beq.n	80074a8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	015a      	lsls	r2, r3, #5
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	4413      	add	r3, r2
 8007490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	68ba      	ldr	r2, [r7, #8]
 8007498:	0151      	lsls	r1, r2, #5
 800749a:	68fa      	ldr	r2, [r7, #12]
 800749c:	440a      	add	r2, r1
 800749e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80074a6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	015a      	lsls	r2, r3, #5
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	4413      	add	r3, r2
 80074b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68ba      	ldr	r2, [r7, #8]
 80074b8:	0151      	lsls	r1, r2, #5
 80074ba:	68fa      	ldr	r2, [r7, #12]
 80074bc:	440a      	add	r2, r1
 80074be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80074c6:	6013      	str	r3, [r2, #0]
 80074c8:	e02b      	b.n	8007522 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	015a      	lsls	r2, r3, #5
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	4413      	add	r3, r2
 80074d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	db12      	blt.n	8007502 <USB_EPSetStall+0xae>
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00f      	beq.n	8007502 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	015a      	lsls	r2, r3, #5
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	4413      	add	r3, r2
 80074ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68ba      	ldr	r2, [r7, #8]
 80074f2:	0151      	lsls	r1, r2, #5
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	440a      	add	r2, r1
 80074f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007500:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	015a      	lsls	r2, r3, #5
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	4413      	add	r3, r2
 800750a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	68ba      	ldr	r2, [r7, #8]
 8007512:	0151      	lsls	r1, r2, #5
 8007514:	68fa      	ldr	r2, [r7, #12]
 8007516:	440a      	add	r2, r1
 8007518:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800751c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007520:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007522:	2300      	movs	r3, #0
}
 8007524:	4618      	mov	r0, r3
 8007526:	3714      	adds	r7, #20
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007530:	b480      	push	{r7}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	785b      	ldrb	r3, [r3, #1]
 8007548:	2b01      	cmp	r3, #1
 800754a:	d128      	bne.n	800759e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	015a      	lsls	r2, r3, #5
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	4413      	add	r3, r2
 8007554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	68ba      	ldr	r2, [r7, #8]
 800755c:	0151      	lsls	r1, r2, #5
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	440a      	add	r2, r1
 8007562:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007566:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800756a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	791b      	ldrb	r3, [r3, #4]
 8007570:	2b03      	cmp	r3, #3
 8007572:	d003      	beq.n	800757c <USB_EPClearStall+0x4c>
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	791b      	ldrb	r3, [r3, #4]
 8007578:	2b02      	cmp	r3, #2
 800757a:	d138      	bne.n	80075ee <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	015a      	lsls	r2, r3, #5
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	4413      	add	r3, r2
 8007584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68ba      	ldr	r2, [r7, #8]
 800758c:	0151      	lsls	r1, r2, #5
 800758e:	68fa      	ldr	r2, [r7, #12]
 8007590:	440a      	add	r2, r1
 8007592:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800759a:	6013      	str	r3, [r2, #0]
 800759c:	e027      	b.n	80075ee <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	015a      	lsls	r2, r3, #5
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	4413      	add	r3, r2
 80075a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	68ba      	ldr	r2, [r7, #8]
 80075ae:	0151      	lsls	r1, r2, #5
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	440a      	add	r2, r1
 80075b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80075bc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	791b      	ldrb	r3, [r3, #4]
 80075c2:	2b03      	cmp	r3, #3
 80075c4:	d003      	beq.n	80075ce <USB_EPClearStall+0x9e>
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	791b      	ldrb	r3, [r3, #4]
 80075ca:	2b02      	cmp	r3, #2
 80075cc:	d10f      	bne.n	80075ee <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	015a      	lsls	r2, r3, #5
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	4413      	add	r3, r2
 80075d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	0151      	lsls	r1, r2, #5
 80075e0:	68fa      	ldr	r2, [r7, #12]
 80075e2:	440a      	add	r2, r1
 80075e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075ec:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3714      	adds	r7, #20
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b085      	sub	sp, #20
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	460b      	mov	r3, r1
 8007606:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	68fa      	ldr	r2, [r7, #12]
 8007616:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800761a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800761e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	78fb      	ldrb	r3, [r7, #3]
 800762a:	011b      	lsls	r3, r3, #4
 800762c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007630:	68f9      	ldr	r1, [r7, #12]
 8007632:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007636:	4313      	orrs	r3, r2
 8007638:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3714      	adds	r7, #20
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007648:	b480      	push	{r7}
 800764a:	b085      	sub	sp, #20
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007662:	f023 0303 	bic.w	r3, r3, #3
 8007666:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	68fa      	ldr	r2, [r7, #12]
 8007672:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007676:	f023 0302 	bic.w	r3, r3, #2
 800767a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	3714      	adds	r7, #20
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr

0800768a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800768a:	b480      	push	{r7}
 800768c:	b085      	sub	sp, #20
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	68fa      	ldr	r2, [r7, #12]
 80076a0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80076a4:	f023 0303 	bic.w	r3, r3, #3
 80076a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	68fa      	ldr	r2, [r7, #12]
 80076b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076b8:	f043 0302 	orr.w	r3, r3, #2
 80076bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80076be:	2300      	movs	r3, #0
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3714      	adds	r7, #20
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b085      	sub	sp, #20
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	695b      	ldr	r3, [r3, #20]
 80076d8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	699b      	ldr	r3, [r3, #24]
 80076de:	68fa      	ldr	r2, [r7, #12]
 80076e0:	4013      	ands	r3, r2
 80076e2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80076e4:	68fb      	ldr	r3, [r7, #12]
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3714      	adds	r7, #20
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr

080076f2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80076f2:	b480      	push	{r7}
 80076f4:	b085      	sub	sp, #20
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007704:	699b      	ldr	r3, [r3, #24]
 8007706:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800770e:	69db      	ldr	r3, [r3, #28]
 8007710:	68ba      	ldr	r2, [r7, #8]
 8007712:	4013      	ands	r3, r2
 8007714:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	0c1b      	lsrs	r3, r3, #16
}
 800771a:	4618      	mov	r0, r3
 800771c:	3714      	adds	r7, #20
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr

08007726 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007726:	b480      	push	{r7}
 8007728:	b085      	sub	sp, #20
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007738:	699b      	ldr	r3, [r3, #24]
 800773a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007742:	69db      	ldr	r3, [r3, #28]
 8007744:	68ba      	ldr	r2, [r7, #8]
 8007746:	4013      	ands	r3, r2
 8007748:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	b29b      	uxth	r3, r3
}
 800774e:	4618      	mov	r0, r3
 8007750:	3714      	adds	r7, #20
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr

0800775a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800775a:	b480      	push	{r7}
 800775c:	b085      	sub	sp, #20
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
 8007762:	460b      	mov	r3, r1
 8007764:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800776a:	78fb      	ldrb	r3, [r7, #3]
 800776c:	015a      	lsls	r2, r3, #5
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	4413      	add	r3, r2
 8007772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007780:	695b      	ldr	r3, [r3, #20]
 8007782:	68ba      	ldr	r2, [r7, #8]
 8007784:	4013      	ands	r3, r2
 8007786:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007788:	68bb      	ldr	r3, [r7, #8]
}
 800778a:	4618      	mov	r0, r3
 800778c:	3714      	adds	r7, #20
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr

08007796 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007796:	b480      	push	{r7}
 8007798:	b087      	sub	sp, #28
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
 800779e:	460b      	mov	r3, r1
 80077a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077b8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80077ba:	78fb      	ldrb	r3, [r7, #3]
 80077bc:	f003 030f 	and.w	r3, r3, #15
 80077c0:	68fa      	ldr	r2, [r7, #12]
 80077c2:	fa22 f303 	lsr.w	r3, r2, r3
 80077c6:	01db      	lsls	r3, r3, #7
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	693a      	ldr	r2, [r7, #16]
 80077cc:	4313      	orrs	r3, r2
 80077ce:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80077d0:	78fb      	ldrb	r3, [r7, #3]
 80077d2:	015a      	lsls	r2, r3, #5
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	4413      	add	r3, r2
 80077d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	693a      	ldr	r2, [r7, #16]
 80077e0:	4013      	ands	r3, r2
 80077e2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80077e4:	68bb      	ldr	r3, [r7, #8]
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	371c      	adds	r7, #28
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr

080077f2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80077f2:	b480      	push	{r7}
 80077f4:	b083      	sub	sp, #12
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	695b      	ldr	r3, [r3, #20]
 80077fe:	f003 0301 	and.w	r3, r3, #1
}
 8007802:	4618      	mov	r0, r3
 8007804:	370c      	adds	r7, #12
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr

0800780e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800780e:	b480      	push	{r7}
 8007810:	b085      	sub	sp, #20
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	68fa      	ldr	r2, [r7, #12]
 8007824:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007828:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800782c:	f023 0307 	bic.w	r3, r3, #7
 8007830:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	68fa      	ldr	r2, [r7, #12]
 800783c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007844:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007846:	2300      	movs	r3, #0
}
 8007848:	4618      	mov	r0, r3
 800784a:	3714      	adds	r7, #20
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007854:	b480      	push	{r7}
 8007856:	b087      	sub	sp, #28
 8007858:	af00      	add	r7, sp, #0
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	460b      	mov	r3, r1
 800785e:	607a      	str	r2, [r7, #4]
 8007860:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	333c      	adds	r3, #60	; 0x3c
 800786a:	3304      	adds	r3, #4
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	4a26      	ldr	r2, [pc, #152]	; (800790c <USB_EP0_OutStart+0xb8>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d90a      	bls.n	800788e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007884:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007888:	d101      	bne.n	800788e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800788a:	2300      	movs	r3, #0
 800788c:	e037      	b.n	80078fe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007894:	461a      	mov	r2, r3
 8007896:	2300      	movs	r3, #0
 8007898:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078a0:	691b      	ldr	r3, [r3, #16]
 80078a2:	697a      	ldr	r2, [r7, #20]
 80078a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078b4:	691b      	ldr	r3, [r3, #16]
 80078b6:	697a      	ldr	r2, [r7, #20]
 80078b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078bc:	f043 0318 	orr.w	r3, r3, #24
 80078c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078c8:	691b      	ldr	r3, [r3, #16]
 80078ca:	697a      	ldr	r2, [r7, #20]
 80078cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078d0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80078d4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80078d6:	7afb      	ldrb	r3, [r7, #11]
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d10f      	bne.n	80078fc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078e2:	461a      	mov	r2, r3
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	697a      	ldr	r2, [r7, #20]
 80078f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078f6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80078fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80078fc:	2300      	movs	r3, #0
}
 80078fe:	4618      	mov	r0, r3
 8007900:	371c      	adds	r7, #28
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr
 800790a:	bf00      	nop
 800790c:	4f54300a 	.word	0x4f54300a

08007910 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007910:	b480      	push	{r7}
 8007912:	b085      	sub	sp, #20
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007918:	2300      	movs	r3, #0
 800791a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	3301      	adds	r3, #1
 8007920:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	4a13      	ldr	r2, [pc, #76]	; (8007974 <USB_CoreReset+0x64>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d901      	bls.n	800792e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800792a:	2303      	movs	r3, #3
 800792c:	e01b      	b.n	8007966 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	691b      	ldr	r3, [r3, #16]
 8007932:	2b00      	cmp	r3, #0
 8007934:	daf2      	bge.n	800791c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007936:	2300      	movs	r3, #0
 8007938:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	f043 0201 	orr.w	r2, r3, #1
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	3301      	adds	r3, #1
 800794a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	4a09      	ldr	r2, [pc, #36]	; (8007974 <USB_CoreReset+0x64>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d901      	bls.n	8007958 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007954:	2303      	movs	r3, #3
 8007956:	e006      	b.n	8007966 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	691b      	ldr	r3, [r3, #16]
 800795c:	f003 0301 	and.w	r3, r3, #1
 8007960:	2b01      	cmp	r3, #1
 8007962:	d0f0      	beq.n	8007946 <USB_CoreReset+0x36>

  return HAL_OK;
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	3714      	adds	r7, #20
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop
 8007974:	00030d40 	.word	0x00030d40

08007978 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	460b      	mov	r3, r1
 8007982:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007984:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007988:	f002 fcc8 	bl	800a31c <USBD_static_malloc>
 800798c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d109      	bne.n	80079a8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	32b0      	adds	r2, #176	; 0xb0
 800799e:	2100      	movs	r1, #0
 80079a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80079a4:	2302      	movs	r3, #2
 80079a6:	e0d4      	b.n	8007b52 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80079a8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80079ac:	2100      	movs	r1, #0
 80079ae:	68f8      	ldr	r0, [r7, #12]
 80079b0:	f002 fd1c 	bl	800a3ec <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	32b0      	adds	r2, #176	; 0xb0
 80079be:	68f9      	ldr	r1, [r7, #12]
 80079c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	32b0      	adds	r2, #176	; 0xb0
 80079ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	7c1b      	ldrb	r3, [r3, #16]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d138      	bne.n	8007a52 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80079e0:	4b5e      	ldr	r3, [pc, #376]	; (8007b5c <USBD_CDC_Init+0x1e4>)
 80079e2:	7819      	ldrb	r1, [r3, #0]
 80079e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079e8:	2202      	movs	r2, #2
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f002 fb25 	bl	800a03a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80079f0:	4b5a      	ldr	r3, [pc, #360]	; (8007b5c <USBD_CDC_Init+0x1e4>)
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	f003 020f 	and.w	r2, r3, #15
 80079f8:	6879      	ldr	r1, [r7, #4]
 80079fa:	4613      	mov	r3, r2
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	4413      	add	r3, r2
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	440b      	add	r3, r1
 8007a04:	3324      	adds	r3, #36	; 0x24
 8007a06:	2201      	movs	r2, #1
 8007a08:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007a0a:	4b55      	ldr	r3, [pc, #340]	; (8007b60 <USBD_CDC_Init+0x1e8>)
 8007a0c:	7819      	ldrb	r1, [r3, #0]
 8007a0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a12:	2202      	movs	r2, #2
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f002 fb10 	bl	800a03a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007a1a:	4b51      	ldr	r3, [pc, #324]	; (8007b60 <USBD_CDC_Init+0x1e8>)
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	f003 020f 	and.w	r2, r3, #15
 8007a22:	6879      	ldr	r1, [r7, #4]
 8007a24:	4613      	mov	r3, r2
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	4413      	add	r3, r2
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	440b      	add	r3, r1
 8007a2e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007a32:	2201      	movs	r2, #1
 8007a34:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007a36:	4b4b      	ldr	r3, [pc, #300]	; (8007b64 <USBD_CDC_Init+0x1ec>)
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	f003 020f 	and.w	r2, r3, #15
 8007a3e:	6879      	ldr	r1, [r7, #4]
 8007a40:	4613      	mov	r3, r2
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	4413      	add	r3, r2
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	440b      	add	r3, r1
 8007a4a:	3326      	adds	r3, #38	; 0x26
 8007a4c:	2210      	movs	r2, #16
 8007a4e:	801a      	strh	r2, [r3, #0]
 8007a50:	e035      	b.n	8007abe <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007a52:	4b42      	ldr	r3, [pc, #264]	; (8007b5c <USBD_CDC_Init+0x1e4>)
 8007a54:	7819      	ldrb	r1, [r3, #0]
 8007a56:	2340      	movs	r3, #64	; 0x40
 8007a58:	2202      	movs	r2, #2
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f002 faed 	bl	800a03a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007a60:	4b3e      	ldr	r3, [pc, #248]	; (8007b5c <USBD_CDC_Init+0x1e4>)
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	f003 020f 	and.w	r2, r3, #15
 8007a68:	6879      	ldr	r1, [r7, #4]
 8007a6a:	4613      	mov	r3, r2
 8007a6c:	009b      	lsls	r3, r3, #2
 8007a6e:	4413      	add	r3, r2
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	440b      	add	r3, r1
 8007a74:	3324      	adds	r3, #36	; 0x24
 8007a76:	2201      	movs	r2, #1
 8007a78:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007a7a:	4b39      	ldr	r3, [pc, #228]	; (8007b60 <USBD_CDC_Init+0x1e8>)
 8007a7c:	7819      	ldrb	r1, [r3, #0]
 8007a7e:	2340      	movs	r3, #64	; 0x40
 8007a80:	2202      	movs	r2, #2
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f002 fad9 	bl	800a03a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007a88:	4b35      	ldr	r3, [pc, #212]	; (8007b60 <USBD_CDC_Init+0x1e8>)
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	f003 020f 	and.w	r2, r3, #15
 8007a90:	6879      	ldr	r1, [r7, #4]
 8007a92:	4613      	mov	r3, r2
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	4413      	add	r3, r2
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	440b      	add	r3, r1
 8007a9c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007aa4:	4b2f      	ldr	r3, [pc, #188]	; (8007b64 <USBD_CDC_Init+0x1ec>)
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	f003 020f 	and.w	r2, r3, #15
 8007aac:	6879      	ldr	r1, [r7, #4]
 8007aae:	4613      	mov	r3, r2
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	4413      	add	r3, r2
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	440b      	add	r3, r1
 8007ab8:	3326      	adds	r3, #38	; 0x26
 8007aba:	2210      	movs	r2, #16
 8007abc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007abe:	4b29      	ldr	r3, [pc, #164]	; (8007b64 <USBD_CDC_Init+0x1ec>)
 8007ac0:	7819      	ldrb	r1, [r3, #0]
 8007ac2:	2308      	movs	r3, #8
 8007ac4:	2203      	movs	r2, #3
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f002 fab7 	bl	800a03a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007acc:	4b25      	ldr	r3, [pc, #148]	; (8007b64 <USBD_CDC_Init+0x1ec>)
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	f003 020f 	and.w	r2, r3, #15
 8007ad4:	6879      	ldr	r1, [r7, #4]
 8007ad6:	4613      	mov	r3, r2
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	4413      	add	r3, r2
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	440b      	add	r3, r1
 8007ae0:	3324      	adds	r3, #36	; 0x24
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	33b0      	adds	r3, #176	; 0xb0
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	4413      	add	r3, r2
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d101      	bne.n	8007b20 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007b1c:	2302      	movs	r3, #2
 8007b1e:	e018      	b.n	8007b52 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	7c1b      	ldrb	r3, [r3, #16]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d10a      	bne.n	8007b3e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007b28:	4b0d      	ldr	r3, [pc, #52]	; (8007b60 <USBD_CDC_Init+0x1e8>)
 8007b2a:	7819      	ldrb	r1, [r3, #0]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f002 fb6e 	bl	800a218 <USBD_LL_PrepareReceive>
 8007b3c:	e008      	b.n	8007b50 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007b3e:	4b08      	ldr	r3, [pc, #32]	; (8007b60 <USBD_CDC_Init+0x1e8>)
 8007b40:	7819      	ldrb	r1, [r3, #0]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b48:	2340      	movs	r3, #64	; 0x40
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f002 fb64 	bl	800a218 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007b50:	2300      	movs	r3, #0
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3710      	adds	r7, #16
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	200000a3 	.word	0x200000a3
 8007b60:	200000a4 	.word	0x200000a4
 8007b64:	200000a5 	.word	0x200000a5

08007b68 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	460b      	mov	r3, r1
 8007b72:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007b74:	4b3a      	ldr	r3, [pc, #232]	; (8007c60 <USBD_CDC_DeInit+0xf8>)
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	4619      	mov	r1, r3
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f002 fa83 	bl	800a086 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007b80:	4b37      	ldr	r3, [pc, #220]	; (8007c60 <USBD_CDC_DeInit+0xf8>)
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	f003 020f 	and.w	r2, r3, #15
 8007b88:	6879      	ldr	r1, [r7, #4]
 8007b8a:	4613      	mov	r3, r2
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	4413      	add	r3, r2
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	440b      	add	r3, r1
 8007b94:	3324      	adds	r3, #36	; 0x24
 8007b96:	2200      	movs	r2, #0
 8007b98:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007b9a:	4b32      	ldr	r3, [pc, #200]	; (8007c64 <USBD_CDC_DeInit+0xfc>)
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f002 fa70 	bl	800a086 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007ba6:	4b2f      	ldr	r3, [pc, #188]	; (8007c64 <USBD_CDC_DeInit+0xfc>)
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	f003 020f 	and.w	r2, r3, #15
 8007bae:	6879      	ldr	r1, [r7, #4]
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	4413      	add	r3, r2
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	440b      	add	r3, r1
 8007bba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007bc2:	4b29      	ldr	r3, [pc, #164]	; (8007c68 <USBD_CDC_DeInit+0x100>)
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f002 fa5c 	bl	800a086 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007bce:	4b26      	ldr	r3, [pc, #152]	; (8007c68 <USBD_CDC_DeInit+0x100>)
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	f003 020f 	and.w	r2, r3, #15
 8007bd6:	6879      	ldr	r1, [r7, #4]
 8007bd8:	4613      	mov	r3, r2
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	4413      	add	r3, r2
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	440b      	add	r3, r1
 8007be2:	3324      	adds	r3, #36	; 0x24
 8007be4:	2200      	movs	r2, #0
 8007be6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007be8:	4b1f      	ldr	r3, [pc, #124]	; (8007c68 <USBD_CDC_DeInit+0x100>)
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	f003 020f 	and.w	r2, r3, #15
 8007bf0:	6879      	ldr	r1, [r7, #4]
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	4413      	add	r3, r2
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	440b      	add	r3, r1
 8007bfc:	3326      	adds	r3, #38	; 0x26
 8007bfe:	2200      	movs	r2, #0
 8007c00:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	32b0      	adds	r2, #176	; 0xb0
 8007c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d01f      	beq.n	8007c54 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	33b0      	adds	r3, #176	; 0xb0
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	4413      	add	r3, r2
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	32b0      	adds	r2, #176	; 0xb0
 8007c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c36:	4618      	mov	r0, r3
 8007c38:	f002 fb7e 	bl	800a338 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	32b0      	adds	r2, #176	; 0xb0
 8007c46:	2100      	movs	r1, #0
 8007c48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3708      	adds	r7, #8
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	200000a3 	.word	0x200000a3
 8007c64:	200000a4 	.word	0x200000a4
 8007c68:	200000a5 	.word	0x200000a5

08007c6c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b086      	sub	sp, #24
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	32b0      	adds	r2, #176	; 0xb0
 8007c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c84:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007c86:	2300      	movs	r3, #0
 8007c88:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d101      	bne.n	8007c9c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007c98:	2303      	movs	r3, #3
 8007c9a:	e0bf      	b.n	8007e1c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d050      	beq.n	8007d4a <USBD_CDC_Setup+0xde>
 8007ca8:	2b20      	cmp	r3, #32
 8007caa:	f040 80af 	bne.w	8007e0c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	88db      	ldrh	r3, [r3, #6]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d03a      	beq.n	8007d2c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	b25b      	sxtb	r3, r3
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	da1b      	bge.n	8007cf8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	33b0      	adds	r3, #176	; 0xb0
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	4413      	add	r3, r2
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	683a      	ldr	r2, [r7, #0]
 8007cd4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007cd6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007cd8:	683a      	ldr	r2, [r7, #0]
 8007cda:	88d2      	ldrh	r2, [r2, #6]
 8007cdc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	88db      	ldrh	r3, [r3, #6]
 8007ce2:	2b07      	cmp	r3, #7
 8007ce4:	bf28      	it	cs
 8007ce6:	2307      	movcs	r3, #7
 8007ce8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	89fa      	ldrh	r2, [r7, #14]
 8007cee:	4619      	mov	r1, r3
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f001 fd6d 	bl	80097d0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007cf6:	e090      	b.n	8007e1a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	785a      	ldrb	r2, [r3, #1]
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	88db      	ldrh	r3, [r3, #6]
 8007d06:	2b3f      	cmp	r3, #63	; 0x3f
 8007d08:	d803      	bhi.n	8007d12 <USBD_CDC_Setup+0xa6>
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	88db      	ldrh	r3, [r3, #6]
 8007d0e:	b2da      	uxtb	r2, r3
 8007d10:	e000      	b.n	8007d14 <USBD_CDC_Setup+0xa8>
 8007d12:	2240      	movs	r2, #64	; 0x40
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007d1a:	6939      	ldr	r1, [r7, #16]
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007d22:	461a      	mov	r2, r3
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f001 fd7f 	bl	8009828 <USBD_CtlPrepareRx>
      break;
 8007d2a:	e076      	b.n	8007e1a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	33b0      	adds	r3, #176	; 0xb0
 8007d36:	009b      	lsls	r3, r3, #2
 8007d38:	4413      	add	r3, r2
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	683a      	ldr	r2, [r7, #0]
 8007d40:	7850      	ldrb	r0, [r2, #1]
 8007d42:	2200      	movs	r2, #0
 8007d44:	6839      	ldr	r1, [r7, #0]
 8007d46:	4798      	blx	r3
      break;
 8007d48:	e067      	b.n	8007e1a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	785b      	ldrb	r3, [r3, #1]
 8007d4e:	2b0b      	cmp	r3, #11
 8007d50:	d851      	bhi.n	8007df6 <USBD_CDC_Setup+0x18a>
 8007d52:	a201      	add	r2, pc, #4	; (adr r2, 8007d58 <USBD_CDC_Setup+0xec>)
 8007d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d58:	08007d89 	.word	0x08007d89
 8007d5c:	08007e05 	.word	0x08007e05
 8007d60:	08007df7 	.word	0x08007df7
 8007d64:	08007df7 	.word	0x08007df7
 8007d68:	08007df7 	.word	0x08007df7
 8007d6c:	08007df7 	.word	0x08007df7
 8007d70:	08007df7 	.word	0x08007df7
 8007d74:	08007df7 	.word	0x08007df7
 8007d78:	08007df7 	.word	0x08007df7
 8007d7c:	08007df7 	.word	0x08007df7
 8007d80:	08007db3 	.word	0x08007db3
 8007d84:	08007ddd 	.word	0x08007ddd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	2b03      	cmp	r3, #3
 8007d92:	d107      	bne.n	8007da4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007d94:	f107 030a 	add.w	r3, r7, #10
 8007d98:	2202      	movs	r2, #2
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f001 fd17 	bl	80097d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007da2:	e032      	b.n	8007e0a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007da4:	6839      	ldr	r1, [r7, #0]
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f001 fca1 	bl	80096ee <USBD_CtlError>
            ret = USBD_FAIL;
 8007dac:	2303      	movs	r3, #3
 8007dae:	75fb      	strb	r3, [r7, #23]
          break;
 8007db0:	e02b      	b.n	8007e0a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	2b03      	cmp	r3, #3
 8007dbc:	d107      	bne.n	8007dce <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007dbe:	f107 030d 	add.w	r3, r7, #13
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f001 fd02 	bl	80097d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007dcc:	e01d      	b.n	8007e0a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007dce:	6839      	ldr	r1, [r7, #0]
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f001 fc8c 	bl	80096ee <USBD_CtlError>
            ret = USBD_FAIL;
 8007dd6:	2303      	movs	r3, #3
 8007dd8:	75fb      	strb	r3, [r7, #23]
          break;
 8007dda:	e016      	b.n	8007e0a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	2b03      	cmp	r3, #3
 8007de6:	d00f      	beq.n	8007e08 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007de8:	6839      	ldr	r1, [r7, #0]
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f001 fc7f 	bl	80096ee <USBD_CtlError>
            ret = USBD_FAIL;
 8007df0:	2303      	movs	r3, #3
 8007df2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007df4:	e008      	b.n	8007e08 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007df6:	6839      	ldr	r1, [r7, #0]
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f001 fc78 	bl	80096ee <USBD_CtlError>
          ret = USBD_FAIL;
 8007dfe:	2303      	movs	r3, #3
 8007e00:	75fb      	strb	r3, [r7, #23]
          break;
 8007e02:	e002      	b.n	8007e0a <USBD_CDC_Setup+0x19e>
          break;
 8007e04:	bf00      	nop
 8007e06:	e008      	b.n	8007e1a <USBD_CDC_Setup+0x1ae>
          break;
 8007e08:	bf00      	nop
      }
      break;
 8007e0a:	e006      	b.n	8007e1a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007e0c:	6839      	ldr	r1, [r7, #0]
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f001 fc6d 	bl	80096ee <USBD_CtlError>
      ret = USBD_FAIL;
 8007e14:	2303      	movs	r3, #3
 8007e16:	75fb      	strb	r3, [r7, #23]
      break;
 8007e18:	bf00      	nop
  }

  return (uint8_t)ret;
 8007e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3718      	adds	r7, #24
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e36:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	32b0      	adds	r2, #176	; 0xb0
 8007e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d101      	bne.n	8007e4e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007e4a:	2303      	movs	r3, #3
 8007e4c:	e065      	b.n	8007f1a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	32b0      	adds	r2, #176	; 0xb0
 8007e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e5c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007e5e:	78fb      	ldrb	r3, [r7, #3]
 8007e60:	f003 020f 	and.w	r2, r3, #15
 8007e64:	6879      	ldr	r1, [r7, #4]
 8007e66:	4613      	mov	r3, r2
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	4413      	add	r3, r2
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	440b      	add	r3, r1
 8007e70:	3318      	adds	r3, #24
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d02f      	beq.n	8007ed8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007e78:	78fb      	ldrb	r3, [r7, #3]
 8007e7a:	f003 020f 	and.w	r2, r3, #15
 8007e7e:	6879      	ldr	r1, [r7, #4]
 8007e80:	4613      	mov	r3, r2
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	4413      	add	r3, r2
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	440b      	add	r3, r1
 8007e8a:	3318      	adds	r3, #24
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	78fb      	ldrb	r3, [r7, #3]
 8007e90:	f003 010f 	and.w	r1, r3, #15
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	460b      	mov	r3, r1
 8007e98:	00db      	lsls	r3, r3, #3
 8007e9a:	440b      	add	r3, r1
 8007e9c:	009b      	lsls	r3, r3, #2
 8007e9e:	4403      	add	r3, r0
 8007ea0:	3348      	adds	r3, #72	; 0x48
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	fbb2 f1f3 	udiv	r1, r2, r3
 8007ea8:	fb01 f303 	mul.w	r3, r1, r3
 8007eac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d112      	bne.n	8007ed8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007eb2:	78fb      	ldrb	r3, [r7, #3]
 8007eb4:	f003 020f 	and.w	r2, r3, #15
 8007eb8:	6879      	ldr	r1, [r7, #4]
 8007eba:	4613      	mov	r3, r2
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	4413      	add	r3, r2
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	440b      	add	r3, r1
 8007ec4:	3318      	adds	r3, #24
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007eca:	78f9      	ldrb	r1, [r7, #3]
 8007ecc:	2300      	movs	r3, #0
 8007ece:	2200      	movs	r2, #0
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f002 f980 	bl	800a1d6 <USBD_LL_Transmit>
 8007ed6:	e01f      	b.n	8007f18 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	33b0      	adds	r3, #176	; 0xb0
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	4413      	add	r3, r2
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	691b      	ldr	r3, [r3, #16]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d010      	beq.n	8007f18 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	33b0      	adds	r3, #176	; 0xb0
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	4413      	add	r3, r2
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	691b      	ldr	r3, [r3, #16]
 8007f08:	68ba      	ldr	r2, [r7, #8]
 8007f0a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007f0e:	68ba      	ldr	r2, [r7, #8]
 8007f10:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007f14:	78fa      	ldrb	r2, [r7, #3]
 8007f16:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007f18:	2300      	movs	r3, #0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3710      	adds	r7, #16
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}

08007f22 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b084      	sub	sp, #16
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	32b0      	adds	r2, #176	; 0xb0
 8007f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f3c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	32b0      	adds	r2, #176	; 0xb0
 8007f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d101      	bne.n	8007f54 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007f50:	2303      	movs	r3, #3
 8007f52:	e01a      	b.n	8007f8a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007f54:	78fb      	ldrb	r3, [r7, #3]
 8007f56:	4619      	mov	r1, r3
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f002 f97e 	bl	800a25a <USBD_LL_GetRxDataSize>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	33b0      	adds	r3, #176	; 0xb0
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	4413      	add	r3, r2
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	68fa      	ldr	r2, [r7, #12]
 8007f7a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007f7e:	68fa      	ldr	r2, [r7, #12]
 8007f80:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007f84:	4611      	mov	r1, r2
 8007f86:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007f88:	2300      	movs	r3, #0
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3710      	adds	r7, #16
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}

08007f92 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007f92:	b580      	push	{r7, lr}
 8007f94:	b084      	sub	sp, #16
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	32b0      	adds	r2, #176	; 0xb0
 8007fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fa8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d101      	bne.n	8007fb4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007fb0:	2303      	movs	r3, #3
 8007fb2:	e025      	b.n	8008000 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007fba:	687a      	ldr	r2, [r7, #4]
 8007fbc:	33b0      	adds	r3, #176	; 0xb0
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	4413      	add	r3, r2
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d01a      	beq.n	8007ffe <USBD_CDC_EP0_RxReady+0x6c>
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007fce:	2bff      	cmp	r3, #255	; 0xff
 8007fd0:	d015      	beq.n	8007ffe <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	33b0      	adds	r3, #176	; 0xb0
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	4413      	add	r3, r2
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	68fa      	ldr	r2, [r7, #12]
 8007fe6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007fea:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007fec:	68fa      	ldr	r2, [r7, #12]
 8007fee:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007ff2:	b292      	uxth	r2, r2
 8007ff4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	22ff      	movs	r2, #255	; 0xff
 8007ffa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007ffe:	2300      	movs	r3, #0
}
 8008000:	4618      	mov	r0, r3
 8008002:	3710      	adds	r7, #16
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b086      	sub	sp, #24
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008010:	2182      	movs	r1, #130	; 0x82
 8008012:	4818      	ldr	r0, [pc, #96]	; (8008074 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008014:	f000 fd09 	bl	8008a2a <USBD_GetEpDesc>
 8008018:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800801a:	2101      	movs	r1, #1
 800801c:	4815      	ldr	r0, [pc, #84]	; (8008074 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800801e:	f000 fd04 	bl	8008a2a <USBD_GetEpDesc>
 8008022:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008024:	2181      	movs	r1, #129	; 0x81
 8008026:	4813      	ldr	r0, [pc, #76]	; (8008074 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008028:	f000 fcff 	bl	8008a2a <USBD_GetEpDesc>
 800802c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d002      	beq.n	800803a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	2210      	movs	r2, #16
 8008038:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d006      	beq.n	800804e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	2200      	movs	r2, #0
 8008044:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008048:	711a      	strb	r2, [r3, #4]
 800804a:	2200      	movs	r2, #0
 800804c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d006      	beq.n	8008062 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2200      	movs	r2, #0
 8008058:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800805c:	711a      	strb	r2, [r3, #4]
 800805e:	2200      	movs	r2, #0
 8008060:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2243      	movs	r2, #67	; 0x43
 8008066:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008068:	4b02      	ldr	r3, [pc, #8]	; (8008074 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800806a:	4618      	mov	r0, r3
 800806c:	3718      	adds	r7, #24
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}
 8008072:	bf00      	nop
 8008074:	20000060 	.word	0x20000060

08008078 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b086      	sub	sp, #24
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008080:	2182      	movs	r1, #130	; 0x82
 8008082:	4818      	ldr	r0, [pc, #96]	; (80080e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008084:	f000 fcd1 	bl	8008a2a <USBD_GetEpDesc>
 8008088:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800808a:	2101      	movs	r1, #1
 800808c:	4815      	ldr	r0, [pc, #84]	; (80080e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800808e:	f000 fccc 	bl	8008a2a <USBD_GetEpDesc>
 8008092:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008094:	2181      	movs	r1, #129	; 0x81
 8008096:	4813      	ldr	r0, [pc, #76]	; (80080e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008098:	f000 fcc7 	bl	8008a2a <USBD_GetEpDesc>
 800809c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d002      	beq.n	80080aa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	2210      	movs	r2, #16
 80080a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d006      	beq.n	80080be <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	2200      	movs	r2, #0
 80080b4:	711a      	strb	r2, [r3, #4]
 80080b6:	2200      	movs	r2, #0
 80080b8:	f042 0202 	orr.w	r2, r2, #2
 80080bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d006      	beq.n	80080d2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2200      	movs	r2, #0
 80080c8:	711a      	strb	r2, [r3, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f042 0202 	orr.w	r2, r2, #2
 80080d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2243      	movs	r2, #67	; 0x43
 80080d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80080d8:	4b02      	ldr	r3, [pc, #8]	; (80080e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3718      	adds	r7, #24
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop
 80080e4:	20000060 	.word	0x20000060

080080e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b086      	sub	sp, #24
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80080f0:	2182      	movs	r1, #130	; 0x82
 80080f2:	4818      	ldr	r0, [pc, #96]	; (8008154 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80080f4:	f000 fc99 	bl	8008a2a <USBD_GetEpDesc>
 80080f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80080fa:	2101      	movs	r1, #1
 80080fc:	4815      	ldr	r0, [pc, #84]	; (8008154 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80080fe:	f000 fc94 	bl	8008a2a <USBD_GetEpDesc>
 8008102:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008104:	2181      	movs	r1, #129	; 0x81
 8008106:	4813      	ldr	r0, [pc, #76]	; (8008154 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008108:	f000 fc8f 	bl	8008a2a <USBD_GetEpDesc>
 800810c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d002      	beq.n	800811a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	2210      	movs	r2, #16
 8008118:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d006      	beq.n	800812e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	2200      	movs	r2, #0
 8008124:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008128:	711a      	strb	r2, [r3, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d006      	beq.n	8008142 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2200      	movs	r2, #0
 8008138:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800813c:	711a      	strb	r2, [r3, #4]
 800813e:	2200      	movs	r2, #0
 8008140:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2243      	movs	r2, #67	; 0x43
 8008146:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008148:	4b02      	ldr	r3, [pc, #8]	; (8008154 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800814a:	4618      	mov	r0, r3
 800814c:	3718      	adds	r7, #24
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	20000060 	.word	0x20000060

08008158 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008158:	b480      	push	{r7}
 800815a:	b083      	sub	sp, #12
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	220a      	movs	r2, #10
 8008164:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008166:	4b03      	ldr	r3, [pc, #12]	; (8008174 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008168:	4618      	mov	r0, r3
 800816a:	370c      	adds	r7, #12
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr
 8008174:	2000001c 	.word	0x2000001c

08008178 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d101      	bne.n	800818c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008188:	2303      	movs	r3, #3
 800818a:	e009      	b.n	80081a0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	33b0      	adds	r3, #176	; 0xb0
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	4413      	add	r3, r2
 800819a:	683a      	ldr	r2, [r7, #0]
 800819c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800819e:	2300      	movs	r3, #0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	370c      	adds	r7, #12
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b087      	sub	sp, #28
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	32b0      	adds	r2, #176	; 0xb0
 80081c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081c6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d101      	bne.n	80081d2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80081ce:	2303      	movs	r3, #3
 80081d0:	e008      	b.n	80081e4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	68ba      	ldr	r2, [r7, #8]
 80081d6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80081e2:	2300      	movs	r3, #0
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	371c      	adds	r7, #28
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b085      	sub	sp, #20
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	32b0      	adds	r2, #176	; 0xb0
 8008204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008208:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d101      	bne.n	8008214 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008210:	2303      	movs	r3, #3
 8008212:	e004      	b.n	800821e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	683a      	ldr	r2, [r7, #0]
 8008218:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800821c:	2300      	movs	r3, #0
}
 800821e:	4618      	mov	r0, r3
 8008220:	3714      	adds	r7, #20
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr
	...

0800822c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b084      	sub	sp, #16
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	32b0      	adds	r2, #176	; 0xb0
 800823e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008242:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	32b0      	adds	r2, #176	; 0xb0
 800824e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d101      	bne.n	800825a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008256:	2303      	movs	r3, #3
 8008258:	e018      	b.n	800828c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	7c1b      	ldrb	r3, [r3, #16]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d10a      	bne.n	8008278 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008262:	4b0c      	ldr	r3, [pc, #48]	; (8008294 <USBD_CDC_ReceivePacket+0x68>)
 8008264:	7819      	ldrb	r1, [r3, #0]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800826c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f001 ffd1 	bl	800a218 <USBD_LL_PrepareReceive>
 8008276:	e008      	b.n	800828a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008278:	4b06      	ldr	r3, [pc, #24]	; (8008294 <USBD_CDC_ReceivePacket+0x68>)
 800827a:	7819      	ldrb	r1, [r3, #0]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008282:	2340      	movs	r3, #64	; 0x40
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f001 ffc7 	bl	800a218 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800828a:	2300      	movs	r3, #0
}
 800828c:	4618      	mov	r0, r3
 800828e:	3710      	adds	r7, #16
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	200000a4 	.word	0x200000a4

08008298 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b086      	sub	sp, #24
 800829c:	af00      	add	r7, sp, #0
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	4613      	mov	r3, r2
 80082a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d101      	bne.n	80082b0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80082ac:	2303      	movs	r3, #3
 80082ae:	e01f      	b.n	80082f0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2200      	movs	r2, #0
 80082b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2200      	movs	r2, #0
 80082bc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d003      	beq.n	80082d6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	68ba      	ldr	r2, [r7, #8]
 80082d2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2201      	movs	r2, #1
 80082da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	79fa      	ldrb	r2, [r7, #7]
 80082e2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80082e4:	68f8      	ldr	r0, [r7, #12]
 80082e6:	f001 fe41 	bl	8009f6c <USBD_LL_Init>
 80082ea:	4603      	mov	r3, r0
 80082ec:	75fb      	strb	r3, [r7, #23]

  return ret;
 80082ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3718      	adds	r7, #24
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008302:	2300      	movs	r3, #0
 8008304:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d101      	bne.n	8008310 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800830c:	2303      	movs	r3, #3
 800830e:	e025      	b.n	800835c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	683a      	ldr	r2, [r7, #0]
 8008314:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	32ae      	adds	r2, #174	; 0xae
 8008322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008328:	2b00      	cmp	r3, #0
 800832a:	d00f      	beq.n	800834c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	32ae      	adds	r2, #174	; 0xae
 8008336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800833a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800833c:	f107 020e 	add.w	r2, r7, #14
 8008340:	4610      	mov	r0, r2
 8008342:	4798      	blx	r3
 8008344:	4602      	mov	r2, r0
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008352:	1c5a      	adds	r2, r3, #1
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800835a:	2300      	movs	r3, #0
}
 800835c:	4618      	mov	r0, r3
 800835e:	3710      	adds	r7, #16
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b082      	sub	sp, #8
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f001 fe49 	bl	800a004 <USBD_LL_Start>
 8008372:	4603      	mov	r3, r0
}
 8008374:	4618      	mov	r0, r3
 8008376:	3708      	adds	r7, #8
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008384:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008386:	4618      	mov	r0, r3
 8008388:	370c      	adds	r7, #12
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr

08008392 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008392:	b580      	push	{r7, lr}
 8008394:	b084      	sub	sp, #16
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
 800839a:	460b      	mov	r3, r1
 800839c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800839e:	2300      	movs	r3, #0
 80083a0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d009      	beq.n	80083c0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	78fa      	ldrb	r2, [r7, #3]
 80083b6:	4611      	mov	r1, r2
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	4798      	blx	r3
 80083bc:	4603      	mov	r3, r0
 80083be:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80083c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3710      	adds	r7, #16
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}

080083ca <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80083ca:	b580      	push	{r7, lr}
 80083cc:	b084      	sub	sp, #16
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
 80083d2:	460b      	mov	r3, r1
 80083d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80083d6:	2300      	movs	r3, #0
 80083d8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	78fa      	ldrb	r2, [r7, #3]
 80083e4:	4611      	mov	r1, r2
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	4798      	blx	r3
 80083ea:	4603      	mov	r3, r0
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d001      	beq.n	80083f4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80083f0:	2303      	movs	r3, #3
 80083f2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80083f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3710      	adds	r7, #16
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}

080083fe <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80083fe:	b580      	push	{r7, lr}
 8008400:	b084      	sub	sp, #16
 8008402:	af00      	add	r7, sp, #0
 8008404:	6078      	str	r0, [r7, #4]
 8008406:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800840e:	6839      	ldr	r1, [r7, #0]
 8008410:	4618      	mov	r0, r3
 8008412:	f001 f932 	bl	800967a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2201      	movs	r2, #1
 800841a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008424:	461a      	mov	r2, r3
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008432:	f003 031f 	and.w	r3, r3, #31
 8008436:	2b02      	cmp	r3, #2
 8008438:	d01a      	beq.n	8008470 <USBD_LL_SetupStage+0x72>
 800843a:	2b02      	cmp	r3, #2
 800843c:	d822      	bhi.n	8008484 <USBD_LL_SetupStage+0x86>
 800843e:	2b00      	cmp	r3, #0
 8008440:	d002      	beq.n	8008448 <USBD_LL_SetupStage+0x4a>
 8008442:	2b01      	cmp	r3, #1
 8008444:	d00a      	beq.n	800845c <USBD_LL_SetupStage+0x5e>
 8008446:	e01d      	b.n	8008484 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800844e:	4619      	mov	r1, r3
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 fb5f 	bl	8008b14 <USBD_StdDevReq>
 8008456:	4603      	mov	r3, r0
 8008458:	73fb      	strb	r3, [r7, #15]
      break;
 800845a:	e020      	b.n	800849e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008462:	4619      	mov	r1, r3
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 fbc7 	bl	8008bf8 <USBD_StdItfReq>
 800846a:	4603      	mov	r3, r0
 800846c:	73fb      	strb	r3, [r7, #15]
      break;
 800846e:	e016      	b.n	800849e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008476:	4619      	mov	r1, r3
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 fc29 	bl	8008cd0 <USBD_StdEPReq>
 800847e:	4603      	mov	r3, r0
 8008480:	73fb      	strb	r3, [r7, #15]
      break;
 8008482:	e00c      	b.n	800849e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800848a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800848e:	b2db      	uxtb	r3, r3
 8008490:	4619      	mov	r1, r3
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f001 fe16 	bl	800a0c4 <USBD_LL_StallEP>
 8008498:	4603      	mov	r3, r0
 800849a:	73fb      	strb	r3, [r7, #15]
      break;
 800849c:	bf00      	nop
  }

  return ret;
 800849e:	7bfb      	ldrb	r3, [r7, #15]
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3710      	adds	r7, #16
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b086      	sub	sp, #24
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	460b      	mov	r3, r1
 80084b2:	607a      	str	r2, [r7, #4]
 80084b4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80084b6:	2300      	movs	r3, #0
 80084b8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80084ba:	7afb      	ldrb	r3, [r7, #11]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d16e      	bne.n	800859e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80084c6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80084ce:	2b03      	cmp	r3, #3
 80084d0:	f040 8098 	bne.w	8008604 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	689a      	ldr	r2, [r3, #8]
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	68db      	ldr	r3, [r3, #12]
 80084dc:	429a      	cmp	r2, r3
 80084de:	d913      	bls.n	8008508 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	689a      	ldr	r2, [r3, #8]
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	68db      	ldr	r3, [r3, #12]
 80084e8:	1ad2      	subs	r2, r2, r3
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	68da      	ldr	r2, [r3, #12]
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	4293      	cmp	r3, r2
 80084f8:	bf28      	it	cs
 80084fa:	4613      	movcs	r3, r2
 80084fc:	461a      	mov	r2, r3
 80084fe:	6879      	ldr	r1, [r7, #4]
 8008500:	68f8      	ldr	r0, [r7, #12]
 8008502:	f001 f9ae 	bl	8009862 <USBD_CtlContinueRx>
 8008506:	e07d      	b.n	8008604 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800850e:	f003 031f 	and.w	r3, r3, #31
 8008512:	2b02      	cmp	r3, #2
 8008514:	d014      	beq.n	8008540 <USBD_LL_DataOutStage+0x98>
 8008516:	2b02      	cmp	r3, #2
 8008518:	d81d      	bhi.n	8008556 <USBD_LL_DataOutStage+0xae>
 800851a:	2b00      	cmp	r3, #0
 800851c:	d002      	beq.n	8008524 <USBD_LL_DataOutStage+0x7c>
 800851e:	2b01      	cmp	r3, #1
 8008520:	d003      	beq.n	800852a <USBD_LL_DataOutStage+0x82>
 8008522:	e018      	b.n	8008556 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008524:	2300      	movs	r3, #0
 8008526:	75bb      	strb	r3, [r7, #22]
            break;
 8008528:	e018      	b.n	800855c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008530:	b2db      	uxtb	r3, r3
 8008532:	4619      	mov	r1, r3
 8008534:	68f8      	ldr	r0, [r7, #12]
 8008536:	f000 fa5e 	bl	80089f6 <USBD_CoreFindIF>
 800853a:	4603      	mov	r3, r0
 800853c:	75bb      	strb	r3, [r7, #22]
            break;
 800853e:	e00d      	b.n	800855c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008546:	b2db      	uxtb	r3, r3
 8008548:	4619      	mov	r1, r3
 800854a:	68f8      	ldr	r0, [r7, #12]
 800854c:	f000 fa60 	bl	8008a10 <USBD_CoreFindEP>
 8008550:	4603      	mov	r3, r0
 8008552:	75bb      	strb	r3, [r7, #22]
            break;
 8008554:	e002      	b.n	800855c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008556:	2300      	movs	r3, #0
 8008558:	75bb      	strb	r3, [r7, #22]
            break;
 800855a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800855c:	7dbb      	ldrb	r3, [r7, #22]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d119      	bne.n	8008596 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008568:	b2db      	uxtb	r3, r3
 800856a:	2b03      	cmp	r3, #3
 800856c:	d113      	bne.n	8008596 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800856e:	7dba      	ldrb	r2, [r7, #22]
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	32ae      	adds	r2, #174	; 0xae
 8008574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008578:	691b      	ldr	r3, [r3, #16]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d00b      	beq.n	8008596 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800857e:	7dba      	ldrb	r2, [r7, #22]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008586:	7dba      	ldrb	r2, [r7, #22]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	32ae      	adds	r2, #174	; 0xae
 800858c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008590:	691b      	ldr	r3, [r3, #16]
 8008592:	68f8      	ldr	r0, [r7, #12]
 8008594:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008596:	68f8      	ldr	r0, [r7, #12]
 8008598:	f001 f974 	bl	8009884 <USBD_CtlSendStatus>
 800859c:	e032      	b.n	8008604 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800859e:	7afb      	ldrb	r3, [r7, #11]
 80085a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	4619      	mov	r1, r3
 80085a8:	68f8      	ldr	r0, [r7, #12]
 80085aa:	f000 fa31 	bl	8008a10 <USBD_CoreFindEP>
 80085ae:	4603      	mov	r3, r0
 80085b0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80085b2:	7dbb      	ldrb	r3, [r7, #22]
 80085b4:	2bff      	cmp	r3, #255	; 0xff
 80085b6:	d025      	beq.n	8008604 <USBD_LL_DataOutStage+0x15c>
 80085b8:	7dbb      	ldrb	r3, [r7, #22]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d122      	bne.n	8008604 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	2b03      	cmp	r3, #3
 80085c8:	d117      	bne.n	80085fa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80085ca:	7dba      	ldrb	r2, [r7, #22]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	32ae      	adds	r2, #174	; 0xae
 80085d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085d4:	699b      	ldr	r3, [r3, #24]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d00f      	beq.n	80085fa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80085da:	7dba      	ldrb	r2, [r7, #22]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80085e2:	7dba      	ldrb	r2, [r7, #22]
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	32ae      	adds	r2, #174	; 0xae
 80085e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085ec:	699b      	ldr	r3, [r3, #24]
 80085ee:	7afa      	ldrb	r2, [r7, #11]
 80085f0:	4611      	mov	r1, r2
 80085f2:	68f8      	ldr	r0, [r7, #12]
 80085f4:	4798      	blx	r3
 80085f6:	4603      	mov	r3, r0
 80085f8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80085fa:	7dfb      	ldrb	r3, [r7, #23]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d001      	beq.n	8008604 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008600:	7dfb      	ldrb	r3, [r7, #23]
 8008602:	e000      	b.n	8008606 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008604:	2300      	movs	r3, #0
}
 8008606:	4618      	mov	r0, r3
 8008608:	3718      	adds	r7, #24
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}

0800860e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800860e:	b580      	push	{r7, lr}
 8008610:	b086      	sub	sp, #24
 8008612:	af00      	add	r7, sp, #0
 8008614:	60f8      	str	r0, [r7, #12]
 8008616:	460b      	mov	r3, r1
 8008618:	607a      	str	r2, [r7, #4]
 800861a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800861c:	7afb      	ldrb	r3, [r7, #11]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d16f      	bne.n	8008702 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	3314      	adds	r3, #20
 8008626:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800862e:	2b02      	cmp	r3, #2
 8008630:	d15a      	bne.n	80086e8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	689a      	ldr	r2, [r3, #8]
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	68db      	ldr	r3, [r3, #12]
 800863a:	429a      	cmp	r2, r3
 800863c:	d914      	bls.n	8008668 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	689a      	ldr	r2, [r3, #8]
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	68db      	ldr	r3, [r3, #12]
 8008646:	1ad2      	subs	r2, r2, r3
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	461a      	mov	r2, r3
 8008652:	6879      	ldr	r1, [r7, #4]
 8008654:	68f8      	ldr	r0, [r7, #12]
 8008656:	f001 f8d6 	bl	8009806 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800865a:	2300      	movs	r3, #0
 800865c:	2200      	movs	r2, #0
 800865e:	2100      	movs	r1, #0
 8008660:	68f8      	ldr	r0, [r7, #12]
 8008662:	f001 fdd9 	bl	800a218 <USBD_LL_PrepareReceive>
 8008666:	e03f      	b.n	80086e8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	68da      	ldr	r2, [r3, #12]
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	429a      	cmp	r2, r3
 8008672:	d11c      	bne.n	80086ae <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	685a      	ldr	r2, [r3, #4]
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800867c:	429a      	cmp	r2, r3
 800867e:	d316      	bcc.n	80086ae <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	685a      	ldr	r2, [r3, #4]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800868a:	429a      	cmp	r2, r3
 800868c:	d20f      	bcs.n	80086ae <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800868e:	2200      	movs	r2, #0
 8008690:	2100      	movs	r1, #0
 8008692:	68f8      	ldr	r0, [r7, #12]
 8008694:	f001 f8b7 	bl	8009806 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2200      	movs	r2, #0
 800869c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80086a0:	2300      	movs	r3, #0
 80086a2:	2200      	movs	r2, #0
 80086a4:	2100      	movs	r1, #0
 80086a6:	68f8      	ldr	r0, [r7, #12]
 80086a8:	f001 fdb6 	bl	800a218 <USBD_LL_PrepareReceive>
 80086ac:	e01c      	b.n	80086e8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	2b03      	cmp	r3, #3
 80086b8:	d10f      	bne.n	80086da <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086c0:	68db      	ldr	r3, [r3, #12]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d009      	beq.n	80086da <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2200      	movs	r2, #0
 80086ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086d4:	68db      	ldr	r3, [r3, #12]
 80086d6:	68f8      	ldr	r0, [r7, #12]
 80086d8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80086da:	2180      	movs	r1, #128	; 0x80
 80086dc:	68f8      	ldr	r0, [r7, #12]
 80086de:	f001 fcf1 	bl	800a0c4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80086e2:	68f8      	ldr	r0, [r7, #12]
 80086e4:	f001 f8e1 	bl	80098aa <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d03a      	beq.n	8008768 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	f7ff fe42 	bl	800837c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008700:	e032      	b.n	8008768 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008702:	7afb      	ldrb	r3, [r7, #11]
 8008704:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008708:	b2db      	uxtb	r3, r3
 800870a:	4619      	mov	r1, r3
 800870c:	68f8      	ldr	r0, [r7, #12]
 800870e:	f000 f97f 	bl	8008a10 <USBD_CoreFindEP>
 8008712:	4603      	mov	r3, r0
 8008714:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008716:	7dfb      	ldrb	r3, [r7, #23]
 8008718:	2bff      	cmp	r3, #255	; 0xff
 800871a:	d025      	beq.n	8008768 <USBD_LL_DataInStage+0x15a>
 800871c:	7dfb      	ldrb	r3, [r7, #23]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d122      	bne.n	8008768 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008728:	b2db      	uxtb	r3, r3
 800872a:	2b03      	cmp	r3, #3
 800872c:	d11c      	bne.n	8008768 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800872e:	7dfa      	ldrb	r2, [r7, #23]
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	32ae      	adds	r2, #174	; 0xae
 8008734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008738:	695b      	ldr	r3, [r3, #20]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d014      	beq.n	8008768 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800873e:	7dfa      	ldrb	r2, [r7, #23]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008746:	7dfa      	ldrb	r2, [r7, #23]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	32ae      	adds	r2, #174	; 0xae
 800874c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008750:	695b      	ldr	r3, [r3, #20]
 8008752:	7afa      	ldrb	r2, [r7, #11]
 8008754:	4611      	mov	r1, r2
 8008756:	68f8      	ldr	r0, [r7, #12]
 8008758:	4798      	blx	r3
 800875a:	4603      	mov	r3, r0
 800875c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800875e:	7dbb      	ldrb	r3, [r7, #22]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d001      	beq.n	8008768 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008764:	7dbb      	ldrb	r3, [r7, #22]
 8008766:	e000      	b.n	800876a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008768:	2300      	movs	r3, #0
}
 800876a:	4618      	mov	r0, r3
 800876c:	3718      	adds	r7, #24
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}

08008772 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008772:	b580      	push	{r7, lr}
 8008774:	b084      	sub	sp, #16
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800877a:	2300      	movs	r3, #0
 800877c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2201      	movs	r2, #1
 8008782:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2200      	movs	r2, #0
 800878a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2200      	movs	r2, #0
 8008792:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2200      	movs	r2, #0
 80087a0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d014      	beq.n	80087d8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d00e      	beq.n	80087d8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	687a      	ldr	r2, [r7, #4]
 80087c4:	6852      	ldr	r2, [r2, #4]
 80087c6:	b2d2      	uxtb	r2, r2
 80087c8:	4611      	mov	r1, r2
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	4798      	blx	r3
 80087ce:	4603      	mov	r3, r0
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d001      	beq.n	80087d8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80087d4:	2303      	movs	r3, #3
 80087d6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80087d8:	2340      	movs	r3, #64	; 0x40
 80087da:	2200      	movs	r2, #0
 80087dc:	2100      	movs	r1, #0
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f001 fc2b 	bl	800a03a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2201      	movs	r2, #1
 80087e8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2240      	movs	r2, #64	; 0x40
 80087f0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80087f4:	2340      	movs	r3, #64	; 0x40
 80087f6:	2200      	movs	r2, #0
 80087f8:	2180      	movs	r1, #128	; 0x80
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f001 fc1d 	bl	800a03a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2201      	movs	r2, #1
 8008804:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2240      	movs	r2, #64	; 0x40
 800880a:	621a      	str	r2, [r3, #32]

  return ret;
 800880c:	7bfb      	ldrb	r3, [r7, #15]
}
 800880e:	4618      	mov	r0, r3
 8008810:	3710      	adds	r7, #16
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}

08008816 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008816:	b480      	push	{r7}
 8008818:	b083      	sub	sp, #12
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
 800881e:	460b      	mov	r3, r1
 8008820:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	78fa      	ldrb	r2, [r7, #3]
 8008826:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	370c      	adds	r7, #12
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr

08008836 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008836:	b480      	push	{r7}
 8008838:	b083      	sub	sp, #12
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008844:	b2da      	uxtb	r2, r3
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2204      	movs	r2, #4
 8008850:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008854:	2300      	movs	r3, #0
}
 8008856:	4618      	mov	r0, r3
 8008858:	370c      	adds	r7, #12
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr

08008862 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008862:	b480      	push	{r7}
 8008864:	b083      	sub	sp, #12
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008870:	b2db      	uxtb	r3, r3
 8008872:	2b04      	cmp	r3, #4
 8008874:	d106      	bne.n	8008884 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800887c:	b2da      	uxtb	r2, r3
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008884:	2300      	movs	r3, #0
}
 8008886:	4618      	mov	r0, r3
 8008888:	370c      	adds	r7, #12
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr

08008892 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008892:	b580      	push	{r7, lr}
 8008894:	b082      	sub	sp, #8
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	2b03      	cmp	r3, #3
 80088a4:	d110      	bne.n	80088c8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d00b      	beq.n	80088c8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088b6:	69db      	ldr	r3, [r3, #28]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d005      	beq.n	80088c8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088c2:	69db      	ldr	r3, [r3, #28]
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80088c8:	2300      	movs	r3, #0
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3708      	adds	r7, #8
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b082      	sub	sp, #8
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
 80088da:	460b      	mov	r3, r1
 80088dc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	32ae      	adds	r2, #174	; 0xae
 80088e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d101      	bne.n	80088f4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80088f0:	2303      	movs	r3, #3
 80088f2:	e01c      	b.n	800892e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	2b03      	cmp	r3, #3
 80088fe:	d115      	bne.n	800892c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	32ae      	adds	r2, #174	; 0xae
 800890a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800890e:	6a1b      	ldr	r3, [r3, #32]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d00b      	beq.n	800892c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	32ae      	adds	r2, #174	; 0xae
 800891e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008922:	6a1b      	ldr	r3, [r3, #32]
 8008924:	78fa      	ldrb	r2, [r7, #3]
 8008926:	4611      	mov	r1, r2
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800892c:	2300      	movs	r3, #0
}
 800892e:	4618      	mov	r0, r3
 8008930:	3708      	adds	r7, #8
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}

08008936 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008936:	b580      	push	{r7, lr}
 8008938:	b082      	sub	sp, #8
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
 800893e:	460b      	mov	r3, r1
 8008940:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	32ae      	adds	r2, #174	; 0xae
 800894c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d101      	bne.n	8008958 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008954:	2303      	movs	r3, #3
 8008956:	e01c      	b.n	8008992 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800895e:	b2db      	uxtb	r3, r3
 8008960:	2b03      	cmp	r3, #3
 8008962:	d115      	bne.n	8008990 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	32ae      	adds	r2, #174	; 0xae
 800896e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008974:	2b00      	cmp	r3, #0
 8008976:	d00b      	beq.n	8008990 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	32ae      	adds	r2, #174	; 0xae
 8008982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008988:	78fa      	ldrb	r2, [r7, #3]
 800898a:	4611      	mov	r1, r2
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008990:	2300      	movs	r3, #0
}
 8008992:	4618      	mov	r0, r3
 8008994:	3708      	adds	r7, #8
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}

0800899a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800899a:	b480      	push	{r7}
 800899c:	b083      	sub	sp, #12
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80089a2:	2300      	movs	r3, #0
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	370c      	adds	r7, #12
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr

080089b0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80089b8:	2300      	movs	r3, #0
 80089ba:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2201      	movs	r2, #1
 80089c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d00e      	beq.n	80089ec <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	6852      	ldr	r2, [r2, #4]
 80089da:	b2d2      	uxtb	r2, r2
 80089dc:	4611      	mov	r1, r2
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	4798      	blx	r3
 80089e2:	4603      	mov	r3, r0
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d001      	beq.n	80089ec <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80089e8:	2303      	movs	r3, #3
 80089ea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80089ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3710      	adds	r7, #16
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}

080089f6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80089f6:	b480      	push	{r7}
 80089f8:	b083      	sub	sp, #12
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
 80089fe:	460b      	mov	r3, r1
 8008a00:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008a02:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	370c      	adds	r7, #12
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b083      	sub	sp, #12
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	460b      	mov	r3, r1
 8008a1a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008a1c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	370c      	adds	r7, #12
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr

08008a2a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008a2a:	b580      	push	{r7, lr}
 8008a2c:	b086      	sub	sp, #24
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
 8008a32:	460b      	mov	r3, r1
 8008a34:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	885b      	ldrh	r3, [r3, #2]
 8008a46:	b29a      	uxth	r2, r3
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d920      	bls.n	8008a94 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008a5a:	e013      	b.n	8008a84 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008a5c:	f107 030a 	add.w	r3, r7, #10
 8008a60:	4619      	mov	r1, r3
 8008a62:	6978      	ldr	r0, [r7, #20]
 8008a64:	f000 f81b 	bl	8008a9e <USBD_GetNextDesc>
 8008a68:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	785b      	ldrb	r3, [r3, #1]
 8008a6e:	2b05      	cmp	r3, #5
 8008a70:	d108      	bne.n	8008a84 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	789b      	ldrb	r3, [r3, #2]
 8008a7a:	78fa      	ldrb	r2, [r7, #3]
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d008      	beq.n	8008a92 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008a80:	2300      	movs	r3, #0
 8008a82:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	885b      	ldrh	r3, [r3, #2]
 8008a88:	b29a      	uxth	r2, r3
 8008a8a:	897b      	ldrh	r3, [r7, #10]
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d8e5      	bhi.n	8008a5c <USBD_GetEpDesc+0x32>
 8008a90:	e000      	b.n	8008a94 <USBD_GetEpDesc+0x6a>
          break;
 8008a92:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008a94:	693b      	ldr	r3, [r7, #16]
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3718      	adds	r7, #24
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}

08008a9e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008a9e:	b480      	push	{r7}
 8008aa0:	b085      	sub	sp, #20
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
 8008aa6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	881a      	ldrh	r2, [r3, #0]
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	4413      	add	r3, r2
 8008ab8:	b29a      	uxth	r2, r3
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	4413      	add	r3, r2
 8008ac8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008aca:	68fb      	ldr	r3, [r7, #12]
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3714      	adds	r7, #20
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b087      	sub	sp, #28
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	3301      	adds	r3, #1
 8008aee:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008af6:	8a3b      	ldrh	r3, [r7, #16]
 8008af8:	021b      	lsls	r3, r3, #8
 8008afa:	b21a      	sxth	r2, r3
 8008afc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008b00:	4313      	orrs	r3, r2
 8008b02:	b21b      	sxth	r3, r3
 8008b04:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008b06:	89fb      	ldrh	r3, [r7, #14]
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	371c      	adds	r7, #28
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr

08008b14 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b2a:	2b40      	cmp	r3, #64	; 0x40
 8008b2c:	d005      	beq.n	8008b3a <USBD_StdDevReq+0x26>
 8008b2e:	2b40      	cmp	r3, #64	; 0x40
 8008b30:	d857      	bhi.n	8008be2 <USBD_StdDevReq+0xce>
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d00f      	beq.n	8008b56 <USBD_StdDevReq+0x42>
 8008b36:	2b20      	cmp	r3, #32
 8008b38:	d153      	bne.n	8008be2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	32ae      	adds	r2, #174	; 0xae
 8008b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	6839      	ldr	r1, [r7, #0]
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	4798      	blx	r3
 8008b50:	4603      	mov	r3, r0
 8008b52:	73fb      	strb	r3, [r7, #15]
      break;
 8008b54:	e04a      	b.n	8008bec <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	785b      	ldrb	r3, [r3, #1]
 8008b5a:	2b09      	cmp	r3, #9
 8008b5c:	d83b      	bhi.n	8008bd6 <USBD_StdDevReq+0xc2>
 8008b5e:	a201      	add	r2, pc, #4	; (adr r2, 8008b64 <USBD_StdDevReq+0x50>)
 8008b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b64:	08008bb9 	.word	0x08008bb9
 8008b68:	08008bcd 	.word	0x08008bcd
 8008b6c:	08008bd7 	.word	0x08008bd7
 8008b70:	08008bc3 	.word	0x08008bc3
 8008b74:	08008bd7 	.word	0x08008bd7
 8008b78:	08008b97 	.word	0x08008b97
 8008b7c:	08008b8d 	.word	0x08008b8d
 8008b80:	08008bd7 	.word	0x08008bd7
 8008b84:	08008baf 	.word	0x08008baf
 8008b88:	08008ba1 	.word	0x08008ba1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008b8c:	6839      	ldr	r1, [r7, #0]
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 fa3c 	bl	800900c <USBD_GetDescriptor>
          break;
 8008b94:	e024      	b.n	8008be0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008b96:	6839      	ldr	r1, [r7, #0]
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 fbcb 	bl	8009334 <USBD_SetAddress>
          break;
 8008b9e:	e01f      	b.n	8008be0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008ba0:	6839      	ldr	r1, [r7, #0]
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 fc0a 	bl	80093bc <USBD_SetConfig>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	73fb      	strb	r3, [r7, #15]
          break;
 8008bac:	e018      	b.n	8008be0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008bae:	6839      	ldr	r1, [r7, #0]
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 fcad 	bl	8009510 <USBD_GetConfig>
          break;
 8008bb6:	e013      	b.n	8008be0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008bb8:	6839      	ldr	r1, [r7, #0]
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 fcde 	bl	800957c <USBD_GetStatus>
          break;
 8008bc0:	e00e      	b.n	8008be0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008bc2:	6839      	ldr	r1, [r7, #0]
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f000 fd0d 	bl	80095e4 <USBD_SetFeature>
          break;
 8008bca:	e009      	b.n	8008be0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008bcc:	6839      	ldr	r1, [r7, #0]
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f000 fd31 	bl	8009636 <USBD_ClrFeature>
          break;
 8008bd4:	e004      	b.n	8008be0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008bd6:	6839      	ldr	r1, [r7, #0]
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f000 fd88 	bl	80096ee <USBD_CtlError>
          break;
 8008bde:	bf00      	nop
      }
      break;
 8008be0:	e004      	b.n	8008bec <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008be2:	6839      	ldr	r1, [r7, #0]
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f000 fd82 	bl	80096ee <USBD_CtlError>
      break;
 8008bea:	bf00      	nop
  }

  return ret;
 8008bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3710      	adds	r7, #16
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	bf00      	nop

08008bf8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c02:	2300      	movs	r3, #0
 8008c04:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c0e:	2b40      	cmp	r3, #64	; 0x40
 8008c10:	d005      	beq.n	8008c1e <USBD_StdItfReq+0x26>
 8008c12:	2b40      	cmp	r3, #64	; 0x40
 8008c14:	d852      	bhi.n	8008cbc <USBD_StdItfReq+0xc4>
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d001      	beq.n	8008c1e <USBD_StdItfReq+0x26>
 8008c1a:	2b20      	cmp	r3, #32
 8008c1c:	d14e      	bne.n	8008cbc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	3b01      	subs	r3, #1
 8008c28:	2b02      	cmp	r3, #2
 8008c2a:	d840      	bhi.n	8008cae <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	889b      	ldrh	r3, [r3, #4]
 8008c30:	b2db      	uxtb	r3, r3
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d836      	bhi.n	8008ca4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	889b      	ldrh	r3, [r3, #4]
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f7ff fed9 	bl	80089f6 <USBD_CoreFindIF>
 8008c44:	4603      	mov	r3, r0
 8008c46:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c48:	7bbb      	ldrb	r3, [r7, #14]
 8008c4a:	2bff      	cmp	r3, #255	; 0xff
 8008c4c:	d01d      	beq.n	8008c8a <USBD_StdItfReq+0x92>
 8008c4e:	7bbb      	ldrb	r3, [r7, #14]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d11a      	bne.n	8008c8a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008c54:	7bba      	ldrb	r2, [r7, #14]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	32ae      	adds	r2, #174	; 0xae
 8008c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c5e:	689b      	ldr	r3, [r3, #8]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d00f      	beq.n	8008c84 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008c64:	7bba      	ldrb	r2, [r7, #14]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008c6c:	7bba      	ldrb	r2, [r7, #14]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	32ae      	adds	r2, #174	; 0xae
 8008c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c76:	689b      	ldr	r3, [r3, #8]
 8008c78:	6839      	ldr	r1, [r7, #0]
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	4798      	blx	r3
 8008c7e:	4603      	mov	r3, r0
 8008c80:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008c82:	e004      	b.n	8008c8e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008c84:	2303      	movs	r3, #3
 8008c86:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008c88:	e001      	b.n	8008c8e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008c8a:	2303      	movs	r3, #3
 8008c8c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	88db      	ldrh	r3, [r3, #6]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d110      	bne.n	8008cb8 <USBD_StdItfReq+0xc0>
 8008c96:	7bfb      	ldrb	r3, [r7, #15]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d10d      	bne.n	8008cb8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 fdf1 	bl	8009884 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008ca2:	e009      	b.n	8008cb8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008ca4:	6839      	ldr	r1, [r7, #0]
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 fd21 	bl	80096ee <USBD_CtlError>
          break;
 8008cac:	e004      	b.n	8008cb8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008cae:	6839      	ldr	r1, [r7, #0]
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f000 fd1c 	bl	80096ee <USBD_CtlError>
          break;
 8008cb6:	e000      	b.n	8008cba <USBD_StdItfReq+0xc2>
          break;
 8008cb8:	bf00      	nop
      }
      break;
 8008cba:	e004      	b.n	8008cc6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008cbc:	6839      	ldr	r1, [r7, #0]
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f000 fd15 	bl	80096ee <USBD_CtlError>
      break;
 8008cc4:	bf00      	nop
  }

  return ret;
 8008cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3710      	adds	r7, #16
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b084      	sub	sp, #16
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	889b      	ldrh	r3, [r3, #4]
 8008ce2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	781b      	ldrb	r3, [r3, #0]
 8008ce8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008cec:	2b40      	cmp	r3, #64	; 0x40
 8008cee:	d007      	beq.n	8008d00 <USBD_StdEPReq+0x30>
 8008cf0:	2b40      	cmp	r3, #64	; 0x40
 8008cf2:	f200 817f 	bhi.w	8008ff4 <USBD_StdEPReq+0x324>
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d02a      	beq.n	8008d50 <USBD_StdEPReq+0x80>
 8008cfa:	2b20      	cmp	r3, #32
 8008cfc:	f040 817a 	bne.w	8008ff4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008d00:	7bbb      	ldrb	r3, [r7, #14]
 8008d02:	4619      	mov	r1, r3
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f7ff fe83 	bl	8008a10 <USBD_CoreFindEP>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d0e:	7b7b      	ldrb	r3, [r7, #13]
 8008d10:	2bff      	cmp	r3, #255	; 0xff
 8008d12:	f000 8174 	beq.w	8008ffe <USBD_StdEPReq+0x32e>
 8008d16:	7b7b      	ldrb	r3, [r7, #13]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	f040 8170 	bne.w	8008ffe <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008d1e:	7b7a      	ldrb	r2, [r7, #13]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008d26:	7b7a      	ldrb	r2, [r7, #13]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	32ae      	adds	r2, #174	; 0xae
 8008d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d30:	689b      	ldr	r3, [r3, #8]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	f000 8163 	beq.w	8008ffe <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008d38:	7b7a      	ldrb	r2, [r7, #13]
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	32ae      	adds	r2, #174	; 0xae
 8008d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d42:	689b      	ldr	r3, [r3, #8]
 8008d44:	6839      	ldr	r1, [r7, #0]
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	4798      	blx	r3
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008d4e:	e156      	b.n	8008ffe <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	785b      	ldrb	r3, [r3, #1]
 8008d54:	2b03      	cmp	r3, #3
 8008d56:	d008      	beq.n	8008d6a <USBD_StdEPReq+0x9a>
 8008d58:	2b03      	cmp	r3, #3
 8008d5a:	f300 8145 	bgt.w	8008fe8 <USBD_StdEPReq+0x318>
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	f000 809b 	beq.w	8008e9a <USBD_StdEPReq+0x1ca>
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d03c      	beq.n	8008de2 <USBD_StdEPReq+0x112>
 8008d68:	e13e      	b.n	8008fe8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d70:	b2db      	uxtb	r3, r3
 8008d72:	2b02      	cmp	r3, #2
 8008d74:	d002      	beq.n	8008d7c <USBD_StdEPReq+0xac>
 8008d76:	2b03      	cmp	r3, #3
 8008d78:	d016      	beq.n	8008da8 <USBD_StdEPReq+0xd8>
 8008d7a:	e02c      	b.n	8008dd6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d7c:	7bbb      	ldrb	r3, [r7, #14]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d00d      	beq.n	8008d9e <USBD_StdEPReq+0xce>
 8008d82:	7bbb      	ldrb	r3, [r7, #14]
 8008d84:	2b80      	cmp	r3, #128	; 0x80
 8008d86:	d00a      	beq.n	8008d9e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008d88:	7bbb      	ldrb	r3, [r7, #14]
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f001 f999 	bl	800a0c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d92:	2180      	movs	r1, #128	; 0x80
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f001 f995 	bl	800a0c4 <USBD_LL_StallEP>
 8008d9a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008d9c:	e020      	b.n	8008de0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008d9e:	6839      	ldr	r1, [r7, #0]
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 fca4 	bl	80096ee <USBD_CtlError>
              break;
 8008da6:	e01b      	b.n	8008de0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	885b      	ldrh	r3, [r3, #2]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d10e      	bne.n	8008dce <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008db0:	7bbb      	ldrb	r3, [r7, #14]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d00b      	beq.n	8008dce <USBD_StdEPReq+0xfe>
 8008db6:	7bbb      	ldrb	r3, [r7, #14]
 8008db8:	2b80      	cmp	r3, #128	; 0x80
 8008dba:	d008      	beq.n	8008dce <USBD_StdEPReq+0xfe>
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	88db      	ldrh	r3, [r3, #6]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d104      	bne.n	8008dce <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008dc4:	7bbb      	ldrb	r3, [r7, #14]
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f001 f97b 	bl	800a0c4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 fd58 	bl	8009884 <USBD_CtlSendStatus>

              break;
 8008dd4:	e004      	b.n	8008de0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008dd6:	6839      	ldr	r1, [r7, #0]
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 fc88 	bl	80096ee <USBD_CtlError>
              break;
 8008dde:	bf00      	nop
          }
          break;
 8008de0:	e107      	b.n	8008ff2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008de8:	b2db      	uxtb	r3, r3
 8008dea:	2b02      	cmp	r3, #2
 8008dec:	d002      	beq.n	8008df4 <USBD_StdEPReq+0x124>
 8008dee:	2b03      	cmp	r3, #3
 8008df0:	d016      	beq.n	8008e20 <USBD_StdEPReq+0x150>
 8008df2:	e04b      	b.n	8008e8c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008df4:	7bbb      	ldrb	r3, [r7, #14]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d00d      	beq.n	8008e16 <USBD_StdEPReq+0x146>
 8008dfa:	7bbb      	ldrb	r3, [r7, #14]
 8008dfc:	2b80      	cmp	r3, #128	; 0x80
 8008dfe:	d00a      	beq.n	8008e16 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e00:	7bbb      	ldrb	r3, [r7, #14]
 8008e02:	4619      	mov	r1, r3
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f001 f95d 	bl	800a0c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e0a:	2180      	movs	r1, #128	; 0x80
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f001 f959 	bl	800a0c4 <USBD_LL_StallEP>
 8008e12:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008e14:	e040      	b.n	8008e98 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008e16:	6839      	ldr	r1, [r7, #0]
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f000 fc68 	bl	80096ee <USBD_CtlError>
              break;
 8008e1e:	e03b      	b.n	8008e98 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	885b      	ldrh	r3, [r3, #2]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d136      	bne.n	8008e96 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008e28:	7bbb      	ldrb	r3, [r7, #14]
 8008e2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d004      	beq.n	8008e3c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008e32:	7bbb      	ldrb	r3, [r7, #14]
 8008e34:	4619      	mov	r1, r3
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f001 f963 	bl	800a102 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f000 fd21 	bl	8009884 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008e42:	7bbb      	ldrb	r3, [r7, #14]
 8008e44:	4619      	mov	r1, r3
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f7ff fde2 	bl	8008a10 <USBD_CoreFindEP>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e50:	7b7b      	ldrb	r3, [r7, #13]
 8008e52:	2bff      	cmp	r3, #255	; 0xff
 8008e54:	d01f      	beq.n	8008e96 <USBD_StdEPReq+0x1c6>
 8008e56:	7b7b      	ldrb	r3, [r7, #13]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d11c      	bne.n	8008e96 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008e5c:	7b7a      	ldrb	r2, [r7, #13]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008e64:	7b7a      	ldrb	r2, [r7, #13]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	32ae      	adds	r2, #174	; 0xae
 8008e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e6e:	689b      	ldr	r3, [r3, #8]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d010      	beq.n	8008e96 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008e74:	7b7a      	ldrb	r2, [r7, #13]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	32ae      	adds	r2, #174	; 0xae
 8008e7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e7e:	689b      	ldr	r3, [r3, #8]
 8008e80:	6839      	ldr	r1, [r7, #0]
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	4798      	blx	r3
 8008e86:	4603      	mov	r3, r0
 8008e88:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008e8a:	e004      	b.n	8008e96 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008e8c:	6839      	ldr	r1, [r7, #0]
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 fc2d 	bl	80096ee <USBD_CtlError>
              break;
 8008e94:	e000      	b.n	8008e98 <USBD_StdEPReq+0x1c8>
              break;
 8008e96:	bf00      	nop
          }
          break;
 8008e98:	e0ab      	b.n	8008ff2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ea0:	b2db      	uxtb	r3, r3
 8008ea2:	2b02      	cmp	r3, #2
 8008ea4:	d002      	beq.n	8008eac <USBD_StdEPReq+0x1dc>
 8008ea6:	2b03      	cmp	r3, #3
 8008ea8:	d032      	beq.n	8008f10 <USBD_StdEPReq+0x240>
 8008eaa:	e097      	b.n	8008fdc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008eac:	7bbb      	ldrb	r3, [r7, #14]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d007      	beq.n	8008ec2 <USBD_StdEPReq+0x1f2>
 8008eb2:	7bbb      	ldrb	r3, [r7, #14]
 8008eb4:	2b80      	cmp	r3, #128	; 0x80
 8008eb6:	d004      	beq.n	8008ec2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008eb8:	6839      	ldr	r1, [r7, #0]
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 fc17 	bl	80096ee <USBD_CtlError>
                break;
 8008ec0:	e091      	b.n	8008fe6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ec2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	da0b      	bge.n	8008ee2 <USBD_StdEPReq+0x212>
 8008eca:	7bbb      	ldrb	r3, [r7, #14]
 8008ecc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ed0:	4613      	mov	r3, r2
 8008ed2:	009b      	lsls	r3, r3, #2
 8008ed4:	4413      	add	r3, r2
 8008ed6:	009b      	lsls	r3, r3, #2
 8008ed8:	3310      	adds	r3, #16
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	4413      	add	r3, r2
 8008ede:	3304      	adds	r3, #4
 8008ee0:	e00b      	b.n	8008efa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ee2:	7bbb      	ldrb	r3, [r7, #14]
 8008ee4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ee8:	4613      	mov	r3, r2
 8008eea:	009b      	lsls	r3, r3, #2
 8008eec:	4413      	add	r3, r2
 8008eee:	009b      	lsls	r3, r3, #2
 8008ef0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	4413      	add	r3, r2
 8008ef8:	3304      	adds	r3, #4
 8008efa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	2200      	movs	r2, #0
 8008f00:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	2202      	movs	r2, #2
 8008f06:	4619      	mov	r1, r3
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 fc61 	bl	80097d0 <USBD_CtlSendData>
              break;
 8008f0e:	e06a      	b.n	8008fe6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008f10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	da11      	bge.n	8008f3c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008f18:	7bbb      	ldrb	r3, [r7, #14]
 8008f1a:	f003 020f 	and.w	r2, r3, #15
 8008f1e:	6879      	ldr	r1, [r7, #4]
 8008f20:	4613      	mov	r3, r2
 8008f22:	009b      	lsls	r3, r3, #2
 8008f24:	4413      	add	r3, r2
 8008f26:	009b      	lsls	r3, r3, #2
 8008f28:	440b      	add	r3, r1
 8008f2a:	3324      	adds	r3, #36	; 0x24
 8008f2c:	881b      	ldrh	r3, [r3, #0]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d117      	bne.n	8008f62 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008f32:	6839      	ldr	r1, [r7, #0]
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 fbda 	bl	80096ee <USBD_CtlError>
                  break;
 8008f3a:	e054      	b.n	8008fe6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008f3c:	7bbb      	ldrb	r3, [r7, #14]
 8008f3e:	f003 020f 	and.w	r2, r3, #15
 8008f42:	6879      	ldr	r1, [r7, #4]
 8008f44:	4613      	mov	r3, r2
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	4413      	add	r3, r2
 8008f4a:	009b      	lsls	r3, r3, #2
 8008f4c:	440b      	add	r3, r1
 8008f4e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008f52:	881b      	ldrh	r3, [r3, #0]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d104      	bne.n	8008f62 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008f58:	6839      	ldr	r1, [r7, #0]
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 fbc7 	bl	80096ee <USBD_CtlError>
                  break;
 8008f60:	e041      	b.n	8008fe6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	da0b      	bge.n	8008f82 <USBD_StdEPReq+0x2b2>
 8008f6a:	7bbb      	ldrb	r3, [r7, #14]
 8008f6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f70:	4613      	mov	r3, r2
 8008f72:	009b      	lsls	r3, r3, #2
 8008f74:	4413      	add	r3, r2
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	3310      	adds	r3, #16
 8008f7a:	687a      	ldr	r2, [r7, #4]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	3304      	adds	r3, #4
 8008f80:	e00b      	b.n	8008f9a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008f82:	7bbb      	ldrb	r3, [r7, #14]
 8008f84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f88:	4613      	mov	r3, r2
 8008f8a:	009b      	lsls	r3, r3, #2
 8008f8c:	4413      	add	r3, r2
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008f94:	687a      	ldr	r2, [r7, #4]
 8008f96:	4413      	add	r3, r2
 8008f98:	3304      	adds	r3, #4
 8008f9a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008f9c:	7bbb      	ldrb	r3, [r7, #14]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d002      	beq.n	8008fa8 <USBD_StdEPReq+0x2d8>
 8008fa2:	7bbb      	ldrb	r3, [r7, #14]
 8008fa4:	2b80      	cmp	r3, #128	; 0x80
 8008fa6:	d103      	bne.n	8008fb0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	2200      	movs	r2, #0
 8008fac:	601a      	str	r2, [r3, #0]
 8008fae:	e00e      	b.n	8008fce <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008fb0:	7bbb      	ldrb	r3, [r7, #14]
 8008fb2:	4619      	mov	r1, r3
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f001 f8c3 	bl	800a140 <USBD_LL_IsStallEP>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d003      	beq.n	8008fc8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	601a      	str	r2, [r3, #0]
 8008fc6:	e002      	b.n	8008fce <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	2202      	movs	r2, #2
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 fbfb 	bl	80097d0 <USBD_CtlSendData>
              break;
 8008fda:	e004      	b.n	8008fe6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008fdc:	6839      	ldr	r1, [r7, #0]
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 fb85 	bl	80096ee <USBD_CtlError>
              break;
 8008fe4:	bf00      	nop
          }
          break;
 8008fe6:	e004      	b.n	8008ff2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008fe8:	6839      	ldr	r1, [r7, #0]
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 fb7f 	bl	80096ee <USBD_CtlError>
          break;
 8008ff0:	bf00      	nop
      }
      break;
 8008ff2:	e005      	b.n	8009000 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008ff4:	6839      	ldr	r1, [r7, #0]
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 fb79 	bl	80096ee <USBD_CtlError>
      break;
 8008ffc:	e000      	b.n	8009000 <USBD_StdEPReq+0x330>
      break;
 8008ffe:	bf00      	nop
  }

  return ret;
 8009000:	7bfb      	ldrb	r3, [r7, #15]
}
 8009002:	4618      	mov	r0, r3
 8009004:	3710      	adds	r7, #16
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}
	...

0800900c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b084      	sub	sp, #16
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009016:	2300      	movs	r3, #0
 8009018:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800901a:	2300      	movs	r3, #0
 800901c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800901e:	2300      	movs	r3, #0
 8009020:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	885b      	ldrh	r3, [r3, #2]
 8009026:	0a1b      	lsrs	r3, r3, #8
 8009028:	b29b      	uxth	r3, r3
 800902a:	3b01      	subs	r3, #1
 800902c:	2b0e      	cmp	r3, #14
 800902e:	f200 8152 	bhi.w	80092d6 <USBD_GetDescriptor+0x2ca>
 8009032:	a201      	add	r2, pc, #4	; (adr r2, 8009038 <USBD_GetDescriptor+0x2c>)
 8009034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009038:	080090a9 	.word	0x080090a9
 800903c:	080090c1 	.word	0x080090c1
 8009040:	08009101 	.word	0x08009101
 8009044:	080092d7 	.word	0x080092d7
 8009048:	080092d7 	.word	0x080092d7
 800904c:	08009277 	.word	0x08009277
 8009050:	080092a3 	.word	0x080092a3
 8009054:	080092d7 	.word	0x080092d7
 8009058:	080092d7 	.word	0x080092d7
 800905c:	080092d7 	.word	0x080092d7
 8009060:	080092d7 	.word	0x080092d7
 8009064:	080092d7 	.word	0x080092d7
 8009068:	080092d7 	.word	0x080092d7
 800906c:	080092d7 	.word	0x080092d7
 8009070:	08009075 	.word	0x08009075
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800907a:	69db      	ldr	r3, [r3, #28]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d00b      	beq.n	8009098 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009086:	69db      	ldr	r3, [r3, #28]
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	7c12      	ldrb	r2, [r2, #16]
 800908c:	f107 0108 	add.w	r1, r7, #8
 8009090:	4610      	mov	r0, r2
 8009092:	4798      	blx	r3
 8009094:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009096:	e126      	b.n	80092e6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009098:	6839      	ldr	r1, [r7, #0]
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f000 fb27 	bl	80096ee <USBD_CtlError>
        err++;
 80090a0:	7afb      	ldrb	r3, [r7, #11]
 80090a2:	3301      	adds	r3, #1
 80090a4:	72fb      	strb	r3, [r7, #11]
      break;
 80090a6:	e11e      	b.n	80092e6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	7c12      	ldrb	r2, [r2, #16]
 80090b4:	f107 0108 	add.w	r1, r7, #8
 80090b8:	4610      	mov	r0, r2
 80090ba:	4798      	blx	r3
 80090bc:	60f8      	str	r0, [r7, #12]
      break;
 80090be:	e112      	b.n	80092e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	7c1b      	ldrb	r3, [r3, #16]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d10d      	bne.n	80090e4 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090d0:	f107 0208 	add.w	r2, r7, #8
 80090d4:	4610      	mov	r0, r2
 80090d6:	4798      	blx	r3
 80090d8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	3301      	adds	r3, #1
 80090de:	2202      	movs	r2, #2
 80090e0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80090e2:	e100      	b.n	80092e6 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ec:	f107 0208 	add.w	r2, r7, #8
 80090f0:	4610      	mov	r0, r2
 80090f2:	4798      	blx	r3
 80090f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	3301      	adds	r3, #1
 80090fa:	2202      	movs	r2, #2
 80090fc:	701a      	strb	r2, [r3, #0]
      break;
 80090fe:	e0f2      	b.n	80092e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	885b      	ldrh	r3, [r3, #2]
 8009104:	b2db      	uxtb	r3, r3
 8009106:	2b05      	cmp	r3, #5
 8009108:	f200 80ac 	bhi.w	8009264 <USBD_GetDescriptor+0x258>
 800910c:	a201      	add	r2, pc, #4	; (adr r2, 8009114 <USBD_GetDescriptor+0x108>)
 800910e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009112:	bf00      	nop
 8009114:	0800912d 	.word	0x0800912d
 8009118:	08009161 	.word	0x08009161
 800911c:	08009195 	.word	0x08009195
 8009120:	080091c9 	.word	0x080091c9
 8009124:	080091fd 	.word	0x080091fd
 8009128:	08009231 	.word	0x08009231
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d00b      	beq.n	8009150 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	7c12      	ldrb	r2, [r2, #16]
 8009144:	f107 0108 	add.w	r1, r7, #8
 8009148:	4610      	mov	r0, r2
 800914a:	4798      	blx	r3
 800914c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800914e:	e091      	b.n	8009274 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009150:	6839      	ldr	r1, [r7, #0]
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 facb 	bl	80096ee <USBD_CtlError>
            err++;
 8009158:	7afb      	ldrb	r3, [r7, #11]
 800915a:	3301      	adds	r3, #1
 800915c:	72fb      	strb	r3, [r7, #11]
          break;
 800915e:	e089      	b.n	8009274 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009166:	689b      	ldr	r3, [r3, #8]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d00b      	beq.n	8009184 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	7c12      	ldrb	r2, [r2, #16]
 8009178:	f107 0108 	add.w	r1, r7, #8
 800917c:	4610      	mov	r0, r2
 800917e:	4798      	blx	r3
 8009180:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009182:	e077      	b.n	8009274 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009184:	6839      	ldr	r1, [r7, #0]
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 fab1 	bl	80096ee <USBD_CtlError>
            err++;
 800918c:	7afb      	ldrb	r3, [r7, #11]
 800918e:	3301      	adds	r3, #1
 8009190:	72fb      	strb	r3, [r7, #11]
          break;
 8009192:	e06f      	b.n	8009274 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800919a:	68db      	ldr	r3, [r3, #12]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d00b      	beq.n	80091b8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091a6:	68db      	ldr	r3, [r3, #12]
 80091a8:	687a      	ldr	r2, [r7, #4]
 80091aa:	7c12      	ldrb	r2, [r2, #16]
 80091ac:	f107 0108 	add.w	r1, r7, #8
 80091b0:	4610      	mov	r0, r2
 80091b2:	4798      	blx	r3
 80091b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091b6:	e05d      	b.n	8009274 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80091b8:	6839      	ldr	r1, [r7, #0]
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 fa97 	bl	80096ee <USBD_CtlError>
            err++;
 80091c0:	7afb      	ldrb	r3, [r7, #11]
 80091c2:	3301      	adds	r3, #1
 80091c4:	72fb      	strb	r3, [r7, #11]
          break;
 80091c6:	e055      	b.n	8009274 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091ce:	691b      	ldr	r3, [r3, #16]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d00b      	beq.n	80091ec <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091da:	691b      	ldr	r3, [r3, #16]
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	7c12      	ldrb	r2, [r2, #16]
 80091e0:	f107 0108 	add.w	r1, r7, #8
 80091e4:	4610      	mov	r0, r2
 80091e6:	4798      	blx	r3
 80091e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091ea:	e043      	b.n	8009274 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80091ec:	6839      	ldr	r1, [r7, #0]
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 fa7d 	bl	80096ee <USBD_CtlError>
            err++;
 80091f4:	7afb      	ldrb	r3, [r7, #11]
 80091f6:	3301      	adds	r3, #1
 80091f8:	72fb      	strb	r3, [r7, #11]
          break;
 80091fa:	e03b      	b.n	8009274 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009202:	695b      	ldr	r3, [r3, #20]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d00b      	beq.n	8009220 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800920e:	695b      	ldr	r3, [r3, #20]
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	7c12      	ldrb	r2, [r2, #16]
 8009214:	f107 0108 	add.w	r1, r7, #8
 8009218:	4610      	mov	r0, r2
 800921a:	4798      	blx	r3
 800921c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800921e:	e029      	b.n	8009274 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009220:	6839      	ldr	r1, [r7, #0]
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f000 fa63 	bl	80096ee <USBD_CtlError>
            err++;
 8009228:	7afb      	ldrb	r3, [r7, #11]
 800922a:	3301      	adds	r3, #1
 800922c:	72fb      	strb	r3, [r7, #11]
          break;
 800922e:	e021      	b.n	8009274 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009236:	699b      	ldr	r3, [r3, #24]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d00b      	beq.n	8009254 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009242:	699b      	ldr	r3, [r3, #24]
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	7c12      	ldrb	r2, [r2, #16]
 8009248:	f107 0108 	add.w	r1, r7, #8
 800924c:	4610      	mov	r0, r2
 800924e:	4798      	blx	r3
 8009250:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009252:	e00f      	b.n	8009274 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009254:	6839      	ldr	r1, [r7, #0]
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 fa49 	bl	80096ee <USBD_CtlError>
            err++;
 800925c:	7afb      	ldrb	r3, [r7, #11]
 800925e:	3301      	adds	r3, #1
 8009260:	72fb      	strb	r3, [r7, #11]
          break;
 8009262:	e007      	b.n	8009274 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009264:	6839      	ldr	r1, [r7, #0]
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 fa41 	bl	80096ee <USBD_CtlError>
          err++;
 800926c:	7afb      	ldrb	r3, [r7, #11]
 800926e:	3301      	adds	r3, #1
 8009270:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009272:	bf00      	nop
      }
      break;
 8009274:	e037      	b.n	80092e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	7c1b      	ldrb	r3, [r3, #16]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d109      	bne.n	8009292 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009286:	f107 0208 	add.w	r2, r7, #8
 800928a:	4610      	mov	r0, r2
 800928c:	4798      	blx	r3
 800928e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009290:	e029      	b.n	80092e6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009292:	6839      	ldr	r1, [r7, #0]
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f000 fa2a 	bl	80096ee <USBD_CtlError>
        err++;
 800929a:	7afb      	ldrb	r3, [r7, #11]
 800929c:	3301      	adds	r3, #1
 800929e:	72fb      	strb	r3, [r7, #11]
      break;
 80092a0:	e021      	b.n	80092e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	7c1b      	ldrb	r3, [r3, #16]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d10d      	bne.n	80092c6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092b2:	f107 0208 	add.w	r2, r7, #8
 80092b6:	4610      	mov	r0, r2
 80092b8:	4798      	blx	r3
 80092ba:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	3301      	adds	r3, #1
 80092c0:	2207      	movs	r2, #7
 80092c2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80092c4:	e00f      	b.n	80092e6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80092c6:	6839      	ldr	r1, [r7, #0]
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f000 fa10 	bl	80096ee <USBD_CtlError>
        err++;
 80092ce:	7afb      	ldrb	r3, [r7, #11]
 80092d0:	3301      	adds	r3, #1
 80092d2:	72fb      	strb	r3, [r7, #11]
      break;
 80092d4:	e007      	b.n	80092e6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80092d6:	6839      	ldr	r1, [r7, #0]
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 fa08 	bl	80096ee <USBD_CtlError>
      err++;
 80092de:	7afb      	ldrb	r3, [r7, #11]
 80092e0:	3301      	adds	r3, #1
 80092e2:	72fb      	strb	r3, [r7, #11]
      break;
 80092e4:	bf00      	nop
  }

  if (err != 0U)
 80092e6:	7afb      	ldrb	r3, [r7, #11]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d11e      	bne.n	800932a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	88db      	ldrh	r3, [r3, #6]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d016      	beq.n	8009322 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80092f4:	893b      	ldrh	r3, [r7, #8]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d00e      	beq.n	8009318 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	88da      	ldrh	r2, [r3, #6]
 80092fe:	893b      	ldrh	r3, [r7, #8]
 8009300:	4293      	cmp	r3, r2
 8009302:	bf28      	it	cs
 8009304:	4613      	movcs	r3, r2
 8009306:	b29b      	uxth	r3, r3
 8009308:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800930a:	893b      	ldrh	r3, [r7, #8]
 800930c:	461a      	mov	r2, r3
 800930e:	68f9      	ldr	r1, [r7, #12]
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f000 fa5d 	bl	80097d0 <USBD_CtlSendData>
 8009316:	e009      	b.n	800932c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009318:	6839      	ldr	r1, [r7, #0]
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 f9e7 	bl	80096ee <USBD_CtlError>
 8009320:	e004      	b.n	800932c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 faae 	bl	8009884 <USBD_CtlSendStatus>
 8009328:	e000      	b.n	800932c <USBD_GetDescriptor+0x320>
    return;
 800932a:	bf00      	nop
  }
}
 800932c:	3710      	adds	r7, #16
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop

08009334 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b084      	sub	sp, #16
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	889b      	ldrh	r3, [r3, #4]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d131      	bne.n	80093aa <USBD_SetAddress+0x76>
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	88db      	ldrh	r3, [r3, #6]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d12d      	bne.n	80093aa <USBD_SetAddress+0x76>
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	885b      	ldrh	r3, [r3, #2]
 8009352:	2b7f      	cmp	r3, #127	; 0x7f
 8009354:	d829      	bhi.n	80093aa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	885b      	ldrh	r3, [r3, #2]
 800935a:	b2db      	uxtb	r3, r3
 800935c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009360:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009368:	b2db      	uxtb	r3, r3
 800936a:	2b03      	cmp	r3, #3
 800936c:	d104      	bne.n	8009378 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800936e:	6839      	ldr	r1, [r7, #0]
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f000 f9bc 	bl	80096ee <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009376:	e01d      	b.n	80093b4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	7bfa      	ldrb	r2, [r7, #15]
 800937c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009380:	7bfb      	ldrb	r3, [r7, #15]
 8009382:	4619      	mov	r1, r3
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 ff07 	bl	800a198 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 fa7a 	bl	8009884 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009390:	7bfb      	ldrb	r3, [r7, #15]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d004      	beq.n	80093a0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2202      	movs	r2, #2
 800939a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800939e:	e009      	b.n	80093b4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2201      	movs	r2, #1
 80093a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093a8:	e004      	b.n	80093b4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80093aa:	6839      	ldr	r1, [r7, #0]
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 f99e 	bl	80096ee <USBD_CtlError>
  }
}
 80093b2:	bf00      	nop
 80093b4:	bf00      	nop
 80093b6:	3710      	adds	r7, #16
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}

080093bc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80093c6:	2300      	movs	r3, #0
 80093c8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	885b      	ldrh	r3, [r3, #2]
 80093ce:	b2da      	uxtb	r2, r3
 80093d0:	4b4e      	ldr	r3, [pc, #312]	; (800950c <USBD_SetConfig+0x150>)
 80093d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80093d4:	4b4d      	ldr	r3, [pc, #308]	; (800950c <USBD_SetConfig+0x150>)
 80093d6:	781b      	ldrb	r3, [r3, #0]
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d905      	bls.n	80093e8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80093dc:	6839      	ldr	r1, [r7, #0]
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 f985 	bl	80096ee <USBD_CtlError>
    return USBD_FAIL;
 80093e4:	2303      	movs	r3, #3
 80093e6:	e08c      	b.n	8009502 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	2b02      	cmp	r3, #2
 80093f2:	d002      	beq.n	80093fa <USBD_SetConfig+0x3e>
 80093f4:	2b03      	cmp	r3, #3
 80093f6:	d029      	beq.n	800944c <USBD_SetConfig+0x90>
 80093f8:	e075      	b.n	80094e6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80093fa:	4b44      	ldr	r3, [pc, #272]	; (800950c <USBD_SetConfig+0x150>)
 80093fc:	781b      	ldrb	r3, [r3, #0]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d020      	beq.n	8009444 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009402:	4b42      	ldr	r3, [pc, #264]	; (800950c <USBD_SetConfig+0x150>)
 8009404:	781b      	ldrb	r3, [r3, #0]
 8009406:	461a      	mov	r2, r3
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800940c:	4b3f      	ldr	r3, [pc, #252]	; (800950c <USBD_SetConfig+0x150>)
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	4619      	mov	r1, r3
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f7fe ffbd 	bl	8008392 <USBD_SetClassConfig>
 8009418:	4603      	mov	r3, r0
 800941a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800941c:	7bfb      	ldrb	r3, [r7, #15]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d008      	beq.n	8009434 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009422:	6839      	ldr	r1, [r7, #0]
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f000 f962 	bl	80096ee <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2202      	movs	r2, #2
 800942e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009432:	e065      	b.n	8009500 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f000 fa25 	bl	8009884 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2203      	movs	r2, #3
 800943e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009442:	e05d      	b.n	8009500 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f000 fa1d 	bl	8009884 <USBD_CtlSendStatus>
      break;
 800944a:	e059      	b.n	8009500 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800944c:	4b2f      	ldr	r3, [pc, #188]	; (800950c <USBD_SetConfig+0x150>)
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d112      	bne.n	800947a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2202      	movs	r2, #2
 8009458:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800945c:	4b2b      	ldr	r3, [pc, #172]	; (800950c <USBD_SetConfig+0x150>)
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	461a      	mov	r2, r3
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009466:	4b29      	ldr	r3, [pc, #164]	; (800950c <USBD_SetConfig+0x150>)
 8009468:	781b      	ldrb	r3, [r3, #0]
 800946a:	4619      	mov	r1, r3
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f7fe ffac 	bl	80083ca <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 fa06 	bl	8009884 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009478:	e042      	b.n	8009500 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800947a:	4b24      	ldr	r3, [pc, #144]	; (800950c <USBD_SetConfig+0x150>)
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	461a      	mov	r2, r3
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	429a      	cmp	r2, r3
 8009486:	d02a      	beq.n	80094de <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	b2db      	uxtb	r3, r3
 800948e:	4619      	mov	r1, r3
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f7fe ff9a 	bl	80083ca <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009496:	4b1d      	ldr	r3, [pc, #116]	; (800950c <USBD_SetConfig+0x150>)
 8009498:	781b      	ldrb	r3, [r3, #0]
 800949a:	461a      	mov	r2, r3
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80094a0:	4b1a      	ldr	r3, [pc, #104]	; (800950c <USBD_SetConfig+0x150>)
 80094a2:	781b      	ldrb	r3, [r3, #0]
 80094a4:	4619      	mov	r1, r3
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f7fe ff73 	bl	8008392 <USBD_SetClassConfig>
 80094ac:	4603      	mov	r3, r0
 80094ae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80094b0:	7bfb      	ldrb	r3, [r7, #15]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d00f      	beq.n	80094d6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80094b6:	6839      	ldr	r1, [r7, #0]
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 f918 	bl	80096ee <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	b2db      	uxtb	r3, r3
 80094c4:	4619      	mov	r1, r3
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f7fe ff7f 	bl	80083ca <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2202      	movs	r2, #2
 80094d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80094d4:	e014      	b.n	8009500 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 f9d4 	bl	8009884 <USBD_CtlSendStatus>
      break;
 80094dc:	e010      	b.n	8009500 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 f9d0 	bl	8009884 <USBD_CtlSendStatus>
      break;
 80094e4:	e00c      	b.n	8009500 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80094e6:	6839      	ldr	r1, [r7, #0]
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f000 f900 	bl	80096ee <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80094ee:	4b07      	ldr	r3, [pc, #28]	; (800950c <USBD_SetConfig+0x150>)
 80094f0:	781b      	ldrb	r3, [r3, #0]
 80094f2:	4619      	mov	r1, r3
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f7fe ff68 	bl	80083ca <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80094fa:	2303      	movs	r3, #3
 80094fc:	73fb      	strb	r3, [r7, #15]
      break;
 80094fe:	bf00      	nop
  }

  return ret;
 8009500:	7bfb      	ldrb	r3, [r7, #15]
}
 8009502:	4618      	mov	r0, r3
 8009504:	3710      	adds	r7, #16
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}
 800950a:	bf00      	nop
 800950c:	2000025c 	.word	0x2000025c

08009510 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b082      	sub	sp, #8
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	88db      	ldrh	r3, [r3, #6]
 800951e:	2b01      	cmp	r3, #1
 8009520:	d004      	beq.n	800952c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009522:	6839      	ldr	r1, [r7, #0]
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 f8e2 	bl	80096ee <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800952a:	e023      	b.n	8009574 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009532:	b2db      	uxtb	r3, r3
 8009534:	2b02      	cmp	r3, #2
 8009536:	dc02      	bgt.n	800953e <USBD_GetConfig+0x2e>
 8009538:	2b00      	cmp	r3, #0
 800953a:	dc03      	bgt.n	8009544 <USBD_GetConfig+0x34>
 800953c:	e015      	b.n	800956a <USBD_GetConfig+0x5a>
 800953e:	2b03      	cmp	r3, #3
 8009540:	d00b      	beq.n	800955a <USBD_GetConfig+0x4a>
 8009542:	e012      	b.n	800956a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2200      	movs	r2, #0
 8009548:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	3308      	adds	r3, #8
 800954e:	2201      	movs	r2, #1
 8009550:	4619      	mov	r1, r3
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 f93c 	bl	80097d0 <USBD_CtlSendData>
        break;
 8009558:	e00c      	b.n	8009574 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	3304      	adds	r3, #4
 800955e:	2201      	movs	r2, #1
 8009560:	4619      	mov	r1, r3
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f000 f934 	bl	80097d0 <USBD_CtlSendData>
        break;
 8009568:	e004      	b.n	8009574 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800956a:	6839      	ldr	r1, [r7, #0]
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 f8be 	bl	80096ee <USBD_CtlError>
        break;
 8009572:	bf00      	nop
}
 8009574:	bf00      	nop
 8009576:	3708      	adds	r7, #8
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b082      	sub	sp, #8
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800958c:	b2db      	uxtb	r3, r3
 800958e:	3b01      	subs	r3, #1
 8009590:	2b02      	cmp	r3, #2
 8009592:	d81e      	bhi.n	80095d2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	88db      	ldrh	r3, [r3, #6]
 8009598:	2b02      	cmp	r3, #2
 800959a:	d004      	beq.n	80095a6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800959c:	6839      	ldr	r1, [r7, #0]
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f000 f8a5 	bl	80096ee <USBD_CtlError>
        break;
 80095a4:	e01a      	b.n	80095dc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2201      	movs	r2, #1
 80095aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d005      	beq.n	80095c2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	68db      	ldr	r3, [r3, #12]
 80095ba:	f043 0202 	orr.w	r2, r3, #2
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	330c      	adds	r3, #12
 80095c6:	2202      	movs	r2, #2
 80095c8:	4619      	mov	r1, r3
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f000 f900 	bl	80097d0 <USBD_CtlSendData>
      break;
 80095d0:	e004      	b.n	80095dc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80095d2:	6839      	ldr	r1, [r7, #0]
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 f88a 	bl	80096ee <USBD_CtlError>
      break;
 80095da:	bf00      	nop
  }
}
 80095dc:	bf00      	nop
 80095de:	3708      	adds	r7, #8
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}

080095e4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	885b      	ldrh	r3, [r3, #2]
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d107      	bne.n	8009606 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2201      	movs	r2, #1
 80095fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 f940 	bl	8009884 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009604:	e013      	b.n	800962e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	885b      	ldrh	r3, [r3, #2]
 800960a:	2b02      	cmp	r3, #2
 800960c:	d10b      	bne.n	8009626 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	889b      	ldrh	r3, [r3, #4]
 8009612:	0a1b      	lsrs	r3, r3, #8
 8009614:	b29b      	uxth	r3, r3
 8009616:	b2da      	uxtb	r2, r3
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 f930 	bl	8009884 <USBD_CtlSendStatus>
}
 8009624:	e003      	b.n	800962e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009626:	6839      	ldr	r1, [r7, #0]
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f000 f860 	bl	80096ee <USBD_CtlError>
}
 800962e:	bf00      	nop
 8009630:	3708      	adds	r7, #8
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}

08009636 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009636:	b580      	push	{r7, lr}
 8009638:	b082      	sub	sp, #8
 800963a:	af00      	add	r7, sp, #0
 800963c:	6078      	str	r0, [r7, #4]
 800963e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009646:	b2db      	uxtb	r3, r3
 8009648:	3b01      	subs	r3, #1
 800964a:	2b02      	cmp	r3, #2
 800964c:	d80b      	bhi.n	8009666 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	885b      	ldrh	r3, [r3, #2]
 8009652:	2b01      	cmp	r3, #1
 8009654:	d10c      	bne.n	8009670 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2200      	movs	r2, #0
 800965a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f000 f910 	bl	8009884 <USBD_CtlSendStatus>
      }
      break;
 8009664:	e004      	b.n	8009670 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009666:	6839      	ldr	r1, [r7, #0]
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f000 f840 	bl	80096ee <USBD_CtlError>
      break;
 800966e:	e000      	b.n	8009672 <USBD_ClrFeature+0x3c>
      break;
 8009670:	bf00      	nop
  }
}
 8009672:	bf00      	nop
 8009674:	3708      	adds	r7, #8
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}

0800967a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800967a:	b580      	push	{r7, lr}
 800967c:	b084      	sub	sp, #16
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
 8009682:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	781a      	ldrb	r2, [r3, #0]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	3301      	adds	r3, #1
 8009694:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	781a      	ldrb	r2, [r3, #0]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	3301      	adds	r3, #1
 80096a2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80096a4:	68f8      	ldr	r0, [r7, #12]
 80096a6:	f7ff fa17 	bl	8008ad8 <SWAPBYTE>
 80096aa:	4603      	mov	r3, r0
 80096ac:	461a      	mov	r2, r3
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	3301      	adds	r3, #1
 80096b6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	3301      	adds	r3, #1
 80096bc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80096be:	68f8      	ldr	r0, [r7, #12]
 80096c0:	f7ff fa0a 	bl	8008ad8 <SWAPBYTE>
 80096c4:	4603      	mov	r3, r0
 80096c6:	461a      	mov	r2, r3
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	3301      	adds	r3, #1
 80096d0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	3301      	adds	r3, #1
 80096d6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80096d8:	68f8      	ldr	r0, [r7, #12]
 80096da:	f7ff f9fd 	bl	8008ad8 <SWAPBYTE>
 80096de:	4603      	mov	r3, r0
 80096e0:	461a      	mov	r2, r3
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	80da      	strh	r2, [r3, #6]
}
 80096e6:	bf00      	nop
 80096e8:	3710      	adds	r7, #16
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}

080096ee <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096ee:	b580      	push	{r7, lr}
 80096f0:	b082      	sub	sp, #8
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
 80096f6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80096f8:	2180      	movs	r1, #128	; 0x80
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 fce2 	bl	800a0c4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009700:	2100      	movs	r1, #0
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 fcde 	bl	800a0c4 <USBD_LL_StallEP>
}
 8009708:	bf00      	nop
 800970a:	3708      	adds	r7, #8
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b086      	sub	sp, #24
 8009714:	af00      	add	r7, sp, #0
 8009716:	60f8      	str	r0, [r7, #12]
 8009718:	60b9      	str	r1, [r7, #8]
 800971a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800971c:	2300      	movs	r3, #0
 800971e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d036      	beq.n	8009794 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800972a:	6938      	ldr	r0, [r7, #16]
 800972c:	f000 f836 	bl	800979c <USBD_GetLen>
 8009730:	4603      	mov	r3, r0
 8009732:	3301      	adds	r3, #1
 8009734:	b29b      	uxth	r3, r3
 8009736:	005b      	lsls	r3, r3, #1
 8009738:	b29a      	uxth	r2, r3
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800973e:	7dfb      	ldrb	r3, [r7, #23]
 8009740:	68ba      	ldr	r2, [r7, #8]
 8009742:	4413      	add	r3, r2
 8009744:	687a      	ldr	r2, [r7, #4]
 8009746:	7812      	ldrb	r2, [r2, #0]
 8009748:	701a      	strb	r2, [r3, #0]
  idx++;
 800974a:	7dfb      	ldrb	r3, [r7, #23]
 800974c:	3301      	adds	r3, #1
 800974e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009750:	7dfb      	ldrb	r3, [r7, #23]
 8009752:	68ba      	ldr	r2, [r7, #8]
 8009754:	4413      	add	r3, r2
 8009756:	2203      	movs	r2, #3
 8009758:	701a      	strb	r2, [r3, #0]
  idx++;
 800975a:	7dfb      	ldrb	r3, [r7, #23]
 800975c:	3301      	adds	r3, #1
 800975e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009760:	e013      	b.n	800978a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009762:	7dfb      	ldrb	r3, [r7, #23]
 8009764:	68ba      	ldr	r2, [r7, #8]
 8009766:	4413      	add	r3, r2
 8009768:	693a      	ldr	r2, [r7, #16]
 800976a:	7812      	ldrb	r2, [r2, #0]
 800976c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	3301      	adds	r3, #1
 8009772:	613b      	str	r3, [r7, #16]
    idx++;
 8009774:	7dfb      	ldrb	r3, [r7, #23]
 8009776:	3301      	adds	r3, #1
 8009778:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800977a:	7dfb      	ldrb	r3, [r7, #23]
 800977c:	68ba      	ldr	r2, [r7, #8]
 800977e:	4413      	add	r3, r2
 8009780:	2200      	movs	r2, #0
 8009782:	701a      	strb	r2, [r3, #0]
    idx++;
 8009784:	7dfb      	ldrb	r3, [r7, #23]
 8009786:	3301      	adds	r3, #1
 8009788:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d1e7      	bne.n	8009762 <USBD_GetString+0x52>
 8009792:	e000      	b.n	8009796 <USBD_GetString+0x86>
    return;
 8009794:	bf00      	nop
  }
}
 8009796:	3718      	adds	r7, #24
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800979c:	b480      	push	{r7}
 800979e:	b085      	sub	sp, #20
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80097a4:	2300      	movs	r3, #0
 80097a6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80097ac:	e005      	b.n	80097ba <USBD_GetLen+0x1e>
  {
    len++;
 80097ae:	7bfb      	ldrb	r3, [r7, #15]
 80097b0:	3301      	adds	r3, #1
 80097b2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	3301      	adds	r3, #1
 80097b8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d1f5      	bne.n	80097ae <USBD_GetLen+0x12>
  }

  return len;
 80097c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3714      	adds	r7, #20
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr

080097d0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b084      	sub	sp, #16
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	60f8      	str	r0, [r7, #12]
 80097d8:	60b9      	str	r1, [r7, #8]
 80097da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2202      	movs	r2, #2
 80097e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	687a      	ldr	r2, [r7, #4]
 80097ee:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	68ba      	ldr	r2, [r7, #8]
 80097f4:	2100      	movs	r1, #0
 80097f6:	68f8      	ldr	r0, [r7, #12]
 80097f8:	f000 fced 	bl	800a1d6 <USBD_LL_Transmit>

  return USBD_OK;
 80097fc:	2300      	movs	r3, #0
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3710      	adds	r7, #16
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}

08009806 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009806:	b580      	push	{r7, lr}
 8009808:	b084      	sub	sp, #16
 800980a:	af00      	add	r7, sp, #0
 800980c:	60f8      	str	r0, [r7, #12]
 800980e:	60b9      	str	r1, [r7, #8]
 8009810:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	68ba      	ldr	r2, [r7, #8]
 8009816:	2100      	movs	r1, #0
 8009818:	68f8      	ldr	r0, [r7, #12]
 800981a:	f000 fcdc 	bl	800a1d6 <USBD_LL_Transmit>

  return USBD_OK;
 800981e:	2300      	movs	r3, #0
}
 8009820:	4618      	mov	r0, r3
 8009822:	3710      	adds	r7, #16
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}

08009828 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
 800982e:	60f8      	str	r0, [r7, #12]
 8009830:	60b9      	str	r1, [r7, #8]
 8009832:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2203      	movs	r2, #3
 8009838:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	687a      	ldr	r2, [r7, #4]
 8009840:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	68ba      	ldr	r2, [r7, #8]
 8009850:	2100      	movs	r1, #0
 8009852:	68f8      	ldr	r0, [r7, #12]
 8009854:	f000 fce0 	bl	800a218 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009858:	2300      	movs	r3, #0
}
 800985a:	4618      	mov	r0, r3
 800985c:	3710      	adds	r7, #16
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}

08009862 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009862:	b580      	push	{r7, lr}
 8009864:	b084      	sub	sp, #16
 8009866:	af00      	add	r7, sp, #0
 8009868:	60f8      	str	r0, [r7, #12]
 800986a:	60b9      	str	r1, [r7, #8]
 800986c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	68ba      	ldr	r2, [r7, #8]
 8009872:	2100      	movs	r1, #0
 8009874:	68f8      	ldr	r0, [r7, #12]
 8009876:	f000 fccf 	bl	800a218 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800987a:	2300      	movs	r3, #0
}
 800987c:	4618      	mov	r0, r3
 800987e:	3710      	adds	r7, #16
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b082      	sub	sp, #8
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2204      	movs	r2, #4
 8009890:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009894:	2300      	movs	r3, #0
 8009896:	2200      	movs	r2, #0
 8009898:	2100      	movs	r1, #0
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f000 fc9b 	bl	800a1d6 <USBD_LL_Transmit>

  return USBD_OK;
 80098a0:	2300      	movs	r3, #0
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3708      	adds	r7, #8
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}

080098aa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80098aa:	b580      	push	{r7, lr}
 80098ac:	b082      	sub	sp, #8
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2205      	movs	r2, #5
 80098b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80098ba:	2300      	movs	r3, #0
 80098bc:	2200      	movs	r2, #0
 80098be:	2100      	movs	r1, #0
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f000 fca9 	bl	800a218 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80098c6:	2300      	movs	r3, #0
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3708      	adds	r7, #8
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80098d4:	2200      	movs	r2, #0
 80098d6:	4912      	ldr	r1, [pc, #72]	; (8009920 <MX_USB_DEVICE_Init+0x50>)
 80098d8:	4812      	ldr	r0, [pc, #72]	; (8009924 <MX_USB_DEVICE_Init+0x54>)
 80098da:	f7fe fcdd 	bl	8008298 <USBD_Init>
 80098de:	4603      	mov	r3, r0
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d001      	beq.n	80098e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80098e4:	f7f7 fce0 	bl	80012a8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80098e8:	490f      	ldr	r1, [pc, #60]	; (8009928 <MX_USB_DEVICE_Init+0x58>)
 80098ea:	480e      	ldr	r0, [pc, #56]	; (8009924 <MX_USB_DEVICE_Init+0x54>)
 80098ec:	f7fe fd04 	bl	80082f8 <USBD_RegisterClass>
 80098f0:	4603      	mov	r3, r0
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d001      	beq.n	80098fa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80098f6:	f7f7 fcd7 	bl	80012a8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80098fa:	490c      	ldr	r1, [pc, #48]	; (800992c <MX_USB_DEVICE_Init+0x5c>)
 80098fc:	4809      	ldr	r0, [pc, #36]	; (8009924 <MX_USB_DEVICE_Init+0x54>)
 80098fe:	f7fe fc3b 	bl	8008178 <USBD_CDC_RegisterInterface>
 8009902:	4603      	mov	r3, r0
 8009904:	2b00      	cmp	r3, #0
 8009906:	d001      	beq.n	800990c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009908:	f7f7 fcce 	bl	80012a8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800990c:	4805      	ldr	r0, [pc, #20]	; (8009924 <MX_USB_DEVICE_Init+0x54>)
 800990e:	f7fe fd29 	bl	8008364 <USBD_Start>
 8009912:	4603      	mov	r3, r0
 8009914:	2b00      	cmp	r3, #0
 8009916:	d001      	beq.n	800991c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009918:	f7f7 fcc6 	bl	80012a8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800991c:	bf00      	nop
 800991e:	bd80      	pop	{r7, pc}
 8009920:	200000bc 	.word	0x200000bc
 8009924:	20000260 	.word	0x20000260
 8009928:	20000028 	.word	0x20000028
 800992c:	200000a8 	.word	0x200000a8

08009930 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009934:	2200      	movs	r2, #0
 8009936:	4905      	ldr	r1, [pc, #20]	; (800994c <CDC_Init_FS+0x1c>)
 8009938:	4805      	ldr	r0, [pc, #20]	; (8009950 <CDC_Init_FS+0x20>)
 800993a:	f7fe fc37 	bl	80081ac <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800993e:	4905      	ldr	r1, [pc, #20]	; (8009954 <CDC_Init_FS+0x24>)
 8009940:	4803      	ldr	r0, [pc, #12]	; (8009950 <CDC_Init_FS+0x20>)
 8009942:	f7fe fc55 	bl	80081f0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009946:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009948:	4618      	mov	r0, r3
 800994a:	bd80      	pop	{r7, pc}
 800994c:	20000d3c 	.word	0x20000d3c
 8009950:	20000260 	.word	0x20000260
 8009954:	2000053c 	.word	0x2000053c

08009958 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009958:	b480      	push	{r7}
 800995a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800995c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800995e:	4618      	mov	r0, r3
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr

08009968 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009968:	b480      	push	{r7}
 800996a:	b083      	sub	sp, #12
 800996c:	af00      	add	r7, sp, #0
 800996e:	4603      	mov	r3, r0
 8009970:	6039      	str	r1, [r7, #0]
 8009972:	71fb      	strb	r3, [r7, #7]
 8009974:	4613      	mov	r3, r2
 8009976:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009978:	79fb      	ldrb	r3, [r7, #7]
 800997a:	2b23      	cmp	r3, #35	; 0x23
 800997c:	d84a      	bhi.n	8009a14 <CDC_Control_FS+0xac>
 800997e:	a201      	add	r2, pc, #4	; (adr r2, 8009984 <CDC_Control_FS+0x1c>)
 8009980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009984:	08009a15 	.word	0x08009a15
 8009988:	08009a15 	.word	0x08009a15
 800998c:	08009a15 	.word	0x08009a15
 8009990:	08009a15 	.word	0x08009a15
 8009994:	08009a15 	.word	0x08009a15
 8009998:	08009a15 	.word	0x08009a15
 800999c:	08009a15 	.word	0x08009a15
 80099a0:	08009a15 	.word	0x08009a15
 80099a4:	08009a15 	.word	0x08009a15
 80099a8:	08009a15 	.word	0x08009a15
 80099ac:	08009a15 	.word	0x08009a15
 80099b0:	08009a15 	.word	0x08009a15
 80099b4:	08009a15 	.word	0x08009a15
 80099b8:	08009a15 	.word	0x08009a15
 80099bc:	08009a15 	.word	0x08009a15
 80099c0:	08009a15 	.word	0x08009a15
 80099c4:	08009a15 	.word	0x08009a15
 80099c8:	08009a15 	.word	0x08009a15
 80099cc:	08009a15 	.word	0x08009a15
 80099d0:	08009a15 	.word	0x08009a15
 80099d4:	08009a15 	.word	0x08009a15
 80099d8:	08009a15 	.word	0x08009a15
 80099dc:	08009a15 	.word	0x08009a15
 80099e0:	08009a15 	.word	0x08009a15
 80099e4:	08009a15 	.word	0x08009a15
 80099e8:	08009a15 	.word	0x08009a15
 80099ec:	08009a15 	.word	0x08009a15
 80099f0:	08009a15 	.word	0x08009a15
 80099f4:	08009a15 	.word	0x08009a15
 80099f8:	08009a15 	.word	0x08009a15
 80099fc:	08009a15 	.word	0x08009a15
 8009a00:	08009a15 	.word	0x08009a15
 8009a04:	08009a15 	.word	0x08009a15
 8009a08:	08009a15 	.word	0x08009a15
 8009a0c:	08009a15 	.word	0x08009a15
 8009a10:	08009a15 	.word	0x08009a15
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009a14:	bf00      	nop
  }

  return (USBD_OK);
 8009a16:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	370c      	adds	r7, #12
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr

08009a24 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b082      	sub	sp, #8
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009a2e:	6879      	ldr	r1, [r7, #4]
 8009a30:	4805      	ldr	r0, [pc, #20]	; (8009a48 <CDC_Receive_FS+0x24>)
 8009a32:	f7fe fbdd 	bl	80081f0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009a36:	4804      	ldr	r0, [pc, #16]	; (8009a48 <CDC_Receive_FS+0x24>)
 8009a38:	f7fe fbf8 	bl	800822c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009a3c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3708      	adds	r7, #8
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	bf00      	nop
 8009a48:	20000260 	.word	0x20000260

08009a4c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b087      	sub	sp, #28
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	60f8      	str	r0, [r7, #12]
 8009a54:	60b9      	str	r1, [r7, #8]
 8009a56:	4613      	mov	r3, r2
 8009a58:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009a5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	371c      	adds	r7, #28
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr
	...

08009a70 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b083      	sub	sp, #12
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	4603      	mov	r3, r0
 8009a78:	6039      	str	r1, [r7, #0]
 8009a7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	2212      	movs	r2, #18
 8009a80:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009a82:	4b03      	ldr	r3, [pc, #12]	; (8009a90 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	370c      	adds	r7, #12
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr
 8009a90:	200000dc 	.word	0x200000dc

08009a94 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b083      	sub	sp, #12
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	6039      	str	r1, [r7, #0]
 8009a9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	2204      	movs	r2, #4
 8009aa4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009aa6:	4b03      	ldr	r3, [pc, #12]	; (8009ab4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	370c      	adds	r7, #12
 8009aac:	46bd      	mov	sp, r7
 8009aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab2:	4770      	bx	lr
 8009ab4:	200000fc 	.word	0x200000fc

08009ab8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b082      	sub	sp, #8
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	4603      	mov	r3, r0
 8009ac0:	6039      	str	r1, [r7, #0]
 8009ac2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009ac4:	79fb      	ldrb	r3, [r7, #7]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d105      	bne.n	8009ad6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009aca:	683a      	ldr	r2, [r7, #0]
 8009acc:	4907      	ldr	r1, [pc, #28]	; (8009aec <USBD_FS_ProductStrDescriptor+0x34>)
 8009ace:	4808      	ldr	r0, [pc, #32]	; (8009af0 <USBD_FS_ProductStrDescriptor+0x38>)
 8009ad0:	f7ff fe1e 	bl	8009710 <USBD_GetString>
 8009ad4:	e004      	b.n	8009ae0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009ad6:	683a      	ldr	r2, [r7, #0]
 8009ad8:	4904      	ldr	r1, [pc, #16]	; (8009aec <USBD_FS_ProductStrDescriptor+0x34>)
 8009ada:	4805      	ldr	r0, [pc, #20]	; (8009af0 <USBD_FS_ProductStrDescriptor+0x38>)
 8009adc:	f7ff fe18 	bl	8009710 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ae0:	4b02      	ldr	r3, [pc, #8]	; (8009aec <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3708      	adds	r7, #8
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	2000153c 	.word	0x2000153c
 8009af0:	0800a414 	.word	0x0800a414

08009af4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b082      	sub	sp, #8
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	4603      	mov	r3, r0
 8009afc:	6039      	str	r1, [r7, #0]
 8009afe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009b00:	683a      	ldr	r2, [r7, #0]
 8009b02:	4904      	ldr	r1, [pc, #16]	; (8009b14 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009b04:	4804      	ldr	r0, [pc, #16]	; (8009b18 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009b06:	f7ff fe03 	bl	8009710 <USBD_GetString>
  return USBD_StrDesc;
 8009b0a:	4b02      	ldr	r3, [pc, #8]	; (8009b14 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3708      	adds	r7, #8
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}
 8009b14:	2000153c 	.word	0x2000153c
 8009b18:	0800a42c 	.word	0x0800a42c

08009b1c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b082      	sub	sp, #8
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	4603      	mov	r3, r0
 8009b24:	6039      	str	r1, [r7, #0]
 8009b26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	221a      	movs	r2, #26
 8009b2c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009b2e:	f000 f855 	bl	8009bdc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009b32:	4b02      	ldr	r3, [pc, #8]	; (8009b3c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3708      	adds	r7, #8
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	20000100 	.word	0x20000100

08009b40 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b082      	sub	sp, #8
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	4603      	mov	r3, r0
 8009b48:	6039      	str	r1, [r7, #0]
 8009b4a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009b4c:	79fb      	ldrb	r3, [r7, #7]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d105      	bne.n	8009b5e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009b52:	683a      	ldr	r2, [r7, #0]
 8009b54:	4907      	ldr	r1, [pc, #28]	; (8009b74 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009b56:	4808      	ldr	r0, [pc, #32]	; (8009b78 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009b58:	f7ff fdda 	bl	8009710 <USBD_GetString>
 8009b5c:	e004      	b.n	8009b68 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009b5e:	683a      	ldr	r2, [r7, #0]
 8009b60:	4904      	ldr	r1, [pc, #16]	; (8009b74 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009b62:	4805      	ldr	r0, [pc, #20]	; (8009b78 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009b64:	f7ff fdd4 	bl	8009710 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b68:	4b02      	ldr	r3, [pc, #8]	; (8009b74 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3708      	adds	r7, #8
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	2000153c 	.word	0x2000153c
 8009b78:	0800a440 	.word	0x0800a440

08009b7c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b082      	sub	sp, #8
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	4603      	mov	r3, r0
 8009b84:	6039      	str	r1, [r7, #0]
 8009b86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009b88:	79fb      	ldrb	r3, [r7, #7]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d105      	bne.n	8009b9a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009b8e:	683a      	ldr	r2, [r7, #0]
 8009b90:	4907      	ldr	r1, [pc, #28]	; (8009bb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009b92:	4808      	ldr	r0, [pc, #32]	; (8009bb4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009b94:	f7ff fdbc 	bl	8009710 <USBD_GetString>
 8009b98:	e004      	b.n	8009ba4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009b9a:	683a      	ldr	r2, [r7, #0]
 8009b9c:	4904      	ldr	r1, [pc, #16]	; (8009bb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009b9e:	4805      	ldr	r0, [pc, #20]	; (8009bb4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009ba0:	f7ff fdb6 	bl	8009710 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ba4:	4b02      	ldr	r3, [pc, #8]	; (8009bb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3708      	adds	r7, #8
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	2000153c 	.word	0x2000153c
 8009bb4:	0800a44c 	.word	0x0800a44c

08009bb8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b083      	sub	sp, #12
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	6039      	str	r1, [r7, #0]
 8009bc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	220c      	movs	r2, #12
 8009bc8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8009bca:	4b03      	ldr	r3, [pc, #12]	; (8009bd8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	370c      	adds	r7, #12
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr
 8009bd8:	200000f0 	.word	0x200000f0

08009bdc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b084      	sub	sp, #16
 8009be0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009be2:	4b0f      	ldr	r3, [pc, #60]	; (8009c20 <Get_SerialNum+0x44>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009be8:	4b0e      	ldr	r3, [pc, #56]	; (8009c24 <Get_SerialNum+0x48>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009bee:	4b0e      	ldr	r3, [pc, #56]	; (8009c28 <Get_SerialNum+0x4c>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009bf4:	68fa      	ldr	r2, [r7, #12]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	4413      	add	r3, r2
 8009bfa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d009      	beq.n	8009c16 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009c02:	2208      	movs	r2, #8
 8009c04:	4909      	ldr	r1, [pc, #36]	; (8009c2c <Get_SerialNum+0x50>)
 8009c06:	68f8      	ldr	r0, [r7, #12]
 8009c08:	f000 f814 	bl	8009c34 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009c0c:	2204      	movs	r2, #4
 8009c0e:	4908      	ldr	r1, [pc, #32]	; (8009c30 <Get_SerialNum+0x54>)
 8009c10:	68b8      	ldr	r0, [r7, #8]
 8009c12:	f000 f80f 	bl	8009c34 <IntToUnicode>
  }
}
 8009c16:	bf00      	nop
 8009c18:	3710      	adds	r7, #16
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}
 8009c1e:	bf00      	nop
 8009c20:	1fff7a10 	.word	0x1fff7a10
 8009c24:	1fff7a14 	.word	0x1fff7a14
 8009c28:	1fff7a18 	.word	0x1fff7a18
 8009c2c:	20000102 	.word	0x20000102
 8009c30:	20000112 	.word	0x20000112

08009c34 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b087      	sub	sp, #28
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	60f8      	str	r0, [r7, #12]
 8009c3c:	60b9      	str	r1, [r7, #8]
 8009c3e:	4613      	mov	r3, r2
 8009c40:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009c42:	2300      	movs	r3, #0
 8009c44:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009c46:	2300      	movs	r3, #0
 8009c48:	75fb      	strb	r3, [r7, #23]
 8009c4a:	e027      	b.n	8009c9c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	0f1b      	lsrs	r3, r3, #28
 8009c50:	2b09      	cmp	r3, #9
 8009c52:	d80b      	bhi.n	8009c6c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	0f1b      	lsrs	r3, r3, #28
 8009c58:	b2da      	uxtb	r2, r3
 8009c5a:	7dfb      	ldrb	r3, [r7, #23]
 8009c5c:	005b      	lsls	r3, r3, #1
 8009c5e:	4619      	mov	r1, r3
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	440b      	add	r3, r1
 8009c64:	3230      	adds	r2, #48	; 0x30
 8009c66:	b2d2      	uxtb	r2, r2
 8009c68:	701a      	strb	r2, [r3, #0]
 8009c6a:	e00a      	b.n	8009c82 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	0f1b      	lsrs	r3, r3, #28
 8009c70:	b2da      	uxtb	r2, r3
 8009c72:	7dfb      	ldrb	r3, [r7, #23]
 8009c74:	005b      	lsls	r3, r3, #1
 8009c76:	4619      	mov	r1, r3
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	440b      	add	r3, r1
 8009c7c:	3237      	adds	r2, #55	; 0x37
 8009c7e:	b2d2      	uxtb	r2, r2
 8009c80:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	011b      	lsls	r3, r3, #4
 8009c86:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009c88:	7dfb      	ldrb	r3, [r7, #23]
 8009c8a:	005b      	lsls	r3, r3, #1
 8009c8c:	3301      	adds	r3, #1
 8009c8e:	68ba      	ldr	r2, [r7, #8]
 8009c90:	4413      	add	r3, r2
 8009c92:	2200      	movs	r2, #0
 8009c94:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009c96:	7dfb      	ldrb	r3, [r7, #23]
 8009c98:	3301      	adds	r3, #1
 8009c9a:	75fb      	strb	r3, [r7, #23]
 8009c9c:	7dfa      	ldrb	r2, [r7, #23]
 8009c9e:	79fb      	ldrb	r3, [r7, #7]
 8009ca0:	429a      	cmp	r2, r3
 8009ca2:	d3d3      	bcc.n	8009c4c <IntToUnicode+0x18>
  }
}
 8009ca4:	bf00      	nop
 8009ca6:	bf00      	nop
 8009ca8:	371c      	adds	r7, #28
 8009caa:	46bd      	mov	sp, r7
 8009cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb0:	4770      	bx	lr
	...

08009cb4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b0a0      	sub	sp, #128	; 0x80
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009cbc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	601a      	str	r2, [r3, #0]
 8009cc4:	605a      	str	r2, [r3, #4]
 8009cc6:	609a      	str	r2, [r3, #8]
 8009cc8:	60da      	str	r2, [r3, #12]
 8009cca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009ccc:	f107 0310 	add.w	r3, r7, #16
 8009cd0:	225c      	movs	r2, #92	; 0x5c
 8009cd2:	2100      	movs	r1, #0
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f000 fb89 	bl	800a3ec <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ce2:	d149      	bne.n	8009d78 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8009ce4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ce8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8009cea:	2300      	movs	r3, #0
 8009cec:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009cee:	f107 0310 	add.w	r3, r7, #16
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f7f9 feec 	bl	8003ad0 <HAL_RCCEx_PeriphCLKConfig>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d001      	beq.n	8009d02 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8009cfe:	f7f7 fad3 	bl	80012a8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009d02:	2300      	movs	r3, #0
 8009d04:	60fb      	str	r3, [r7, #12]
 8009d06:	4b1e      	ldr	r3, [pc, #120]	; (8009d80 <HAL_PCD_MspInit+0xcc>)
 8009d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d0a:	4a1d      	ldr	r2, [pc, #116]	; (8009d80 <HAL_PCD_MspInit+0xcc>)
 8009d0c:	f043 0301 	orr.w	r3, r3, #1
 8009d10:	6313      	str	r3, [r2, #48]	; 0x30
 8009d12:	4b1b      	ldr	r3, [pc, #108]	; (8009d80 <HAL_PCD_MspInit+0xcc>)
 8009d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d16:	f003 0301 	and.w	r3, r3, #1
 8009d1a:	60fb      	str	r3, [r7, #12]
 8009d1c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009d1e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009d22:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d24:	2302      	movs	r3, #2
 8009d26:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009d2c:	2303      	movs	r3, #3
 8009d2e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009d30:	230a      	movs	r3, #10
 8009d32:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009d34:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8009d38:	4619      	mov	r1, r3
 8009d3a:	4812      	ldr	r0, [pc, #72]	; (8009d84 <HAL_PCD_MspInit+0xd0>)
 8009d3c:	f7f8 f948 	bl	8001fd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009d40:	4b0f      	ldr	r3, [pc, #60]	; (8009d80 <HAL_PCD_MspInit+0xcc>)
 8009d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d44:	4a0e      	ldr	r2, [pc, #56]	; (8009d80 <HAL_PCD_MspInit+0xcc>)
 8009d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d4a:	6353      	str	r3, [r2, #52]	; 0x34
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	60bb      	str	r3, [r7, #8]
 8009d50:	4b0b      	ldr	r3, [pc, #44]	; (8009d80 <HAL_PCD_MspInit+0xcc>)
 8009d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d54:	4a0a      	ldr	r2, [pc, #40]	; (8009d80 <HAL_PCD_MspInit+0xcc>)
 8009d56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009d5a:	6453      	str	r3, [r2, #68]	; 0x44
 8009d5c:	4b08      	ldr	r3, [pc, #32]	; (8009d80 <HAL_PCD_MspInit+0xcc>)
 8009d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d64:	60bb      	str	r3, [r7, #8]
 8009d66:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009d68:	2200      	movs	r2, #0
 8009d6a:	2100      	movs	r1, #0
 8009d6c:	2043      	movs	r0, #67	; 0x43
 8009d6e:	f7f7 fd88 	bl	8001882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009d72:	2043      	movs	r0, #67	; 0x43
 8009d74:	f7f7 fda1 	bl	80018ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009d78:	bf00      	nop
 8009d7a:	3780      	adds	r7, #128	; 0x80
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}
 8009d80:	40023800 	.word	0x40023800
 8009d84:	40020000 	.word	0x40020000

08009d88 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b082      	sub	sp, #8
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	4610      	mov	r0, r2
 8009da0:	f7fe fb2d 	bl	80083fe <USBD_LL_SetupStage>
}
 8009da4:	bf00      	nop
 8009da6:	3708      	adds	r7, #8
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b082      	sub	sp, #8
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	460b      	mov	r3, r1
 8009db6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009dbe:	78fa      	ldrb	r2, [r7, #3]
 8009dc0:	6879      	ldr	r1, [r7, #4]
 8009dc2:	4613      	mov	r3, r2
 8009dc4:	00db      	lsls	r3, r3, #3
 8009dc6:	4413      	add	r3, r2
 8009dc8:	009b      	lsls	r3, r3, #2
 8009dca:	440b      	add	r3, r1
 8009dcc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009dd0:	681a      	ldr	r2, [r3, #0]
 8009dd2:	78fb      	ldrb	r3, [r7, #3]
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	f7fe fb67 	bl	80084a8 <USBD_LL_DataOutStage>
}
 8009dda:	bf00      	nop
 8009ddc:	3708      	adds	r7, #8
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}

08009de2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009de2:	b580      	push	{r7, lr}
 8009de4:	b082      	sub	sp, #8
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	6078      	str	r0, [r7, #4]
 8009dea:	460b      	mov	r3, r1
 8009dec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009df4:	78fa      	ldrb	r2, [r7, #3]
 8009df6:	6879      	ldr	r1, [r7, #4]
 8009df8:	4613      	mov	r3, r2
 8009dfa:	00db      	lsls	r3, r3, #3
 8009dfc:	4413      	add	r3, r2
 8009dfe:	009b      	lsls	r3, r3, #2
 8009e00:	440b      	add	r3, r1
 8009e02:	334c      	adds	r3, #76	; 0x4c
 8009e04:	681a      	ldr	r2, [r3, #0]
 8009e06:	78fb      	ldrb	r3, [r7, #3]
 8009e08:	4619      	mov	r1, r3
 8009e0a:	f7fe fc00 	bl	800860e <USBD_LL_DataInStage>
}
 8009e0e:	bf00      	nop
 8009e10:	3708      	adds	r7, #8
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}

08009e16 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e16:	b580      	push	{r7, lr}
 8009e18:	b082      	sub	sp, #8
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009e24:	4618      	mov	r0, r3
 8009e26:	f7fe fd34 	bl	8008892 <USBD_LL_SOF>
}
 8009e2a:	bf00      	nop
 8009e2c:	3708      	adds	r7, #8
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}

08009e32 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e32:	b580      	push	{r7, lr}
 8009e34:	b084      	sub	sp, #16
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	68db      	ldr	r3, [r3, #12]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d102      	bne.n	8009e4c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009e46:	2300      	movs	r3, #0
 8009e48:	73fb      	strb	r3, [r7, #15]
 8009e4a:	e008      	b.n	8009e5e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	68db      	ldr	r3, [r3, #12]
 8009e50:	2b02      	cmp	r3, #2
 8009e52:	d102      	bne.n	8009e5a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009e54:	2301      	movs	r3, #1
 8009e56:	73fb      	strb	r3, [r7, #15]
 8009e58:	e001      	b.n	8009e5e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009e5a:	f7f7 fa25 	bl	80012a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009e64:	7bfa      	ldrb	r2, [r7, #15]
 8009e66:	4611      	mov	r1, r2
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f7fe fcd4 	bl	8008816 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009e74:	4618      	mov	r0, r3
 8009e76:	f7fe fc7c 	bl	8008772 <USBD_LL_Reset>
}
 8009e7a:	bf00      	nop
 8009e7c:	3710      	adds	r7, #16
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
	...

08009e84 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b082      	sub	sp, #8
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009e92:	4618      	mov	r0, r3
 8009e94:	f7fe fccf 	bl	8008836 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	687a      	ldr	r2, [r7, #4]
 8009ea4:	6812      	ldr	r2, [r2, #0]
 8009ea6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009eaa:	f043 0301 	orr.w	r3, r3, #1
 8009eae:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6a1b      	ldr	r3, [r3, #32]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d005      	beq.n	8009ec4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009eb8:	4b04      	ldr	r3, [pc, #16]	; (8009ecc <HAL_PCD_SuspendCallback+0x48>)
 8009eba:	691b      	ldr	r3, [r3, #16]
 8009ebc:	4a03      	ldr	r2, [pc, #12]	; (8009ecc <HAL_PCD_SuspendCallback+0x48>)
 8009ebe:	f043 0306 	orr.w	r3, r3, #6
 8009ec2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009ec4:	bf00      	nop
 8009ec6:	3708      	adds	r7, #8
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}
 8009ecc:	e000ed00 	.word	0xe000ed00

08009ed0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b082      	sub	sp, #8
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f7fe fcbf 	bl	8008862 <USBD_LL_Resume>
}
 8009ee4:	bf00      	nop
 8009ee6:	3708      	adds	r7, #8
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b082      	sub	sp, #8
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	460b      	mov	r3, r1
 8009ef6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009efe:	78fa      	ldrb	r2, [r7, #3]
 8009f00:	4611      	mov	r1, r2
 8009f02:	4618      	mov	r0, r3
 8009f04:	f7fe fd17 	bl	8008936 <USBD_LL_IsoOUTIncomplete>
}
 8009f08:	bf00      	nop
 8009f0a:	3708      	adds	r7, #8
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}

08009f10 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b082      	sub	sp, #8
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	460b      	mov	r3, r1
 8009f1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f22:	78fa      	ldrb	r2, [r7, #3]
 8009f24:	4611      	mov	r1, r2
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7fe fcd3 	bl	80088d2 <USBD_LL_IsoINIncomplete>
}
 8009f2c:	bf00      	nop
 8009f2e:	3708      	adds	r7, #8
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b082      	sub	sp, #8
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f42:	4618      	mov	r0, r3
 8009f44:	f7fe fd29 	bl	800899a <USBD_LL_DevConnected>
}
 8009f48:	bf00      	nop
 8009f4a:	3708      	adds	r7, #8
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b082      	sub	sp, #8
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f7fe fd26 	bl	80089b0 <USBD_LL_DevDisconnected>
}
 8009f64:	bf00      	nop
 8009f66:	3708      	adds	r7, #8
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}

08009f6c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b082      	sub	sp, #8
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d13c      	bne.n	8009ff6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009f7c:	4a20      	ldr	r2, [pc, #128]	; (800a000 <USBD_LL_Init+0x94>)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	4a1e      	ldr	r2, [pc, #120]	; (800a000 <USBD_LL_Init+0x94>)
 8009f88:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009f8c:	4b1c      	ldr	r3, [pc, #112]	; (800a000 <USBD_LL_Init+0x94>)
 8009f8e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009f92:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009f94:	4b1a      	ldr	r3, [pc, #104]	; (800a000 <USBD_LL_Init+0x94>)
 8009f96:	2206      	movs	r2, #6
 8009f98:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009f9a:	4b19      	ldr	r3, [pc, #100]	; (800a000 <USBD_LL_Init+0x94>)
 8009f9c:	2202      	movs	r2, #2
 8009f9e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009fa0:	4b17      	ldr	r3, [pc, #92]	; (800a000 <USBD_LL_Init+0x94>)
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009fa6:	4b16      	ldr	r3, [pc, #88]	; (800a000 <USBD_LL_Init+0x94>)
 8009fa8:	2202      	movs	r2, #2
 8009faa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009fac:	4b14      	ldr	r3, [pc, #80]	; (800a000 <USBD_LL_Init+0x94>)
 8009fae:	2200      	movs	r2, #0
 8009fb0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009fb2:	4b13      	ldr	r3, [pc, #76]	; (800a000 <USBD_LL_Init+0x94>)
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009fb8:	4b11      	ldr	r3, [pc, #68]	; (800a000 <USBD_LL_Init+0x94>)
 8009fba:	2200      	movs	r2, #0
 8009fbc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009fbe:	4b10      	ldr	r3, [pc, #64]	; (800a000 <USBD_LL_Init+0x94>)
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009fc4:	4b0e      	ldr	r3, [pc, #56]	; (800a000 <USBD_LL_Init+0x94>)
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009fca:	480d      	ldr	r0, [pc, #52]	; (800a000 <USBD_LL_Init+0x94>)
 8009fcc:	f7f8 f9c5 	bl	800235a <HAL_PCD_Init>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d001      	beq.n	8009fda <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009fd6:	f7f7 f967 	bl	80012a8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009fda:	2180      	movs	r1, #128	; 0x80
 8009fdc:	4808      	ldr	r0, [pc, #32]	; (800a000 <USBD_LL_Init+0x94>)
 8009fde:	f7f9 fc50 	bl	8003882 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009fe2:	2240      	movs	r2, #64	; 0x40
 8009fe4:	2100      	movs	r1, #0
 8009fe6:	4806      	ldr	r0, [pc, #24]	; (800a000 <USBD_LL_Init+0x94>)
 8009fe8:	f7f9 fc04 	bl	80037f4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009fec:	2280      	movs	r2, #128	; 0x80
 8009fee:	2101      	movs	r1, #1
 8009ff0:	4803      	ldr	r0, [pc, #12]	; (800a000 <USBD_LL_Init+0x94>)
 8009ff2:	f7f9 fbff 	bl	80037f4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009ff6:	2300      	movs	r3, #0
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3708      	adds	r7, #8
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}
 800a000:	2000173c 	.word	0x2000173c

0800a004 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b084      	sub	sp, #16
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a00c:	2300      	movs	r3, #0
 800a00e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a010:	2300      	movs	r3, #0
 800a012:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a01a:	4618      	mov	r0, r3
 800a01c:	f7f8 fac1 	bl	80025a2 <HAL_PCD_Start>
 800a020:	4603      	mov	r3, r0
 800a022:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a024:	7bfb      	ldrb	r3, [r7, #15]
 800a026:	4618      	mov	r0, r3
 800a028:	f000 f990 	bl	800a34c <USBD_Get_USB_Status>
 800a02c:	4603      	mov	r3, r0
 800a02e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a030:	7bbb      	ldrb	r3, [r7, #14]
}
 800a032:	4618      	mov	r0, r3
 800a034:	3710      	adds	r7, #16
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}

0800a03a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a03a:	b580      	push	{r7, lr}
 800a03c:	b084      	sub	sp, #16
 800a03e:	af00      	add	r7, sp, #0
 800a040:	6078      	str	r0, [r7, #4]
 800a042:	4608      	mov	r0, r1
 800a044:	4611      	mov	r1, r2
 800a046:	461a      	mov	r2, r3
 800a048:	4603      	mov	r3, r0
 800a04a:	70fb      	strb	r3, [r7, #3]
 800a04c:	460b      	mov	r3, r1
 800a04e:	70bb      	strb	r3, [r7, #2]
 800a050:	4613      	mov	r3, r2
 800a052:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a054:	2300      	movs	r3, #0
 800a056:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a058:	2300      	movs	r3, #0
 800a05a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a062:	78bb      	ldrb	r3, [r7, #2]
 800a064:	883a      	ldrh	r2, [r7, #0]
 800a066:	78f9      	ldrb	r1, [r7, #3]
 800a068:	f7f8 ffbf 	bl	8002fea <HAL_PCD_EP_Open>
 800a06c:	4603      	mov	r3, r0
 800a06e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a070:	7bfb      	ldrb	r3, [r7, #15]
 800a072:	4618      	mov	r0, r3
 800a074:	f000 f96a 	bl	800a34c <USBD_Get_USB_Status>
 800a078:	4603      	mov	r3, r0
 800a07a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a07c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3710      	adds	r7, #16
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}

0800a086 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a086:	b580      	push	{r7, lr}
 800a088:	b084      	sub	sp, #16
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	6078      	str	r0, [r7, #4]
 800a08e:	460b      	mov	r3, r1
 800a090:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a092:	2300      	movs	r3, #0
 800a094:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a096:	2300      	movs	r3, #0
 800a098:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a0a0:	78fa      	ldrb	r2, [r7, #3]
 800a0a2:	4611      	mov	r1, r2
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7f9 f808 	bl	80030ba <HAL_PCD_EP_Close>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0ae:	7bfb      	ldrb	r3, [r7, #15]
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f000 f94b 	bl	800a34c <USBD_Get_USB_Status>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0ba:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3710      	adds	r7, #16
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b084      	sub	sp, #16
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	460b      	mov	r3, r1
 800a0ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a0de:	78fa      	ldrb	r2, [r7, #3]
 800a0e0:	4611      	mov	r1, r2
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f7f9 f8e0 	bl	80032a8 <HAL_PCD_EP_SetStall>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0ec:	7bfb      	ldrb	r3, [r7, #15]
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f000 f92c 	bl	800a34c <USBD_Get_USB_Status>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3710      	adds	r7, #16
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}

0800a102 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a102:	b580      	push	{r7, lr}
 800a104:	b084      	sub	sp, #16
 800a106:	af00      	add	r7, sp, #0
 800a108:	6078      	str	r0, [r7, #4]
 800a10a:	460b      	mov	r3, r1
 800a10c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a10e:	2300      	movs	r3, #0
 800a110:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a112:	2300      	movs	r3, #0
 800a114:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a11c:	78fa      	ldrb	r2, [r7, #3]
 800a11e:	4611      	mov	r1, r2
 800a120:	4618      	mov	r0, r3
 800a122:	f7f9 f925 	bl	8003370 <HAL_PCD_EP_ClrStall>
 800a126:	4603      	mov	r3, r0
 800a128:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a12a:	7bfb      	ldrb	r3, [r7, #15]
 800a12c:	4618      	mov	r0, r3
 800a12e:	f000 f90d 	bl	800a34c <USBD_Get_USB_Status>
 800a132:	4603      	mov	r3, r0
 800a134:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a136:	7bbb      	ldrb	r3, [r7, #14]
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3710      	adds	r7, #16
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}

0800a140 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a140:	b480      	push	{r7}
 800a142:	b085      	sub	sp, #20
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	460b      	mov	r3, r1
 800a14a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a152:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a154:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	da0b      	bge.n	800a174 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a15c:	78fb      	ldrb	r3, [r7, #3]
 800a15e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a162:	68f9      	ldr	r1, [r7, #12]
 800a164:	4613      	mov	r3, r2
 800a166:	00db      	lsls	r3, r3, #3
 800a168:	4413      	add	r3, r2
 800a16a:	009b      	lsls	r3, r3, #2
 800a16c:	440b      	add	r3, r1
 800a16e:	333e      	adds	r3, #62	; 0x3e
 800a170:	781b      	ldrb	r3, [r3, #0]
 800a172:	e00b      	b.n	800a18c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a174:	78fb      	ldrb	r3, [r7, #3]
 800a176:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a17a:	68f9      	ldr	r1, [r7, #12]
 800a17c:	4613      	mov	r3, r2
 800a17e:	00db      	lsls	r3, r3, #3
 800a180:	4413      	add	r3, r2
 800a182:	009b      	lsls	r3, r3, #2
 800a184:	440b      	add	r3, r1
 800a186:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a18a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3714      	adds	r7, #20
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr

0800a198 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b084      	sub	sp, #16
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a1b2:	78fa      	ldrb	r2, [r7, #3]
 800a1b4:	4611      	mov	r1, r2
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f7f8 fef2 	bl	8002fa0 <HAL_PCD_SetAddress>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1c0:	7bfb      	ldrb	r3, [r7, #15]
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f000 f8c2 	bl	800a34c <USBD_Get_USB_Status>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3710      	adds	r7, #16
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}

0800a1d6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a1d6:	b580      	push	{r7, lr}
 800a1d8:	b086      	sub	sp, #24
 800a1da:	af00      	add	r7, sp, #0
 800a1dc:	60f8      	str	r0, [r7, #12]
 800a1de:	607a      	str	r2, [r7, #4]
 800a1e0:	603b      	str	r3, [r7, #0]
 800a1e2:	460b      	mov	r3, r1
 800a1e4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a1f4:	7af9      	ldrb	r1, [r7, #11]
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	687a      	ldr	r2, [r7, #4]
 800a1fa:	f7f9 f80b 	bl	8003214 <HAL_PCD_EP_Transmit>
 800a1fe:	4603      	mov	r3, r0
 800a200:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a202:	7dfb      	ldrb	r3, [r7, #23]
 800a204:	4618      	mov	r0, r3
 800a206:	f000 f8a1 	bl	800a34c <USBD_Get_USB_Status>
 800a20a:	4603      	mov	r3, r0
 800a20c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a20e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a210:	4618      	mov	r0, r3
 800a212:	3718      	adds	r7, #24
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b086      	sub	sp, #24
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	60f8      	str	r0, [r7, #12]
 800a220:	607a      	str	r2, [r7, #4]
 800a222:	603b      	str	r3, [r7, #0]
 800a224:	460b      	mov	r3, r1
 800a226:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a228:	2300      	movs	r3, #0
 800a22a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a22c:	2300      	movs	r3, #0
 800a22e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a236:	7af9      	ldrb	r1, [r7, #11]
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	687a      	ldr	r2, [r7, #4]
 800a23c:	f7f8 ff87 	bl	800314e <HAL_PCD_EP_Receive>
 800a240:	4603      	mov	r3, r0
 800a242:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a244:	7dfb      	ldrb	r3, [r7, #23]
 800a246:	4618      	mov	r0, r3
 800a248:	f000 f880 	bl	800a34c <USBD_Get_USB_Status>
 800a24c:	4603      	mov	r3, r0
 800a24e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a250:	7dbb      	ldrb	r3, [r7, #22]
}
 800a252:	4618      	mov	r0, r3
 800a254:	3718      	adds	r7, #24
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}

0800a25a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a25a:	b580      	push	{r7, lr}
 800a25c:	b082      	sub	sp, #8
 800a25e:	af00      	add	r7, sp, #0
 800a260:	6078      	str	r0, [r7, #4]
 800a262:	460b      	mov	r3, r1
 800a264:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a26c:	78fa      	ldrb	r2, [r7, #3]
 800a26e:	4611      	mov	r1, r2
 800a270:	4618      	mov	r0, r3
 800a272:	f7f8 ffb7 	bl	80031e4 <HAL_PCD_EP_GetRxCount>
 800a276:	4603      	mov	r3, r0
}
 800a278:	4618      	mov	r0, r3
 800a27a:	3708      	adds	r7, #8
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}

0800a280 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b082      	sub	sp, #8
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	460b      	mov	r3, r1
 800a28a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800a28c:	78fb      	ldrb	r3, [r7, #3]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d002      	beq.n	800a298 <HAL_PCDEx_LPM_Callback+0x18>
 800a292:	2b01      	cmp	r3, #1
 800a294:	d01f      	beq.n	800a2d6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800a296:	e03b      	b.n	800a310 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6a1b      	ldr	r3, [r3, #32]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d007      	beq.n	800a2b0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800a2a0:	f7f6 fe46 	bl	8000f30 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a2a4:	4b1c      	ldr	r3, [pc, #112]	; (800a318 <HAL_PCDEx_LPM_Callback+0x98>)
 800a2a6:	691b      	ldr	r3, [r3, #16]
 800a2a8:	4a1b      	ldr	r2, [pc, #108]	; (800a318 <HAL_PCDEx_LPM_Callback+0x98>)
 800a2aa:	f023 0306 	bic.w	r3, r3, #6
 800a2ae:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	687a      	ldr	r2, [r7, #4]
 800a2bc:	6812      	ldr	r2, [r2, #0]
 800a2be:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a2c2:	f023 0301 	bic.w	r3, r3, #1
 800a2c6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f7fe fac7 	bl	8008862 <USBD_LL_Resume>
    break;
 800a2d4:	e01c      	b.n	800a310 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	687a      	ldr	r2, [r7, #4]
 800a2e2:	6812      	ldr	r2, [r2, #0]
 800a2e4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a2e8:	f043 0301 	orr.w	r3, r3, #1
 800a2ec:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f7fe fa9e 	bl	8008836 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6a1b      	ldr	r3, [r3, #32]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d005      	beq.n	800a30e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a302:	4b05      	ldr	r3, [pc, #20]	; (800a318 <HAL_PCDEx_LPM_Callback+0x98>)
 800a304:	691b      	ldr	r3, [r3, #16]
 800a306:	4a04      	ldr	r2, [pc, #16]	; (800a318 <HAL_PCDEx_LPM_Callback+0x98>)
 800a308:	f043 0306 	orr.w	r3, r3, #6
 800a30c:	6113      	str	r3, [r2, #16]
    break;
 800a30e:	bf00      	nop
}
 800a310:	bf00      	nop
 800a312:	3708      	adds	r7, #8
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}
 800a318:	e000ed00 	.word	0xe000ed00

0800a31c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b083      	sub	sp, #12
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a324:	4b03      	ldr	r3, [pc, #12]	; (800a334 <USBD_static_malloc+0x18>)
}
 800a326:	4618      	mov	r0, r3
 800a328:	370c      	adds	r7, #12
 800a32a:	46bd      	mov	sp, r7
 800a32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a330:	4770      	bx	lr
 800a332:	bf00      	nop
 800a334:	20001c48 	.word	0x20001c48

0800a338 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a338:	b480      	push	{r7}
 800a33a:	b083      	sub	sp, #12
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]

}
 800a340:	bf00      	nop
 800a342:	370c      	adds	r7, #12
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr

0800a34c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a34c:	b480      	push	{r7}
 800a34e:	b085      	sub	sp, #20
 800a350:	af00      	add	r7, sp, #0
 800a352:	4603      	mov	r3, r0
 800a354:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a356:	2300      	movs	r3, #0
 800a358:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a35a:	79fb      	ldrb	r3, [r7, #7]
 800a35c:	2b03      	cmp	r3, #3
 800a35e:	d817      	bhi.n	800a390 <USBD_Get_USB_Status+0x44>
 800a360:	a201      	add	r2, pc, #4	; (adr r2, 800a368 <USBD_Get_USB_Status+0x1c>)
 800a362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a366:	bf00      	nop
 800a368:	0800a379 	.word	0x0800a379
 800a36c:	0800a37f 	.word	0x0800a37f
 800a370:	0800a385 	.word	0x0800a385
 800a374:	0800a38b 	.word	0x0800a38b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a378:	2300      	movs	r3, #0
 800a37a:	73fb      	strb	r3, [r7, #15]
    break;
 800a37c:	e00b      	b.n	800a396 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a37e:	2303      	movs	r3, #3
 800a380:	73fb      	strb	r3, [r7, #15]
    break;
 800a382:	e008      	b.n	800a396 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a384:	2301      	movs	r3, #1
 800a386:	73fb      	strb	r3, [r7, #15]
    break;
 800a388:	e005      	b.n	800a396 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a38a:	2303      	movs	r3, #3
 800a38c:	73fb      	strb	r3, [r7, #15]
    break;
 800a38e:	e002      	b.n	800a396 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a390:	2303      	movs	r3, #3
 800a392:	73fb      	strb	r3, [r7, #15]
    break;
 800a394:	bf00      	nop
  }
  return usb_status;
 800a396:	7bfb      	ldrb	r3, [r7, #15]
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3714      	adds	r7, #20
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr

0800a3a4 <__libc_init_array>:
 800a3a4:	b570      	push	{r4, r5, r6, lr}
 800a3a6:	4d0d      	ldr	r5, [pc, #52]	; (800a3dc <__libc_init_array+0x38>)
 800a3a8:	4c0d      	ldr	r4, [pc, #52]	; (800a3e0 <__libc_init_array+0x3c>)
 800a3aa:	1b64      	subs	r4, r4, r5
 800a3ac:	10a4      	asrs	r4, r4, #2
 800a3ae:	2600      	movs	r6, #0
 800a3b0:	42a6      	cmp	r6, r4
 800a3b2:	d109      	bne.n	800a3c8 <__libc_init_array+0x24>
 800a3b4:	4d0b      	ldr	r5, [pc, #44]	; (800a3e4 <__libc_init_array+0x40>)
 800a3b6:	4c0c      	ldr	r4, [pc, #48]	; (800a3e8 <__libc_init_array+0x44>)
 800a3b8:	f000 f820 	bl	800a3fc <_init>
 800a3bc:	1b64      	subs	r4, r4, r5
 800a3be:	10a4      	asrs	r4, r4, #2
 800a3c0:	2600      	movs	r6, #0
 800a3c2:	42a6      	cmp	r6, r4
 800a3c4:	d105      	bne.n	800a3d2 <__libc_init_array+0x2e>
 800a3c6:	bd70      	pop	{r4, r5, r6, pc}
 800a3c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3cc:	4798      	blx	r3
 800a3ce:	3601      	adds	r6, #1
 800a3d0:	e7ee      	b.n	800a3b0 <__libc_init_array+0xc>
 800a3d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3d6:	4798      	blx	r3
 800a3d8:	3601      	adds	r6, #1
 800a3da:	e7f2      	b.n	800a3c2 <__libc_init_array+0x1e>
 800a3dc:	0800a47c 	.word	0x0800a47c
 800a3e0:	0800a47c 	.word	0x0800a47c
 800a3e4:	0800a47c 	.word	0x0800a47c
 800a3e8:	0800a480 	.word	0x0800a480

0800a3ec <memset>:
 800a3ec:	4402      	add	r2, r0
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d100      	bne.n	800a3f6 <memset+0xa>
 800a3f4:	4770      	bx	lr
 800a3f6:	f803 1b01 	strb.w	r1, [r3], #1
 800a3fa:	e7f9      	b.n	800a3f0 <memset+0x4>

0800a3fc <_init>:
 800a3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3fe:	bf00      	nop
 800a400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a402:	bc08      	pop	{r3}
 800a404:	469e      	mov	lr, r3
 800a406:	4770      	bx	lr

0800a408 <_fini>:
 800a408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a40a:	bf00      	nop
 800a40c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a40e:	bc08      	pop	{r3}
 800a410:	469e      	mov	lr, r3
 800a412:	4770      	bx	lr
