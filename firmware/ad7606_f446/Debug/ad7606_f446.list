
ad7606_f446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000102a8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  08010478  08010478  00020478  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080109ac  080109ac  000302f0  2**0
                  CONTENTS
  4 .ARM          00000008  080109ac  080109ac  000209ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080109b4  080109b4  000302f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080109b4  080109b4  000209b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080109b8  080109b8  000209b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f0  20000000  080109bc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dac  200002f0  08010cac  000302f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000209c  08010cac  0003209c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b462  00000000  00000000  00030320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c21  00000000  00000000  0004b782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016c0  00000000  00000000  0004f3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001538  00000000  00000000  00050a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026411  00000000  00000000  00051fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bf9a  00000000  00000000  000783b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d808f  00000000  00000000  0009434b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016c3da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007618  00000000  00000000  0016c42c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002f0 	.word	0x200002f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08010460 	.word	0x08010460

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002f4 	.word	0x200002f4
 800020c:	08010460 	.word	0x08010460

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <AD7606_RST>:
	HAL_GPIO_WritePin(AD_OS2_GPIO_Port, AD_OS2_Pin, GPIO_PIN_RESET);
}*/


void AD7606_RST(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(AD_RST_GPIO_Port, AD_RST_Pin, GPIO_PIN_SET);
 800103c:	2201      	movs	r2, #1
 800103e:	2104      	movs	r1, #4
 8001040:	4806      	ldr	r0, [pc, #24]	; (800105c <AD7606_RST+0x24>)
 8001042:	f001 fc91 	bl	8002968 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001046:	2001      	movs	r0, #1
 8001048:	f000 fdaa 	bl	8001ba0 <HAL_Delay>
	HAL_GPIO_WritePin(AD_RST_GPIO_Port, AD_RST_Pin, GPIO_PIN_RESET);
 800104c:	2200      	movs	r2, #0
 800104e:	2104      	movs	r1, #4
 8001050:	4802      	ldr	r0, [pc, #8]	; (800105c <AD7606_RST+0x24>)
 8001052:	f001 fc89 	bl	8002968 <HAL_GPIO_WritePin>
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40020800 	.word	0x40020800

08001060 <AD7606_StartReadBytes>:
		__NOP();
	}
	return;
}*/
void AD7606_StartReadBytes(SPI_HandleTypeDef *hspi, int16_t *pDst, uint16_t Length)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	4613      	mov	r3, r2
 800106c:	80fb      	strh	r3, [r7, #6]
	while (HAL_GPIO_ReadPin(AD_BUSY_GPIO_Port, AD_BUSY_Pin) == GPIO_PIN_SET);
 800106e:	bf00      	nop
 8001070:	2110      	movs	r1, #16
 8001072:	4809      	ldr	r0, [pc, #36]	; (8001098 <AD7606_StartReadBytes+0x38>)
 8001074:	f001 fc60 	bl	8002938 <HAL_GPIO_ReadPin>
 8001078:	4603      	mov	r3, r0
 800107a:	2b01      	cmp	r3, #1
 800107c:	d0f8      	beq.n	8001070 <AD7606_StartReadBytes+0x10>
	HAL_Delay(0.000015);
 800107e:	2000      	movs	r0, #0
 8001080:	f000 fd8e 	bl	8001ba0 <HAL_Delay>
	HAL_SPI_Receive_DMA(hspi, (uint8_t*)pDst, Length);
 8001084:	88fb      	ldrh	r3, [r7, #6]
 8001086:	461a      	mov	r2, r3
 8001088:	68b9      	ldr	r1, [r7, #8]
 800108a:	68f8      	ldr	r0, [r7, #12]
 800108c:	f004 f8ea 	bl	8005264 <HAL_SPI_Receive_DMA>
	return;
 8001090:	bf00      	nop

}
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40020800 	.word	0x40020800

0800109c <AD7606_ConvertToVoltage>:

void AD7606_ConvertToVoltage (uint16_t Length, int16_t *pSrc, float *pDst)
{
 800109c:	b590      	push	{r4, r7, lr}
 800109e:	b087      	sub	sp, #28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
 80010a8:	81fb      	strh	r3, [r7, #14]
	uint16_t i;
	for (i = 0; i < Length; i++)
 80010aa:	2300      	movs	r3, #0
 80010ac:	82fb      	strh	r3, [r7, #22]
 80010ae:	e02a      	b.n	8001106 <AD7606_ConvertToVoltage+0x6a>
	{
		pDst[i] = ((float)pSrc[i] * 5.5) / 32768.0;
 80010b0:	8afb      	ldrh	r3, [r7, #22]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	68ba      	ldr	r2, [r7, #8]
 80010b6:	4413      	add	r3, r2
 80010b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010bc:	ee07 3a90 	vmov	s15, r3
 80010c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010c4:	ee17 0a90 	vmov	r0, s15
 80010c8:	f7ff fa5e 	bl	8000588 <__aeabi_f2d>
 80010cc:	f04f 0200 	mov.w	r2, #0
 80010d0:	4b11      	ldr	r3, [pc, #68]	; (8001118 <AD7606_ConvertToVoltage+0x7c>)
 80010d2:	f7ff fab1 	bl	8000638 <__aeabi_dmul>
 80010d6:	4602      	mov	r2, r0
 80010d8:	460b      	mov	r3, r1
 80010da:	4610      	mov	r0, r2
 80010dc:	4619      	mov	r1, r3
 80010de:	f04f 0200 	mov.w	r2, #0
 80010e2:	4b0e      	ldr	r3, [pc, #56]	; (800111c <AD7606_ConvertToVoltage+0x80>)
 80010e4:	f7ff fbd2 	bl	800088c <__aeabi_ddiv>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	4610      	mov	r0, r2
 80010ee:	4619      	mov	r1, r3
 80010f0:	8afb      	ldrh	r3, [r7, #22]
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	18d4      	adds	r4, r2, r3
 80010f8:	f7ff fd96 	bl	8000c28 <__aeabi_d2f>
 80010fc:	4603      	mov	r3, r0
 80010fe:	6023      	str	r3, [r4, #0]
	for (i = 0; i < Length; i++)
 8001100:	8afb      	ldrh	r3, [r7, #22]
 8001102:	3301      	adds	r3, #1
 8001104:	82fb      	strh	r3, [r7, #22]
 8001106:	8afa      	ldrh	r2, [r7, #22]
 8001108:	89fb      	ldrh	r3, [r7, #14]
 800110a:	429a      	cmp	r2, r3
 800110c:	d3d0      	bcc.n	80010b0 <AD7606_ConvertToVoltage+0x14>
		//pDst[i] = ((float)pSrc[i] * 10 * (2.5/4.5)) / 32768.0;
		//pDst[i] = (pSrc[i] * 0.00016954);
	}
	return;
 800110e:	bf00      	nop
}
 8001110:	371c      	adds	r7, #28
 8001112:	46bd      	mov	sp, r7
 8001114:	bd90      	pop	{r4, r7, pc}
 8001116:	bf00      	nop
 8001118:	40160000 	.word	0x40160000
 800111c:	40e00000 	.word	0x40e00000

08001120 <AD7606_CO_START>:


void AD7606_CO_START(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); //Start AD7606 Conversion
 8001124:	2104      	movs	r1, #4
 8001126:	4802      	ldr	r0, [pc, #8]	; (8001130 <AD7606_CO_START+0x10>)
 8001128:	f004 fd48 	bl	8005bbc <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}
 8001130:	200003c4 	.word	0x200003c4

08001134 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800113a:	f000 fcbf 	bl	8001abc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800113e:	f000 f83b 	bl	80011b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001142:	f000 f99f 	bl	8001484 <MX_GPIO_Init>
  MX_DMA_Init();
 8001146:	f000 f97d 	bl	8001444 <MX_DMA_Init>
  MX_TIM2_Init();
 800114a:	f000 f8db 	bl	8001304 <MX_TIM2_Init>
  MX_SPI1_Init();
 800114e:	f000 f8a1 	bl	8001294 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8001152:	f009 ff19 	bl	800af88 <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 8001156:	f000 f94b 	bl	80013f0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //AD7606_OS_SET();
  AD7606_RST();
 800115a:	f7ff ff6d 	bl	8001038 <AD7606_RST>
  AD7606_CO_START();
 800115e:	f7ff ffdf 	bl	8001120 <AD7606_CO_START>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  AD7606_StartReadBytes(&hspi1, bufferi, 8);
 8001162:	2208      	movs	r2, #8
 8001164:	490f      	ldr	r1, [pc, #60]	; (80011a4 <main+0x70>)
 8001166:	4810      	ldr	r0, [pc, #64]	; (80011a8 <main+0x74>)
 8001168:	f7ff ff7a 	bl	8001060 <AD7606_StartReadBytes>
	  AD7606_ConvertToVoltage(8, bufferi, bufferf);
 800116c:	4a0f      	ldr	r2, [pc, #60]	; (80011ac <main+0x78>)
 800116e:	490d      	ldr	r1, [pc, #52]	; (80011a4 <main+0x70>)
 8001170:	2008      	movs	r0, #8
 8001172:	f7ff ff93 	bl	800109c <AD7606_ConvertToVoltage>

	  /*for (int i = 0; i<=7; i++)
	  {

	  }*/
	  uint8_t a[1] = {59};
 8001176:	233b      	movs	r3, #59	; 0x3b
 8001178:	713b      	strb	r3, [r7, #4]
	  HAL_UART_Transmit(&huart2, (uint8_t*)(itoa((int)bufferi[1], tx_data, 10)), 5, 10);
 800117a:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <main+0x70>)
 800117c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001180:	220a      	movs	r2, #10
 8001182:	490b      	ldr	r1, [pc, #44]	; (80011b0 <main+0x7c>)
 8001184:	4618      	mov	r0, r3
 8001186:	f00a fcab 	bl	800bae0 <itoa>
 800118a:	4601      	mov	r1, r0
 800118c:	230a      	movs	r3, #10
 800118e:	2205      	movs	r2, #5
 8001190:	4808      	ldr	r0, [pc, #32]	; (80011b4 <main+0x80>)
 8001192:	f005 fb3e 	bl	8006812 <HAL_UART_Transmit>
	  //HAL_UART_Transmit(&huart2, (uint8_t*)(itoa((int)bufferf[1], tx_data, 10)), 5, 10);
	  HAL_UART_Transmit(&huart2, a, 1, 1);
 8001196:	1d39      	adds	r1, r7, #4
 8001198:	2301      	movs	r3, #1
 800119a:	2201      	movs	r2, #1
 800119c:	4805      	ldr	r0, [pc, #20]	; (80011b4 <main+0x80>)
 800119e:	f005 fb38 	bl	8006812 <HAL_UART_Transmit>
  {
 80011a2:	e7de      	b.n	8001162 <main+0x2e>
 80011a4:	20000000 	.word	0x20000000
 80011a8:	2000030c 	.word	0x2000030c
 80011ac:	20000450 	.word	0x20000450
 80011b0:	20000470 	.word	0x20000470
 80011b4:	2000040c 	.word	0x2000040c

080011b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b094      	sub	sp, #80	; 0x50
 80011bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011be:	f107 031c 	add.w	r3, r7, #28
 80011c2:	2234      	movs	r2, #52	; 0x34
 80011c4:	2100      	movs	r1, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f00a fc8c 	bl	800bae4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011cc:	f107 0308 	add.w	r3, r7, #8
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011dc:	2300      	movs	r3, #0
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	4b2a      	ldr	r3, [pc, #168]	; (800128c <SystemClock_Config+0xd4>)
 80011e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e4:	4a29      	ldr	r2, [pc, #164]	; (800128c <SystemClock_Config+0xd4>)
 80011e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ea:	6413      	str	r3, [r2, #64]	; 0x40
 80011ec:	4b27      	ldr	r3, [pc, #156]	; (800128c <SystemClock_Config+0xd4>)
 80011ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f4:	607b      	str	r3, [r7, #4]
 80011f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011f8:	2300      	movs	r3, #0
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	4b24      	ldr	r3, [pc, #144]	; (8001290 <SystemClock_Config+0xd8>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001204:	4a22      	ldr	r2, [pc, #136]	; (8001290 <SystemClock_Config+0xd8>)
 8001206:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800120a:	6013      	str	r3, [r2, #0]
 800120c:	4b20      	ldr	r3, [pc, #128]	; (8001290 <SystemClock_Config+0xd8>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001214:	603b      	str	r3, [r7, #0]
 8001216:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001218:	2301      	movs	r3, #1
 800121a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800121c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001220:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001222:	2302      	movs	r3, #2
 8001224:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001226:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800122a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800122c:	2308      	movs	r3, #8
 800122e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001230:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001234:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001236:	2304      	movs	r3, #4
 8001238:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800123a:	2307      	movs	r3, #7
 800123c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800123e:	2302      	movs	r3, #2
 8001240:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001242:	f107 031c 	add.w	r3, r7, #28
 8001246:	4618      	mov	r0, r3
 8001248:	f003 fce4 	bl	8004c14 <HAL_RCC_OscConfig>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001252:	f000 f997 	bl	8001584 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001256:	230f      	movs	r3, #15
 8001258:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800125a:	2302      	movs	r3, #2
 800125c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001262:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001266:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001268:	2300      	movs	r3, #0
 800126a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800126c:	f107 0308 	add.w	r3, r7, #8
 8001270:	2102      	movs	r1, #2
 8001272:	4618      	mov	r0, r3
 8001274:	f002 fe5a 	bl	8003f2c <HAL_RCC_ClockConfig>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800127e:	f000 f981 	bl	8001584 <Error_Handler>
  }
}
 8001282:	bf00      	nop
 8001284:	3750      	adds	r7, #80	; 0x50
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40023800 	.word	0x40023800
 8001290:	40007000 	.word	0x40007000

08001294 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001298:	4b18      	ldr	r3, [pc, #96]	; (80012fc <MX_SPI1_Init+0x68>)
 800129a:	4a19      	ldr	r2, [pc, #100]	; (8001300 <MX_SPI1_Init+0x6c>)
 800129c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800129e:	4b17      	ldr	r3, [pc, #92]	; (80012fc <MX_SPI1_Init+0x68>)
 80012a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80012a6:	4b15      	ldr	r3, [pc, #84]	; (80012fc <MX_SPI1_Init+0x68>)
 80012a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012ac:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80012ae:	4b13      	ldr	r3, [pc, #76]	; (80012fc <MX_SPI1_Init+0x68>)
 80012b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80012b6:	4b11      	ldr	r3, [pc, #68]	; (80012fc <MX_SPI1_Init+0x68>)
 80012b8:	2202      	movs	r2, #2
 80012ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80012bc:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <MX_SPI1_Init+0x68>)
 80012be:	2201      	movs	r2, #1
 80012c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80012c2:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <MX_SPI1_Init+0x68>)
 80012c4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80012c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80012ca:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <MX_SPI1_Init+0x68>)
 80012cc:	2210      	movs	r2, #16
 80012ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012d0:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <MX_SPI1_Init+0x68>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012d6:	4b09      	ldr	r3, [pc, #36]	; (80012fc <MX_SPI1_Init+0x68>)
 80012d8:	2200      	movs	r2, #0
 80012da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012dc:	4b07      	ldr	r3, [pc, #28]	; (80012fc <MX_SPI1_Init+0x68>)
 80012de:	2200      	movs	r2, #0
 80012e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012e2:	4b06      	ldr	r3, [pc, #24]	; (80012fc <MX_SPI1_Init+0x68>)
 80012e4:	220a      	movs	r2, #10
 80012e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012e8:	4804      	ldr	r0, [pc, #16]	; (80012fc <MX_SPI1_Init+0x68>)
 80012ea:	f003 ff31 	bl	8005150 <HAL_SPI_Init>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 80012f4:	f000 f946 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	2000030c 	.word	0x2000030c
 8001300:	40013000 	.word	0x40013000

08001304 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08e      	sub	sp, #56	; 0x38
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001318:	f107 0320 	add.w	r3, r7, #32
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
 8001330:	615a      	str	r2, [r3, #20]
 8001332:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */


  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001334:	4b2d      	ldr	r3, [pc, #180]	; (80013ec <MX_TIM2_Init+0xe8>)
 8001336:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800133a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840;
 800133c:	4b2b      	ldr	r3, [pc, #172]	; (80013ec <MX_TIM2_Init+0xe8>)
 800133e:	f44f 7252 	mov.w	r2, #840	; 0x348
 8001342:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001344:	4b29      	ldr	r3, [pc, #164]	; (80013ec <MX_TIM2_Init+0xe8>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800134a:	4b28      	ldr	r3, [pc, #160]	; (80013ec <MX_TIM2_Init+0xe8>)
 800134c:	2263      	movs	r2, #99	; 0x63
 800134e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001350:	4b26      	ldr	r3, [pc, #152]	; (80013ec <MX_TIM2_Init+0xe8>)
 8001352:	2200      	movs	r2, #0
 8001354:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001356:	4b25      	ldr	r3, [pc, #148]	; (80013ec <MX_TIM2_Init+0xe8>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800135c:	4823      	ldr	r0, [pc, #140]	; (80013ec <MX_TIM2_Init+0xe8>)
 800135e:	f004 fb85 	bl	8005a6c <HAL_TIM_Base_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001368:	f000 f90c 	bl	8001584 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800136c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001370:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001372:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001376:	4619      	mov	r1, r3
 8001378:	481c      	ldr	r0, [pc, #112]	; (80013ec <MX_TIM2_Init+0xe8>)
 800137a:	f004 fda9 	bl	8005ed0 <HAL_TIM_ConfigClockSource>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001384:	f000 f8fe 	bl	8001584 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001388:	4818      	ldr	r0, [pc, #96]	; (80013ec <MX_TIM2_Init+0xe8>)
 800138a:	f004 fbbe 	bl	8005b0a <HAL_TIM_PWM_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001394:	f000 f8f6 	bl	8001584 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001398:	2300      	movs	r3, #0
 800139a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800139c:	2300      	movs	r3, #0
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013a0:	f107 0320 	add.w	r3, r7, #32
 80013a4:	4619      	mov	r1, r3
 80013a6:	4811      	ldr	r0, [pc, #68]	; (80013ec <MX_TIM2_Init+0xe8>)
 80013a8:	f005 f96a 	bl	8006680 <HAL_TIMEx_MasterConfigSynchronization>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80013b2:	f000 f8e7 	bl	8001584 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013b6:	2360      	movs	r3, #96	; 0x60
 80013b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 97;
 80013ba:	2361      	movs	r3, #97	; 0x61
 80013bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013c6:	1d3b      	adds	r3, r7, #4
 80013c8:	2204      	movs	r2, #4
 80013ca:	4619      	mov	r1, r3
 80013cc:	4807      	ldr	r0, [pc, #28]	; (80013ec <MX_TIM2_Init+0xe8>)
 80013ce:	f004 fcbd 	bl	8005d4c <HAL_TIM_PWM_ConfigChannel>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80013d8:	f000 f8d4 	bl	8001584 <Error_Handler>
  /* USER CODE BEGIN TIM2_Init 2 */



  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013dc:	4803      	ldr	r0, [pc, #12]	; (80013ec <MX_TIM2_Init+0xe8>)
 80013de:	f000 f99b 	bl	8001718 <HAL_TIM_MspPostInit>

}
 80013e2:	bf00      	nop
 80013e4:	3738      	adds	r7, #56	; 0x38
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	200003c4 	.word	0x200003c4

080013f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <MX_USART2_UART_Init+0x4c>)
 80013f6:	4a12      	ldr	r2, [pc, #72]	; (8001440 <MX_USART2_UART_Init+0x50>)
 80013f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013fa:	4b10      	ldr	r3, [pc, #64]	; (800143c <MX_USART2_UART_Init+0x4c>)
 80013fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001400:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001402:	4b0e      	ldr	r3, [pc, #56]	; (800143c <MX_USART2_UART_Init+0x4c>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001408:	4b0c      	ldr	r3, [pc, #48]	; (800143c <MX_USART2_UART_Init+0x4c>)
 800140a:	2200      	movs	r2, #0
 800140c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800140e:	4b0b      	ldr	r3, [pc, #44]	; (800143c <MX_USART2_UART_Init+0x4c>)
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001414:	4b09      	ldr	r3, [pc, #36]	; (800143c <MX_USART2_UART_Init+0x4c>)
 8001416:	220c      	movs	r2, #12
 8001418:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800141a:	4b08      	ldr	r3, [pc, #32]	; (800143c <MX_USART2_UART_Init+0x4c>)
 800141c:	2200      	movs	r2, #0
 800141e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001420:	4b06      	ldr	r3, [pc, #24]	; (800143c <MX_USART2_UART_Init+0x4c>)
 8001422:	2200      	movs	r2, #0
 8001424:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001426:	4805      	ldr	r0, [pc, #20]	; (800143c <MX_USART2_UART_Init+0x4c>)
 8001428:	f005 f9a6 	bl	8006778 <HAL_UART_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001432:	f000 f8a7 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	2000040c 	.word	0x2000040c
 8001440:	40004400 	.word	0x40004400

08001444 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	607b      	str	r3, [r7, #4]
 800144e:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <MX_DMA_Init+0x3c>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a0b      	ldr	r2, [pc, #44]	; (8001480 <MX_DMA_Init+0x3c>)
 8001454:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b09      	ldr	r3, [pc, #36]	; (8001480 <MX_DMA_Init+0x3c>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001462:	607b      	str	r3, [r7, #4]
 8001464:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	2100      	movs	r1, #0
 800146a:	2038      	movs	r0, #56	; 0x38
 800146c:	f000 fc97 	bl	8001d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001470:	2038      	movs	r0, #56	; 0x38
 8001472:	f000 fcb0 	bl	8001dd6 <HAL_NVIC_EnableIRQ>

}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40023800 	.word	0x40023800

08001484 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	; 0x28
 8001488:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148a:	f107 0314 	add.w	r3, r7, #20
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
 8001498:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	613b      	str	r3, [r7, #16]
 800149e:	4b36      	ldr	r3, [pc, #216]	; (8001578 <MX_GPIO_Init+0xf4>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a35      	ldr	r2, [pc, #212]	; (8001578 <MX_GPIO_Init+0xf4>)
 80014a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b33      	ldr	r3, [pc, #204]	; (8001578 <MX_GPIO_Init+0xf4>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014b2:	613b      	str	r3, [r7, #16]
 80014b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	4b2f      	ldr	r3, [pc, #188]	; (8001578 <MX_GPIO_Init+0xf4>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a2e      	ldr	r2, [pc, #184]	; (8001578 <MX_GPIO_Init+0xf4>)
 80014c0:	f043 0304 	orr.w	r3, r3, #4
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b2c      	ldr	r3, [pc, #176]	; (8001578 <MX_GPIO_Init+0xf4>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0304 	and.w	r3, r3, #4
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	4b28      	ldr	r3, [pc, #160]	; (8001578 <MX_GPIO_Init+0xf4>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a27      	ldr	r2, [pc, #156]	; (8001578 <MX_GPIO_Init+0xf4>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b25      	ldr	r3, [pc, #148]	; (8001578 <MX_GPIO_Init+0xf4>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	60bb      	str	r3, [r7, #8]
 80014ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	607b      	str	r3, [r7, #4]
 80014f2:	4b21      	ldr	r3, [pc, #132]	; (8001578 <MX_GPIO_Init+0xf4>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a20      	ldr	r2, [pc, #128]	; (8001578 <MX_GPIO_Init+0xf4>)
 80014f8:	f043 0302 	orr.w	r3, r3, #2
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b1e      	ldr	r3, [pc, #120]	; (8001578 <MX_GPIO_Init+0xf4>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	607b      	str	r3, [r7, #4]
 8001508:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD_RST_Pin|AD_OS2_Pin, GPIO_PIN_RESET);
 800150a:	2200      	movs	r2, #0
 800150c:	210c      	movs	r1, #12
 800150e:	481b      	ldr	r0, [pc, #108]	; (800157c <MX_GPIO_Init+0xf8>)
 8001510:	f001 fa2a 	bl	8002968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AD_OS1_Pin|AD_OS0_Pin, GPIO_PIN_RESET);
 8001514:	2200      	movs	r2, #0
 8001516:	2103      	movs	r1, #3
 8001518:	4819      	ldr	r0, [pc, #100]	; (8001580 <MX_GPIO_Init+0xfc>)
 800151a:	f001 fa25 	bl	8002968 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : AD_RST_Pin AD_OS2_Pin */
  GPIO_InitStruct.Pin = AD_RST_Pin|AD_OS2_Pin;
 800151e:	230c      	movs	r3, #12
 8001520:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001522:	2301      	movs	r3, #1
 8001524:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152a:	2300      	movs	r3, #0
 800152c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800152e:	f107 0314 	add.w	r3, r7, #20
 8001532:	4619      	mov	r1, r3
 8001534:	4811      	ldr	r0, [pc, #68]	; (800157c <MX_GPIO_Init+0xf8>)
 8001536:	f001 f86b 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD_OS1_Pin AD_OS0_Pin */
  GPIO_InitStruct.Pin = AD_OS1_Pin|AD_OS0_Pin;
 800153a:	2303      	movs	r3, #3
 800153c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153e:	2301      	movs	r3, #1
 8001540:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001546:	2300      	movs	r3, #0
 8001548:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	4619      	mov	r1, r3
 8001550:	480b      	ldr	r0, [pc, #44]	; (8001580 <MX_GPIO_Init+0xfc>)
 8001552:	f001 f85d 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD_BUSY_Pin AD_FRST_Pin */
  GPIO_InitStruct.Pin = AD_BUSY_Pin|AD_FRST_Pin;
 8001556:	2330      	movs	r3, #48	; 0x30
 8001558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800155a:	2300      	movs	r3, #0
 800155c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001562:	f107 0314 	add.w	r3, r7, #20
 8001566:	4619      	mov	r1, r3
 8001568:	4804      	ldr	r0, [pc, #16]	; (800157c <MX_GPIO_Init+0xf8>)
 800156a:	f001 f851 	bl	8002610 <HAL_GPIO_Init>

}
 800156e:	bf00      	nop
 8001570:	3728      	adds	r7, #40	; 0x28
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40023800 	.word	0x40023800
 800157c:	40020800 	.word	0x40020800
 8001580:	40020000 	.word	0x40020000

08001584 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001588:	b672      	cpsid	i
}
 800158a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800158c:	e7fe      	b.n	800158c <Error_Handler+0x8>
	...

08001590 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	607b      	str	r3, [r7, #4]
 800159a:	4b10      	ldr	r3, [pc, #64]	; (80015dc <HAL_MspInit+0x4c>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159e:	4a0f      	ldr	r2, [pc, #60]	; (80015dc <HAL_MspInit+0x4c>)
 80015a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015a4:	6453      	str	r3, [r2, #68]	; 0x44
 80015a6:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <HAL_MspInit+0x4c>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	603b      	str	r3, [r7, #0]
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <HAL_MspInit+0x4c>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	4a08      	ldr	r2, [pc, #32]	; (80015dc <HAL_MspInit+0x4c>)
 80015bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c0:	6413      	str	r3, [r2, #64]	; 0x40
 80015c2:	4b06      	ldr	r3, [pc, #24]	; (80015dc <HAL_MspInit+0x4c>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ca:	603b      	str	r3, [r7, #0]
 80015cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	40023800 	.word	0x40023800

080015e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08a      	sub	sp, #40	; 0x28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a31      	ldr	r2, [pc, #196]	; (80016c4 <HAL_SPI_MspInit+0xe4>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d15b      	bne.n	80016ba <HAL_SPI_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	613b      	str	r3, [r7, #16]
 8001606:	4b30      	ldr	r3, [pc, #192]	; (80016c8 <HAL_SPI_MspInit+0xe8>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160a:	4a2f      	ldr	r2, [pc, #188]	; (80016c8 <HAL_SPI_MspInit+0xe8>)
 800160c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001610:	6453      	str	r3, [r2, #68]	; 0x44
 8001612:	4b2d      	ldr	r3, [pc, #180]	; (80016c8 <HAL_SPI_MspInit+0xe8>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001616:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800161a:	613b      	str	r3, [r7, #16]
 800161c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	4b29      	ldr	r3, [pc, #164]	; (80016c8 <HAL_SPI_MspInit+0xe8>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4a28      	ldr	r2, [pc, #160]	; (80016c8 <HAL_SPI_MspInit+0xe8>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b26      	ldr	r3, [pc, #152]	; (80016c8 <HAL_SPI_MspInit+0xe8>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = AD_CS_Pin|AD_SCK_Pin|AD_DOU_A_Pin;
 800163a:	2370      	movs	r3, #112	; 0x70
 800163c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163e:	2302      	movs	r3, #2
 8001640:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001646:	2301      	movs	r3, #1
 8001648:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800164a:	2305      	movs	r3, #5
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164e:	f107 0314 	add.w	r3, r7, #20
 8001652:	4619      	mov	r1, r3
 8001654:	481d      	ldr	r0, [pc, #116]	; (80016cc <HAL_SPI_MspInit+0xec>)
 8001656:	f000 ffdb 	bl	8002610 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 800165a:	4b1d      	ldr	r3, [pc, #116]	; (80016d0 <HAL_SPI_MspInit+0xf0>)
 800165c:	4a1d      	ldr	r2, [pc, #116]	; (80016d4 <HAL_SPI_MspInit+0xf4>)
 800165e:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001660:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <HAL_SPI_MspInit+0xf0>)
 8001662:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001666:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001668:	4b19      	ldr	r3, [pc, #100]	; (80016d0 <HAL_SPI_MspInit+0xf0>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800166e:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <HAL_SPI_MspInit+0xf0>)
 8001670:	2200      	movs	r2, #0
 8001672:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001674:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <HAL_SPI_MspInit+0xf0>)
 8001676:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800167a:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800167c:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <HAL_SPI_MspInit+0xf0>)
 800167e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001682:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <HAL_SPI_MspInit+0xf0>)
 8001686:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800168a:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800168c:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <HAL_SPI_MspInit+0xf0>)
 800168e:	2200      	movs	r2, #0
 8001690:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001692:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <HAL_SPI_MspInit+0xf0>)
 8001694:	2200      	movs	r2, #0
 8001696:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001698:	4b0d      	ldr	r3, [pc, #52]	; (80016d0 <HAL_SPI_MspInit+0xf0>)
 800169a:	2200      	movs	r2, #0
 800169c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800169e:	480c      	ldr	r0, [pc, #48]	; (80016d0 <HAL_SPI_MspInit+0xf0>)
 80016a0:	f000 fbb4 	bl	8001e0c <HAL_DMA_Init>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 80016aa:	f7ff ff6b 	bl	8001584 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a07      	ldr	r2, [pc, #28]	; (80016d0 <HAL_SPI_MspInit+0xf0>)
 80016b2:	64da      	str	r2, [r3, #76]	; 0x4c
 80016b4:	4a06      	ldr	r2, [pc, #24]	; (80016d0 <HAL_SPI_MspInit+0xf0>)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80016ba:	bf00      	nop
 80016bc:	3728      	adds	r7, #40	; 0x28
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40013000 	.word	0x40013000
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40020000 	.word	0x40020000
 80016d0:	20000364 	.word	0x20000364
 80016d4:	40026410 	.word	0x40026410

080016d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016e8:	d10d      	bne.n	8001706 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	4b09      	ldr	r3, [pc, #36]	; (8001714 <HAL_TIM_Base_MspInit+0x3c>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	4a08      	ldr	r2, [pc, #32]	; (8001714 <HAL_TIM_Base_MspInit+0x3c>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	6413      	str	r3, [r2, #64]	; 0x40
 80016fa:	4b06      	ldr	r3, [pc, #24]	; (8001714 <HAL_TIM_Base_MspInit+0x3c>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001706:	bf00      	nop
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	40023800 	.word	0x40023800

08001718 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b088      	sub	sp, #32
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001720:	f107 030c 	add.w	r3, r7, #12
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001738:	d11d      	bne.n	8001776 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	60bb      	str	r3, [r7, #8]
 800173e:	4b10      	ldr	r3, [pc, #64]	; (8001780 <HAL_TIM_MspPostInit+0x68>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a0f      	ldr	r2, [pc, #60]	; (8001780 <HAL_TIM_MspPostInit+0x68>)
 8001744:	f043 0302 	orr.w	r3, r3, #2
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <HAL_TIM_MspPostInit+0x68>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	60bb      	str	r3, [r7, #8]
 8001754:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = AD_CO_A_Pin;
 8001756:	2308      	movs	r3, #8
 8001758:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175a:	2302      	movs	r3, #2
 800175c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001762:	2301      	movs	r3, #1
 8001764:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001766:	2301      	movs	r3, #1
 8001768:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AD_CO_A_GPIO_Port, &GPIO_InitStruct);
 800176a:	f107 030c 	add.w	r3, r7, #12
 800176e:	4619      	mov	r1, r3
 8001770:	4804      	ldr	r0, [pc, #16]	; (8001784 <HAL_TIM_MspPostInit+0x6c>)
 8001772:	f000 ff4d 	bl	8002610 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001776:	bf00      	nop
 8001778:	3720      	adds	r7, #32
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40023800 	.word	0x40023800
 8001784:	40020400 	.word	0x40020400

08001788 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08a      	sub	sp, #40	; 0x28
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001790:	f107 0314 	add.w	r3, r7, #20
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a1d      	ldr	r2, [pc, #116]	; (800181c <HAL_UART_MspInit+0x94>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d133      	bne.n	8001812 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	613b      	str	r3, [r7, #16]
 80017ae:	4b1c      	ldr	r3, [pc, #112]	; (8001820 <HAL_UART_MspInit+0x98>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	4a1b      	ldr	r2, [pc, #108]	; (8001820 <HAL_UART_MspInit+0x98>)
 80017b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ba:	4b19      	ldr	r3, [pc, #100]	; (8001820 <HAL_UART_MspInit+0x98>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c2:	613b      	str	r3, [r7, #16]
 80017c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	4b15      	ldr	r3, [pc, #84]	; (8001820 <HAL_UART_MspInit+0x98>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a14      	ldr	r2, [pc, #80]	; (8001820 <HAL_UART_MspInit+0x98>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b12      	ldr	r3, [pc, #72]	; (8001820 <HAL_UART_MspInit+0x98>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017e2:	230c      	movs	r3, #12
 80017e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e6:	2302      	movs	r3, #2
 80017e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ee:	2303      	movs	r3, #3
 80017f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017f2:	2307      	movs	r3, #7
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f6:	f107 0314 	add.w	r3, r7, #20
 80017fa:	4619      	mov	r1, r3
 80017fc:	4809      	ldr	r0, [pc, #36]	; (8001824 <HAL_UART_MspInit+0x9c>)
 80017fe:	f000 ff07 	bl	8002610 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001802:	2200      	movs	r2, #0
 8001804:	2100      	movs	r1, #0
 8001806:	2026      	movs	r0, #38	; 0x26
 8001808:	f000 fac9 	bl	8001d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800180c:	2026      	movs	r0, #38	; 0x26
 800180e:	f000 fae2 	bl	8001dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001812:	bf00      	nop
 8001814:	3728      	adds	r7, #40	; 0x28
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40004400 	.word	0x40004400
 8001820:	40023800 	.word	0x40023800
 8001824:	40020000 	.word	0x40020000

08001828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800182c:	e7fe      	b.n	800182c <NMI_Handler+0x4>

0800182e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001832:	e7fe      	b.n	8001832 <HardFault_Handler+0x4>

08001834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001838:	e7fe      	b.n	8001838 <MemManage_Handler+0x4>

0800183a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800183a:	b480      	push	{r7}
 800183c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800183e:	e7fe      	b.n	800183e <BusFault_Handler+0x4>

08001840 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001844:	e7fe      	b.n	8001844 <UsageFault_Handler+0x4>

08001846 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001874:	f000 f974 	bl	8001b60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001878:	bf00      	nop
 800187a:	bd80      	pop	{r7, pc}

0800187c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001880:	4802      	ldr	r0, [pc, #8]	; (800188c <USART2_IRQHandler+0x10>)
 8001882:	f005 f859 	bl	8006938 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	2000040c 	.word	0x2000040c

08001890 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001894:	4802      	ldr	r0, [pc, #8]	; (80018a0 <DMA2_Stream0_IRQHandler+0x10>)
 8001896:	f000 fc51 	bl	800213c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000364 	.word	0x20000364

080018a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80018a8:	4802      	ldr	r0, [pc, #8]	; (80018b4 <OTG_FS_IRQHandler+0x10>)
 80018aa:	f001 f9cd 	bl	8002c48 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20001960 	.word	0x20001960

080018b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
	return 1;
 80018bc:	2301      	movs	r3, #1
}
 80018be:	4618      	mov	r0, r3
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <_kill>:

int _kill(int pid, int sig)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018d2:	f00a f8c3 	bl	800ba5c <__errno>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2216      	movs	r2, #22
 80018da:	601a      	str	r2, [r3, #0]
	return -1;
 80018dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <_exit>:

void _exit (int status)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018f0:	f04f 31ff 	mov.w	r1, #4294967295
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7ff ffe7 	bl	80018c8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80018fa:	e7fe      	b.n	80018fa <_exit+0x12>

080018fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	e00a      	b.n	8001924 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800190e:	f3af 8000 	nop.w
 8001912:	4601      	mov	r1, r0
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	1c5a      	adds	r2, r3, #1
 8001918:	60ba      	str	r2, [r7, #8]
 800191a:	b2ca      	uxtb	r2, r1
 800191c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	3301      	adds	r3, #1
 8001922:	617b      	str	r3, [r7, #20]
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	429a      	cmp	r2, r3
 800192a:	dbf0      	blt.n	800190e <_read+0x12>
	}

return len;
 800192c:	687b      	ldr	r3, [r7, #4]
}
 800192e:	4618      	mov	r0, r3
 8001930:	3718      	adds	r7, #24
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b086      	sub	sp, #24
 800193a:	af00      	add	r7, sp, #0
 800193c:	60f8      	str	r0, [r7, #12]
 800193e:	60b9      	str	r1, [r7, #8]
 8001940:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
 8001946:	e009      	b.n	800195c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	1c5a      	adds	r2, r3, #1
 800194c:	60ba      	str	r2, [r7, #8]
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	3301      	adds	r3, #1
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	697a      	ldr	r2, [r7, #20]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	429a      	cmp	r2, r3
 8001962:	dbf1      	blt.n	8001948 <_write+0x12>
	}
	return len;
 8001964:	687b      	ldr	r3, [r7, #4]
}
 8001966:	4618      	mov	r0, r3
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <_close>:

int _close(int file)
{
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
	return -1;
 8001976:	f04f 33ff 	mov.w	r3, #4294967295
}
 800197a:	4618      	mov	r0, r3
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001986:	b480      	push	{r7}
 8001988:	b083      	sub	sp, #12
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
 800198e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001996:	605a      	str	r2, [r3, #4]
	return 0;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <_isatty>:

int _isatty(int file)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
	return 1;
 80019ae:	2301      	movs	r3, #1
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
	return 0;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
	...

080019d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019e0:	4a14      	ldr	r2, [pc, #80]	; (8001a34 <_sbrk+0x5c>)
 80019e2:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <_sbrk+0x60>)
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019ec:	4b13      	ldr	r3, [pc, #76]	; (8001a3c <_sbrk+0x64>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d102      	bne.n	80019fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019f4:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <_sbrk+0x64>)
 80019f6:	4a12      	ldr	r2, [pc, #72]	; (8001a40 <_sbrk+0x68>)
 80019f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019fa:	4b10      	ldr	r3, [pc, #64]	; (8001a3c <_sbrk+0x64>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4413      	add	r3, r2
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d207      	bcs.n	8001a18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a08:	f00a f828 	bl	800ba5c <__errno>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	220c      	movs	r2, #12
 8001a10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a12:	f04f 33ff 	mov.w	r3, #4294967295
 8001a16:	e009      	b.n	8001a2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a18:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <_sbrk+0x64>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a1e:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <_sbrk+0x64>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4413      	add	r3, r2
 8001a26:	4a05      	ldr	r2, [pc, #20]	; (8001a3c <_sbrk+0x64>)
 8001a28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3718      	adds	r7, #24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20020000 	.word	0x20020000
 8001a38:	00000400 	.word	0x00000400
 8001a3c:	20000478 	.word	0x20000478
 8001a40:	200020a0 	.word	0x200020a0

08001a44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a48:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <SystemInit+0x20>)
 8001a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a4e:	4a05      	ldr	r2, [pc, #20]	; (8001a64 <SystemInit+0x20>)
 8001a50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001aa0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a6c:	480d      	ldr	r0, [pc, #52]	; (8001aa4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a6e:	490e      	ldr	r1, [pc, #56]	; (8001aa8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a70:	4a0e      	ldr	r2, [pc, #56]	; (8001aac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a74:	e002      	b.n	8001a7c <LoopCopyDataInit>

08001a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a7a:	3304      	adds	r3, #4

08001a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a80:	d3f9      	bcc.n	8001a76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a82:	4a0b      	ldr	r2, [pc, #44]	; (8001ab0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a84:	4c0b      	ldr	r4, [pc, #44]	; (8001ab4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a88:	e001      	b.n	8001a8e <LoopFillZerobss>

08001a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a8c:	3204      	adds	r2, #4

08001a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a90:	d3fb      	bcc.n	8001a8a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a92:	f7ff ffd7 	bl	8001a44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a96:	f009 ffe7 	bl	800ba68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a9a:	f7ff fb4b 	bl	8001134 <main>
  bx  lr    
 8001a9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001aa0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aa8:	200002f0 	.word	0x200002f0
  ldr r2, =_sidata
 8001aac:	080109bc 	.word	0x080109bc
  ldr r2, =_sbss
 8001ab0:	200002f0 	.word	0x200002f0
  ldr r4, =_ebss
 8001ab4:	2000209c 	.word	0x2000209c

08001ab8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ab8:	e7fe      	b.n	8001ab8 <ADC_IRQHandler>
	...

08001abc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ac0:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <HAL_Init+0x40>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a0d      	ldr	r2, [pc, #52]	; (8001afc <HAL_Init+0x40>)
 8001ac6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001acc:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <HAL_Init+0x40>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a0a      	ldr	r2, [pc, #40]	; (8001afc <HAL_Init+0x40>)
 8001ad2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ad6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ad8:	4b08      	ldr	r3, [pc, #32]	; (8001afc <HAL_Init+0x40>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a07      	ldr	r2, [pc, #28]	; (8001afc <HAL_Init+0x40>)
 8001ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ae4:	2003      	movs	r0, #3
 8001ae6:	f000 f94f 	bl	8001d88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aea:	200f      	movs	r0, #15
 8001aec:	f000 f808 	bl	8001b00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001af0:	f7ff fd4e 	bl	8001590 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40023c00 	.word	0x40023c00

08001b00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b08:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <HAL_InitTick+0x54>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <HAL_InitTick+0x58>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	4619      	mov	r1, r3
 8001b12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f000 f967 	bl	8001df2 <HAL_SYSTICK_Config>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e00e      	b.n	8001b4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b0f      	cmp	r3, #15
 8001b32:	d80a      	bhi.n	8001b4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b34:	2200      	movs	r2, #0
 8001b36:	6879      	ldr	r1, [r7, #4]
 8001b38:	f04f 30ff 	mov.w	r0, #4294967295
 8001b3c:	f000 f92f 	bl	8001d9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b40:	4a06      	ldr	r2, [pc, #24]	; (8001b5c <HAL_InitTick+0x5c>)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
 8001b48:	e000      	b.n	8001b4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	20000010 	.word	0x20000010
 8001b58:	20000018 	.word	0x20000018
 8001b5c:	20000014 	.word	0x20000014

08001b60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b64:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <HAL_IncTick+0x20>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <HAL_IncTick+0x24>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4413      	add	r3, r2
 8001b70:	4a04      	ldr	r2, [pc, #16]	; (8001b84 <HAL_IncTick+0x24>)
 8001b72:	6013      	str	r3, [r2, #0]
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	20000018 	.word	0x20000018
 8001b84:	2000047c 	.word	0x2000047c

08001b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b8c:	4b03      	ldr	r3, [pc, #12]	; (8001b9c <HAL_GetTick+0x14>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	2000047c 	.word	0x2000047c

08001ba0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ba8:	f7ff ffee 	bl	8001b88 <HAL_GetTick>
 8001bac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb8:	d005      	beq.n	8001bc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bba:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <HAL_Delay+0x44>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bc6:	bf00      	nop
 8001bc8:	f7ff ffde 	bl	8001b88 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d8f7      	bhi.n	8001bc8 <HAL_Delay+0x28>
  {
  }
}
 8001bd8:	bf00      	nop
 8001bda:	bf00      	nop
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000018 	.word	0x20000018

08001be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <__NVIC_SetPriorityGrouping+0x44>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c04:	4013      	ands	r3, r2
 8001c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c1a:	4a04      	ldr	r2, [pc, #16]	; (8001c2c <__NVIC_SetPriorityGrouping+0x44>)
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	60d3      	str	r3, [r2, #12]
}
 8001c20:	bf00      	nop
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c34:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <__NVIC_GetPriorityGrouping+0x18>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	0a1b      	lsrs	r3, r3, #8
 8001c3a:	f003 0307 	and.w	r3, r3, #7
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	db0b      	blt.n	8001c76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	f003 021f 	and.w	r2, r3, #31
 8001c64:	4907      	ldr	r1, [pc, #28]	; (8001c84 <__NVIC_EnableIRQ+0x38>)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	095b      	lsrs	r3, r3, #5
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	e000e100 	.word	0xe000e100

08001c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	6039      	str	r1, [r7, #0]
 8001c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	db0a      	blt.n	8001cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	490c      	ldr	r1, [pc, #48]	; (8001cd4 <__NVIC_SetPriority+0x4c>)
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	0112      	lsls	r2, r2, #4
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	440b      	add	r3, r1
 8001cac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb0:	e00a      	b.n	8001cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	4908      	ldr	r1, [pc, #32]	; (8001cd8 <__NVIC_SetPriority+0x50>)
 8001cb8:	79fb      	ldrb	r3, [r7, #7]
 8001cba:	f003 030f 	and.w	r3, r3, #15
 8001cbe:	3b04      	subs	r3, #4
 8001cc0:	0112      	lsls	r2, r2, #4
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	440b      	add	r3, r1
 8001cc6:	761a      	strb	r2, [r3, #24]
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	e000e100 	.word	0xe000e100
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b089      	sub	sp, #36	; 0x24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	f1c3 0307 	rsb	r3, r3, #7
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	bf28      	it	cs
 8001cfa:	2304      	movcs	r3, #4
 8001cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	3304      	adds	r3, #4
 8001d02:	2b06      	cmp	r3, #6
 8001d04:	d902      	bls.n	8001d0c <NVIC_EncodePriority+0x30>
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3b03      	subs	r3, #3
 8001d0a:	e000      	b.n	8001d0e <NVIC_EncodePriority+0x32>
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d10:	f04f 32ff 	mov.w	r2, #4294967295
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43da      	mvns	r2, r3
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	401a      	ands	r2, r3
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d24:	f04f 31ff 	mov.w	r1, #4294967295
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2e:	43d9      	mvns	r1, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d34:	4313      	orrs	r3, r2
         );
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3724      	adds	r7, #36	; 0x24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
	...

08001d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d54:	d301      	bcc.n	8001d5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d56:	2301      	movs	r3, #1
 8001d58:	e00f      	b.n	8001d7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d5a:	4a0a      	ldr	r2, [pc, #40]	; (8001d84 <SysTick_Config+0x40>)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d62:	210f      	movs	r1, #15
 8001d64:	f04f 30ff 	mov.w	r0, #4294967295
 8001d68:	f7ff ff8e 	bl	8001c88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d6c:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <SysTick_Config+0x40>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d72:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <SysTick_Config+0x40>)
 8001d74:	2207      	movs	r2, #7
 8001d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	e000e010 	.word	0xe000e010

08001d88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7ff ff29 	bl	8001be8 <__NVIC_SetPriorityGrouping>
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b086      	sub	sp, #24
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	4603      	mov	r3, r0
 8001da6:	60b9      	str	r1, [r7, #8]
 8001da8:	607a      	str	r2, [r7, #4]
 8001daa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001db0:	f7ff ff3e 	bl	8001c30 <__NVIC_GetPriorityGrouping>
 8001db4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	68b9      	ldr	r1, [r7, #8]
 8001dba:	6978      	ldr	r0, [r7, #20]
 8001dbc:	f7ff ff8e 	bl	8001cdc <NVIC_EncodePriority>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dc6:	4611      	mov	r1, r2
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff ff5d 	bl	8001c88 <__NVIC_SetPriority>
}
 8001dce:	bf00      	nop
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b082      	sub	sp, #8
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	4603      	mov	r3, r0
 8001dde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff ff31 	bl	8001c4c <__NVIC_EnableIRQ>
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff ffa2 	bl	8001d44 <SysTick_Config>
 8001e00:	4603      	mov	r3, r0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
	...

08001e0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e18:	f7ff feb6 	bl	8001b88 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d101      	bne.n	8001e28 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e099      	b.n	8001f5c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 0201 	bic.w	r2, r2, #1
 8001e46:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e48:	e00f      	b.n	8001e6a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e4a:	f7ff fe9d 	bl	8001b88 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b05      	cmp	r3, #5
 8001e56:	d908      	bls.n	8001e6a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2220      	movs	r2, #32
 8001e5c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2203      	movs	r2, #3
 8001e62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e078      	b.n	8001f5c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1e8      	bne.n	8001e4a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e80:	697a      	ldr	r2, [r7, #20]
 8001e82:	4b38      	ldr	r3, [pc, #224]	; (8001f64 <HAL_DMA_Init+0x158>)
 8001e84:	4013      	ands	r3, r2
 8001e86:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ea2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec0:	2b04      	cmp	r3, #4
 8001ec2:	d107      	bne.n	8001ed4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	697a      	ldr	r2, [r7, #20]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	f023 0307 	bic.w	r3, r3, #7
 8001eea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	697a      	ldr	r2, [r7, #20]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	d117      	bne.n	8001f2e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d00e      	beq.n	8001f2e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 fb01 	bl	8002518 <DMA_CheckFifoParam>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d008      	beq.n	8001f2e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2240      	movs	r2, #64	; 0x40
 8001f20:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e016      	b.n	8001f5c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 fab8 	bl	80024ac <DMA_CalcBaseAndBitshift>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f44:	223f      	movs	r2, #63	; 0x3f
 8001f46:	409a      	lsls	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	f010803f 	.word	0xf010803f

08001f68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
 8001f74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f76:	2300      	movs	r3, #0
 8001f78:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d101      	bne.n	8001f8e <HAL_DMA_Start_IT+0x26>
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	e040      	b.n	8002010 <HAL_DMA_Start_IT+0xa8>
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d12f      	bne.n	8002002 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2202      	movs	r2, #2
 8001fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	68b9      	ldr	r1, [r7, #8]
 8001fb6:	68f8      	ldr	r0, [r7, #12]
 8001fb8:	f000 fa4a 	bl	8002450 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc0:	223f      	movs	r2, #63	; 0x3f
 8001fc2:	409a      	lsls	r2, r3
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f042 0216 	orr.w	r2, r2, #22
 8001fd6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d007      	beq.n	8001ff0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f042 0208 	orr.w	r2, r2, #8
 8001fee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f042 0201 	orr.w	r2, r2, #1
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	e005      	b.n	800200e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800200a:	2302      	movs	r3, #2
 800200c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800200e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002024:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002026:	f7ff fdaf 	bl	8001b88 <HAL_GetTick>
 800202a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d008      	beq.n	800204a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2280      	movs	r2, #128	; 0x80
 800203c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e052      	b.n	80020f0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 0216 	bic.w	r2, r2, #22
 8002058:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	695a      	ldr	r2, [r3, #20]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002068:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	2b00      	cmp	r3, #0
 8002070:	d103      	bne.n	800207a <HAL_DMA_Abort+0x62>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002076:	2b00      	cmp	r3, #0
 8002078:	d007      	beq.n	800208a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 0208 	bic.w	r2, r2, #8
 8002088:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 0201 	bic.w	r2, r2, #1
 8002098:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800209a:	e013      	b.n	80020c4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800209c:	f7ff fd74 	bl	8001b88 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b05      	cmp	r3, #5
 80020a8:	d90c      	bls.n	80020c4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2220      	movs	r2, #32
 80020ae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2203      	movs	r2, #3
 80020b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e015      	b.n	80020f0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1e4      	bne.n	800209c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d6:	223f      	movs	r2, #63	; 0x3f
 80020d8:	409a      	lsls	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2201      	movs	r2, #1
 80020e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d004      	beq.n	8002116 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2280      	movs	r2, #128	; 0x80
 8002110:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e00c      	b.n	8002130 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2205      	movs	r2, #5
 800211a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 0201 	bic.w	r2, r2, #1
 800212c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002144:	2300      	movs	r3, #0
 8002146:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002148:	4b8e      	ldr	r3, [pc, #568]	; (8002384 <HAL_DMA_IRQHandler+0x248>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a8e      	ldr	r2, [pc, #568]	; (8002388 <HAL_DMA_IRQHandler+0x24c>)
 800214e:	fba2 2303 	umull	r2, r3, r2, r3
 8002152:	0a9b      	lsrs	r3, r3, #10
 8002154:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002166:	2208      	movs	r2, #8
 8002168:	409a      	lsls	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	4013      	ands	r3, r2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d01a      	beq.n	80021a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0304 	and.w	r3, r3, #4
 800217c:	2b00      	cmp	r3, #0
 800217e:	d013      	beq.n	80021a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 0204 	bic.w	r2, r2, #4
 800218e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002194:	2208      	movs	r2, #8
 8002196:	409a      	lsls	r2, r3
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a0:	f043 0201 	orr.w	r2, r3, #1
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ac:	2201      	movs	r2, #1
 80021ae:	409a      	lsls	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	4013      	ands	r3, r2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d012      	beq.n	80021de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00b      	beq.n	80021de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ca:	2201      	movs	r2, #1
 80021cc:	409a      	lsls	r2, r3
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d6:	f043 0202 	orr.w	r2, r3, #2
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e2:	2204      	movs	r2, #4
 80021e4:	409a      	lsls	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	4013      	ands	r3, r2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d012      	beq.n	8002214 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00b      	beq.n	8002214 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002200:	2204      	movs	r2, #4
 8002202:	409a      	lsls	r2, r3
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800220c:	f043 0204 	orr.w	r2, r3, #4
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002218:	2210      	movs	r2, #16
 800221a:	409a      	lsls	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4013      	ands	r3, r2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d043      	beq.n	80022ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0308 	and.w	r3, r3, #8
 800222e:	2b00      	cmp	r3, #0
 8002230:	d03c      	beq.n	80022ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002236:	2210      	movs	r2, #16
 8002238:	409a      	lsls	r2, r3
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d018      	beq.n	800227e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d108      	bne.n	800226c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	2b00      	cmp	r3, #0
 8002260:	d024      	beq.n	80022ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	4798      	blx	r3
 800226a:	e01f      	b.n	80022ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002270:	2b00      	cmp	r3, #0
 8002272:	d01b      	beq.n	80022ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	4798      	blx	r3
 800227c:	e016      	b.n	80022ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002288:	2b00      	cmp	r3, #0
 800228a:	d107      	bne.n	800229c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 0208 	bic.w	r2, r2, #8
 800229a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d003      	beq.n	80022ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b0:	2220      	movs	r2, #32
 80022b2:	409a      	lsls	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4013      	ands	r3, r2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f000 808f 	beq.w	80023dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0310 	and.w	r3, r3, #16
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 8087 	beq.w	80023dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d2:	2220      	movs	r2, #32
 80022d4:	409a      	lsls	r2, r3
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b05      	cmp	r3, #5
 80022e4:	d136      	bne.n	8002354 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f022 0216 	bic.w	r2, r2, #22
 80022f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	695a      	ldr	r2, [r3, #20]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002304:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	2b00      	cmp	r3, #0
 800230c:	d103      	bne.n	8002316 <HAL_DMA_IRQHandler+0x1da>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002312:	2b00      	cmp	r3, #0
 8002314:	d007      	beq.n	8002326 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 0208 	bic.w	r2, r2, #8
 8002324:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800232a:	223f      	movs	r2, #63	; 0x3f
 800232c:	409a      	lsls	r2, r3
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002346:	2b00      	cmp	r3, #0
 8002348:	d07e      	beq.n	8002448 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	4798      	blx	r3
        }
        return;
 8002352:	e079      	b.n	8002448 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d01d      	beq.n	800239e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10d      	bne.n	800238c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002374:	2b00      	cmp	r3, #0
 8002376:	d031      	beq.n	80023dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	4798      	blx	r3
 8002380:	e02c      	b.n	80023dc <HAL_DMA_IRQHandler+0x2a0>
 8002382:	bf00      	nop
 8002384:	20000010 	.word	0x20000010
 8002388:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002390:	2b00      	cmp	r3, #0
 8002392:	d023      	beq.n	80023dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	4798      	blx	r3
 800239c:	e01e      	b.n	80023dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d10f      	bne.n	80023cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 0210 	bic.w	r2, r2, #16
 80023ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d032      	beq.n	800244a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d022      	beq.n	8002436 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2205      	movs	r2, #5
 80023f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 0201 	bic.w	r2, r2, #1
 8002406:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	3301      	adds	r3, #1
 800240c:	60bb      	str	r3, [r7, #8]
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	429a      	cmp	r2, r3
 8002412:	d307      	bcc.n	8002424 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1f2      	bne.n	8002408 <HAL_DMA_IRQHandler+0x2cc>
 8002422:	e000      	b.n	8002426 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002424:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800243a:	2b00      	cmp	r3, #0
 800243c:	d005      	beq.n	800244a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	4798      	blx	r3
 8002446:	e000      	b.n	800244a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002448:	bf00      	nop
    }
  }
}
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
 800245c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800246c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	2b40      	cmp	r3, #64	; 0x40
 800247c:	d108      	bne.n	8002490 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68ba      	ldr	r2, [r7, #8]
 800248c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800248e:	e007      	b.n	80024a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68ba      	ldr	r2, [r7, #8]
 8002496:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	60da      	str	r2, [r3, #12]
}
 80024a0:	bf00      	nop
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	3b10      	subs	r3, #16
 80024bc:	4a14      	ldr	r2, [pc, #80]	; (8002510 <DMA_CalcBaseAndBitshift+0x64>)
 80024be:	fba2 2303 	umull	r2, r3, r2, r3
 80024c2:	091b      	lsrs	r3, r3, #4
 80024c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024c6:	4a13      	ldr	r2, [pc, #76]	; (8002514 <DMA_CalcBaseAndBitshift+0x68>)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4413      	add	r3, r2
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	461a      	mov	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2b03      	cmp	r3, #3
 80024d8:	d909      	bls.n	80024ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024e2:	f023 0303 	bic.w	r3, r3, #3
 80024e6:	1d1a      	adds	r2, r3, #4
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	659a      	str	r2, [r3, #88]	; 0x58
 80024ec:	e007      	b.n	80024fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024f6:	f023 0303 	bic.w	r3, r3, #3
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002502:	4618      	mov	r0, r3
 8002504:	3714      	adds	r7, #20
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	aaaaaaab 	.word	0xaaaaaaab
 8002514:	080104d8 	.word	0x080104d8

08002518 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002520:	2300      	movs	r3, #0
 8002522:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002528:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d11f      	bne.n	8002572 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	2b03      	cmp	r3, #3
 8002536:	d856      	bhi.n	80025e6 <DMA_CheckFifoParam+0xce>
 8002538:	a201      	add	r2, pc, #4	; (adr r2, 8002540 <DMA_CheckFifoParam+0x28>)
 800253a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800253e:	bf00      	nop
 8002540:	08002551 	.word	0x08002551
 8002544:	08002563 	.word	0x08002563
 8002548:	08002551 	.word	0x08002551
 800254c:	080025e7 	.word	0x080025e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002554:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d046      	beq.n	80025ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002560:	e043      	b.n	80025ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002566:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800256a:	d140      	bne.n	80025ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002570:	e03d      	b.n	80025ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800257a:	d121      	bne.n	80025c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	2b03      	cmp	r3, #3
 8002580:	d837      	bhi.n	80025f2 <DMA_CheckFifoParam+0xda>
 8002582:	a201      	add	r2, pc, #4	; (adr r2, 8002588 <DMA_CheckFifoParam+0x70>)
 8002584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002588:	08002599 	.word	0x08002599
 800258c:	0800259f 	.word	0x0800259f
 8002590:	08002599 	.word	0x08002599
 8002594:	080025b1 	.word	0x080025b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	73fb      	strb	r3, [r7, #15]
      break;
 800259c:	e030      	b.n	8002600 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d025      	beq.n	80025f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ae:	e022      	b.n	80025f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025b8:	d11f      	bne.n	80025fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025be:	e01c      	b.n	80025fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d903      	bls.n	80025ce <DMA_CheckFifoParam+0xb6>
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	2b03      	cmp	r3, #3
 80025ca:	d003      	beq.n	80025d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025cc:	e018      	b.n	8002600 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	73fb      	strb	r3, [r7, #15]
      break;
 80025d2:	e015      	b.n	8002600 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00e      	beq.n	80025fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	73fb      	strb	r3, [r7, #15]
      break;
 80025e4:	e00b      	b.n	80025fe <DMA_CheckFifoParam+0xe6>
      break;
 80025e6:	bf00      	nop
 80025e8:	e00a      	b.n	8002600 <DMA_CheckFifoParam+0xe8>
      break;
 80025ea:	bf00      	nop
 80025ec:	e008      	b.n	8002600 <DMA_CheckFifoParam+0xe8>
      break;
 80025ee:	bf00      	nop
 80025f0:	e006      	b.n	8002600 <DMA_CheckFifoParam+0xe8>
      break;
 80025f2:	bf00      	nop
 80025f4:	e004      	b.n	8002600 <DMA_CheckFifoParam+0xe8>
      break;
 80025f6:	bf00      	nop
 80025f8:	e002      	b.n	8002600 <DMA_CheckFifoParam+0xe8>
      break;   
 80025fa:	bf00      	nop
 80025fc:	e000      	b.n	8002600 <DMA_CheckFifoParam+0xe8>
      break;
 80025fe:	bf00      	nop
    }
  } 
  
  return status; 
 8002600:	7bfb      	ldrb	r3, [r7, #15]
}
 8002602:	4618      	mov	r0, r3
 8002604:	3714      	adds	r7, #20
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop

08002610 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002610:	b480      	push	{r7}
 8002612:	b089      	sub	sp, #36	; 0x24
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800261a:	2300      	movs	r3, #0
 800261c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800261e:	2300      	movs	r3, #0
 8002620:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002622:	2300      	movs	r3, #0
 8002624:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002626:	2300      	movs	r3, #0
 8002628:	61fb      	str	r3, [r7, #28]
 800262a:	e165      	b.n	80028f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800262c:	2201      	movs	r2, #1
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	4013      	ands	r3, r2
 800263e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	429a      	cmp	r2, r3
 8002646:	f040 8154 	bne.w	80028f2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f003 0303 	and.w	r3, r3, #3
 8002652:	2b01      	cmp	r3, #1
 8002654:	d005      	beq.n	8002662 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800265e:	2b02      	cmp	r3, #2
 8002660:	d130      	bne.n	80026c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	2203      	movs	r2, #3
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43db      	mvns	r3, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4013      	ands	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	68da      	ldr	r2, [r3, #12]
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4313      	orrs	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002698:	2201      	movs	r2, #1
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	43db      	mvns	r3, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4013      	ands	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	091b      	lsrs	r3, r3, #4
 80026ae:	f003 0201 	and.w	r2, r3, #1
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f003 0303 	and.w	r3, r3, #3
 80026cc:	2b03      	cmp	r3, #3
 80026ce:	d017      	beq.n	8002700 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	2203      	movs	r2, #3
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4013      	ands	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	689a      	ldr	r2, [r3, #8]
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 0303 	and.w	r3, r3, #3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d123      	bne.n	8002754 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	08da      	lsrs	r2, r3, #3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3208      	adds	r2, #8
 8002714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002718:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	220f      	movs	r2, #15
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	43db      	mvns	r3, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4013      	ands	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	691a      	ldr	r2, [r3, #16]
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4313      	orrs	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	08da      	lsrs	r2, r3, #3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	3208      	adds	r2, #8
 800274e:	69b9      	ldr	r1, [r7, #24]
 8002750:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	2203      	movs	r2, #3
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43db      	mvns	r3, r3
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4013      	ands	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f003 0203 	and.w	r2, r3, #3
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	4313      	orrs	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 80ae 	beq.w	80028f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	60fb      	str	r3, [r7, #12]
 800279a:	4b5d      	ldr	r3, [pc, #372]	; (8002910 <HAL_GPIO_Init+0x300>)
 800279c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279e:	4a5c      	ldr	r2, [pc, #368]	; (8002910 <HAL_GPIO_Init+0x300>)
 80027a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027a4:	6453      	str	r3, [r2, #68]	; 0x44
 80027a6:	4b5a      	ldr	r3, [pc, #360]	; (8002910 <HAL_GPIO_Init+0x300>)
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027b2:	4a58      	ldr	r2, [pc, #352]	; (8002914 <HAL_GPIO_Init+0x304>)
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	089b      	lsrs	r3, r3, #2
 80027b8:	3302      	adds	r3, #2
 80027ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	f003 0303 	and.w	r3, r3, #3
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	220f      	movs	r2, #15
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	43db      	mvns	r3, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4013      	ands	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a4f      	ldr	r2, [pc, #316]	; (8002918 <HAL_GPIO_Init+0x308>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d025      	beq.n	800282a <HAL_GPIO_Init+0x21a>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a4e      	ldr	r2, [pc, #312]	; (800291c <HAL_GPIO_Init+0x30c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d01f      	beq.n	8002826 <HAL_GPIO_Init+0x216>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a4d      	ldr	r2, [pc, #308]	; (8002920 <HAL_GPIO_Init+0x310>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d019      	beq.n	8002822 <HAL_GPIO_Init+0x212>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a4c      	ldr	r2, [pc, #304]	; (8002924 <HAL_GPIO_Init+0x314>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d013      	beq.n	800281e <HAL_GPIO_Init+0x20e>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a4b      	ldr	r2, [pc, #300]	; (8002928 <HAL_GPIO_Init+0x318>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d00d      	beq.n	800281a <HAL_GPIO_Init+0x20a>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a4a      	ldr	r2, [pc, #296]	; (800292c <HAL_GPIO_Init+0x31c>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d007      	beq.n	8002816 <HAL_GPIO_Init+0x206>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a49      	ldr	r2, [pc, #292]	; (8002930 <HAL_GPIO_Init+0x320>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d101      	bne.n	8002812 <HAL_GPIO_Init+0x202>
 800280e:	2306      	movs	r3, #6
 8002810:	e00c      	b.n	800282c <HAL_GPIO_Init+0x21c>
 8002812:	2307      	movs	r3, #7
 8002814:	e00a      	b.n	800282c <HAL_GPIO_Init+0x21c>
 8002816:	2305      	movs	r3, #5
 8002818:	e008      	b.n	800282c <HAL_GPIO_Init+0x21c>
 800281a:	2304      	movs	r3, #4
 800281c:	e006      	b.n	800282c <HAL_GPIO_Init+0x21c>
 800281e:	2303      	movs	r3, #3
 8002820:	e004      	b.n	800282c <HAL_GPIO_Init+0x21c>
 8002822:	2302      	movs	r3, #2
 8002824:	e002      	b.n	800282c <HAL_GPIO_Init+0x21c>
 8002826:	2301      	movs	r3, #1
 8002828:	e000      	b.n	800282c <HAL_GPIO_Init+0x21c>
 800282a:	2300      	movs	r3, #0
 800282c:	69fa      	ldr	r2, [r7, #28]
 800282e:	f002 0203 	and.w	r2, r2, #3
 8002832:	0092      	lsls	r2, r2, #2
 8002834:	4093      	lsls	r3, r2
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4313      	orrs	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800283c:	4935      	ldr	r1, [pc, #212]	; (8002914 <HAL_GPIO_Init+0x304>)
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	089b      	lsrs	r3, r3, #2
 8002842:	3302      	adds	r3, #2
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800284a:	4b3a      	ldr	r3, [pc, #232]	; (8002934 <HAL_GPIO_Init+0x324>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	43db      	mvns	r3, r3
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	4013      	ands	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d003      	beq.n	800286e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	4313      	orrs	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800286e:	4a31      	ldr	r2, [pc, #196]	; (8002934 <HAL_GPIO_Init+0x324>)
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002874:	4b2f      	ldr	r3, [pc, #188]	; (8002934 <HAL_GPIO_Init+0x324>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	43db      	mvns	r3, r3
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	4013      	ands	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d003      	beq.n	8002898 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	4313      	orrs	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002898:	4a26      	ldr	r2, [pc, #152]	; (8002934 <HAL_GPIO_Init+0x324>)
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800289e:	4b25      	ldr	r3, [pc, #148]	; (8002934 <HAL_GPIO_Init+0x324>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	43db      	mvns	r3, r3
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	4013      	ands	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d003      	beq.n	80028c2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	4313      	orrs	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028c2:	4a1c      	ldr	r2, [pc, #112]	; (8002934 <HAL_GPIO_Init+0x324>)
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028c8:	4b1a      	ldr	r3, [pc, #104]	; (8002934 <HAL_GPIO_Init+0x324>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	43db      	mvns	r3, r3
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4013      	ands	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d003      	beq.n	80028ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028ec:	4a11      	ldr	r2, [pc, #68]	; (8002934 <HAL_GPIO_Init+0x324>)
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	3301      	adds	r3, #1
 80028f6:	61fb      	str	r3, [r7, #28]
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	2b0f      	cmp	r3, #15
 80028fc:	f67f ae96 	bls.w	800262c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002900:	bf00      	nop
 8002902:	bf00      	nop
 8002904:	3724      	adds	r7, #36	; 0x24
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	40023800 	.word	0x40023800
 8002914:	40013800 	.word	0x40013800
 8002918:	40020000 	.word	0x40020000
 800291c:	40020400 	.word	0x40020400
 8002920:	40020800 	.word	0x40020800
 8002924:	40020c00 	.word	0x40020c00
 8002928:	40021000 	.word	0x40021000
 800292c:	40021400 	.word	0x40021400
 8002930:	40021800 	.word	0x40021800
 8002934:	40013c00 	.word	0x40013c00

08002938 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	460b      	mov	r3, r1
 8002942:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	691a      	ldr	r2, [r3, #16]
 8002948:	887b      	ldrh	r3, [r7, #2]
 800294a:	4013      	ands	r3, r2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d002      	beq.n	8002956 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002950:	2301      	movs	r3, #1
 8002952:	73fb      	strb	r3, [r7, #15]
 8002954:	e001      	b.n	800295a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002956:	2300      	movs	r3, #0
 8002958:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800295a:	7bfb      	ldrb	r3, [r7, #15]
}
 800295c:	4618      	mov	r0, r3
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	460b      	mov	r3, r1
 8002972:	807b      	strh	r3, [r7, #2]
 8002974:	4613      	mov	r3, r2
 8002976:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002978:	787b      	ldrb	r3, [r7, #1]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800297e:	887a      	ldrh	r2, [r7, #2]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002984:	e003      	b.n	800298e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002986:	887b      	ldrh	r3, [r7, #2]
 8002988:	041a      	lsls	r2, r3, #16
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	619a      	str	r2, [r3, #24]
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800299a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800299c:	b08f      	sub	sp, #60	; 0x3c
 800299e:	af0a      	add	r7, sp, #40	; 0x28
 80029a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e116      	b.n	8002bda <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d106      	bne.n	80029cc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f008 fcd0 	bl	800b36c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2203      	movs	r2, #3
 80029d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d102      	bne.n	80029e6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f004 ffed 	bl	80079ca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	603b      	str	r3, [r7, #0]
 80029f6:	687e      	ldr	r6, [r7, #4]
 80029f8:	466d      	mov	r5, sp
 80029fa:	f106 0410 	add.w	r4, r6, #16
 80029fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a06:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a0a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a0e:	1d33      	adds	r3, r6, #4
 8002a10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a12:	6838      	ldr	r0, [r7, #0]
 8002a14:	f004 fec4 	bl	80077a0 <USB_CoreInit>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d005      	beq.n	8002a2a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2202      	movs	r2, #2
 8002a22:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e0d7      	b.n	8002bda <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2100      	movs	r1, #0
 8002a30:	4618      	mov	r0, r3
 8002a32:	f004 ffdb 	bl	80079ec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a36:	2300      	movs	r3, #0
 8002a38:	73fb      	strb	r3, [r7, #15]
 8002a3a:	e04a      	b.n	8002ad2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a3c:	7bfa      	ldrb	r2, [r7, #15]
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	4613      	mov	r3, r2
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	4413      	add	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	440b      	add	r3, r1
 8002a4a:	333d      	adds	r3, #61	; 0x3d
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a50:	7bfa      	ldrb	r2, [r7, #15]
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	4613      	mov	r3, r2
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	4413      	add	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	333c      	adds	r3, #60	; 0x3c
 8002a60:	7bfa      	ldrb	r2, [r7, #15]
 8002a62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a64:	7bfa      	ldrb	r2, [r7, #15]
 8002a66:	7bfb      	ldrb	r3, [r7, #15]
 8002a68:	b298      	uxth	r0, r3
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	4413      	add	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	440b      	add	r3, r1
 8002a76:	3344      	adds	r3, #68	; 0x44
 8002a78:	4602      	mov	r2, r0
 8002a7a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a7c:	7bfa      	ldrb	r2, [r7, #15]
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	4613      	mov	r3, r2
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	4413      	add	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	440b      	add	r3, r1
 8002a8a:	3340      	adds	r3, #64	; 0x40
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a90:	7bfa      	ldrb	r2, [r7, #15]
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	4613      	mov	r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	4413      	add	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	3348      	adds	r3, #72	; 0x48
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002aa4:	7bfa      	ldrb	r2, [r7, #15]
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	4413      	add	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	334c      	adds	r3, #76	; 0x4c
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ab8:	7bfa      	ldrb	r2, [r7, #15]
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	4613      	mov	r3, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	3354      	adds	r3, #84	; 0x54
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002acc:	7bfb      	ldrb	r3, [r7, #15]
 8002ace:	3301      	adds	r3, #1
 8002ad0:	73fb      	strb	r3, [r7, #15]
 8002ad2:	7bfa      	ldrb	r2, [r7, #15]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d3af      	bcc.n	8002a3c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002adc:	2300      	movs	r3, #0
 8002ade:	73fb      	strb	r3, [r7, #15]
 8002ae0:	e044      	b.n	8002b6c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ae2:	7bfa      	ldrb	r2, [r7, #15]
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	4413      	add	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	440b      	add	r3, r1
 8002af0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002af4:	2200      	movs	r2, #0
 8002af6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002af8:	7bfa      	ldrb	r2, [r7, #15]
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	4613      	mov	r3, r2
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	4413      	add	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002b0a:	7bfa      	ldrb	r2, [r7, #15]
 8002b0c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b0e:	7bfa      	ldrb	r2, [r7, #15]
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	4613      	mov	r3, r2
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	4413      	add	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	440b      	add	r3, r1
 8002b1c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002b20:	2200      	movs	r2, #0
 8002b22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b24:	7bfa      	ldrb	r2, [r7, #15]
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002b36:	2200      	movs	r2, #0
 8002b38:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b3a:	7bfa      	ldrb	r2, [r7, #15]
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	4413      	add	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	440b      	add	r3, r1
 8002b48:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b50:	7bfa      	ldrb	r2, [r7, #15]
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	4613      	mov	r3, r2
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	4413      	add	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b66:	7bfb      	ldrb	r3, [r7, #15]
 8002b68:	3301      	adds	r3, #1
 8002b6a:	73fb      	strb	r3, [r7, #15]
 8002b6c:	7bfa      	ldrb	r2, [r7, #15]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d3b5      	bcc.n	8002ae2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	603b      	str	r3, [r7, #0]
 8002b7c:	687e      	ldr	r6, [r7, #4]
 8002b7e:	466d      	mov	r5, sp
 8002b80:	f106 0410 	add.w	r4, r6, #16
 8002b84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b8c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b90:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b94:	1d33      	adds	r3, r6, #4
 8002b96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b98:	6838      	ldr	r0, [r7, #0]
 8002b9a:	f004 ff73 	bl	8007a84 <USB_DevInit>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d005      	beq.n	8002bb0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e014      	b.n	8002bda <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d102      	bne.n	8002bce <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f001 f98b 	bl	8003ee4 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f006 f8b5 	bl	8008d42 <USB_DevDisconnect>

  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3714      	adds	r7, #20
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002be2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b084      	sub	sp, #16
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d101      	bne.n	8002bfe <HAL_PCD_Start+0x1c>
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	e020      	b.n	8002c40 <HAL_PCD_Start+0x5e>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d109      	bne.n	8002c22 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d005      	beq.n	8002c22 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c1a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f004 febe 	bl	80079a8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f006 f865 	bl	8008d00 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002c48:	b590      	push	{r4, r7, lr}
 8002c4a:	b08d      	sub	sp, #52	; 0x34
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c56:	6a3b      	ldr	r3, [r7, #32]
 8002c58:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f006 f923 	bl	8008eaa <USB_GetMode>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f040 84b7 	bne.w	80035da <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f006 f887 	bl	8008d84 <USB_ReadInterrupts>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 84ad 	beq.w	80035d8 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	0a1b      	lsrs	r3, r3, #8
 8002c88:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f006 f874 	bl	8008d84 <USB_ReadInterrupts>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d107      	bne.n	8002cb6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	695a      	ldr	r2, [r3, #20]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f002 0202 	and.w	r2, r2, #2
 8002cb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f006 f862 	bl	8008d84 <USB_ReadInterrupts>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	f003 0310 	and.w	r3, r3, #16
 8002cc6:	2b10      	cmp	r3, #16
 8002cc8:	d161      	bne.n	8002d8e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	699a      	ldr	r2, [r3, #24]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 0210 	bic.w	r2, r2, #16
 8002cd8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002cda:	6a3b      	ldr	r3, [r7, #32]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	f003 020f 	and.w	r2, r3, #15
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	4413      	add	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	3304      	adds	r3, #4
 8002cf8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	0c5b      	lsrs	r3, r3, #17
 8002cfe:	f003 030f 	and.w	r3, r3, #15
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d124      	bne.n	8002d50 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d035      	beq.n	8002d7e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	091b      	lsrs	r3, r3, #4
 8002d1a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	461a      	mov	r2, r3
 8002d24:	6a38      	ldr	r0, [r7, #32]
 8002d26:	f005 fe99 	bl	8008a5c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	691a      	ldr	r2, [r3, #16]
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	091b      	lsrs	r3, r3, #4
 8002d32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d36:	441a      	add	r2, r3
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	6a1a      	ldr	r2, [r3, #32]
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	091b      	lsrs	r3, r3, #4
 8002d44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d48:	441a      	add	r2, r3
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	621a      	str	r2, [r3, #32]
 8002d4e:	e016      	b.n	8002d7e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	0c5b      	lsrs	r3, r3, #17
 8002d54:	f003 030f 	and.w	r3, r3, #15
 8002d58:	2b06      	cmp	r3, #6
 8002d5a:	d110      	bne.n	8002d7e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d62:	2208      	movs	r2, #8
 8002d64:	4619      	mov	r1, r3
 8002d66:	6a38      	ldr	r0, [r7, #32]
 8002d68:	f005 fe78 	bl	8008a5c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	6a1a      	ldr	r2, [r3, #32]
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	091b      	lsrs	r3, r3, #4
 8002d74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d78:	441a      	add	r2, r3
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	699a      	ldr	r2, [r3, #24]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f042 0210 	orr.w	r2, r2, #16
 8002d8c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f005 fff6 	bl	8008d84 <USB_ReadInterrupts>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d9e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002da2:	f040 80a7 	bne.w	8002ef4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002da6:	2300      	movs	r3, #0
 8002da8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f005 fffb 	bl	8008daa <USB_ReadDevAllOutEpInterrupt>
 8002db4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002db6:	e099      	b.n	8002eec <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f000 808e 	beq.w	8002ee0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dca:	b2d2      	uxtb	r2, r2
 8002dcc:	4611      	mov	r1, r2
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f006 f81f 	bl	8008e12 <USB_ReadDevOutEPInterrupt>
 8002dd4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00c      	beq.n	8002dfa <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de2:	015a      	lsls	r2, r3, #5
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	4413      	add	r3, r2
 8002de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dec:	461a      	mov	r2, r3
 8002dee:	2301      	movs	r3, #1
 8002df0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002df2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 feef 	bl	8003bd8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	f003 0308 	and.w	r3, r3, #8
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00c      	beq.n	8002e1e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e06:	015a      	lsls	r2, r3, #5
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e10:	461a      	mov	r2, r3
 8002e12:	2308      	movs	r3, #8
 8002e14:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002e16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 ffc5 	bl	8003da8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	f003 0310 	and.w	r3, r3, #16
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d008      	beq.n	8002e3a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	015a      	lsls	r2, r3, #5
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	4413      	add	r3, r2
 8002e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e34:	461a      	mov	r2, r3
 8002e36:	2310      	movs	r3, #16
 8002e38:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d030      	beq.n	8002ea6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002e44:	6a3b      	ldr	r3, [r7, #32]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e4c:	2b80      	cmp	r3, #128	; 0x80
 8002e4e:	d109      	bne.n	8002e64 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	69fa      	ldr	r2, [r7, #28]
 8002e5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e62:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e66:	4613      	mov	r3, r2
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	4413      	add	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	4413      	add	r3, r2
 8002e76:	3304      	adds	r3, #4
 8002e78:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	78db      	ldrb	r3, [r3, #3]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d108      	bne.n	8002e94 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	2200      	movs	r2, #0
 8002e86:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f008 fb88 	bl	800b5a4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e96:	015a      	lsls	r2, r3, #5
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	f003 0320 	and.w	r3, r3, #32
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d008      	beq.n	8002ec2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb2:	015a      	lsls	r2, r3, #5
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	2320      	movs	r3, #32
 8002ec0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d009      	beq.n	8002ee0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ece:	015a      	lsls	r2, r3, #5
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ed8:	461a      	mov	r2, r3
 8002eda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ede:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee8:	085b      	lsrs	r3, r3, #1
 8002eea:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f47f af62 	bne.w	8002db8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f005 ff43 	bl	8008d84 <USB_ReadInterrupts>
 8002efe:	4603      	mov	r3, r0
 8002f00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f08:	f040 80db 	bne.w	80030c2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f005 ff64 	bl	8008dde <USB_ReadDevAllInEpInterrupt>
 8002f16:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002f1c:	e0cd      	b.n	80030ba <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 80c2 	beq.w	80030ae <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f30:	b2d2      	uxtb	r2, r2
 8002f32:	4611      	mov	r1, r2
 8002f34:	4618      	mov	r0, r3
 8002f36:	f005 ff8a 	bl	8008e4e <USB_ReadDevInEPInterrupt>
 8002f3a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d057      	beq.n	8002ff6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f48:	f003 030f 	and.w	r3, r3, #15
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	69f9      	ldr	r1, [r7, #28]
 8002f62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f66:	4013      	ands	r3, r2
 8002f68:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6c:	015a      	lsls	r2, r3, #5
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	4413      	add	r3, r2
 8002f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f76:	461a      	mov	r2, r3
 8002f78:	2301      	movs	r3, #1
 8002f7a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d132      	bne.n	8002fea <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002f84:	6879      	ldr	r1, [r7, #4]
 8002f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f88:	4613      	mov	r3, r2
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	4413      	add	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	440b      	add	r3, r1
 8002f92:	334c      	adds	r3, #76	; 0x4c
 8002f94:	6819      	ldr	r1, [r3, #0]
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	4413      	add	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4403      	add	r3, r0
 8002fa4:	3348      	adds	r3, #72	; 0x48
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4419      	add	r1, r3
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fae:	4613      	mov	r3, r2
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	4413      	add	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	4403      	add	r3, r0
 8002fb8:	334c      	adds	r3, #76	; 0x4c
 8002fba:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d113      	bne.n	8002fea <HAL_PCD_IRQHandler+0x3a2>
 8002fc2:	6879      	ldr	r1, [r7, #4]
 8002fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	4413      	add	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	440b      	add	r3, r1
 8002fd0:	3354      	adds	r3, #84	; 0x54
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d108      	bne.n	8002fea <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6818      	ldr	r0, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	f005 ff91 	bl	8008f0c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	4619      	mov	r1, r3
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f008 fa52 	bl	800b49a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	f003 0308 	and.w	r3, r3, #8
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d008      	beq.n	8003012 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003002:	015a      	lsls	r2, r3, #5
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	4413      	add	r3, r2
 8003008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800300c:	461a      	mov	r2, r3
 800300e:	2308      	movs	r3, #8
 8003010:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	f003 0310 	and.w	r3, r3, #16
 8003018:	2b00      	cmp	r3, #0
 800301a:	d008      	beq.n	800302e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301e:	015a      	lsls	r2, r3, #5
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	4413      	add	r3, r2
 8003024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003028:	461a      	mov	r2, r3
 800302a:	2310      	movs	r3, #16
 800302c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003034:	2b00      	cmp	r3, #0
 8003036:	d008      	beq.n	800304a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303a:	015a      	lsls	r2, r3, #5
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	4413      	add	r3, r2
 8003040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003044:	461a      	mov	r2, r3
 8003046:	2340      	movs	r3, #64	; 0x40
 8003048:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d023      	beq.n	800309c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003054:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003056:	6a38      	ldr	r0, [r7, #32]
 8003058:	f004 fe72 	bl	8007d40 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800305c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800305e:	4613      	mov	r3, r2
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	4413      	add	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	3338      	adds	r3, #56	; 0x38
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	4413      	add	r3, r2
 800306c:	3304      	adds	r3, #4
 800306e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	78db      	ldrb	r3, [r3, #3]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d108      	bne.n	800308a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	2200      	movs	r2, #0
 800307c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	b2db      	uxtb	r3, r3
 8003082:	4619      	mov	r1, r3
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f008 fa9f 	bl	800b5c8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800308a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308c:	015a      	lsls	r2, r3, #5
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	4413      	add	r3, r2
 8003092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003096:	461a      	mov	r2, r3
 8003098:	2302      	movs	r3, #2
 800309a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d003      	beq.n	80030ae <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80030a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 fd08 	bl	8003abe <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b0:	3301      	adds	r3, #1
 80030b2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80030b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b6:	085b      	lsrs	r3, r3, #1
 80030b8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80030ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f47f af2e 	bne.w	8002f1e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f005 fe5c 	bl	8008d84 <USB_ReadInterrupts>
 80030cc:	4603      	mov	r3, r0
 80030ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030d6:	d122      	bne.n	800311e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	69fa      	ldr	r2, [r7, #28]
 80030e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030e6:	f023 0301 	bic.w	r3, r3, #1
 80030ea:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d108      	bne.n	8003108 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80030fe:	2100      	movs	r1, #0
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f008 fc19 	bl	800b938 <HAL_PCDEx_LPM_Callback>
 8003106:	e002      	b.n	800310e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f008 fa3d 	bl	800b588 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	695a      	ldr	r2, [r3, #20]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800311c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f005 fe2e 	bl	8008d84 <USB_ReadInterrupts>
 8003128:	4603      	mov	r3, r0
 800312a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800312e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003132:	d112      	bne.n	800315a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	2b01      	cmp	r3, #1
 8003142:	d102      	bne.n	800314a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f008 f9f9 	bl	800b53c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	695a      	ldr	r2, [r3, #20]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003158:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f005 fe10 	bl	8008d84 <USB_ReadInterrupts>
 8003164:	4603      	mov	r3, r0
 8003166:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800316a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800316e:	d121      	bne.n	80031b4 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	695a      	ldr	r2, [r3, #20]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800317e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003186:	2b00      	cmp	r3, #0
 8003188:	d111      	bne.n	80031ae <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003198:	089b      	lsrs	r3, r3, #2
 800319a:	f003 020f 	and.w	r2, r3, #15
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80031a4:	2101      	movs	r1, #1
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f008 fbc6 	bl	800b938 <HAL_PCDEx_LPM_Callback>
 80031ac:	e002      	b.n	80031b4 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f008 f9c4 	bl	800b53c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f005 fde3 	bl	8008d84 <USB_ReadInterrupts>
 80031be:	4603      	mov	r3, r0
 80031c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031c8:	f040 80b7 	bne.w	800333a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	69fa      	ldr	r2, [r7, #28]
 80031d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031da:	f023 0301 	bic.w	r3, r3, #1
 80031de:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2110      	movs	r1, #16
 80031e6:	4618      	mov	r0, r3
 80031e8:	f004 fdaa 	bl	8007d40 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031ec:	2300      	movs	r3, #0
 80031ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031f0:	e046      	b.n	8003280 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80031f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f4:	015a      	lsls	r2, r3, #5
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	4413      	add	r3, r2
 80031fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031fe:	461a      	mov	r2, r3
 8003200:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003204:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003208:	015a      	lsls	r2, r3, #5
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	4413      	add	r3, r2
 800320e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003216:	0151      	lsls	r1, r2, #5
 8003218:	69fa      	ldr	r2, [r7, #28]
 800321a:	440a      	add	r2, r1
 800321c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003220:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003224:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003228:	015a      	lsls	r2, r3, #5
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	4413      	add	r3, r2
 800322e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003232:	461a      	mov	r2, r3
 8003234:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003238:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800323a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323c:	015a      	lsls	r2, r3, #5
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	4413      	add	r3, r2
 8003242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800324a:	0151      	lsls	r1, r2, #5
 800324c:	69fa      	ldr	r2, [r7, #28]
 800324e:	440a      	add	r2, r1
 8003250:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003254:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003258:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800325a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800325c:	015a      	lsls	r2, r3, #5
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	4413      	add	r3, r2
 8003262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800326a:	0151      	lsls	r1, r2, #5
 800326c:	69fa      	ldr	r2, [r7, #28]
 800326e:	440a      	add	r2, r1
 8003270:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003274:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003278:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800327a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327c:	3301      	adds	r3, #1
 800327e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003286:	429a      	cmp	r2, r3
 8003288:	d3b3      	bcc.n	80031f2 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	69fa      	ldr	r2, [r7, #28]
 8003294:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003298:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800329c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d016      	beq.n	80032d4 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032b0:	69fa      	ldr	r2, [r7, #28]
 80032b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032b6:	f043 030b 	orr.w	r3, r3, #11
 80032ba:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c6:	69fa      	ldr	r2, [r7, #28]
 80032c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032cc:	f043 030b 	orr.w	r3, r3, #11
 80032d0:	6453      	str	r3, [r2, #68]	; 0x44
 80032d2:	e015      	b.n	8003300 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	69fa      	ldr	r2, [r7, #28]
 80032de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80032e6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80032ea:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	69fa      	ldr	r2, [r7, #28]
 80032f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032fa:	f043 030b 	orr.w	r3, r3, #11
 80032fe:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	69fa      	ldr	r2, [r7, #28]
 800330a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800330e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003312:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6818      	ldr	r0, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003324:	461a      	mov	r2, r3
 8003326:	f005 fdf1 	bl	8008f0c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	695a      	ldr	r2, [r3, #20]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003338:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f005 fd20 	bl	8008d84 <USB_ReadInterrupts>
 8003344:	4603      	mov	r3, r0
 8003346:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800334a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800334e:	d124      	bne.n	800339a <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4618      	mov	r0, r3
 8003356:	f005 fdb6 	bl	8008ec6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f004 fd6b 	bl	8007e3a <USB_GetDevSpeed>
 8003364:	4603      	mov	r3, r0
 8003366:	461a      	mov	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681c      	ldr	r4, [r3, #0]
 8003370:	f000 fec2 	bl	80040f8 <HAL_RCC_GetHCLKFreq>
 8003374:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800337a:	b2db      	uxtb	r3, r3
 800337c:	461a      	mov	r2, r3
 800337e:	4620      	mov	r0, r4
 8003380:	f004 fa70 	bl	8007864 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f008 f8b0 	bl	800b4ea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	695a      	ldr	r2, [r3, #20]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003398:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f005 fcf0 	bl	8008d84 <USB_ReadInterrupts>
 80033a4:	4603      	mov	r3, r0
 80033a6:	f003 0308 	and.w	r3, r3, #8
 80033aa:	2b08      	cmp	r3, #8
 80033ac:	d10a      	bne.n	80033c4 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f008 f88d 	bl	800b4ce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	695a      	ldr	r2, [r3, #20]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f002 0208 	and.w	r2, r2, #8
 80033c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f005 fcdb 	bl	8008d84 <USB_ReadInterrupts>
 80033ce:	4603      	mov	r3, r0
 80033d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d4:	2b80      	cmp	r3, #128	; 0x80
 80033d6:	d122      	bne.n	800341e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80033d8:	6a3b      	ldr	r3, [r7, #32]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033e0:	6a3b      	ldr	r3, [r7, #32]
 80033e2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033e4:	2301      	movs	r3, #1
 80033e6:	627b      	str	r3, [r7, #36]	; 0x24
 80033e8:	e014      	b.n	8003414 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ee:	4613      	mov	r3, r2
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	4413      	add	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	440b      	add	r3, r1
 80033f8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d105      	bne.n	800340e <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003404:	b2db      	uxtb	r3, r3
 8003406:	4619      	mov	r1, r3
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 fb27 	bl	8003a5c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003410:	3301      	adds	r3, #1
 8003412:	627b      	str	r3, [r7, #36]	; 0x24
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800341a:	429a      	cmp	r2, r3
 800341c:	d3e5      	bcc.n	80033ea <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4618      	mov	r0, r3
 8003424:	f005 fcae 	bl	8008d84 <USB_ReadInterrupts>
 8003428:	4603      	mov	r3, r0
 800342a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800342e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003432:	d13b      	bne.n	80034ac <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003434:	2301      	movs	r3, #1
 8003436:	627b      	str	r3, [r7, #36]	; 0x24
 8003438:	e02b      	b.n	8003492 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	015a      	lsls	r2, r3, #5
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	4413      	add	r3, r2
 8003442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800344e:	4613      	mov	r3, r2
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	4413      	add	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	440b      	add	r3, r1
 8003458:	3340      	adds	r3, #64	; 0x40
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d115      	bne.n	800348c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003460:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003462:	2b00      	cmp	r3, #0
 8003464:	da12      	bge.n	800348c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003466:	6879      	ldr	r1, [r7, #4]
 8003468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800346a:	4613      	mov	r3, r2
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	4413      	add	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	440b      	add	r3, r1
 8003474:	333f      	adds	r3, #63	; 0x3f
 8003476:	2201      	movs	r2, #1
 8003478:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	b2db      	uxtb	r3, r3
 800347e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003482:	b2db      	uxtb	r3, r3
 8003484:	4619      	mov	r1, r3
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 fae8 	bl	8003a5c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348e:	3301      	adds	r3, #1
 8003490:	627b      	str	r3, [r7, #36]	; 0x24
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003498:	429a      	cmp	r2, r3
 800349a:	d3ce      	bcc.n	800343a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	695a      	ldr	r2, [r3, #20]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80034aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f005 fc67 	bl	8008d84 <USB_ReadInterrupts>
 80034b6:	4603      	mov	r3, r0
 80034b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034c0:	d155      	bne.n	800356e <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034c2:	2301      	movs	r3, #1
 80034c4:	627b      	str	r3, [r7, #36]	; 0x24
 80034c6:	e045      	b.n	8003554 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80034c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ca:	015a      	lsls	r2, r3, #5
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	4413      	add	r3, r2
 80034d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80034d8:	6879      	ldr	r1, [r7, #4]
 80034da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034dc:	4613      	mov	r3, r2
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	4413      	add	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	440b      	add	r3, r1
 80034e6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d12e      	bne.n	800354e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80034f0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	da2b      	bge.n	800354e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003502:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003506:	429a      	cmp	r2, r3
 8003508:	d121      	bne.n	800354e <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800350e:	4613      	mov	r3, r2
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	4413      	add	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	440b      	add	r3, r1
 8003518:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800351c:	2201      	movs	r2, #1
 800351e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003520:	6a3b      	ldr	r3, [r7, #32]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003528:	6a3b      	ldr	r3, [r7, #32]
 800352a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800352c:	6a3b      	ldr	r3, [r7, #32]
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10a      	bne.n	800354e <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	69fa      	ldr	r2, [r7, #28]
 8003542:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003546:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800354a:	6053      	str	r3, [r2, #4]
            break;
 800354c:	e007      	b.n	800355e <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003550:	3301      	adds	r3, #1
 8003552:	627b      	str	r3, [r7, #36]	; 0x24
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800355a:	429a      	cmp	r2, r3
 800355c:	d3b4      	bcc.n	80034c8 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	695a      	ldr	r2, [r3, #20]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800356c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f005 fc06 	bl	8008d84 <USB_ReadInterrupts>
 8003578:	4603      	mov	r3, r0
 800357a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800357e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003582:	d10a      	bne.n	800359a <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f008 f831 	bl	800b5ec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	695a      	ldr	r2, [r3, #20]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003598:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f005 fbf0 	bl	8008d84 <USB_ReadInterrupts>
 80035a4:	4603      	mov	r3, r0
 80035a6:	f003 0304 	and.w	r3, r3, #4
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	d115      	bne.n	80035da <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d002      	beq.n	80035c6 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f008 f821 	bl	800b608 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6859      	ldr	r1, [r3, #4]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	605a      	str	r2, [r3, #4]
 80035d6:	e000      	b.n	80035da <HAL_PCD_IRQHandler+0x992>
      return;
 80035d8:	bf00      	nop
    }
  }
}
 80035da:	3734      	adds	r7, #52	; 0x34
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd90      	pop	{r4, r7, pc}

080035e0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	460b      	mov	r3, r1
 80035ea:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d101      	bne.n	80035fa <HAL_PCD_SetAddress+0x1a>
 80035f6:	2302      	movs	r3, #2
 80035f8:	e013      	b.n	8003622 <HAL_PCD_SetAddress+0x42>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	78fa      	ldrb	r2, [r7, #3]
 8003606:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	78fa      	ldrb	r2, [r7, #3]
 8003610:	4611      	mov	r1, r2
 8003612:	4618      	mov	r0, r3
 8003614:	f005 fb4e 	bl	8008cb4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b084      	sub	sp, #16
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
 8003632:	4608      	mov	r0, r1
 8003634:	4611      	mov	r1, r2
 8003636:	461a      	mov	r2, r3
 8003638:	4603      	mov	r3, r0
 800363a:	70fb      	strb	r3, [r7, #3]
 800363c:	460b      	mov	r3, r1
 800363e:	803b      	strh	r3, [r7, #0]
 8003640:	4613      	mov	r3, r2
 8003642:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003644:	2300      	movs	r3, #0
 8003646:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003648:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800364c:	2b00      	cmp	r3, #0
 800364e:	da0f      	bge.n	8003670 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003650:	78fb      	ldrb	r3, [r7, #3]
 8003652:	f003 020f 	and.w	r2, r3, #15
 8003656:	4613      	mov	r3, r2
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	4413      	add	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	3338      	adds	r3, #56	; 0x38
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	4413      	add	r3, r2
 8003664:	3304      	adds	r3, #4
 8003666:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2201      	movs	r2, #1
 800366c:	705a      	strb	r2, [r3, #1]
 800366e:	e00f      	b.n	8003690 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003670:	78fb      	ldrb	r3, [r7, #3]
 8003672:	f003 020f 	and.w	r2, r3, #15
 8003676:	4613      	mov	r3, r2
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	4413      	add	r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	4413      	add	r3, r2
 8003686:	3304      	adds	r3, #4
 8003688:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003690:	78fb      	ldrb	r3, [r7, #3]
 8003692:	f003 030f 	and.w	r3, r3, #15
 8003696:	b2da      	uxtb	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800369c:	883a      	ldrh	r2, [r7, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	78ba      	ldrb	r2, [r7, #2]
 80036a6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	785b      	ldrb	r3, [r3, #1]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d004      	beq.n	80036ba <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80036ba:	78bb      	ldrb	r3, [r7, #2]
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d102      	bne.n	80036c6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d101      	bne.n	80036d4 <HAL_PCD_EP_Open+0xaa>
 80036d0:	2302      	movs	r3, #2
 80036d2:	e00e      	b.n	80036f2 <HAL_PCD_EP_Open+0xc8>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68f9      	ldr	r1, [r7, #12]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f004 fbce 	bl	8007e84 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80036f0:	7afb      	ldrb	r3, [r7, #11]
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b084      	sub	sp, #16
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
 8003702:	460b      	mov	r3, r1
 8003704:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003706:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800370a:	2b00      	cmp	r3, #0
 800370c:	da0f      	bge.n	800372e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800370e:	78fb      	ldrb	r3, [r7, #3]
 8003710:	f003 020f 	and.w	r2, r3, #15
 8003714:	4613      	mov	r3, r2
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	4413      	add	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	3338      	adds	r3, #56	; 0x38
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	4413      	add	r3, r2
 8003722:	3304      	adds	r3, #4
 8003724:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2201      	movs	r2, #1
 800372a:	705a      	strb	r2, [r3, #1]
 800372c:	e00f      	b.n	800374e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800372e:	78fb      	ldrb	r3, [r7, #3]
 8003730:	f003 020f 	and.w	r2, r3, #15
 8003734:	4613      	mov	r3, r2
 8003736:	00db      	lsls	r3, r3, #3
 8003738:	4413      	add	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	4413      	add	r3, r2
 8003744:	3304      	adds	r3, #4
 8003746:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800374e:	78fb      	ldrb	r3, [r7, #3]
 8003750:	f003 030f 	and.w	r3, r3, #15
 8003754:	b2da      	uxtb	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003760:	2b01      	cmp	r3, #1
 8003762:	d101      	bne.n	8003768 <HAL_PCD_EP_Close+0x6e>
 8003764:	2302      	movs	r3, #2
 8003766:	e00e      	b.n	8003786 <HAL_PCD_EP_Close+0x8c>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68f9      	ldr	r1, [r7, #12]
 8003776:	4618      	mov	r0, r3
 8003778:	f004 fc0c 	bl	8007f94 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b086      	sub	sp, #24
 8003792:	af00      	add	r7, sp, #0
 8003794:	60f8      	str	r0, [r7, #12]
 8003796:	607a      	str	r2, [r7, #4]
 8003798:	603b      	str	r3, [r7, #0]
 800379a:	460b      	mov	r3, r1
 800379c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800379e:	7afb      	ldrb	r3, [r7, #11]
 80037a0:	f003 020f 	and.w	r2, r3, #15
 80037a4:	4613      	mov	r3, r2
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	4413      	add	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	4413      	add	r3, r2
 80037b4:	3304      	adds	r3, #4
 80037b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	683a      	ldr	r2, [r7, #0]
 80037c2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	2200      	movs	r2, #0
 80037c8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	2200      	movs	r2, #0
 80037ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037d0:	7afb      	ldrb	r3, [r7, #11]
 80037d2:	f003 030f 	and.w	r3, r3, #15
 80037d6:	b2da      	uxtb	r2, r3
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d102      	bne.n	80037ea <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037ea:	7afb      	ldrb	r3, [r7, #11]
 80037ec:	f003 030f 	and.w	r3, r3, #15
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d109      	bne.n	8003808 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6818      	ldr	r0, [r3, #0]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	461a      	mov	r2, r3
 8003800:	6979      	ldr	r1, [r7, #20]
 8003802:	f004 feeb 	bl	80085dc <USB_EP0StartXfer>
 8003806:	e008      	b.n	800381a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6818      	ldr	r0, [r3, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	b2db      	uxtb	r3, r3
 8003812:	461a      	mov	r2, r3
 8003814:	6979      	ldr	r1, [r7, #20]
 8003816:	f004 fc99 	bl	800814c <USB_EPStartXfer>
  }

  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3718      	adds	r7, #24
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	460b      	mov	r3, r1
 800382e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003830:	78fb      	ldrb	r3, [r7, #3]
 8003832:	f003 020f 	and.w	r2, r3, #15
 8003836:	6879      	ldr	r1, [r7, #4]
 8003838:	4613      	mov	r3, r2
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	4413      	add	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	440b      	add	r3, r1
 8003842:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003846:	681b      	ldr	r3, [r3, #0]
}
 8003848:	4618      	mov	r0, r3
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	607a      	str	r2, [r7, #4]
 800385e:	603b      	str	r3, [r7, #0]
 8003860:	460b      	mov	r3, r1
 8003862:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003864:	7afb      	ldrb	r3, [r7, #11]
 8003866:	f003 020f 	and.w	r2, r3, #15
 800386a:	4613      	mov	r3, r2
 800386c:	00db      	lsls	r3, r3, #3
 800386e:	4413      	add	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	3338      	adds	r3, #56	; 0x38
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	4413      	add	r3, r2
 8003878:	3304      	adds	r3, #4
 800387a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	2200      	movs	r2, #0
 800388c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	2201      	movs	r2, #1
 8003892:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003894:	7afb      	ldrb	r3, [r7, #11]
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	b2da      	uxtb	r2, r3
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d102      	bne.n	80038ae <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038ae:	7afb      	ldrb	r3, [r7, #11]
 80038b0:	f003 030f 	and.w	r3, r3, #15
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d109      	bne.n	80038cc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6818      	ldr	r0, [r3, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	461a      	mov	r2, r3
 80038c4:	6979      	ldr	r1, [r7, #20]
 80038c6:	f004 fe89 	bl	80085dc <USB_EP0StartXfer>
 80038ca:	e008      	b.n	80038de <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6818      	ldr	r0, [r3, #0]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	461a      	mov	r2, r3
 80038d8:	6979      	ldr	r1, [r7, #20]
 80038da:	f004 fc37 	bl	800814c <USB_EPStartXfer>
  }

  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3718      	adds	r7, #24
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	460b      	mov	r3, r1
 80038f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80038f4:	78fb      	ldrb	r3, [r7, #3]
 80038f6:	f003 020f 	and.w	r2, r3, #15
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d901      	bls.n	8003906 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e050      	b.n	80039a8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003906:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800390a:	2b00      	cmp	r3, #0
 800390c:	da0f      	bge.n	800392e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800390e:	78fb      	ldrb	r3, [r7, #3]
 8003910:	f003 020f 	and.w	r2, r3, #15
 8003914:	4613      	mov	r3, r2
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	4413      	add	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	3338      	adds	r3, #56	; 0x38
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	4413      	add	r3, r2
 8003922:	3304      	adds	r3, #4
 8003924:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2201      	movs	r2, #1
 800392a:	705a      	strb	r2, [r3, #1]
 800392c:	e00d      	b.n	800394a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800392e:	78fa      	ldrb	r2, [r7, #3]
 8003930:	4613      	mov	r3, r2
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	4413      	add	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	4413      	add	r3, r2
 8003940:	3304      	adds	r3, #4
 8003942:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2201      	movs	r2, #1
 800394e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003950:	78fb      	ldrb	r3, [r7, #3]
 8003952:	f003 030f 	and.w	r3, r3, #15
 8003956:	b2da      	uxtb	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003962:	2b01      	cmp	r3, #1
 8003964:	d101      	bne.n	800396a <HAL_PCD_EP_SetStall+0x82>
 8003966:	2302      	movs	r3, #2
 8003968:	e01e      	b.n	80039a8 <HAL_PCD_EP_SetStall+0xc0>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68f9      	ldr	r1, [r7, #12]
 8003978:	4618      	mov	r0, r3
 800397a:	f005 f8c7 	bl	8008b0c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800397e:	78fb      	ldrb	r3, [r7, #3]
 8003980:	f003 030f 	and.w	r3, r3, #15
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10a      	bne.n	800399e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6818      	ldr	r0, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	b2d9      	uxtb	r1, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003998:	461a      	mov	r2, r3
 800399a:	f005 fab7 	bl	8008f0c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	460b      	mov	r3, r1
 80039ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80039bc:	78fb      	ldrb	r3, [r7, #3]
 80039be:	f003 020f 	and.w	r2, r3, #15
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d901      	bls.n	80039ce <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e042      	b.n	8003a54 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	da0f      	bge.n	80039f6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039d6:	78fb      	ldrb	r3, [r7, #3]
 80039d8:	f003 020f 	and.w	r2, r3, #15
 80039dc:	4613      	mov	r3, r2
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	4413      	add	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	3338      	adds	r3, #56	; 0x38
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	4413      	add	r3, r2
 80039ea:	3304      	adds	r3, #4
 80039ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2201      	movs	r2, #1
 80039f2:	705a      	strb	r2, [r3, #1]
 80039f4:	e00f      	b.n	8003a16 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039f6:	78fb      	ldrb	r3, [r7, #3]
 80039f8:	f003 020f 	and.w	r2, r3, #15
 80039fc:	4613      	mov	r3, r2
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	4413      	add	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a1c:	78fb      	ldrb	r3, [r7, #3]
 8003a1e:	f003 030f 	and.w	r3, r3, #15
 8003a22:	b2da      	uxtb	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d101      	bne.n	8003a36 <HAL_PCD_EP_ClrStall+0x86>
 8003a32:	2302      	movs	r3, #2
 8003a34:	e00e      	b.n	8003a54 <HAL_PCD_EP_ClrStall+0xa4>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68f9      	ldr	r1, [r7, #12]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f005 f8cf 	bl	8008be8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	460b      	mov	r3, r1
 8003a66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003a68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	da0c      	bge.n	8003a8a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a70:	78fb      	ldrb	r3, [r7, #3]
 8003a72:	f003 020f 	and.w	r2, r3, #15
 8003a76:	4613      	mov	r3, r2
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	4413      	add	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	3338      	adds	r3, #56	; 0x38
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	4413      	add	r3, r2
 8003a84:	3304      	adds	r3, #4
 8003a86:	60fb      	str	r3, [r7, #12]
 8003a88:	e00c      	b.n	8003aa4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a8a:	78fb      	ldrb	r3, [r7, #3]
 8003a8c:	f003 020f 	and.w	r2, r3, #15
 8003a90:	4613      	mov	r3, r2
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	4413      	add	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68f9      	ldr	r1, [r7, #12]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f004 feee 	bl	800888c <USB_EPStopXfer>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003ab4:	7afb      	ldrb	r3, [r7, #11]
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b08a      	sub	sp, #40	; 0x28
 8003ac2:	af02      	add	r7, sp, #8
 8003ac4:	6078      	str	r0, [r7, #4]
 8003ac6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003ad2:	683a      	ldr	r2, [r7, #0]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	4413      	add	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	3338      	adds	r3, #56	; 0x38
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	3304      	adds	r3, #4
 8003ae4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6a1a      	ldr	r2, [r3, #32]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d901      	bls.n	8003af6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e06c      	b.n	8003bd0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	699a      	ldr	r2, [r3, #24]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	69fa      	ldr	r2, [r7, #28]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d902      	bls.n	8003b12 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	3303      	adds	r3, #3
 8003b16:	089b      	lsrs	r3, r3, #2
 8003b18:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b1a:	e02b      	b.n	8003b74 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	699a      	ldr	r2, [r3, #24]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	69fa      	ldr	r2, [r7, #28]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d902      	bls.n	8003b38 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	3303      	adds	r3, #3
 8003b3c:	089b      	lsrs	r3, r3, #2
 8003b3e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6919      	ldr	r1, [r3, #16]
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	b2da      	uxtb	r2, r3
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	9300      	str	r3, [sp, #0]
 8003b54:	4603      	mov	r3, r0
 8003b56:	6978      	ldr	r0, [r7, #20]
 8003b58:	f004 ff42 	bl	80089e0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	691a      	ldr	r2, [r3, #16]
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	441a      	add	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6a1a      	ldr	r2, [r3, #32]
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	441a      	add	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	015a      	lsls	r2, r3, #5
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d809      	bhi.n	8003b9e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6a1a      	ldr	r2, [r3, #32]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d203      	bcs.n	8003b9e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1be      	bne.n	8003b1c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	699a      	ldr	r2, [r3, #24]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d811      	bhi.n	8003bce <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	f003 030f 	and.w	r3, r3, #15
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	43db      	mvns	r3, r3
 8003bc4:	6939      	ldr	r1, [r7, #16]
 8003bc6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bca:	4013      	ands	r3, r2
 8003bcc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3720      	adds	r7, #32
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b088      	sub	sp, #32
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	333c      	adds	r3, #60	; 0x3c
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	015a      	lsls	r2, r3, #5
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d17b      	bne.n	8003d06 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	f003 0308 	and.w	r3, r3, #8
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d015      	beq.n	8003c44 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	4a61      	ldr	r2, [pc, #388]	; (8003da0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	f240 80b9 	bls.w	8003d94 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f000 80b3 	beq.w	8003d94 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	015a      	lsls	r2, r3, #5
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	4413      	add	r3, r2
 8003c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c40:	6093      	str	r3, [r2, #8]
 8003c42:	e0a7      	b.n	8003d94 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	f003 0320 	and.w	r3, r3, #32
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d009      	beq.n	8003c62 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	015a      	lsls	r2, r3, #5
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	4413      	add	r3, r2
 8003c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	2320      	movs	r3, #32
 8003c5e:	6093      	str	r3, [r2, #8]
 8003c60:	e098      	b.n	8003d94 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f040 8093 	bne.w	8003d94 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	4a4b      	ldr	r2, [pc, #300]	; (8003da0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d90f      	bls.n	8003c96 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00a      	beq.n	8003c96 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	015a      	lsls	r2, r3, #5
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	4413      	add	r3, r2
 8003c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c92:	6093      	str	r3, [r2, #8]
 8003c94:	e07e      	b.n	8003d94 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	4413      	add	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	3304      	adds	r3, #4
 8003caa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	69da      	ldr	r2, [r3, #28]
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	0159      	lsls	r1, r3, #5
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	440b      	add	r3, r1
 8003cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cc2:	1ad2      	subs	r2, r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d114      	bne.n	8003cf8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d109      	bne.n	8003cea <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6818      	ldr	r0, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	f005 f912 	bl	8008f0c <USB_EP0_OutStart>
 8003ce8:	e006      	b.n	8003cf8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	691a      	ldr	r2, [r3, #16]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	441a      	add	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f007 fbb0 	bl	800b464 <HAL_PCD_DataOutStageCallback>
 8003d04:	e046      	b.n	8003d94 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	4a26      	ldr	r2, [pc, #152]	; (8003da4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d124      	bne.n	8003d58 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00a      	beq.n	8003d2e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	015a      	lsls	r2, r3, #5
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	4413      	add	r3, r2
 8003d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d24:	461a      	mov	r2, r3
 8003d26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d2a:	6093      	str	r3, [r2, #8]
 8003d2c:	e032      	b.n	8003d94 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	f003 0320 	and.w	r3, r3, #32
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d008      	beq.n	8003d4a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	015a      	lsls	r2, r3, #5
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	4413      	add	r3, r2
 8003d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d44:	461a      	mov	r2, r3
 8003d46:	2320      	movs	r3, #32
 8003d48:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	4619      	mov	r1, r3
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f007 fb87 	bl	800b464 <HAL_PCD_DataOutStageCallback>
 8003d56:	e01d      	b.n	8003d94 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d114      	bne.n	8003d88 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003d5e:	6879      	ldr	r1, [r7, #4]
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	4613      	mov	r3, r2
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	4413      	add	r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	440b      	add	r3, r1
 8003d6c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d108      	bne.n	8003d88 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6818      	ldr	r0, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d80:	461a      	mov	r2, r3
 8003d82:	2100      	movs	r1, #0
 8003d84:	f005 f8c2 	bl	8008f0c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f007 fb68 	bl	800b464 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3720      	adds	r7, #32
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	4f54300a 	.word	0x4f54300a
 8003da4:	4f54310a 	.word	0x4f54310a

08003da8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	333c      	adds	r3, #60	; 0x3c
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	015a      	lsls	r2, r3, #5
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	4413      	add	r3, r2
 8003dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	4a15      	ldr	r2, [pc, #84]	; (8003e30 <PCD_EP_OutSetupPacket_int+0x88>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d90e      	bls.n	8003dfc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d009      	beq.n	8003dfc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	015a      	lsls	r2, r3, #5
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	4413      	add	r3, r2
 8003df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003df4:	461a      	mov	r2, r3
 8003df6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dfa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f007 fb1f 	bl	800b440 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	4a0a      	ldr	r2, [pc, #40]	; (8003e30 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d90c      	bls.n	8003e24 <PCD_EP_OutSetupPacket_int+0x7c>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d108      	bne.n	8003e24 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6818      	ldr	r0, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	2101      	movs	r1, #1
 8003e20:	f005 f874 	bl	8008f0c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3718      	adds	r7, #24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	4f54300a 	.word	0x4f54300a

08003e34 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	70fb      	strb	r3, [r7, #3]
 8003e40:	4613      	mov	r3, r2
 8003e42:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003e4c:	78fb      	ldrb	r3, [r7, #3]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d107      	bne.n	8003e62 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003e52:	883b      	ldrh	r3, [r7, #0]
 8003e54:	0419      	lsls	r1, r3, #16
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	629a      	str	r2, [r3, #40]	; 0x28
 8003e60:	e028      	b.n	8003eb4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e68:	0c1b      	lsrs	r3, r3, #16
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e70:	2300      	movs	r3, #0
 8003e72:	73fb      	strb	r3, [r7, #15]
 8003e74:	e00d      	b.n	8003e92 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	7bfb      	ldrb	r3, [r7, #15]
 8003e7c:	3340      	adds	r3, #64	; 0x40
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4413      	add	r3, r2
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	0c1b      	lsrs	r3, r3, #16
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	4413      	add	r3, r2
 8003e8a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e8c:	7bfb      	ldrb	r3, [r7, #15]
 8003e8e:	3301      	adds	r3, #1
 8003e90:	73fb      	strb	r3, [r7, #15]
 8003e92:	7bfa      	ldrb	r2, [r7, #15]
 8003e94:	78fb      	ldrb	r3, [r7, #3]
 8003e96:	3b01      	subs	r3, #1
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d3ec      	bcc.n	8003e76 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003e9c:	883b      	ldrh	r3, [r7, #0]
 8003e9e:	0418      	lsls	r0, r3, #16
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6819      	ldr	r1, [r3, #0]
 8003ea4:	78fb      	ldrb	r3, [r7, #3]
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	4302      	orrs	r2, r0
 8003eac:	3340      	adds	r3, #64	; 0x40
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	440b      	add	r3, r1
 8003eb2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3714      	adds	r7, #20
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr

08003ec2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b083      	sub	sp, #12
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
 8003eca:	460b      	mov	r3, r1
 8003ecc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	887a      	ldrh	r2, [r7, #2]
 8003ed4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f16:	f043 0303 	orr.w	r3, r3, #3
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3714      	adds	r7, #20
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d101      	bne.n	8003f40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e0cc      	b.n	80040da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f40:	4b68      	ldr	r3, [pc, #416]	; (80040e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 030f 	and.w	r3, r3, #15
 8003f48:	683a      	ldr	r2, [r7, #0]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d90c      	bls.n	8003f68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f4e:	4b65      	ldr	r3, [pc, #404]	; (80040e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	b2d2      	uxtb	r2, r2
 8003f54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f56:	4b63      	ldr	r3, [pc, #396]	; (80040e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 030f 	and.w	r3, r3, #15
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d001      	beq.n	8003f68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e0b8      	b.n	80040da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d020      	beq.n	8003fb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0304 	and.w	r3, r3, #4
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d005      	beq.n	8003f8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f80:	4b59      	ldr	r3, [pc, #356]	; (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	4a58      	ldr	r2, [pc, #352]	; (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0308 	and.w	r3, r3, #8
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d005      	beq.n	8003fa4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f98:	4b53      	ldr	r3, [pc, #332]	; (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	4a52      	ldr	r2, [pc, #328]	; (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fa2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fa4:	4b50      	ldr	r3, [pc, #320]	; (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	494d      	ldr	r1, [pc, #308]	; (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d044      	beq.n	800404c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d107      	bne.n	8003fda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fca:	4b47      	ldr	r3, [pc, #284]	; (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d119      	bne.n	800400a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e07f      	b.n	80040da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d003      	beq.n	8003fea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fe6:	2b03      	cmp	r3, #3
 8003fe8:	d107      	bne.n	8003ffa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fea:	4b3f      	ldr	r3, [pc, #252]	; (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d109      	bne.n	800400a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e06f      	b.n	80040da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ffa:	4b3b      	ldr	r3, [pc, #236]	; (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e067      	b.n	80040da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800400a:	4b37      	ldr	r3, [pc, #220]	; (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f023 0203 	bic.w	r2, r3, #3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	4934      	ldr	r1, [pc, #208]	; (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004018:	4313      	orrs	r3, r2
 800401a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800401c:	f7fd fdb4 	bl	8001b88 <HAL_GetTick>
 8004020:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004022:	e00a      	b.n	800403a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004024:	f7fd fdb0 	bl	8001b88 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004032:	4293      	cmp	r3, r2
 8004034:	d901      	bls.n	800403a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e04f      	b.n	80040da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800403a:	4b2b      	ldr	r3, [pc, #172]	; (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f003 020c 	and.w	r2, r3, #12
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	429a      	cmp	r2, r3
 800404a:	d1eb      	bne.n	8004024 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800404c:	4b25      	ldr	r3, [pc, #148]	; (80040e4 <HAL_RCC_ClockConfig+0x1b8>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 030f 	and.w	r3, r3, #15
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	429a      	cmp	r2, r3
 8004058:	d20c      	bcs.n	8004074 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800405a:	4b22      	ldr	r3, [pc, #136]	; (80040e4 <HAL_RCC_ClockConfig+0x1b8>)
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	b2d2      	uxtb	r2, r2
 8004060:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004062:	4b20      	ldr	r3, [pc, #128]	; (80040e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 030f 	and.w	r3, r3, #15
 800406a:	683a      	ldr	r2, [r7, #0]
 800406c:	429a      	cmp	r2, r3
 800406e:	d001      	beq.n	8004074 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e032      	b.n	80040da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0304 	and.w	r3, r3, #4
 800407c:	2b00      	cmp	r3, #0
 800407e:	d008      	beq.n	8004092 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004080:	4b19      	ldr	r3, [pc, #100]	; (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	4916      	ldr	r1, [pc, #88]	; (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 800408e:	4313      	orrs	r3, r2
 8004090:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0308 	and.w	r3, r3, #8
 800409a:	2b00      	cmp	r3, #0
 800409c:	d009      	beq.n	80040b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800409e:	4b12      	ldr	r3, [pc, #72]	; (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	490e      	ldr	r1, [pc, #56]	; (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040b2:	f000 fb7f 	bl	80047b4 <HAL_RCC_GetSysClockFreq>
 80040b6:	4602      	mov	r2, r0
 80040b8:	4b0b      	ldr	r3, [pc, #44]	; (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	091b      	lsrs	r3, r3, #4
 80040be:	f003 030f 	and.w	r3, r3, #15
 80040c2:	490a      	ldr	r1, [pc, #40]	; (80040ec <HAL_RCC_ClockConfig+0x1c0>)
 80040c4:	5ccb      	ldrb	r3, [r1, r3]
 80040c6:	fa22 f303 	lsr.w	r3, r2, r3
 80040ca:	4a09      	ldr	r2, [pc, #36]	; (80040f0 <HAL_RCC_ClockConfig+0x1c4>)
 80040cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040ce:	4b09      	ldr	r3, [pc, #36]	; (80040f4 <HAL_RCC_ClockConfig+0x1c8>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7fd fd14 	bl	8001b00 <HAL_InitTick>

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	40023c00 	.word	0x40023c00
 80040e8:	40023800 	.word	0x40023800
 80040ec:	080104c0 	.word	0x080104c0
 80040f0:	20000010 	.word	0x20000010
 80040f4:	20000014 	.word	0x20000014

080040f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040fc:	4b03      	ldr	r3, [pc, #12]	; (800410c <HAL_RCC_GetHCLKFreq+0x14>)
 80040fe:	681b      	ldr	r3, [r3, #0]
}
 8004100:	4618      	mov	r0, r3
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	20000010 	.word	0x20000010

08004110 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004114:	f7ff fff0 	bl	80040f8 <HAL_RCC_GetHCLKFreq>
 8004118:	4602      	mov	r2, r0
 800411a:	4b05      	ldr	r3, [pc, #20]	; (8004130 <HAL_RCC_GetPCLK1Freq+0x20>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	0a9b      	lsrs	r3, r3, #10
 8004120:	f003 0307 	and.w	r3, r3, #7
 8004124:	4903      	ldr	r1, [pc, #12]	; (8004134 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004126:	5ccb      	ldrb	r3, [r1, r3]
 8004128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800412c:	4618      	mov	r0, r3
 800412e:	bd80      	pop	{r7, pc}
 8004130:	40023800 	.word	0x40023800
 8004134:	080104d0 	.word	0x080104d0

08004138 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800413c:	f7ff ffdc 	bl	80040f8 <HAL_RCC_GetHCLKFreq>
 8004140:	4602      	mov	r2, r0
 8004142:	4b05      	ldr	r3, [pc, #20]	; (8004158 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	0b5b      	lsrs	r3, r3, #13
 8004148:	f003 0307 	and.w	r3, r3, #7
 800414c:	4903      	ldr	r1, [pc, #12]	; (800415c <HAL_RCC_GetPCLK2Freq+0x24>)
 800414e:	5ccb      	ldrb	r3, [r1, r3]
 8004150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004154:	4618      	mov	r0, r3
 8004156:	bd80      	pop	{r7, pc}
 8004158:	40023800 	.word	0x40023800
 800415c:	080104d0 	.word	0x080104d0

08004160 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b08c      	sub	sp, #48	; 0x30
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004168:	2300      	movs	r3, #0
 800416a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800416c:	2300      	movs	r3, #0
 800416e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8004170:	2300      	movs	r3, #0
 8004172:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8004174:	2300      	movs	r3, #0
 8004176:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8004178:	2300      	movs	r3, #0
 800417a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800417c:	2300      	movs	r3, #0
 800417e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8004180:	2300      	movs	r3, #0
 8004182:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8004184:	2300      	movs	r3, #0
 8004186:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8004188:	2300      	movs	r3, #0
 800418a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	2b00      	cmp	r3, #0
 8004196:	d010      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004198:	4b6f      	ldr	r3, [pc, #444]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800419a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800419e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a6:	496c      	ldr	r1, [pc, #432]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80041b6:	2301      	movs	r3, #1
 80041b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d010      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80041c6:	4b64      	ldr	r3, [pc, #400]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80041c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041cc:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d4:	4960      	ldr	r1, [pc, #384]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d101      	bne.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80041e4:	2301      	movs	r3, #1
 80041e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0304 	and.w	r3, r3, #4
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d017      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041f4:	4b58      	ldr	r3, [pc, #352]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80041f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004202:	4955      	ldr	r1, [pc, #340]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004204:	4313      	orrs	r3, r2
 8004206:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004212:	d101      	bne.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004214:	2301      	movs	r3, #1
 8004216:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421c:	2b00      	cmp	r3, #0
 800421e:	d101      	bne.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8004220:	2301      	movs	r3, #1
 8004222:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0308 	and.w	r3, r3, #8
 800422c:	2b00      	cmp	r3, #0
 800422e:	d017      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004230:	4b49      	ldr	r3, [pc, #292]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004232:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004236:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800423e:	4946      	ldr	r1, [pc, #280]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004240:	4313      	orrs	r3, r2
 8004242:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800424a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800424e:	d101      	bne.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004250:	2301      	movs	r3, #1
 8004252:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004258:	2b00      	cmp	r3, #0
 800425a:	d101      	bne.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800425c:	2301      	movs	r3, #1
 800425e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0320 	and.w	r3, r3, #32
 8004268:	2b00      	cmp	r3, #0
 800426a:	f000 808a 	beq.w	8004382 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800426e:	2300      	movs	r3, #0
 8004270:	60bb      	str	r3, [r7, #8]
 8004272:	4b39      	ldr	r3, [pc, #228]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004276:	4a38      	ldr	r2, [pc, #224]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800427c:	6413      	str	r3, [r2, #64]	; 0x40
 800427e:	4b36      	ldr	r3, [pc, #216]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004286:	60bb      	str	r3, [r7, #8]
 8004288:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800428a:	4b34      	ldr	r3, [pc, #208]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a33      	ldr	r2, [pc, #204]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004294:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004296:	f7fd fc77 	bl	8001b88 <HAL_GetTick>
 800429a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800429c:	e008      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800429e:	f7fd fc73 	bl	8001b88 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d901      	bls.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e278      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80042b0:	4b2a      	ldr	r3, [pc, #168]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d0f0      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042bc:	4b26      	ldr	r3, [pc, #152]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80042be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042c4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042c6:	6a3b      	ldr	r3, [r7, #32]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d02f      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042d4:	6a3a      	ldr	r2, [r7, #32]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d028      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042da:	4b1f      	ldr	r3, [pc, #124]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80042dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042e2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042e4:	4b1e      	ldr	r3, [pc, #120]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80042e6:	2201      	movs	r2, #1
 80042e8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042ea:	4b1d      	ldr	r3, [pc, #116]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80042f0:	4a19      	ldr	r2, [pc, #100]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80042f2:	6a3b      	ldr	r3, [r7, #32]
 80042f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80042f6:	4b18      	ldr	r3, [pc, #96]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80042f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d114      	bne.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004302:	f7fd fc41 	bl	8001b88 <HAL_GetTick>
 8004306:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004308:	e00a      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800430a:	f7fd fc3d 	bl	8001b88 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	f241 3288 	movw	r2, #5000	; 0x1388
 8004318:	4293      	cmp	r3, r2
 800431a:	d901      	bls.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e240      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004320:	4b0d      	ldr	r3, [pc, #52]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d0ee      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004330:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004334:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004338:	d114      	bne.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800433a:	4b07      	ldr	r3, [pc, #28]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004346:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800434a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800434e:	4902      	ldr	r1, [pc, #8]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004350:	4313      	orrs	r3, r2
 8004352:	608b      	str	r3, [r1, #8]
 8004354:	e00c      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004356:	bf00      	nop
 8004358:	40023800 	.word	0x40023800
 800435c:	40007000 	.word	0x40007000
 8004360:	42470e40 	.word	0x42470e40
 8004364:	4b4a      	ldr	r3, [pc, #296]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	4a49      	ldr	r2, [pc, #292]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800436a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800436e:	6093      	str	r3, [r2, #8]
 8004370:	4b47      	ldr	r3, [pc, #284]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004372:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004378:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800437c:	4944      	ldr	r1, [pc, #272]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800437e:	4313      	orrs	r3, r2
 8004380:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0310 	and.w	r3, r3, #16
 800438a:	2b00      	cmp	r3, #0
 800438c:	d004      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8004394:	4b3f      	ldr	r3, [pc, #252]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004396:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00a      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80043a4:	4b3a      	ldr	r3, [pc, #232]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80043a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043b2:	4937      	ldr	r1, [pc, #220]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00a      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80043c6:	4b32      	ldr	r3, [pc, #200]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80043c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043cc:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043d4:	492e      	ldr	r1, [pc, #184]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d011      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80043e8:	4b29      	ldr	r3, [pc, #164]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80043ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043ee:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f6:	4926      	ldr	r1, [pc, #152]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004402:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004406:	d101      	bne.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8004408:	2301      	movs	r3, #1
 800440a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00a      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004418:	4b1d      	ldr	r3, [pc, #116]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800441a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800441e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004426:	491a      	ldr	r1, [pc, #104]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004428:	4313      	orrs	r3, r2
 800442a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004436:	2b00      	cmp	r3, #0
 8004438:	d011      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800443a:	4b15      	ldr	r3, [pc, #84]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800443c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004440:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004448:	4911      	ldr	r1, [pc, #68]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800444a:	4313      	orrs	r3, r2
 800444c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004454:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004458:	d101      	bne.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800445a:	2301      	movs	r3, #1
 800445c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800445e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004460:	2b01      	cmp	r3, #1
 8004462:	d005      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800446c:	f040 80ff 	bne.w	800466e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004470:	4b09      	ldr	r3, [pc, #36]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004472:	2200      	movs	r2, #0
 8004474:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004476:	f7fd fb87 	bl	8001b88 <HAL_GetTick>
 800447a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800447c:	e00e      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800447e:	f7fd fb83 	bl	8001b88 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	2b02      	cmp	r3, #2
 800448a:	d907      	bls.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e188      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004490:	40023800 	.word	0x40023800
 8004494:	424711e0 	.word	0x424711e0
 8004498:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800449c:	4b7e      	ldr	r3, [pc, #504]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1ea      	bne.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d003      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d009      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d028      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d124      	bne.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80044d0:	4b71      	ldr	r3, [pc, #452]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80044d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044d6:	0c1b      	lsrs	r3, r3, #16
 80044d8:	f003 0303 	and.w	r3, r3, #3
 80044dc:	3301      	adds	r3, #1
 80044de:	005b      	lsls	r3, r3, #1
 80044e0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80044e2:	4b6d      	ldr	r3, [pc, #436]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80044e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044e8:	0e1b      	lsrs	r3, r3, #24
 80044ea:	f003 030f 	and.w	r3, r3, #15
 80044ee:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685a      	ldr	r2, [r3, #4]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	019b      	lsls	r3, r3, #6
 80044fa:	431a      	orrs	r2, r3
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	085b      	lsrs	r3, r3, #1
 8004500:	3b01      	subs	r3, #1
 8004502:	041b      	lsls	r3, r3, #16
 8004504:	431a      	orrs	r2, r3
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	061b      	lsls	r3, r3, #24
 800450a:	431a      	orrs	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	695b      	ldr	r3, [r3, #20]
 8004510:	071b      	lsls	r3, r3, #28
 8004512:	4961      	ldr	r1, [pc, #388]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004514:	4313      	orrs	r3, r2
 8004516:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0304 	and.w	r3, r3, #4
 8004522:	2b00      	cmp	r3, #0
 8004524:	d004      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800452e:	d00a      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004538:	2b00      	cmp	r3, #0
 800453a:	d035      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004540:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004544:	d130      	bne.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004546:	4b54      	ldr	r3, [pc, #336]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004548:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800454c:	0c1b      	lsrs	r3, r3, #16
 800454e:	f003 0303 	and.w	r3, r3, #3
 8004552:	3301      	adds	r3, #1
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004558:	4b4f      	ldr	r3, [pc, #316]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800455a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800455e:	0f1b      	lsrs	r3, r3, #28
 8004560:	f003 0307 	and.w	r3, r3, #7
 8004564:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	019b      	lsls	r3, r3, #6
 8004570:	431a      	orrs	r2, r3
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	085b      	lsrs	r3, r3, #1
 8004576:	3b01      	subs	r3, #1
 8004578:	041b      	lsls	r3, r3, #16
 800457a:	431a      	orrs	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	061b      	lsls	r3, r3, #24
 8004582:	431a      	orrs	r2, r3
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	071b      	lsls	r3, r3, #28
 8004588:	4943      	ldr	r1, [pc, #268]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800458a:	4313      	orrs	r3, r2
 800458c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004590:	4b41      	ldr	r3, [pc, #260]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004592:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004596:	f023 021f 	bic.w	r2, r3, #31
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459e:	3b01      	subs	r3, #1
 80045a0:	493d      	ldr	r1, [pc, #244]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d029      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045bc:	d124      	bne.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80045be:	4b36      	ldr	r3, [pc, #216]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80045c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045c4:	0c1b      	lsrs	r3, r3, #16
 80045c6:	f003 0303 	and.w	r3, r3, #3
 80045ca:	3301      	adds	r3, #1
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80045d0:	4b31      	ldr	r3, [pc, #196]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80045d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045d6:	0f1b      	lsrs	r3, r3, #28
 80045d8:	f003 0307 	and.w	r3, r3, #7
 80045dc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685a      	ldr	r2, [r3, #4]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	019b      	lsls	r3, r3, #6
 80045e8:	431a      	orrs	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	085b      	lsrs	r3, r3, #1
 80045f0:	3b01      	subs	r3, #1
 80045f2:	041b      	lsls	r3, r3, #16
 80045f4:	431a      	orrs	r2, r3
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	061b      	lsls	r3, r3, #24
 80045fa:	431a      	orrs	r2, r3
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	071b      	lsls	r3, r3, #28
 8004600:	4925      	ldr	r1, [pc, #148]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004602:	4313      	orrs	r3, r2
 8004604:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004610:	2b00      	cmp	r3, #0
 8004612:	d016      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	019b      	lsls	r3, r3, #6
 800461e:	431a      	orrs	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	085b      	lsrs	r3, r3, #1
 8004626:	3b01      	subs	r3, #1
 8004628:	041b      	lsls	r3, r3, #16
 800462a:	431a      	orrs	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	061b      	lsls	r3, r3, #24
 8004632:	431a      	orrs	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	071b      	lsls	r3, r3, #28
 800463a:	4917      	ldr	r1, [pc, #92]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800463c:	4313      	orrs	r3, r2
 800463e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004642:	4b16      	ldr	r3, [pc, #88]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004644:	2201      	movs	r2, #1
 8004646:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004648:	f7fd fa9e 	bl	8001b88 <HAL_GetTick>
 800464c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800464e:	e008      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004650:	f7fd fa9a 	bl	8001b88 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e09f      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004662:	4b0d      	ldr	r3, [pc, #52]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d0f0      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800466e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004670:	2b01      	cmp	r3, #1
 8004672:	f040 8095 	bne.w	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004676:	4b0a      	ldr	r3, [pc, #40]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004678:	2200      	movs	r2, #0
 800467a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800467c:	f7fd fa84 	bl	8001b88 <HAL_GetTick>
 8004680:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004682:	e00f      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004684:	f7fd fa80 	bl	8001b88 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b02      	cmp	r3, #2
 8004690:	d908      	bls.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e085      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004696:	bf00      	nop
 8004698:	40023800 	.word	0x40023800
 800469c:	42470068 	.word	0x42470068
 80046a0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80046a4:	4b41      	ldr	r3, [pc, #260]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046b0:	d0e8      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0304 	and.w	r3, r3, #4
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d003      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d009      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d02b      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d127      	bne.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80046da:	4b34      	ldr	r3, [pc, #208]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80046dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e0:	0c1b      	lsrs	r3, r3, #16
 80046e2:	f003 0303 	and.w	r3, r3, #3
 80046e6:	3301      	adds	r3, #1
 80046e8:	005b      	lsls	r3, r3, #1
 80046ea:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	699a      	ldr	r2, [r3, #24]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	69db      	ldr	r3, [r3, #28]
 80046f4:	019b      	lsls	r3, r3, #6
 80046f6:	431a      	orrs	r2, r3
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	085b      	lsrs	r3, r3, #1
 80046fc:	3b01      	subs	r3, #1
 80046fe:	041b      	lsls	r3, r3, #16
 8004700:	431a      	orrs	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004706:	061b      	lsls	r3, r3, #24
 8004708:	4928      	ldr	r1, [pc, #160]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800470a:	4313      	orrs	r3, r2
 800470c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004710:	4b26      	ldr	r3, [pc, #152]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004712:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004716:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471e:	3b01      	subs	r3, #1
 8004720:	021b      	lsls	r3, r3, #8
 8004722:	4922      	ldr	r1, [pc, #136]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004724:	4313      	orrs	r3, r2
 8004726:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004732:	2b00      	cmp	r3, #0
 8004734:	d01d      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800473a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800473e:	d118      	bne.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004740:	4b1a      	ldr	r3, [pc, #104]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004746:	0e1b      	lsrs	r3, r3, #24
 8004748:	f003 030f 	and.w	r3, r3, #15
 800474c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	699a      	ldr	r2, [r3, #24]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	69db      	ldr	r3, [r3, #28]
 8004756:	019b      	lsls	r3, r3, #6
 8004758:	431a      	orrs	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	085b      	lsrs	r3, r3, #1
 8004760:	3b01      	subs	r3, #1
 8004762:	041b      	lsls	r3, r3, #16
 8004764:	431a      	orrs	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	061b      	lsls	r3, r3, #24
 800476a:	4910      	ldr	r1, [pc, #64]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800476c:	4313      	orrs	r3, r2
 800476e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004772:	4b0f      	ldr	r3, [pc, #60]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004774:	2201      	movs	r2, #1
 8004776:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004778:	f7fd fa06 	bl	8001b88 <HAL_GetTick>
 800477c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800477e:	e008      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004780:	f7fd fa02 	bl	8001b88 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b02      	cmp	r3, #2
 800478c:	d901      	bls.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e007      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004792:	4b06      	ldr	r3, [pc, #24]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800479a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800479e:	d1ef      	bne.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3730      	adds	r7, #48	; 0x30
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	40023800 	.word	0x40023800
 80047b0:	42470070 	.word	0x42470070

080047b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047b8:	b0ae      	sub	sp, #184	; 0xb8
 80047ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80047bc:	2300      	movs	r3, #0
 80047be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80047c2:	2300      	movs	r3, #0
 80047c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80047c8:	2300      	movs	r3, #0
 80047ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80047ce:	2300      	movs	r3, #0
 80047d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047da:	4bcb      	ldr	r3, [pc, #812]	; (8004b08 <HAL_RCC_GetSysClockFreq+0x354>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f003 030c 	and.w	r3, r3, #12
 80047e2:	2b0c      	cmp	r3, #12
 80047e4:	f200 8206 	bhi.w	8004bf4 <HAL_RCC_GetSysClockFreq+0x440>
 80047e8:	a201      	add	r2, pc, #4	; (adr r2, 80047f0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80047ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ee:	bf00      	nop
 80047f0:	08004825 	.word	0x08004825
 80047f4:	08004bf5 	.word	0x08004bf5
 80047f8:	08004bf5 	.word	0x08004bf5
 80047fc:	08004bf5 	.word	0x08004bf5
 8004800:	0800482d 	.word	0x0800482d
 8004804:	08004bf5 	.word	0x08004bf5
 8004808:	08004bf5 	.word	0x08004bf5
 800480c:	08004bf5 	.word	0x08004bf5
 8004810:	08004835 	.word	0x08004835
 8004814:	08004bf5 	.word	0x08004bf5
 8004818:	08004bf5 	.word	0x08004bf5
 800481c:	08004bf5 	.word	0x08004bf5
 8004820:	08004a25 	.word	0x08004a25
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004824:	4bb9      	ldr	r3, [pc, #740]	; (8004b0c <HAL_RCC_GetSysClockFreq+0x358>)
 8004826:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800482a:	e1e7      	b.n	8004bfc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800482c:	4bb8      	ldr	r3, [pc, #736]	; (8004b10 <HAL_RCC_GetSysClockFreq+0x35c>)
 800482e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004832:	e1e3      	b.n	8004bfc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004834:	4bb4      	ldr	r3, [pc, #720]	; (8004b08 <HAL_RCC_GetSysClockFreq+0x354>)
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800483c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004840:	4bb1      	ldr	r3, [pc, #708]	; (8004b08 <HAL_RCC_GetSysClockFreq+0x354>)
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d071      	beq.n	8004930 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800484c:	4bae      	ldr	r3, [pc, #696]	; (8004b08 <HAL_RCC_GetSysClockFreq+0x354>)
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	099b      	lsrs	r3, r3, #6
 8004852:	2200      	movs	r2, #0
 8004854:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004858:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800485c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004860:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004864:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004868:	2300      	movs	r3, #0
 800486a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800486e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004872:	4622      	mov	r2, r4
 8004874:	462b      	mov	r3, r5
 8004876:	f04f 0000 	mov.w	r0, #0
 800487a:	f04f 0100 	mov.w	r1, #0
 800487e:	0159      	lsls	r1, r3, #5
 8004880:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004884:	0150      	lsls	r0, r2, #5
 8004886:	4602      	mov	r2, r0
 8004888:	460b      	mov	r3, r1
 800488a:	4621      	mov	r1, r4
 800488c:	1a51      	subs	r1, r2, r1
 800488e:	6439      	str	r1, [r7, #64]	; 0x40
 8004890:	4629      	mov	r1, r5
 8004892:	eb63 0301 	sbc.w	r3, r3, r1
 8004896:	647b      	str	r3, [r7, #68]	; 0x44
 8004898:	f04f 0200 	mov.w	r2, #0
 800489c:	f04f 0300 	mov.w	r3, #0
 80048a0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80048a4:	4649      	mov	r1, r9
 80048a6:	018b      	lsls	r3, r1, #6
 80048a8:	4641      	mov	r1, r8
 80048aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048ae:	4641      	mov	r1, r8
 80048b0:	018a      	lsls	r2, r1, #6
 80048b2:	4641      	mov	r1, r8
 80048b4:	1a51      	subs	r1, r2, r1
 80048b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80048b8:	4649      	mov	r1, r9
 80048ba:	eb63 0301 	sbc.w	r3, r3, r1
 80048be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048c0:	f04f 0200 	mov.w	r2, #0
 80048c4:	f04f 0300 	mov.w	r3, #0
 80048c8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80048cc:	4649      	mov	r1, r9
 80048ce:	00cb      	lsls	r3, r1, #3
 80048d0:	4641      	mov	r1, r8
 80048d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048d6:	4641      	mov	r1, r8
 80048d8:	00ca      	lsls	r2, r1, #3
 80048da:	4610      	mov	r0, r2
 80048dc:	4619      	mov	r1, r3
 80048de:	4603      	mov	r3, r0
 80048e0:	4622      	mov	r2, r4
 80048e2:	189b      	adds	r3, r3, r2
 80048e4:	633b      	str	r3, [r7, #48]	; 0x30
 80048e6:	462b      	mov	r3, r5
 80048e8:	460a      	mov	r2, r1
 80048ea:	eb42 0303 	adc.w	r3, r2, r3
 80048ee:	637b      	str	r3, [r7, #52]	; 0x34
 80048f0:	f04f 0200 	mov.w	r2, #0
 80048f4:	f04f 0300 	mov.w	r3, #0
 80048f8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80048fc:	4629      	mov	r1, r5
 80048fe:	024b      	lsls	r3, r1, #9
 8004900:	4621      	mov	r1, r4
 8004902:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004906:	4621      	mov	r1, r4
 8004908:	024a      	lsls	r2, r1, #9
 800490a:	4610      	mov	r0, r2
 800490c:	4619      	mov	r1, r3
 800490e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004912:	2200      	movs	r2, #0
 8004914:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004918:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800491c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004920:	f7fc f9d2 	bl	8000cc8 <__aeabi_uldivmod>
 8004924:	4602      	mov	r2, r0
 8004926:	460b      	mov	r3, r1
 8004928:	4613      	mov	r3, r2
 800492a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800492e:	e067      	b.n	8004a00 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004930:	4b75      	ldr	r3, [pc, #468]	; (8004b08 <HAL_RCC_GetSysClockFreq+0x354>)
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	099b      	lsrs	r3, r3, #6
 8004936:	2200      	movs	r2, #0
 8004938:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800493c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004940:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004948:	67bb      	str	r3, [r7, #120]	; 0x78
 800494a:	2300      	movs	r3, #0
 800494c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800494e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004952:	4622      	mov	r2, r4
 8004954:	462b      	mov	r3, r5
 8004956:	f04f 0000 	mov.w	r0, #0
 800495a:	f04f 0100 	mov.w	r1, #0
 800495e:	0159      	lsls	r1, r3, #5
 8004960:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004964:	0150      	lsls	r0, r2, #5
 8004966:	4602      	mov	r2, r0
 8004968:	460b      	mov	r3, r1
 800496a:	4621      	mov	r1, r4
 800496c:	1a51      	subs	r1, r2, r1
 800496e:	62b9      	str	r1, [r7, #40]	; 0x28
 8004970:	4629      	mov	r1, r5
 8004972:	eb63 0301 	sbc.w	r3, r3, r1
 8004976:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004978:	f04f 0200 	mov.w	r2, #0
 800497c:	f04f 0300 	mov.w	r3, #0
 8004980:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004984:	4649      	mov	r1, r9
 8004986:	018b      	lsls	r3, r1, #6
 8004988:	4641      	mov	r1, r8
 800498a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800498e:	4641      	mov	r1, r8
 8004990:	018a      	lsls	r2, r1, #6
 8004992:	4641      	mov	r1, r8
 8004994:	ebb2 0a01 	subs.w	sl, r2, r1
 8004998:	4649      	mov	r1, r9
 800499a:	eb63 0b01 	sbc.w	fp, r3, r1
 800499e:	f04f 0200 	mov.w	r2, #0
 80049a2:	f04f 0300 	mov.w	r3, #0
 80049a6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80049aa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80049ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049b2:	4692      	mov	sl, r2
 80049b4:	469b      	mov	fp, r3
 80049b6:	4623      	mov	r3, r4
 80049b8:	eb1a 0303 	adds.w	r3, sl, r3
 80049bc:	623b      	str	r3, [r7, #32]
 80049be:	462b      	mov	r3, r5
 80049c0:	eb4b 0303 	adc.w	r3, fp, r3
 80049c4:	627b      	str	r3, [r7, #36]	; 0x24
 80049c6:	f04f 0200 	mov.w	r2, #0
 80049ca:	f04f 0300 	mov.w	r3, #0
 80049ce:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80049d2:	4629      	mov	r1, r5
 80049d4:	028b      	lsls	r3, r1, #10
 80049d6:	4621      	mov	r1, r4
 80049d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049dc:	4621      	mov	r1, r4
 80049de:	028a      	lsls	r2, r1, #10
 80049e0:	4610      	mov	r0, r2
 80049e2:	4619      	mov	r1, r3
 80049e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80049e8:	2200      	movs	r2, #0
 80049ea:	673b      	str	r3, [r7, #112]	; 0x70
 80049ec:	677a      	str	r2, [r7, #116]	; 0x74
 80049ee:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80049f2:	f7fc f969 	bl	8000cc8 <__aeabi_uldivmod>
 80049f6:	4602      	mov	r2, r0
 80049f8:	460b      	mov	r3, r1
 80049fa:	4613      	mov	r3, r2
 80049fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a00:	4b41      	ldr	r3, [pc, #260]	; (8004b08 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	0c1b      	lsrs	r3, r3, #16
 8004a06:	f003 0303 	and.w	r3, r3, #3
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	005b      	lsls	r3, r3, #1
 8004a0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004a12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004a22:	e0eb      	b.n	8004bfc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a24:	4b38      	ldr	r3, [pc, #224]	; (8004b08 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a30:	4b35      	ldr	r3, [pc, #212]	; (8004b08 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d06b      	beq.n	8004b14 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a3c:	4b32      	ldr	r3, [pc, #200]	; (8004b08 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	099b      	lsrs	r3, r3, #6
 8004a42:	2200      	movs	r2, #0
 8004a44:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a46:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a4e:	663b      	str	r3, [r7, #96]	; 0x60
 8004a50:	2300      	movs	r3, #0
 8004a52:	667b      	str	r3, [r7, #100]	; 0x64
 8004a54:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004a58:	4622      	mov	r2, r4
 8004a5a:	462b      	mov	r3, r5
 8004a5c:	f04f 0000 	mov.w	r0, #0
 8004a60:	f04f 0100 	mov.w	r1, #0
 8004a64:	0159      	lsls	r1, r3, #5
 8004a66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a6a:	0150      	lsls	r0, r2, #5
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4621      	mov	r1, r4
 8004a72:	1a51      	subs	r1, r2, r1
 8004a74:	61b9      	str	r1, [r7, #24]
 8004a76:	4629      	mov	r1, r5
 8004a78:	eb63 0301 	sbc.w	r3, r3, r1
 8004a7c:	61fb      	str	r3, [r7, #28]
 8004a7e:	f04f 0200 	mov.w	r2, #0
 8004a82:	f04f 0300 	mov.w	r3, #0
 8004a86:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004a8a:	4659      	mov	r1, fp
 8004a8c:	018b      	lsls	r3, r1, #6
 8004a8e:	4651      	mov	r1, sl
 8004a90:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a94:	4651      	mov	r1, sl
 8004a96:	018a      	lsls	r2, r1, #6
 8004a98:	4651      	mov	r1, sl
 8004a9a:	ebb2 0801 	subs.w	r8, r2, r1
 8004a9e:	4659      	mov	r1, fp
 8004aa0:	eb63 0901 	sbc.w	r9, r3, r1
 8004aa4:	f04f 0200 	mov.w	r2, #0
 8004aa8:	f04f 0300 	mov.w	r3, #0
 8004aac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ab0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ab4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ab8:	4690      	mov	r8, r2
 8004aba:	4699      	mov	r9, r3
 8004abc:	4623      	mov	r3, r4
 8004abe:	eb18 0303 	adds.w	r3, r8, r3
 8004ac2:	613b      	str	r3, [r7, #16]
 8004ac4:	462b      	mov	r3, r5
 8004ac6:	eb49 0303 	adc.w	r3, r9, r3
 8004aca:	617b      	str	r3, [r7, #20]
 8004acc:	f04f 0200 	mov.w	r2, #0
 8004ad0:	f04f 0300 	mov.w	r3, #0
 8004ad4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004ad8:	4629      	mov	r1, r5
 8004ada:	024b      	lsls	r3, r1, #9
 8004adc:	4621      	mov	r1, r4
 8004ade:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ae2:	4621      	mov	r1, r4
 8004ae4:	024a      	lsls	r2, r1, #9
 8004ae6:	4610      	mov	r0, r2
 8004ae8:	4619      	mov	r1, r3
 8004aea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004aee:	2200      	movs	r2, #0
 8004af0:	65bb      	str	r3, [r7, #88]	; 0x58
 8004af2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004af4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004af8:	f7fc f8e6 	bl	8000cc8 <__aeabi_uldivmod>
 8004afc:	4602      	mov	r2, r0
 8004afe:	460b      	mov	r3, r1
 8004b00:	4613      	mov	r3, r2
 8004b02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b06:	e065      	b.n	8004bd4 <HAL_RCC_GetSysClockFreq+0x420>
 8004b08:	40023800 	.word	0x40023800
 8004b0c:	00f42400 	.word	0x00f42400
 8004b10:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b14:	4b3d      	ldr	r3, [pc, #244]	; (8004c0c <HAL_RCC_GetSysClockFreq+0x458>)
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	099b      	lsrs	r3, r3, #6
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	4611      	mov	r1, r2
 8004b20:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b24:	653b      	str	r3, [r7, #80]	; 0x50
 8004b26:	2300      	movs	r3, #0
 8004b28:	657b      	str	r3, [r7, #84]	; 0x54
 8004b2a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004b2e:	4642      	mov	r2, r8
 8004b30:	464b      	mov	r3, r9
 8004b32:	f04f 0000 	mov.w	r0, #0
 8004b36:	f04f 0100 	mov.w	r1, #0
 8004b3a:	0159      	lsls	r1, r3, #5
 8004b3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b40:	0150      	lsls	r0, r2, #5
 8004b42:	4602      	mov	r2, r0
 8004b44:	460b      	mov	r3, r1
 8004b46:	4641      	mov	r1, r8
 8004b48:	1a51      	subs	r1, r2, r1
 8004b4a:	60b9      	str	r1, [r7, #8]
 8004b4c:	4649      	mov	r1, r9
 8004b4e:	eb63 0301 	sbc.w	r3, r3, r1
 8004b52:	60fb      	str	r3, [r7, #12]
 8004b54:	f04f 0200 	mov.w	r2, #0
 8004b58:	f04f 0300 	mov.w	r3, #0
 8004b5c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004b60:	4659      	mov	r1, fp
 8004b62:	018b      	lsls	r3, r1, #6
 8004b64:	4651      	mov	r1, sl
 8004b66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b6a:	4651      	mov	r1, sl
 8004b6c:	018a      	lsls	r2, r1, #6
 8004b6e:	4651      	mov	r1, sl
 8004b70:	1a54      	subs	r4, r2, r1
 8004b72:	4659      	mov	r1, fp
 8004b74:	eb63 0501 	sbc.w	r5, r3, r1
 8004b78:	f04f 0200 	mov.w	r2, #0
 8004b7c:	f04f 0300 	mov.w	r3, #0
 8004b80:	00eb      	lsls	r3, r5, #3
 8004b82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b86:	00e2      	lsls	r2, r4, #3
 8004b88:	4614      	mov	r4, r2
 8004b8a:	461d      	mov	r5, r3
 8004b8c:	4643      	mov	r3, r8
 8004b8e:	18e3      	adds	r3, r4, r3
 8004b90:	603b      	str	r3, [r7, #0]
 8004b92:	464b      	mov	r3, r9
 8004b94:	eb45 0303 	adc.w	r3, r5, r3
 8004b98:	607b      	str	r3, [r7, #4]
 8004b9a:	f04f 0200 	mov.w	r2, #0
 8004b9e:	f04f 0300 	mov.w	r3, #0
 8004ba2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ba6:	4629      	mov	r1, r5
 8004ba8:	028b      	lsls	r3, r1, #10
 8004baa:	4621      	mov	r1, r4
 8004bac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bb0:	4621      	mov	r1, r4
 8004bb2:	028a      	lsls	r2, r1, #10
 8004bb4:	4610      	mov	r0, r2
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bc0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004bc2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004bc6:	f7fc f87f 	bl	8000cc8 <__aeabi_uldivmod>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	460b      	mov	r3, r1
 8004bce:	4613      	mov	r3, r2
 8004bd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004bd4:	4b0d      	ldr	r3, [pc, #52]	; (8004c0c <HAL_RCC_GetSysClockFreq+0x458>)
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	0f1b      	lsrs	r3, r3, #28
 8004bda:	f003 0307 	and.w	r3, r3, #7
 8004bde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004be2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004be6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004bf2:	e003      	b.n	8004bfc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bf4:	4b06      	ldr	r3, [pc, #24]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004bf6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004bfa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bfc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	37b8      	adds	r7, #184	; 0xb8
 8004c04:	46bd      	mov	sp, r7
 8004c06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c0a:	bf00      	nop
 8004c0c:	40023800 	.word	0x40023800
 8004c10:	00f42400 	.word	0x00f42400

08004c14 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d101      	bne.n	8004c26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e28d      	b.n	8005142 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f000 8083 	beq.w	8004d3a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004c34:	4b94      	ldr	r3, [pc, #592]	; (8004e88 <HAL_RCC_OscConfig+0x274>)
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f003 030c 	and.w	r3, r3, #12
 8004c3c:	2b04      	cmp	r3, #4
 8004c3e:	d019      	beq.n	8004c74 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c40:	4b91      	ldr	r3, [pc, #580]	; (8004e88 <HAL_RCC_OscConfig+0x274>)
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004c48:	2b08      	cmp	r3, #8
 8004c4a:	d106      	bne.n	8004c5a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c4c:	4b8e      	ldr	r3, [pc, #568]	; (8004e88 <HAL_RCC_OscConfig+0x274>)
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c58:	d00c      	beq.n	8004c74 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c5a:	4b8b      	ldr	r3, [pc, #556]	; (8004e88 <HAL_RCC_OscConfig+0x274>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c62:	2b0c      	cmp	r3, #12
 8004c64:	d112      	bne.n	8004c8c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c66:	4b88      	ldr	r3, [pc, #544]	; (8004e88 <HAL_RCC_OscConfig+0x274>)
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c72:	d10b      	bne.n	8004c8c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c74:	4b84      	ldr	r3, [pc, #528]	; (8004e88 <HAL_RCC_OscConfig+0x274>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d05b      	beq.n	8004d38 <HAL_RCC_OscConfig+0x124>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d157      	bne.n	8004d38 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e25a      	b.n	8005142 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c94:	d106      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x90>
 8004c96:	4b7c      	ldr	r3, [pc, #496]	; (8004e88 <HAL_RCC_OscConfig+0x274>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a7b      	ldr	r2, [pc, #492]	; (8004e88 <HAL_RCC_OscConfig+0x274>)
 8004c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ca0:	6013      	str	r3, [r2, #0]
 8004ca2:	e01d      	b.n	8004ce0 <HAL_RCC_OscConfig+0xcc>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cac:	d10c      	bne.n	8004cc8 <HAL_RCC_OscConfig+0xb4>
 8004cae:	4b76      	ldr	r3, [pc, #472]	; (8004e88 <HAL_RCC_OscConfig+0x274>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a75      	ldr	r2, [pc, #468]	; (8004e88 <HAL_RCC_OscConfig+0x274>)
 8004cb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cb8:	6013      	str	r3, [r2, #0]
 8004cba:	4b73      	ldr	r3, [pc, #460]	; (8004e88 <HAL_RCC_OscConfig+0x274>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a72      	ldr	r2, [pc, #456]	; (8004e88 <HAL_RCC_OscConfig+0x274>)
 8004cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cc4:	6013      	str	r3, [r2, #0]
 8004cc6:	e00b      	b.n	8004ce0 <HAL_RCC_OscConfig+0xcc>
 8004cc8:	4b6f      	ldr	r3, [pc, #444]	; (8004e88 <HAL_RCC_OscConfig+0x274>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a6e      	ldr	r2, [pc, #440]	; (8004e88 <HAL_RCC_OscConfig+0x274>)
 8004cce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cd2:	6013      	str	r3, [r2, #0]
 8004cd4:	4b6c      	ldr	r3, [pc, #432]	; (8004e88 <HAL_RCC_OscConfig+0x274>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a6b      	ldr	r2, [pc, #428]	; (8004e88 <HAL_RCC_OscConfig+0x274>)
 8004cda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d013      	beq.n	8004d10 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce8:	f7fc ff4e 	bl	8001b88 <HAL_GetTick>
 8004cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cee:	e008      	b.n	8004d02 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cf0:	f7fc ff4a 	bl	8001b88 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b64      	cmp	r3, #100	; 0x64
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e21f      	b.n	8005142 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d02:	4b61      	ldr	r3, [pc, #388]	; (8004e88 <HAL_RCC_OscConfig+0x274>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d0f0      	beq.n	8004cf0 <HAL_RCC_OscConfig+0xdc>
 8004d0e:	e014      	b.n	8004d3a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d10:	f7fc ff3a 	bl	8001b88 <HAL_GetTick>
 8004d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d16:	e008      	b.n	8004d2a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d18:	f7fc ff36 	bl	8001b88 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b64      	cmp	r3, #100	; 0x64
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e20b      	b.n	8005142 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d2a:	4b57      	ldr	r3, [pc, #348]	; (8004e88 <HAL_RCC_OscConfig+0x274>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1f0      	bne.n	8004d18 <HAL_RCC_OscConfig+0x104>
 8004d36:	e000      	b.n	8004d3a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d06f      	beq.n	8004e26 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004d46:	4b50      	ldr	r3, [pc, #320]	; (8004e88 <HAL_RCC_OscConfig+0x274>)
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f003 030c 	and.w	r3, r3, #12
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d017      	beq.n	8004d82 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d52:	4b4d      	ldr	r3, [pc, #308]	; (8004e88 <HAL_RCC_OscConfig+0x274>)
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004d5a:	2b08      	cmp	r3, #8
 8004d5c:	d105      	bne.n	8004d6a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d5e:	4b4a      	ldr	r3, [pc, #296]	; (8004e88 <HAL_RCC_OscConfig+0x274>)
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00b      	beq.n	8004d82 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d6a:	4b47      	ldr	r3, [pc, #284]	; (8004e88 <HAL_RCC_OscConfig+0x274>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d72:	2b0c      	cmp	r3, #12
 8004d74:	d11c      	bne.n	8004db0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d76:	4b44      	ldr	r3, [pc, #272]	; (8004e88 <HAL_RCC_OscConfig+0x274>)
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d116      	bne.n	8004db0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d82:	4b41      	ldr	r3, [pc, #260]	; (8004e88 <HAL_RCC_OscConfig+0x274>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d005      	beq.n	8004d9a <HAL_RCC_OscConfig+0x186>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d001      	beq.n	8004d9a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e1d3      	b.n	8005142 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d9a:	4b3b      	ldr	r3, [pc, #236]	; (8004e88 <HAL_RCC_OscConfig+0x274>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	00db      	lsls	r3, r3, #3
 8004da8:	4937      	ldr	r1, [pc, #220]	; (8004e88 <HAL_RCC_OscConfig+0x274>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dae:	e03a      	b.n	8004e26 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d020      	beq.n	8004dfa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004db8:	4b34      	ldr	r3, [pc, #208]	; (8004e8c <HAL_RCC_OscConfig+0x278>)
 8004dba:	2201      	movs	r2, #1
 8004dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dbe:	f7fc fee3 	bl	8001b88 <HAL_GetTick>
 8004dc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dc4:	e008      	b.n	8004dd8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dc6:	f7fc fedf 	bl	8001b88 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d901      	bls.n	8004dd8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e1b4      	b.n	8005142 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dd8:	4b2b      	ldr	r3, [pc, #172]	; (8004e88 <HAL_RCC_OscConfig+0x274>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d0f0      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004de4:	4b28      	ldr	r3, [pc, #160]	; (8004e88 <HAL_RCC_OscConfig+0x274>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	00db      	lsls	r3, r3, #3
 8004df2:	4925      	ldr	r1, [pc, #148]	; (8004e88 <HAL_RCC_OscConfig+0x274>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	600b      	str	r3, [r1, #0]
 8004df8:	e015      	b.n	8004e26 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dfa:	4b24      	ldr	r3, [pc, #144]	; (8004e8c <HAL_RCC_OscConfig+0x278>)
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e00:	f7fc fec2 	bl	8001b88 <HAL_GetTick>
 8004e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e06:	e008      	b.n	8004e1a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e08:	f7fc febe 	bl	8001b88 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d901      	bls.n	8004e1a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e193      	b.n	8005142 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e1a:	4b1b      	ldr	r3, [pc, #108]	; (8004e88 <HAL_RCC_OscConfig+0x274>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1f0      	bne.n	8004e08 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0308 	and.w	r3, r3, #8
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d036      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d016      	beq.n	8004e68 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e3a:	4b15      	ldr	r3, [pc, #84]	; (8004e90 <HAL_RCC_OscConfig+0x27c>)
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e40:	f7fc fea2 	bl	8001b88 <HAL_GetTick>
 8004e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e46:	e008      	b.n	8004e5a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e48:	f7fc fe9e 	bl	8001b88 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d901      	bls.n	8004e5a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e173      	b.n	8005142 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e5a:	4b0b      	ldr	r3, [pc, #44]	; (8004e88 <HAL_RCC_OscConfig+0x274>)
 8004e5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d0f0      	beq.n	8004e48 <HAL_RCC_OscConfig+0x234>
 8004e66:	e01b      	b.n	8004ea0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e68:	4b09      	ldr	r3, [pc, #36]	; (8004e90 <HAL_RCC_OscConfig+0x27c>)
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e6e:	f7fc fe8b 	bl	8001b88 <HAL_GetTick>
 8004e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e74:	e00e      	b.n	8004e94 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e76:	f7fc fe87 	bl	8001b88 <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d907      	bls.n	8004e94 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e15c      	b.n	8005142 <HAL_RCC_OscConfig+0x52e>
 8004e88:	40023800 	.word	0x40023800
 8004e8c:	42470000 	.word	0x42470000
 8004e90:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e94:	4b8a      	ldr	r3, [pc, #552]	; (80050c0 <HAL_RCC_OscConfig+0x4ac>)
 8004e96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e98:	f003 0302 	and.w	r3, r3, #2
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1ea      	bne.n	8004e76 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0304 	and.w	r3, r3, #4
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f000 8097 	beq.w	8004fdc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004eb2:	4b83      	ldr	r3, [pc, #524]	; (80050c0 <HAL_RCC_OscConfig+0x4ac>)
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10f      	bne.n	8004ede <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	60bb      	str	r3, [r7, #8]
 8004ec2:	4b7f      	ldr	r3, [pc, #508]	; (80050c0 <HAL_RCC_OscConfig+0x4ac>)
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec6:	4a7e      	ldr	r2, [pc, #504]	; (80050c0 <HAL_RCC_OscConfig+0x4ac>)
 8004ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8004ece:	4b7c      	ldr	r3, [pc, #496]	; (80050c0 <HAL_RCC_OscConfig+0x4ac>)
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ed6:	60bb      	str	r3, [r7, #8]
 8004ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eda:	2301      	movs	r3, #1
 8004edc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ede:	4b79      	ldr	r3, [pc, #484]	; (80050c4 <HAL_RCC_OscConfig+0x4b0>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d118      	bne.n	8004f1c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004eea:	4b76      	ldr	r3, [pc, #472]	; (80050c4 <HAL_RCC_OscConfig+0x4b0>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a75      	ldr	r2, [pc, #468]	; (80050c4 <HAL_RCC_OscConfig+0x4b0>)
 8004ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ef4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ef6:	f7fc fe47 	bl	8001b88 <HAL_GetTick>
 8004efa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004efc:	e008      	b.n	8004f10 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004efe:	f7fc fe43 	bl	8001b88 <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d901      	bls.n	8004f10 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e118      	b.n	8005142 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f10:	4b6c      	ldr	r3, [pc, #432]	; (80050c4 <HAL_RCC_OscConfig+0x4b0>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d0f0      	beq.n	8004efe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d106      	bne.n	8004f32 <HAL_RCC_OscConfig+0x31e>
 8004f24:	4b66      	ldr	r3, [pc, #408]	; (80050c0 <HAL_RCC_OscConfig+0x4ac>)
 8004f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f28:	4a65      	ldr	r2, [pc, #404]	; (80050c0 <HAL_RCC_OscConfig+0x4ac>)
 8004f2a:	f043 0301 	orr.w	r3, r3, #1
 8004f2e:	6713      	str	r3, [r2, #112]	; 0x70
 8004f30:	e01c      	b.n	8004f6c <HAL_RCC_OscConfig+0x358>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	2b05      	cmp	r3, #5
 8004f38:	d10c      	bne.n	8004f54 <HAL_RCC_OscConfig+0x340>
 8004f3a:	4b61      	ldr	r3, [pc, #388]	; (80050c0 <HAL_RCC_OscConfig+0x4ac>)
 8004f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f3e:	4a60      	ldr	r2, [pc, #384]	; (80050c0 <HAL_RCC_OscConfig+0x4ac>)
 8004f40:	f043 0304 	orr.w	r3, r3, #4
 8004f44:	6713      	str	r3, [r2, #112]	; 0x70
 8004f46:	4b5e      	ldr	r3, [pc, #376]	; (80050c0 <HAL_RCC_OscConfig+0x4ac>)
 8004f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f4a:	4a5d      	ldr	r2, [pc, #372]	; (80050c0 <HAL_RCC_OscConfig+0x4ac>)
 8004f4c:	f043 0301 	orr.w	r3, r3, #1
 8004f50:	6713      	str	r3, [r2, #112]	; 0x70
 8004f52:	e00b      	b.n	8004f6c <HAL_RCC_OscConfig+0x358>
 8004f54:	4b5a      	ldr	r3, [pc, #360]	; (80050c0 <HAL_RCC_OscConfig+0x4ac>)
 8004f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f58:	4a59      	ldr	r2, [pc, #356]	; (80050c0 <HAL_RCC_OscConfig+0x4ac>)
 8004f5a:	f023 0301 	bic.w	r3, r3, #1
 8004f5e:	6713      	str	r3, [r2, #112]	; 0x70
 8004f60:	4b57      	ldr	r3, [pc, #348]	; (80050c0 <HAL_RCC_OscConfig+0x4ac>)
 8004f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f64:	4a56      	ldr	r2, [pc, #344]	; (80050c0 <HAL_RCC_OscConfig+0x4ac>)
 8004f66:	f023 0304 	bic.w	r3, r3, #4
 8004f6a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d015      	beq.n	8004fa0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f74:	f7fc fe08 	bl	8001b88 <HAL_GetTick>
 8004f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f7a:	e00a      	b.n	8004f92 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f7c:	f7fc fe04 	bl	8001b88 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d901      	bls.n	8004f92 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e0d7      	b.n	8005142 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f92:	4b4b      	ldr	r3, [pc, #300]	; (80050c0 <HAL_RCC_OscConfig+0x4ac>)
 8004f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d0ee      	beq.n	8004f7c <HAL_RCC_OscConfig+0x368>
 8004f9e:	e014      	b.n	8004fca <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fa0:	f7fc fdf2 	bl	8001b88 <HAL_GetTick>
 8004fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fa6:	e00a      	b.n	8004fbe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fa8:	f7fc fdee 	bl	8001b88 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e0c1      	b.n	8005142 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fbe:	4b40      	ldr	r3, [pc, #256]	; (80050c0 <HAL_RCC_OscConfig+0x4ac>)
 8004fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1ee      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fca:	7dfb      	ldrb	r3, [r7, #23]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d105      	bne.n	8004fdc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fd0:	4b3b      	ldr	r3, [pc, #236]	; (80050c0 <HAL_RCC_OscConfig+0x4ac>)
 8004fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd4:	4a3a      	ldr	r2, [pc, #232]	; (80050c0 <HAL_RCC_OscConfig+0x4ac>)
 8004fd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fda:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	699b      	ldr	r3, [r3, #24]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f000 80ad 	beq.w	8005140 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fe6:	4b36      	ldr	r3, [pc, #216]	; (80050c0 <HAL_RCC_OscConfig+0x4ac>)
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f003 030c 	and.w	r3, r3, #12
 8004fee:	2b08      	cmp	r3, #8
 8004ff0:	d060      	beq.n	80050b4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d145      	bne.n	8005086 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ffa:	4b33      	ldr	r3, [pc, #204]	; (80050c8 <HAL_RCC_OscConfig+0x4b4>)
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005000:	f7fc fdc2 	bl	8001b88 <HAL_GetTick>
 8005004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005006:	e008      	b.n	800501a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005008:	f7fc fdbe 	bl	8001b88 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b02      	cmp	r3, #2
 8005014:	d901      	bls.n	800501a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e093      	b.n	8005142 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800501a:	4b29      	ldr	r3, [pc, #164]	; (80050c0 <HAL_RCC_OscConfig+0x4ac>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1f0      	bne.n	8005008 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	69da      	ldr	r2, [r3, #28]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a1b      	ldr	r3, [r3, #32]
 800502e:	431a      	orrs	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005034:	019b      	lsls	r3, r3, #6
 8005036:	431a      	orrs	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503c:	085b      	lsrs	r3, r3, #1
 800503e:	3b01      	subs	r3, #1
 8005040:	041b      	lsls	r3, r3, #16
 8005042:	431a      	orrs	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005048:	061b      	lsls	r3, r3, #24
 800504a:	431a      	orrs	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005050:	071b      	lsls	r3, r3, #28
 8005052:	491b      	ldr	r1, [pc, #108]	; (80050c0 <HAL_RCC_OscConfig+0x4ac>)
 8005054:	4313      	orrs	r3, r2
 8005056:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005058:	4b1b      	ldr	r3, [pc, #108]	; (80050c8 <HAL_RCC_OscConfig+0x4b4>)
 800505a:	2201      	movs	r2, #1
 800505c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800505e:	f7fc fd93 	bl	8001b88 <HAL_GetTick>
 8005062:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005064:	e008      	b.n	8005078 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005066:	f7fc fd8f 	bl	8001b88 <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	2b02      	cmp	r3, #2
 8005072:	d901      	bls.n	8005078 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e064      	b.n	8005142 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005078:	4b11      	ldr	r3, [pc, #68]	; (80050c0 <HAL_RCC_OscConfig+0x4ac>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d0f0      	beq.n	8005066 <HAL_RCC_OscConfig+0x452>
 8005084:	e05c      	b.n	8005140 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005086:	4b10      	ldr	r3, [pc, #64]	; (80050c8 <HAL_RCC_OscConfig+0x4b4>)
 8005088:	2200      	movs	r2, #0
 800508a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800508c:	f7fc fd7c 	bl	8001b88 <HAL_GetTick>
 8005090:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005092:	e008      	b.n	80050a6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005094:	f7fc fd78 	bl	8001b88 <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d901      	bls.n	80050a6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e04d      	b.n	8005142 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050a6:	4b06      	ldr	r3, [pc, #24]	; (80050c0 <HAL_RCC_OscConfig+0x4ac>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d1f0      	bne.n	8005094 <HAL_RCC_OscConfig+0x480>
 80050b2:	e045      	b.n	8005140 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d107      	bne.n	80050cc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e040      	b.n	8005142 <HAL_RCC_OscConfig+0x52e>
 80050c0:	40023800 	.word	0x40023800
 80050c4:	40007000 	.word	0x40007000
 80050c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050cc:	4b1f      	ldr	r3, [pc, #124]	; (800514c <HAL_RCC_OscConfig+0x538>)
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d030      	beq.n	800513c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d129      	bne.n	800513c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d122      	bne.n	800513c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80050fc:	4013      	ands	r3, r2
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005102:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005104:	4293      	cmp	r3, r2
 8005106:	d119      	bne.n	800513c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005112:	085b      	lsrs	r3, r3, #1
 8005114:	3b01      	subs	r3, #1
 8005116:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005118:	429a      	cmp	r2, r3
 800511a:	d10f      	bne.n	800513c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005126:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005128:	429a      	cmp	r2, r3
 800512a:	d107      	bne.n	800513c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005136:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005138:	429a      	cmp	r2, r3
 800513a:	d001      	beq.n	8005140 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e000      	b.n	8005142 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3718      	adds	r7, #24
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	40023800 	.word	0x40023800

08005150 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e07b      	b.n	800525a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005166:	2b00      	cmp	r3, #0
 8005168:	d108      	bne.n	800517c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005172:	d009      	beq.n	8005188 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	61da      	str	r2, [r3, #28]
 800517a:	e005      	b.n	8005188 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b00      	cmp	r3, #0
 8005198:	d106      	bne.n	80051a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f7fc fa1c 	bl	80015e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2202      	movs	r2, #2
 80051ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80051d0:	431a      	orrs	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051da:	431a      	orrs	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	f003 0302 	and.w	r3, r3, #2
 80051e4:	431a      	orrs	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	431a      	orrs	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051f8:	431a      	orrs	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005202:	431a      	orrs	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a1b      	ldr	r3, [r3, #32]
 8005208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800520c:	ea42 0103 	orr.w	r1, r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005214:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	430a      	orrs	r2, r1
 800521e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	0c1b      	lsrs	r3, r3, #16
 8005226:	f003 0104 	and.w	r1, r3, #4
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522e:	f003 0210 	and.w	r2, r3, #16
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	430a      	orrs	r2, r1
 8005238:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	69da      	ldr	r2, [r3, #28]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005248:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3708      	adds	r7, #8
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
	...

08005264 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b086      	sub	sp, #24
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	4613      	mov	r3, r2
 8005270:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005272:	2300      	movs	r3, #0
 8005274:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d110      	bne.n	80052a0 <HAL_SPI_Receive_DMA+0x3c>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005286:	d10b      	bne.n	80052a0 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2204      	movs	r2, #4
 800528c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8005290:	88fb      	ldrh	r3, [r7, #6]
 8005292:	68ba      	ldr	r2, [r7, #8]
 8005294:	68b9      	ldr	r1, [r7, #8]
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	f000 f8ac 	bl	80053f4 <HAL_SPI_TransmitReceive_DMA>
 800529c:	4603      	mov	r3, r0
 800529e:	e09f      	b.n	80053e0 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d101      	bne.n	80052ae <HAL_SPI_Receive_DMA+0x4a>
 80052aa:	2302      	movs	r3, #2
 80052ac:	e098      	b.n	80053e0 <HAL_SPI_Receive_DMA+0x17c>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d002      	beq.n	80052c8 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 80052c2:	2302      	movs	r3, #2
 80052c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80052c6:	e086      	b.n	80053d6 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d002      	beq.n	80052d4 <HAL_SPI_Receive_DMA+0x70>
 80052ce:	88fb      	ldrh	r3, [r7, #6]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d102      	bne.n	80052da <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80052d8:	e07d      	b.n	80053d6 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2204      	movs	r2, #4
 80052de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	68ba      	ldr	r2, [r7, #8]
 80052ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	88fa      	ldrh	r2, [r7, #6]
 80052f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	88fa      	ldrh	r2, [r7, #6]
 80052f8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800531a:	d10f      	bne.n	800533c <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800532a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800533a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005340:	4a29      	ldr	r2, [pc, #164]	; (80053e8 <HAL_SPI_Receive_DMA+0x184>)
 8005342:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005348:	4a28      	ldr	r2, [pc, #160]	; (80053ec <HAL_SPI_Receive_DMA+0x188>)
 800534a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005350:	4a27      	ldr	r2, [pc, #156]	; (80053f0 <HAL_SPI_Receive_DMA+0x18c>)
 8005352:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005358:	2200      	movs	r2, #0
 800535a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	330c      	adds	r3, #12
 8005366:	4619      	mov	r1, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005372:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005374:	f7fc fdf8 	bl	8001f68 <HAL_DMA_Start_IT>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00c      	beq.n	8005398 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005382:	f043 0210 	orr.w	r2, r3, #16
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8005396:	e01e      	b.n	80053d6 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a2:	2b40      	cmp	r3, #64	; 0x40
 80053a4:	d007      	beq.n	80053b6 <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053b4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f042 0220 	orr.w	r2, r2, #32
 80053c4:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	685a      	ldr	r2, [r3, #4]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f042 0201 	orr.w	r2, r2, #1
 80053d4:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80053de:	7dfb      	ldrb	r3, [r7, #23]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3718      	adds	r7, #24
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	08005795 	.word	0x08005795
 80053ec:	0800565d 	.word	0x0800565d
 80053f0:	080057cd 	.word	0x080057cd

080053f4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b086      	sub	sp, #24
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
 8005400:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005402:	2300      	movs	r3, #0
 8005404:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800540c:	2b01      	cmp	r3, #1
 800540e:	d101      	bne.n	8005414 <HAL_SPI_TransmitReceive_DMA+0x20>
 8005410:	2302      	movs	r3, #2
 8005412:	e0e3      	b.n	80055dc <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005422:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800542a:	7dbb      	ldrb	r3, [r7, #22]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d00d      	beq.n	800544c <HAL_SPI_TransmitReceive_DMA+0x58>
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005436:	d106      	bne.n	8005446 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d102      	bne.n	8005446 <HAL_SPI_TransmitReceive_DMA+0x52>
 8005440:	7dbb      	ldrb	r3, [r7, #22]
 8005442:	2b04      	cmp	r3, #4
 8005444:	d002      	beq.n	800544c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8005446:	2302      	movs	r3, #2
 8005448:	75fb      	strb	r3, [r7, #23]
    goto error;
 800544a:	e0c2      	b.n	80055d2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d005      	beq.n	800545e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d002      	beq.n	800545e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005458:	887b      	ldrh	r3, [r7, #2]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d102      	bne.n	8005464 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005462:	e0b6      	b.n	80055d2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800546a:	b2db      	uxtb	r3, r3
 800546c:	2b04      	cmp	r3, #4
 800546e:	d003      	beq.n	8005478 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2205      	movs	r2, #5
 8005474:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	887a      	ldrh	r2, [r7, #2]
 8005488:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	887a      	ldrh	r2, [r7, #2]
 800548e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	887a      	ldrh	r2, [r7, #2]
 800549a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	887a      	ldrh	r2, [r7, #2]
 80054a0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	2b04      	cmp	r3, #4
 80054b8:	d108      	bne.n	80054cc <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054be:	4a49      	ldr	r2, [pc, #292]	; (80055e4 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 80054c0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054c6:	4a48      	ldr	r2, [pc, #288]	; (80055e8 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 80054c8:	63da      	str	r2, [r3, #60]	; 0x3c
 80054ca:	e007      	b.n	80054dc <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054d0:	4a46      	ldr	r2, [pc, #280]	; (80055ec <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 80054d2:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054d8:	4a45      	ldr	r2, [pc, #276]	; (80055f0 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 80054da:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054e0:	4a44      	ldr	r2, [pc, #272]	; (80055f4 <HAL_SPI_TransmitReceive_DMA+0x200>)
 80054e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054e8:	2200      	movs	r2, #0
 80054ea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	330c      	adds	r3, #12
 80054f6:	4619      	mov	r1, r3
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fc:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005502:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005504:	f7fc fd30 	bl	8001f68 <HAL_DMA_Start_IT>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00c      	beq.n	8005528 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005512:	f043 0210 	orr.w	r2, r3, #16
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2201      	movs	r2, #1
 8005522:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8005526:	e054      	b.n	80055d2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	685a      	ldr	r2, [r3, #4]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f042 0201 	orr.w	r2, r2, #1
 8005536:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800553c:	2200      	movs	r2, #0
 800553e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005544:	2200      	movs	r2, #0
 8005546:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800554c:	2200      	movs	r2, #0
 800554e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005554:	2200      	movs	r2, #0
 8005556:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005560:	4619      	mov	r1, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	330c      	adds	r3, #12
 8005568:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800556e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005570:	f7fc fcfa 	bl	8001f68 <HAL_DMA_Start_IT>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00c      	beq.n	8005594 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800557e:	f043 0210 	orr.w	r2, r3, #16
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2201      	movs	r2, #1
 800558e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8005592:	e01e      	b.n	80055d2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800559e:	2b40      	cmp	r3, #64	; 0x40
 80055a0:	d007      	beq.n	80055b2 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055b0:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	685a      	ldr	r2, [r3, #4]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f042 0220 	orr.w	r2, r2, #32
 80055c0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	685a      	ldr	r2, [r3, #4]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f042 0202 	orr.w	r2, r2, #2
 80055d0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80055da:	7dfb      	ldrb	r3, [r7, #23]
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3718      	adds	r7, #24
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	08005795 	.word	0x08005795
 80055e8:	0800565d 	.word	0x0800565d
 80055ec:	080057b1 	.word	0x080057b1
 80055f0:	08005705 	.word	0x08005705
 80055f4:	080057cd 	.word	0x080057cd

080055f8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005650:	bf00      	nop
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005668:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800566a:	f7fc fa8d 	bl	8001b88 <HAL_GetTick>
 800566e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800567a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800567e:	d03b      	beq.n	80056f8 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	685a      	ldr	r2, [r3, #4]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f022 0220 	bic.w	r2, r2, #32
 800568e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10d      	bne.n	80056b4 <SPI_DMAReceiveCplt+0x58>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056a0:	d108      	bne.n	80056b4 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	685a      	ldr	r2, [r3, #4]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f022 0203 	bic.w	r2, r2, #3
 80056b0:	605a      	str	r2, [r3, #4]
 80056b2:	e007      	b.n	80056c4 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	685a      	ldr	r2, [r3, #4]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f022 0201 	bic.w	r2, r2, #1
 80056c2:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	2164      	movs	r1, #100	; 0x64
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f000 f927 	bl	800591c <SPI_EndRxTransaction>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d002      	beq.n	80056da <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2220      	movs	r2, #32
 80056d8:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d003      	beq.n	80056f8 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f7ff ffa9 	bl	8005648 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80056f6:	e002      	b.n	80056fe <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f7ff ff7d 	bl	80055f8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80056fe:	3710      	adds	r7, #16
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005710:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005712:	f7fc fa39 	bl	8001b88 <HAL_GetTick>
 8005716:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005726:	d02f      	beq.n	8005788 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	685a      	ldr	r2, [r3, #4]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f022 0220 	bic.w	r2, r2, #32
 8005736:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005738:	68ba      	ldr	r2, [r7, #8]
 800573a:	2164      	movs	r1, #100	; 0x64
 800573c:	68f8      	ldr	r0, [r7, #12]
 800573e:	f000 f953 	bl	80059e8 <SPI_EndRxTxTransaction>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d005      	beq.n	8005754 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800574c:	f043 0220 	orr.w	r2, r3, #32
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	685a      	ldr	r2, [r3, #4]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f022 0203 	bic.w	r2, r2, #3
 8005762:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800577c:	2b00      	cmp	r3, #0
 800577e:	d003      	beq.n	8005788 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f7ff ff61 	bl	8005648 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005786:	e002      	b.n	800578e <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8005788:	68f8      	ldr	r0, [r7, #12]
 800578a:	f7ff ff3f 	bl	800560c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800578e:	3710      	adds	r7, #16
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80057a2:	68f8      	ldr	r0, [r7, #12]
 80057a4:	f7ff ff3c 	bl	8005620 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80057a8:	bf00      	nop
 80057aa:	3710      	adds	r7, #16
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057bc:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	f7ff ff38 	bl	8005634 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80057c4:	bf00      	nop
 80057c6:	3710      	adds	r7, #16
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	685a      	ldr	r2, [r3, #4]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f022 0203 	bic.w	r2, r2, #3
 80057e8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ee:	f043 0210 	orr.w	r2, r3, #16
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	f7ff ff22 	bl	8005648 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005804:	bf00      	nop
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b088      	sub	sp, #32
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	603b      	str	r3, [r7, #0]
 8005818:	4613      	mov	r3, r2
 800581a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800581c:	f7fc f9b4 	bl	8001b88 <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005824:	1a9b      	subs	r3, r3, r2
 8005826:	683a      	ldr	r2, [r7, #0]
 8005828:	4413      	add	r3, r2
 800582a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800582c:	f7fc f9ac 	bl	8001b88 <HAL_GetTick>
 8005830:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005832:	4b39      	ldr	r3, [pc, #228]	; (8005918 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	015b      	lsls	r3, r3, #5
 8005838:	0d1b      	lsrs	r3, r3, #20
 800583a:	69fa      	ldr	r2, [r7, #28]
 800583c:	fb02 f303 	mul.w	r3, r2, r3
 8005840:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005842:	e054      	b.n	80058ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800584a:	d050      	beq.n	80058ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800584c:	f7fc f99c 	bl	8001b88 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	69fa      	ldr	r2, [r7, #28]
 8005858:	429a      	cmp	r2, r3
 800585a:	d902      	bls.n	8005862 <SPI_WaitFlagStateUntilTimeout+0x56>
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d13d      	bne.n	80058de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005870:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800587a:	d111      	bne.n	80058a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005884:	d004      	beq.n	8005890 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800588e:	d107      	bne.n	80058a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800589e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058a8:	d10f      	bne.n	80058ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058b8:	601a      	str	r2, [r3, #0]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2201      	movs	r2, #1
 80058ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e017      	b.n	800590e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d101      	bne.n	80058e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80058e4:	2300      	movs	r3, #0
 80058e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	3b01      	subs	r3, #1
 80058ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	689a      	ldr	r2, [r3, #8]
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	4013      	ands	r3, r2
 80058f8:	68ba      	ldr	r2, [r7, #8]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	bf0c      	ite	eq
 80058fe:	2301      	moveq	r3, #1
 8005900:	2300      	movne	r3, #0
 8005902:	b2db      	uxtb	r3, r3
 8005904:	461a      	mov	r2, r3
 8005906:	79fb      	ldrb	r3, [r7, #7]
 8005908:	429a      	cmp	r2, r3
 800590a:	d19b      	bne.n	8005844 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3720      	adds	r7, #32
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	20000010 	.word	0x20000010

0800591c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b086      	sub	sp, #24
 8005920:	af02      	add	r7, sp, #8
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005930:	d111      	bne.n	8005956 <SPI_EndRxTransaction+0x3a>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800593a:	d004      	beq.n	8005946 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005944:	d107      	bne.n	8005956 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005954:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800595e:	d12a      	bne.n	80059b6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005968:	d012      	beq.n	8005990 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	9300      	str	r3, [sp, #0]
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	2200      	movs	r2, #0
 8005972:	2180      	movs	r1, #128	; 0x80
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	f7ff ff49 	bl	800580c <SPI_WaitFlagStateUntilTimeout>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d02d      	beq.n	80059dc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005984:	f043 0220 	orr.w	r2, r3, #32
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e026      	b.n	80059de <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	9300      	str	r3, [sp, #0]
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	2200      	movs	r2, #0
 8005998:	2101      	movs	r1, #1
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f7ff ff36 	bl	800580c <SPI_WaitFlagStateUntilTimeout>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d01a      	beq.n	80059dc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059aa:	f043 0220 	orr.w	r2, r3, #32
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e013      	b.n	80059de <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	9300      	str	r3, [sp, #0]
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	2200      	movs	r2, #0
 80059be:	2101      	movs	r1, #1
 80059c0:	68f8      	ldr	r0, [r7, #12]
 80059c2:	f7ff ff23 	bl	800580c <SPI_WaitFlagStateUntilTimeout>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d007      	beq.n	80059dc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d0:	f043 0220 	orr.w	r2, r3, #32
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e000      	b.n	80059de <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
	...

080059e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b088      	sub	sp, #32
 80059ec:	af02      	add	r7, sp, #8
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80059f4:	4b1b      	ldr	r3, [pc, #108]	; (8005a64 <SPI_EndRxTxTransaction+0x7c>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a1b      	ldr	r2, [pc, #108]	; (8005a68 <SPI_EndRxTxTransaction+0x80>)
 80059fa:	fba2 2303 	umull	r2, r3, r2, r3
 80059fe:	0d5b      	lsrs	r3, r3, #21
 8005a00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a04:	fb02 f303 	mul.w	r3, r2, r3
 8005a08:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a12:	d112      	bne.n	8005a3a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	9300      	str	r3, [sp, #0]
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	2180      	movs	r1, #128	; 0x80
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f7ff fef4 	bl	800580c <SPI_WaitFlagStateUntilTimeout>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d016      	beq.n	8005a58 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a2e:	f043 0220 	orr.w	r2, r3, #32
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	e00f      	b.n	8005a5a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00a      	beq.n	8005a56 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	3b01      	subs	r3, #1
 8005a44:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a50:	2b80      	cmp	r3, #128	; 0x80
 8005a52:	d0f2      	beq.n	8005a3a <SPI_EndRxTxTransaction+0x52>
 8005a54:	e000      	b.n	8005a58 <SPI_EndRxTxTransaction+0x70>
        break;
 8005a56:	bf00      	nop
  }

  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3718      	adds	r7, #24
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	20000010 	.word	0x20000010
 8005a68:	165e9f81 	.word	0x165e9f81

08005a6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d101      	bne.n	8005a7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e041      	b.n	8005b02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d106      	bne.n	8005a98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7fb fe20 	bl	80016d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2202      	movs	r2, #2
 8005a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	3304      	adds	r3, #4
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	4610      	mov	r0, r2
 8005aac:	f000 fad8 	bl	8006060 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3708      	adds	r7, #8
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b082      	sub	sp, #8
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d101      	bne.n	8005b1c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e041      	b.n	8005ba0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d106      	bne.n	8005b36 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 f839 	bl	8005ba8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2202      	movs	r2, #2
 8005b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	3304      	adds	r3, #4
 8005b46:	4619      	mov	r1, r3
 8005b48:	4610      	mov	r0, r2
 8005b4a:	f000 fa89 	bl	8006060 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2201      	movs	r2, #1
 8005b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3708      	adds	r7, #8
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005bb0:	bf00      	nop
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d109      	bne.n	8005be0 <HAL_TIM_PWM_Start+0x24>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	bf14      	ite	ne
 8005bd8:	2301      	movne	r3, #1
 8005bda:	2300      	moveq	r3, #0
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	e022      	b.n	8005c26 <HAL_TIM_PWM_Start+0x6a>
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	2b04      	cmp	r3, #4
 8005be4:	d109      	bne.n	8005bfa <HAL_TIM_PWM_Start+0x3e>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	bf14      	ite	ne
 8005bf2:	2301      	movne	r3, #1
 8005bf4:	2300      	moveq	r3, #0
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	e015      	b.n	8005c26 <HAL_TIM_PWM_Start+0x6a>
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	2b08      	cmp	r3, #8
 8005bfe:	d109      	bne.n	8005c14 <HAL_TIM_PWM_Start+0x58>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	bf14      	ite	ne
 8005c0c:	2301      	movne	r3, #1
 8005c0e:	2300      	moveq	r3, #0
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	e008      	b.n	8005c26 <HAL_TIM_PWM_Start+0x6a>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	bf14      	ite	ne
 8005c20:	2301      	movne	r3, #1
 8005c22:	2300      	moveq	r3, #0
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d001      	beq.n	8005c2e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e07c      	b.n	8005d28 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d104      	bne.n	8005c3e <HAL_TIM_PWM_Start+0x82>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2202      	movs	r2, #2
 8005c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c3c:	e013      	b.n	8005c66 <HAL_TIM_PWM_Start+0xaa>
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	2b04      	cmp	r3, #4
 8005c42:	d104      	bne.n	8005c4e <HAL_TIM_PWM_Start+0x92>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2202      	movs	r2, #2
 8005c48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c4c:	e00b      	b.n	8005c66 <HAL_TIM_PWM_Start+0xaa>
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	2b08      	cmp	r3, #8
 8005c52:	d104      	bne.n	8005c5e <HAL_TIM_PWM_Start+0xa2>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2202      	movs	r2, #2
 8005c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c5c:	e003      	b.n	8005c66 <HAL_TIM_PWM_Start+0xaa>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2202      	movs	r2, #2
 8005c62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	6839      	ldr	r1, [r7, #0]
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f000 fce0 	bl	8006634 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a2d      	ldr	r2, [pc, #180]	; (8005d30 <HAL_TIM_PWM_Start+0x174>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d004      	beq.n	8005c88 <HAL_TIM_PWM_Start+0xcc>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a2c      	ldr	r2, [pc, #176]	; (8005d34 <HAL_TIM_PWM_Start+0x178>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d101      	bne.n	8005c8c <HAL_TIM_PWM_Start+0xd0>
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e000      	b.n	8005c8e <HAL_TIM_PWM_Start+0xd2>
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d007      	beq.n	8005ca2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ca0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a22      	ldr	r2, [pc, #136]	; (8005d30 <HAL_TIM_PWM_Start+0x174>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d022      	beq.n	8005cf2 <HAL_TIM_PWM_Start+0x136>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cb4:	d01d      	beq.n	8005cf2 <HAL_TIM_PWM_Start+0x136>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a1f      	ldr	r2, [pc, #124]	; (8005d38 <HAL_TIM_PWM_Start+0x17c>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d018      	beq.n	8005cf2 <HAL_TIM_PWM_Start+0x136>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a1d      	ldr	r2, [pc, #116]	; (8005d3c <HAL_TIM_PWM_Start+0x180>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d013      	beq.n	8005cf2 <HAL_TIM_PWM_Start+0x136>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a1c      	ldr	r2, [pc, #112]	; (8005d40 <HAL_TIM_PWM_Start+0x184>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d00e      	beq.n	8005cf2 <HAL_TIM_PWM_Start+0x136>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a16      	ldr	r2, [pc, #88]	; (8005d34 <HAL_TIM_PWM_Start+0x178>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d009      	beq.n	8005cf2 <HAL_TIM_PWM_Start+0x136>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a18      	ldr	r2, [pc, #96]	; (8005d44 <HAL_TIM_PWM_Start+0x188>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d004      	beq.n	8005cf2 <HAL_TIM_PWM_Start+0x136>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a16      	ldr	r2, [pc, #88]	; (8005d48 <HAL_TIM_PWM_Start+0x18c>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d111      	bne.n	8005d16 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	f003 0307 	and.w	r3, r3, #7
 8005cfc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2b06      	cmp	r3, #6
 8005d02:	d010      	beq.n	8005d26 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f042 0201 	orr.w	r2, r2, #1
 8005d12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d14:	e007      	b.n	8005d26 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f042 0201 	orr.w	r2, r2, #1
 8005d24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3710      	adds	r7, #16
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	40010000 	.word	0x40010000
 8005d34:	40010400 	.word	0x40010400
 8005d38:	40000400 	.word	0x40000400
 8005d3c:	40000800 	.word	0x40000800
 8005d40:	40000c00 	.word	0x40000c00
 8005d44:	40014000 	.word	0x40014000
 8005d48:	40001800 	.word	0x40001800

08005d4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d101      	bne.n	8005d6a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d66:	2302      	movs	r3, #2
 8005d68:	e0ae      	b.n	8005ec8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2b0c      	cmp	r3, #12
 8005d76:	f200 809f 	bhi.w	8005eb8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005d7a:	a201      	add	r2, pc, #4	; (adr r2, 8005d80 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d80:	08005db5 	.word	0x08005db5
 8005d84:	08005eb9 	.word	0x08005eb9
 8005d88:	08005eb9 	.word	0x08005eb9
 8005d8c:	08005eb9 	.word	0x08005eb9
 8005d90:	08005df5 	.word	0x08005df5
 8005d94:	08005eb9 	.word	0x08005eb9
 8005d98:	08005eb9 	.word	0x08005eb9
 8005d9c:	08005eb9 	.word	0x08005eb9
 8005da0:	08005e37 	.word	0x08005e37
 8005da4:	08005eb9 	.word	0x08005eb9
 8005da8:	08005eb9 	.word	0x08005eb9
 8005dac:	08005eb9 	.word	0x08005eb9
 8005db0:	08005e77 	.word	0x08005e77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68b9      	ldr	r1, [r7, #8]
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f000 f9f0 	bl	80061a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	699a      	ldr	r2, [r3, #24]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f042 0208 	orr.w	r2, r2, #8
 8005dce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	699a      	ldr	r2, [r3, #24]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f022 0204 	bic.w	r2, r2, #4
 8005dde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	6999      	ldr	r1, [r3, #24]
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	691a      	ldr	r2, [r3, #16]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	430a      	orrs	r2, r1
 8005df0:	619a      	str	r2, [r3, #24]
      break;
 8005df2:	e064      	b.n	8005ebe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68b9      	ldr	r1, [r7, #8]
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f000 fa40 	bl	8006280 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	699a      	ldr	r2, [r3, #24]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	699a      	ldr	r2, [r3, #24]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6999      	ldr	r1, [r3, #24]
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	021a      	lsls	r2, r3, #8
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	430a      	orrs	r2, r1
 8005e32:	619a      	str	r2, [r3, #24]
      break;
 8005e34:	e043      	b.n	8005ebe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68b9      	ldr	r1, [r7, #8]
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f000 fa95 	bl	800636c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	69da      	ldr	r2, [r3, #28]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f042 0208 	orr.w	r2, r2, #8
 8005e50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	69da      	ldr	r2, [r3, #28]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f022 0204 	bic.w	r2, r2, #4
 8005e60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	69d9      	ldr	r1, [r3, #28]
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	691a      	ldr	r2, [r3, #16]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	430a      	orrs	r2, r1
 8005e72:	61da      	str	r2, [r3, #28]
      break;
 8005e74:	e023      	b.n	8005ebe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68b9      	ldr	r1, [r7, #8]
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f000 fae9 	bl	8006454 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	69da      	ldr	r2, [r3, #28]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	69da      	ldr	r2, [r3, #28]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ea0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	69d9      	ldr	r1, [r3, #28]
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	021a      	lsls	r2, r3, #8
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	61da      	str	r2, [r3, #28]
      break;
 8005eb6:	e002      	b.n	8005ebe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	75fb      	strb	r3, [r7, #23]
      break;
 8005ebc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3718      	adds	r7, #24
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005eda:	2300      	movs	r3, #0
 8005edc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d101      	bne.n	8005eec <HAL_TIM_ConfigClockSource+0x1c>
 8005ee8:	2302      	movs	r3, #2
 8005eea:	e0b4      	b.n	8006056 <HAL_TIM_ConfigClockSource+0x186>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2202      	movs	r2, #2
 8005ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68ba      	ldr	r2, [r7, #8]
 8005f1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f24:	d03e      	beq.n	8005fa4 <HAL_TIM_ConfigClockSource+0xd4>
 8005f26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f2a:	f200 8087 	bhi.w	800603c <HAL_TIM_ConfigClockSource+0x16c>
 8005f2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f32:	f000 8086 	beq.w	8006042 <HAL_TIM_ConfigClockSource+0x172>
 8005f36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f3a:	d87f      	bhi.n	800603c <HAL_TIM_ConfigClockSource+0x16c>
 8005f3c:	2b70      	cmp	r3, #112	; 0x70
 8005f3e:	d01a      	beq.n	8005f76 <HAL_TIM_ConfigClockSource+0xa6>
 8005f40:	2b70      	cmp	r3, #112	; 0x70
 8005f42:	d87b      	bhi.n	800603c <HAL_TIM_ConfigClockSource+0x16c>
 8005f44:	2b60      	cmp	r3, #96	; 0x60
 8005f46:	d050      	beq.n	8005fea <HAL_TIM_ConfigClockSource+0x11a>
 8005f48:	2b60      	cmp	r3, #96	; 0x60
 8005f4a:	d877      	bhi.n	800603c <HAL_TIM_ConfigClockSource+0x16c>
 8005f4c:	2b50      	cmp	r3, #80	; 0x50
 8005f4e:	d03c      	beq.n	8005fca <HAL_TIM_ConfigClockSource+0xfa>
 8005f50:	2b50      	cmp	r3, #80	; 0x50
 8005f52:	d873      	bhi.n	800603c <HAL_TIM_ConfigClockSource+0x16c>
 8005f54:	2b40      	cmp	r3, #64	; 0x40
 8005f56:	d058      	beq.n	800600a <HAL_TIM_ConfigClockSource+0x13a>
 8005f58:	2b40      	cmp	r3, #64	; 0x40
 8005f5a:	d86f      	bhi.n	800603c <HAL_TIM_ConfigClockSource+0x16c>
 8005f5c:	2b30      	cmp	r3, #48	; 0x30
 8005f5e:	d064      	beq.n	800602a <HAL_TIM_ConfigClockSource+0x15a>
 8005f60:	2b30      	cmp	r3, #48	; 0x30
 8005f62:	d86b      	bhi.n	800603c <HAL_TIM_ConfigClockSource+0x16c>
 8005f64:	2b20      	cmp	r3, #32
 8005f66:	d060      	beq.n	800602a <HAL_TIM_ConfigClockSource+0x15a>
 8005f68:	2b20      	cmp	r3, #32
 8005f6a:	d867      	bhi.n	800603c <HAL_TIM_ConfigClockSource+0x16c>
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d05c      	beq.n	800602a <HAL_TIM_ConfigClockSource+0x15a>
 8005f70:	2b10      	cmp	r3, #16
 8005f72:	d05a      	beq.n	800602a <HAL_TIM_ConfigClockSource+0x15a>
 8005f74:	e062      	b.n	800603c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6818      	ldr	r0, [r3, #0]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	6899      	ldr	r1, [r3, #8]
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	685a      	ldr	r2, [r3, #4]
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	f000 fb35 	bl	80065f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68ba      	ldr	r2, [r7, #8]
 8005fa0:	609a      	str	r2, [r3, #8]
      break;
 8005fa2:	e04f      	b.n	8006044 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6818      	ldr	r0, [r3, #0]
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	6899      	ldr	r1, [r3, #8]
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	685a      	ldr	r2, [r3, #4]
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	f000 fb1e 	bl	80065f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	689a      	ldr	r2, [r3, #8]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005fc6:	609a      	str	r2, [r3, #8]
      break;
 8005fc8:	e03c      	b.n	8006044 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6818      	ldr	r0, [r3, #0]
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	6859      	ldr	r1, [r3, #4]
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	f000 fa92 	bl	8006500 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2150      	movs	r1, #80	; 0x50
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f000 faeb 	bl	80065be <TIM_ITRx_SetConfig>
      break;
 8005fe8:	e02c      	b.n	8006044 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6818      	ldr	r0, [r3, #0]
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	6859      	ldr	r1, [r3, #4]
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	f000 fab1 	bl	800655e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2160      	movs	r1, #96	; 0x60
 8006002:	4618      	mov	r0, r3
 8006004:	f000 fadb 	bl	80065be <TIM_ITRx_SetConfig>
      break;
 8006008:	e01c      	b.n	8006044 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6818      	ldr	r0, [r3, #0]
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	6859      	ldr	r1, [r3, #4]
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	461a      	mov	r2, r3
 8006018:	f000 fa72 	bl	8006500 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2140      	movs	r1, #64	; 0x40
 8006022:	4618      	mov	r0, r3
 8006024:	f000 facb 	bl	80065be <TIM_ITRx_SetConfig>
      break;
 8006028:	e00c      	b.n	8006044 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4619      	mov	r1, r3
 8006034:	4610      	mov	r0, r2
 8006036:	f000 fac2 	bl	80065be <TIM_ITRx_SetConfig>
      break;
 800603a:	e003      	b.n	8006044 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	73fb      	strb	r3, [r7, #15]
      break;
 8006040:	e000      	b.n	8006044 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006042:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006054:	7bfb      	ldrb	r3, [r7, #15]
}
 8006056:	4618      	mov	r0, r3
 8006058:	3710      	adds	r7, #16
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
	...

08006060 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a40      	ldr	r2, [pc, #256]	; (8006174 <TIM_Base_SetConfig+0x114>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d013      	beq.n	80060a0 <TIM_Base_SetConfig+0x40>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800607e:	d00f      	beq.n	80060a0 <TIM_Base_SetConfig+0x40>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a3d      	ldr	r2, [pc, #244]	; (8006178 <TIM_Base_SetConfig+0x118>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d00b      	beq.n	80060a0 <TIM_Base_SetConfig+0x40>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a3c      	ldr	r2, [pc, #240]	; (800617c <TIM_Base_SetConfig+0x11c>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d007      	beq.n	80060a0 <TIM_Base_SetConfig+0x40>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a3b      	ldr	r2, [pc, #236]	; (8006180 <TIM_Base_SetConfig+0x120>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d003      	beq.n	80060a0 <TIM_Base_SetConfig+0x40>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a3a      	ldr	r2, [pc, #232]	; (8006184 <TIM_Base_SetConfig+0x124>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d108      	bne.n	80060b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a2f      	ldr	r2, [pc, #188]	; (8006174 <TIM_Base_SetConfig+0x114>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d02b      	beq.n	8006112 <TIM_Base_SetConfig+0xb2>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060c0:	d027      	beq.n	8006112 <TIM_Base_SetConfig+0xb2>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a2c      	ldr	r2, [pc, #176]	; (8006178 <TIM_Base_SetConfig+0x118>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d023      	beq.n	8006112 <TIM_Base_SetConfig+0xb2>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a2b      	ldr	r2, [pc, #172]	; (800617c <TIM_Base_SetConfig+0x11c>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d01f      	beq.n	8006112 <TIM_Base_SetConfig+0xb2>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a2a      	ldr	r2, [pc, #168]	; (8006180 <TIM_Base_SetConfig+0x120>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d01b      	beq.n	8006112 <TIM_Base_SetConfig+0xb2>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a29      	ldr	r2, [pc, #164]	; (8006184 <TIM_Base_SetConfig+0x124>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d017      	beq.n	8006112 <TIM_Base_SetConfig+0xb2>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a28      	ldr	r2, [pc, #160]	; (8006188 <TIM_Base_SetConfig+0x128>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d013      	beq.n	8006112 <TIM_Base_SetConfig+0xb2>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a27      	ldr	r2, [pc, #156]	; (800618c <TIM_Base_SetConfig+0x12c>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d00f      	beq.n	8006112 <TIM_Base_SetConfig+0xb2>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a26      	ldr	r2, [pc, #152]	; (8006190 <TIM_Base_SetConfig+0x130>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d00b      	beq.n	8006112 <TIM_Base_SetConfig+0xb2>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a25      	ldr	r2, [pc, #148]	; (8006194 <TIM_Base_SetConfig+0x134>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d007      	beq.n	8006112 <TIM_Base_SetConfig+0xb2>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a24      	ldr	r2, [pc, #144]	; (8006198 <TIM_Base_SetConfig+0x138>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d003      	beq.n	8006112 <TIM_Base_SetConfig+0xb2>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a23      	ldr	r2, [pc, #140]	; (800619c <TIM_Base_SetConfig+0x13c>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d108      	bne.n	8006124 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006118:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	4313      	orrs	r3, r2
 8006122:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	695b      	ldr	r3, [r3, #20]
 800612e:	4313      	orrs	r3, r2
 8006130:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	689a      	ldr	r2, [r3, #8]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4a0a      	ldr	r2, [pc, #40]	; (8006174 <TIM_Base_SetConfig+0x114>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d003      	beq.n	8006158 <TIM_Base_SetConfig+0xf8>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a0c      	ldr	r2, [pc, #48]	; (8006184 <TIM_Base_SetConfig+0x124>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d103      	bne.n	8006160 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	691a      	ldr	r2, [r3, #16]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	615a      	str	r2, [r3, #20]
}
 8006166:	bf00      	nop
 8006168:	3714      	adds	r7, #20
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	40010000 	.word	0x40010000
 8006178:	40000400 	.word	0x40000400
 800617c:	40000800 	.word	0x40000800
 8006180:	40000c00 	.word	0x40000c00
 8006184:	40010400 	.word	0x40010400
 8006188:	40014000 	.word	0x40014000
 800618c:	40014400 	.word	0x40014400
 8006190:	40014800 	.word	0x40014800
 8006194:	40001800 	.word	0x40001800
 8006198:	40001c00 	.word	0x40001c00
 800619c:	40002000 	.word	0x40002000

080061a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b087      	sub	sp, #28
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a1b      	ldr	r3, [r3, #32]
 80061ae:	f023 0201 	bic.w	r2, r3, #1
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a1b      	ldr	r3, [r3, #32]
 80061ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f023 0303 	bic.w	r3, r3, #3
 80061d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	4313      	orrs	r3, r2
 80061e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	f023 0302 	bic.w	r3, r3, #2
 80061e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4a20      	ldr	r2, [pc, #128]	; (8006278 <TIM_OC1_SetConfig+0xd8>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d003      	beq.n	8006204 <TIM_OC1_SetConfig+0x64>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a1f      	ldr	r2, [pc, #124]	; (800627c <TIM_OC1_SetConfig+0xdc>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d10c      	bne.n	800621e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	f023 0308 	bic.w	r3, r3, #8
 800620a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	697a      	ldr	r2, [r7, #20]
 8006212:	4313      	orrs	r3, r2
 8006214:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	f023 0304 	bic.w	r3, r3, #4
 800621c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a15      	ldr	r2, [pc, #84]	; (8006278 <TIM_OC1_SetConfig+0xd8>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d003      	beq.n	800622e <TIM_OC1_SetConfig+0x8e>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a14      	ldr	r2, [pc, #80]	; (800627c <TIM_OC1_SetConfig+0xdc>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d111      	bne.n	8006252 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006234:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800623c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	695b      	ldr	r3, [r3, #20]
 8006242:	693a      	ldr	r2, [r7, #16]
 8006244:	4313      	orrs	r3, r2
 8006246:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	699b      	ldr	r3, [r3, #24]
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	4313      	orrs	r3, r2
 8006250:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	685a      	ldr	r2, [r3, #4]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	697a      	ldr	r2, [r7, #20]
 800626a:	621a      	str	r2, [r3, #32]
}
 800626c:	bf00      	nop
 800626e:	371c      	adds	r7, #28
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr
 8006278:	40010000 	.word	0x40010000
 800627c:	40010400 	.word	0x40010400

08006280 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006280:	b480      	push	{r7}
 8006282:	b087      	sub	sp, #28
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a1b      	ldr	r3, [r3, #32]
 800628e:	f023 0210 	bic.w	r2, r3, #16
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a1b      	ldr	r3, [r3, #32]
 800629a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	021b      	lsls	r3, r3, #8
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	f023 0320 	bic.w	r3, r3, #32
 80062ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	011b      	lsls	r3, r3, #4
 80062d2:	697a      	ldr	r2, [r7, #20]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a22      	ldr	r2, [pc, #136]	; (8006364 <TIM_OC2_SetConfig+0xe4>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d003      	beq.n	80062e8 <TIM_OC2_SetConfig+0x68>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a21      	ldr	r2, [pc, #132]	; (8006368 <TIM_OC2_SetConfig+0xe8>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d10d      	bne.n	8006304 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	011b      	lsls	r3, r3, #4
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006302:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a17      	ldr	r2, [pc, #92]	; (8006364 <TIM_OC2_SetConfig+0xe4>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d003      	beq.n	8006314 <TIM_OC2_SetConfig+0x94>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a16      	ldr	r2, [pc, #88]	; (8006368 <TIM_OC2_SetConfig+0xe8>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d113      	bne.n	800633c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800631a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006322:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	695b      	ldr	r3, [r3, #20]
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	693a      	ldr	r2, [r7, #16]
 800632c:	4313      	orrs	r3, r2
 800632e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	699b      	ldr	r3, [r3, #24]
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	693a      	ldr	r2, [r7, #16]
 8006338:	4313      	orrs	r3, r2
 800633a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	693a      	ldr	r2, [r7, #16]
 8006340:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	685a      	ldr	r2, [r3, #4]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	621a      	str	r2, [r3, #32]
}
 8006356:	bf00      	nop
 8006358:	371c      	adds	r7, #28
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	40010000 	.word	0x40010000
 8006368:	40010400 	.word	0x40010400

0800636c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800636c:	b480      	push	{r7}
 800636e:	b087      	sub	sp, #28
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a1b      	ldr	r3, [r3, #32]
 800637a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a1b      	ldr	r3, [r3, #32]
 8006386:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	69db      	ldr	r3, [r3, #28]
 8006392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800639a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f023 0303 	bic.w	r3, r3, #3
 80063a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	021b      	lsls	r3, r3, #8
 80063bc:	697a      	ldr	r2, [r7, #20]
 80063be:	4313      	orrs	r3, r2
 80063c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a21      	ldr	r2, [pc, #132]	; (800644c <TIM_OC3_SetConfig+0xe0>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d003      	beq.n	80063d2 <TIM_OC3_SetConfig+0x66>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a20      	ldr	r2, [pc, #128]	; (8006450 <TIM_OC3_SetConfig+0xe4>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d10d      	bne.n	80063ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	021b      	lsls	r3, r3, #8
 80063e0:	697a      	ldr	r2, [r7, #20]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a16      	ldr	r2, [pc, #88]	; (800644c <TIM_OC3_SetConfig+0xe0>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d003      	beq.n	80063fe <TIM_OC3_SetConfig+0x92>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a15      	ldr	r2, [pc, #84]	; (8006450 <TIM_OC3_SetConfig+0xe4>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d113      	bne.n	8006426 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006404:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800640c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	695b      	ldr	r3, [r3, #20]
 8006412:	011b      	lsls	r3, r3, #4
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	4313      	orrs	r3, r2
 8006418:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	699b      	ldr	r3, [r3, #24]
 800641e:	011b      	lsls	r3, r3, #4
 8006420:	693a      	ldr	r2, [r7, #16]
 8006422:	4313      	orrs	r3, r2
 8006424:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	685a      	ldr	r2, [r3, #4]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	697a      	ldr	r2, [r7, #20]
 800643e:	621a      	str	r2, [r3, #32]
}
 8006440:	bf00      	nop
 8006442:	371c      	adds	r7, #28
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr
 800644c:	40010000 	.word	0x40010000
 8006450:	40010400 	.word	0x40010400

08006454 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006454:	b480      	push	{r7}
 8006456:	b087      	sub	sp, #28
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a1b      	ldr	r3, [r3, #32]
 8006462:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a1b      	ldr	r3, [r3, #32]
 800646e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	69db      	ldr	r3, [r3, #28]
 800647a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800648a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	021b      	lsls	r3, r3, #8
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	4313      	orrs	r3, r2
 8006496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800649e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	031b      	lsls	r3, r3, #12
 80064a6:	693a      	ldr	r2, [r7, #16]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a12      	ldr	r2, [pc, #72]	; (80064f8 <TIM_OC4_SetConfig+0xa4>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d003      	beq.n	80064bc <TIM_OC4_SetConfig+0x68>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a11      	ldr	r2, [pc, #68]	; (80064fc <TIM_OC4_SetConfig+0xa8>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d109      	bne.n	80064d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	695b      	ldr	r3, [r3, #20]
 80064c8:	019b      	lsls	r3, r3, #6
 80064ca:	697a      	ldr	r2, [r7, #20]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	685a      	ldr	r2, [r3, #4]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	693a      	ldr	r2, [r7, #16]
 80064e8:	621a      	str	r2, [r3, #32]
}
 80064ea:	bf00      	nop
 80064ec:	371c      	adds	r7, #28
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop
 80064f8:	40010000 	.word	0x40010000
 80064fc:	40010400 	.word	0x40010400

08006500 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006500:	b480      	push	{r7}
 8006502:	b087      	sub	sp, #28
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6a1b      	ldr	r3, [r3, #32]
 8006510:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6a1b      	ldr	r3, [r3, #32]
 8006516:	f023 0201 	bic.w	r2, r3, #1
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800652a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	011b      	lsls	r3, r3, #4
 8006530:	693a      	ldr	r2, [r7, #16]
 8006532:	4313      	orrs	r3, r2
 8006534:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	f023 030a 	bic.w	r3, r3, #10
 800653c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800653e:	697a      	ldr	r2, [r7, #20]
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	4313      	orrs	r3, r2
 8006544:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	693a      	ldr	r2, [r7, #16]
 800654a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	697a      	ldr	r2, [r7, #20]
 8006550:	621a      	str	r2, [r3, #32]
}
 8006552:	bf00      	nop
 8006554:	371c      	adds	r7, #28
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr

0800655e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800655e:	b480      	push	{r7}
 8006560:	b087      	sub	sp, #28
 8006562:	af00      	add	r7, sp, #0
 8006564:	60f8      	str	r0, [r7, #12]
 8006566:	60b9      	str	r1, [r7, #8]
 8006568:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	f023 0210 	bic.w	r2, r3, #16
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	699b      	ldr	r3, [r3, #24]
 800657a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6a1b      	ldr	r3, [r3, #32]
 8006580:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006588:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	031b      	lsls	r3, r3, #12
 800658e:	697a      	ldr	r2, [r7, #20]
 8006590:	4313      	orrs	r3, r2
 8006592:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800659a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	011b      	lsls	r3, r3, #4
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	697a      	ldr	r2, [r7, #20]
 80065aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	693a      	ldr	r2, [r7, #16]
 80065b0:	621a      	str	r2, [r3, #32]
}
 80065b2:	bf00      	nop
 80065b4:	371c      	adds	r7, #28
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr

080065be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065be:	b480      	push	{r7}
 80065c0:	b085      	sub	sp, #20
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
 80065c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065d6:	683a      	ldr	r2, [r7, #0]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	4313      	orrs	r3, r2
 80065dc:	f043 0307 	orr.w	r3, r3, #7
 80065e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	609a      	str	r2, [r3, #8]
}
 80065e8:	bf00      	nop
 80065ea:	3714      	adds	r7, #20
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b087      	sub	sp, #28
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	607a      	str	r2, [r7, #4]
 8006600:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800660e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	021a      	lsls	r2, r3, #8
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	431a      	orrs	r2, r3
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	4313      	orrs	r3, r2
 800661c:	697a      	ldr	r2, [r7, #20]
 800661e:	4313      	orrs	r3, r2
 8006620:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	697a      	ldr	r2, [r7, #20]
 8006626:	609a      	str	r2, [r3, #8]
}
 8006628:	bf00      	nop
 800662a:	371c      	adds	r7, #28
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006634:	b480      	push	{r7}
 8006636:	b087      	sub	sp, #28
 8006638:	af00      	add	r7, sp, #0
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	f003 031f 	and.w	r3, r3, #31
 8006646:	2201      	movs	r2, #1
 8006648:	fa02 f303 	lsl.w	r3, r2, r3
 800664c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6a1a      	ldr	r2, [r3, #32]
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	43db      	mvns	r3, r3
 8006656:	401a      	ands	r2, r3
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6a1a      	ldr	r2, [r3, #32]
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	f003 031f 	and.w	r3, r3, #31
 8006666:	6879      	ldr	r1, [r7, #4]
 8006668:	fa01 f303 	lsl.w	r3, r1, r3
 800666c:	431a      	orrs	r2, r3
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	621a      	str	r2, [r3, #32]
}
 8006672:	bf00      	nop
 8006674:	371c      	adds	r7, #28
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr
	...

08006680 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006680:	b480      	push	{r7}
 8006682:	b085      	sub	sp, #20
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006690:	2b01      	cmp	r3, #1
 8006692:	d101      	bne.n	8006698 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006694:	2302      	movs	r3, #2
 8006696:	e05a      	b.n	800674e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2202      	movs	r2, #2
 80066a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a21      	ldr	r2, [pc, #132]	; (800675c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d022      	beq.n	8006722 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066e4:	d01d      	beq.n	8006722 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a1d      	ldr	r2, [pc, #116]	; (8006760 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d018      	beq.n	8006722 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a1b      	ldr	r2, [pc, #108]	; (8006764 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d013      	beq.n	8006722 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a1a      	ldr	r2, [pc, #104]	; (8006768 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d00e      	beq.n	8006722 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a18      	ldr	r2, [pc, #96]	; (800676c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d009      	beq.n	8006722 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a17      	ldr	r2, [pc, #92]	; (8006770 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d004      	beq.n	8006722 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a15      	ldr	r2, [pc, #84]	; (8006774 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d10c      	bne.n	800673c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006728:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	68ba      	ldr	r2, [r7, #8]
 8006730:	4313      	orrs	r3, r2
 8006732:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68ba      	ldr	r2, [r7, #8]
 800673a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3714      	adds	r7, #20
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	40010000 	.word	0x40010000
 8006760:	40000400 	.word	0x40000400
 8006764:	40000800 	.word	0x40000800
 8006768:	40000c00 	.word	0x40000c00
 800676c:	40010400 	.word	0x40010400
 8006770:	40014000 	.word	0x40014000
 8006774:	40001800 	.word	0x40001800

08006778 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d101      	bne.n	800678a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e03f      	b.n	800680a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006790:	b2db      	uxtb	r3, r3
 8006792:	2b00      	cmp	r3, #0
 8006794:	d106      	bne.n	80067a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f7fa fff2 	bl	8001788 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2224      	movs	r2, #36	; 0x24
 80067a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68da      	ldr	r2, [r3, #12]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 fd7b 	bl	80072b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	691a      	ldr	r2, [r3, #16]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	695a      	ldr	r2, [r3, #20]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68da      	ldr	r2, [r3, #12]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2220      	movs	r2, #32
 80067fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2220      	movs	r2, #32
 8006804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3708      	adds	r7, #8
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006812:	b580      	push	{r7, lr}
 8006814:	b08a      	sub	sp, #40	; 0x28
 8006816:	af02      	add	r7, sp, #8
 8006818:	60f8      	str	r0, [r7, #12]
 800681a:	60b9      	str	r1, [r7, #8]
 800681c:	603b      	str	r3, [r7, #0]
 800681e:	4613      	mov	r3, r2
 8006820:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006822:	2300      	movs	r3, #0
 8006824:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800682c:	b2db      	uxtb	r3, r3
 800682e:	2b20      	cmp	r3, #32
 8006830:	d17c      	bne.n	800692c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d002      	beq.n	800683e <HAL_UART_Transmit+0x2c>
 8006838:	88fb      	ldrh	r3, [r7, #6]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d101      	bne.n	8006842 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e075      	b.n	800692e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006848:	2b01      	cmp	r3, #1
 800684a:	d101      	bne.n	8006850 <HAL_UART_Transmit+0x3e>
 800684c:	2302      	movs	r3, #2
 800684e:	e06e      	b.n	800692e <HAL_UART_Transmit+0x11c>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2221      	movs	r2, #33	; 0x21
 8006862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006866:	f7fb f98f 	bl	8001b88 <HAL_GetTick>
 800686a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	88fa      	ldrh	r2, [r7, #6]
 8006870:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	88fa      	ldrh	r2, [r7, #6]
 8006876:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006880:	d108      	bne.n	8006894 <HAL_UART_Transmit+0x82>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d104      	bne.n	8006894 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800688a:	2300      	movs	r3, #0
 800688c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	61bb      	str	r3, [r7, #24]
 8006892:	e003      	b.n	800689c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006898:	2300      	movs	r3, #0
 800689a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2200      	movs	r2, #0
 80068a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80068a4:	e02a      	b.n	80068fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	9300      	str	r3, [sp, #0]
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	2200      	movs	r2, #0
 80068ae:	2180      	movs	r1, #128	; 0x80
 80068b0:	68f8      	ldr	r0, [r7, #12]
 80068b2:	f000 faf9 	bl	8006ea8 <UART_WaitOnFlagUntilTimeout>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d001      	beq.n	80068c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80068bc:	2303      	movs	r3, #3
 80068be:	e036      	b.n	800692e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d10b      	bne.n	80068de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80068c6:	69bb      	ldr	r3, [r7, #24]
 80068c8:	881b      	ldrh	r3, [r3, #0]
 80068ca:	461a      	mov	r2, r3
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	3302      	adds	r3, #2
 80068da:	61bb      	str	r3, [r7, #24]
 80068dc:	e007      	b.n	80068ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	781a      	ldrb	r2, [r3, #0]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	3301      	adds	r3, #1
 80068ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	3b01      	subs	r3, #1
 80068f6:	b29a      	uxth	r2, r3
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006900:	b29b      	uxth	r3, r3
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1cf      	bne.n	80068a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	9300      	str	r3, [sp, #0]
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	2200      	movs	r2, #0
 800690e:	2140      	movs	r1, #64	; 0x40
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	f000 fac9 	bl	8006ea8 <UART_WaitOnFlagUntilTimeout>
 8006916:	4603      	mov	r3, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d001      	beq.n	8006920 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800691c:	2303      	movs	r3, #3
 800691e:	e006      	b.n	800692e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2220      	movs	r2, #32
 8006924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006928:	2300      	movs	r3, #0
 800692a:	e000      	b.n	800692e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800692c:	2302      	movs	r3, #2
  }
}
 800692e:	4618      	mov	r0, r3
 8006930:	3720      	adds	r7, #32
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
	...

08006938 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b0ba      	sub	sp, #232	; 0xe8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800695e:	2300      	movs	r3, #0
 8006960:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006964:	2300      	movs	r3, #0
 8006966:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800696a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800696e:	f003 030f 	and.w	r3, r3, #15
 8006972:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006976:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800697a:	2b00      	cmp	r3, #0
 800697c:	d10f      	bne.n	800699e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800697e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006982:	f003 0320 	and.w	r3, r3, #32
 8006986:	2b00      	cmp	r3, #0
 8006988:	d009      	beq.n	800699e <HAL_UART_IRQHandler+0x66>
 800698a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800698e:	f003 0320 	and.w	r3, r3, #32
 8006992:	2b00      	cmp	r3, #0
 8006994:	d003      	beq.n	800699e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 fbd3 	bl	8007142 <UART_Receive_IT>
      return;
 800699c:	e256      	b.n	8006e4c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800699e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	f000 80de 	beq.w	8006b64 <HAL_UART_IRQHandler+0x22c>
 80069a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069ac:	f003 0301 	and.w	r3, r3, #1
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d106      	bne.n	80069c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80069b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f000 80d1 	beq.w	8006b64 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80069c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069c6:	f003 0301 	and.w	r3, r3, #1
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00b      	beq.n	80069e6 <HAL_UART_IRQHandler+0xae>
 80069ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d005      	beq.n	80069e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069de:	f043 0201 	orr.w	r2, r3, #1
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069ea:	f003 0304 	and.w	r3, r3, #4
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00b      	beq.n	8006a0a <HAL_UART_IRQHandler+0xd2>
 80069f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069f6:	f003 0301 	and.w	r3, r3, #1
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d005      	beq.n	8006a0a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a02:	f043 0202 	orr.w	r2, r3, #2
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a0e:	f003 0302 	and.w	r3, r3, #2
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00b      	beq.n	8006a2e <HAL_UART_IRQHandler+0xf6>
 8006a16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a1a:	f003 0301 	and.w	r3, r3, #1
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d005      	beq.n	8006a2e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a26:	f043 0204 	orr.w	r2, r3, #4
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a32:	f003 0308 	and.w	r3, r3, #8
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d011      	beq.n	8006a5e <HAL_UART_IRQHandler+0x126>
 8006a3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a3e:	f003 0320 	and.w	r3, r3, #32
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d105      	bne.n	8006a52 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006a46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a4a:	f003 0301 	and.w	r3, r3, #1
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d005      	beq.n	8006a5e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a56:	f043 0208 	orr.w	r2, r3, #8
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	f000 81ed 	beq.w	8006e42 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a6c:	f003 0320 	and.w	r3, r3, #32
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d008      	beq.n	8006a86 <HAL_UART_IRQHandler+0x14e>
 8006a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a78:	f003 0320 	and.w	r3, r3, #32
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d002      	beq.n	8006a86 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 fb5e 	bl	8007142 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	695b      	ldr	r3, [r3, #20]
 8006a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a90:	2b40      	cmp	r3, #64	; 0x40
 8006a92:	bf0c      	ite	eq
 8006a94:	2301      	moveq	r3, #1
 8006a96:	2300      	movne	r3, #0
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa2:	f003 0308 	and.w	r3, r3, #8
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d103      	bne.n	8006ab2 <HAL_UART_IRQHandler+0x17a>
 8006aaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d04f      	beq.n	8006b52 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 fa66 	bl	8006f84 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	695b      	ldr	r3, [r3, #20]
 8006abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac2:	2b40      	cmp	r3, #64	; 0x40
 8006ac4:	d141      	bne.n	8006b4a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	3314      	adds	r3, #20
 8006acc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ad4:	e853 3f00 	ldrex	r3, [r3]
 8006ad8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006adc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ae0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ae4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	3314      	adds	r3, #20
 8006aee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006af2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006af6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006afe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006b02:	e841 2300 	strex	r3, r2, [r1]
 8006b06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006b0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d1d9      	bne.n	8006ac6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d013      	beq.n	8006b42 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b1e:	4a7d      	ldr	r2, [pc, #500]	; (8006d14 <HAL_UART_IRQHandler+0x3dc>)
 8006b20:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b26:	4618      	mov	r0, r3
 8006b28:	f7fb fae6 	bl	80020f8 <HAL_DMA_Abort_IT>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d016      	beq.n	8006b60 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006b3c:	4610      	mov	r0, r2
 8006b3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b40:	e00e      	b.n	8006b60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 f99a 	bl	8006e7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b48:	e00a      	b.n	8006b60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 f996 	bl	8006e7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b50:	e006      	b.n	8006b60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 f992 	bl	8006e7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006b5e:	e170      	b.n	8006e42 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b60:	bf00      	nop
    return;
 8006b62:	e16e      	b.n	8006e42 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	f040 814a 	bne.w	8006e02 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b72:	f003 0310 	and.w	r3, r3, #16
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	f000 8143 	beq.w	8006e02 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b80:	f003 0310 	and.w	r3, r3, #16
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	f000 813c 	beq.w	8006e02 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	60bb      	str	r3, [r7, #8]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	60bb      	str	r3, [r7, #8]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	60bb      	str	r3, [r7, #8]
 8006b9e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	695b      	ldr	r3, [r3, #20]
 8006ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006baa:	2b40      	cmp	r3, #64	; 0x40
 8006bac:	f040 80b4 	bne.w	8006d18 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006bbc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f000 8140 	beq.w	8006e46 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006bca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	f080 8139 	bcs.w	8006e46 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006bda:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be0:	69db      	ldr	r3, [r3, #28]
 8006be2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006be6:	f000 8088 	beq.w	8006cfa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	330c      	adds	r3, #12
 8006bf0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006bf8:	e853 3f00 	ldrex	r3, [r3]
 8006bfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006c00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	330c      	adds	r3, #12
 8006c12:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006c16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006c1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006c22:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006c26:	e841 2300 	strex	r3, r2, [r1]
 8006c2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006c2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1d9      	bne.n	8006bea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	3314      	adds	r3, #20
 8006c3c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c40:	e853 3f00 	ldrex	r3, [r3]
 8006c44:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006c46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c48:	f023 0301 	bic.w	r3, r3, #1
 8006c4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	3314      	adds	r3, #20
 8006c56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006c5a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006c5e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c60:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006c62:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006c66:	e841 2300 	strex	r3, r2, [r1]
 8006c6a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006c6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1e1      	bne.n	8006c36 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	3314      	adds	r3, #20
 8006c78:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c7c:	e853 3f00 	ldrex	r3, [r3]
 8006c80:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006c82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	3314      	adds	r3, #20
 8006c92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006c96:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006c98:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c9a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006c9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006c9e:	e841 2300 	strex	r3, r2, [r1]
 8006ca2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006ca4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d1e3      	bne.n	8006c72 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2220      	movs	r2, #32
 8006cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	330c      	adds	r3, #12
 8006cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cc2:	e853 3f00 	ldrex	r3, [r3]
 8006cc6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006cc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cca:	f023 0310 	bic.w	r3, r3, #16
 8006cce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	330c      	adds	r3, #12
 8006cd8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006cdc:	65ba      	str	r2, [r7, #88]	; 0x58
 8006cde:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ce2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ce4:	e841 2300 	strex	r3, r2, [r1]
 8006ce8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006cea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1e3      	bne.n	8006cb8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f7fb f98f 	bl	8002018 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	1ad3      	subs	r3, r2, r3
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	4619      	mov	r1, r3
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 f8c0 	bl	8006e90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d10:	e099      	b.n	8006e46 <HAL_UART_IRQHandler+0x50e>
 8006d12:	bf00      	nop
 8006d14:	0800704b 	.word	0x0800704b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	f000 808b 	beq.w	8006e4a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006d34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	f000 8086 	beq.w	8006e4a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	330c      	adds	r3, #12
 8006d44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d48:	e853 3f00 	ldrex	r3, [r3]
 8006d4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	330c      	adds	r3, #12
 8006d5e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006d62:	647a      	str	r2, [r7, #68]	; 0x44
 8006d64:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d6a:	e841 2300 	strex	r3, r2, [r1]
 8006d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1e3      	bne.n	8006d3e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	3314      	adds	r3, #20
 8006d7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d80:	e853 3f00 	ldrex	r3, [r3]
 8006d84:	623b      	str	r3, [r7, #32]
   return(result);
 8006d86:	6a3b      	ldr	r3, [r7, #32]
 8006d88:	f023 0301 	bic.w	r3, r3, #1
 8006d8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	3314      	adds	r3, #20
 8006d96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006d9a:	633a      	str	r2, [r7, #48]	; 0x30
 8006d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006da0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006da2:	e841 2300 	strex	r3, r2, [r1]
 8006da6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d1e3      	bne.n	8006d76 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2220      	movs	r2, #32
 8006db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	330c      	adds	r3, #12
 8006dc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	e853 3f00 	ldrex	r3, [r3]
 8006dca:	60fb      	str	r3, [r7, #12]
   return(result);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f023 0310 	bic.w	r3, r3, #16
 8006dd2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	330c      	adds	r3, #12
 8006ddc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006de0:	61fa      	str	r2, [r7, #28]
 8006de2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de4:	69b9      	ldr	r1, [r7, #24]
 8006de6:	69fa      	ldr	r2, [r7, #28]
 8006de8:	e841 2300 	strex	r3, r2, [r1]
 8006dec:	617b      	str	r3, [r7, #20]
   return(result);
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d1e3      	bne.n	8006dbc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006df4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006df8:	4619      	mov	r1, r3
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 f848 	bl	8006e90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e00:	e023      	b.n	8006e4a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d009      	beq.n	8006e22 <HAL_UART_IRQHandler+0x4ea>
 8006e0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d003      	beq.n	8006e22 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 f929 	bl	8007072 <UART_Transmit_IT>
    return;
 8006e20:	e014      	b.n	8006e4c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00e      	beq.n	8006e4c <HAL_UART_IRQHandler+0x514>
 8006e2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d008      	beq.n	8006e4c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 f969 	bl	8007112 <UART_EndTransmit_IT>
    return;
 8006e40:	e004      	b.n	8006e4c <HAL_UART_IRQHandler+0x514>
    return;
 8006e42:	bf00      	nop
 8006e44:	e002      	b.n	8006e4c <HAL_UART_IRQHandler+0x514>
      return;
 8006e46:	bf00      	nop
 8006e48:	e000      	b.n	8006e4c <HAL_UART_IRQHandler+0x514>
      return;
 8006e4a:	bf00      	nop
  }
}
 8006e4c:	37e8      	adds	r7, #232	; 0xe8
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop

08006e54 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006e5c:	bf00      	nop
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006e70:	bf00      	nop
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006e84:	bf00      	nop
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	460b      	mov	r3, r1
 8006e9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006e9c:	bf00      	nop
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b090      	sub	sp, #64	; 0x40
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	603b      	str	r3, [r7, #0]
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006eb8:	e050      	b.n	8006f5c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006eba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ec0:	d04c      	beq.n	8006f5c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006ec2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d007      	beq.n	8006ed8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006ec8:	f7fa fe5e 	bl	8001b88 <HAL_GetTick>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d241      	bcs.n	8006f5c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	330c      	adds	r3, #12
 8006ede:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee2:	e853 3f00 	ldrex	r3, [r3]
 8006ee6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006eee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	330c      	adds	r3, #12
 8006ef6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006ef8:	637a      	str	r2, [r7, #52]	; 0x34
 8006efa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006efe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f00:	e841 2300 	strex	r3, r2, [r1]
 8006f04:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1e5      	bne.n	8006ed8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	3314      	adds	r3, #20
 8006f12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	e853 3f00 	ldrex	r3, [r3]
 8006f1a:	613b      	str	r3, [r7, #16]
   return(result);
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	f023 0301 	bic.w	r3, r3, #1
 8006f22:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	3314      	adds	r3, #20
 8006f2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f2c:	623a      	str	r2, [r7, #32]
 8006f2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f30:	69f9      	ldr	r1, [r7, #28]
 8006f32:	6a3a      	ldr	r2, [r7, #32]
 8006f34:	e841 2300 	strex	r3, r2, [r1]
 8006f38:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d1e5      	bne.n	8006f0c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2220      	movs	r2, #32
 8006f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2220      	movs	r2, #32
 8006f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006f58:	2303      	movs	r3, #3
 8006f5a:	e00f      	b.n	8006f7c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	4013      	ands	r3, r2
 8006f66:	68ba      	ldr	r2, [r7, #8]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	bf0c      	ite	eq
 8006f6c:	2301      	moveq	r3, #1
 8006f6e:	2300      	movne	r3, #0
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	461a      	mov	r2, r3
 8006f74:	79fb      	ldrb	r3, [r7, #7]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d09f      	beq.n	8006eba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3740      	adds	r7, #64	; 0x40
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b095      	sub	sp, #84	; 0x54
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	330c      	adds	r3, #12
 8006f92:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f96:	e853 3f00 	ldrex	r3, [r3]
 8006f9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	330c      	adds	r3, #12
 8006faa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006fac:	643a      	str	r2, [r7, #64]	; 0x40
 8006fae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006fb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006fb4:	e841 2300 	strex	r3, r2, [r1]
 8006fb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d1e5      	bne.n	8006f8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	3314      	adds	r3, #20
 8006fc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc8:	6a3b      	ldr	r3, [r7, #32]
 8006fca:	e853 3f00 	ldrex	r3, [r3]
 8006fce:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	f023 0301 	bic.w	r3, r3, #1
 8006fd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	3314      	adds	r3, #20
 8006fde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fe0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006fe2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fe6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fe8:	e841 2300 	strex	r3, r2, [r1]
 8006fec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d1e5      	bne.n	8006fc0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d119      	bne.n	8007030 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	330c      	adds	r3, #12
 8007002:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	e853 3f00 	ldrex	r3, [r3]
 800700a:	60bb      	str	r3, [r7, #8]
   return(result);
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	f023 0310 	bic.w	r3, r3, #16
 8007012:	647b      	str	r3, [r7, #68]	; 0x44
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	330c      	adds	r3, #12
 800701a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800701c:	61ba      	str	r2, [r7, #24]
 800701e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007020:	6979      	ldr	r1, [r7, #20]
 8007022:	69ba      	ldr	r2, [r7, #24]
 8007024:	e841 2300 	strex	r3, r2, [r1]
 8007028:	613b      	str	r3, [r7, #16]
   return(result);
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d1e5      	bne.n	8006ffc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2220      	movs	r2, #32
 8007034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800703e:	bf00      	nop
 8007040:	3754      	adds	r7, #84	; 0x54
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr

0800704a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800704a:	b580      	push	{r7, lr}
 800704c:	b084      	sub	sp, #16
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007056:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2200      	movs	r2, #0
 800705c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2200      	movs	r2, #0
 8007062:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007064:	68f8      	ldr	r0, [r7, #12]
 8007066:	f7ff ff09 	bl	8006e7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800706a:	bf00      	nop
 800706c:	3710      	adds	r7, #16
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007072:	b480      	push	{r7}
 8007074:	b085      	sub	sp, #20
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007080:	b2db      	uxtb	r3, r3
 8007082:	2b21      	cmp	r3, #33	; 0x21
 8007084:	d13e      	bne.n	8007104 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800708e:	d114      	bne.n	80070ba <UART_Transmit_IT+0x48>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d110      	bne.n	80070ba <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6a1b      	ldr	r3, [r3, #32]
 800709c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	881b      	ldrh	r3, [r3, #0]
 80070a2:	461a      	mov	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070ac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a1b      	ldr	r3, [r3, #32]
 80070b2:	1c9a      	adds	r2, r3, #2
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	621a      	str	r2, [r3, #32]
 80070b8:	e008      	b.n	80070cc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6a1b      	ldr	r3, [r3, #32]
 80070be:	1c59      	adds	r1, r3, #1
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	6211      	str	r1, [r2, #32]
 80070c4:	781a      	ldrb	r2, [r3, #0]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	3b01      	subs	r3, #1
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	4619      	mov	r1, r3
 80070da:	84d1      	strh	r1, [r2, #38]	; 0x26
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d10f      	bne.n	8007100 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	68da      	ldr	r2, [r3, #12]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070ee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	68da      	ldr	r2, [r3, #12]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070fe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007100:	2300      	movs	r3, #0
 8007102:	e000      	b.n	8007106 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007104:	2302      	movs	r3, #2
  }
}
 8007106:	4618      	mov	r0, r3
 8007108:	3714      	adds	r7, #20
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr

08007112 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b082      	sub	sp, #8
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	68da      	ldr	r2, [r3, #12]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007128:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2220      	movs	r2, #32
 800712e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f7ff fe8e 	bl	8006e54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3708      	adds	r7, #8
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007142:	b580      	push	{r7, lr}
 8007144:	b08c      	sub	sp, #48	; 0x30
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007150:	b2db      	uxtb	r3, r3
 8007152:	2b22      	cmp	r3, #34	; 0x22
 8007154:	f040 80ab 	bne.w	80072ae <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007160:	d117      	bne.n	8007192 <UART_Receive_IT+0x50>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d113      	bne.n	8007192 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800716a:	2300      	movs	r3, #0
 800716c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007172:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	b29b      	uxth	r3, r3
 800717c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007180:	b29a      	uxth	r2, r3
 8007182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007184:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800718a:	1c9a      	adds	r2, r3, #2
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	629a      	str	r2, [r3, #40]	; 0x28
 8007190:	e026      	b.n	80071e0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007196:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007198:	2300      	movs	r3, #0
 800719a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071a4:	d007      	beq.n	80071b6 <UART_Receive_IT+0x74>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d10a      	bne.n	80071c4 <UART_Receive_IT+0x82>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d106      	bne.n	80071c4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	b2da      	uxtb	r2, r3
 80071be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c0:	701a      	strb	r2, [r3, #0]
 80071c2:	e008      	b.n	80071d6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071d0:	b2da      	uxtb	r2, r3
 80071d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071da:	1c5a      	adds	r2, r3, #1
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	3b01      	subs	r3, #1
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	4619      	mov	r1, r3
 80071ee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d15a      	bne.n	80072aa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	68da      	ldr	r2, [r3, #12]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f022 0220 	bic.w	r2, r2, #32
 8007202:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	68da      	ldr	r2, [r3, #12]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007212:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	695a      	ldr	r2, [r3, #20]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f022 0201 	bic.w	r2, r2, #1
 8007222:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2220      	movs	r2, #32
 8007228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007230:	2b01      	cmp	r3, #1
 8007232:	d135      	bne.n	80072a0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	330c      	adds	r3, #12
 8007240:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	e853 3f00 	ldrex	r3, [r3]
 8007248:	613b      	str	r3, [r7, #16]
   return(result);
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	f023 0310 	bic.w	r3, r3, #16
 8007250:	627b      	str	r3, [r7, #36]	; 0x24
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	330c      	adds	r3, #12
 8007258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800725a:	623a      	str	r2, [r7, #32]
 800725c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725e:	69f9      	ldr	r1, [r7, #28]
 8007260:	6a3a      	ldr	r2, [r7, #32]
 8007262:	e841 2300 	strex	r3, r2, [r1]
 8007266:	61bb      	str	r3, [r7, #24]
   return(result);
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d1e5      	bne.n	800723a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 0310 	and.w	r3, r3, #16
 8007278:	2b10      	cmp	r3, #16
 800727a:	d10a      	bne.n	8007292 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800727c:	2300      	movs	r3, #0
 800727e:	60fb      	str	r3, [r7, #12]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	60fb      	str	r3, [r7, #12]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	60fb      	str	r3, [r7, #12]
 8007290:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007296:	4619      	mov	r1, r3
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f7ff fdf9 	bl	8006e90 <HAL_UARTEx_RxEventCallback>
 800729e:	e002      	b.n	80072a6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f7ff fde1 	bl	8006e68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80072a6:	2300      	movs	r3, #0
 80072a8:	e002      	b.n	80072b0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80072aa:	2300      	movs	r3, #0
 80072ac:	e000      	b.n	80072b0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80072ae:	2302      	movs	r3, #2
  }
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3730      	adds	r7, #48	; 0x30
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072bc:	b0c0      	sub	sp, #256	; 0x100
 80072be:	af00      	add	r7, sp, #0
 80072c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80072d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072d4:	68d9      	ldr	r1, [r3, #12]
 80072d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	ea40 0301 	orr.w	r3, r0, r1
 80072e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80072e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072e6:	689a      	ldr	r2, [r3, #8]
 80072e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072ec:	691b      	ldr	r3, [r3, #16]
 80072ee:	431a      	orrs	r2, r3
 80072f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072f4:	695b      	ldr	r3, [r3, #20]
 80072f6:	431a      	orrs	r2, r3
 80072f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072fc:	69db      	ldr	r3, [r3, #28]
 80072fe:	4313      	orrs	r3, r2
 8007300:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007310:	f021 010c 	bic.w	r1, r1, #12
 8007314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800731e:	430b      	orrs	r3, r1
 8007320:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	695b      	ldr	r3, [r3, #20]
 800732a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800732e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007332:	6999      	ldr	r1, [r3, #24]
 8007334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	ea40 0301 	orr.w	r3, r0, r1
 800733e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	4b8f      	ldr	r3, [pc, #572]	; (8007584 <UART_SetConfig+0x2cc>)
 8007348:	429a      	cmp	r2, r3
 800734a:	d005      	beq.n	8007358 <UART_SetConfig+0xa0>
 800734c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	4b8d      	ldr	r3, [pc, #564]	; (8007588 <UART_SetConfig+0x2d0>)
 8007354:	429a      	cmp	r2, r3
 8007356:	d104      	bne.n	8007362 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007358:	f7fc feee 	bl	8004138 <HAL_RCC_GetPCLK2Freq>
 800735c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007360:	e003      	b.n	800736a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007362:	f7fc fed5 	bl	8004110 <HAL_RCC_GetPCLK1Freq>
 8007366:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800736a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800736e:	69db      	ldr	r3, [r3, #28]
 8007370:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007374:	f040 810c 	bne.w	8007590 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007378:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800737c:	2200      	movs	r2, #0
 800737e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007382:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007386:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800738a:	4622      	mov	r2, r4
 800738c:	462b      	mov	r3, r5
 800738e:	1891      	adds	r1, r2, r2
 8007390:	65b9      	str	r1, [r7, #88]	; 0x58
 8007392:	415b      	adcs	r3, r3
 8007394:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007396:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800739a:	4621      	mov	r1, r4
 800739c:	eb12 0801 	adds.w	r8, r2, r1
 80073a0:	4629      	mov	r1, r5
 80073a2:	eb43 0901 	adc.w	r9, r3, r1
 80073a6:	f04f 0200 	mov.w	r2, #0
 80073aa:	f04f 0300 	mov.w	r3, #0
 80073ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80073b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80073b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80073ba:	4690      	mov	r8, r2
 80073bc:	4699      	mov	r9, r3
 80073be:	4623      	mov	r3, r4
 80073c0:	eb18 0303 	adds.w	r3, r8, r3
 80073c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80073c8:	462b      	mov	r3, r5
 80073ca:	eb49 0303 	adc.w	r3, r9, r3
 80073ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80073d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80073de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80073e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80073e6:	460b      	mov	r3, r1
 80073e8:	18db      	adds	r3, r3, r3
 80073ea:	653b      	str	r3, [r7, #80]	; 0x50
 80073ec:	4613      	mov	r3, r2
 80073ee:	eb42 0303 	adc.w	r3, r2, r3
 80073f2:	657b      	str	r3, [r7, #84]	; 0x54
 80073f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80073f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80073fc:	f7f9 fc64 	bl	8000cc8 <__aeabi_uldivmod>
 8007400:	4602      	mov	r2, r0
 8007402:	460b      	mov	r3, r1
 8007404:	4b61      	ldr	r3, [pc, #388]	; (800758c <UART_SetConfig+0x2d4>)
 8007406:	fba3 2302 	umull	r2, r3, r3, r2
 800740a:	095b      	lsrs	r3, r3, #5
 800740c:	011c      	lsls	r4, r3, #4
 800740e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007412:	2200      	movs	r2, #0
 8007414:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007418:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800741c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007420:	4642      	mov	r2, r8
 8007422:	464b      	mov	r3, r9
 8007424:	1891      	adds	r1, r2, r2
 8007426:	64b9      	str	r1, [r7, #72]	; 0x48
 8007428:	415b      	adcs	r3, r3
 800742a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800742c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007430:	4641      	mov	r1, r8
 8007432:	eb12 0a01 	adds.w	sl, r2, r1
 8007436:	4649      	mov	r1, r9
 8007438:	eb43 0b01 	adc.w	fp, r3, r1
 800743c:	f04f 0200 	mov.w	r2, #0
 8007440:	f04f 0300 	mov.w	r3, #0
 8007444:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007448:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800744c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007450:	4692      	mov	sl, r2
 8007452:	469b      	mov	fp, r3
 8007454:	4643      	mov	r3, r8
 8007456:	eb1a 0303 	adds.w	r3, sl, r3
 800745a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800745e:	464b      	mov	r3, r9
 8007460:	eb4b 0303 	adc.w	r3, fp, r3
 8007464:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007474:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007478:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800747c:	460b      	mov	r3, r1
 800747e:	18db      	adds	r3, r3, r3
 8007480:	643b      	str	r3, [r7, #64]	; 0x40
 8007482:	4613      	mov	r3, r2
 8007484:	eb42 0303 	adc.w	r3, r2, r3
 8007488:	647b      	str	r3, [r7, #68]	; 0x44
 800748a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800748e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007492:	f7f9 fc19 	bl	8000cc8 <__aeabi_uldivmod>
 8007496:	4602      	mov	r2, r0
 8007498:	460b      	mov	r3, r1
 800749a:	4611      	mov	r1, r2
 800749c:	4b3b      	ldr	r3, [pc, #236]	; (800758c <UART_SetConfig+0x2d4>)
 800749e:	fba3 2301 	umull	r2, r3, r3, r1
 80074a2:	095b      	lsrs	r3, r3, #5
 80074a4:	2264      	movs	r2, #100	; 0x64
 80074a6:	fb02 f303 	mul.w	r3, r2, r3
 80074aa:	1acb      	subs	r3, r1, r3
 80074ac:	00db      	lsls	r3, r3, #3
 80074ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80074b2:	4b36      	ldr	r3, [pc, #216]	; (800758c <UART_SetConfig+0x2d4>)
 80074b4:	fba3 2302 	umull	r2, r3, r3, r2
 80074b8:	095b      	lsrs	r3, r3, #5
 80074ba:	005b      	lsls	r3, r3, #1
 80074bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80074c0:	441c      	add	r4, r3
 80074c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074c6:	2200      	movs	r2, #0
 80074c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80074cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80074d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80074d4:	4642      	mov	r2, r8
 80074d6:	464b      	mov	r3, r9
 80074d8:	1891      	adds	r1, r2, r2
 80074da:	63b9      	str	r1, [r7, #56]	; 0x38
 80074dc:	415b      	adcs	r3, r3
 80074de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80074e4:	4641      	mov	r1, r8
 80074e6:	1851      	adds	r1, r2, r1
 80074e8:	6339      	str	r1, [r7, #48]	; 0x30
 80074ea:	4649      	mov	r1, r9
 80074ec:	414b      	adcs	r3, r1
 80074ee:	637b      	str	r3, [r7, #52]	; 0x34
 80074f0:	f04f 0200 	mov.w	r2, #0
 80074f4:	f04f 0300 	mov.w	r3, #0
 80074f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80074fc:	4659      	mov	r1, fp
 80074fe:	00cb      	lsls	r3, r1, #3
 8007500:	4651      	mov	r1, sl
 8007502:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007506:	4651      	mov	r1, sl
 8007508:	00ca      	lsls	r2, r1, #3
 800750a:	4610      	mov	r0, r2
 800750c:	4619      	mov	r1, r3
 800750e:	4603      	mov	r3, r0
 8007510:	4642      	mov	r2, r8
 8007512:	189b      	adds	r3, r3, r2
 8007514:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007518:	464b      	mov	r3, r9
 800751a:	460a      	mov	r2, r1
 800751c:	eb42 0303 	adc.w	r3, r2, r3
 8007520:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007530:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007534:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007538:	460b      	mov	r3, r1
 800753a:	18db      	adds	r3, r3, r3
 800753c:	62bb      	str	r3, [r7, #40]	; 0x28
 800753e:	4613      	mov	r3, r2
 8007540:	eb42 0303 	adc.w	r3, r2, r3
 8007544:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007546:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800754a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800754e:	f7f9 fbbb 	bl	8000cc8 <__aeabi_uldivmod>
 8007552:	4602      	mov	r2, r0
 8007554:	460b      	mov	r3, r1
 8007556:	4b0d      	ldr	r3, [pc, #52]	; (800758c <UART_SetConfig+0x2d4>)
 8007558:	fba3 1302 	umull	r1, r3, r3, r2
 800755c:	095b      	lsrs	r3, r3, #5
 800755e:	2164      	movs	r1, #100	; 0x64
 8007560:	fb01 f303 	mul.w	r3, r1, r3
 8007564:	1ad3      	subs	r3, r2, r3
 8007566:	00db      	lsls	r3, r3, #3
 8007568:	3332      	adds	r3, #50	; 0x32
 800756a:	4a08      	ldr	r2, [pc, #32]	; (800758c <UART_SetConfig+0x2d4>)
 800756c:	fba2 2303 	umull	r2, r3, r2, r3
 8007570:	095b      	lsrs	r3, r3, #5
 8007572:	f003 0207 	and.w	r2, r3, #7
 8007576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4422      	add	r2, r4
 800757e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007580:	e105      	b.n	800778e <UART_SetConfig+0x4d6>
 8007582:	bf00      	nop
 8007584:	40011000 	.word	0x40011000
 8007588:	40011400 	.word	0x40011400
 800758c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007590:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007594:	2200      	movs	r2, #0
 8007596:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800759a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800759e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80075a2:	4642      	mov	r2, r8
 80075a4:	464b      	mov	r3, r9
 80075a6:	1891      	adds	r1, r2, r2
 80075a8:	6239      	str	r1, [r7, #32]
 80075aa:	415b      	adcs	r3, r3
 80075ac:	627b      	str	r3, [r7, #36]	; 0x24
 80075ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80075b2:	4641      	mov	r1, r8
 80075b4:	1854      	adds	r4, r2, r1
 80075b6:	4649      	mov	r1, r9
 80075b8:	eb43 0501 	adc.w	r5, r3, r1
 80075bc:	f04f 0200 	mov.w	r2, #0
 80075c0:	f04f 0300 	mov.w	r3, #0
 80075c4:	00eb      	lsls	r3, r5, #3
 80075c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80075ca:	00e2      	lsls	r2, r4, #3
 80075cc:	4614      	mov	r4, r2
 80075ce:	461d      	mov	r5, r3
 80075d0:	4643      	mov	r3, r8
 80075d2:	18e3      	adds	r3, r4, r3
 80075d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80075d8:	464b      	mov	r3, r9
 80075da:	eb45 0303 	adc.w	r3, r5, r3
 80075de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80075e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80075ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80075f2:	f04f 0200 	mov.w	r2, #0
 80075f6:	f04f 0300 	mov.w	r3, #0
 80075fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80075fe:	4629      	mov	r1, r5
 8007600:	008b      	lsls	r3, r1, #2
 8007602:	4621      	mov	r1, r4
 8007604:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007608:	4621      	mov	r1, r4
 800760a:	008a      	lsls	r2, r1, #2
 800760c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007610:	f7f9 fb5a 	bl	8000cc8 <__aeabi_uldivmod>
 8007614:	4602      	mov	r2, r0
 8007616:	460b      	mov	r3, r1
 8007618:	4b60      	ldr	r3, [pc, #384]	; (800779c <UART_SetConfig+0x4e4>)
 800761a:	fba3 2302 	umull	r2, r3, r3, r2
 800761e:	095b      	lsrs	r3, r3, #5
 8007620:	011c      	lsls	r4, r3, #4
 8007622:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007626:	2200      	movs	r2, #0
 8007628:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800762c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007630:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007634:	4642      	mov	r2, r8
 8007636:	464b      	mov	r3, r9
 8007638:	1891      	adds	r1, r2, r2
 800763a:	61b9      	str	r1, [r7, #24]
 800763c:	415b      	adcs	r3, r3
 800763e:	61fb      	str	r3, [r7, #28]
 8007640:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007644:	4641      	mov	r1, r8
 8007646:	1851      	adds	r1, r2, r1
 8007648:	6139      	str	r1, [r7, #16]
 800764a:	4649      	mov	r1, r9
 800764c:	414b      	adcs	r3, r1
 800764e:	617b      	str	r3, [r7, #20]
 8007650:	f04f 0200 	mov.w	r2, #0
 8007654:	f04f 0300 	mov.w	r3, #0
 8007658:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800765c:	4659      	mov	r1, fp
 800765e:	00cb      	lsls	r3, r1, #3
 8007660:	4651      	mov	r1, sl
 8007662:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007666:	4651      	mov	r1, sl
 8007668:	00ca      	lsls	r2, r1, #3
 800766a:	4610      	mov	r0, r2
 800766c:	4619      	mov	r1, r3
 800766e:	4603      	mov	r3, r0
 8007670:	4642      	mov	r2, r8
 8007672:	189b      	adds	r3, r3, r2
 8007674:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007678:	464b      	mov	r3, r9
 800767a:	460a      	mov	r2, r1
 800767c:	eb42 0303 	adc.w	r3, r2, r3
 8007680:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	67bb      	str	r3, [r7, #120]	; 0x78
 800768e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007690:	f04f 0200 	mov.w	r2, #0
 8007694:	f04f 0300 	mov.w	r3, #0
 8007698:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800769c:	4649      	mov	r1, r9
 800769e:	008b      	lsls	r3, r1, #2
 80076a0:	4641      	mov	r1, r8
 80076a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076a6:	4641      	mov	r1, r8
 80076a8:	008a      	lsls	r2, r1, #2
 80076aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80076ae:	f7f9 fb0b 	bl	8000cc8 <__aeabi_uldivmod>
 80076b2:	4602      	mov	r2, r0
 80076b4:	460b      	mov	r3, r1
 80076b6:	4b39      	ldr	r3, [pc, #228]	; (800779c <UART_SetConfig+0x4e4>)
 80076b8:	fba3 1302 	umull	r1, r3, r3, r2
 80076bc:	095b      	lsrs	r3, r3, #5
 80076be:	2164      	movs	r1, #100	; 0x64
 80076c0:	fb01 f303 	mul.w	r3, r1, r3
 80076c4:	1ad3      	subs	r3, r2, r3
 80076c6:	011b      	lsls	r3, r3, #4
 80076c8:	3332      	adds	r3, #50	; 0x32
 80076ca:	4a34      	ldr	r2, [pc, #208]	; (800779c <UART_SetConfig+0x4e4>)
 80076cc:	fba2 2303 	umull	r2, r3, r2, r3
 80076d0:	095b      	lsrs	r3, r3, #5
 80076d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80076d6:	441c      	add	r4, r3
 80076d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076dc:	2200      	movs	r2, #0
 80076de:	673b      	str	r3, [r7, #112]	; 0x70
 80076e0:	677a      	str	r2, [r7, #116]	; 0x74
 80076e2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80076e6:	4642      	mov	r2, r8
 80076e8:	464b      	mov	r3, r9
 80076ea:	1891      	adds	r1, r2, r2
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	415b      	adcs	r3, r3
 80076f0:	60fb      	str	r3, [r7, #12]
 80076f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80076f6:	4641      	mov	r1, r8
 80076f8:	1851      	adds	r1, r2, r1
 80076fa:	6039      	str	r1, [r7, #0]
 80076fc:	4649      	mov	r1, r9
 80076fe:	414b      	adcs	r3, r1
 8007700:	607b      	str	r3, [r7, #4]
 8007702:	f04f 0200 	mov.w	r2, #0
 8007706:	f04f 0300 	mov.w	r3, #0
 800770a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800770e:	4659      	mov	r1, fp
 8007710:	00cb      	lsls	r3, r1, #3
 8007712:	4651      	mov	r1, sl
 8007714:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007718:	4651      	mov	r1, sl
 800771a:	00ca      	lsls	r2, r1, #3
 800771c:	4610      	mov	r0, r2
 800771e:	4619      	mov	r1, r3
 8007720:	4603      	mov	r3, r0
 8007722:	4642      	mov	r2, r8
 8007724:	189b      	adds	r3, r3, r2
 8007726:	66bb      	str	r3, [r7, #104]	; 0x68
 8007728:	464b      	mov	r3, r9
 800772a:	460a      	mov	r2, r1
 800772c:	eb42 0303 	adc.w	r3, r2, r3
 8007730:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	663b      	str	r3, [r7, #96]	; 0x60
 800773c:	667a      	str	r2, [r7, #100]	; 0x64
 800773e:	f04f 0200 	mov.w	r2, #0
 8007742:	f04f 0300 	mov.w	r3, #0
 8007746:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800774a:	4649      	mov	r1, r9
 800774c:	008b      	lsls	r3, r1, #2
 800774e:	4641      	mov	r1, r8
 8007750:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007754:	4641      	mov	r1, r8
 8007756:	008a      	lsls	r2, r1, #2
 8007758:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800775c:	f7f9 fab4 	bl	8000cc8 <__aeabi_uldivmod>
 8007760:	4602      	mov	r2, r0
 8007762:	460b      	mov	r3, r1
 8007764:	4b0d      	ldr	r3, [pc, #52]	; (800779c <UART_SetConfig+0x4e4>)
 8007766:	fba3 1302 	umull	r1, r3, r3, r2
 800776a:	095b      	lsrs	r3, r3, #5
 800776c:	2164      	movs	r1, #100	; 0x64
 800776e:	fb01 f303 	mul.w	r3, r1, r3
 8007772:	1ad3      	subs	r3, r2, r3
 8007774:	011b      	lsls	r3, r3, #4
 8007776:	3332      	adds	r3, #50	; 0x32
 8007778:	4a08      	ldr	r2, [pc, #32]	; (800779c <UART_SetConfig+0x4e4>)
 800777a:	fba2 2303 	umull	r2, r3, r2, r3
 800777e:	095b      	lsrs	r3, r3, #5
 8007780:	f003 020f 	and.w	r2, r3, #15
 8007784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4422      	add	r2, r4
 800778c:	609a      	str	r2, [r3, #8]
}
 800778e:	bf00      	nop
 8007790:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007794:	46bd      	mov	sp, r7
 8007796:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800779a:	bf00      	nop
 800779c:	51eb851f 	.word	0x51eb851f

080077a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80077a0:	b084      	sub	sp, #16
 80077a2:	b580      	push	{r7, lr}
 80077a4:	b084      	sub	sp, #16
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
 80077aa:	f107 001c 	add.w	r0, r7, #28
 80077ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80077b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d122      	bne.n	80077fe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	68db      	ldr	r3, [r3, #12]
 80077c8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80077cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80077e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d105      	bne.n	80077f2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f001 fbe8 	bl	8008fc8 <USB_CoreReset>
 80077f8:	4603      	mov	r3, r0
 80077fa:	73fb      	strb	r3, [r7, #15]
 80077fc:	e01a      	b.n	8007834 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f001 fbdc 	bl	8008fc8 <USB_CoreReset>
 8007810:	4603      	mov	r3, r0
 8007812:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007816:	2b00      	cmp	r3, #0
 8007818:	d106      	bne.n	8007828 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800781e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	639a      	str	r2, [r3, #56]	; 0x38
 8007826:	e005      	b.n	8007834 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007836:	2b01      	cmp	r3, #1
 8007838:	d10b      	bne.n	8007852 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	f043 0206 	orr.w	r2, r3, #6
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	f043 0220 	orr.w	r2, r3, #32
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007852:	7bfb      	ldrb	r3, [r7, #15]
}
 8007854:	4618      	mov	r0, r3
 8007856:	3710      	adds	r7, #16
 8007858:	46bd      	mov	sp, r7
 800785a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800785e:	b004      	add	sp, #16
 8007860:	4770      	bx	lr
	...

08007864 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007864:	b480      	push	{r7}
 8007866:	b087      	sub	sp, #28
 8007868:	af00      	add	r7, sp, #0
 800786a:	60f8      	str	r0, [r7, #12]
 800786c:	60b9      	str	r1, [r7, #8]
 800786e:	4613      	mov	r3, r2
 8007870:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007872:	79fb      	ldrb	r3, [r7, #7]
 8007874:	2b02      	cmp	r3, #2
 8007876:	d165      	bne.n	8007944 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	4a41      	ldr	r2, [pc, #260]	; (8007980 <USB_SetTurnaroundTime+0x11c>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d906      	bls.n	800788e <USB_SetTurnaroundTime+0x2a>
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	4a40      	ldr	r2, [pc, #256]	; (8007984 <USB_SetTurnaroundTime+0x120>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d202      	bcs.n	800788e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007888:	230f      	movs	r3, #15
 800788a:	617b      	str	r3, [r7, #20]
 800788c:	e062      	b.n	8007954 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	4a3c      	ldr	r2, [pc, #240]	; (8007984 <USB_SetTurnaroundTime+0x120>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d306      	bcc.n	80078a4 <USB_SetTurnaroundTime+0x40>
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	4a3b      	ldr	r2, [pc, #236]	; (8007988 <USB_SetTurnaroundTime+0x124>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d202      	bcs.n	80078a4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800789e:	230e      	movs	r3, #14
 80078a0:	617b      	str	r3, [r7, #20]
 80078a2:	e057      	b.n	8007954 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	4a38      	ldr	r2, [pc, #224]	; (8007988 <USB_SetTurnaroundTime+0x124>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d306      	bcc.n	80078ba <USB_SetTurnaroundTime+0x56>
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	4a37      	ldr	r2, [pc, #220]	; (800798c <USB_SetTurnaroundTime+0x128>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d202      	bcs.n	80078ba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80078b4:	230d      	movs	r3, #13
 80078b6:	617b      	str	r3, [r7, #20]
 80078b8:	e04c      	b.n	8007954 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	4a33      	ldr	r2, [pc, #204]	; (800798c <USB_SetTurnaroundTime+0x128>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d306      	bcc.n	80078d0 <USB_SetTurnaroundTime+0x6c>
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	4a32      	ldr	r2, [pc, #200]	; (8007990 <USB_SetTurnaroundTime+0x12c>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d802      	bhi.n	80078d0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80078ca:	230c      	movs	r3, #12
 80078cc:	617b      	str	r3, [r7, #20]
 80078ce:	e041      	b.n	8007954 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	4a2f      	ldr	r2, [pc, #188]	; (8007990 <USB_SetTurnaroundTime+0x12c>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d906      	bls.n	80078e6 <USB_SetTurnaroundTime+0x82>
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	4a2e      	ldr	r2, [pc, #184]	; (8007994 <USB_SetTurnaroundTime+0x130>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d802      	bhi.n	80078e6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80078e0:	230b      	movs	r3, #11
 80078e2:	617b      	str	r3, [r7, #20]
 80078e4:	e036      	b.n	8007954 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	4a2a      	ldr	r2, [pc, #168]	; (8007994 <USB_SetTurnaroundTime+0x130>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d906      	bls.n	80078fc <USB_SetTurnaroundTime+0x98>
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	4a29      	ldr	r2, [pc, #164]	; (8007998 <USB_SetTurnaroundTime+0x134>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d802      	bhi.n	80078fc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80078f6:	230a      	movs	r3, #10
 80078f8:	617b      	str	r3, [r7, #20]
 80078fa:	e02b      	b.n	8007954 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	4a26      	ldr	r2, [pc, #152]	; (8007998 <USB_SetTurnaroundTime+0x134>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d906      	bls.n	8007912 <USB_SetTurnaroundTime+0xae>
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	4a25      	ldr	r2, [pc, #148]	; (800799c <USB_SetTurnaroundTime+0x138>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d202      	bcs.n	8007912 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800790c:	2309      	movs	r3, #9
 800790e:	617b      	str	r3, [r7, #20]
 8007910:	e020      	b.n	8007954 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	4a21      	ldr	r2, [pc, #132]	; (800799c <USB_SetTurnaroundTime+0x138>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d306      	bcc.n	8007928 <USB_SetTurnaroundTime+0xc4>
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	4a20      	ldr	r2, [pc, #128]	; (80079a0 <USB_SetTurnaroundTime+0x13c>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d802      	bhi.n	8007928 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007922:	2308      	movs	r3, #8
 8007924:	617b      	str	r3, [r7, #20]
 8007926:	e015      	b.n	8007954 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	4a1d      	ldr	r2, [pc, #116]	; (80079a0 <USB_SetTurnaroundTime+0x13c>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d906      	bls.n	800793e <USB_SetTurnaroundTime+0xda>
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	4a1c      	ldr	r2, [pc, #112]	; (80079a4 <USB_SetTurnaroundTime+0x140>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d202      	bcs.n	800793e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007938:	2307      	movs	r3, #7
 800793a:	617b      	str	r3, [r7, #20]
 800793c:	e00a      	b.n	8007954 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800793e:	2306      	movs	r3, #6
 8007940:	617b      	str	r3, [r7, #20]
 8007942:	e007      	b.n	8007954 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007944:	79fb      	ldrb	r3, [r7, #7]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d102      	bne.n	8007950 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800794a:	2309      	movs	r3, #9
 800794c:	617b      	str	r3, [r7, #20]
 800794e:	e001      	b.n	8007954 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007950:	2309      	movs	r3, #9
 8007952:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	68da      	ldr	r2, [r3, #12]
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	029b      	lsls	r3, r3, #10
 8007968:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800796c:	431a      	orrs	r2, r3
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007972:	2300      	movs	r3, #0
}
 8007974:	4618      	mov	r0, r3
 8007976:	371c      	adds	r7, #28
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr
 8007980:	00d8acbf 	.word	0x00d8acbf
 8007984:	00e4e1c0 	.word	0x00e4e1c0
 8007988:	00f42400 	.word	0x00f42400
 800798c:	01067380 	.word	0x01067380
 8007990:	011a499f 	.word	0x011a499f
 8007994:	01312cff 	.word	0x01312cff
 8007998:	014ca43f 	.word	0x014ca43f
 800799c:	016e3600 	.word	0x016e3600
 80079a0:	01a6ab1f 	.word	0x01a6ab1f
 80079a4:	01e84800 	.word	0x01e84800

080079a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	f043 0201 	orr.w	r2, r3, #1
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	370c      	adds	r7, #12
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr

080079ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80079ca:	b480      	push	{r7}
 80079cc:	b083      	sub	sp, #12
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	f023 0201 	bic.w	r2, r3, #1
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80079de:	2300      	movs	r3, #0
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	370c      	adds	r7, #12
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	460b      	mov	r3, r1
 80079f6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80079f8:	2300      	movs	r3, #0
 80079fa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007a08:	78fb      	ldrb	r3, [r7, #3]
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d115      	bne.n	8007a3a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007a1a:	2001      	movs	r0, #1
 8007a1c:	f7fa f8c0 	bl	8001ba0 <HAL_Delay>
      ms++;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	3301      	adds	r3, #1
 8007a24:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f001 fa3f 	bl	8008eaa <USB_GetMode>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d01e      	beq.n	8007a70 <USB_SetCurrentMode+0x84>
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2b31      	cmp	r3, #49	; 0x31
 8007a36:	d9f0      	bls.n	8007a1a <USB_SetCurrentMode+0x2e>
 8007a38:	e01a      	b.n	8007a70 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007a3a:	78fb      	ldrb	r3, [r7, #3]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d115      	bne.n	8007a6c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007a4c:	2001      	movs	r0, #1
 8007a4e:	f7fa f8a7 	bl	8001ba0 <HAL_Delay>
      ms++;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	3301      	adds	r3, #1
 8007a56:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f001 fa26 	bl	8008eaa <USB_GetMode>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d005      	beq.n	8007a70 <USB_SetCurrentMode+0x84>
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2b31      	cmp	r3, #49	; 0x31
 8007a68:	d9f0      	bls.n	8007a4c <USB_SetCurrentMode+0x60>
 8007a6a:	e001      	b.n	8007a70 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e005      	b.n	8007a7c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2b32      	cmp	r3, #50	; 0x32
 8007a74:	d101      	bne.n	8007a7a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	e000      	b.n	8007a7c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007a7a:	2300      	movs	r3, #0
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3710      	adds	r7, #16
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a84:	b084      	sub	sp, #16
 8007a86:	b580      	push	{r7, lr}
 8007a88:	b086      	sub	sp, #24
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
 8007a8e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007a92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007a96:	2300      	movs	r3, #0
 8007a98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	613b      	str	r3, [r7, #16]
 8007aa2:	e009      	b.n	8007ab8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	3340      	adds	r3, #64	; 0x40
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	4413      	add	r3, r2
 8007aae:	2200      	movs	r2, #0
 8007ab0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	613b      	str	r3, [r7, #16]
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	2b0e      	cmp	r3, #14
 8007abc:	d9f2      	bls.n	8007aa4 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d11c      	bne.n	8007afe <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	68fa      	ldr	r2, [r7, #12]
 8007ace:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ad2:	f043 0302 	orr.w	r3, r3, #2
 8007ad6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007adc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	601a      	str	r2, [r3, #0]
 8007afc:	e005      	b.n	8007b0a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b02:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b10:	461a      	mov	r2, r3
 8007b12:	2300      	movs	r3, #0
 8007b14:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b24:	461a      	mov	r2, r3
 8007b26:	680b      	ldr	r3, [r1, #0]
 8007b28:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d10c      	bne.n	8007b4a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d104      	bne.n	8007b40 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007b36:	2100      	movs	r1, #0
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 f965 	bl	8007e08 <USB_SetDevSpeed>
 8007b3e:	e008      	b.n	8007b52 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007b40:	2101      	movs	r1, #1
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 f960 	bl	8007e08 <USB_SetDevSpeed>
 8007b48:	e003      	b.n	8007b52 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007b4a:	2103      	movs	r1, #3
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 f95b 	bl	8007e08 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007b52:	2110      	movs	r1, #16
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 f8f3 	bl	8007d40 <USB_FlushTxFifo>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d001      	beq.n	8007b64 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 f91f 	bl	8007da8 <USB_FlushRxFifo>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d001      	beq.n	8007b74 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b86:	461a      	mov	r2, r3
 8007b88:	2300      	movs	r3, #0
 8007b8a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b92:	461a      	mov	r2, r3
 8007b94:	2300      	movs	r3, #0
 8007b96:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b98:	2300      	movs	r3, #0
 8007b9a:	613b      	str	r3, [r7, #16]
 8007b9c:	e043      	b.n	8007c26 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	015a      	lsls	r2, r3, #5
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	4413      	add	r3, r2
 8007ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007bb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bb4:	d118      	bne.n	8007be8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d10a      	bne.n	8007bd2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	015a      	lsls	r2, r3, #5
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	4413      	add	r3, r2
 8007bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bc8:	461a      	mov	r2, r3
 8007bca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007bce:	6013      	str	r3, [r2, #0]
 8007bd0:	e013      	b.n	8007bfa <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	015a      	lsls	r2, r3, #5
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	4413      	add	r3, r2
 8007bda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bde:	461a      	mov	r2, r3
 8007be0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007be4:	6013      	str	r3, [r2, #0]
 8007be6:	e008      	b.n	8007bfa <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	015a      	lsls	r2, r3, #5
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	4413      	add	r3, r2
 8007bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	015a      	lsls	r2, r3, #5
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	4413      	add	r3, r2
 8007c02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c06:	461a      	mov	r2, r3
 8007c08:	2300      	movs	r3, #0
 8007c0a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	015a      	lsls	r2, r3, #5
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	4413      	add	r3, r2
 8007c14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c18:	461a      	mov	r2, r3
 8007c1a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007c1e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	3301      	adds	r3, #1
 8007c24:	613b      	str	r3, [r7, #16]
 8007c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c28:	693a      	ldr	r2, [r7, #16]
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d3b7      	bcc.n	8007b9e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c2e:	2300      	movs	r3, #0
 8007c30:	613b      	str	r3, [r7, #16]
 8007c32:	e043      	b.n	8007cbc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	015a      	lsls	r2, r3, #5
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	4413      	add	r3, r2
 8007c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c4a:	d118      	bne.n	8007c7e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d10a      	bne.n	8007c68 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	015a      	lsls	r2, r3, #5
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	4413      	add	r3, r2
 8007c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c5e:	461a      	mov	r2, r3
 8007c60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007c64:	6013      	str	r3, [r2, #0]
 8007c66:	e013      	b.n	8007c90 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	015a      	lsls	r2, r3, #5
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	4413      	add	r3, r2
 8007c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c74:	461a      	mov	r2, r3
 8007c76:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007c7a:	6013      	str	r3, [r2, #0]
 8007c7c:	e008      	b.n	8007c90 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	015a      	lsls	r2, r3, #5
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	4413      	add	r3, r2
 8007c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	015a      	lsls	r2, r3, #5
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	4413      	add	r3, r2
 8007c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	015a      	lsls	r2, r3, #5
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	4413      	add	r3, r2
 8007caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cae:	461a      	mov	r2, r3
 8007cb0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007cb4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	3301      	adds	r3, #1
 8007cba:	613b      	str	r3, [r7, #16]
 8007cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbe:	693a      	ldr	r2, [r7, #16]
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d3b7      	bcc.n	8007c34 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cca:	691b      	ldr	r3, [r3, #16]
 8007ccc:	68fa      	ldr	r2, [r7, #12]
 8007cce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cd6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007ce4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d105      	bne.n	8007cf8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	699b      	ldr	r3, [r3, #24]
 8007cf0:	f043 0210 	orr.w	r2, r3, #16
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	699a      	ldr	r2, [r3, #24]
 8007cfc:	4b0f      	ldr	r3, [pc, #60]	; (8007d3c <USB_DevInit+0x2b8>)
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d005      	beq.n	8007d16 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	699b      	ldr	r3, [r3, #24]
 8007d0e:	f043 0208 	orr.w	r2, r3, #8
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d107      	bne.n	8007d2c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	699b      	ldr	r3, [r3, #24]
 8007d20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d24:	f043 0304 	orr.w	r3, r3, #4
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007d2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3718      	adds	r7, #24
 8007d32:	46bd      	mov	sp, r7
 8007d34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d38:	b004      	add	sp, #16
 8007d3a:	4770      	bx	lr
 8007d3c:	803c3800 	.word	0x803c3800

08007d40 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b085      	sub	sp, #20
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	3301      	adds	r3, #1
 8007d52:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	4a13      	ldr	r2, [pc, #76]	; (8007da4 <USB_FlushTxFifo+0x64>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d901      	bls.n	8007d60 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007d5c:	2303      	movs	r3, #3
 8007d5e:	e01b      	b.n	8007d98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	691b      	ldr	r3, [r3, #16]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	daf2      	bge.n	8007d4e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	019b      	lsls	r3, r3, #6
 8007d70:	f043 0220 	orr.w	r2, r3, #32
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	4a08      	ldr	r2, [pc, #32]	; (8007da4 <USB_FlushTxFifo+0x64>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d901      	bls.n	8007d8a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007d86:	2303      	movs	r3, #3
 8007d88:	e006      	b.n	8007d98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	691b      	ldr	r3, [r3, #16]
 8007d8e:	f003 0320 	and.w	r3, r3, #32
 8007d92:	2b20      	cmp	r3, #32
 8007d94:	d0f0      	beq.n	8007d78 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007d96:	2300      	movs	r3, #0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3714      	adds	r7, #20
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr
 8007da4:	00030d40 	.word	0x00030d40

08007da8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b085      	sub	sp, #20
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007db0:	2300      	movs	r3, #0
 8007db2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	3301      	adds	r3, #1
 8007db8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	4a11      	ldr	r2, [pc, #68]	; (8007e04 <USB_FlushRxFifo+0x5c>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d901      	bls.n	8007dc6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007dc2:	2303      	movs	r3, #3
 8007dc4:	e018      	b.n	8007df8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	691b      	ldr	r3, [r3, #16]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	daf2      	bge.n	8007db4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2210      	movs	r2, #16
 8007dd6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	3301      	adds	r3, #1
 8007ddc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	4a08      	ldr	r2, [pc, #32]	; (8007e04 <USB_FlushRxFifo+0x5c>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d901      	bls.n	8007dea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007de6:	2303      	movs	r3, #3
 8007de8:	e006      	b.n	8007df8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	691b      	ldr	r3, [r3, #16]
 8007dee:	f003 0310 	and.w	r3, r3, #16
 8007df2:	2b10      	cmp	r3, #16
 8007df4:	d0f0      	beq.n	8007dd8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007df6:	2300      	movs	r3, #0
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3714      	adds	r7, #20
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr
 8007e04:	00030d40 	.word	0x00030d40

08007e08 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	460b      	mov	r3, r1
 8007e12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	78fb      	ldrb	r3, [r7, #3]
 8007e22:	68f9      	ldr	r1, [r7, #12]
 8007e24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007e2c:	2300      	movs	r3, #0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3714      	adds	r7, #20
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr

08007e3a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007e3a:	b480      	push	{r7}
 8007e3c:	b087      	sub	sp, #28
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	f003 0306 	and.w	r3, r3, #6
 8007e52:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d102      	bne.n	8007e60 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	75fb      	strb	r3, [r7, #23]
 8007e5e:	e00a      	b.n	8007e76 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2b02      	cmp	r3, #2
 8007e64:	d002      	beq.n	8007e6c <USB_GetDevSpeed+0x32>
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2b06      	cmp	r3, #6
 8007e6a:	d102      	bne.n	8007e72 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007e6c:	2302      	movs	r3, #2
 8007e6e:	75fb      	strb	r3, [r7, #23]
 8007e70:	e001      	b.n	8007e76 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007e72:	230f      	movs	r3, #15
 8007e74:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007e76:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	371c      	adds	r7, #28
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b085      	sub	sp, #20
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	785b      	ldrb	r3, [r3, #1]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d13a      	bne.n	8007f16 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ea6:	69da      	ldr	r2, [r3, #28]
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	f003 030f 	and.w	r3, r3, #15
 8007eb0:	2101      	movs	r1, #1
 8007eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	68f9      	ldr	r1, [r7, #12]
 8007eba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	015a      	lsls	r2, r3, #5
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	4413      	add	r3, r2
 8007eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d155      	bne.n	8007f84 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	015a      	lsls	r2, r3, #5
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	4413      	add	r3, r2
 8007ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	68db      	ldr	r3, [r3, #12]
 8007eea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	791b      	ldrb	r3, [r3, #4]
 8007ef2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007ef4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	059b      	lsls	r3, r3, #22
 8007efa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007efc:	4313      	orrs	r3, r2
 8007efe:	68ba      	ldr	r2, [r7, #8]
 8007f00:	0151      	lsls	r1, r2, #5
 8007f02:	68fa      	ldr	r2, [r7, #12]
 8007f04:	440a      	add	r2, r1
 8007f06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f12:	6013      	str	r3, [r2, #0]
 8007f14:	e036      	b.n	8007f84 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f1c:	69da      	ldr	r2, [r3, #28]
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	f003 030f 	and.w	r3, r3, #15
 8007f26:	2101      	movs	r1, #1
 8007f28:	fa01 f303 	lsl.w	r3, r1, r3
 8007f2c:	041b      	lsls	r3, r3, #16
 8007f2e:	68f9      	ldr	r1, [r7, #12]
 8007f30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f34:	4313      	orrs	r3, r2
 8007f36:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	015a      	lsls	r2, r3, #5
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	4413      	add	r3, r2
 8007f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d11a      	bne.n	8007f84 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	015a      	lsls	r2, r3, #5
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	4413      	add	r3, r2
 8007f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	791b      	ldrb	r3, [r3, #4]
 8007f68:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007f6a:	430b      	orrs	r3, r1
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	68ba      	ldr	r2, [r7, #8]
 8007f70:	0151      	lsls	r1, r2, #5
 8007f72:	68fa      	ldr	r2, [r7, #12]
 8007f74:	440a      	add	r2, r1
 8007f76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f82:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3714      	adds	r7, #20
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr
	...

08007f94 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b085      	sub	sp, #20
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	785b      	ldrb	r3, [r3, #1]
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d161      	bne.n	8008074 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	015a      	lsls	r2, r3, #5
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fc6:	d11f      	bne.n	8008008 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	015a      	lsls	r2, r3, #5
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	4413      	add	r3, r2
 8007fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	68ba      	ldr	r2, [r7, #8]
 8007fd8:	0151      	lsls	r1, r2, #5
 8007fda:	68fa      	ldr	r2, [r7, #12]
 8007fdc:	440a      	add	r2, r1
 8007fde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fe2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007fe6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	015a      	lsls	r2, r3, #5
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	4413      	add	r3, r2
 8007ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	68ba      	ldr	r2, [r7, #8]
 8007ff8:	0151      	lsls	r1, r2, #5
 8007ffa:	68fa      	ldr	r2, [r7, #12]
 8007ffc:	440a      	add	r2, r1
 8007ffe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008002:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008006:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800800e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	f003 030f 	and.w	r3, r3, #15
 8008018:	2101      	movs	r1, #1
 800801a:	fa01 f303 	lsl.w	r3, r1, r3
 800801e:	b29b      	uxth	r3, r3
 8008020:	43db      	mvns	r3, r3
 8008022:	68f9      	ldr	r1, [r7, #12]
 8008024:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008028:	4013      	ands	r3, r2
 800802a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008032:	69da      	ldr	r2, [r3, #28]
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	f003 030f 	and.w	r3, r3, #15
 800803c:	2101      	movs	r1, #1
 800803e:	fa01 f303 	lsl.w	r3, r1, r3
 8008042:	b29b      	uxth	r3, r3
 8008044:	43db      	mvns	r3, r3
 8008046:	68f9      	ldr	r1, [r7, #12]
 8008048:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800804c:	4013      	ands	r3, r2
 800804e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	015a      	lsls	r2, r3, #5
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	4413      	add	r3, r2
 8008058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	0159      	lsls	r1, r3, #5
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	440b      	add	r3, r1
 8008066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800806a:	4619      	mov	r1, r3
 800806c:	4b35      	ldr	r3, [pc, #212]	; (8008144 <USB_DeactivateEndpoint+0x1b0>)
 800806e:	4013      	ands	r3, r2
 8008070:	600b      	str	r3, [r1, #0]
 8008072:	e060      	b.n	8008136 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	015a      	lsls	r2, r3, #5
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	4413      	add	r3, r2
 800807c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008086:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800808a:	d11f      	bne.n	80080cc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	015a      	lsls	r2, r3, #5
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	4413      	add	r3, r2
 8008094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	68ba      	ldr	r2, [r7, #8]
 800809c:	0151      	lsls	r1, r2, #5
 800809e:	68fa      	ldr	r2, [r7, #12]
 80080a0:	440a      	add	r2, r1
 80080a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80080aa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	015a      	lsls	r2, r3, #5
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	4413      	add	r3, r2
 80080b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	68ba      	ldr	r2, [r7, #8]
 80080bc:	0151      	lsls	r1, r2, #5
 80080be:	68fa      	ldr	r2, [r7, #12]
 80080c0:	440a      	add	r2, r1
 80080c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80080ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	f003 030f 	and.w	r3, r3, #15
 80080dc:	2101      	movs	r1, #1
 80080de:	fa01 f303 	lsl.w	r3, r1, r3
 80080e2:	041b      	lsls	r3, r3, #16
 80080e4:	43db      	mvns	r3, r3
 80080e6:	68f9      	ldr	r1, [r7, #12]
 80080e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80080ec:	4013      	ands	r3, r2
 80080ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080f6:	69da      	ldr	r2, [r3, #28]
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	f003 030f 	and.w	r3, r3, #15
 8008100:	2101      	movs	r1, #1
 8008102:	fa01 f303 	lsl.w	r3, r1, r3
 8008106:	041b      	lsls	r3, r3, #16
 8008108:	43db      	mvns	r3, r3
 800810a:	68f9      	ldr	r1, [r7, #12]
 800810c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008110:	4013      	ands	r3, r2
 8008112:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	015a      	lsls	r2, r3, #5
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	4413      	add	r3, r2
 800811c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	0159      	lsls	r1, r3, #5
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	440b      	add	r3, r1
 800812a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800812e:	4619      	mov	r1, r3
 8008130:	4b05      	ldr	r3, [pc, #20]	; (8008148 <USB_DeactivateEndpoint+0x1b4>)
 8008132:	4013      	ands	r3, r2
 8008134:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008136:	2300      	movs	r3, #0
}
 8008138:	4618      	mov	r0, r3
 800813a:	3714      	adds	r7, #20
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr
 8008144:	ec337800 	.word	0xec337800
 8008148:	eff37800 	.word	0xeff37800

0800814c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b08a      	sub	sp, #40	; 0x28
 8008150:	af02      	add	r7, sp, #8
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	4613      	mov	r3, r2
 8008158:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	785b      	ldrb	r3, [r3, #1]
 8008168:	2b01      	cmp	r3, #1
 800816a:	f040 815c 	bne.w	8008426 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	699b      	ldr	r3, [r3, #24]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d132      	bne.n	80081dc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008176:	69bb      	ldr	r3, [r7, #24]
 8008178:	015a      	lsls	r2, r3, #5
 800817a:	69fb      	ldr	r3, [r7, #28]
 800817c:	4413      	add	r3, r2
 800817e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008182:	691b      	ldr	r3, [r3, #16]
 8008184:	69ba      	ldr	r2, [r7, #24]
 8008186:	0151      	lsls	r1, r2, #5
 8008188:	69fa      	ldr	r2, [r7, #28]
 800818a:	440a      	add	r2, r1
 800818c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008190:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008194:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008198:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	015a      	lsls	r2, r3, #5
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	4413      	add	r3, r2
 80081a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081a6:	691b      	ldr	r3, [r3, #16]
 80081a8:	69ba      	ldr	r2, [r7, #24]
 80081aa:	0151      	lsls	r1, r2, #5
 80081ac:	69fa      	ldr	r2, [r7, #28]
 80081ae:	440a      	add	r2, r1
 80081b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80081b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	015a      	lsls	r2, r3, #5
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	4413      	add	r3, r2
 80081c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081c6:	691b      	ldr	r3, [r3, #16]
 80081c8:	69ba      	ldr	r2, [r7, #24]
 80081ca:	0151      	lsls	r1, r2, #5
 80081cc:	69fa      	ldr	r2, [r7, #28]
 80081ce:	440a      	add	r2, r1
 80081d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081d4:	0cdb      	lsrs	r3, r3, #19
 80081d6:	04db      	lsls	r3, r3, #19
 80081d8:	6113      	str	r3, [r2, #16]
 80081da:	e074      	b.n	80082c6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	015a      	lsls	r2, r3, #5
 80081e0:	69fb      	ldr	r3, [r7, #28]
 80081e2:	4413      	add	r3, r2
 80081e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081e8:	691b      	ldr	r3, [r3, #16]
 80081ea:	69ba      	ldr	r2, [r7, #24]
 80081ec:	0151      	lsls	r1, r2, #5
 80081ee:	69fa      	ldr	r2, [r7, #28]
 80081f0:	440a      	add	r2, r1
 80081f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081f6:	0cdb      	lsrs	r3, r3, #19
 80081f8:	04db      	lsls	r3, r3, #19
 80081fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	015a      	lsls	r2, r3, #5
 8008200:	69fb      	ldr	r3, [r7, #28]
 8008202:	4413      	add	r3, r2
 8008204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008208:	691b      	ldr	r3, [r3, #16]
 800820a:	69ba      	ldr	r2, [r7, #24]
 800820c:	0151      	lsls	r1, r2, #5
 800820e:	69fa      	ldr	r2, [r7, #28]
 8008210:	440a      	add	r2, r1
 8008212:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008216:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800821a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800821e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008220:	69bb      	ldr	r3, [r7, #24]
 8008222:	015a      	lsls	r2, r3, #5
 8008224:	69fb      	ldr	r3, [r7, #28]
 8008226:	4413      	add	r3, r2
 8008228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800822c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	6999      	ldr	r1, [r3, #24]
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	68db      	ldr	r3, [r3, #12]
 8008236:	440b      	add	r3, r1
 8008238:	1e59      	subs	r1, r3, #1
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	68db      	ldr	r3, [r3, #12]
 800823e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008242:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008244:	4b9d      	ldr	r3, [pc, #628]	; (80084bc <USB_EPStartXfer+0x370>)
 8008246:	400b      	ands	r3, r1
 8008248:	69b9      	ldr	r1, [r7, #24]
 800824a:	0148      	lsls	r0, r1, #5
 800824c:	69f9      	ldr	r1, [r7, #28]
 800824e:	4401      	add	r1, r0
 8008250:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008254:	4313      	orrs	r3, r2
 8008256:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008258:	69bb      	ldr	r3, [r7, #24]
 800825a:	015a      	lsls	r2, r3, #5
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	4413      	add	r3, r2
 8008260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008264:	691a      	ldr	r2, [r3, #16]
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	699b      	ldr	r3, [r3, #24]
 800826a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800826e:	69b9      	ldr	r1, [r7, #24]
 8008270:	0148      	lsls	r0, r1, #5
 8008272:	69f9      	ldr	r1, [r7, #28]
 8008274:	4401      	add	r1, r0
 8008276:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800827a:	4313      	orrs	r3, r2
 800827c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	791b      	ldrb	r3, [r3, #4]
 8008282:	2b01      	cmp	r3, #1
 8008284:	d11f      	bne.n	80082c6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008286:	69bb      	ldr	r3, [r7, #24]
 8008288:	015a      	lsls	r2, r3, #5
 800828a:	69fb      	ldr	r3, [r7, #28]
 800828c:	4413      	add	r3, r2
 800828e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008292:	691b      	ldr	r3, [r3, #16]
 8008294:	69ba      	ldr	r2, [r7, #24]
 8008296:	0151      	lsls	r1, r2, #5
 8008298:	69fa      	ldr	r2, [r7, #28]
 800829a:	440a      	add	r2, r1
 800829c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082a0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80082a4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80082a6:	69bb      	ldr	r3, [r7, #24]
 80082a8:	015a      	lsls	r2, r3, #5
 80082aa:	69fb      	ldr	r3, [r7, #28]
 80082ac:	4413      	add	r3, r2
 80082ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082b2:	691b      	ldr	r3, [r3, #16]
 80082b4:	69ba      	ldr	r2, [r7, #24]
 80082b6:	0151      	lsls	r1, r2, #5
 80082b8:	69fa      	ldr	r2, [r7, #28]
 80082ba:	440a      	add	r2, r1
 80082bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80082c4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80082c6:	79fb      	ldrb	r3, [r7, #7]
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d14b      	bne.n	8008364 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	695b      	ldr	r3, [r3, #20]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d009      	beq.n	80082e8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80082d4:	69bb      	ldr	r3, [r7, #24]
 80082d6:	015a      	lsls	r2, r3, #5
 80082d8:	69fb      	ldr	r3, [r7, #28]
 80082da:	4413      	add	r3, r2
 80082dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082e0:	461a      	mov	r2, r3
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	695b      	ldr	r3, [r3, #20]
 80082e6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	791b      	ldrb	r3, [r3, #4]
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d128      	bne.n	8008342 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d110      	bne.n	8008322 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	015a      	lsls	r2, r3, #5
 8008304:	69fb      	ldr	r3, [r7, #28]
 8008306:	4413      	add	r3, r2
 8008308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	69ba      	ldr	r2, [r7, #24]
 8008310:	0151      	lsls	r1, r2, #5
 8008312:	69fa      	ldr	r2, [r7, #28]
 8008314:	440a      	add	r2, r1
 8008316:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800831a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800831e:	6013      	str	r3, [r2, #0]
 8008320:	e00f      	b.n	8008342 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008322:	69bb      	ldr	r3, [r7, #24]
 8008324:	015a      	lsls	r2, r3, #5
 8008326:	69fb      	ldr	r3, [r7, #28]
 8008328:	4413      	add	r3, r2
 800832a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	69ba      	ldr	r2, [r7, #24]
 8008332:	0151      	lsls	r1, r2, #5
 8008334:	69fa      	ldr	r2, [r7, #28]
 8008336:	440a      	add	r2, r1
 8008338:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800833c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008340:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008342:	69bb      	ldr	r3, [r7, #24]
 8008344:	015a      	lsls	r2, r3, #5
 8008346:	69fb      	ldr	r3, [r7, #28]
 8008348:	4413      	add	r3, r2
 800834a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	69ba      	ldr	r2, [r7, #24]
 8008352:	0151      	lsls	r1, r2, #5
 8008354:	69fa      	ldr	r2, [r7, #28]
 8008356:	440a      	add	r2, r1
 8008358:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800835c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008360:	6013      	str	r3, [r2, #0]
 8008362:	e133      	b.n	80085cc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008364:	69bb      	ldr	r3, [r7, #24]
 8008366:	015a      	lsls	r2, r3, #5
 8008368:	69fb      	ldr	r3, [r7, #28]
 800836a:	4413      	add	r3, r2
 800836c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	69ba      	ldr	r2, [r7, #24]
 8008374:	0151      	lsls	r1, r2, #5
 8008376:	69fa      	ldr	r2, [r7, #28]
 8008378:	440a      	add	r2, r1
 800837a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800837e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008382:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	791b      	ldrb	r3, [r3, #4]
 8008388:	2b01      	cmp	r3, #1
 800838a:	d015      	beq.n	80083b8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	699b      	ldr	r3, [r3, #24]
 8008390:	2b00      	cmp	r3, #0
 8008392:	f000 811b 	beq.w	80085cc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008396:	69fb      	ldr	r3, [r7, #28]
 8008398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800839c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	781b      	ldrb	r3, [r3, #0]
 80083a2:	f003 030f 	and.w	r3, r3, #15
 80083a6:	2101      	movs	r1, #1
 80083a8:	fa01 f303 	lsl.w	r3, r1, r3
 80083ac:	69f9      	ldr	r1, [r7, #28]
 80083ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083b2:	4313      	orrs	r3, r2
 80083b4:	634b      	str	r3, [r1, #52]	; 0x34
 80083b6:	e109      	b.n	80085cc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80083b8:	69fb      	ldr	r3, [r7, #28]
 80083ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083be:	689b      	ldr	r3, [r3, #8]
 80083c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d110      	bne.n	80083ea <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	015a      	lsls	r2, r3, #5
 80083cc:	69fb      	ldr	r3, [r7, #28]
 80083ce:	4413      	add	r3, r2
 80083d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	69ba      	ldr	r2, [r7, #24]
 80083d8:	0151      	lsls	r1, r2, #5
 80083da:	69fa      	ldr	r2, [r7, #28]
 80083dc:	440a      	add	r2, r1
 80083de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80083e6:	6013      	str	r3, [r2, #0]
 80083e8:	e00f      	b.n	800840a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80083ea:	69bb      	ldr	r3, [r7, #24]
 80083ec:	015a      	lsls	r2, r3, #5
 80083ee:	69fb      	ldr	r3, [r7, #28]
 80083f0:	4413      	add	r3, r2
 80083f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	69ba      	ldr	r2, [r7, #24]
 80083fa:	0151      	lsls	r1, r2, #5
 80083fc:	69fa      	ldr	r2, [r7, #28]
 80083fe:	440a      	add	r2, r1
 8008400:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008408:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	6919      	ldr	r1, [r3, #16]
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	781a      	ldrb	r2, [r3, #0]
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	699b      	ldr	r3, [r3, #24]
 8008416:	b298      	uxth	r0, r3
 8008418:	79fb      	ldrb	r3, [r7, #7]
 800841a:	9300      	str	r3, [sp, #0]
 800841c:	4603      	mov	r3, r0
 800841e:	68f8      	ldr	r0, [r7, #12]
 8008420:	f000 fade 	bl	80089e0 <USB_WritePacket>
 8008424:	e0d2      	b.n	80085cc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008426:	69bb      	ldr	r3, [r7, #24]
 8008428:	015a      	lsls	r2, r3, #5
 800842a:	69fb      	ldr	r3, [r7, #28]
 800842c:	4413      	add	r3, r2
 800842e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008432:	691b      	ldr	r3, [r3, #16]
 8008434:	69ba      	ldr	r2, [r7, #24]
 8008436:	0151      	lsls	r1, r2, #5
 8008438:	69fa      	ldr	r2, [r7, #28]
 800843a:	440a      	add	r2, r1
 800843c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008440:	0cdb      	lsrs	r3, r3, #19
 8008442:	04db      	lsls	r3, r3, #19
 8008444:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	015a      	lsls	r2, r3, #5
 800844a:	69fb      	ldr	r3, [r7, #28]
 800844c:	4413      	add	r3, r2
 800844e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008452:	691b      	ldr	r3, [r3, #16]
 8008454:	69ba      	ldr	r2, [r7, #24]
 8008456:	0151      	lsls	r1, r2, #5
 8008458:	69fa      	ldr	r2, [r7, #28]
 800845a:	440a      	add	r2, r1
 800845c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008460:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008464:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008468:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	699b      	ldr	r3, [r3, #24]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d126      	bne.n	80084c0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008472:	69bb      	ldr	r3, [r7, #24]
 8008474:	015a      	lsls	r2, r3, #5
 8008476:	69fb      	ldr	r3, [r7, #28]
 8008478:	4413      	add	r3, r2
 800847a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800847e:	691a      	ldr	r2, [r3, #16]
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	68db      	ldr	r3, [r3, #12]
 8008484:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008488:	69b9      	ldr	r1, [r7, #24]
 800848a:	0148      	lsls	r0, r1, #5
 800848c:	69f9      	ldr	r1, [r7, #28]
 800848e:	4401      	add	r1, r0
 8008490:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008494:	4313      	orrs	r3, r2
 8008496:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008498:	69bb      	ldr	r3, [r7, #24]
 800849a:	015a      	lsls	r2, r3, #5
 800849c:	69fb      	ldr	r3, [r7, #28]
 800849e:	4413      	add	r3, r2
 80084a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084a4:	691b      	ldr	r3, [r3, #16]
 80084a6:	69ba      	ldr	r2, [r7, #24]
 80084a8:	0151      	lsls	r1, r2, #5
 80084aa:	69fa      	ldr	r2, [r7, #28]
 80084ac:	440a      	add	r2, r1
 80084ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80084b6:	6113      	str	r3, [r2, #16]
 80084b8:	e03a      	b.n	8008530 <USB_EPStartXfer+0x3e4>
 80084ba:	bf00      	nop
 80084bc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	699a      	ldr	r2, [r3, #24]
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	68db      	ldr	r3, [r3, #12]
 80084c8:	4413      	add	r3, r2
 80084ca:	1e5a      	subs	r2, r3, #1
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80084d4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	68db      	ldr	r3, [r3, #12]
 80084da:	8afa      	ldrh	r2, [r7, #22]
 80084dc:	fb03 f202 	mul.w	r2, r3, r2
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80084e4:	69bb      	ldr	r3, [r7, #24]
 80084e6:	015a      	lsls	r2, r3, #5
 80084e8:	69fb      	ldr	r3, [r7, #28]
 80084ea:	4413      	add	r3, r2
 80084ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084f0:	691a      	ldr	r2, [r3, #16]
 80084f2:	8afb      	ldrh	r3, [r7, #22]
 80084f4:	04d9      	lsls	r1, r3, #19
 80084f6:	4b38      	ldr	r3, [pc, #224]	; (80085d8 <USB_EPStartXfer+0x48c>)
 80084f8:	400b      	ands	r3, r1
 80084fa:	69b9      	ldr	r1, [r7, #24]
 80084fc:	0148      	lsls	r0, r1, #5
 80084fe:	69f9      	ldr	r1, [r7, #28]
 8008500:	4401      	add	r1, r0
 8008502:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008506:	4313      	orrs	r3, r2
 8008508:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800850a:	69bb      	ldr	r3, [r7, #24]
 800850c:	015a      	lsls	r2, r3, #5
 800850e:	69fb      	ldr	r3, [r7, #28]
 8008510:	4413      	add	r3, r2
 8008512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008516:	691a      	ldr	r2, [r3, #16]
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	69db      	ldr	r3, [r3, #28]
 800851c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008520:	69b9      	ldr	r1, [r7, #24]
 8008522:	0148      	lsls	r0, r1, #5
 8008524:	69f9      	ldr	r1, [r7, #28]
 8008526:	4401      	add	r1, r0
 8008528:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800852c:	4313      	orrs	r3, r2
 800852e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008530:	79fb      	ldrb	r3, [r7, #7]
 8008532:	2b01      	cmp	r3, #1
 8008534:	d10d      	bne.n	8008552 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	691b      	ldr	r3, [r3, #16]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d009      	beq.n	8008552 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	6919      	ldr	r1, [r3, #16]
 8008542:	69bb      	ldr	r3, [r7, #24]
 8008544:	015a      	lsls	r2, r3, #5
 8008546:	69fb      	ldr	r3, [r7, #28]
 8008548:	4413      	add	r3, r2
 800854a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800854e:	460a      	mov	r2, r1
 8008550:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	791b      	ldrb	r3, [r3, #4]
 8008556:	2b01      	cmp	r3, #1
 8008558:	d128      	bne.n	80085ac <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800855a:	69fb      	ldr	r3, [r7, #28]
 800855c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008566:	2b00      	cmp	r3, #0
 8008568:	d110      	bne.n	800858c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800856a:	69bb      	ldr	r3, [r7, #24]
 800856c:	015a      	lsls	r2, r3, #5
 800856e:	69fb      	ldr	r3, [r7, #28]
 8008570:	4413      	add	r3, r2
 8008572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	69ba      	ldr	r2, [r7, #24]
 800857a:	0151      	lsls	r1, r2, #5
 800857c:	69fa      	ldr	r2, [r7, #28]
 800857e:	440a      	add	r2, r1
 8008580:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008584:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008588:	6013      	str	r3, [r2, #0]
 800858a:	e00f      	b.n	80085ac <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800858c:	69bb      	ldr	r3, [r7, #24]
 800858e:	015a      	lsls	r2, r3, #5
 8008590:	69fb      	ldr	r3, [r7, #28]
 8008592:	4413      	add	r3, r2
 8008594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	69ba      	ldr	r2, [r7, #24]
 800859c:	0151      	lsls	r1, r2, #5
 800859e:	69fa      	ldr	r2, [r7, #28]
 80085a0:	440a      	add	r2, r1
 80085a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085aa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80085ac:	69bb      	ldr	r3, [r7, #24]
 80085ae:	015a      	lsls	r2, r3, #5
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	4413      	add	r3, r2
 80085b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	69ba      	ldr	r2, [r7, #24]
 80085bc:	0151      	lsls	r1, r2, #5
 80085be:	69fa      	ldr	r2, [r7, #28]
 80085c0:	440a      	add	r2, r1
 80085c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80085ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80085cc:	2300      	movs	r3, #0
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3720      	adds	r7, #32
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
 80085d6:	bf00      	nop
 80085d8:	1ff80000 	.word	0x1ff80000

080085dc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80085dc:	b480      	push	{r7}
 80085de:	b087      	sub	sp, #28
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	60b9      	str	r1, [r7, #8]
 80085e6:	4613      	mov	r3, r2
 80085e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	785b      	ldrb	r3, [r3, #1]
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	f040 80ce 	bne.w	800879a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	699b      	ldr	r3, [r3, #24]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d132      	bne.n	800866c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	015a      	lsls	r2, r3, #5
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	4413      	add	r3, r2
 800860e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008612:	691b      	ldr	r3, [r3, #16]
 8008614:	693a      	ldr	r2, [r7, #16]
 8008616:	0151      	lsls	r1, r2, #5
 8008618:	697a      	ldr	r2, [r7, #20]
 800861a:	440a      	add	r2, r1
 800861c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008620:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008624:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008628:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	015a      	lsls	r2, r3, #5
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	4413      	add	r3, r2
 8008632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008636:	691b      	ldr	r3, [r3, #16]
 8008638:	693a      	ldr	r2, [r7, #16]
 800863a:	0151      	lsls	r1, r2, #5
 800863c:	697a      	ldr	r2, [r7, #20]
 800863e:	440a      	add	r2, r1
 8008640:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008644:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008648:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	015a      	lsls	r2, r3, #5
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	4413      	add	r3, r2
 8008652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008656:	691b      	ldr	r3, [r3, #16]
 8008658:	693a      	ldr	r2, [r7, #16]
 800865a:	0151      	lsls	r1, r2, #5
 800865c:	697a      	ldr	r2, [r7, #20]
 800865e:	440a      	add	r2, r1
 8008660:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008664:	0cdb      	lsrs	r3, r3, #19
 8008666:	04db      	lsls	r3, r3, #19
 8008668:	6113      	str	r3, [r2, #16]
 800866a:	e04e      	b.n	800870a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	015a      	lsls	r2, r3, #5
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	4413      	add	r3, r2
 8008674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008678:	691b      	ldr	r3, [r3, #16]
 800867a:	693a      	ldr	r2, [r7, #16]
 800867c:	0151      	lsls	r1, r2, #5
 800867e:	697a      	ldr	r2, [r7, #20]
 8008680:	440a      	add	r2, r1
 8008682:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008686:	0cdb      	lsrs	r3, r3, #19
 8008688:	04db      	lsls	r3, r3, #19
 800868a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	015a      	lsls	r2, r3, #5
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	4413      	add	r3, r2
 8008694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008698:	691b      	ldr	r3, [r3, #16]
 800869a:	693a      	ldr	r2, [r7, #16]
 800869c:	0151      	lsls	r1, r2, #5
 800869e:	697a      	ldr	r2, [r7, #20]
 80086a0:	440a      	add	r2, r1
 80086a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80086aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80086ae:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	699a      	ldr	r2, [r3, #24]
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d903      	bls.n	80086c4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	68da      	ldr	r2, [r3, #12]
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	015a      	lsls	r2, r3, #5
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	4413      	add	r3, r2
 80086cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086d0:	691b      	ldr	r3, [r3, #16]
 80086d2:	693a      	ldr	r2, [r7, #16]
 80086d4:	0151      	lsls	r1, r2, #5
 80086d6:	697a      	ldr	r2, [r7, #20]
 80086d8:	440a      	add	r2, r1
 80086da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80086e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	015a      	lsls	r2, r3, #5
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	4413      	add	r3, r2
 80086ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086f0:	691a      	ldr	r2, [r3, #16]
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	699b      	ldr	r3, [r3, #24]
 80086f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086fa:	6939      	ldr	r1, [r7, #16]
 80086fc:	0148      	lsls	r0, r1, #5
 80086fe:	6979      	ldr	r1, [r7, #20]
 8008700:	4401      	add	r1, r0
 8008702:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008706:	4313      	orrs	r3, r2
 8008708:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800870a:	79fb      	ldrb	r3, [r7, #7]
 800870c:	2b01      	cmp	r3, #1
 800870e:	d11e      	bne.n	800874e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	695b      	ldr	r3, [r3, #20]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d009      	beq.n	800872c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	015a      	lsls	r2, r3, #5
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	4413      	add	r3, r2
 8008720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008724:	461a      	mov	r2, r3
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	695b      	ldr	r3, [r3, #20]
 800872a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	015a      	lsls	r2, r3, #5
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	4413      	add	r3, r2
 8008734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	693a      	ldr	r2, [r7, #16]
 800873c:	0151      	lsls	r1, r2, #5
 800873e:	697a      	ldr	r2, [r7, #20]
 8008740:	440a      	add	r2, r1
 8008742:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008746:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800874a:	6013      	str	r3, [r2, #0]
 800874c:	e097      	b.n	800887e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	015a      	lsls	r2, r3, #5
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	4413      	add	r3, r2
 8008756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	693a      	ldr	r2, [r7, #16]
 800875e:	0151      	lsls	r1, r2, #5
 8008760:	697a      	ldr	r2, [r7, #20]
 8008762:	440a      	add	r2, r1
 8008764:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008768:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800876c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	699b      	ldr	r3, [r3, #24]
 8008772:	2b00      	cmp	r3, #0
 8008774:	f000 8083 	beq.w	800887e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800877e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	f003 030f 	and.w	r3, r3, #15
 8008788:	2101      	movs	r1, #1
 800878a:	fa01 f303 	lsl.w	r3, r1, r3
 800878e:	6979      	ldr	r1, [r7, #20]
 8008790:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008794:	4313      	orrs	r3, r2
 8008796:	634b      	str	r3, [r1, #52]	; 0x34
 8008798:	e071      	b.n	800887e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	015a      	lsls	r2, r3, #5
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	4413      	add	r3, r2
 80087a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087a6:	691b      	ldr	r3, [r3, #16]
 80087a8:	693a      	ldr	r2, [r7, #16]
 80087aa:	0151      	lsls	r1, r2, #5
 80087ac:	697a      	ldr	r2, [r7, #20]
 80087ae:	440a      	add	r2, r1
 80087b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087b4:	0cdb      	lsrs	r3, r3, #19
 80087b6:	04db      	lsls	r3, r3, #19
 80087b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	015a      	lsls	r2, r3, #5
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	4413      	add	r3, r2
 80087c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087c6:	691b      	ldr	r3, [r3, #16]
 80087c8:	693a      	ldr	r2, [r7, #16]
 80087ca:	0151      	lsls	r1, r2, #5
 80087cc:	697a      	ldr	r2, [r7, #20]
 80087ce:	440a      	add	r2, r1
 80087d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80087d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80087dc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	699b      	ldr	r3, [r3, #24]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d003      	beq.n	80087ee <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	68da      	ldr	r2, [r3, #12]
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	68da      	ldr	r2, [r3, #12]
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	015a      	lsls	r2, r3, #5
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	4413      	add	r3, r2
 80087fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008802:	691b      	ldr	r3, [r3, #16]
 8008804:	693a      	ldr	r2, [r7, #16]
 8008806:	0151      	lsls	r1, r2, #5
 8008808:	697a      	ldr	r2, [r7, #20]
 800880a:	440a      	add	r2, r1
 800880c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008810:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008814:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	015a      	lsls	r2, r3, #5
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	4413      	add	r3, r2
 800881e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008822:	691a      	ldr	r2, [r3, #16]
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	69db      	ldr	r3, [r3, #28]
 8008828:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800882c:	6939      	ldr	r1, [r7, #16]
 800882e:	0148      	lsls	r0, r1, #5
 8008830:	6979      	ldr	r1, [r7, #20]
 8008832:	4401      	add	r1, r0
 8008834:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008838:	4313      	orrs	r3, r2
 800883a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800883c:	79fb      	ldrb	r3, [r7, #7]
 800883e:	2b01      	cmp	r3, #1
 8008840:	d10d      	bne.n	800885e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	691b      	ldr	r3, [r3, #16]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d009      	beq.n	800885e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	6919      	ldr	r1, [r3, #16]
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	015a      	lsls	r2, r3, #5
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	4413      	add	r3, r2
 8008856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800885a:	460a      	mov	r2, r1
 800885c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	015a      	lsls	r2, r3, #5
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	4413      	add	r3, r2
 8008866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	693a      	ldr	r2, [r7, #16]
 800886e:	0151      	lsls	r1, r2, #5
 8008870:	697a      	ldr	r2, [r7, #20]
 8008872:	440a      	add	r2, r1
 8008874:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008878:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800887c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800887e:	2300      	movs	r3, #0
}
 8008880:	4618      	mov	r0, r3
 8008882:	371c      	adds	r7, #28
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr

0800888c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800888c:	b480      	push	{r7}
 800888e:	b087      	sub	sp, #28
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008896:	2300      	movs	r3, #0
 8008898:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800889a:	2300      	movs	r3, #0
 800889c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	785b      	ldrb	r3, [r3, #1]
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d14a      	bne.n	8008940 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	015a      	lsls	r2, r3, #5
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	4413      	add	r3, r2
 80088b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088c2:	f040 8086 	bne.w	80089d2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	781b      	ldrb	r3, [r3, #0]
 80088ca:	015a      	lsls	r2, r3, #5
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	4413      	add	r3, r2
 80088d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	683a      	ldr	r2, [r7, #0]
 80088d8:	7812      	ldrb	r2, [r2, #0]
 80088da:	0151      	lsls	r1, r2, #5
 80088dc:	693a      	ldr	r2, [r7, #16]
 80088de:	440a      	add	r2, r1
 80088e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80088e8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	015a      	lsls	r2, r3, #5
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	4413      	add	r3, r2
 80088f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	683a      	ldr	r2, [r7, #0]
 80088fc:	7812      	ldrb	r2, [r2, #0]
 80088fe:	0151      	lsls	r1, r2, #5
 8008900:	693a      	ldr	r2, [r7, #16]
 8008902:	440a      	add	r2, r1
 8008904:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008908:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800890c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	3301      	adds	r3, #1
 8008912:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f242 7210 	movw	r2, #10000	; 0x2710
 800891a:	4293      	cmp	r3, r2
 800891c:	d902      	bls.n	8008924 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800891e:	2301      	movs	r3, #1
 8008920:	75fb      	strb	r3, [r7, #23]
          break;
 8008922:	e056      	b.n	80089d2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	015a      	lsls	r2, r3, #5
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	4413      	add	r3, r2
 800892e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008938:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800893c:	d0e7      	beq.n	800890e <USB_EPStopXfer+0x82>
 800893e:	e048      	b.n	80089d2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	015a      	lsls	r2, r3, #5
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	4413      	add	r3, r2
 800894a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008954:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008958:	d13b      	bne.n	80089d2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	015a      	lsls	r2, r3, #5
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	4413      	add	r3, r2
 8008964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	683a      	ldr	r2, [r7, #0]
 800896c:	7812      	ldrb	r2, [r2, #0]
 800896e:	0151      	lsls	r1, r2, #5
 8008970:	693a      	ldr	r2, [r7, #16]
 8008972:	440a      	add	r2, r1
 8008974:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008978:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800897c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	781b      	ldrb	r3, [r3, #0]
 8008982:	015a      	lsls	r2, r3, #5
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	4413      	add	r3, r2
 8008988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	683a      	ldr	r2, [r7, #0]
 8008990:	7812      	ldrb	r2, [r2, #0]
 8008992:	0151      	lsls	r1, r2, #5
 8008994:	693a      	ldr	r2, [r7, #16]
 8008996:	440a      	add	r2, r1
 8008998:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800899c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089a0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	3301      	adds	r3, #1
 80089a6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f242 7210 	movw	r2, #10000	; 0x2710
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d902      	bls.n	80089b8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	75fb      	strb	r3, [r7, #23]
          break;
 80089b6:	e00c      	b.n	80089d2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	781b      	ldrb	r3, [r3, #0]
 80089bc:	015a      	lsls	r2, r3, #5
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	4413      	add	r3, r2
 80089c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80089cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089d0:	d0e7      	beq.n	80089a2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80089d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	371c      	adds	r7, #28
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr

080089e0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b089      	sub	sp, #36	; 0x24
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	4611      	mov	r1, r2
 80089ec:	461a      	mov	r2, r3
 80089ee:	460b      	mov	r3, r1
 80089f0:	71fb      	strb	r3, [r7, #7]
 80089f2:	4613      	mov	r3, r2
 80089f4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80089fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d123      	bne.n	8008a4e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008a06:	88bb      	ldrh	r3, [r7, #4]
 8008a08:	3303      	adds	r3, #3
 8008a0a:	089b      	lsrs	r3, r3, #2
 8008a0c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008a0e:	2300      	movs	r3, #0
 8008a10:	61bb      	str	r3, [r7, #24]
 8008a12:	e018      	b.n	8008a46 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008a14:	79fb      	ldrb	r3, [r7, #7]
 8008a16:	031a      	lsls	r2, r3, #12
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	4413      	add	r3, r2
 8008a1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a20:	461a      	mov	r2, r3
 8008a22:	69fb      	ldr	r3, [r7, #28]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008a28:	69fb      	ldr	r3, [r7, #28]
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008a2e:	69fb      	ldr	r3, [r7, #28]
 8008a30:	3301      	adds	r3, #1
 8008a32:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008a34:	69fb      	ldr	r3, [r7, #28]
 8008a36:	3301      	adds	r3, #1
 8008a38:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008a3a:	69fb      	ldr	r3, [r7, #28]
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008a40:	69bb      	ldr	r3, [r7, #24]
 8008a42:	3301      	adds	r3, #1
 8008a44:	61bb      	str	r3, [r7, #24]
 8008a46:	69ba      	ldr	r2, [r7, #24]
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d3e2      	bcc.n	8008a14 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008a4e:	2300      	movs	r3, #0
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3724      	adds	r7, #36	; 0x24
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr

08008a5c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b08b      	sub	sp, #44	; 0x2c
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	60b9      	str	r1, [r7, #8]
 8008a66:	4613      	mov	r3, r2
 8008a68:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008a72:	88fb      	ldrh	r3, [r7, #6]
 8008a74:	089b      	lsrs	r3, r3, #2
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008a7a:	88fb      	ldrh	r3, [r7, #6]
 8008a7c:	f003 0303 	and.w	r3, r3, #3
 8008a80:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008a82:	2300      	movs	r3, #0
 8008a84:	623b      	str	r3, [r7, #32]
 8008a86:	e014      	b.n	8008ab2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008a88:	69bb      	ldr	r3, [r7, #24]
 8008a8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a92:	601a      	str	r2, [r3, #0]
    pDest++;
 8008a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a96:	3301      	adds	r3, #1
 8008a98:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008aac:	6a3b      	ldr	r3, [r7, #32]
 8008aae:	3301      	adds	r3, #1
 8008ab0:	623b      	str	r3, [r7, #32]
 8008ab2:	6a3a      	ldr	r2, [r7, #32]
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	d3e6      	bcc.n	8008a88 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008aba:	8bfb      	ldrh	r3, [r7, #30]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d01e      	beq.n	8008afe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008ac4:	69bb      	ldr	r3, [r7, #24]
 8008ac6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008aca:	461a      	mov	r2, r3
 8008acc:	f107 0310 	add.w	r3, r7, #16
 8008ad0:	6812      	ldr	r2, [r2, #0]
 8008ad2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008ad4:	693a      	ldr	r2, [r7, #16]
 8008ad6:	6a3b      	ldr	r3, [r7, #32]
 8008ad8:	b2db      	uxtb	r3, r3
 8008ada:	00db      	lsls	r3, r3, #3
 8008adc:	fa22 f303 	lsr.w	r3, r2, r3
 8008ae0:	b2da      	uxtb	r2, r3
 8008ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae4:	701a      	strb	r2, [r3, #0]
      i++;
 8008ae6:	6a3b      	ldr	r3, [r7, #32]
 8008ae8:	3301      	adds	r3, #1
 8008aea:	623b      	str	r3, [r7, #32]
      pDest++;
 8008aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aee:	3301      	adds	r3, #1
 8008af0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008af2:	8bfb      	ldrh	r3, [r7, #30]
 8008af4:	3b01      	subs	r3, #1
 8008af6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008af8:	8bfb      	ldrh	r3, [r7, #30]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d1ea      	bne.n	8008ad4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	372c      	adds	r7, #44	; 0x2c
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b085      	sub	sp, #20
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	785b      	ldrb	r3, [r3, #1]
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d12c      	bne.n	8008b82 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	015a      	lsls	r2, r3, #5
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	4413      	add	r3, r2
 8008b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	db12      	blt.n	8008b60 <USB_EPSetStall+0x54>
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d00f      	beq.n	8008b60 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	015a      	lsls	r2, r3, #5
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	4413      	add	r3, r2
 8008b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	68ba      	ldr	r2, [r7, #8]
 8008b50:	0151      	lsls	r1, r2, #5
 8008b52:	68fa      	ldr	r2, [r7, #12]
 8008b54:	440a      	add	r2, r1
 8008b56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b5a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008b5e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	015a      	lsls	r2, r3, #5
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	4413      	add	r3, r2
 8008b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	68ba      	ldr	r2, [r7, #8]
 8008b70:	0151      	lsls	r1, r2, #5
 8008b72:	68fa      	ldr	r2, [r7, #12]
 8008b74:	440a      	add	r2, r1
 8008b76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008b7e:	6013      	str	r3, [r2, #0]
 8008b80:	e02b      	b.n	8008bda <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	015a      	lsls	r2, r3, #5
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	4413      	add	r3, r2
 8008b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	db12      	blt.n	8008bba <USB_EPSetStall+0xae>
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d00f      	beq.n	8008bba <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	015a      	lsls	r2, r3, #5
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	4413      	add	r3, r2
 8008ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	68ba      	ldr	r2, [r7, #8]
 8008baa:	0151      	lsls	r1, r2, #5
 8008bac:	68fa      	ldr	r2, [r7, #12]
 8008bae:	440a      	add	r2, r1
 8008bb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bb4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008bb8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	015a      	lsls	r2, r3, #5
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	4413      	add	r3, r2
 8008bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	68ba      	ldr	r2, [r7, #8]
 8008bca:	0151      	lsls	r1, r2, #5
 8008bcc:	68fa      	ldr	r2, [r7, #12]
 8008bce:	440a      	add	r2, r1
 8008bd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008bd8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008bda:	2300      	movs	r3, #0
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3714      	adds	r7, #20
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr

08008be8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b085      	sub	sp, #20
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	785b      	ldrb	r3, [r3, #1]
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d128      	bne.n	8008c56 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	015a      	lsls	r2, r3, #5
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	4413      	add	r3, r2
 8008c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	68ba      	ldr	r2, [r7, #8]
 8008c14:	0151      	lsls	r1, r2, #5
 8008c16:	68fa      	ldr	r2, [r7, #12]
 8008c18:	440a      	add	r2, r1
 8008c1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008c22:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	791b      	ldrb	r3, [r3, #4]
 8008c28:	2b03      	cmp	r3, #3
 8008c2a:	d003      	beq.n	8008c34 <USB_EPClearStall+0x4c>
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	791b      	ldrb	r3, [r3, #4]
 8008c30:	2b02      	cmp	r3, #2
 8008c32:	d138      	bne.n	8008ca6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	015a      	lsls	r2, r3, #5
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	4413      	add	r3, r2
 8008c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	68ba      	ldr	r2, [r7, #8]
 8008c44:	0151      	lsls	r1, r2, #5
 8008c46:	68fa      	ldr	r2, [r7, #12]
 8008c48:	440a      	add	r2, r1
 8008c4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c52:	6013      	str	r3, [r2, #0]
 8008c54:	e027      	b.n	8008ca6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	015a      	lsls	r2, r3, #5
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	4413      	add	r3, r2
 8008c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	68ba      	ldr	r2, [r7, #8]
 8008c66:	0151      	lsls	r1, r2, #5
 8008c68:	68fa      	ldr	r2, [r7, #12]
 8008c6a:	440a      	add	r2, r1
 8008c6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c70:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008c74:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	791b      	ldrb	r3, [r3, #4]
 8008c7a:	2b03      	cmp	r3, #3
 8008c7c:	d003      	beq.n	8008c86 <USB_EPClearStall+0x9e>
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	791b      	ldrb	r3, [r3, #4]
 8008c82:	2b02      	cmp	r3, #2
 8008c84:	d10f      	bne.n	8008ca6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	015a      	lsls	r2, r3, #5
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	4413      	add	r3, r2
 8008c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	68ba      	ldr	r2, [r7, #8]
 8008c96:	0151      	lsls	r1, r2, #5
 8008c98:	68fa      	ldr	r2, [r7, #12]
 8008c9a:	440a      	add	r2, r1
 8008c9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ca4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3714      	adds	r7, #20
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr

08008cb4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b085      	sub	sp, #20
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	68fa      	ldr	r2, [r7, #12]
 8008cce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008cd2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008cd6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cde:	681a      	ldr	r2, [r3, #0]
 8008ce0:	78fb      	ldrb	r3, [r7, #3]
 8008ce2:	011b      	lsls	r3, r3, #4
 8008ce4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008ce8:	68f9      	ldr	r1, [r7, #12]
 8008cea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008cf2:	2300      	movs	r3, #0
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3714      	adds	r7, #20
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr

08008d00 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b085      	sub	sp, #20
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	68fa      	ldr	r2, [r7, #12]
 8008d16:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008d1a:	f023 0303 	bic.w	r3, r3, #3
 8008d1e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	68fa      	ldr	r2, [r7, #12]
 8008d2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d2e:	f023 0302 	bic.w	r3, r3, #2
 8008d32:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3714      	adds	r7, #20
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d40:	4770      	bx	lr

08008d42 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008d42:	b480      	push	{r7}
 8008d44:	b085      	sub	sp, #20
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	68fa      	ldr	r2, [r7, #12]
 8008d58:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008d5c:	f023 0303 	bic.w	r3, r3, #3
 8008d60:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	68fa      	ldr	r2, [r7, #12]
 8008d6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d70:	f043 0302 	orr.w	r3, r3, #2
 8008d74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008d76:	2300      	movs	r3, #0
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3714      	adds	r7, #20
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr

08008d84 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b085      	sub	sp, #20
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	695b      	ldr	r3, [r3, #20]
 8008d90:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	699b      	ldr	r3, [r3, #24]
 8008d96:	68fa      	ldr	r2, [r7, #12]
 8008d98:	4013      	ands	r3, r2
 8008d9a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3714      	adds	r7, #20
 8008da2:	46bd      	mov	sp, r7
 8008da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da8:	4770      	bx	lr

08008daa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008daa:	b480      	push	{r7}
 8008dac:	b085      	sub	sp, #20
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dbc:	699b      	ldr	r3, [r3, #24]
 8008dbe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dc6:	69db      	ldr	r3, [r3, #28]
 8008dc8:	68ba      	ldr	r2, [r7, #8]
 8008dca:	4013      	ands	r3, r2
 8008dcc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	0c1b      	lsrs	r3, r3, #16
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3714      	adds	r7, #20
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr

08008dde <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008dde:	b480      	push	{r7}
 8008de0:	b085      	sub	sp, #20
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008df0:	699b      	ldr	r3, [r3, #24]
 8008df2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dfa:	69db      	ldr	r3, [r3, #28]
 8008dfc:	68ba      	ldr	r2, [r7, #8]
 8008dfe:	4013      	ands	r3, r2
 8008e00:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	b29b      	uxth	r3, r3
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3714      	adds	r7, #20
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e10:	4770      	bx	lr

08008e12 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008e12:	b480      	push	{r7}
 8008e14:	b085      	sub	sp, #20
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
 8008e1a:	460b      	mov	r3, r1
 8008e1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008e22:	78fb      	ldrb	r3, [r7, #3]
 8008e24:	015a      	lsls	r2, r3, #5
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	4413      	add	r3, r2
 8008e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e2e:	689b      	ldr	r3, [r3, #8]
 8008e30:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e38:	695b      	ldr	r3, [r3, #20]
 8008e3a:	68ba      	ldr	r2, [r7, #8]
 8008e3c:	4013      	ands	r3, r2
 8008e3e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008e40:	68bb      	ldr	r3, [r7, #8]
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3714      	adds	r7, #20
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr

08008e4e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008e4e:	b480      	push	{r7}
 8008e50:	b087      	sub	sp, #28
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]
 8008e56:	460b      	mov	r3, r1
 8008e58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e64:	691b      	ldr	r3, [r3, #16]
 8008e66:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e70:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008e72:	78fb      	ldrb	r3, [r7, #3]
 8008e74:	f003 030f 	and.w	r3, r3, #15
 8008e78:	68fa      	ldr	r2, [r7, #12]
 8008e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8008e7e:	01db      	lsls	r3, r3, #7
 8008e80:	b2db      	uxtb	r3, r3
 8008e82:	693a      	ldr	r2, [r7, #16]
 8008e84:	4313      	orrs	r3, r2
 8008e86:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008e88:	78fb      	ldrb	r3, [r7, #3]
 8008e8a:	015a      	lsls	r2, r3, #5
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	4413      	add	r3, r2
 8008e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e94:	689b      	ldr	r3, [r3, #8]
 8008e96:	693a      	ldr	r2, [r7, #16]
 8008e98:	4013      	ands	r3, r2
 8008e9a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008e9c:	68bb      	ldr	r3, [r7, #8]
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	371c      	adds	r7, #28
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea8:	4770      	bx	lr

08008eaa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008eaa:	b480      	push	{r7}
 8008eac:	b083      	sub	sp, #12
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	695b      	ldr	r3, [r3, #20]
 8008eb6:	f003 0301 	and.w	r3, r3, #1
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	370c      	adds	r7, #12
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec4:	4770      	bx	lr

08008ec6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008ec6:	b480      	push	{r7}
 8008ec8:	b085      	sub	sp, #20
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	68fa      	ldr	r2, [r7, #12]
 8008edc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ee0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008ee4:	f023 0307 	bic.w	r3, r3, #7
 8008ee8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	68fa      	ldr	r2, [r7, #12]
 8008ef4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008efc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008efe:	2300      	movs	r3, #0
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3714      	adds	r7, #20
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr

08008f0c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b087      	sub	sp, #28
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	60f8      	str	r0, [r7, #12]
 8008f14:	460b      	mov	r3, r1
 8008f16:	607a      	str	r2, [r7, #4]
 8008f18:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	333c      	adds	r3, #60	; 0x3c
 8008f22:	3304      	adds	r3, #4
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	4a26      	ldr	r2, [pc, #152]	; (8008fc4 <USB_EP0_OutStart+0xb8>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d90a      	bls.n	8008f46 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f40:	d101      	bne.n	8008f46 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008f42:	2300      	movs	r3, #0
 8008f44:	e037      	b.n	8008fb6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	2300      	movs	r3, #0
 8008f50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f58:	691b      	ldr	r3, [r3, #16]
 8008f5a:	697a      	ldr	r2, [r7, #20]
 8008f5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f6c:	691b      	ldr	r3, [r3, #16]
 8008f6e:	697a      	ldr	r2, [r7, #20]
 8008f70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f74:	f043 0318 	orr.w	r3, r3, #24
 8008f78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f80:	691b      	ldr	r3, [r3, #16]
 8008f82:	697a      	ldr	r2, [r7, #20]
 8008f84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f88:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008f8c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008f8e:	7afb      	ldrb	r3, [r7, #11]
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d10f      	bne.n	8008fb4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	697a      	ldr	r2, [r7, #20]
 8008faa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fae:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008fb2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008fb4:	2300      	movs	r3, #0
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	371c      	adds	r7, #28
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr
 8008fc2:	bf00      	nop
 8008fc4:	4f54300a 	.word	0x4f54300a

08008fc8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b085      	sub	sp, #20
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	4a13      	ldr	r2, [pc, #76]	; (800902c <USB_CoreReset+0x64>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d901      	bls.n	8008fe6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008fe2:	2303      	movs	r3, #3
 8008fe4:	e01b      	b.n	800901e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	691b      	ldr	r3, [r3, #16]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	daf2      	bge.n	8008fd4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	691b      	ldr	r3, [r3, #16]
 8008ff6:	f043 0201 	orr.w	r2, r3, #1
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	3301      	adds	r3, #1
 8009002:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	4a09      	ldr	r2, [pc, #36]	; (800902c <USB_CoreReset+0x64>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d901      	bls.n	8009010 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800900c:	2303      	movs	r3, #3
 800900e:	e006      	b.n	800901e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	691b      	ldr	r3, [r3, #16]
 8009014:	f003 0301 	and.w	r3, r3, #1
 8009018:	2b01      	cmp	r3, #1
 800901a:	d0f0      	beq.n	8008ffe <USB_CoreReset+0x36>

  return HAL_OK;
 800901c:	2300      	movs	r3, #0
}
 800901e:	4618      	mov	r0, r3
 8009020:	3714      	adds	r7, #20
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr
 800902a:	bf00      	nop
 800902c:	00030d40 	.word	0x00030d40

08009030 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b084      	sub	sp, #16
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	460b      	mov	r3, r1
 800903a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800903c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009040:	f002 fcc8 	bl	800b9d4 <USBD_static_malloc>
 8009044:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d109      	bne.n	8009060 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	32b0      	adds	r2, #176	; 0xb0
 8009056:	2100      	movs	r1, #0
 8009058:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800905c:	2302      	movs	r3, #2
 800905e:	e0d4      	b.n	800920a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009060:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009064:	2100      	movs	r1, #0
 8009066:	68f8      	ldr	r0, [r7, #12]
 8009068:	f002 fd3c 	bl	800bae4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	32b0      	adds	r2, #176	; 0xb0
 8009076:	68f9      	ldr	r1, [r7, #12]
 8009078:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	32b0      	adds	r2, #176	; 0xb0
 8009086:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	7c1b      	ldrb	r3, [r3, #16]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d138      	bne.n	800910a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009098:	4b5e      	ldr	r3, [pc, #376]	; (8009214 <USBD_CDC_Init+0x1e4>)
 800909a:	7819      	ldrb	r1, [r3, #0]
 800909c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090a0:	2202      	movs	r2, #2
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f002 fb25 	bl	800b6f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80090a8:	4b5a      	ldr	r3, [pc, #360]	; (8009214 <USBD_CDC_Init+0x1e4>)
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	f003 020f 	and.w	r2, r3, #15
 80090b0:	6879      	ldr	r1, [r7, #4]
 80090b2:	4613      	mov	r3, r2
 80090b4:	009b      	lsls	r3, r3, #2
 80090b6:	4413      	add	r3, r2
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	440b      	add	r3, r1
 80090bc:	3324      	adds	r3, #36	; 0x24
 80090be:	2201      	movs	r2, #1
 80090c0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80090c2:	4b55      	ldr	r3, [pc, #340]	; (8009218 <USBD_CDC_Init+0x1e8>)
 80090c4:	7819      	ldrb	r1, [r3, #0]
 80090c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090ca:	2202      	movs	r2, #2
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f002 fb10 	bl	800b6f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80090d2:	4b51      	ldr	r3, [pc, #324]	; (8009218 <USBD_CDC_Init+0x1e8>)
 80090d4:	781b      	ldrb	r3, [r3, #0]
 80090d6:	f003 020f 	and.w	r2, r3, #15
 80090da:	6879      	ldr	r1, [r7, #4]
 80090dc:	4613      	mov	r3, r2
 80090de:	009b      	lsls	r3, r3, #2
 80090e0:	4413      	add	r3, r2
 80090e2:	009b      	lsls	r3, r3, #2
 80090e4:	440b      	add	r3, r1
 80090e6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80090ea:	2201      	movs	r2, #1
 80090ec:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80090ee:	4b4b      	ldr	r3, [pc, #300]	; (800921c <USBD_CDC_Init+0x1ec>)
 80090f0:	781b      	ldrb	r3, [r3, #0]
 80090f2:	f003 020f 	and.w	r2, r3, #15
 80090f6:	6879      	ldr	r1, [r7, #4]
 80090f8:	4613      	mov	r3, r2
 80090fa:	009b      	lsls	r3, r3, #2
 80090fc:	4413      	add	r3, r2
 80090fe:	009b      	lsls	r3, r3, #2
 8009100:	440b      	add	r3, r1
 8009102:	3326      	adds	r3, #38	; 0x26
 8009104:	2210      	movs	r2, #16
 8009106:	801a      	strh	r2, [r3, #0]
 8009108:	e035      	b.n	8009176 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800910a:	4b42      	ldr	r3, [pc, #264]	; (8009214 <USBD_CDC_Init+0x1e4>)
 800910c:	7819      	ldrb	r1, [r3, #0]
 800910e:	2340      	movs	r3, #64	; 0x40
 8009110:	2202      	movs	r2, #2
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f002 faed 	bl	800b6f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009118:	4b3e      	ldr	r3, [pc, #248]	; (8009214 <USBD_CDC_Init+0x1e4>)
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	f003 020f 	and.w	r2, r3, #15
 8009120:	6879      	ldr	r1, [r7, #4]
 8009122:	4613      	mov	r3, r2
 8009124:	009b      	lsls	r3, r3, #2
 8009126:	4413      	add	r3, r2
 8009128:	009b      	lsls	r3, r3, #2
 800912a:	440b      	add	r3, r1
 800912c:	3324      	adds	r3, #36	; 0x24
 800912e:	2201      	movs	r2, #1
 8009130:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009132:	4b39      	ldr	r3, [pc, #228]	; (8009218 <USBD_CDC_Init+0x1e8>)
 8009134:	7819      	ldrb	r1, [r3, #0]
 8009136:	2340      	movs	r3, #64	; 0x40
 8009138:	2202      	movs	r2, #2
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f002 fad9 	bl	800b6f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009140:	4b35      	ldr	r3, [pc, #212]	; (8009218 <USBD_CDC_Init+0x1e8>)
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	f003 020f 	and.w	r2, r3, #15
 8009148:	6879      	ldr	r1, [r7, #4]
 800914a:	4613      	mov	r3, r2
 800914c:	009b      	lsls	r3, r3, #2
 800914e:	4413      	add	r3, r2
 8009150:	009b      	lsls	r3, r3, #2
 8009152:	440b      	add	r3, r1
 8009154:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009158:	2201      	movs	r2, #1
 800915a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800915c:	4b2f      	ldr	r3, [pc, #188]	; (800921c <USBD_CDC_Init+0x1ec>)
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	f003 020f 	and.w	r2, r3, #15
 8009164:	6879      	ldr	r1, [r7, #4]
 8009166:	4613      	mov	r3, r2
 8009168:	009b      	lsls	r3, r3, #2
 800916a:	4413      	add	r3, r2
 800916c:	009b      	lsls	r3, r3, #2
 800916e:	440b      	add	r3, r1
 8009170:	3326      	adds	r3, #38	; 0x26
 8009172:	2210      	movs	r2, #16
 8009174:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009176:	4b29      	ldr	r3, [pc, #164]	; (800921c <USBD_CDC_Init+0x1ec>)
 8009178:	7819      	ldrb	r1, [r3, #0]
 800917a:	2308      	movs	r3, #8
 800917c:	2203      	movs	r2, #3
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f002 fab7 	bl	800b6f2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009184:	4b25      	ldr	r3, [pc, #148]	; (800921c <USBD_CDC_Init+0x1ec>)
 8009186:	781b      	ldrb	r3, [r3, #0]
 8009188:	f003 020f 	and.w	r2, r3, #15
 800918c:	6879      	ldr	r1, [r7, #4]
 800918e:	4613      	mov	r3, r2
 8009190:	009b      	lsls	r3, r3, #2
 8009192:	4413      	add	r3, r2
 8009194:	009b      	lsls	r3, r3, #2
 8009196:	440b      	add	r3, r1
 8009198:	3324      	adds	r3, #36	; 0x24
 800919a:	2201      	movs	r2, #1
 800919c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2200      	movs	r2, #0
 80091a2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	33b0      	adds	r3, #176	; 0xb0
 80091b0:	009b      	lsls	r3, r3, #2
 80091b2:	4413      	add	r3, r2
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2200      	movs	r2, #0
 80091be:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2200      	movs	r2, #0
 80091c6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d101      	bne.n	80091d8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80091d4:	2302      	movs	r3, #2
 80091d6:	e018      	b.n	800920a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	7c1b      	ldrb	r3, [r3, #16]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d10a      	bne.n	80091f6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80091e0:	4b0d      	ldr	r3, [pc, #52]	; (8009218 <USBD_CDC_Init+0x1e8>)
 80091e2:	7819      	ldrb	r1, [r3, #0]
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80091ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f002 fb6e 	bl	800b8d0 <USBD_LL_PrepareReceive>
 80091f4:	e008      	b.n	8009208 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80091f6:	4b08      	ldr	r3, [pc, #32]	; (8009218 <USBD_CDC_Init+0x1e8>)
 80091f8:	7819      	ldrb	r1, [r3, #0]
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009200:	2340      	movs	r3, #64	; 0x40
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f002 fb64 	bl	800b8d0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009208:	2300      	movs	r3, #0
}
 800920a:	4618      	mov	r0, r3
 800920c:	3710      	adds	r7, #16
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
 8009212:	bf00      	nop
 8009214:	200000a3 	.word	0x200000a3
 8009218:	200000a4 	.word	0x200000a4
 800921c:	200000a5 	.word	0x200000a5

08009220 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b082      	sub	sp, #8
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	460b      	mov	r3, r1
 800922a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800922c:	4b3a      	ldr	r3, [pc, #232]	; (8009318 <USBD_CDC_DeInit+0xf8>)
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	4619      	mov	r1, r3
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f002 fa83 	bl	800b73e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009238:	4b37      	ldr	r3, [pc, #220]	; (8009318 <USBD_CDC_DeInit+0xf8>)
 800923a:	781b      	ldrb	r3, [r3, #0]
 800923c:	f003 020f 	and.w	r2, r3, #15
 8009240:	6879      	ldr	r1, [r7, #4]
 8009242:	4613      	mov	r3, r2
 8009244:	009b      	lsls	r3, r3, #2
 8009246:	4413      	add	r3, r2
 8009248:	009b      	lsls	r3, r3, #2
 800924a:	440b      	add	r3, r1
 800924c:	3324      	adds	r3, #36	; 0x24
 800924e:	2200      	movs	r2, #0
 8009250:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009252:	4b32      	ldr	r3, [pc, #200]	; (800931c <USBD_CDC_DeInit+0xfc>)
 8009254:	781b      	ldrb	r3, [r3, #0]
 8009256:	4619      	mov	r1, r3
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f002 fa70 	bl	800b73e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800925e:	4b2f      	ldr	r3, [pc, #188]	; (800931c <USBD_CDC_DeInit+0xfc>)
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	f003 020f 	and.w	r2, r3, #15
 8009266:	6879      	ldr	r1, [r7, #4]
 8009268:	4613      	mov	r3, r2
 800926a:	009b      	lsls	r3, r3, #2
 800926c:	4413      	add	r3, r2
 800926e:	009b      	lsls	r3, r3, #2
 8009270:	440b      	add	r3, r1
 8009272:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009276:	2200      	movs	r2, #0
 8009278:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800927a:	4b29      	ldr	r3, [pc, #164]	; (8009320 <USBD_CDC_DeInit+0x100>)
 800927c:	781b      	ldrb	r3, [r3, #0]
 800927e:	4619      	mov	r1, r3
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f002 fa5c 	bl	800b73e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009286:	4b26      	ldr	r3, [pc, #152]	; (8009320 <USBD_CDC_DeInit+0x100>)
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	f003 020f 	and.w	r2, r3, #15
 800928e:	6879      	ldr	r1, [r7, #4]
 8009290:	4613      	mov	r3, r2
 8009292:	009b      	lsls	r3, r3, #2
 8009294:	4413      	add	r3, r2
 8009296:	009b      	lsls	r3, r3, #2
 8009298:	440b      	add	r3, r1
 800929a:	3324      	adds	r3, #36	; 0x24
 800929c:	2200      	movs	r2, #0
 800929e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80092a0:	4b1f      	ldr	r3, [pc, #124]	; (8009320 <USBD_CDC_DeInit+0x100>)
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	f003 020f 	and.w	r2, r3, #15
 80092a8:	6879      	ldr	r1, [r7, #4]
 80092aa:	4613      	mov	r3, r2
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	4413      	add	r3, r2
 80092b0:	009b      	lsls	r3, r3, #2
 80092b2:	440b      	add	r3, r1
 80092b4:	3326      	adds	r3, #38	; 0x26
 80092b6:	2200      	movs	r2, #0
 80092b8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	32b0      	adds	r2, #176	; 0xb0
 80092c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d01f      	beq.n	800930c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80092d2:	687a      	ldr	r2, [r7, #4]
 80092d4:	33b0      	adds	r3, #176	; 0xb0
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	4413      	add	r3, r2
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	32b0      	adds	r2, #176	; 0xb0
 80092ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092ee:	4618      	mov	r0, r3
 80092f0:	f002 fb7e 	bl	800b9f0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	32b0      	adds	r2, #176	; 0xb0
 80092fe:	2100      	movs	r1, #0
 8009300:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2200      	movs	r2, #0
 8009308:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800930c:	2300      	movs	r3, #0
}
 800930e:	4618      	mov	r0, r3
 8009310:	3708      	adds	r7, #8
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
 8009316:	bf00      	nop
 8009318:	200000a3 	.word	0x200000a3
 800931c:	200000a4 	.word	0x200000a4
 8009320:	200000a5 	.word	0x200000a5

08009324 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b086      	sub	sp, #24
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	32b0      	adds	r2, #176	; 0xb0
 8009338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800933c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800933e:	2300      	movs	r3, #0
 8009340:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009342:	2300      	movs	r3, #0
 8009344:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009346:	2300      	movs	r3, #0
 8009348:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d101      	bne.n	8009354 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009350:	2303      	movs	r3, #3
 8009352:	e0bf      	b.n	80094d4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800935c:	2b00      	cmp	r3, #0
 800935e:	d050      	beq.n	8009402 <USBD_CDC_Setup+0xde>
 8009360:	2b20      	cmp	r3, #32
 8009362:	f040 80af 	bne.w	80094c4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	88db      	ldrh	r3, [r3, #6]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d03a      	beq.n	80093e4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	b25b      	sxtb	r3, r3
 8009374:	2b00      	cmp	r3, #0
 8009376:	da1b      	bge.n	80093b0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800937e:	687a      	ldr	r2, [r7, #4]
 8009380:	33b0      	adds	r3, #176	; 0xb0
 8009382:	009b      	lsls	r3, r3, #2
 8009384:	4413      	add	r3, r2
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	689b      	ldr	r3, [r3, #8]
 800938a:	683a      	ldr	r2, [r7, #0]
 800938c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800938e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009390:	683a      	ldr	r2, [r7, #0]
 8009392:	88d2      	ldrh	r2, [r2, #6]
 8009394:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	88db      	ldrh	r3, [r3, #6]
 800939a:	2b07      	cmp	r3, #7
 800939c:	bf28      	it	cs
 800939e:	2307      	movcs	r3, #7
 80093a0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	89fa      	ldrh	r2, [r7, #14]
 80093a6:	4619      	mov	r1, r3
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f001 fd6d 	bl	800ae88 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80093ae:	e090      	b.n	80094d2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	785a      	ldrb	r2, [r3, #1]
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	88db      	ldrh	r3, [r3, #6]
 80093be:	2b3f      	cmp	r3, #63	; 0x3f
 80093c0:	d803      	bhi.n	80093ca <USBD_CDC_Setup+0xa6>
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	88db      	ldrh	r3, [r3, #6]
 80093c6:	b2da      	uxtb	r2, r3
 80093c8:	e000      	b.n	80093cc <USBD_CDC_Setup+0xa8>
 80093ca:	2240      	movs	r2, #64	; 0x40
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80093d2:	6939      	ldr	r1, [r7, #16]
 80093d4:	693b      	ldr	r3, [r7, #16]
 80093d6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80093da:	461a      	mov	r2, r3
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f001 fd7f 	bl	800aee0 <USBD_CtlPrepareRx>
      break;
 80093e2:	e076      	b.n	80094d2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80093ea:	687a      	ldr	r2, [r7, #4]
 80093ec:	33b0      	adds	r3, #176	; 0xb0
 80093ee:	009b      	lsls	r3, r3, #2
 80093f0:	4413      	add	r3, r2
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	683a      	ldr	r2, [r7, #0]
 80093f8:	7850      	ldrb	r0, [r2, #1]
 80093fa:	2200      	movs	r2, #0
 80093fc:	6839      	ldr	r1, [r7, #0]
 80093fe:	4798      	blx	r3
      break;
 8009400:	e067      	b.n	80094d2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	785b      	ldrb	r3, [r3, #1]
 8009406:	2b0b      	cmp	r3, #11
 8009408:	d851      	bhi.n	80094ae <USBD_CDC_Setup+0x18a>
 800940a:	a201      	add	r2, pc, #4	; (adr r2, 8009410 <USBD_CDC_Setup+0xec>)
 800940c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009410:	08009441 	.word	0x08009441
 8009414:	080094bd 	.word	0x080094bd
 8009418:	080094af 	.word	0x080094af
 800941c:	080094af 	.word	0x080094af
 8009420:	080094af 	.word	0x080094af
 8009424:	080094af 	.word	0x080094af
 8009428:	080094af 	.word	0x080094af
 800942c:	080094af 	.word	0x080094af
 8009430:	080094af 	.word	0x080094af
 8009434:	080094af 	.word	0x080094af
 8009438:	0800946b 	.word	0x0800946b
 800943c:	08009495 	.word	0x08009495
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009446:	b2db      	uxtb	r3, r3
 8009448:	2b03      	cmp	r3, #3
 800944a:	d107      	bne.n	800945c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800944c:	f107 030a 	add.w	r3, r7, #10
 8009450:	2202      	movs	r2, #2
 8009452:	4619      	mov	r1, r3
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f001 fd17 	bl	800ae88 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800945a:	e032      	b.n	80094c2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800945c:	6839      	ldr	r1, [r7, #0]
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f001 fca1 	bl	800ada6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009464:	2303      	movs	r3, #3
 8009466:	75fb      	strb	r3, [r7, #23]
          break;
 8009468:	e02b      	b.n	80094c2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009470:	b2db      	uxtb	r3, r3
 8009472:	2b03      	cmp	r3, #3
 8009474:	d107      	bne.n	8009486 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009476:	f107 030d 	add.w	r3, r7, #13
 800947a:	2201      	movs	r2, #1
 800947c:	4619      	mov	r1, r3
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f001 fd02 	bl	800ae88 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009484:	e01d      	b.n	80094c2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009486:	6839      	ldr	r1, [r7, #0]
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f001 fc8c 	bl	800ada6 <USBD_CtlError>
            ret = USBD_FAIL;
 800948e:	2303      	movs	r3, #3
 8009490:	75fb      	strb	r3, [r7, #23]
          break;
 8009492:	e016      	b.n	80094c2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800949a:	b2db      	uxtb	r3, r3
 800949c:	2b03      	cmp	r3, #3
 800949e:	d00f      	beq.n	80094c0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80094a0:	6839      	ldr	r1, [r7, #0]
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f001 fc7f 	bl	800ada6 <USBD_CtlError>
            ret = USBD_FAIL;
 80094a8:	2303      	movs	r3, #3
 80094aa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80094ac:	e008      	b.n	80094c0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80094ae:	6839      	ldr	r1, [r7, #0]
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f001 fc78 	bl	800ada6 <USBD_CtlError>
          ret = USBD_FAIL;
 80094b6:	2303      	movs	r3, #3
 80094b8:	75fb      	strb	r3, [r7, #23]
          break;
 80094ba:	e002      	b.n	80094c2 <USBD_CDC_Setup+0x19e>
          break;
 80094bc:	bf00      	nop
 80094be:	e008      	b.n	80094d2 <USBD_CDC_Setup+0x1ae>
          break;
 80094c0:	bf00      	nop
      }
      break;
 80094c2:	e006      	b.n	80094d2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80094c4:	6839      	ldr	r1, [r7, #0]
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f001 fc6d 	bl	800ada6 <USBD_CtlError>
      ret = USBD_FAIL;
 80094cc:	2303      	movs	r3, #3
 80094ce:	75fb      	strb	r3, [r7, #23]
      break;
 80094d0:	bf00      	nop
  }

  return (uint8_t)ret;
 80094d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3718      	adds	r7, #24
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	460b      	mov	r3, r1
 80094e6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80094ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	32b0      	adds	r2, #176	; 0xb0
 80094fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d101      	bne.n	8009506 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009502:	2303      	movs	r3, #3
 8009504:	e065      	b.n	80095d2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	32b0      	adds	r2, #176	; 0xb0
 8009510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009514:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009516:	78fb      	ldrb	r3, [r7, #3]
 8009518:	f003 020f 	and.w	r2, r3, #15
 800951c:	6879      	ldr	r1, [r7, #4]
 800951e:	4613      	mov	r3, r2
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	4413      	add	r3, r2
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	440b      	add	r3, r1
 8009528:	3318      	adds	r3, #24
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d02f      	beq.n	8009590 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009530:	78fb      	ldrb	r3, [r7, #3]
 8009532:	f003 020f 	and.w	r2, r3, #15
 8009536:	6879      	ldr	r1, [r7, #4]
 8009538:	4613      	mov	r3, r2
 800953a:	009b      	lsls	r3, r3, #2
 800953c:	4413      	add	r3, r2
 800953e:	009b      	lsls	r3, r3, #2
 8009540:	440b      	add	r3, r1
 8009542:	3318      	adds	r3, #24
 8009544:	681a      	ldr	r2, [r3, #0]
 8009546:	78fb      	ldrb	r3, [r7, #3]
 8009548:	f003 010f 	and.w	r1, r3, #15
 800954c:	68f8      	ldr	r0, [r7, #12]
 800954e:	460b      	mov	r3, r1
 8009550:	00db      	lsls	r3, r3, #3
 8009552:	440b      	add	r3, r1
 8009554:	009b      	lsls	r3, r3, #2
 8009556:	4403      	add	r3, r0
 8009558:	3348      	adds	r3, #72	; 0x48
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	fbb2 f1f3 	udiv	r1, r2, r3
 8009560:	fb01 f303 	mul.w	r3, r1, r3
 8009564:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009566:	2b00      	cmp	r3, #0
 8009568:	d112      	bne.n	8009590 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800956a:	78fb      	ldrb	r3, [r7, #3]
 800956c:	f003 020f 	and.w	r2, r3, #15
 8009570:	6879      	ldr	r1, [r7, #4]
 8009572:	4613      	mov	r3, r2
 8009574:	009b      	lsls	r3, r3, #2
 8009576:	4413      	add	r3, r2
 8009578:	009b      	lsls	r3, r3, #2
 800957a:	440b      	add	r3, r1
 800957c:	3318      	adds	r3, #24
 800957e:	2200      	movs	r2, #0
 8009580:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009582:	78f9      	ldrb	r1, [r7, #3]
 8009584:	2300      	movs	r3, #0
 8009586:	2200      	movs	r2, #0
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f002 f980 	bl	800b88e <USBD_LL_Transmit>
 800958e:	e01f      	b.n	80095d0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	2200      	movs	r2, #0
 8009594:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	33b0      	adds	r3, #176	; 0xb0
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	4413      	add	r3, r2
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	691b      	ldr	r3, [r3, #16]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d010      	beq.n	80095d0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	33b0      	adds	r3, #176	; 0xb0
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	4413      	add	r3, r2
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	691b      	ldr	r3, [r3, #16]
 80095c0:	68ba      	ldr	r2, [r7, #8]
 80095c2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80095c6:	68ba      	ldr	r2, [r7, #8]
 80095c8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80095cc:	78fa      	ldrb	r2, [r7, #3]
 80095ce:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80095d0:	2300      	movs	r3, #0
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3710      	adds	r7, #16
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}

080095da <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80095da:	b580      	push	{r7, lr}
 80095dc:	b084      	sub	sp, #16
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
 80095e2:	460b      	mov	r3, r1
 80095e4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	32b0      	adds	r2, #176	; 0xb0
 80095f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095f4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	32b0      	adds	r2, #176	; 0xb0
 8009600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d101      	bne.n	800960c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009608:	2303      	movs	r3, #3
 800960a:	e01a      	b.n	8009642 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800960c:	78fb      	ldrb	r3, [r7, #3]
 800960e:	4619      	mov	r1, r3
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f002 f97e 	bl	800b912 <USBD_LL_GetRxDataSize>
 8009616:	4602      	mov	r2, r0
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009624:	687a      	ldr	r2, [r7, #4]
 8009626:	33b0      	adds	r3, #176	; 0xb0
 8009628:	009b      	lsls	r3, r3, #2
 800962a:	4413      	add	r3, r2
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	68db      	ldr	r3, [r3, #12]
 8009630:	68fa      	ldr	r2, [r7, #12]
 8009632:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009636:	68fa      	ldr	r2, [r7, #12]
 8009638:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800963c:	4611      	mov	r1, r2
 800963e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009640:	2300      	movs	r3, #0
}
 8009642:	4618      	mov	r0, r3
 8009644:	3710      	adds	r7, #16
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}

0800964a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800964a:	b580      	push	{r7, lr}
 800964c:	b084      	sub	sp, #16
 800964e:	af00      	add	r7, sp, #0
 8009650:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	32b0      	adds	r2, #176	; 0xb0
 800965c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009660:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d101      	bne.n	800966c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009668:	2303      	movs	r3, #3
 800966a:	e025      	b.n	80096b8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009672:	687a      	ldr	r2, [r7, #4]
 8009674:	33b0      	adds	r3, #176	; 0xb0
 8009676:	009b      	lsls	r3, r3, #2
 8009678:	4413      	add	r3, r2
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d01a      	beq.n	80096b6 <USBD_CDC_EP0_RxReady+0x6c>
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009686:	2bff      	cmp	r3, #255	; 0xff
 8009688:	d015      	beq.n	80096b6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009690:	687a      	ldr	r2, [r7, #4]
 8009692:	33b0      	adds	r3, #176	; 0xb0
 8009694:	009b      	lsls	r3, r3, #2
 8009696:	4413      	add	r3, r2
 8009698:	685b      	ldr	r3, [r3, #4]
 800969a:	689b      	ldr	r3, [r3, #8]
 800969c:	68fa      	ldr	r2, [r7, #12]
 800969e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80096a2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80096a4:	68fa      	ldr	r2, [r7, #12]
 80096a6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80096aa:	b292      	uxth	r2, r2
 80096ac:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	22ff      	movs	r2, #255	; 0xff
 80096b2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80096b6:	2300      	movs	r3, #0
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3710      	adds	r7, #16
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b086      	sub	sp, #24
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80096c8:	2182      	movs	r1, #130	; 0x82
 80096ca:	4818      	ldr	r0, [pc, #96]	; (800972c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80096cc:	f000 fd09 	bl	800a0e2 <USBD_GetEpDesc>
 80096d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80096d2:	2101      	movs	r1, #1
 80096d4:	4815      	ldr	r0, [pc, #84]	; (800972c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80096d6:	f000 fd04 	bl	800a0e2 <USBD_GetEpDesc>
 80096da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80096dc:	2181      	movs	r1, #129	; 0x81
 80096de:	4813      	ldr	r0, [pc, #76]	; (800972c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80096e0:	f000 fcff 	bl	800a0e2 <USBD_GetEpDesc>
 80096e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d002      	beq.n	80096f2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	2210      	movs	r2, #16
 80096f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d006      	beq.n	8009706 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	2200      	movs	r2, #0
 80096fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009700:	711a      	strb	r2, [r3, #4]
 8009702:	2200      	movs	r2, #0
 8009704:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d006      	beq.n	800971a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2200      	movs	r2, #0
 8009710:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009714:	711a      	strb	r2, [r3, #4]
 8009716:	2200      	movs	r2, #0
 8009718:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2243      	movs	r2, #67	; 0x43
 800971e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009720:	4b02      	ldr	r3, [pc, #8]	; (800972c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009722:	4618      	mov	r0, r3
 8009724:	3718      	adds	r7, #24
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}
 800972a:	bf00      	nop
 800972c:	20000060 	.word	0x20000060

08009730 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b086      	sub	sp, #24
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009738:	2182      	movs	r1, #130	; 0x82
 800973a:	4818      	ldr	r0, [pc, #96]	; (800979c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800973c:	f000 fcd1 	bl	800a0e2 <USBD_GetEpDesc>
 8009740:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009742:	2101      	movs	r1, #1
 8009744:	4815      	ldr	r0, [pc, #84]	; (800979c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009746:	f000 fccc 	bl	800a0e2 <USBD_GetEpDesc>
 800974a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800974c:	2181      	movs	r1, #129	; 0x81
 800974e:	4813      	ldr	r0, [pc, #76]	; (800979c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009750:	f000 fcc7 	bl	800a0e2 <USBD_GetEpDesc>
 8009754:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d002      	beq.n	8009762 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	2210      	movs	r2, #16
 8009760:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d006      	beq.n	8009776 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	2200      	movs	r2, #0
 800976c:	711a      	strb	r2, [r3, #4]
 800976e:	2200      	movs	r2, #0
 8009770:	f042 0202 	orr.w	r2, r2, #2
 8009774:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d006      	beq.n	800978a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2200      	movs	r2, #0
 8009780:	711a      	strb	r2, [r3, #4]
 8009782:	2200      	movs	r2, #0
 8009784:	f042 0202 	orr.w	r2, r2, #2
 8009788:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2243      	movs	r2, #67	; 0x43
 800978e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009790:	4b02      	ldr	r3, [pc, #8]	; (800979c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009792:	4618      	mov	r0, r3
 8009794:	3718      	adds	r7, #24
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
 800979a:	bf00      	nop
 800979c:	20000060 	.word	0x20000060

080097a0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b086      	sub	sp, #24
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80097a8:	2182      	movs	r1, #130	; 0x82
 80097aa:	4818      	ldr	r0, [pc, #96]	; (800980c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80097ac:	f000 fc99 	bl	800a0e2 <USBD_GetEpDesc>
 80097b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80097b2:	2101      	movs	r1, #1
 80097b4:	4815      	ldr	r0, [pc, #84]	; (800980c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80097b6:	f000 fc94 	bl	800a0e2 <USBD_GetEpDesc>
 80097ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80097bc:	2181      	movs	r1, #129	; 0x81
 80097be:	4813      	ldr	r0, [pc, #76]	; (800980c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80097c0:	f000 fc8f 	bl	800a0e2 <USBD_GetEpDesc>
 80097c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d002      	beq.n	80097d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	2210      	movs	r2, #16
 80097d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d006      	beq.n	80097e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	2200      	movs	r2, #0
 80097dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097e0:	711a      	strb	r2, [r3, #4]
 80097e2:	2200      	movs	r2, #0
 80097e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d006      	beq.n	80097fa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	2200      	movs	r2, #0
 80097f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097f4:	711a      	strb	r2, [r3, #4]
 80097f6:	2200      	movs	r2, #0
 80097f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2243      	movs	r2, #67	; 0x43
 80097fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009800:	4b02      	ldr	r3, [pc, #8]	; (800980c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009802:	4618      	mov	r0, r3
 8009804:	3718      	adds	r7, #24
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
 800980a:	bf00      	nop
 800980c:	20000060 	.word	0x20000060

08009810 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009810:	b480      	push	{r7}
 8009812:	b083      	sub	sp, #12
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	220a      	movs	r2, #10
 800981c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800981e:	4b03      	ldr	r3, [pc, #12]	; (800982c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009820:	4618      	mov	r0, r3
 8009822:	370c      	adds	r7, #12
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr
 800982c:	2000001c 	.word	0x2000001c

08009830 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009830:	b480      	push	{r7}
 8009832:	b083      	sub	sp, #12
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d101      	bne.n	8009844 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009840:	2303      	movs	r3, #3
 8009842:	e009      	b.n	8009858 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800984a:	687a      	ldr	r2, [r7, #4]
 800984c:	33b0      	adds	r3, #176	; 0xb0
 800984e:	009b      	lsls	r3, r3, #2
 8009850:	4413      	add	r3, r2
 8009852:	683a      	ldr	r2, [r7, #0]
 8009854:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009856:	2300      	movs	r3, #0
}
 8009858:	4618      	mov	r0, r3
 800985a:	370c      	adds	r7, #12
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr

08009864 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009864:	b480      	push	{r7}
 8009866:	b087      	sub	sp, #28
 8009868:	af00      	add	r7, sp, #0
 800986a:	60f8      	str	r0, [r7, #12]
 800986c:	60b9      	str	r1, [r7, #8]
 800986e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	32b0      	adds	r2, #176	; 0xb0
 800987a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800987e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d101      	bne.n	800988a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009886:	2303      	movs	r3, #3
 8009888:	e008      	b.n	800989c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	68ba      	ldr	r2, [r7, #8]
 800988e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	687a      	ldr	r2, [r7, #4]
 8009896:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800989a:	2300      	movs	r3, #0
}
 800989c:	4618      	mov	r0, r3
 800989e:	371c      	adds	r7, #28
 80098a0:	46bd      	mov	sp, r7
 80098a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a6:	4770      	bx	lr

080098a8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b085      	sub	sp, #20
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	32b0      	adds	r2, #176	; 0xb0
 80098bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098c0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d101      	bne.n	80098cc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80098c8:	2303      	movs	r3, #3
 80098ca:	e004      	b.n	80098d6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	683a      	ldr	r2, [r7, #0]
 80098d0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80098d4:	2300      	movs	r3, #0
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3714      	adds	r7, #20
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr
	...

080098e4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b084      	sub	sp, #16
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	32b0      	adds	r2, #176	; 0xb0
 80098f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098fa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	32b0      	adds	r2, #176	; 0xb0
 8009906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d101      	bne.n	8009912 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800990e:	2303      	movs	r3, #3
 8009910:	e018      	b.n	8009944 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	7c1b      	ldrb	r3, [r3, #16]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d10a      	bne.n	8009930 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800991a:	4b0c      	ldr	r3, [pc, #48]	; (800994c <USBD_CDC_ReceivePacket+0x68>)
 800991c:	7819      	ldrb	r1, [r3, #0]
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009924:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f001 ffd1 	bl	800b8d0 <USBD_LL_PrepareReceive>
 800992e:	e008      	b.n	8009942 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009930:	4b06      	ldr	r3, [pc, #24]	; (800994c <USBD_CDC_ReceivePacket+0x68>)
 8009932:	7819      	ldrb	r1, [r3, #0]
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800993a:	2340      	movs	r3, #64	; 0x40
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f001 ffc7 	bl	800b8d0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009942:	2300      	movs	r3, #0
}
 8009944:	4618      	mov	r0, r3
 8009946:	3710      	adds	r7, #16
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}
 800994c:	200000a4 	.word	0x200000a4

08009950 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b086      	sub	sp, #24
 8009954:	af00      	add	r7, sp, #0
 8009956:	60f8      	str	r0, [r7, #12]
 8009958:	60b9      	str	r1, [r7, #8]
 800995a:	4613      	mov	r3, r2
 800995c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d101      	bne.n	8009968 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009964:	2303      	movs	r3, #3
 8009966:	e01f      	b.n	80099a8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2200      	movs	r2, #0
 800996c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2200      	movs	r2, #0
 8009974:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2200      	movs	r2, #0
 800997c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d003      	beq.n	800998e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	68ba      	ldr	r2, [r7, #8]
 800998a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2201      	movs	r2, #1
 8009992:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	79fa      	ldrb	r2, [r7, #7]
 800999a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800999c:	68f8      	ldr	r0, [r7, #12]
 800999e:	f001 fe41 	bl	800b624 <USBD_LL_Init>
 80099a2:	4603      	mov	r3, r0
 80099a4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80099a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3718      	adds	r7, #24
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}

080099b0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b084      	sub	sp, #16
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80099ba:	2300      	movs	r3, #0
 80099bc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d101      	bne.n	80099c8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80099c4:	2303      	movs	r3, #3
 80099c6:	e025      	b.n	8009a14 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	683a      	ldr	r2, [r7, #0]
 80099cc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	32ae      	adds	r2, #174	; 0xae
 80099da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d00f      	beq.n	8009a04 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	32ae      	adds	r2, #174	; 0xae
 80099ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099f4:	f107 020e 	add.w	r2, r7, #14
 80099f8:	4610      	mov	r0, r2
 80099fa:	4798      	blx	r3
 80099fc:	4602      	mov	r2, r0
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009a0a:	1c5a      	adds	r2, r3, #1
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009a12:	2300      	movs	r3, #0
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3710      	adds	r7, #16
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b082      	sub	sp, #8
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f001 fe49 	bl	800b6bc <USBD_LL_Start>
 8009a2a:	4603      	mov	r3, r0
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3708      	adds	r7, #8
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b083      	sub	sp, #12
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009a3c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	370c      	adds	r7, #12
 8009a42:	46bd      	mov	sp, r7
 8009a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a48:	4770      	bx	lr

08009a4a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a4a:	b580      	push	{r7, lr}
 8009a4c:	b084      	sub	sp, #16
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	6078      	str	r0, [r7, #4]
 8009a52:	460b      	mov	r3, r1
 8009a54:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a56:	2300      	movs	r3, #0
 8009a58:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d009      	beq.n	8009a78 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	78fa      	ldrb	r2, [r7, #3]
 8009a6e:	4611      	mov	r1, r2
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	4798      	blx	r3
 8009a74:	4603      	mov	r3, r0
 8009a76:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3710      	adds	r7, #16
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}

08009a82 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a82:	b580      	push	{r7, lr}
 8009a84:	b084      	sub	sp, #16
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	6078      	str	r0, [r7, #4]
 8009a8a:	460b      	mov	r3, r1
 8009a8c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a98:	685b      	ldr	r3, [r3, #4]
 8009a9a:	78fa      	ldrb	r2, [r7, #3]
 8009a9c:	4611      	mov	r1, r2
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	4798      	blx	r3
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d001      	beq.n	8009aac <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009aa8:	2303      	movs	r3, #3
 8009aaa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3710      	adds	r7, #16
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}

08009ab6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009ab6:	b580      	push	{r7, lr}
 8009ab8:	b084      	sub	sp, #16
 8009aba:	af00      	add	r7, sp, #0
 8009abc:	6078      	str	r0, [r7, #4]
 8009abe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009ac6:	6839      	ldr	r1, [r7, #0]
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f001 f932 	bl	800ad32 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009adc:	461a      	mov	r2, r3
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009aea:	f003 031f 	and.w	r3, r3, #31
 8009aee:	2b02      	cmp	r3, #2
 8009af0:	d01a      	beq.n	8009b28 <USBD_LL_SetupStage+0x72>
 8009af2:	2b02      	cmp	r3, #2
 8009af4:	d822      	bhi.n	8009b3c <USBD_LL_SetupStage+0x86>
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d002      	beq.n	8009b00 <USBD_LL_SetupStage+0x4a>
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	d00a      	beq.n	8009b14 <USBD_LL_SetupStage+0x5e>
 8009afe:	e01d      	b.n	8009b3c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009b06:	4619      	mov	r1, r3
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f000 fb5f 	bl	800a1cc <USBD_StdDevReq>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	73fb      	strb	r3, [r7, #15]
      break;
 8009b12:	e020      	b.n	8009b56 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 fbc7 	bl	800a2b0 <USBD_StdItfReq>
 8009b22:	4603      	mov	r3, r0
 8009b24:	73fb      	strb	r3, [r7, #15]
      break;
 8009b26:	e016      	b.n	8009b56 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009b2e:	4619      	mov	r1, r3
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f000 fc29 	bl	800a388 <USBD_StdEPReq>
 8009b36:	4603      	mov	r3, r0
 8009b38:	73fb      	strb	r3, [r7, #15]
      break;
 8009b3a:	e00c      	b.n	8009b56 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009b42:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009b46:	b2db      	uxtb	r3, r3
 8009b48:	4619      	mov	r1, r3
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f001 fe16 	bl	800b77c <USBD_LL_StallEP>
 8009b50:	4603      	mov	r3, r0
 8009b52:	73fb      	strb	r3, [r7, #15]
      break;
 8009b54:	bf00      	nop
  }

  return ret;
 8009b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3710      	adds	r7, #16
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b086      	sub	sp, #24
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	60f8      	str	r0, [r7, #12]
 8009b68:	460b      	mov	r3, r1
 8009b6a:	607a      	str	r2, [r7, #4]
 8009b6c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009b72:	7afb      	ldrb	r3, [r7, #11]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d16e      	bne.n	8009c56 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009b7e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009b86:	2b03      	cmp	r3, #3
 8009b88:	f040 8098 	bne.w	8009cbc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	689a      	ldr	r2, [r3, #8]
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	68db      	ldr	r3, [r3, #12]
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d913      	bls.n	8009bc0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	689a      	ldr	r2, [r3, #8]
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	68db      	ldr	r3, [r3, #12]
 8009ba0:	1ad2      	subs	r2, r2, r3
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	68da      	ldr	r2, [r3, #12]
 8009baa:	693b      	ldr	r3, [r7, #16]
 8009bac:	689b      	ldr	r3, [r3, #8]
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	bf28      	it	cs
 8009bb2:	4613      	movcs	r3, r2
 8009bb4:	461a      	mov	r2, r3
 8009bb6:	6879      	ldr	r1, [r7, #4]
 8009bb8:	68f8      	ldr	r0, [r7, #12]
 8009bba:	f001 f9ae 	bl	800af1a <USBD_CtlContinueRx>
 8009bbe:	e07d      	b.n	8009cbc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009bc6:	f003 031f 	and.w	r3, r3, #31
 8009bca:	2b02      	cmp	r3, #2
 8009bcc:	d014      	beq.n	8009bf8 <USBD_LL_DataOutStage+0x98>
 8009bce:	2b02      	cmp	r3, #2
 8009bd0:	d81d      	bhi.n	8009c0e <USBD_LL_DataOutStage+0xae>
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d002      	beq.n	8009bdc <USBD_LL_DataOutStage+0x7c>
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	d003      	beq.n	8009be2 <USBD_LL_DataOutStage+0x82>
 8009bda:	e018      	b.n	8009c0e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	75bb      	strb	r3, [r7, #22]
            break;
 8009be0:	e018      	b.n	8009c14 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009be8:	b2db      	uxtb	r3, r3
 8009bea:	4619      	mov	r1, r3
 8009bec:	68f8      	ldr	r0, [r7, #12]
 8009bee:	f000 fa5e 	bl	800a0ae <USBD_CoreFindIF>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	75bb      	strb	r3, [r7, #22]
            break;
 8009bf6:	e00d      	b.n	8009c14 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009bfe:	b2db      	uxtb	r3, r3
 8009c00:	4619      	mov	r1, r3
 8009c02:	68f8      	ldr	r0, [r7, #12]
 8009c04:	f000 fa60 	bl	800a0c8 <USBD_CoreFindEP>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	75bb      	strb	r3, [r7, #22]
            break;
 8009c0c:	e002      	b.n	8009c14 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	75bb      	strb	r3, [r7, #22]
            break;
 8009c12:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009c14:	7dbb      	ldrb	r3, [r7, #22]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d119      	bne.n	8009c4e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c20:	b2db      	uxtb	r3, r3
 8009c22:	2b03      	cmp	r3, #3
 8009c24:	d113      	bne.n	8009c4e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009c26:	7dba      	ldrb	r2, [r7, #22]
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	32ae      	adds	r2, #174	; 0xae
 8009c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c30:	691b      	ldr	r3, [r3, #16]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d00b      	beq.n	8009c4e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009c36:	7dba      	ldrb	r2, [r7, #22]
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009c3e:	7dba      	ldrb	r2, [r7, #22]
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	32ae      	adds	r2, #174	; 0xae
 8009c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c48:	691b      	ldr	r3, [r3, #16]
 8009c4a:	68f8      	ldr	r0, [r7, #12]
 8009c4c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009c4e:	68f8      	ldr	r0, [r7, #12]
 8009c50:	f001 f974 	bl	800af3c <USBD_CtlSendStatus>
 8009c54:	e032      	b.n	8009cbc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009c56:	7afb      	ldrb	r3, [r7, #11]
 8009c58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c5c:	b2db      	uxtb	r3, r3
 8009c5e:	4619      	mov	r1, r3
 8009c60:	68f8      	ldr	r0, [r7, #12]
 8009c62:	f000 fa31 	bl	800a0c8 <USBD_CoreFindEP>
 8009c66:	4603      	mov	r3, r0
 8009c68:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009c6a:	7dbb      	ldrb	r3, [r7, #22]
 8009c6c:	2bff      	cmp	r3, #255	; 0xff
 8009c6e:	d025      	beq.n	8009cbc <USBD_LL_DataOutStage+0x15c>
 8009c70:	7dbb      	ldrb	r3, [r7, #22]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d122      	bne.n	8009cbc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c7c:	b2db      	uxtb	r3, r3
 8009c7e:	2b03      	cmp	r3, #3
 8009c80:	d117      	bne.n	8009cb2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009c82:	7dba      	ldrb	r2, [r7, #22]
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	32ae      	adds	r2, #174	; 0xae
 8009c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c8c:	699b      	ldr	r3, [r3, #24]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d00f      	beq.n	8009cb2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009c92:	7dba      	ldrb	r2, [r7, #22]
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009c9a:	7dba      	ldrb	r2, [r7, #22]
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	32ae      	adds	r2, #174	; 0xae
 8009ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ca4:	699b      	ldr	r3, [r3, #24]
 8009ca6:	7afa      	ldrb	r2, [r7, #11]
 8009ca8:	4611      	mov	r1, r2
 8009caa:	68f8      	ldr	r0, [r7, #12]
 8009cac:	4798      	blx	r3
 8009cae:	4603      	mov	r3, r0
 8009cb0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009cb2:	7dfb      	ldrb	r3, [r7, #23]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d001      	beq.n	8009cbc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009cb8:	7dfb      	ldrb	r3, [r7, #23]
 8009cba:	e000      	b.n	8009cbe <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009cbc:	2300      	movs	r3, #0
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3718      	adds	r7, #24
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}

08009cc6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009cc6:	b580      	push	{r7, lr}
 8009cc8:	b086      	sub	sp, #24
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	60f8      	str	r0, [r7, #12]
 8009cce:	460b      	mov	r3, r1
 8009cd0:	607a      	str	r2, [r7, #4]
 8009cd2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009cd4:	7afb      	ldrb	r3, [r7, #11]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d16f      	bne.n	8009dba <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	3314      	adds	r3, #20
 8009cde:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009ce6:	2b02      	cmp	r3, #2
 8009ce8:	d15a      	bne.n	8009da0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	689a      	ldr	r2, [r3, #8]
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	68db      	ldr	r3, [r3, #12]
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	d914      	bls.n	8009d20 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	689a      	ldr	r2, [r3, #8]
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	68db      	ldr	r3, [r3, #12]
 8009cfe:	1ad2      	subs	r2, r2, r3
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	689b      	ldr	r3, [r3, #8]
 8009d08:	461a      	mov	r2, r3
 8009d0a:	6879      	ldr	r1, [r7, #4]
 8009d0c:	68f8      	ldr	r0, [r7, #12]
 8009d0e:	f001 f8d6 	bl	800aebe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009d12:	2300      	movs	r3, #0
 8009d14:	2200      	movs	r2, #0
 8009d16:	2100      	movs	r1, #0
 8009d18:	68f8      	ldr	r0, [r7, #12]
 8009d1a:	f001 fdd9 	bl	800b8d0 <USBD_LL_PrepareReceive>
 8009d1e:	e03f      	b.n	8009da0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	68da      	ldr	r2, [r3, #12]
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	689b      	ldr	r3, [r3, #8]
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d11c      	bne.n	8009d66 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009d2c:	693b      	ldr	r3, [r7, #16]
 8009d2e:	685a      	ldr	r2, [r3, #4]
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d316      	bcc.n	8009d66 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	685a      	ldr	r2, [r3, #4]
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d20f      	bcs.n	8009d66 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009d46:	2200      	movs	r2, #0
 8009d48:	2100      	movs	r1, #0
 8009d4a:	68f8      	ldr	r0, [r7, #12]
 8009d4c:	f001 f8b7 	bl	800aebe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2200      	movs	r2, #0
 8009d54:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009d58:	2300      	movs	r3, #0
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	2100      	movs	r1, #0
 8009d5e:	68f8      	ldr	r0, [r7, #12]
 8009d60:	f001 fdb6 	bl	800b8d0 <USBD_LL_PrepareReceive>
 8009d64:	e01c      	b.n	8009da0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d6c:	b2db      	uxtb	r3, r3
 8009d6e:	2b03      	cmp	r3, #3
 8009d70:	d10f      	bne.n	8009d92 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d78:	68db      	ldr	r3, [r3, #12]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d009      	beq.n	8009d92 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	2200      	movs	r2, #0
 8009d82:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d8c:	68db      	ldr	r3, [r3, #12]
 8009d8e:	68f8      	ldr	r0, [r7, #12]
 8009d90:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d92:	2180      	movs	r1, #128	; 0x80
 8009d94:	68f8      	ldr	r0, [r7, #12]
 8009d96:	f001 fcf1 	bl	800b77c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009d9a:	68f8      	ldr	r0, [r7, #12]
 8009d9c:	f001 f8e1 	bl	800af62 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d03a      	beq.n	8009e20 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009daa:	68f8      	ldr	r0, [r7, #12]
 8009dac:	f7ff fe42 	bl	8009a34 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2200      	movs	r2, #0
 8009db4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009db8:	e032      	b.n	8009e20 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009dba:	7afb      	ldrb	r3, [r7, #11]
 8009dbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009dc0:	b2db      	uxtb	r3, r3
 8009dc2:	4619      	mov	r1, r3
 8009dc4:	68f8      	ldr	r0, [r7, #12]
 8009dc6:	f000 f97f 	bl	800a0c8 <USBD_CoreFindEP>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009dce:	7dfb      	ldrb	r3, [r7, #23]
 8009dd0:	2bff      	cmp	r3, #255	; 0xff
 8009dd2:	d025      	beq.n	8009e20 <USBD_LL_DataInStage+0x15a>
 8009dd4:	7dfb      	ldrb	r3, [r7, #23]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d122      	bne.n	8009e20 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009de0:	b2db      	uxtb	r3, r3
 8009de2:	2b03      	cmp	r3, #3
 8009de4:	d11c      	bne.n	8009e20 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009de6:	7dfa      	ldrb	r2, [r7, #23]
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	32ae      	adds	r2, #174	; 0xae
 8009dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009df0:	695b      	ldr	r3, [r3, #20]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d014      	beq.n	8009e20 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009df6:	7dfa      	ldrb	r2, [r7, #23]
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009dfe:	7dfa      	ldrb	r2, [r7, #23]
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	32ae      	adds	r2, #174	; 0xae
 8009e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e08:	695b      	ldr	r3, [r3, #20]
 8009e0a:	7afa      	ldrb	r2, [r7, #11]
 8009e0c:	4611      	mov	r1, r2
 8009e0e:	68f8      	ldr	r0, [r7, #12]
 8009e10:	4798      	blx	r3
 8009e12:	4603      	mov	r3, r0
 8009e14:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009e16:	7dbb      	ldrb	r3, [r7, #22]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d001      	beq.n	8009e20 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009e1c:	7dbb      	ldrb	r3, [r7, #22]
 8009e1e:	e000      	b.n	8009e22 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009e20:	2300      	movs	r3, #0
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3718      	adds	r7, #24
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}

08009e2a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009e2a:	b580      	push	{r7, lr}
 8009e2c:	b084      	sub	sp, #16
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e32:	2300      	movs	r3, #0
 8009e34:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2201      	movs	r2, #1
 8009e3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2200      	movs	r2, #0
 8009e42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2200      	movs	r2, #0
 8009e58:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d014      	beq.n	8009e90 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e6c:	685b      	ldr	r3, [r3, #4]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d00e      	beq.n	8009e90 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e78:	685b      	ldr	r3, [r3, #4]
 8009e7a:	687a      	ldr	r2, [r7, #4]
 8009e7c:	6852      	ldr	r2, [r2, #4]
 8009e7e:	b2d2      	uxtb	r2, r2
 8009e80:	4611      	mov	r1, r2
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	4798      	blx	r3
 8009e86:	4603      	mov	r3, r0
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d001      	beq.n	8009e90 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009e8c:	2303      	movs	r3, #3
 8009e8e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009e90:	2340      	movs	r3, #64	; 0x40
 8009e92:	2200      	movs	r2, #0
 8009e94:	2100      	movs	r1, #0
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f001 fc2b 	bl	800b6f2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2240      	movs	r2, #64	; 0x40
 8009ea8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009eac:	2340      	movs	r3, #64	; 0x40
 8009eae:	2200      	movs	r2, #0
 8009eb0:	2180      	movs	r1, #128	; 0x80
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f001 fc1d 	bl	800b6f2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2201      	movs	r2, #1
 8009ebc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2240      	movs	r2, #64	; 0x40
 8009ec2:	621a      	str	r2, [r3, #32]

  return ret;
 8009ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3710      	adds	r7, #16
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}

08009ece <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009ece:	b480      	push	{r7}
 8009ed0:	b083      	sub	sp, #12
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	6078      	str	r0, [r7, #4]
 8009ed6:	460b      	mov	r3, r1
 8009ed8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	78fa      	ldrb	r2, [r7, #3]
 8009ede:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009ee0:	2300      	movs	r3, #0
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	370c      	adds	r7, #12
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eec:	4770      	bx	lr

08009eee <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009eee:	b480      	push	{r7}
 8009ef0:	b083      	sub	sp, #12
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009efc:	b2da      	uxtb	r2, r3
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2204      	movs	r2, #4
 8009f08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009f0c:	2300      	movs	r3, #0
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	370c      	adds	r7, #12
 8009f12:	46bd      	mov	sp, r7
 8009f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f18:	4770      	bx	lr

08009f1a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009f1a:	b480      	push	{r7}
 8009f1c:	b083      	sub	sp, #12
 8009f1e:	af00      	add	r7, sp, #0
 8009f20:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f28:	b2db      	uxtb	r3, r3
 8009f2a:	2b04      	cmp	r3, #4
 8009f2c:	d106      	bne.n	8009f3c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009f34:	b2da      	uxtb	r2, r3
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009f3c:	2300      	movs	r3, #0
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	370c      	adds	r7, #12
 8009f42:	46bd      	mov	sp, r7
 8009f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f48:	4770      	bx	lr

08009f4a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009f4a:	b580      	push	{r7, lr}
 8009f4c:	b082      	sub	sp, #8
 8009f4e:	af00      	add	r7, sp, #0
 8009f50:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f58:	b2db      	uxtb	r3, r3
 8009f5a:	2b03      	cmp	r3, #3
 8009f5c:	d110      	bne.n	8009f80 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d00b      	beq.n	8009f80 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f6e:	69db      	ldr	r3, [r3, #28]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d005      	beq.n	8009f80 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f7a:	69db      	ldr	r3, [r3, #28]
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009f80:	2300      	movs	r3, #0
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3708      	adds	r7, #8
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}

08009f8a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009f8a:	b580      	push	{r7, lr}
 8009f8c:	b082      	sub	sp, #8
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6078      	str	r0, [r7, #4]
 8009f92:	460b      	mov	r3, r1
 8009f94:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	32ae      	adds	r2, #174	; 0xae
 8009fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d101      	bne.n	8009fac <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009fa8:	2303      	movs	r3, #3
 8009faa:	e01c      	b.n	8009fe6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fb2:	b2db      	uxtb	r3, r3
 8009fb4:	2b03      	cmp	r3, #3
 8009fb6:	d115      	bne.n	8009fe4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	32ae      	adds	r2, #174	; 0xae
 8009fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fc6:	6a1b      	ldr	r3, [r3, #32]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d00b      	beq.n	8009fe4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	32ae      	adds	r2, #174	; 0xae
 8009fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fda:	6a1b      	ldr	r3, [r3, #32]
 8009fdc:	78fa      	ldrb	r2, [r7, #3]
 8009fde:	4611      	mov	r1, r2
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009fe4:	2300      	movs	r3, #0
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3708      	adds	r7, #8
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}

08009fee <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009fee:	b580      	push	{r7, lr}
 8009ff0:	b082      	sub	sp, #8
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	6078      	str	r0, [r7, #4]
 8009ff6:	460b      	mov	r3, r1
 8009ff8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	32ae      	adds	r2, #174	; 0xae
 800a004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d101      	bne.n	800a010 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a00c:	2303      	movs	r3, #3
 800a00e:	e01c      	b.n	800a04a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a016:	b2db      	uxtb	r3, r3
 800a018:	2b03      	cmp	r3, #3
 800a01a:	d115      	bne.n	800a048 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	32ae      	adds	r2, #174	; 0xae
 800a026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d00b      	beq.n	800a048 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	32ae      	adds	r2, #174	; 0xae
 800a03a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a03e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a040:	78fa      	ldrb	r2, [r7, #3]
 800a042:	4611      	mov	r1, r2
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a048:	2300      	movs	r3, #0
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3708      	adds	r7, #8
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}

0800a052 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a052:	b480      	push	{r7}
 800a054:	b083      	sub	sp, #12
 800a056:	af00      	add	r7, sp, #0
 800a058:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a05a:	2300      	movs	r3, #0
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	370c      	adds	r7, #12
 800a060:	46bd      	mov	sp, r7
 800a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a066:	4770      	bx	lr

0800a068 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b084      	sub	sp, #16
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a070:	2300      	movs	r3, #0
 800a072:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2201      	movs	r2, #1
 800a078:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a082:	2b00      	cmp	r3, #0
 800a084:	d00e      	beq.n	800a0a4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	687a      	ldr	r2, [r7, #4]
 800a090:	6852      	ldr	r2, [r2, #4]
 800a092:	b2d2      	uxtb	r2, r2
 800a094:	4611      	mov	r1, r2
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	4798      	blx	r3
 800a09a:	4603      	mov	r3, r0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d001      	beq.n	800a0a4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a0a0:	2303      	movs	r3, #3
 800a0a2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a0a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3710      	adds	r7, #16
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}

0800a0ae <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a0ae:	b480      	push	{r7}
 800a0b0:	b083      	sub	sp, #12
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	6078      	str	r0, [r7, #4]
 800a0b6:	460b      	mov	r3, r1
 800a0b8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a0ba:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	370c      	adds	r7, #12
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b083      	sub	sp, #12
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	460b      	mov	r3, r1
 800a0d2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a0d4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	370c      	adds	r7, #12
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e0:	4770      	bx	lr

0800a0e2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a0e2:	b580      	push	{r7, lr}
 800a0e4:	b086      	sub	sp, #24
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	6078      	str	r0, [r7, #4]
 800a0ea:	460b      	mov	r3, r1
 800a0ec:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	885b      	ldrh	r3, [r3, #2]
 800a0fe:	b29a      	uxth	r2, r3
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	781b      	ldrb	r3, [r3, #0]
 800a104:	b29b      	uxth	r3, r3
 800a106:	429a      	cmp	r2, r3
 800a108:	d920      	bls.n	800a14c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	b29b      	uxth	r3, r3
 800a110:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a112:	e013      	b.n	800a13c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a114:	f107 030a 	add.w	r3, r7, #10
 800a118:	4619      	mov	r1, r3
 800a11a:	6978      	ldr	r0, [r7, #20]
 800a11c:	f000 f81b 	bl	800a156 <USBD_GetNextDesc>
 800a120:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	785b      	ldrb	r3, [r3, #1]
 800a126:	2b05      	cmp	r3, #5
 800a128:	d108      	bne.n	800a13c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	789b      	ldrb	r3, [r3, #2]
 800a132:	78fa      	ldrb	r2, [r7, #3]
 800a134:	429a      	cmp	r2, r3
 800a136:	d008      	beq.n	800a14a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a138:	2300      	movs	r3, #0
 800a13a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	885b      	ldrh	r3, [r3, #2]
 800a140:	b29a      	uxth	r2, r3
 800a142:	897b      	ldrh	r3, [r7, #10]
 800a144:	429a      	cmp	r2, r3
 800a146:	d8e5      	bhi.n	800a114 <USBD_GetEpDesc+0x32>
 800a148:	e000      	b.n	800a14c <USBD_GetEpDesc+0x6a>
          break;
 800a14a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a14c:	693b      	ldr	r3, [r7, #16]
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3718      	adds	r7, #24
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}

0800a156 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a156:	b480      	push	{r7}
 800a158:	b085      	sub	sp, #20
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	6078      	str	r0, [r7, #4]
 800a15e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	881a      	ldrh	r2, [r3, #0]
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	781b      	ldrb	r3, [r3, #0]
 800a16c:	b29b      	uxth	r3, r3
 800a16e:	4413      	add	r3, r2
 800a170:	b29a      	uxth	r2, r3
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	781b      	ldrb	r3, [r3, #0]
 800a17a:	461a      	mov	r2, r3
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	4413      	add	r3, r2
 800a180:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a182:	68fb      	ldr	r3, [r7, #12]
}
 800a184:	4618      	mov	r0, r3
 800a186:	3714      	adds	r7, #20
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr

0800a190 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a190:	b480      	push	{r7}
 800a192:	b087      	sub	sp, #28
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	781b      	ldrb	r3, [r3, #0]
 800a1a0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	3301      	adds	r3, #1
 800a1a6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a1ae:	8a3b      	ldrh	r3, [r7, #16]
 800a1b0:	021b      	lsls	r3, r3, #8
 800a1b2:	b21a      	sxth	r2, r3
 800a1b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	b21b      	sxth	r3, r3
 800a1bc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a1be:	89fb      	ldrh	r3, [r7, #14]
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	371c      	adds	r7, #28
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr

0800a1cc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b084      	sub	sp, #16
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
 800a1d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	781b      	ldrb	r3, [r3, #0]
 800a1de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a1e2:	2b40      	cmp	r3, #64	; 0x40
 800a1e4:	d005      	beq.n	800a1f2 <USBD_StdDevReq+0x26>
 800a1e6:	2b40      	cmp	r3, #64	; 0x40
 800a1e8:	d857      	bhi.n	800a29a <USBD_StdDevReq+0xce>
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d00f      	beq.n	800a20e <USBD_StdDevReq+0x42>
 800a1ee:	2b20      	cmp	r3, #32
 800a1f0:	d153      	bne.n	800a29a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	32ae      	adds	r2, #174	; 0xae
 800a1fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a200:	689b      	ldr	r3, [r3, #8]
 800a202:	6839      	ldr	r1, [r7, #0]
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	4798      	blx	r3
 800a208:	4603      	mov	r3, r0
 800a20a:	73fb      	strb	r3, [r7, #15]
      break;
 800a20c:	e04a      	b.n	800a2a4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	785b      	ldrb	r3, [r3, #1]
 800a212:	2b09      	cmp	r3, #9
 800a214:	d83b      	bhi.n	800a28e <USBD_StdDevReq+0xc2>
 800a216:	a201      	add	r2, pc, #4	; (adr r2, 800a21c <USBD_StdDevReq+0x50>)
 800a218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a21c:	0800a271 	.word	0x0800a271
 800a220:	0800a285 	.word	0x0800a285
 800a224:	0800a28f 	.word	0x0800a28f
 800a228:	0800a27b 	.word	0x0800a27b
 800a22c:	0800a28f 	.word	0x0800a28f
 800a230:	0800a24f 	.word	0x0800a24f
 800a234:	0800a245 	.word	0x0800a245
 800a238:	0800a28f 	.word	0x0800a28f
 800a23c:	0800a267 	.word	0x0800a267
 800a240:	0800a259 	.word	0x0800a259
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a244:	6839      	ldr	r1, [r7, #0]
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f000 fa3c 	bl	800a6c4 <USBD_GetDescriptor>
          break;
 800a24c:	e024      	b.n	800a298 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a24e:	6839      	ldr	r1, [r7, #0]
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f000 fbcb 	bl	800a9ec <USBD_SetAddress>
          break;
 800a256:	e01f      	b.n	800a298 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a258:	6839      	ldr	r1, [r7, #0]
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f000 fc0a 	bl	800aa74 <USBD_SetConfig>
 800a260:	4603      	mov	r3, r0
 800a262:	73fb      	strb	r3, [r7, #15]
          break;
 800a264:	e018      	b.n	800a298 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a266:	6839      	ldr	r1, [r7, #0]
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f000 fcad 	bl	800abc8 <USBD_GetConfig>
          break;
 800a26e:	e013      	b.n	800a298 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a270:	6839      	ldr	r1, [r7, #0]
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f000 fcde 	bl	800ac34 <USBD_GetStatus>
          break;
 800a278:	e00e      	b.n	800a298 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a27a:	6839      	ldr	r1, [r7, #0]
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f000 fd0d 	bl	800ac9c <USBD_SetFeature>
          break;
 800a282:	e009      	b.n	800a298 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a284:	6839      	ldr	r1, [r7, #0]
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f000 fd31 	bl	800acee <USBD_ClrFeature>
          break;
 800a28c:	e004      	b.n	800a298 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a28e:	6839      	ldr	r1, [r7, #0]
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f000 fd88 	bl	800ada6 <USBD_CtlError>
          break;
 800a296:	bf00      	nop
      }
      break;
 800a298:	e004      	b.n	800a2a4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a29a:	6839      	ldr	r1, [r7, #0]
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f000 fd82 	bl	800ada6 <USBD_CtlError>
      break;
 800a2a2:	bf00      	nop
  }

  return ret;
 800a2a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3710      	adds	r7, #16
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}
 800a2ae:	bf00      	nop

0800a2b0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b084      	sub	sp, #16
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
 800a2b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	781b      	ldrb	r3, [r3, #0]
 800a2c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a2c6:	2b40      	cmp	r3, #64	; 0x40
 800a2c8:	d005      	beq.n	800a2d6 <USBD_StdItfReq+0x26>
 800a2ca:	2b40      	cmp	r3, #64	; 0x40
 800a2cc:	d852      	bhi.n	800a374 <USBD_StdItfReq+0xc4>
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d001      	beq.n	800a2d6 <USBD_StdItfReq+0x26>
 800a2d2:	2b20      	cmp	r3, #32
 800a2d4:	d14e      	bne.n	800a374 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2dc:	b2db      	uxtb	r3, r3
 800a2de:	3b01      	subs	r3, #1
 800a2e0:	2b02      	cmp	r3, #2
 800a2e2:	d840      	bhi.n	800a366 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	889b      	ldrh	r3, [r3, #4]
 800a2e8:	b2db      	uxtb	r3, r3
 800a2ea:	2b01      	cmp	r3, #1
 800a2ec:	d836      	bhi.n	800a35c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	889b      	ldrh	r3, [r3, #4]
 800a2f2:	b2db      	uxtb	r3, r3
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f7ff fed9 	bl	800a0ae <USBD_CoreFindIF>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a300:	7bbb      	ldrb	r3, [r7, #14]
 800a302:	2bff      	cmp	r3, #255	; 0xff
 800a304:	d01d      	beq.n	800a342 <USBD_StdItfReq+0x92>
 800a306:	7bbb      	ldrb	r3, [r7, #14]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d11a      	bne.n	800a342 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a30c:	7bba      	ldrb	r2, [r7, #14]
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	32ae      	adds	r2, #174	; 0xae
 800a312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a316:	689b      	ldr	r3, [r3, #8]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d00f      	beq.n	800a33c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a31c:	7bba      	ldrb	r2, [r7, #14]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a324:	7bba      	ldrb	r2, [r7, #14]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	32ae      	adds	r2, #174	; 0xae
 800a32a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a32e:	689b      	ldr	r3, [r3, #8]
 800a330:	6839      	ldr	r1, [r7, #0]
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	4798      	blx	r3
 800a336:	4603      	mov	r3, r0
 800a338:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a33a:	e004      	b.n	800a346 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a33c:	2303      	movs	r3, #3
 800a33e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a340:	e001      	b.n	800a346 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a342:	2303      	movs	r3, #3
 800a344:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	88db      	ldrh	r3, [r3, #6]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d110      	bne.n	800a370 <USBD_StdItfReq+0xc0>
 800a34e:	7bfb      	ldrb	r3, [r7, #15]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d10d      	bne.n	800a370 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f000 fdf1 	bl	800af3c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a35a:	e009      	b.n	800a370 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a35c:	6839      	ldr	r1, [r7, #0]
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f000 fd21 	bl	800ada6 <USBD_CtlError>
          break;
 800a364:	e004      	b.n	800a370 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a366:	6839      	ldr	r1, [r7, #0]
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f000 fd1c 	bl	800ada6 <USBD_CtlError>
          break;
 800a36e:	e000      	b.n	800a372 <USBD_StdItfReq+0xc2>
          break;
 800a370:	bf00      	nop
      }
      break;
 800a372:	e004      	b.n	800a37e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a374:	6839      	ldr	r1, [r7, #0]
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f000 fd15 	bl	800ada6 <USBD_CtlError>
      break;
 800a37c:	bf00      	nop
  }

  return ret;
 800a37e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a380:	4618      	mov	r0, r3
 800a382:	3710      	adds	r7, #16
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}

0800a388 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b084      	sub	sp, #16
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a392:	2300      	movs	r3, #0
 800a394:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	889b      	ldrh	r3, [r3, #4]
 800a39a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	781b      	ldrb	r3, [r3, #0]
 800a3a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a3a4:	2b40      	cmp	r3, #64	; 0x40
 800a3a6:	d007      	beq.n	800a3b8 <USBD_StdEPReq+0x30>
 800a3a8:	2b40      	cmp	r3, #64	; 0x40
 800a3aa:	f200 817f 	bhi.w	800a6ac <USBD_StdEPReq+0x324>
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d02a      	beq.n	800a408 <USBD_StdEPReq+0x80>
 800a3b2:	2b20      	cmp	r3, #32
 800a3b4:	f040 817a 	bne.w	800a6ac <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a3b8:	7bbb      	ldrb	r3, [r7, #14]
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f7ff fe83 	bl	800a0c8 <USBD_CoreFindEP>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a3c6:	7b7b      	ldrb	r3, [r7, #13]
 800a3c8:	2bff      	cmp	r3, #255	; 0xff
 800a3ca:	f000 8174 	beq.w	800a6b6 <USBD_StdEPReq+0x32e>
 800a3ce:	7b7b      	ldrb	r3, [r7, #13]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	f040 8170 	bne.w	800a6b6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a3d6:	7b7a      	ldrb	r2, [r7, #13]
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a3de:	7b7a      	ldrb	r2, [r7, #13]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	32ae      	adds	r2, #174	; 0xae
 800a3e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3e8:	689b      	ldr	r3, [r3, #8]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	f000 8163 	beq.w	800a6b6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a3f0:	7b7a      	ldrb	r2, [r7, #13]
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	32ae      	adds	r2, #174	; 0xae
 800a3f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3fa:	689b      	ldr	r3, [r3, #8]
 800a3fc:	6839      	ldr	r1, [r7, #0]
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	4798      	blx	r3
 800a402:	4603      	mov	r3, r0
 800a404:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a406:	e156      	b.n	800a6b6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	785b      	ldrb	r3, [r3, #1]
 800a40c:	2b03      	cmp	r3, #3
 800a40e:	d008      	beq.n	800a422 <USBD_StdEPReq+0x9a>
 800a410:	2b03      	cmp	r3, #3
 800a412:	f300 8145 	bgt.w	800a6a0 <USBD_StdEPReq+0x318>
 800a416:	2b00      	cmp	r3, #0
 800a418:	f000 809b 	beq.w	800a552 <USBD_StdEPReq+0x1ca>
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d03c      	beq.n	800a49a <USBD_StdEPReq+0x112>
 800a420:	e13e      	b.n	800a6a0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a428:	b2db      	uxtb	r3, r3
 800a42a:	2b02      	cmp	r3, #2
 800a42c:	d002      	beq.n	800a434 <USBD_StdEPReq+0xac>
 800a42e:	2b03      	cmp	r3, #3
 800a430:	d016      	beq.n	800a460 <USBD_StdEPReq+0xd8>
 800a432:	e02c      	b.n	800a48e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a434:	7bbb      	ldrb	r3, [r7, #14]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d00d      	beq.n	800a456 <USBD_StdEPReq+0xce>
 800a43a:	7bbb      	ldrb	r3, [r7, #14]
 800a43c:	2b80      	cmp	r3, #128	; 0x80
 800a43e:	d00a      	beq.n	800a456 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a440:	7bbb      	ldrb	r3, [r7, #14]
 800a442:	4619      	mov	r1, r3
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f001 f999 	bl	800b77c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a44a:	2180      	movs	r1, #128	; 0x80
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f001 f995 	bl	800b77c <USBD_LL_StallEP>
 800a452:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a454:	e020      	b.n	800a498 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a456:	6839      	ldr	r1, [r7, #0]
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f000 fca4 	bl	800ada6 <USBD_CtlError>
              break;
 800a45e:	e01b      	b.n	800a498 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	885b      	ldrh	r3, [r3, #2]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d10e      	bne.n	800a486 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a468:	7bbb      	ldrb	r3, [r7, #14]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d00b      	beq.n	800a486 <USBD_StdEPReq+0xfe>
 800a46e:	7bbb      	ldrb	r3, [r7, #14]
 800a470:	2b80      	cmp	r3, #128	; 0x80
 800a472:	d008      	beq.n	800a486 <USBD_StdEPReq+0xfe>
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	88db      	ldrh	r3, [r3, #6]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d104      	bne.n	800a486 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a47c:	7bbb      	ldrb	r3, [r7, #14]
 800a47e:	4619      	mov	r1, r3
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f001 f97b 	bl	800b77c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f000 fd58 	bl	800af3c <USBD_CtlSendStatus>

              break;
 800a48c:	e004      	b.n	800a498 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a48e:	6839      	ldr	r1, [r7, #0]
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f000 fc88 	bl	800ada6 <USBD_CtlError>
              break;
 800a496:	bf00      	nop
          }
          break;
 800a498:	e107      	b.n	800a6aa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4a0:	b2db      	uxtb	r3, r3
 800a4a2:	2b02      	cmp	r3, #2
 800a4a4:	d002      	beq.n	800a4ac <USBD_StdEPReq+0x124>
 800a4a6:	2b03      	cmp	r3, #3
 800a4a8:	d016      	beq.n	800a4d8 <USBD_StdEPReq+0x150>
 800a4aa:	e04b      	b.n	800a544 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a4ac:	7bbb      	ldrb	r3, [r7, #14]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d00d      	beq.n	800a4ce <USBD_StdEPReq+0x146>
 800a4b2:	7bbb      	ldrb	r3, [r7, #14]
 800a4b4:	2b80      	cmp	r3, #128	; 0x80
 800a4b6:	d00a      	beq.n	800a4ce <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a4b8:	7bbb      	ldrb	r3, [r7, #14]
 800a4ba:	4619      	mov	r1, r3
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f001 f95d 	bl	800b77c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a4c2:	2180      	movs	r1, #128	; 0x80
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f001 f959 	bl	800b77c <USBD_LL_StallEP>
 800a4ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a4cc:	e040      	b.n	800a550 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a4ce:	6839      	ldr	r1, [r7, #0]
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f000 fc68 	bl	800ada6 <USBD_CtlError>
              break;
 800a4d6:	e03b      	b.n	800a550 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	885b      	ldrh	r3, [r3, #2]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d136      	bne.n	800a54e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a4e0:	7bbb      	ldrb	r3, [r7, #14]
 800a4e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d004      	beq.n	800a4f4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a4ea:	7bbb      	ldrb	r3, [r7, #14]
 800a4ec:	4619      	mov	r1, r3
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f001 f963 	bl	800b7ba <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f000 fd21 	bl	800af3c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a4fa:	7bbb      	ldrb	r3, [r7, #14]
 800a4fc:	4619      	mov	r1, r3
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f7ff fde2 	bl	800a0c8 <USBD_CoreFindEP>
 800a504:	4603      	mov	r3, r0
 800a506:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a508:	7b7b      	ldrb	r3, [r7, #13]
 800a50a:	2bff      	cmp	r3, #255	; 0xff
 800a50c:	d01f      	beq.n	800a54e <USBD_StdEPReq+0x1c6>
 800a50e:	7b7b      	ldrb	r3, [r7, #13]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d11c      	bne.n	800a54e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a514:	7b7a      	ldrb	r2, [r7, #13]
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a51c:	7b7a      	ldrb	r2, [r7, #13]
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	32ae      	adds	r2, #174	; 0xae
 800a522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a526:	689b      	ldr	r3, [r3, #8]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d010      	beq.n	800a54e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a52c:	7b7a      	ldrb	r2, [r7, #13]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	32ae      	adds	r2, #174	; 0xae
 800a532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a536:	689b      	ldr	r3, [r3, #8]
 800a538:	6839      	ldr	r1, [r7, #0]
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	4798      	blx	r3
 800a53e:	4603      	mov	r3, r0
 800a540:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a542:	e004      	b.n	800a54e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a544:	6839      	ldr	r1, [r7, #0]
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f000 fc2d 	bl	800ada6 <USBD_CtlError>
              break;
 800a54c:	e000      	b.n	800a550 <USBD_StdEPReq+0x1c8>
              break;
 800a54e:	bf00      	nop
          }
          break;
 800a550:	e0ab      	b.n	800a6aa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a558:	b2db      	uxtb	r3, r3
 800a55a:	2b02      	cmp	r3, #2
 800a55c:	d002      	beq.n	800a564 <USBD_StdEPReq+0x1dc>
 800a55e:	2b03      	cmp	r3, #3
 800a560:	d032      	beq.n	800a5c8 <USBD_StdEPReq+0x240>
 800a562:	e097      	b.n	800a694 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a564:	7bbb      	ldrb	r3, [r7, #14]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d007      	beq.n	800a57a <USBD_StdEPReq+0x1f2>
 800a56a:	7bbb      	ldrb	r3, [r7, #14]
 800a56c:	2b80      	cmp	r3, #128	; 0x80
 800a56e:	d004      	beq.n	800a57a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a570:	6839      	ldr	r1, [r7, #0]
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f000 fc17 	bl	800ada6 <USBD_CtlError>
                break;
 800a578:	e091      	b.n	800a69e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a57a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	da0b      	bge.n	800a59a <USBD_StdEPReq+0x212>
 800a582:	7bbb      	ldrb	r3, [r7, #14]
 800a584:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a588:	4613      	mov	r3, r2
 800a58a:	009b      	lsls	r3, r3, #2
 800a58c:	4413      	add	r3, r2
 800a58e:	009b      	lsls	r3, r3, #2
 800a590:	3310      	adds	r3, #16
 800a592:	687a      	ldr	r2, [r7, #4]
 800a594:	4413      	add	r3, r2
 800a596:	3304      	adds	r3, #4
 800a598:	e00b      	b.n	800a5b2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a59a:	7bbb      	ldrb	r3, [r7, #14]
 800a59c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a5a0:	4613      	mov	r3, r2
 800a5a2:	009b      	lsls	r3, r3, #2
 800a5a4:	4413      	add	r3, r2
 800a5a6:	009b      	lsls	r3, r3, #2
 800a5a8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a5ac:	687a      	ldr	r2, [r7, #4]
 800a5ae:	4413      	add	r3, r2
 800a5b0:	3304      	adds	r3, #4
 800a5b2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	2202      	movs	r2, #2
 800a5be:	4619      	mov	r1, r3
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f000 fc61 	bl	800ae88 <USBD_CtlSendData>
              break;
 800a5c6:	e06a      	b.n	800a69e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a5c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	da11      	bge.n	800a5f4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a5d0:	7bbb      	ldrb	r3, [r7, #14]
 800a5d2:	f003 020f 	and.w	r2, r3, #15
 800a5d6:	6879      	ldr	r1, [r7, #4]
 800a5d8:	4613      	mov	r3, r2
 800a5da:	009b      	lsls	r3, r3, #2
 800a5dc:	4413      	add	r3, r2
 800a5de:	009b      	lsls	r3, r3, #2
 800a5e0:	440b      	add	r3, r1
 800a5e2:	3324      	adds	r3, #36	; 0x24
 800a5e4:	881b      	ldrh	r3, [r3, #0]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d117      	bne.n	800a61a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a5ea:	6839      	ldr	r1, [r7, #0]
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f000 fbda 	bl	800ada6 <USBD_CtlError>
                  break;
 800a5f2:	e054      	b.n	800a69e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a5f4:	7bbb      	ldrb	r3, [r7, #14]
 800a5f6:	f003 020f 	and.w	r2, r3, #15
 800a5fa:	6879      	ldr	r1, [r7, #4]
 800a5fc:	4613      	mov	r3, r2
 800a5fe:	009b      	lsls	r3, r3, #2
 800a600:	4413      	add	r3, r2
 800a602:	009b      	lsls	r3, r3, #2
 800a604:	440b      	add	r3, r1
 800a606:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a60a:	881b      	ldrh	r3, [r3, #0]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d104      	bne.n	800a61a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a610:	6839      	ldr	r1, [r7, #0]
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f000 fbc7 	bl	800ada6 <USBD_CtlError>
                  break;
 800a618:	e041      	b.n	800a69e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a61a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	da0b      	bge.n	800a63a <USBD_StdEPReq+0x2b2>
 800a622:	7bbb      	ldrb	r3, [r7, #14]
 800a624:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a628:	4613      	mov	r3, r2
 800a62a:	009b      	lsls	r3, r3, #2
 800a62c:	4413      	add	r3, r2
 800a62e:	009b      	lsls	r3, r3, #2
 800a630:	3310      	adds	r3, #16
 800a632:	687a      	ldr	r2, [r7, #4]
 800a634:	4413      	add	r3, r2
 800a636:	3304      	adds	r3, #4
 800a638:	e00b      	b.n	800a652 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a63a:	7bbb      	ldrb	r3, [r7, #14]
 800a63c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a640:	4613      	mov	r3, r2
 800a642:	009b      	lsls	r3, r3, #2
 800a644:	4413      	add	r3, r2
 800a646:	009b      	lsls	r3, r3, #2
 800a648:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a64c:	687a      	ldr	r2, [r7, #4]
 800a64e:	4413      	add	r3, r2
 800a650:	3304      	adds	r3, #4
 800a652:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a654:	7bbb      	ldrb	r3, [r7, #14]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d002      	beq.n	800a660 <USBD_StdEPReq+0x2d8>
 800a65a:	7bbb      	ldrb	r3, [r7, #14]
 800a65c:	2b80      	cmp	r3, #128	; 0x80
 800a65e:	d103      	bne.n	800a668 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	2200      	movs	r2, #0
 800a664:	601a      	str	r2, [r3, #0]
 800a666:	e00e      	b.n	800a686 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a668:	7bbb      	ldrb	r3, [r7, #14]
 800a66a:	4619      	mov	r1, r3
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f001 f8c3 	bl	800b7f8 <USBD_LL_IsStallEP>
 800a672:	4603      	mov	r3, r0
 800a674:	2b00      	cmp	r3, #0
 800a676:	d003      	beq.n	800a680 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	2201      	movs	r2, #1
 800a67c:	601a      	str	r2, [r3, #0]
 800a67e:	e002      	b.n	800a686 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	2200      	movs	r2, #0
 800a684:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	2202      	movs	r2, #2
 800a68a:	4619      	mov	r1, r3
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f000 fbfb 	bl	800ae88 <USBD_CtlSendData>
              break;
 800a692:	e004      	b.n	800a69e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a694:	6839      	ldr	r1, [r7, #0]
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f000 fb85 	bl	800ada6 <USBD_CtlError>
              break;
 800a69c:	bf00      	nop
          }
          break;
 800a69e:	e004      	b.n	800a6aa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a6a0:	6839      	ldr	r1, [r7, #0]
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f000 fb7f 	bl	800ada6 <USBD_CtlError>
          break;
 800a6a8:	bf00      	nop
      }
      break;
 800a6aa:	e005      	b.n	800a6b8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a6ac:	6839      	ldr	r1, [r7, #0]
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f000 fb79 	bl	800ada6 <USBD_CtlError>
      break;
 800a6b4:	e000      	b.n	800a6b8 <USBD_StdEPReq+0x330>
      break;
 800a6b6:	bf00      	nop
  }

  return ret;
 800a6b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3710      	adds	r7, #16
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}
	...

0800a6c4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b084      	sub	sp, #16
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
 800a6cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	885b      	ldrh	r3, [r3, #2]
 800a6de:	0a1b      	lsrs	r3, r3, #8
 800a6e0:	b29b      	uxth	r3, r3
 800a6e2:	3b01      	subs	r3, #1
 800a6e4:	2b0e      	cmp	r3, #14
 800a6e6:	f200 8152 	bhi.w	800a98e <USBD_GetDescriptor+0x2ca>
 800a6ea:	a201      	add	r2, pc, #4	; (adr r2, 800a6f0 <USBD_GetDescriptor+0x2c>)
 800a6ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6f0:	0800a761 	.word	0x0800a761
 800a6f4:	0800a779 	.word	0x0800a779
 800a6f8:	0800a7b9 	.word	0x0800a7b9
 800a6fc:	0800a98f 	.word	0x0800a98f
 800a700:	0800a98f 	.word	0x0800a98f
 800a704:	0800a92f 	.word	0x0800a92f
 800a708:	0800a95b 	.word	0x0800a95b
 800a70c:	0800a98f 	.word	0x0800a98f
 800a710:	0800a98f 	.word	0x0800a98f
 800a714:	0800a98f 	.word	0x0800a98f
 800a718:	0800a98f 	.word	0x0800a98f
 800a71c:	0800a98f 	.word	0x0800a98f
 800a720:	0800a98f 	.word	0x0800a98f
 800a724:	0800a98f 	.word	0x0800a98f
 800a728:	0800a72d 	.word	0x0800a72d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a732:	69db      	ldr	r3, [r3, #28]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d00b      	beq.n	800a750 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a73e:	69db      	ldr	r3, [r3, #28]
 800a740:	687a      	ldr	r2, [r7, #4]
 800a742:	7c12      	ldrb	r2, [r2, #16]
 800a744:	f107 0108 	add.w	r1, r7, #8
 800a748:	4610      	mov	r0, r2
 800a74a:	4798      	blx	r3
 800a74c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a74e:	e126      	b.n	800a99e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a750:	6839      	ldr	r1, [r7, #0]
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f000 fb27 	bl	800ada6 <USBD_CtlError>
        err++;
 800a758:	7afb      	ldrb	r3, [r7, #11]
 800a75a:	3301      	adds	r3, #1
 800a75c:	72fb      	strb	r3, [r7, #11]
      break;
 800a75e:	e11e      	b.n	800a99e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	687a      	ldr	r2, [r7, #4]
 800a76a:	7c12      	ldrb	r2, [r2, #16]
 800a76c:	f107 0108 	add.w	r1, r7, #8
 800a770:	4610      	mov	r0, r2
 800a772:	4798      	blx	r3
 800a774:	60f8      	str	r0, [r7, #12]
      break;
 800a776:	e112      	b.n	800a99e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	7c1b      	ldrb	r3, [r3, #16]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d10d      	bne.n	800a79c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a788:	f107 0208 	add.w	r2, r7, #8
 800a78c:	4610      	mov	r0, r2
 800a78e:	4798      	blx	r3
 800a790:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	3301      	adds	r3, #1
 800a796:	2202      	movs	r2, #2
 800a798:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a79a:	e100      	b.n	800a99e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7a4:	f107 0208 	add.w	r2, r7, #8
 800a7a8:	4610      	mov	r0, r2
 800a7aa:	4798      	blx	r3
 800a7ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	2202      	movs	r2, #2
 800a7b4:	701a      	strb	r2, [r3, #0]
      break;
 800a7b6:	e0f2      	b.n	800a99e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	885b      	ldrh	r3, [r3, #2]
 800a7bc:	b2db      	uxtb	r3, r3
 800a7be:	2b05      	cmp	r3, #5
 800a7c0:	f200 80ac 	bhi.w	800a91c <USBD_GetDescriptor+0x258>
 800a7c4:	a201      	add	r2, pc, #4	; (adr r2, 800a7cc <USBD_GetDescriptor+0x108>)
 800a7c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7ca:	bf00      	nop
 800a7cc:	0800a7e5 	.word	0x0800a7e5
 800a7d0:	0800a819 	.word	0x0800a819
 800a7d4:	0800a84d 	.word	0x0800a84d
 800a7d8:	0800a881 	.word	0x0800a881
 800a7dc:	0800a8b5 	.word	0x0800a8b5
 800a7e0:	0800a8e9 	.word	0x0800a8e9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7ea:	685b      	ldr	r3, [r3, #4]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d00b      	beq.n	800a808 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7f6:	685b      	ldr	r3, [r3, #4]
 800a7f8:	687a      	ldr	r2, [r7, #4]
 800a7fa:	7c12      	ldrb	r2, [r2, #16]
 800a7fc:	f107 0108 	add.w	r1, r7, #8
 800a800:	4610      	mov	r0, r2
 800a802:	4798      	blx	r3
 800a804:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a806:	e091      	b.n	800a92c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a808:	6839      	ldr	r1, [r7, #0]
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f000 facb 	bl	800ada6 <USBD_CtlError>
            err++;
 800a810:	7afb      	ldrb	r3, [r7, #11]
 800a812:	3301      	adds	r3, #1
 800a814:	72fb      	strb	r3, [r7, #11]
          break;
 800a816:	e089      	b.n	800a92c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a81e:	689b      	ldr	r3, [r3, #8]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d00b      	beq.n	800a83c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a82a:	689b      	ldr	r3, [r3, #8]
 800a82c:	687a      	ldr	r2, [r7, #4]
 800a82e:	7c12      	ldrb	r2, [r2, #16]
 800a830:	f107 0108 	add.w	r1, r7, #8
 800a834:	4610      	mov	r0, r2
 800a836:	4798      	blx	r3
 800a838:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a83a:	e077      	b.n	800a92c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a83c:	6839      	ldr	r1, [r7, #0]
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f000 fab1 	bl	800ada6 <USBD_CtlError>
            err++;
 800a844:	7afb      	ldrb	r3, [r7, #11]
 800a846:	3301      	adds	r3, #1
 800a848:	72fb      	strb	r3, [r7, #11]
          break;
 800a84a:	e06f      	b.n	800a92c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a852:	68db      	ldr	r3, [r3, #12]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d00b      	beq.n	800a870 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a85e:	68db      	ldr	r3, [r3, #12]
 800a860:	687a      	ldr	r2, [r7, #4]
 800a862:	7c12      	ldrb	r2, [r2, #16]
 800a864:	f107 0108 	add.w	r1, r7, #8
 800a868:	4610      	mov	r0, r2
 800a86a:	4798      	blx	r3
 800a86c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a86e:	e05d      	b.n	800a92c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a870:	6839      	ldr	r1, [r7, #0]
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f000 fa97 	bl	800ada6 <USBD_CtlError>
            err++;
 800a878:	7afb      	ldrb	r3, [r7, #11]
 800a87a:	3301      	adds	r3, #1
 800a87c:	72fb      	strb	r3, [r7, #11]
          break;
 800a87e:	e055      	b.n	800a92c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a886:	691b      	ldr	r3, [r3, #16]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d00b      	beq.n	800a8a4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a892:	691b      	ldr	r3, [r3, #16]
 800a894:	687a      	ldr	r2, [r7, #4]
 800a896:	7c12      	ldrb	r2, [r2, #16]
 800a898:	f107 0108 	add.w	r1, r7, #8
 800a89c:	4610      	mov	r0, r2
 800a89e:	4798      	blx	r3
 800a8a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a8a2:	e043      	b.n	800a92c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a8a4:	6839      	ldr	r1, [r7, #0]
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f000 fa7d 	bl	800ada6 <USBD_CtlError>
            err++;
 800a8ac:	7afb      	ldrb	r3, [r7, #11]
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	72fb      	strb	r3, [r7, #11]
          break;
 800a8b2:	e03b      	b.n	800a92c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8ba:	695b      	ldr	r3, [r3, #20]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d00b      	beq.n	800a8d8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8c6:	695b      	ldr	r3, [r3, #20]
 800a8c8:	687a      	ldr	r2, [r7, #4]
 800a8ca:	7c12      	ldrb	r2, [r2, #16]
 800a8cc:	f107 0108 	add.w	r1, r7, #8
 800a8d0:	4610      	mov	r0, r2
 800a8d2:	4798      	blx	r3
 800a8d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a8d6:	e029      	b.n	800a92c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a8d8:	6839      	ldr	r1, [r7, #0]
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f000 fa63 	bl	800ada6 <USBD_CtlError>
            err++;
 800a8e0:	7afb      	ldrb	r3, [r7, #11]
 800a8e2:	3301      	adds	r3, #1
 800a8e4:	72fb      	strb	r3, [r7, #11]
          break;
 800a8e6:	e021      	b.n	800a92c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8ee:	699b      	ldr	r3, [r3, #24]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d00b      	beq.n	800a90c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8fa:	699b      	ldr	r3, [r3, #24]
 800a8fc:	687a      	ldr	r2, [r7, #4]
 800a8fe:	7c12      	ldrb	r2, [r2, #16]
 800a900:	f107 0108 	add.w	r1, r7, #8
 800a904:	4610      	mov	r0, r2
 800a906:	4798      	blx	r3
 800a908:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a90a:	e00f      	b.n	800a92c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a90c:	6839      	ldr	r1, [r7, #0]
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f000 fa49 	bl	800ada6 <USBD_CtlError>
            err++;
 800a914:	7afb      	ldrb	r3, [r7, #11]
 800a916:	3301      	adds	r3, #1
 800a918:	72fb      	strb	r3, [r7, #11]
          break;
 800a91a:	e007      	b.n	800a92c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a91c:	6839      	ldr	r1, [r7, #0]
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f000 fa41 	bl	800ada6 <USBD_CtlError>
          err++;
 800a924:	7afb      	ldrb	r3, [r7, #11]
 800a926:	3301      	adds	r3, #1
 800a928:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a92a:	bf00      	nop
      }
      break;
 800a92c:	e037      	b.n	800a99e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	7c1b      	ldrb	r3, [r3, #16]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d109      	bne.n	800a94a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a93c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a93e:	f107 0208 	add.w	r2, r7, #8
 800a942:	4610      	mov	r0, r2
 800a944:	4798      	blx	r3
 800a946:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a948:	e029      	b.n	800a99e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a94a:	6839      	ldr	r1, [r7, #0]
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f000 fa2a 	bl	800ada6 <USBD_CtlError>
        err++;
 800a952:	7afb      	ldrb	r3, [r7, #11]
 800a954:	3301      	adds	r3, #1
 800a956:	72fb      	strb	r3, [r7, #11]
      break;
 800a958:	e021      	b.n	800a99e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	7c1b      	ldrb	r3, [r3, #16]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d10d      	bne.n	800a97e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a96a:	f107 0208 	add.w	r2, r7, #8
 800a96e:	4610      	mov	r0, r2
 800a970:	4798      	blx	r3
 800a972:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	3301      	adds	r3, #1
 800a978:	2207      	movs	r2, #7
 800a97a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a97c:	e00f      	b.n	800a99e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a97e:	6839      	ldr	r1, [r7, #0]
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f000 fa10 	bl	800ada6 <USBD_CtlError>
        err++;
 800a986:	7afb      	ldrb	r3, [r7, #11]
 800a988:	3301      	adds	r3, #1
 800a98a:	72fb      	strb	r3, [r7, #11]
      break;
 800a98c:	e007      	b.n	800a99e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a98e:	6839      	ldr	r1, [r7, #0]
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f000 fa08 	bl	800ada6 <USBD_CtlError>
      err++;
 800a996:	7afb      	ldrb	r3, [r7, #11]
 800a998:	3301      	adds	r3, #1
 800a99a:	72fb      	strb	r3, [r7, #11]
      break;
 800a99c:	bf00      	nop
  }

  if (err != 0U)
 800a99e:	7afb      	ldrb	r3, [r7, #11]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d11e      	bne.n	800a9e2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	88db      	ldrh	r3, [r3, #6]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d016      	beq.n	800a9da <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a9ac:	893b      	ldrh	r3, [r7, #8]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d00e      	beq.n	800a9d0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	88da      	ldrh	r2, [r3, #6]
 800a9b6:	893b      	ldrh	r3, [r7, #8]
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	bf28      	it	cs
 800a9bc:	4613      	movcs	r3, r2
 800a9be:	b29b      	uxth	r3, r3
 800a9c0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a9c2:	893b      	ldrh	r3, [r7, #8]
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	68f9      	ldr	r1, [r7, #12]
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f000 fa5d 	bl	800ae88 <USBD_CtlSendData>
 800a9ce:	e009      	b.n	800a9e4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a9d0:	6839      	ldr	r1, [r7, #0]
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f000 f9e7 	bl	800ada6 <USBD_CtlError>
 800a9d8:	e004      	b.n	800a9e4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f000 faae 	bl	800af3c <USBD_CtlSendStatus>
 800a9e0:	e000      	b.n	800a9e4 <USBD_GetDescriptor+0x320>
    return;
 800a9e2:	bf00      	nop
  }
}
 800a9e4:	3710      	adds	r7, #16
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}
 800a9ea:	bf00      	nop

0800a9ec <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b084      	sub	sp, #16
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
 800a9f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	889b      	ldrh	r3, [r3, #4]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d131      	bne.n	800aa62 <USBD_SetAddress+0x76>
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	88db      	ldrh	r3, [r3, #6]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d12d      	bne.n	800aa62 <USBD_SetAddress+0x76>
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	885b      	ldrh	r3, [r3, #2]
 800aa0a:	2b7f      	cmp	r3, #127	; 0x7f
 800aa0c:	d829      	bhi.n	800aa62 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	885b      	ldrh	r3, [r3, #2]
 800aa12:	b2db      	uxtb	r3, r3
 800aa14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa18:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa20:	b2db      	uxtb	r3, r3
 800aa22:	2b03      	cmp	r3, #3
 800aa24:	d104      	bne.n	800aa30 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800aa26:	6839      	ldr	r1, [r7, #0]
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f000 f9bc 	bl	800ada6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa2e:	e01d      	b.n	800aa6c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	7bfa      	ldrb	r2, [r7, #15]
 800aa34:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800aa38:	7bfb      	ldrb	r3, [r7, #15]
 800aa3a:	4619      	mov	r1, r3
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f000 ff07 	bl	800b850 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f000 fa7a 	bl	800af3c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800aa48:	7bfb      	ldrb	r3, [r7, #15]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d004      	beq.n	800aa58 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2202      	movs	r2, #2
 800aa52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa56:	e009      	b.n	800aa6c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa60:	e004      	b.n	800aa6c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800aa62:	6839      	ldr	r1, [r7, #0]
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f000 f99e 	bl	800ada6 <USBD_CtlError>
  }
}
 800aa6a:	bf00      	nop
 800aa6c:	bf00      	nop
 800aa6e:	3710      	adds	r7, #16
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}

0800aa74 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b084      	sub	sp, #16
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	885b      	ldrh	r3, [r3, #2]
 800aa86:	b2da      	uxtb	r2, r3
 800aa88:	4b4e      	ldr	r3, [pc, #312]	; (800abc4 <USBD_SetConfig+0x150>)
 800aa8a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800aa8c:	4b4d      	ldr	r3, [pc, #308]	; (800abc4 <USBD_SetConfig+0x150>)
 800aa8e:	781b      	ldrb	r3, [r3, #0]
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	d905      	bls.n	800aaa0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800aa94:	6839      	ldr	r1, [r7, #0]
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f000 f985 	bl	800ada6 <USBD_CtlError>
    return USBD_FAIL;
 800aa9c:	2303      	movs	r3, #3
 800aa9e:	e08c      	b.n	800abba <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aaa6:	b2db      	uxtb	r3, r3
 800aaa8:	2b02      	cmp	r3, #2
 800aaaa:	d002      	beq.n	800aab2 <USBD_SetConfig+0x3e>
 800aaac:	2b03      	cmp	r3, #3
 800aaae:	d029      	beq.n	800ab04 <USBD_SetConfig+0x90>
 800aab0:	e075      	b.n	800ab9e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800aab2:	4b44      	ldr	r3, [pc, #272]	; (800abc4 <USBD_SetConfig+0x150>)
 800aab4:	781b      	ldrb	r3, [r3, #0]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d020      	beq.n	800aafc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800aaba:	4b42      	ldr	r3, [pc, #264]	; (800abc4 <USBD_SetConfig+0x150>)
 800aabc:	781b      	ldrb	r3, [r3, #0]
 800aabe:	461a      	mov	r2, r3
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aac4:	4b3f      	ldr	r3, [pc, #252]	; (800abc4 <USBD_SetConfig+0x150>)
 800aac6:	781b      	ldrb	r3, [r3, #0]
 800aac8:	4619      	mov	r1, r3
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f7fe ffbd 	bl	8009a4a <USBD_SetClassConfig>
 800aad0:	4603      	mov	r3, r0
 800aad2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800aad4:	7bfb      	ldrb	r3, [r7, #15]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d008      	beq.n	800aaec <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800aada:	6839      	ldr	r1, [r7, #0]
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f000 f962 	bl	800ada6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2202      	movs	r2, #2
 800aae6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aaea:	e065      	b.n	800abb8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 fa25 	bl	800af3c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2203      	movs	r2, #3
 800aaf6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800aafa:	e05d      	b.n	800abb8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f000 fa1d 	bl	800af3c <USBD_CtlSendStatus>
      break;
 800ab02:	e059      	b.n	800abb8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ab04:	4b2f      	ldr	r3, [pc, #188]	; (800abc4 <USBD_SetConfig+0x150>)
 800ab06:	781b      	ldrb	r3, [r3, #0]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d112      	bne.n	800ab32 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2202      	movs	r2, #2
 800ab10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ab14:	4b2b      	ldr	r3, [pc, #172]	; (800abc4 <USBD_SetConfig+0x150>)
 800ab16:	781b      	ldrb	r3, [r3, #0]
 800ab18:	461a      	mov	r2, r3
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ab1e:	4b29      	ldr	r3, [pc, #164]	; (800abc4 <USBD_SetConfig+0x150>)
 800ab20:	781b      	ldrb	r3, [r3, #0]
 800ab22:	4619      	mov	r1, r3
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f7fe ffac 	bl	8009a82 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f000 fa06 	bl	800af3c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ab30:	e042      	b.n	800abb8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ab32:	4b24      	ldr	r3, [pc, #144]	; (800abc4 <USBD_SetConfig+0x150>)
 800ab34:	781b      	ldrb	r3, [r3, #0]
 800ab36:	461a      	mov	r2, r3
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	685b      	ldr	r3, [r3, #4]
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	d02a      	beq.n	800ab96 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	b2db      	uxtb	r3, r3
 800ab46:	4619      	mov	r1, r3
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f7fe ff9a 	bl	8009a82 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ab4e:	4b1d      	ldr	r3, [pc, #116]	; (800abc4 <USBD_SetConfig+0x150>)
 800ab50:	781b      	ldrb	r3, [r3, #0]
 800ab52:	461a      	mov	r2, r3
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ab58:	4b1a      	ldr	r3, [pc, #104]	; (800abc4 <USBD_SetConfig+0x150>)
 800ab5a:	781b      	ldrb	r3, [r3, #0]
 800ab5c:	4619      	mov	r1, r3
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f7fe ff73 	bl	8009a4a <USBD_SetClassConfig>
 800ab64:	4603      	mov	r3, r0
 800ab66:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ab68:	7bfb      	ldrb	r3, [r7, #15]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d00f      	beq.n	800ab8e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ab6e:	6839      	ldr	r1, [r7, #0]
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f000 f918 	bl	800ada6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	685b      	ldr	r3, [r3, #4]
 800ab7a:	b2db      	uxtb	r3, r3
 800ab7c:	4619      	mov	r1, r3
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f7fe ff7f 	bl	8009a82 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2202      	movs	r2, #2
 800ab88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ab8c:	e014      	b.n	800abb8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f000 f9d4 	bl	800af3c <USBD_CtlSendStatus>
      break;
 800ab94:	e010      	b.n	800abb8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f000 f9d0 	bl	800af3c <USBD_CtlSendStatus>
      break;
 800ab9c:	e00c      	b.n	800abb8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ab9e:	6839      	ldr	r1, [r7, #0]
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f000 f900 	bl	800ada6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aba6:	4b07      	ldr	r3, [pc, #28]	; (800abc4 <USBD_SetConfig+0x150>)
 800aba8:	781b      	ldrb	r3, [r3, #0]
 800abaa:	4619      	mov	r1, r3
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	f7fe ff68 	bl	8009a82 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800abb2:	2303      	movs	r3, #3
 800abb4:	73fb      	strb	r3, [r7, #15]
      break;
 800abb6:	bf00      	nop
  }

  return ret;
 800abb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3710      	adds	r7, #16
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}
 800abc2:	bf00      	nop
 800abc4:	20000480 	.word	0x20000480

0800abc8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b082      	sub	sp, #8
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	88db      	ldrh	r3, [r3, #6]
 800abd6:	2b01      	cmp	r3, #1
 800abd8:	d004      	beq.n	800abe4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800abda:	6839      	ldr	r1, [r7, #0]
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f000 f8e2 	bl	800ada6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800abe2:	e023      	b.n	800ac2c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abea:	b2db      	uxtb	r3, r3
 800abec:	2b02      	cmp	r3, #2
 800abee:	dc02      	bgt.n	800abf6 <USBD_GetConfig+0x2e>
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	dc03      	bgt.n	800abfc <USBD_GetConfig+0x34>
 800abf4:	e015      	b.n	800ac22 <USBD_GetConfig+0x5a>
 800abf6:	2b03      	cmp	r3, #3
 800abf8:	d00b      	beq.n	800ac12 <USBD_GetConfig+0x4a>
 800abfa:	e012      	b.n	800ac22 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2200      	movs	r2, #0
 800ac00:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	3308      	adds	r3, #8
 800ac06:	2201      	movs	r2, #1
 800ac08:	4619      	mov	r1, r3
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 f93c 	bl	800ae88 <USBD_CtlSendData>
        break;
 800ac10:	e00c      	b.n	800ac2c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	3304      	adds	r3, #4
 800ac16:	2201      	movs	r2, #1
 800ac18:	4619      	mov	r1, r3
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f000 f934 	bl	800ae88 <USBD_CtlSendData>
        break;
 800ac20:	e004      	b.n	800ac2c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ac22:	6839      	ldr	r1, [r7, #0]
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f000 f8be 	bl	800ada6 <USBD_CtlError>
        break;
 800ac2a:	bf00      	nop
}
 800ac2c:	bf00      	nop
 800ac2e:	3708      	adds	r7, #8
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd80      	pop	{r7, pc}

0800ac34 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b082      	sub	sp, #8
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
 800ac3c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac44:	b2db      	uxtb	r3, r3
 800ac46:	3b01      	subs	r3, #1
 800ac48:	2b02      	cmp	r3, #2
 800ac4a:	d81e      	bhi.n	800ac8a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	88db      	ldrh	r3, [r3, #6]
 800ac50:	2b02      	cmp	r3, #2
 800ac52:	d004      	beq.n	800ac5e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ac54:	6839      	ldr	r1, [r7, #0]
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f000 f8a5 	bl	800ada6 <USBD_CtlError>
        break;
 800ac5c:	e01a      	b.n	800ac94 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2201      	movs	r2, #1
 800ac62:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d005      	beq.n	800ac7a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	68db      	ldr	r3, [r3, #12]
 800ac72:	f043 0202 	orr.w	r2, r3, #2
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	330c      	adds	r3, #12
 800ac7e:	2202      	movs	r2, #2
 800ac80:	4619      	mov	r1, r3
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f000 f900 	bl	800ae88 <USBD_CtlSendData>
      break;
 800ac88:	e004      	b.n	800ac94 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ac8a:	6839      	ldr	r1, [r7, #0]
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f000 f88a 	bl	800ada6 <USBD_CtlError>
      break;
 800ac92:	bf00      	nop
  }
}
 800ac94:	bf00      	nop
 800ac96:	3708      	adds	r7, #8
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}

0800ac9c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b082      	sub	sp, #8
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	885b      	ldrh	r3, [r3, #2]
 800acaa:	2b01      	cmp	r3, #1
 800acac:	d107      	bne.n	800acbe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2201      	movs	r2, #1
 800acb2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f000 f940 	bl	800af3c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800acbc:	e013      	b.n	800ace6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	885b      	ldrh	r3, [r3, #2]
 800acc2:	2b02      	cmp	r3, #2
 800acc4:	d10b      	bne.n	800acde <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	889b      	ldrh	r3, [r3, #4]
 800acca:	0a1b      	lsrs	r3, r3, #8
 800accc:	b29b      	uxth	r3, r3
 800acce:	b2da      	uxtb	r2, r3
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f000 f930 	bl	800af3c <USBD_CtlSendStatus>
}
 800acdc:	e003      	b.n	800ace6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800acde:	6839      	ldr	r1, [r7, #0]
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f000 f860 	bl	800ada6 <USBD_CtlError>
}
 800ace6:	bf00      	nop
 800ace8:	3708      	adds	r7, #8
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}

0800acee <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acee:	b580      	push	{r7, lr}
 800acf0:	b082      	sub	sp, #8
 800acf2:	af00      	add	r7, sp, #0
 800acf4:	6078      	str	r0, [r7, #4]
 800acf6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acfe:	b2db      	uxtb	r3, r3
 800ad00:	3b01      	subs	r3, #1
 800ad02:	2b02      	cmp	r3, #2
 800ad04:	d80b      	bhi.n	800ad1e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	885b      	ldrh	r3, [r3, #2]
 800ad0a:	2b01      	cmp	r3, #1
 800ad0c:	d10c      	bne.n	800ad28 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2200      	movs	r2, #0
 800ad12:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f000 f910 	bl	800af3c <USBD_CtlSendStatus>
      }
      break;
 800ad1c:	e004      	b.n	800ad28 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ad1e:	6839      	ldr	r1, [r7, #0]
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f000 f840 	bl	800ada6 <USBD_CtlError>
      break;
 800ad26:	e000      	b.n	800ad2a <USBD_ClrFeature+0x3c>
      break;
 800ad28:	bf00      	nop
  }
}
 800ad2a:	bf00      	nop
 800ad2c:	3708      	adds	r7, #8
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}

0800ad32 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ad32:	b580      	push	{r7, lr}
 800ad34:	b084      	sub	sp, #16
 800ad36:	af00      	add	r7, sp, #0
 800ad38:	6078      	str	r0, [r7, #4]
 800ad3a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	781a      	ldrb	r2, [r3, #0]
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	3301      	adds	r3, #1
 800ad4c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	781a      	ldrb	r2, [r3, #0]
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	3301      	adds	r3, #1
 800ad5a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ad5c:	68f8      	ldr	r0, [r7, #12]
 800ad5e:	f7ff fa17 	bl	800a190 <SWAPBYTE>
 800ad62:	4603      	mov	r3, r0
 800ad64:	461a      	mov	r2, r3
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	3301      	adds	r3, #1
 800ad6e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	3301      	adds	r3, #1
 800ad74:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ad76:	68f8      	ldr	r0, [r7, #12]
 800ad78:	f7ff fa0a 	bl	800a190 <SWAPBYTE>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	461a      	mov	r2, r3
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	3301      	adds	r3, #1
 800ad88:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	3301      	adds	r3, #1
 800ad8e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ad90:	68f8      	ldr	r0, [r7, #12]
 800ad92:	f7ff f9fd 	bl	800a190 <SWAPBYTE>
 800ad96:	4603      	mov	r3, r0
 800ad98:	461a      	mov	r2, r3
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	80da      	strh	r2, [r3, #6]
}
 800ad9e:	bf00      	nop
 800ada0:	3710      	adds	r7, #16
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}

0800ada6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ada6:	b580      	push	{r7, lr}
 800ada8:	b082      	sub	sp, #8
 800adaa:	af00      	add	r7, sp, #0
 800adac:	6078      	str	r0, [r7, #4]
 800adae:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800adb0:	2180      	movs	r1, #128	; 0x80
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f000 fce2 	bl	800b77c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800adb8:	2100      	movs	r1, #0
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f000 fcde 	bl	800b77c <USBD_LL_StallEP>
}
 800adc0:	bf00      	nop
 800adc2:	3708      	adds	r7, #8
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b086      	sub	sp, #24
 800adcc:	af00      	add	r7, sp, #0
 800adce:	60f8      	str	r0, [r7, #12]
 800add0:	60b9      	str	r1, [r7, #8]
 800add2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800add4:	2300      	movs	r3, #0
 800add6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d036      	beq.n	800ae4c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ade2:	6938      	ldr	r0, [r7, #16]
 800ade4:	f000 f836 	bl	800ae54 <USBD_GetLen>
 800ade8:	4603      	mov	r3, r0
 800adea:	3301      	adds	r3, #1
 800adec:	b29b      	uxth	r3, r3
 800adee:	005b      	lsls	r3, r3, #1
 800adf0:	b29a      	uxth	r2, r3
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800adf6:	7dfb      	ldrb	r3, [r7, #23]
 800adf8:	68ba      	ldr	r2, [r7, #8]
 800adfa:	4413      	add	r3, r2
 800adfc:	687a      	ldr	r2, [r7, #4]
 800adfe:	7812      	ldrb	r2, [r2, #0]
 800ae00:	701a      	strb	r2, [r3, #0]
  idx++;
 800ae02:	7dfb      	ldrb	r3, [r7, #23]
 800ae04:	3301      	adds	r3, #1
 800ae06:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ae08:	7dfb      	ldrb	r3, [r7, #23]
 800ae0a:	68ba      	ldr	r2, [r7, #8]
 800ae0c:	4413      	add	r3, r2
 800ae0e:	2203      	movs	r2, #3
 800ae10:	701a      	strb	r2, [r3, #0]
  idx++;
 800ae12:	7dfb      	ldrb	r3, [r7, #23]
 800ae14:	3301      	adds	r3, #1
 800ae16:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ae18:	e013      	b.n	800ae42 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ae1a:	7dfb      	ldrb	r3, [r7, #23]
 800ae1c:	68ba      	ldr	r2, [r7, #8]
 800ae1e:	4413      	add	r3, r2
 800ae20:	693a      	ldr	r2, [r7, #16]
 800ae22:	7812      	ldrb	r2, [r2, #0]
 800ae24:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ae26:	693b      	ldr	r3, [r7, #16]
 800ae28:	3301      	adds	r3, #1
 800ae2a:	613b      	str	r3, [r7, #16]
    idx++;
 800ae2c:	7dfb      	ldrb	r3, [r7, #23]
 800ae2e:	3301      	adds	r3, #1
 800ae30:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ae32:	7dfb      	ldrb	r3, [r7, #23]
 800ae34:	68ba      	ldr	r2, [r7, #8]
 800ae36:	4413      	add	r3, r2
 800ae38:	2200      	movs	r2, #0
 800ae3a:	701a      	strb	r2, [r3, #0]
    idx++;
 800ae3c:	7dfb      	ldrb	r3, [r7, #23]
 800ae3e:	3301      	adds	r3, #1
 800ae40:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ae42:	693b      	ldr	r3, [r7, #16]
 800ae44:	781b      	ldrb	r3, [r3, #0]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d1e7      	bne.n	800ae1a <USBD_GetString+0x52>
 800ae4a:	e000      	b.n	800ae4e <USBD_GetString+0x86>
    return;
 800ae4c:	bf00      	nop
  }
}
 800ae4e:	3718      	adds	r7, #24
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ae54:	b480      	push	{r7}
 800ae56:	b085      	sub	sp, #20
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ae64:	e005      	b.n	800ae72 <USBD_GetLen+0x1e>
  {
    len++;
 800ae66:	7bfb      	ldrb	r3, [r7, #15]
 800ae68:	3301      	adds	r3, #1
 800ae6a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	3301      	adds	r3, #1
 800ae70:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	781b      	ldrb	r3, [r3, #0]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d1f5      	bne.n	800ae66 <USBD_GetLen+0x12>
  }

  return len;
 800ae7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	3714      	adds	r7, #20
 800ae80:	46bd      	mov	sp, r7
 800ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae86:	4770      	bx	lr

0800ae88 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b084      	sub	sp, #16
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	60f8      	str	r0, [r7, #12]
 800ae90:	60b9      	str	r1, [r7, #8]
 800ae92:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	2202      	movs	r2, #2
 800ae98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	687a      	ldr	r2, [r7, #4]
 800aea0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	687a      	ldr	r2, [r7, #4]
 800aea6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	68ba      	ldr	r2, [r7, #8]
 800aeac:	2100      	movs	r1, #0
 800aeae:	68f8      	ldr	r0, [r7, #12]
 800aeb0:	f000 fced 	bl	800b88e <USBD_LL_Transmit>

  return USBD_OK;
 800aeb4:	2300      	movs	r3, #0
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3710      	adds	r7, #16
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}

0800aebe <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800aebe:	b580      	push	{r7, lr}
 800aec0:	b084      	sub	sp, #16
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	60f8      	str	r0, [r7, #12]
 800aec6:	60b9      	str	r1, [r7, #8]
 800aec8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	68ba      	ldr	r2, [r7, #8]
 800aece:	2100      	movs	r1, #0
 800aed0:	68f8      	ldr	r0, [r7, #12]
 800aed2:	f000 fcdc 	bl	800b88e <USBD_LL_Transmit>

  return USBD_OK;
 800aed6:	2300      	movs	r3, #0
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	3710      	adds	r7, #16
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}

0800aee0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b084      	sub	sp, #16
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	60f8      	str	r0, [r7, #12]
 800aee8:	60b9      	str	r1, [r7, #8]
 800aeea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	2203      	movs	r2, #3
 800aef0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	687a      	ldr	r2, [r7, #4]
 800aef8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	687a      	ldr	r2, [r7, #4]
 800af00:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	68ba      	ldr	r2, [r7, #8]
 800af08:	2100      	movs	r1, #0
 800af0a:	68f8      	ldr	r0, [r7, #12]
 800af0c:	f000 fce0 	bl	800b8d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800af10:	2300      	movs	r3, #0
}
 800af12:	4618      	mov	r0, r3
 800af14:	3710      	adds	r7, #16
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}

0800af1a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800af1a:	b580      	push	{r7, lr}
 800af1c:	b084      	sub	sp, #16
 800af1e:	af00      	add	r7, sp, #0
 800af20:	60f8      	str	r0, [r7, #12]
 800af22:	60b9      	str	r1, [r7, #8]
 800af24:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	68ba      	ldr	r2, [r7, #8]
 800af2a:	2100      	movs	r1, #0
 800af2c:	68f8      	ldr	r0, [r7, #12]
 800af2e:	f000 fccf 	bl	800b8d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800af32:	2300      	movs	r3, #0
}
 800af34:	4618      	mov	r0, r3
 800af36:	3710      	adds	r7, #16
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2204      	movs	r2, #4
 800af48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800af4c:	2300      	movs	r3, #0
 800af4e:	2200      	movs	r2, #0
 800af50:	2100      	movs	r1, #0
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f000 fc9b 	bl	800b88e <USBD_LL_Transmit>

  return USBD_OK;
 800af58:	2300      	movs	r3, #0
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3708      	adds	r7, #8
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}

0800af62 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800af62:	b580      	push	{r7, lr}
 800af64:	b082      	sub	sp, #8
 800af66:	af00      	add	r7, sp, #0
 800af68:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2205      	movs	r2, #5
 800af6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800af72:	2300      	movs	r3, #0
 800af74:	2200      	movs	r2, #0
 800af76:	2100      	movs	r1, #0
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f000 fca9 	bl	800b8d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800af7e:	2300      	movs	r3, #0
}
 800af80:	4618      	mov	r0, r3
 800af82:	3708      	adds	r7, #8
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}

0800af88 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800af8c:	2200      	movs	r2, #0
 800af8e:	4912      	ldr	r1, [pc, #72]	; (800afd8 <MX_USB_DEVICE_Init+0x50>)
 800af90:	4812      	ldr	r0, [pc, #72]	; (800afdc <MX_USB_DEVICE_Init+0x54>)
 800af92:	f7fe fcdd 	bl	8009950 <USBD_Init>
 800af96:	4603      	mov	r3, r0
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d001      	beq.n	800afa0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800af9c:	f7f6 faf2 	bl	8001584 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800afa0:	490f      	ldr	r1, [pc, #60]	; (800afe0 <MX_USB_DEVICE_Init+0x58>)
 800afa2:	480e      	ldr	r0, [pc, #56]	; (800afdc <MX_USB_DEVICE_Init+0x54>)
 800afa4:	f7fe fd04 	bl	80099b0 <USBD_RegisterClass>
 800afa8:	4603      	mov	r3, r0
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d001      	beq.n	800afb2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800afae:	f7f6 fae9 	bl	8001584 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800afb2:	490c      	ldr	r1, [pc, #48]	; (800afe4 <MX_USB_DEVICE_Init+0x5c>)
 800afb4:	4809      	ldr	r0, [pc, #36]	; (800afdc <MX_USB_DEVICE_Init+0x54>)
 800afb6:	f7fe fc3b 	bl	8009830 <USBD_CDC_RegisterInterface>
 800afba:	4603      	mov	r3, r0
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d001      	beq.n	800afc4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800afc0:	f7f6 fae0 	bl	8001584 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800afc4:	4805      	ldr	r0, [pc, #20]	; (800afdc <MX_USB_DEVICE_Init+0x54>)
 800afc6:	f7fe fd29 	bl	8009a1c <USBD_Start>
 800afca:	4603      	mov	r3, r0
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d001      	beq.n	800afd4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800afd0:	f7f6 fad8 	bl	8001584 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800afd4:	bf00      	nop
 800afd6:	bd80      	pop	{r7, pc}
 800afd8:	200000bc 	.word	0x200000bc
 800afdc:	20000484 	.word	0x20000484
 800afe0:	20000028 	.word	0x20000028
 800afe4:	200000a8 	.word	0x200000a8

0800afe8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800afec:	2200      	movs	r2, #0
 800afee:	4905      	ldr	r1, [pc, #20]	; (800b004 <CDC_Init_FS+0x1c>)
 800aff0:	4805      	ldr	r0, [pc, #20]	; (800b008 <CDC_Init_FS+0x20>)
 800aff2:	f7fe fc37 	bl	8009864 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800aff6:	4905      	ldr	r1, [pc, #20]	; (800b00c <CDC_Init_FS+0x24>)
 800aff8:	4803      	ldr	r0, [pc, #12]	; (800b008 <CDC_Init_FS+0x20>)
 800affa:	f7fe fc55 	bl	80098a8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800affe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b000:	4618      	mov	r0, r3
 800b002:	bd80      	pop	{r7, pc}
 800b004:	20000f60 	.word	0x20000f60
 800b008:	20000484 	.word	0x20000484
 800b00c:	20000760 	.word	0x20000760

0800b010 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b010:	b480      	push	{r7}
 800b012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b014:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b016:	4618      	mov	r0, r3
 800b018:	46bd      	mov	sp, r7
 800b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01e:	4770      	bx	lr

0800b020 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b020:	b480      	push	{r7}
 800b022:	b083      	sub	sp, #12
 800b024:	af00      	add	r7, sp, #0
 800b026:	4603      	mov	r3, r0
 800b028:	6039      	str	r1, [r7, #0]
 800b02a:	71fb      	strb	r3, [r7, #7]
 800b02c:	4613      	mov	r3, r2
 800b02e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b030:	79fb      	ldrb	r3, [r7, #7]
 800b032:	2b23      	cmp	r3, #35	; 0x23
 800b034:	d84a      	bhi.n	800b0cc <CDC_Control_FS+0xac>
 800b036:	a201      	add	r2, pc, #4	; (adr r2, 800b03c <CDC_Control_FS+0x1c>)
 800b038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b03c:	0800b0cd 	.word	0x0800b0cd
 800b040:	0800b0cd 	.word	0x0800b0cd
 800b044:	0800b0cd 	.word	0x0800b0cd
 800b048:	0800b0cd 	.word	0x0800b0cd
 800b04c:	0800b0cd 	.word	0x0800b0cd
 800b050:	0800b0cd 	.word	0x0800b0cd
 800b054:	0800b0cd 	.word	0x0800b0cd
 800b058:	0800b0cd 	.word	0x0800b0cd
 800b05c:	0800b0cd 	.word	0x0800b0cd
 800b060:	0800b0cd 	.word	0x0800b0cd
 800b064:	0800b0cd 	.word	0x0800b0cd
 800b068:	0800b0cd 	.word	0x0800b0cd
 800b06c:	0800b0cd 	.word	0x0800b0cd
 800b070:	0800b0cd 	.word	0x0800b0cd
 800b074:	0800b0cd 	.word	0x0800b0cd
 800b078:	0800b0cd 	.word	0x0800b0cd
 800b07c:	0800b0cd 	.word	0x0800b0cd
 800b080:	0800b0cd 	.word	0x0800b0cd
 800b084:	0800b0cd 	.word	0x0800b0cd
 800b088:	0800b0cd 	.word	0x0800b0cd
 800b08c:	0800b0cd 	.word	0x0800b0cd
 800b090:	0800b0cd 	.word	0x0800b0cd
 800b094:	0800b0cd 	.word	0x0800b0cd
 800b098:	0800b0cd 	.word	0x0800b0cd
 800b09c:	0800b0cd 	.word	0x0800b0cd
 800b0a0:	0800b0cd 	.word	0x0800b0cd
 800b0a4:	0800b0cd 	.word	0x0800b0cd
 800b0a8:	0800b0cd 	.word	0x0800b0cd
 800b0ac:	0800b0cd 	.word	0x0800b0cd
 800b0b0:	0800b0cd 	.word	0x0800b0cd
 800b0b4:	0800b0cd 	.word	0x0800b0cd
 800b0b8:	0800b0cd 	.word	0x0800b0cd
 800b0bc:	0800b0cd 	.word	0x0800b0cd
 800b0c0:	0800b0cd 	.word	0x0800b0cd
 800b0c4:	0800b0cd 	.word	0x0800b0cd
 800b0c8:	0800b0cd 	.word	0x0800b0cd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b0cc:	bf00      	nop
  }

  return (USBD_OK);
 800b0ce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	370c      	adds	r7, #12
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0da:	4770      	bx	lr

0800b0dc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b082      	sub	sp, #8
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
 800b0e4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b0e6:	6879      	ldr	r1, [r7, #4]
 800b0e8:	4805      	ldr	r0, [pc, #20]	; (800b100 <CDC_Receive_FS+0x24>)
 800b0ea:	f7fe fbdd 	bl	80098a8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b0ee:	4804      	ldr	r0, [pc, #16]	; (800b100 <CDC_Receive_FS+0x24>)
 800b0f0:	f7fe fbf8 	bl	80098e4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b0f4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3708      	adds	r7, #8
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}
 800b0fe:	bf00      	nop
 800b100:	20000484 	.word	0x20000484

0800b104 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b104:	b480      	push	{r7}
 800b106:	b087      	sub	sp, #28
 800b108:	af00      	add	r7, sp, #0
 800b10a:	60f8      	str	r0, [r7, #12]
 800b10c:	60b9      	str	r1, [r7, #8]
 800b10e:	4613      	mov	r3, r2
 800b110:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b112:	2300      	movs	r3, #0
 800b114:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b116:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	371c      	adds	r7, #28
 800b11e:	46bd      	mov	sp, r7
 800b120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b124:	4770      	bx	lr
	...

0800b128 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b128:	b480      	push	{r7}
 800b12a:	b083      	sub	sp, #12
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	4603      	mov	r3, r0
 800b130:	6039      	str	r1, [r7, #0]
 800b132:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	2212      	movs	r2, #18
 800b138:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b13a:	4b03      	ldr	r3, [pc, #12]	; (800b148 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	370c      	adds	r7, #12
 800b140:	46bd      	mov	sp, r7
 800b142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b146:	4770      	bx	lr
 800b148:	200000dc 	.word	0x200000dc

0800b14c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b14c:	b480      	push	{r7}
 800b14e:	b083      	sub	sp, #12
 800b150:	af00      	add	r7, sp, #0
 800b152:	4603      	mov	r3, r0
 800b154:	6039      	str	r1, [r7, #0]
 800b156:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	2204      	movs	r2, #4
 800b15c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b15e:	4b03      	ldr	r3, [pc, #12]	; (800b16c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b160:	4618      	mov	r0, r3
 800b162:	370c      	adds	r7, #12
 800b164:	46bd      	mov	sp, r7
 800b166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16a:	4770      	bx	lr
 800b16c:	200000fc 	.word	0x200000fc

0800b170 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b082      	sub	sp, #8
 800b174:	af00      	add	r7, sp, #0
 800b176:	4603      	mov	r3, r0
 800b178:	6039      	str	r1, [r7, #0]
 800b17a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b17c:	79fb      	ldrb	r3, [r7, #7]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d105      	bne.n	800b18e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b182:	683a      	ldr	r2, [r7, #0]
 800b184:	4907      	ldr	r1, [pc, #28]	; (800b1a4 <USBD_FS_ProductStrDescriptor+0x34>)
 800b186:	4808      	ldr	r0, [pc, #32]	; (800b1a8 <USBD_FS_ProductStrDescriptor+0x38>)
 800b188:	f7ff fe1e 	bl	800adc8 <USBD_GetString>
 800b18c:	e004      	b.n	800b198 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b18e:	683a      	ldr	r2, [r7, #0]
 800b190:	4904      	ldr	r1, [pc, #16]	; (800b1a4 <USBD_FS_ProductStrDescriptor+0x34>)
 800b192:	4805      	ldr	r0, [pc, #20]	; (800b1a8 <USBD_FS_ProductStrDescriptor+0x38>)
 800b194:	f7ff fe18 	bl	800adc8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b198:	4b02      	ldr	r3, [pc, #8]	; (800b1a4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3708      	adds	r7, #8
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
 800b1a2:	bf00      	nop
 800b1a4:	20001760 	.word	0x20001760
 800b1a8:	08010478 	.word	0x08010478

0800b1ac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b082      	sub	sp, #8
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	6039      	str	r1, [r7, #0]
 800b1b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b1b8:	683a      	ldr	r2, [r7, #0]
 800b1ba:	4904      	ldr	r1, [pc, #16]	; (800b1cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b1bc:	4804      	ldr	r0, [pc, #16]	; (800b1d0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b1be:	f7ff fe03 	bl	800adc8 <USBD_GetString>
  return USBD_StrDesc;
 800b1c2:	4b02      	ldr	r3, [pc, #8]	; (800b1cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3708      	adds	r7, #8
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}
 800b1cc:	20001760 	.word	0x20001760
 800b1d0:	08010490 	.word	0x08010490

0800b1d4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b082      	sub	sp, #8
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	4603      	mov	r3, r0
 800b1dc:	6039      	str	r1, [r7, #0]
 800b1de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	221a      	movs	r2, #26
 800b1e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b1e6:	f000 f855 	bl	800b294 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b1ea:	4b02      	ldr	r3, [pc, #8]	; (800b1f4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	3708      	adds	r7, #8
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}
 800b1f4:	20000100 	.word	0x20000100

0800b1f8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b082      	sub	sp, #8
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	4603      	mov	r3, r0
 800b200:	6039      	str	r1, [r7, #0]
 800b202:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b204:	79fb      	ldrb	r3, [r7, #7]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d105      	bne.n	800b216 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b20a:	683a      	ldr	r2, [r7, #0]
 800b20c:	4907      	ldr	r1, [pc, #28]	; (800b22c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b20e:	4808      	ldr	r0, [pc, #32]	; (800b230 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b210:	f7ff fdda 	bl	800adc8 <USBD_GetString>
 800b214:	e004      	b.n	800b220 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b216:	683a      	ldr	r2, [r7, #0]
 800b218:	4904      	ldr	r1, [pc, #16]	; (800b22c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b21a:	4805      	ldr	r0, [pc, #20]	; (800b230 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b21c:	f7ff fdd4 	bl	800adc8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b220:	4b02      	ldr	r3, [pc, #8]	; (800b22c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b222:	4618      	mov	r0, r3
 800b224:	3708      	adds	r7, #8
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}
 800b22a:	bf00      	nop
 800b22c:	20001760 	.word	0x20001760
 800b230:	080104a4 	.word	0x080104a4

0800b234 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b082      	sub	sp, #8
 800b238:	af00      	add	r7, sp, #0
 800b23a:	4603      	mov	r3, r0
 800b23c:	6039      	str	r1, [r7, #0]
 800b23e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b240:	79fb      	ldrb	r3, [r7, #7]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d105      	bne.n	800b252 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b246:	683a      	ldr	r2, [r7, #0]
 800b248:	4907      	ldr	r1, [pc, #28]	; (800b268 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b24a:	4808      	ldr	r0, [pc, #32]	; (800b26c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b24c:	f7ff fdbc 	bl	800adc8 <USBD_GetString>
 800b250:	e004      	b.n	800b25c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b252:	683a      	ldr	r2, [r7, #0]
 800b254:	4904      	ldr	r1, [pc, #16]	; (800b268 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b256:	4805      	ldr	r0, [pc, #20]	; (800b26c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b258:	f7ff fdb6 	bl	800adc8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b25c:	4b02      	ldr	r3, [pc, #8]	; (800b268 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3708      	adds	r7, #8
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}
 800b266:	bf00      	nop
 800b268:	20001760 	.word	0x20001760
 800b26c:	080104b0 	.word	0x080104b0

0800b270 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b270:	b480      	push	{r7}
 800b272:	b083      	sub	sp, #12
 800b274:	af00      	add	r7, sp, #0
 800b276:	4603      	mov	r3, r0
 800b278:	6039      	str	r1, [r7, #0]
 800b27a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	220c      	movs	r2, #12
 800b280:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b282:	4b03      	ldr	r3, [pc, #12]	; (800b290 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b284:	4618      	mov	r0, r3
 800b286:	370c      	adds	r7, #12
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr
 800b290:	200000f0 	.word	0x200000f0

0800b294 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b084      	sub	sp, #16
 800b298:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b29a:	4b0f      	ldr	r3, [pc, #60]	; (800b2d8 <Get_SerialNum+0x44>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b2a0:	4b0e      	ldr	r3, [pc, #56]	; (800b2dc <Get_SerialNum+0x48>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b2a6:	4b0e      	ldr	r3, [pc, #56]	; (800b2e0 <Get_SerialNum+0x4c>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b2ac:	68fa      	ldr	r2, [r7, #12]
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	4413      	add	r3, r2
 800b2b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d009      	beq.n	800b2ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b2ba:	2208      	movs	r2, #8
 800b2bc:	4909      	ldr	r1, [pc, #36]	; (800b2e4 <Get_SerialNum+0x50>)
 800b2be:	68f8      	ldr	r0, [r7, #12]
 800b2c0:	f000 f814 	bl	800b2ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b2c4:	2204      	movs	r2, #4
 800b2c6:	4908      	ldr	r1, [pc, #32]	; (800b2e8 <Get_SerialNum+0x54>)
 800b2c8:	68b8      	ldr	r0, [r7, #8]
 800b2ca:	f000 f80f 	bl	800b2ec <IntToUnicode>
  }
}
 800b2ce:	bf00      	nop
 800b2d0:	3710      	adds	r7, #16
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}
 800b2d6:	bf00      	nop
 800b2d8:	1fff7a10 	.word	0x1fff7a10
 800b2dc:	1fff7a14 	.word	0x1fff7a14
 800b2e0:	1fff7a18 	.word	0x1fff7a18
 800b2e4:	20000102 	.word	0x20000102
 800b2e8:	20000112 	.word	0x20000112

0800b2ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b087      	sub	sp, #28
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	60f8      	str	r0, [r7, #12]
 800b2f4:	60b9      	str	r1, [r7, #8]
 800b2f6:	4613      	mov	r3, r2
 800b2f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b2fe:	2300      	movs	r3, #0
 800b300:	75fb      	strb	r3, [r7, #23]
 800b302:	e027      	b.n	800b354 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	0f1b      	lsrs	r3, r3, #28
 800b308:	2b09      	cmp	r3, #9
 800b30a:	d80b      	bhi.n	800b324 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	0f1b      	lsrs	r3, r3, #28
 800b310:	b2da      	uxtb	r2, r3
 800b312:	7dfb      	ldrb	r3, [r7, #23]
 800b314:	005b      	lsls	r3, r3, #1
 800b316:	4619      	mov	r1, r3
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	440b      	add	r3, r1
 800b31c:	3230      	adds	r2, #48	; 0x30
 800b31e:	b2d2      	uxtb	r2, r2
 800b320:	701a      	strb	r2, [r3, #0]
 800b322:	e00a      	b.n	800b33a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	0f1b      	lsrs	r3, r3, #28
 800b328:	b2da      	uxtb	r2, r3
 800b32a:	7dfb      	ldrb	r3, [r7, #23]
 800b32c:	005b      	lsls	r3, r3, #1
 800b32e:	4619      	mov	r1, r3
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	440b      	add	r3, r1
 800b334:	3237      	adds	r2, #55	; 0x37
 800b336:	b2d2      	uxtb	r2, r2
 800b338:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	011b      	lsls	r3, r3, #4
 800b33e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b340:	7dfb      	ldrb	r3, [r7, #23]
 800b342:	005b      	lsls	r3, r3, #1
 800b344:	3301      	adds	r3, #1
 800b346:	68ba      	ldr	r2, [r7, #8]
 800b348:	4413      	add	r3, r2
 800b34a:	2200      	movs	r2, #0
 800b34c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b34e:	7dfb      	ldrb	r3, [r7, #23]
 800b350:	3301      	adds	r3, #1
 800b352:	75fb      	strb	r3, [r7, #23]
 800b354:	7dfa      	ldrb	r2, [r7, #23]
 800b356:	79fb      	ldrb	r3, [r7, #7]
 800b358:	429a      	cmp	r2, r3
 800b35a:	d3d3      	bcc.n	800b304 <IntToUnicode+0x18>
  }
}
 800b35c:	bf00      	nop
 800b35e:	bf00      	nop
 800b360:	371c      	adds	r7, #28
 800b362:	46bd      	mov	sp, r7
 800b364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b368:	4770      	bx	lr
	...

0800b36c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b0a0      	sub	sp, #128	; 0x80
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b374:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800b378:	2200      	movs	r2, #0
 800b37a:	601a      	str	r2, [r3, #0]
 800b37c:	605a      	str	r2, [r3, #4]
 800b37e:	609a      	str	r2, [r3, #8]
 800b380:	60da      	str	r2, [r3, #12]
 800b382:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b384:	f107 0310 	add.w	r3, r7, #16
 800b388:	225c      	movs	r2, #92	; 0x5c
 800b38a:	2100      	movs	r1, #0
 800b38c:	4618      	mov	r0, r3
 800b38e:	f000 fba9 	bl	800bae4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b39a:	d149      	bne.n	800b430 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800b39c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b3a0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b3a6:	f107 0310 	add.w	r3, r7, #16
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f7f8 fed8 	bl	8004160 <HAL_RCCEx_PeriphCLKConfig>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d001      	beq.n	800b3ba <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800b3b6:	f7f6 f8e5 	bl	8001584 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	60fb      	str	r3, [r7, #12]
 800b3be:	4b1e      	ldr	r3, [pc, #120]	; (800b438 <HAL_PCD_MspInit+0xcc>)
 800b3c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3c2:	4a1d      	ldr	r2, [pc, #116]	; (800b438 <HAL_PCD_MspInit+0xcc>)
 800b3c4:	f043 0301 	orr.w	r3, r3, #1
 800b3c8:	6313      	str	r3, [r2, #48]	; 0x30
 800b3ca:	4b1b      	ldr	r3, [pc, #108]	; (800b438 <HAL_PCD_MspInit+0xcc>)
 800b3cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3ce:	f003 0301 	and.w	r3, r3, #1
 800b3d2:	60fb      	str	r3, [r7, #12]
 800b3d4:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b3d6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b3da:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b3dc:	2302      	movs	r3, #2
 800b3de:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b3e4:	2303      	movs	r3, #3
 800b3e6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b3e8:	230a      	movs	r3, #10
 800b3ea:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b3ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800b3f0:	4619      	mov	r1, r3
 800b3f2:	4812      	ldr	r0, [pc, #72]	; (800b43c <HAL_PCD_MspInit+0xd0>)
 800b3f4:	f7f7 f90c 	bl	8002610 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b3f8:	4b0f      	ldr	r3, [pc, #60]	; (800b438 <HAL_PCD_MspInit+0xcc>)
 800b3fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3fc:	4a0e      	ldr	r2, [pc, #56]	; (800b438 <HAL_PCD_MspInit+0xcc>)
 800b3fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b402:	6353      	str	r3, [r2, #52]	; 0x34
 800b404:	2300      	movs	r3, #0
 800b406:	60bb      	str	r3, [r7, #8]
 800b408:	4b0b      	ldr	r3, [pc, #44]	; (800b438 <HAL_PCD_MspInit+0xcc>)
 800b40a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b40c:	4a0a      	ldr	r2, [pc, #40]	; (800b438 <HAL_PCD_MspInit+0xcc>)
 800b40e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b412:	6453      	str	r3, [r2, #68]	; 0x44
 800b414:	4b08      	ldr	r3, [pc, #32]	; (800b438 <HAL_PCD_MspInit+0xcc>)
 800b416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b418:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b41c:	60bb      	str	r3, [r7, #8]
 800b41e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b420:	2200      	movs	r2, #0
 800b422:	2100      	movs	r1, #0
 800b424:	2043      	movs	r0, #67	; 0x43
 800b426:	f7f6 fcba 	bl	8001d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b42a:	2043      	movs	r0, #67	; 0x43
 800b42c:	f7f6 fcd3 	bl	8001dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b430:	bf00      	nop
 800b432:	3780      	adds	r7, #128	; 0x80
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}
 800b438:	40023800 	.word	0x40023800
 800b43c:	40020000 	.word	0x40020000

0800b440 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b082      	sub	sp, #8
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b454:	4619      	mov	r1, r3
 800b456:	4610      	mov	r0, r2
 800b458:	f7fe fb2d 	bl	8009ab6 <USBD_LL_SetupStage>
}
 800b45c:	bf00      	nop
 800b45e:	3708      	adds	r7, #8
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}

0800b464 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b082      	sub	sp, #8
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	460b      	mov	r3, r1
 800b46e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b476:	78fa      	ldrb	r2, [r7, #3]
 800b478:	6879      	ldr	r1, [r7, #4]
 800b47a:	4613      	mov	r3, r2
 800b47c:	00db      	lsls	r3, r3, #3
 800b47e:	4413      	add	r3, r2
 800b480:	009b      	lsls	r3, r3, #2
 800b482:	440b      	add	r3, r1
 800b484:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b488:	681a      	ldr	r2, [r3, #0]
 800b48a:	78fb      	ldrb	r3, [r7, #3]
 800b48c:	4619      	mov	r1, r3
 800b48e:	f7fe fb67 	bl	8009b60 <USBD_LL_DataOutStage>
}
 800b492:	bf00      	nop
 800b494:	3708      	adds	r7, #8
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}

0800b49a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b49a:	b580      	push	{r7, lr}
 800b49c:	b082      	sub	sp, #8
 800b49e:	af00      	add	r7, sp, #0
 800b4a0:	6078      	str	r0, [r7, #4]
 800b4a2:	460b      	mov	r3, r1
 800b4a4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b4ac:	78fa      	ldrb	r2, [r7, #3]
 800b4ae:	6879      	ldr	r1, [r7, #4]
 800b4b0:	4613      	mov	r3, r2
 800b4b2:	00db      	lsls	r3, r3, #3
 800b4b4:	4413      	add	r3, r2
 800b4b6:	009b      	lsls	r3, r3, #2
 800b4b8:	440b      	add	r3, r1
 800b4ba:	334c      	adds	r3, #76	; 0x4c
 800b4bc:	681a      	ldr	r2, [r3, #0]
 800b4be:	78fb      	ldrb	r3, [r7, #3]
 800b4c0:	4619      	mov	r1, r3
 800b4c2:	f7fe fc00 	bl	8009cc6 <USBD_LL_DataInStage>
}
 800b4c6:	bf00      	nop
 800b4c8:	3708      	adds	r7, #8
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}

0800b4ce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4ce:	b580      	push	{r7, lr}
 800b4d0:	b082      	sub	sp, #8
 800b4d2:	af00      	add	r7, sp, #0
 800b4d4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f7fe fd34 	bl	8009f4a <USBD_LL_SOF>
}
 800b4e2:	bf00      	nop
 800b4e4:	3708      	adds	r7, #8
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}

0800b4ea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4ea:	b580      	push	{r7, lr}
 800b4ec:	b084      	sub	sp, #16
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	68db      	ldr	r3, [r3, #12]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d102      	bne.n	800b504 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b4fe:	2300      	movs	r3, #0
 800b500:	73fb      	strb	r3, [r7, #15]
 800b502:	e008      	b.n	800b516 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	68db      	ldr	r3, [r3, #12]
 800b508:	2b02      	cmp	r3, #2
 800b50a:	d102      	bne.n	800b512 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b50c:	2301      	movs	r3, #1
 800b50e:	73fb      	strb	r3, [r7, #15]
 800b510:	e001      	b.n	800b516 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b512:	f7f6 f837 	bl	8001584 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b51c:	7bfa      	ldrb	r2, [r7, #15]
 800b51e:	4611      	mov	r1, r2
 800b520:	4618      	mov	r0, r3
 800b522:	f7fe fcd4 	bl	8009ece <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b52c:	4618      	mov	r0, r3
 800b52e:	f7fe fc7c 	bl	8009e2a <USBD_LL_Reset>
}
 800b532:	bf00      	nop
 800b534:	3710      	adds	r7, #16
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}
	...

0800b53c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b082      	sub	sp, #8
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b54a:	4618      	mov	r0, r3
 800b54c:	f7fe fccf 	bl	8009eee <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	687a      	ldr	r2, [r7, #4]
 800b55c:	6812      	ldr	r2, [r2, #0]
 800b55e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b562:	f043 0301 	orr.w	r3, r3, #1
 800b566:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6a1b      	ldr	r3, [r3, #32]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d005      	beq.n	800b57c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b570:	4b04      	ldr	r3, [pc, #16]	; (800b584 <HAL_PCD_SuspendCallback+0x48>)
 800b572:	691b      	ldr	r3, [r3, #16]
 800b574:	4a03      	ldr	r2, [pc, #12]	; (800b584 <HAL_PCD_SuspendCallback+0x48>)
 800b576:	f043 0306 	orr.w	r3, r3, #6
 800b57a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b57c:	bf00      	nop
 800b57e:	3708      	adds	r7, #8
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}
 800b584:	e000ed00 	.word	0xe000ed00

0800b588 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b082      	sub	sp, #8
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b596:	4618      	mov	r0, r3
 800b598:	f7fe fcbf 	bl	8009f1a <USBD_LL_Resume>
}
 800b59c:	bf00      	nop
 800b59e:	3708      	adds	r7, #8
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}

0800b5a4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b082      	sub	sp, #8
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	460b      	mov	r3, r1
 800b5ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b5b6:	78fa      	ldrb	r2, [r7, #3]
 800b5b8:	4611      	mov	r1, r2
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f7fe fd17 	bl	8009fee <USBD_LL_IsoOUTIncomplete>
}
 800b5c0:	bf00      	nop
 800b5c2:	3708      	adds	r7, #8
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}

0800b5c8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b082      	sub	sp, #8
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
 800b5d0:	460b      	mov	r3, r1
 800b5d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b5da:	78fa      	ldrb	r2, [r7, #3]
 800b5dc:	4611      	mov	r1, r2
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f7fe fcd3 	bl	8009f8a <USBD_LL_IsoINIncomplete>
}
 800b5e4:	bf00      	nop
 800b5e6:	3708      	adds	r7, #8
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}

0800b5ec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b082      	sub	sp, #8
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f7fe fd29 	bl	800a052 <USBD_LL_DevConnected>
}
 800b600:	bf00      	nop
 800b602:	3708      	adds	r7, #8
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}

0800b608 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b082      	sub	sp, #8
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b616:	4618      	mov	r0, r3
 800b618:	f7fe fd26 	bl	800a068 <USBD_LL_DevDisconnected>
}
 800b61c:	bf00      	nop
 800b61e:	3708      	adds	r7, #8
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}

0800b624 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b082      	sub	sp, #8
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	781b      	ldrb	r3, [r3, #0]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d13c      	bne.n	800b6ae <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b634:	4a20      	ldr	r2, [pc, #128]	; (800b6b8 <USBD_LL_Init+0x94>)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	4a1e      	ldr	r2, [pc, #120]	; (800b6b8 <USBD_LL_Init+0x94>)
 800b640:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b644:	4b1c      	ldr	r3, [pc, #112]	; (800b6b8 <USBD_LL_Init+0x94>)
 800b646:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b64a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800b64c:	4b1a      	ldr	r3, [pc, #104]	; (800b6b8 <USBD_LL_Init+0x94>)
 800b64e:	2206      	movs	r2, #6
 800b650:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b652:	4b19      	ldr	r3, [pc, #100]	; (800b6b8 <USBD_LL_Init+0x94>)
 800b654:	2202      	movs	r2, #2
 800b656:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b658:	4b17      	ldr	r3, [pc, #92]	; (800b6b8 <USBD_LL_Init+0x94>)
 800b65a:	2200      	movs	r2, #0
 800b65c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b65e:	4b16      	ldr	r3, [pc, #88]	; (800b6b8 <USBD_LL_Init+0x94>)
 800b660:	2202      	movs	r2, #2
 800b662:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b664:	4b14      	ldr	r3, [pc, #80]	; (800b6b8 <USBD_LL_Init+0x94>)
 800b666:	2200      	movs	r2, #0
 800b668:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b66a:	4b13      	ldr	r3, [pc, #76]	; (800b6b8 <USBD_LL_Init+0x94>)
 800b66c:	2200      	movs	r2, #0
 800b66e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b670:	4b11      	ldr	r3, [pc, #68]	; (800b6b8 <USBD_LL_Init+0x94>)
 800b672:	2200      	movs	r2, #0
 800b674:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b676:	4b10      	ldr	r3, [pc, #64]	; (800b6b8 <USBD_LL_Init+0x94>)
 800b678:	2200      	movs	r2, #0
 800b67a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b67c:	4b0e      	ldr	r3, [pc, #56]	; (800b6b8 <USBD_LL_Init+0x94>)
 800b67e:	2200      	movs	r2, #0
 800b680:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b682:	480d      	ldr	r0, [pc, #52]	; (800b6b8 <USBD_LL_Init+0x94>)
 800b684:	f7f7 f989 	bl	800299a <HAL_PCD_Init>
 800b688:	4603      	mov	r3, r0
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d001      	beq.n	800b692 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b68e:	f7f5 ff79 	bl	8001584 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b692:	2180      	movs	r1, #128	; 0x80
 800b694:	4808      	ldr	r0, [pc, #32]	; (800b6b8 <USBD_LL_Init+0x94>)
 800b696:	f7f8 fc14 	bl	8003ec2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b69a:	2240      	movs	r2, #64	; 0x40
 800b69c:	2100      	movs	r1, #0
 800b69e:	4806      	ldr	r0, [pc, #24]	; (800b6b8 <USBD_LL_Init+0x94>)
 800b6a0:	f7f8 fbc8 	bl	8003e34 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b6a4:	2280      	movs	r2, #128	; 0x80
 800b6a6:	2101      	movs	r1, #1
 800b6a8:	4803      	ldr	r0, [pc, #12]	; (800b6b8 <USBD_LL_Init+0x94>)
 800b6aa:	f7f8 fbc3 	bl	8003e34 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b6ae:	2300      	movs	r3, #0
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	3708      	adds	r7, #8
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}
 800b6b8:	20001960 	.word	0x20001960

0800b6bc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b084      	sub	sp, #16
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f7f7 fa85 	bl	8002be2 <HAL_PCD_Start>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6dc:	7bfb      	ldrb	r3, [r7, #15]
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f000 f990 	bl	800ba04 <USBD_Get_USB_Status>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3710      	adds	r7, #16
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}

0800b6f2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b6f2:	b580      	push	{r7, lr}
 800b6f4:	b084      	sub	sp, #16
 800b6f6:	af00      	add	r7, sp, #0
 800b6f8:	6078      	str	r0, [r7, #4]
 800b6fa:	4608      	mov	r0, r1
 800b6fc:	4611      	mov	r1, r2
 800b6fe:	461a      	mov	r2, r3
 800b700:	4603      	mov	r3, r0
 800b702:	70fb      	strb	r3, [r7, #3]
 800b704:	460b      	mov	r3, r1
 800b706:	70bb      	strb	r3, [r7, #2]
 800b708:	4613      	mov	r3, r2
 800b70a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b70c:	2300      	movs	r3, #0
 800b70e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b710:	2300      	movs	r3, #0
 800b712:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b71a:	78bb      	ldrb	r3, [r7, #2]
 800b71c:	883a      	ldrh	r2, [r7, #0]
 800b71e:	78f9      	ldrb	r1, [r7, #3]
 800b720:	f7f7 ff83 	bl	800362a <HAL_PCD_EP_Open>
 800b724:	4603      	mov	r3, r0
 800b726:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b728:	7bfb      	ldrb	r3, [r7, #15]
 800b72a:	4618      	mov	r0, r3
 800b72c:	f000 f96a 	bl	800ba04 <USBD_Get_USB_Status>
 800b730:	4603      	mov	r3, r0
 800b732:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b734:	7bbb      	ldrb	r3, [r7, #14]
}
 800b736:	4618      	mov	r0, r3
 800b738:	3710      	adds	r7, #16
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}

0800b73e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b73e:	b580      	push	{r7, lr}
 800b740:	b084      	sub	sp, #16
 800b742:	af00      	add	r7, sp, #0
 800b744:	6078      	str	r0, [r7, #4]
 800b746:	460b      	mov	r3, r1
 800b748:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b74a:	2300      	movs	r3, #0
 800b74c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b74e:	2300      	movs	r3, #0
 800b750:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b758:	78fa      	ldrb	r2, [r7, #3]
 800b75a:	4611      	mov	r1, r2
 800b75c:	4618      	mov	r0, r3
 800b75e:	f7f7 ffcc 	bl	80036fa <HAL_PCD_EP_Close>
 800b762:	4603      	mov	r3, r0
 800b764:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b766:	7bfb      	ldrb	r3, [r7, #15]
 800b768:	4618      	mov	r0, r3
 800b76a:	f000 f94b 	bl	800ba04 <USBD_Get_USB_Status>
 800b76e:	4603      	mov	r3, r0
 800b770:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b772:	7bbb      	ldrb	r3, [r7, #14]
}
 800b774:	4618      	mov	r0, r3
 800b776:	3710      	adds	r7, #16
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}

0800b77c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b084      	sub	sp, #16
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
 800b784:	460b      	mov	r3, r1
 800b786:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b788:	2300      	movs	r3, #0
 800b78a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b78c:	2300      	movs	r3, #0
 800b78e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b796:	78fa      	ldrb	r2, [r7, #3]
 800b798:	4611      	mov	r1, r2
 800b79a:	4618      	mov	r0, r3
 800b79c:	f7f8 f8a4 	bl	80038e8 <HAL_PCD_EP_SetStall>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7a4:	7bfb      	ldrb	r3, [r7, #15]
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f000 f92c 	bl	800ba04 <USBD_Get_USB_Status>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b7b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	3710      	adds	r7, #16
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}

0800b7ba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b7ba:	b580      	push	{r7, lr}
 800b7bc:	b084      	sub	sp, #16
 800b7be:	af00      	add	r7, sp, #0
 800b7c0:	6078      	str	r0, [r7, #4]
 800b7c2:	460b      	mov	r3, r1
 800b7c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b7d4:	78fa      	ldrb	r2, [r7, #3]
 800b7d6:	4611      	mov	r1, r2
 800b7d8:	4618      	mov	r0, r3
 800b7da:	f7f8 f8e9 	bl	80039b0 <HAL_PCD_EP_ClrStall>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7e2:	7bfb      	ldrb	r3, [r7, #15]
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f000 f90d 	bl	800ba04 <USBD_Get_USB_Status>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b7ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3710      	adds	r7, #16
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}

0800b7f8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b085      	sub	sp, #20
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
 800b800:	460b      	mov	r3, r1
 800b802:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b80a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b80c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b810:	2b00      	cmp	r3, #0
 800b812:	da0b      	bge.n	800b82c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b814:	78fb      	ldrb	r3, [r7, #3]
 800b816:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b81a:	68f9      	ldr	r1, [r7, #12]
 800b81c:	4613      	mov	r3, r2
 800b81e:	00db      	lsls	r3, r3, #3
 800b820:	4413      	add	r3, r2
 800b822:	009b      	lsls	r3, r3, #2
 800b824:	440b      	add	r3, r1
 800b826:	333e      	adds	r3, #62	; 0x3e
 800b828:	781b      	ldrb	r3, [r3, #0]
 800b82a:	e00b      	b.n	800b844 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b82c:	78fb      	ldrb	r3, [r7, #3]
 800b82e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b832:	68f9      	ldr	r1, [r7, #12]
 800b834:	4613      	mov	r3, r2
 800b836:	00db      	lsls	r3, r3, #3
 800b838:	4413      	add	r3, r2
 800b83a:	009b      	lsls	r3, r3, #2
 800b83c:	440b      	add	r3, r1
 800b83e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800b842:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b844:	4618      	mov	r0, r3
 800b846:	3714      	adds	r7, #20
 800b848:	46bd      	mov	sp, r7
 800b84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84e:	4770      	bx	lr

0800b850 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b084      	sub	sp, #16
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
 800b858:	460b      	mov	r3, r1
 800b85a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b85c:	2300      	movs	r3, #0
 800b85e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b860:	2300      	movs	r3, #0
 800b862:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b86a:	78fa      	ldrb	r2, [r7, #3]
 800b86c:	4611      	mov	r1, r2
 800b86e:	4618      	mov	r0, r3
 800b870:	f7f7 feb6 	bl	80035e0 <HAL_PCD_SetAddress>
 800b874:	4603      	mov	r3, r0
 800b876:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b878:	7bfb      	ldrb	r3, [r7, #15]
 800b87a:	4618      	mov	r0, r3
 800b87c:	f000 f8c2 	bl	800ba04 <USBD_Get_USB_Status>
 800b880:	4603      	mov	r3, r0
 800b882:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b884:	7bbb      	ldrb	r3, [r7, #14]
}
 800b886:	4618      	mov	r0, r3
 800b888:	3710      	adds	r7, #16
 800b88a:	46bd      	mov	sp, r7
 800b88c:	bd80      	pop	{r7, pc}

0800b88e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b88e:	b580      	push	{r7, lr}
 800b890:	b086      	sub	sp, #24
 800b892:	af00      	add	r7, sp, #0
 800b894:	60f8      	str	r0, [r7, #12]
 800b896:	607a      	str	r2, [r7, #4]
 800b898:	603b      	str	r3, [r7, #0]
 800b89a:	460b      	mov	r3, r1
 800b89c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b8ac:	7af9      	ldrb	r1, [r7, #11]
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	687a      	ldr	r2, [r7, #4]
 800b8b2:	f7f7 ffcf 	bl	8003854 <HAL_PCD_EP_Transmit>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8ba:	7dfb      	ldrb	r3, [r7, #23]
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f000 f8a1 	bl	800ba04 <USBD_Get_USB_Status>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b8c6:	7dbb      	ldrb	r3, [r7, #22]
}
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	3718      	adds	r7, #24
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd80      	pop	{r7, pc}

0800b8d0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b086      	sub	sp, #24
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	60f8      	str	r0, [r7, #12]
 800b8d8:	607a      	str	r2, [r7, #4]
 800b8da:	603b      	str	r3, [r7, #0]
 800b8dc:	460b      	mov	r3, r1
 800b8de:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b8ee:	7af9      	ldrb	r1, [r7, #11]
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	687a      	ldr	r2, [r7, #4]
 800b8f4:	f7f7 ff4b 	bl	800378e <HAL_PCD_EP_Receive>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8fc:	7dfb      	ldrb	r3, [r7, #23]
 800b8fe:	4618      	mov	r0, r3
 800b900:	f000 f880 	bl	800ba04 <USBD_Get_USB_Status>
 800b904:	4603      	mov	r3, r0
 800b906:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b908:	7dbb      	ldrb	r3, [r7, #22]
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	3718      	adds	r7, #24
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}

0800b912 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b912:	b580      	push	{r7, lr}
 800b914:	b082      	sub	sp, #8
 800b916:	af00      	add	r7, sp, #0
 800b918:	6078      	str	r0, [r7, #4]
 800b91a:	460b      	mov	r3, r1
 800b91c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b924:	78fa      	ldrb	r2, [r7, #3]
 800b926:	4611      	mov	r1, r2
 800b928:	4618      	mov	r0, r3
 800b92a:	f7f7 ff7b 	bl	8003824 <HAL_PCD_EP_GetRxCount>
 800b92e:	4603      	mov	r3, r0
}
 800b930:	4618      	mov	r0, r3
 800b932:	3708      	adds	r7, #8
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}

0800b938 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b082      	sub	sp, #8
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
 800b940:	460b      	mov	r3, r1
 800b942:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800b944:	78fb      	ldrb	r3, [r7, #3]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d002      	beq.n	800b950 <HAL_PCDEx_LPM_Callback+0x18>
 800b94a:	2b01      	cmp	r3, #1
 800b94c:	d01f      	beq.n	800b98e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800b94e:	e03b      	b.n	800b9c8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6a1b      	ldr	r3, [r3, #32]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d007      	beq.n	800b968 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800b958:	f7f5 fc2e 	bl	80011b8 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b95c:	4b1c      	ldr	r3, [pc, #112]	; (800b9d0 <HAL_PCDEx_LPM_Callback+0x98>)
 800b95e:	691b      	ldr	r3, [r3, #16]
 800b960:	4a1b      	ldr	r2, [pc, #108]	; (800b9d0 <HAL_PCDEx_LPM_Callback+0x98>)
 800b962:	f023 0306 	bic.w	r3, r3, #6
 800b966:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	687a      	ldr	r2, [r7, #4]
 800b974:	6812      	ldr	r2, [r2, #0]
 800b976:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b97a:	f023 0301 	bic.w	r3, r3, #1
 800b97e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b986:	4618      	mov	r0, r3
 800b988:	f7fe fac7 	bl	8009f1a <USBD_LL_Resume>
    break;
 800b98c:	e01c      	b.n	800b9c8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	687a      	ldr	r2, [r7, #4]
 800b99a:	6812      	ldr	r2, [r2, #0]
 800b99c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b9a0:	f043 0301 	orr.w	r3, r3, #1
 800b9a4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f7fe fa9e 	bl	8009eee <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6a1b      	ldr	r3, [r3, #32]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d005      	beq.n	800b9c6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b9ba:	4b05      	ldr	r3, [pc, #20]	; (800b9d0 <HAL_PCDEx_LPM_Callback+0x98>)
 800b9bc:	691b      	ldr	r3, [r3, #16]
 800b9be:	4a04      	ldr	r2, [pc, #16]	; (800b9d0 <HAL_PCDEx_LPM_Callback+0x98>)
 800b9c0:	f043 0306 	orr.w	r3, r3, #6
 800b9c4:	6113      	str	r3, [r2, #16]
    break;
 800b9c6:	bf00      	nop
}
 800b9c8:	bf00      	nop
 800b9ca:	3708      	adds	r7, #8
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}
 800b9d0:	e000ed00 	.word	0xe000ed00

0800b9d4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b083      	sub	sp, #12
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b9dc:	4b03      	ldr	r3, [pc, #12]	; (800b9ec <USBD_static_malloc+0x18>)
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	370c      	adds	r7, #12
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e8:	4770      	bx	lr
 800b9ea:	bf00      	nop
 800b9ec:	20001e6c 	.word	0x20001e6c

0800b9f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b083      	sub	sp, #12
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]

}
 800b9f8:	bf00      	nop
 800b9fa:	370c      	adds	r7, #12
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba02:	4770      	bx	lr

0800ba04 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ba04:	b480      	push	{r7}
 800ba06:	b085      	sub	sp, #20
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ba12:	79fb      	ldrb	r3, [r7, #7]
 800ba14:	2b03      	cmp	r3, #3
 800ba16:	d817      	bhi.n	800ba48 <USBD_Get_USB_Status+0x44>
 800ba18:	a201      	add	r2, pc, #4	; (adr r2, 800ba20 <USBD_Get_USB_Status+0x1c>)
 800ba1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba1e:	bf00      	nop
 800ba20:	0800ba31 	.word	0x0800ba31
 800ba24:	0800ba37 	.word	0x0800ba37
 800ba28:	0800ba3d 	.word	0x0800ba3d
 800ba2c:	0800ba43 	.word	0x0800ba43
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ba30:	2300      	movs	r3, #0
 800ba32:	73fb      	strb	r3, [r7, #15]
    break;
 800ba34:	e00b      	b.n	800ba4e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ba36:	2303      	movs	r3, #3
 800ba38:	73fb      	strb	r3, [r7, #15]
    break;
 800ba3a:	e008      	b.n	800ba4e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	73fb      	strb	r3, [r7, #15]
    break;
 800ba40:	e005      	b.n	800ba4e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ba42:	2303      	movs	r3, #3
 800ba44:	73fb      	strb	r3, [r7, #15]
    break;
 800ba46:	e002      	b.n	800ba4e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ba48:	2303      	movs	r3, #3
 800ba4a:	73fb      	strb	r3, [r7, #15]
    break;
 800ba4c:	bf00      	nop
  }
  return usb_status;
 800ba4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3714      	adds	r7, #20
 800ba54:	46bd      	mov	sp, r7
 800ba56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5a:	4770      	bx	lr

0800ba5c <__errno>:
 800ba5c:	4b01      	ldr	r3, [pc, #4]	; (800ba64 <__errno+0x8>)
 800ba5e:	6818      	ldr	r0, [r3, #0]
 800ba60:	4770      	bx	lr
 800ba62:	bf00      	nop
 800ba64:	2000011c 	.word	0x2000011c

0800ba68 <__libc_init_array>:
 800ba68:	b570      	push	{r4, r5, r6, lr}
 800ba6a:	4d0d      	ldr	r5, [pc, #52]	; (800baa0 <__libc_init_array+0x38>)
 800ba6c:	4c0d      	ldr	r4, [pc, #52]	; (800baa4 <__libc_init_array+0x3c>)
 800ba6e:	1b64      	subs	r4, r4, r5
 800ba70:	10a4      	asrs	r4, r4, #2
 800ba72:	2600      	movs	r6, #0
 800ba74:	42a6      	cmp	r6, r4
 800ba76:	d109      	bne.n	800ba8c <__libc_init_array+0x24>
 800ba78:	4d0b      	ldr	r5, [pc, #44]	; (800baa8 <__libc_init_array+0x40>)
 800ba7a:	4c0c      	ldr	r4, [pc, #48]	; (800baac <__libc_init_array+0x44>)
 800ba7c:	f004 fcf0 	bl	8010460 <_init>
 800ba80:	1b64      	subs	r4, r4, r5
 800ba82:	10a4      	asrs	r4, r4, #2
 800ba84:	2600      	movs	r6, #0
 800ba86:	42a6      	cmp	r6, r4
 800ba88:	d105      	bne.n	800ba96 <__libc_init_array+0x2e>
 800ba8a:	bd70      	pop	{r4, r5, r6, pc}
 800ba8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba90:	4798      	blx	r3
 800ba92:	3601      	adds	r6, #1
 800ba94:	e7ee      	b.n	800ba74 <__libc_init_array+0xc>
 800ba96:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba9a:	4798      	blx	r3
 800ba9c:	3601      	adds	r6, #1
 800ba9e:	e7f2      	b.n	800ba86 <__libc_init_array+0x1e>
 800baa0:	080109b4 	.word	0x080109b4
 800baa4:	080109b4 	.word	0x080109b4
 800baa8:	080109b4 	.word	0x080109b4
 800baac:	080109b8 	.word	0x080109b8

0800bab0 <__itoa>:
 800bab0:	1e93      	subs	r3, r2, #2
 800bab2:	2b22      	cmp	r3, #34	; 0x22
 800bab4:	b510      	push	{r4, lr}
 800bab6:	460c      	mov	r4, r1
 800bab8:	d904      	bls.n	800bac4 <__itoa+0x14>
 800baba:	2300      	movs	r3, #0
 800babc:	700b      	strb	r3, [r1, #0]
 800babe:	461c      	mov	r4, r3
 800bac0:	4620      	mov	r0, r4
 800bac2:	bd10      	pop	{r4, pc}
 800bac4:	2a0a      	cmp	r2, #10
 800bac6:	d109      	bne.n	800badc <__itoa+0x2c>
 800bac8:	2800      	cmp	r0, #0
 800baca:	da07      	bge.n	800badc <__itoa+0x2c>
 800bacc:	232d      	movs	r3, #45	; 0x2d
 800bace:	700b      	strb	r3, [r1, #0]
 800bad0:	4240      	negs	r0, r0
 800bad2:	2101      	movs	r1, #1
 800bad4:	4421      	add	r1, r4
 800bad6:	f001 fd5b 	bl	800d590 <__utoa>
 800bada:	e7f1      	b.n	800bac0 <__itoa+0x10>
 800badc:	2100      	movs	r1, #0
 800bade:	e7f9      	b.n	800bad4 <__itoa+0x24>

0800bae0 <itoa>:
 800bae0:	f7ff bfe6 	b.w	800bab0 <__itoa>

0800bae4 <memset>:
 800bae4:	4402      	add	r2, r0
 800bae6:	4603      	mov	r3, r0
 800bae8:	4293      	cmp	r3, r2
 800baea:	d100      	bne.n	800baee <memset+0xa>
 800baec:	4770      	bx	lr
 800baee:	f803 1b01 	strb.w	r1, [r3], #1
 800baf2:	e7f9      	b.n	800bae8 <memset+0x4>

0800baf4 <__cvt>:
 800baf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800baf8:	ec55 4b10 	vmov	r4, r5, d0
 800bafc:	2d00      	cmp	r5, #0
 800bafe:	460e      	mov	r6, r1
 800bb00:	4619      	mov	r1, r3
 800bb02:	462b      	mov	r3, r5
 800bb04:	bfbb      	ittet	lt
 800bb06:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bb0a:	461d      	movlt	r5, r3
 800bb0c:	2300      	movge	r3, #0
 800bb0e:	232d      	movlt	r3, #45	; 0x2d
 800bb10:	700b      	strb	r3, [r1, #0]
 800bb12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb14:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bb18:	4691      	mov	r9, r2
 800bb1a:	f023 0820 	bic.w	r8, r3, #32
 800bb1e:	bfbc      	itt	lt
 800bb20:	4622      	movlt	r2, r4
 800bb22:	4614      	movlt	r4, r2
 800bb24:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bb28:	d005      	beq.n	800bb36 <__cvt+0x42>
 800bb2a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bb2e:	d100      	bne.n	800bb32 <__cvt+0x3e>
 800bb30:	3601      	adds	r6, #1
 800bb32:	2102      	movs	r1, #2
 800bb34:	e000      	b.n	800bb38 <__cvt+0x44>
 800bb36:	2103      	movs	r1, #3
 800bb38:	ab03      	add	r3, sp, #12
 800bb3a:	9301      	str	r3, [sp, #4]
 800bb3c:	ab02      	add	r3, sp, #8
 800bb3e:	9300      	str	r3, [sp, #0]
 800bb40:	ec45 4b10 	vmov	d0, r4, r5
 800bb44:	4653      	mov	r3, sl
 800bb46:	4632      	mov	r2, r6
 800bb48:	f001 fdf2 	bl	800d730 <_dtoa_r>
 800bb4c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bb50:	4607      	mov	r7, r0
 800bb52:	d102      	bne.n	800bb5a <__cvt+0x66>
 800bb54:	f019 0f01 	tst.w	r9, #1
 800bb58:	d022      	beq.n	800bba0 <__cvt+0xac>
 800bb5a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bb5e:	eb07 0906 	add.w	r9, r7, r6
 800bb62:	d110      	bne.n	800bb86 <__cvt+0x92>
 800bb64:	783b      	ldrb	r3, [r7, #0]
 800bb66:	2b30      	cmp	r3, #48	; 0x30
 800bb68:	d10a      	bne.n	800bb80 <__cvt+0x8c>
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	4620      	mov	r0, r4
 800bb70:	4629      	mov	r1, r5
 800bb72:	f7f4 ffc9 	bl	8000b08 <__aeabi_dcmpeq>
 800bb76:	b918      	cbnz	r0, 800bb80 <__cvt+0x8c>
 800bb78:	f1c6 0601 	rsb	r6, r6, #1
 800bb7c:	f8ca 6000 	str.w	r6, [sl]
 800bb80:	f8da 3000 	ldr.w	r3, [sl]
 800bb84:	4499      	add	r9, r3
 800bb86:	2200      	movs	r2, #0
 800bb88:	2300      	movs	r3, #0
 800bb8a:	4620      	mov	r0, r4
 800bb8c:	4629      	mov	r1, r5
 800bb8e:	f7f4 ffbb 	bl	8000b08 <__aeabi_dcmpeq>
 800bb92:	b108      	cbz	r0, 800bb98 <__cvt+0xa4>
 800bb94:	f8cd 900c 	str.w	r9, [sp, #12]
 800bb98:	2230      	movs	r2, #48	; 0x30
 800bb9a:	9b03      	ldr	r3, [sp, #12]
 800bb9c:	454b      	cmp	r3, r9
 800bb9e:	d307      	bcc.n	800bbb0 <__cvt+0xbc>
 800bba0:	9b03      	ldr	r3, [sp, #12]
 800bba2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bba4:	1bdb      	subs	r3, r3, r7
 800bba6:	4638      	mov	r0, r7
 800bba8:	6013      	str	r3, [r2, #0]
 800bbaa:	b004      	add	sp, #16
 800bbac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbb0:	1c59      	adds	r1, r3, #1
 800bbb2:	9103      	str	r1, [sp, #12]
 800bbb4:	701a      	strb	r2, [r3, #0]
 800bbb6:	e7f0      	b.n	800bb9a <__cvt+0xa6>

0800bbb8 <__exponent>:
 800bbb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bbba:	4603      	mov	r3, r0
 800bbbc:	2900      	cmp	r1, #0
 800bbbe:	bfb8      	it	lt
 800bbc0:	4249      	neglt	r1, r1
 800bbc2:	f803 2b02 	strb.w	r2, [r3], #2
 800bbc6:	bfb4      	ite	lt
 800bbc8:	222d      	movlt	r2, #45	; 0x2d
 800bbca:	222b      	movge	r2, #43	; 0x2b
 800bbcc:	2909      	cmp	r1, #9
 800bbce:	7042      	strb	r2, [r0, #1]
 800bbd0:	dd2a      	ble.n	800bc28 <__exponent+0x70>
 800bbd2:	f10d 0407 	add.w	r4, sp, #7
 800bbd6:	46a4      	mov	ip, r4
 800bbd8:	270a      	movs	r7, #10
 800bbda:	46a6      	mov	lr, r4
 800bbdc:	460a      	mov	r2, r1
 800bbde:	fb91 f6f7 	sdiv	r6, r1, r7
 800bbe2:	fb07 1516 	mls	r5, r7, r6, r1
 800bbe6:	3530      	adds	r5, #48	; 0x30
 800bbe8:	2a63      	cmp	r2, #99	; 0x63
 800bbea:	f104 34ff 	add.w	r4, r4, #4294967295
 800bbee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bbf2:	4631      	mov	r1, r6
 800bbf4:	dcf1      	bgt.n	800bbda <__exponent+0x22>
 800bbf6:	3130      	adds	r1, #48	; 0x30
 800bbf8:	f1ae 0502 	sub.w	r5, lr, #2
 800bbfc:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bc00:	1c44      	adds	r4, r0, #1
 800bc02:	4629      	mov	r1, r5
 800bc04:	4561      	cmp	r1, ip
 800bc06:	d30a      	bcc.n	800bc1e <__exponent+0x66>
 800bc08:	f10d 0209 	add.w	r2, sp, #9
 800bc0c:	eba2 020e 	sub.w	r2, r2, lr
 800bc10:	4565      	cmp	r5, ip
 800bc12:	bf88      	it	hi
 800bc14:	2200      	movhi	r2, #0
 800bc16:	4413      	add	r3, r2
 800bc18:	1a18      	subs	r0, r3, r0
 800bc1a:	b003      	add	sp, #12
 800bc1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc22:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bc26:	e7ed      	b.n	800bc04 <__exponent+0x4c>
 800bc28:	2330      	movs	r3, #48	; 0x30
 800bc2a:	3130      	adds	r1, #48	; 0x30
 800bc2c:	7083      	strb	r3, [r0, #2]
 800bc2e:	70c1      	strb	r1, [r0, #3]
 800bc30:	1d03      	adds	r3, r0, #4
 800bc32:	e7f1      	b.n	800bc18 <__exponent+0x60>

0800bc34 <_printf_float>:
 800bc34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc38:	ed2d 8b02 	vpush	{d8}
 800bc3c:	b08d      	sub	sp, #52	; 0x34
 800bc3e:	460c      	mov	r4, r1
 800bc40:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bc44:	4616      	mov	r6, r2
 800bc46:	461f      	mov	r7, r3
 800bc48:	4605      	mov	r5, r0
 800bc4a:	f002 fecf 	bl	800e9ec <_localeconv_r>
 800bc4e:	f8d0 a000 	ldr.w	sl, [r0]
 800bc52:	4650      	mov	r0, sl
 800bc54:	f7f4 fadc 	bl	8000210 <strlen>
 800bc58:	2300      	movs	r3, #0
 800bc5a:	930a      	str	r3, [sp, #40]	; 0x28
 800bc5c:	6823      	ldr	r3, [r4, #0]
 800bc5e:	9305      	str	r3, [sp, #20]
 800bc60:	f8d8 3000 	ldr.w	r3, [r8]
 800bc64:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bc68:	3307      	adds	r3, #7
 800bc6a:	f023 0307 	bic.w	r3, r3, #7
 800bc6e:	f103 0208 	add.w	r2, r3, #8
 800bc72:	f8c8 2000 	str.w	r2, [r8]
 800bc76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc7a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bc7e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800bc82:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bc86:	9307      	str	r3, [sp, #28]
 800bc88:	f8cd 8018 	str.w	r8, [sp, #24]
 800bc8c:	ee08 0a10 	vmov	s16, r0
 800bc90:	4b9f      	ldr	r3, [pc, #636]	; (800bf10 <_printf_float+0x2dc>)
 800bc92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc96:	f04f 32ff 	mov.w	r2, #4294967295
 800bc9a:	f7f4 ff67 	bl	8000b6c <__aeabi_dcmpun>
 800bc9e:	bb88      	cbnz	r0, 800bd04 <_printf_float+0xd0>
 800bca0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bca4:	4b9a      	ldr	r3, [pc, #616]	; (800bf10 <_printf_float+0x2dc>)
 800bca6:	f04f 32ff 	mov.w	r2, #4294967295
 800bcaa:	f7f4 ff41 	bl	8000b30 <__aeabi_dcmple>
 800bcae:	bb48      	cbnz	r0, 800bd04 <_printf_float+0xd0>
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	4640      	mov	r0, r8
 800bcb6:	4649      	mov	r1, r9
 800bcb8:	f7f4 ff30 	bl	8000b1c <__aeabi_dcmplt>
 800bcbc:	b110      	cbz	r0, 800bcc4 <_printf_float+0x90>
 800bcbe:	232d      	movs	r3, #45	; 0x2d
 800bcc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bcc4:	4b93      	ldr	r3, [pc, #588]	; (800bf14 <_printf_float+0x2e0>)
 800bcc6:	4894      	ldr	r0, [pc, #592]	; (800bf18 <_printf_float+0x2e4>)
 800bcc8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bccc:	bf94      	ite	ls
 800bcce:	4698      	movls	r8, r3
 800bcd0:	4680      	movhi	r8, r0
 800bcd2:	2303      	movs	r3, #3
 800bcd4:	6123      	str	r3, [r4, #16]
 800bcd6:	9b05      	ldr	r3, [sp, #20]
 800bcd8:	f023 0204 	bic.w	r2, r3, #4
 800bcdc:	6022      	str	r2, [r4, #0]
 800bcde:	f04f 0900 	mov.w	r9, #0
 800bce2:	9700      	str	r7, [sp, #0]
 800bce4:	4633      	mov	r3, r6
 800bce6:	aa0b      	add	r2, sp, #44	; 0x2c
 800bce8:	4621      	mov	r1, r4
 800bcea:	4628      	mov	r0, r5
 800bcec:	f000 f9d8 	bl	800c0a0 <_printf_common>
 800bcf0:	3001      	adds	r0, #1
 800bcf2:	f040 8090 	bne.w	800be16 <_printf_float+0x1e2>
 800bcf6:	f04f 30ff 	mov.w	r0, #4294967295
 800bcfa:	b00d      	add	sp, #52	; 0x34
 800bcfc:	ecbd 8b02 	vpop	{d8}
 800bd00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd04:	4642      	mov	r2, r8
 800bd06:	464b      	mov	r3, r9
 800bd08:	4640      	mov	r0, r8
 800bd0a:	4649      	mov	r1, r9
 800bd0c:	f7f4 ff2e 	bl	8000b6c <__aeabi_dcmpun>
 800bd10:	b140      	cbz	r0, 800bd24 <_printf_float+0xf0>
 800bd12:	464b      	mov	r3, r9
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	bfbc      	itt	lt
 800bd18:	232d      	movlt	r3, #45	; 0x2d
 800bd1a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bd1e:	487f      	ldr	r0, [pc, #508]	; (800bf1c <_printf_float+0x2e8>)
 800bd20:	4b7f      	ldr	r3, [pc, #508]	; (800bf20 <_printf_float+0x2ec>)
 800bd22:	e7d1      	b.n	800bcc8 <_printf_float+0x94>
 800bd24:	6863      	ldr	r3, [r4, #4]
 800bd26:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bd2a:	9206      	str	r2, [sp, #24]
 800bd2c:	1c5a      	adds	r2, r3, #1
 800bd2e:	d13f      	bne.n	800bdb0 <_printf_float+0x17c>
 800bd30:	2306      	movs	r3, #6
 800bd32:	6063      	str	r3, [r4, #4]
 800bd34:	9b05      	ldr	r3, [sp, #20]
 800bd36:	6861      	ldr	r1, [r4, #4]
 800bd38:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	9303      	str	r3, [sp, #12]
 800bd40:	ab0a      	add	r3, sp, #40	; 0x28
 800bd42:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bd46:	ab09      	add	r3, sp, #36	; 0x24
 800bd48:	ec49 8b10 	vmov	d0, r8, r9
 800bd4c:	9300      	str	r3, [sp, #0]
 800bd4e:	6022      	str	r2, [r4, #0]
 800bd50:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bd54:	4628      	mov	r0, r5
 800bd56:	f7ff fecd 	bl	800baf4 <__cvt>
 800bd5a:	9b06      	ldr	r3, [sp, #24]
 800bd5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bd5e:	2b47      	cmp	r3, #71	; 0x47
 800bd60:	4680      	mov	r8, r0
 800bd62:	d108      	bne.n	800bd76 <_printf_float+0x142>
 800bd64:	1cc8      	adds	r0, r1, #3
 800bd66:	db02      	blt.n	800bd6e <_printf_float+0x13a>
 800bd68:	6863      	ldr	r3, [r4, #4]
 800bd6a:	4299      	cmp	r1, r3
 800bd6c:	dd41      	ble.n	800bdf2 <_printf_float+0x1be>
 800bd6e:	f1ab 0b02 	sub.w	fp, fp, #2
 800bd72:	fa5f fb8b 	uxtb.w	fp, fp
 800bd76:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bd7a:	d820      	bhi.n	800bdbe <_printf_float+0x18a>
 800bd7c:	3901      	subs	r1, #1
 800bd7e:	465a      	mov	r2, fp
 800bd80:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bd84:	9109      	str	r1, [sp, #36]	; 0x24
 800bd86:	f7ff ff17 	bl	800bbb8 <__exponent>
 800bd8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd8c:	1813      	adds	r3, r2, r0
 800bd8e:	2a01      	cmp	r2, #1
 800bd90:	4681      	mov	r9, r0
 800bd92:	6123      	str	r3, [r4, #16]
 800bd94:	dc02      	bgt.n	800bd9c <_printf_float+0x168>
 800bd96:	6822      	ldr	r2, [r4, #0]
 800bd98:	07d2      	lsls	r2, r2, #31
 800bd9a:	d501      	bpl.n	800bda0 <_printf_float+0x16c>
 800bd9c:	3301      	adds	r3, #1
 800bd9e:	6123      	str	r3, [r4, #16]
 800bda0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d09c      	beq.n	800bce2 <_printf_float+0xae>
 800bda8:	232d      	movs	r3, #45	; 0x2d
 800bdaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdae:	e798      	b.n	800bce2 <_printf_float+0xae>
 800bdb0:	9a06      	ldr	r2, [sp, #24]
 800bdb2:	2a47      	cmp	r2, #71	; 0x47
 800bdb4:	d1be      	bne.n	800bd34 <_printf_float+0x100>
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d1bc      	bne.n	800bd34 <_printf_float+0x100>
 800bdba:	2301      	movs	r3, #1
 800bdbc:	e7b9      	b.n	800bd32 <_printf_float+0xfe>
 800bdbe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bdc2:	d118      	bne.n	800bdf6 <_printf_float+0x1c2>
 800bdc4:	2900      	cmp	r1, #0
 800bdc6:	6863      	ldr	r3, [r4, #4]
 800bdc8:	dd0b      	ble.n	800bde2 <_printf_float+0x1ae>
 800bdca:	6121      	str	r1, [r4, #16]
 800bdcc:	b913      	cbnz	r3, 800bdd4 <_printf_float+0x1a0>
 800bdce:	6822      	ldr	r2, [r4, #0]
 800bdd0:	07d0      	lsls	r0, r2, #31
 800bdd2:	d502      	bpl.n	800bdda <_printf_float+0x1a6>
 800bdd4:	3301      	adds	r3, #1
 800bdd6:	440b      	add	r3, r1
 800bdd8:	6123      	str	r3, [r4, #16]
 800bdda:	65a1      	str	r1, [r4, #88]	; 0x58
 800bddc:	f04f 0900 	mov.w	r9, #0
 800bde0:	e7de      	b.n	800bda0 <_printf_float+0x16c>
 800bde2:	b913      	cbnz	r3, 800bdea <_printf_float+0x1b6>
 800bde4:	6822      	ldr	r2, [r4, #0]
 800bde6:	07d2      	lsls	r2, r2, #31
 800bde8:	d501      	bpl.n	800bdee <_printf_float+0x1ba>
 800bdea:	3302      	adds	r3, #2
 800bdec:	e7f4      	b.n	800bdd8 <_printf_float+0x1a4>
 800bdee:	2301      	movs	r3, #1
 800bdf0:	e7f2      	b.n	800bdd8 <_printf_float+0x1a4>
 800bdf2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bdf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdf8:	4299      	cmp	r1, r3
 800bdfa:	db05      	blt.n	800be08 <_printf_float+0x1d4>
 800bdfc:	6823      	ldr	r3, [r4, #0]
 800bdfe:	6121      	str	r1, [r4, #16]
 800be00:	07d8      	lsls	r0, r3, #31
 800be02:	d5ea      	bpl.n	800bdda <_printf_float+0x1a6>
 800be04:	1c4b      	adds	r3, r1, #1
 800be06:	e7e7      	b.n	800bdd8 <_printf_float+0x1a4>
 800be08:	2900      	cmp	r1, #0
 800be0a:	bfd4      	ite	le
 800be0c:	f1c1 0202 	rsble	r2, r1, #2
 800be10:	2201      	movgt	r2, #1
 800be12:	4413      	add	r3, r2
 800be14:	e7e0      	b.n	800bdd8 <_printf_float+0x1a4>
 800be16:	6823      	ldr	r3, [r4, #0]
 800be18:	055a      	lsls	r2, r3, #21
 800be1a:	d407      	bmi.n	800be2c <_printf_float+0x1f8>
 800be1c:	6923      	ldr	r3, [r4, #16]
 800be1e:	4642      	mov	r2, r8
 800be20:	4631      	mov	r1, r6
 800be22:	4628      	mov	r0, r5
 800be24:	47b8      	blx	r7
 800be26:	3001      	adds	r0, #1
 800be28:	d12c      	bne.n	800be84 <_printf_float+0x250>
 800be2a:	e764      	b.n	800bcf6 <_printf_float+0xc2>
 800be2c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800be30:	f240 80e0 	bls.w	800bff4 <_printf_float+0x3c0>
 800be34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800be38:	2200      	movs	r2, #0
 800be3a:	2300      	movs	r3, #0
 800be3c:	f7f4 fe64 	bl	8000b08 <__aeabi_dcmpeq>
 800be40:	2800      	cmp	r0, #0
 800be42:	d034      	beq.n	800beae <_printf_float+0x27a>
 800be44:	4a37      	ldr	r2, [pc, #220]	; (800bf24 <_printf_float+0x2f0>)
 800be46:	2301      	movs	r3, #1
 800be48:	4631      	mov	r1, r6
 800be4a:	4628      	mov	r0, r5
 800be4c:	47b8      	blx	r7
 800be4e:	3001      	adds	r0, #1
 800be50:	f43f af51 	beq.w	800bcf6 <_printf_float+0xc2>
 800be54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be58:	429a      	cmp	r2, r3
 800be5a:	db02      	blt.n	800be62 <_printf_float+0x22e>
 800be5c:	6823      	ldr	r3, [r4, #0]
 800be5e:	07d8      	lsls	r0, r3, #31
 800be60:	d510      	bpl.n	800be84 <_printf_float+0x250>
 800be62:	ee18 3a10 	vmov	r3, s16
 800be66:	4652      	mov	r2, sl
 800be68:	4631      	mov	r1, r6
 800be6a:	4628      	mov	r0, r5
 800be6c:	47b8      	blx	r7
 800be6e:	3001      	adds	r0, #1
 800be70:	f43f af41 	beq.w	800bcf6 <_printf_float+0xc2>
 800be74:	f04f 0800 	mov.w	r8, #0
 800be78:	f104 091a 	add.w	r9, r4, #26
 800be7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be7e:	3b01      	subs	r3, #1
 800be80:	4543      	cmp	r3, r8
 800be82:	dc09      	bgt.n	800be98 <_printf_float+0x264>
 800be84:	6823      	ldr	r3, [r4, #0]
 800be86:	079b      	lsls	r3, r3, #30
 800be88:	f100 8105 	bmi.w	800c096 <_printf_float+0x462>
 800be8c:	68e0      	ldr	r0, [r4, #12]
 800be8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be90:	4298      	cmp	r0, r3
 800be92:	bfb8      	it	lt
 800be94:	4618      	movlt	r0, r3
 800be96:	e730      	b.n	800bcfa <_printf_float+0xc6>
 800be98:	2301      	movs	r3, #1
 800be9a:	464a      	mov	r2, r9
 800be9c:	4631      	mov	r1, r6
 800be9e:	4628      	mov	r0, r5
 800bea0:	47b8      	blx	r7
 800bea2:	3001      	adds	r0, #1
 800bea4:	f43f af27 	beq.w	800bcf6 <_printf_float+0xc2>
 800bea8:	f108 0801 	add.w	r8, r8, #1
 800beac:	e7e6      	b.n	800be7c <_printf_float+0x248>
 800beae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	dc39      	bgt.n	800bf28 <_printf_float+0x2f4>
 800beb4:	4a1b      	ldr	r2, [pc, #108]	; (800bf24 <_printf_float+0x2f0>)
 800beb6:	2301      	movs	r3, #1
 800beb8:	4631      	mov	r1, r6
 800beba:	4628      	mov	r0, r5
 800bebc:	47b8      	blx	r7
 800bebe:	3001      	adds	r0, #1
 800bec0:	f43f af19 	beq.w	800bcf6 <_printf_float+0xc2>
 800bec4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bec8:	4313      	orrs	r3, r2
 800beca:	d102      	bne.n	800bed2 <_printf_float+0x29e>
 800becc:	6823      	ldr	r3, [r4, #0]
 800bece:	07d9      	lsls	r1, r3, #31
 800bed0:	d5d8      	bpl.n	800be84 <_printf_float+0x250>
 800bed2:	ee18 3a10 	vmov	r3, s16
 800bed6:	4652      	mov	r2, sl
 800bed8:	4631      	mov	r1, r6
 800beda:	4628      	mov	r0, r5
 800bedc:	47b8      	blx	r7
 800bede:	3001      	adds	r0, #1
 800bee0:	f43f af09 	beq.w	800bcf6 <_printf_float+0xc2>
 800bee4:	f04f 0900 	mov.w	r9, #0
 800bee8:	f104 0a1a 	add.w	sl, r4, #26
 800beec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800beee:	425b      	negs	r3, r3
 800bef0:	454b      	cmp	r3, r9
 800bef2:	dc01      	bgt.n	800bef8 <_printf_float+0x2c4>
 800bef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bef6:	e792      	b.n	800be1e <_printf_float+0x1ea>
 800bef8:	2301      	movs	r3, #1
 800befa:	4652      	mov	r2, sl
 800befc:	4631      	mov	r1, r6
 800befe:	4628      	mov	r0, r5
 800bf00:	47b8      	blx	r7
 800bf02:	3001      	adds	r0, #1
 800bf04:	f43f aef7 	beq.w	800bcf6 <_printf_float+0xc2>
 800bf08:	f109 0901 	add.w	r9, r9, #1
 800bf0c:	e7ee      	b.n	800beec <_printf_float+0x2b8>
 800bf0e:	bf00      	nop
 800bf10:	7fefffff 	.word	0x7fefffff
 800bf14:	080104e4 	.word	0x080104e4
 800bf18:	080104e8 	.word	0x080104e8
 800bf1c:	080104f0 	.word	0x080104f0
 800bf20:	080104ec 	.word	0x080104ec
 800bf24:	080104f4 	.word	0x080104f4
 800bf28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	bfa8      	it	ge
 800bf30:	461a      	movge	r2, r3
 800bf32:	2a00      	cmp	r2, #0
 800bf34:	4691      	mov	r9, r2
 800bf36:	dc37      	bgt.n	800bfa8 <_printf_float+0x374>
 800bf38:	f04f 0b00 	mov.w	fp, #0
 800bf3c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bf40:	f104 021a 	add.w	r2, r4, #26
 800bf44:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bf46:	9305      	str	r3, [sp, #20]
 800bf48:	eba3 0309 	sub.w	r3, r3, r9
 800bf4c:	455b      	cmp	r3, fp
 800bf4e:	dc33      	bgt.n	800bfb8 <_printf_float+0x384>
 800bf50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bf54:	429a      	cmp	r2, r3
 800bf56:	db3b      	blt.n	800bfd0 <_printf_float+0x39c>
 800bf58:	6823      	ldr	r3, [r4, #0]
 800bf5a:	07da      	lsls	r2, r3, #31
 800bf5c:	d438      	bmi.n	800bfd0 <_printf_float+0x39c>
 800bf5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf60:	9a05      	ldr	r2, [sp, #20]
 800bf62:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf64:	1a9a      	subs	r2, r3, r2
 800bf66:	eba3 0901 	sub.w	r9, r3, r1
 800bf6a:	4591      	cmp	r9, r2
 800bf6c:	bfa8      	it	ge
 800bf6e:	4691      	movge	r9, r2
 800bf70:	f1b9 0f00 	cmp.w	r9, #0
 800bf74:	dc35      	bgt.n	800bfe2 <_printf_float+0x3ae>
 800bf76:	f04f 0800 	mov.w	r8, #0
 800bf7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bf7e:	f104 0a1a 	add.w	sl, r4, #26
 800bf82:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bf86:	1a9b      	subs	r3, r3, r2
 800bf88:	eba3 0309 	sub.w	r3, r3, r9
 800bf8c:	4543      	cmp	r3, r8
 800bf8e:	f77f af79 	ble.w	800be84 <_printf_float+0x250>
 800bf92:	2301      	movs	r3, #1
 800bf94:	4652      	mov	r2, sl
 800bf96:	4631      	mov	r1, r6
 800bf98:	4628      	mov	r0, r5
 800bf9a:	47b8      	blx	r7
 800bf9c:	3001      	adds	r0, #1
 800bf9e:	f43f aeaa 	beq.w	800bcf6 <_printf_float+0xc2>
 800bfa2:	f108 0801 	add.w	r8, r8, #1
 800bfa6:	e7ec      	b.n	800bf82 <_printf_float+0x34e>
 800bfa8:	4613      	mov	r3, r2
 800bfaa:	4631      	mov	r1, r6
 800bfac:	4642      	mov	r2, r8
 800bfae:	4628      	mov	r0, r5
 800bfb0:	47b8      	blx	r7
 800bfb2:	3001      	adds	r0, #1
 800bfb4:	d1c0      	bne.n	800bf38 <_printf_float+0x304>
 800bfb6:	e69e      	b.n	800bcf6 <_printf_float+0xc2>
 800bfb8:	2301      	movs	r3, #1
 800bfba:	4631      	mov	r1, r6
 800bfbc:	4628      	mov	r0, r5
 800bfbe:	9205      	str	r2, [sp, #20]
 800bfc0:	47b8      	blx	r7
 800bfc2:	3001      	adds	r0, #1
 800bfc4:	f43f ae97 	beq.w	800bcf6 <_printf_float+0xc2>
 800bfc8:	9a05      	ldr	r2, [sp, #20]
 800bfca:	f10b 0b01 	add.w	fp, fp, #1
 800bfce:	e7b9      	b.n	800bf44 <_printf_float+0x310>
 800bfd0:	ee18 3a10 	vmov	r3, s16
 800bfd4:	4652      	mov	r2, sl
 800bfd6:	4631      	mov	r1, r6
 800bfd8:	4628      	mov	r0, r5
 800bfda:	47b8      	blx	r7
 800bfdc:	3001      	adds	r0, #1
 800bfde:	d1be      	bne.n	800bf5e <_printf_float+0x32a>
 800bfe0:	e689      	b.n	800bcf6 <_printf_float+0xc2>
 800bfe2:	9a05      	ldr	r2, [sp, #20]
 800bfe4:	464b      	mov	r3, r9
 800bfe6:	4442      	add	r2, r8
 800bfe8:	4631      	mov	r1, r6
 800bfea:	4628      	mov	r0, r5
 800bfec:	47b8      	blx	r7
 800bfee:	3001      	adds	r0, #1
 800bff0:	d1c1      	bne.n	800bf76 <_printf_float+0x342>
 800bff2:	e680      	b.n	800bcf6 <_printf_float+0xc2>
 800bff4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bff6:	2a01      	cmp	r2, #1
 800bff8:	dc01      	bgt.n	800bffe <_printf_float+0x3ca>
 800bffa:	07db      	lsls	r3, r3, #31
 800bffc:	d538      	bpl.n	800c070 <_printf_float+0x43c>
 800bffe:	2301      	movs	r3, #1
 800c000:	4642      	mov	r2, r8
 800c002:	4631      	mov	r1, r6
 800c004:	4628      	mov	r0, r5
 800c006:	47b8      	blx	r7
 800c008:	3001      	adds	r0, #1
 800c00a:	f43f ae74 	beq.w	800bcf6 <_printf_float+0xc2>
 800c00e:	ee18 3a10 	vmov	r3, s16
 800c012:	4652      	mov	r2, sl
 800c014:	4631      	mov	r1, r6
 800c016:	4628      	mov	r0, r5
 800c018:	47b8      	blx	r7
 800c01a:	3001      	adds	r0, #1
 800c01c:	f43f ae6b 	beq.w	800bcf6 <_printf_float+0xc2>
 800c020:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c024:	2200      	movs	r2, #0
 800c026:	2300      	movs	r3, #0
 800c028:	f7f4 fd6e 	bl	8000b08 <__aeabi_dcmpeq>
 800c02c:	b9d8      	cbnz	r0, 800c066 <_printf_float+0x432>
 800c02e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c030:	f108 0201 	add.w	r2, r8, #1
 800c034:	3b01      	subs	r3, #1
 800c036:	4631      	mov	r1, r6
 800c038:	4628      	mov	r0, r5
 800c03a:	47b8      	blx	r7
 800c03c:	3001      	adds	r0, #1
 800c03e:	d10e      	bne.n	800c05e <_printf_float+0x42a>
 800c040:	e659      	b.n	800bcf6 <_printf_float+0xc2>
 800c042:	2301      	movs	r3, #1
 800c044:	4652      	mov	r2, sl
 800c046:	4631      	mov	r1, r6
 800c048:	4628      	mov	r0, r5
 800c04a:	47b8      	blx	r7
 800c04c:	3001      	adds	r0, #1
 800c04e:	f43f ae52 	beq.w	800bcf6 <_printf_float+0xc2>
 800c052:	f108 0801 	add.w	r8, r8, #1
 800c056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c058:	3b01      	subs	r3, #1
 800c05a:	4543      	cmp	r3, r8
 800c05c:	dcf1      	bgt.n	800c042 <_printf_float+0x40e>
 800c05e:	464b      	mov	r3, r9
 800c060:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c064:	e6dc      	b.n	800be20 <_printf_float+0x1ec>
 800c066:	f04f 0800 	mov.w	r8, #0
 800c06a:	f104 0a1a 	add.w	sl, r4, #26
 800c06e:	e7f2      	b.n	800c056 <_printf_float+0x422>
 800c070:	2301      	movs	r3, #1
 800c072:	4642      	mov	r2, r8
 800c074:	e7df      	b.n	800c036 <_printf_float+0x402>
 800c076:	2301      	movs	r3, #1
 800c078:	464a      	mov	r2, r9
 800c07a:	4631      	mov	r1, r6
 800c07c:	4628      	mov	r0, r5
 800c07e:	47b8      	blx	r7
 800c080:	3001      	adds	r0, #1
 800c082:	f43f ae38 	beq.w	800bcf6 <_printf_float+0xc2>
 800c086:	f108 0801 	add.w	r8, r8, #1
 800c08a:	68e3      	ldr	r3, [r4, #12]
 800c08c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c08e:	1a5b      	subs	r3, r3, r1
 800c090:	4543      	cmp	r3, r8
 800c092:	dcf0      	bgt.n	800c076 <_printf_float+0x442>
 800c094:	e6fa      	b.n	800be8c <_printf_float+0x258>
 800c096:	f04f 0800 	mov.w	r8, #0
 800c09a:	f104 0919 	add.w	r9, r4, #25
 800c09e:	e7f4      	b.n	800c08a <_printf_float+0x456>

0800c0a0 <_printf_common>:
 800c0a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0a4:	4616      	mov	r6, r2
 800c0a6:	4699      	mov	r9, r3
 800c0a8:	688a      	ldr	r2, [r1, #8]
 800c0aa:	690b      	ldr	r3, [r1, #16]
 800c0ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c0b0:	4293      	cmp	r3, r2
 800c0b2:	bfb8      	it	lt
 800c0b4:	4613      	movlt	r3, r2
 800c0b6:	6033      	str	r3, [r6, #0]
 800c0b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c0bc:	4607      	mov	r7, r0
 800c0be:	460c      	mov	r4, r1
 800c0c0:	b10a      	cbz	r2, 800c0c6 <_printf_common+0x26>
 800c0c2:	3301      	adds	r3, #1
 800c0c4:	6033      	str	r3, [r6, #0]
 800c0c6:	6823      	ldr	r3, [r4, #0]
 800c0c8:	0699      	lsls	r1, r3, #26
 800c0ca:	bf42      	ittt	mi
 800c0cc:	6833      	ldrmi	r3, [r6, #0]
 800c0ce:	3302      	addmi	r3, #2
 800c0d0:	6033      	strmi	r3, [r6, #0]
 800c0d2:	6825      	ldr	r5, [r4, #0]
 800c0d4:	f015 0506 	ands.w	r5, r5, #6
 800c0d8:	d106      	bne.n	800c0e8 <_printf_common+0x48>
 800c0da:	f104 0a19 	add.w	sl, r4, #25
 800c0de:	68e3      	ldr	r3, [r4, #12]
 800c0e0:	6832      	ldr	r2, [r6, #0]
 800c0e2:	1a9b      	subs	r3, r3, r2
 800c0e4:	42ab      	cmp	r3, r5
 800c0e6:	dc26      	bgt.n	800c136 <_printf_common+0x96>
 800c0e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c0ec:	1e13      	subs	r3, r2, #0
 800c0ee:	6822      	ldr	r2, [r4, #0]
 800c0f0:	bf18      	it	ne
 800c0f2:	2301      	movne	r3, #1
 800c0f4:	0692      	lsls	r2, r2, #26
 800c0f6:	d42b      	bmi.n	800c150 <_printf_common+0xb0>
 800c0f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c0fc:	4649      	mov	r1, r9
 800c0fe:	4638      	mov	r0, r7
 800c100:	47c0      	blx	r8
 800c102:	3001      	adds	r0, #1
 800c104:	d01e      	beq.n	800c144 <_printf_common+0xa4>
 800c106:	6823      	ldr	r3, [r4, #0]
 800c108:	68e5      	ldr	r5, [r4, #12]
 800c10a:	6832      	ldr	r2, [r6, #0]
 800c10c:	f003 0306 	and.w	r3, r3, #6
 800c110:	2b04      	cmp	r3, #4
 800c112:	bf08      	it	eq
 800c114:	1aad      	subeq	r5, r5, r2
 800c116:	68a3      	ldr	r3, [r4, #8]
 800c118:	6922      	ldr	r2, [r4, #16]
 800c11a:	bf0c      	ite	eq
 800c11c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c120:	2500      	movne	r5, #0
 800c122:	4293      	cmp	r3, r2
 800c124:	bfc4      	itt	gt
 800c126:	1a9b      	subgt	r3, r3, r2
 800c128:	18ed      	addgt	r5, r5, r3
 800c12a:	2600      	movs	r6, #0
 800c12c:	341a      	adds	r4, #26
 800c12e:	42b5      	cmp	r5, r6
 800c130:	d11a      	bne.n	800c168 <_printf_common+0xc8>
 800c132:	2000      	movs	r0, #0
 800c134:	e008      	b.n	800c148 <_printf_common+0xa8>
 800c136:	2301      	movs	r3, #1
 800c138:	4652      	mov	r2, sl
 800c13a:	4649      	mov	r1, r9
 800c13c:	4638      	mov	r0, r7
 800c13e:	47c0      	blx	r8
 800c140:	3001      	adds	r0, #1
 800c142:	d103      	bne.n	800c14c <_printf_common+0xac>
 800c144:	f04f 30ff 	mov.w	r0, #4294967295
 800c148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c14c:	3501      	adds	r5, #1
 800c14e:	e7c6      	b.n	800c0de <_printf_common+0x3e>
 800c150:	18e1      	adds	r1, r4, r3
 800c152:	1c5a      	adds	r2, r3, #1
 800c154:	2030      	movs	r0, #48	; 0x30
 800c156:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c15a:	4422      	add	r2, r4
 800c15c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c160:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c164:	3302      	adds	r3, #2
 800c166:	e7c7      	b.n	800c0f8 <_printf_common+0x58>
 800c168:	2301      	movs	r3, #1
 800c16a:	4622      	mov	r2, r4
 800c16c:	4649      	mov	r1, r9
 800c16e:	4638      	mov	r0, r7
 800c170:	47c0      	blx	r8
 800c172:	3001      	adds	r0, #1
 800c174:	d0e6      	beq.n	800c144 <_printf_common+0xa4>
 800c176:	3601      	adds	r6, #1
 800c178:	e7d9      	b.n	800c12e <_printf_common+0x8e>
	...

0800c17c <_printf_i>:
 800c17c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c180:	7e0f      	ldrb	r7, [r1, #24]
 800c182:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c184:	2f78      	cmp	r7, #120	; 0x78
 800c186:	4691      	mov	r9, r2
 800c188:	4680      	mov	r8, r0
 800c18a:	460c      	mov	r4, r1
 800c18c:	469a      	mov	sl, r3
 800c18e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c192:	d807      	bhi.n	800c1a4 <_printf_i+0x28>
 800c194:	2f62      	cmp	r7, #98	; 0x62
 800c196:	d80a      	bhi.n	800c1ae <_printf_i+0x32>
 800c198:	2f00      	cmp	r7, #0
 800c19a:	f000 80d8 	beq.w	800c34e <_printf_i+0x1d2>
 800c19e:	2f58      	cmp	r7, #88	; 0x58
 800c1a0:	f000 80a3 	beq.w	800c2ea <_printf_i+0x16e>
 800c1a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c1a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c1ac:	e03a      	b.n	800c224 <_printf_i+0xa8>
 800c1ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c1b2:	2b15      	cmp	r3, #21
 800c1b4:	d8f6      	bhi.n	800c1a4 <_printf_i+0x28>
 800c1b6:	a101      	add	r1, pc, #4	; (adr r1, 800c1bc <_printf_i+0x40>)
 800c1b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c1bc:	0800c215 	.word	0x0800c215
 800c1c0:	0800c229 	.word	0x0800c229
 800c1c4:	0800c1a5 	.word	0x0800c1a5
 800c1c8:	0800c1a5 	.word	0x0800c1a5
 800c1cc:	0800c1a5 	.word	0x0800c1a5
 800c1d0:	0800c1a5 	.word	0x0800c1a5
 800c1d4:	0800c229 	.word	0x0800c229
 800c1d8:	0800c1a5 	.word	0x0800c1a5
 800c1dc:	0800c1a5 	.word	0x0800c1a5
 800c1e0:	0800c1a5 	.word	0x0800c1a5
 800c1e4:	0800c1a5 	.word	0x0800c1a5
 800c1e8:	0800c335 	.word	0x0800c335
 800c1ec:	0800c259 	.word	0x0800c259
 800c1f0:	0800c317 	.word	0x0800c317
 800c1f4:	0800c1a5 	.word	0x0800c1a5
 800c1f8:	0800c1a5 	.word	0x0800c1a5
 800c1fc:	0800c357 	.word	0x0800c357
 800c200:	0800c1a5 	.word	0x0800c1a5
 800c204:	0800c259 	.word	0x0800c259
 800c208:	0800c1a5 	.word	0x0800c1a5
 800c20c:	0800c1a5 	.word	0x0800c1a5
 800c210:	0800c31f 	.word	0x0800c31f
 800c214:	682b      	ldr	r3, [r5, #0]
 800c216:	1d1a      	adds	r2, r3, #4
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	602a      	str	r2, [r5, #0]
 800c21c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c220:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c224:	2301      	movs	r3, #1
 800c226:	e0a3      	b.n	800c370 <_printf_i+0x1f4>
 800c228:	6820      	ldr	r0, [r4, #0]
 800c22a:	6829      	ldr	r1, [r5, #0]
 800c22c:	0606      	lsls	r6, r0, #24
 800c22e:	f101 0304 	add.w	r3, r1, #4
 800c232:	d50a      	bpl.n	800c24a <_printf_i+0xce>
 800c234:	680e      	ldr	r6, [r1, #0]
 800c236:	602b      	str	r3, [r5, #0]
 800c238:	2e00      	cmp	r6, #0
 800c23a:	da03      	bge.n	800c244 <_printf_i+0xc8>
 800c23c:	232d      	movs	r3, #45	; 0x2d
 800c23e:	4276      	negs	r6, r6
 800c240:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c244:	485e      	ldr	r0, [pc, #376]	; (800c3c0 <_printf_i+0x244>)
 800c246:	230a      	movs	r3, #10
 800c248:	e019      	b.n	800c27e <_printf_i+0x102>
 800c24a:	680e      	ldr	r6, [r1, #0]
 800c24c:	602b      	str	r3, [r5, #0]
 800c24e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c252:	bf18      	it	ne
 800c254:	b236      	sxthne	r6, r6
 800c256:	e7ef      	b.n	800c238 <_printf_i+0xbc>
 800c258:	682b      	ldr	r3, [r5, #0]
 800c25a:	6820      	ldr	r0, [r4, #0]
 800c25c:	1d19      	adds	r1, r3, #4
 800c25e:	6029      	str	r1, [r5, #0]
 800c260:	0601      	lsls	r1, r0, #24
 800c262:	d501      	bpl.n	800c268 <_printf_i+0xec>
 800c264:	681e      	ldr	r6, [r3, #0]
 800c266:	e002      	b.n	800c26e <_printf_i+0xf2>
 800c268:	0646      	lsls	r6, r0, #25
 800c26a:	d5fb      	bpl.n	800c264 <_printf_i+0xe8>
 800c26c:	881e      	ldrh	r6, [r3, #0]
 800c26e:	4854      	ldr	r0, [pc, #336]	; (800c3c0 <_printf_i+0x244>)
 800c270:	2f6f      	cmp	r7, #111	; 0x6f
 800c272:	bf0c      	ite	eq
 800c274:	2308      	moveq	r3, #8
 800c276:	230a      	movne	r3, #10
 800c278:	2100      	movs	r1, #0
 800c27a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c27e:	6865      	ldr	r5, [r4, #4]
 800c280:	60a5      	str	r5, [r4, #8]
 800c282:	2d00      	cmp	r5, #0
 800c284:	bfa2      	ittt	ge
 800c286:	6821      	ldrge	r1, [r4, #0]
 800c288:	f021 0104 	bicge.w	r1, r1, #4
 800c28c:	6021      	strge	r1, [r4, #0]
 800c28e:	b90e      	cbnz	r6, 800c294 <_printf_i+0x118>
 800c290:	2d00      	cmp	r5, #0
 800c292:	d04d      	beq.n	800c330 <_printf_i+0x1b4>
 800c294:	4615      	mov	r5, r2
 800c296:	fbb6 f1f3 	udiv	r1, r6, r3
 800c29a:	fb03 6711 	mls	r7, r3, r1, r6
 800c29e:	5dc7      	ldrb	r7, [r0, r7]
 800c2a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c2a4:	4637      	mov	r7, r6
 800c2a6:	42bb      	cmp	r3, r7
 800c2a8:	460e      	mov	r6, r1
 800c2aa:	d9f4      	bls.n	800c296 <_printf_i+0x11a>
 800c2ac:	2b08      	cmp	r3, #8
 800c2ae:	d10b      	bne.n	800c2c8 <_printf_i+0x14c>
 800c2b0:	6823      	ldr	r3, [r4, #0]
 800c2b2:	07de      	lsls	r6, r3, #31
 800c2b4:	d508      	bpl.n	800c2c8 <_printf_i+0x14c>
 800c2b6:	6923      	ldr	r3, [r4, #16]
 800c2b8:	6861      	ldr	r1, [r4, #4]
 800c2ba:	4299      	cmp	r1, r3
 800c2bc:	bfde      	ittt	le
 800c2be:	2330      	movle	r3, #48	; 0x30
 800c2c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c2c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c2c8:	1b52      	subs	r2, r2, r5
 800c2ca:	6122      	str	r2, [r4, #16]
 800c2cc:	f8cd a000 	str.w	sl, [sp]
 800c2d0:	464b      	mov	r3, r9
 800c2d2:	aa03      	add	r2, sp, #12
 800c2d4:	4621      	mov	r1, r4
 800c2d6:	4640      	mov	r0, r8
 800c2d8:	f7ff fee2 	bl	800c0a0 <_printf_common>
 800c2dc:	3001      	adds	r0, #1
 800c2de:	d14c      	bne.n	800c37a <_printf_i+0x1fe>
 800c2e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c2e4:	b004      	add	sp, #16
 800c2e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2ea:	4835      	ldr	r0, [pc, #212]	; (800c3c0 <_printf_i+0x244>)
 800c2ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c2f0:	6829      	ldr	r1, [r5, #0]
 800c2f2:	6823      	ldr	r3, [r4, #0]
 800c2f4:	f851 6b04 	ldr.w	r6, [r1], #4
 800c2f8:	6029      	str	r1, [r5, #0]
 800c2fa:	061d      	lsls	r5, r3, #24
 800c2fc:	d514      	bpl.n	800c328 <_printf_i+0x1ac>
 800c2fe:	07df      	lsls	r7, r3, #31
 800c300:	bf44      	itt	mi
 800c302:	f043 0320 	orrmi.w	r3, r3, #32
 800c306:	6023      	strmi	r3, [r4, #0]
 800c308:	b91e      	cbnz	r6, 800c312 <_printf_i+0x196>
 800c30a:	6823      	ldr	r3, [r4, #0]
 800c30c:	f023 0320 	bic.w	r3, r3, #32
 800c310:	6023      	str	r3, [r4, #0]
 800c312:	2310      	movs	r3, #16
 800c314:	e7b0      	b.n	800c278 <_printf_i+0xfc>
 800c316:	6823      	ldr	r3, [r4, #0]
 800c318:	f043 0320 	orr.w	r3, r3, #32
 800c31c:	6023      	str	r3, [r4, #0]
 800c31e:	2378      	movs	r3, #120	; 0x78
 800c320:	4828      	ldr	r0, [pc, #160]	; (800c3c4 <_printf_i+0x248>)
 800c322:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c326:	e7e3      	b.n	800c2f0 <_printf_i+0x174>
 800c328:	0659      	lsls	r1, r3, #25
 800c32a:	bf48      	it	mi
 800c32c:	b2b6      	uxthmi	r6, r6
 800c32e:	e7e6      	b.n	800c2fe <_printf_i+0x182>
 800c330:	4615      	mov	r5, r2
 800c332:	e7bb      	b.n	800c2ac <_printf_i+0x130>
 800c334:	682b      	ldr	r3, [r5, #0]
 800c336:	6826      	ldr	r6, [r4, #0]
 800c338:	6961      	ldr	r1, [r4, #20]
 800c33a:	1d18      	adds	r0, r3, #4
 800c33c:	6028      	str	r0, [r5, #0]
 800c33e:	0635      	lsls	r5, r6, #24
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	d501      	bpl.n	800c348 <_printf_i+0x1cc>
 800c344:	6019      	str	r1, [r3, #0]
 800c346:	e002      	b.n	800c34e <_printf_i+0x1d2>
 800c348:	0670      	lsls	r0, r6, #25
 800c34a:	d5fb      	bpl.n	800c344 <_printf_i+0x1c8>
 800c34c:	8019      	strh	r1, [r3, #0]
 800c34e:	2300      	movs	r3, #0
 800c350:	6123      	str	r3, [r4, #16]
 800c352:	4615      	mov	r5, r2
 800c354:	e7ba      	b.n	800c2cc <_printf_i+0x150>
 800c356:	682b      	ldr	r3, [r5, #0]
 800c358:	1d1a      	adds	r2, r3, #4
 800c35a:	602a      	str	r2, [r5, #0]
 800c35c:	681d      	ldr	r5, [r3, #0]
 800c35e:	6862      	ldr	r2, [r4, #4]
 800c360:	2100      	movs	r1, #0
 800c362:	4628      	mov	r0, r5
 800c364:	f7f3 ff5c 	bl	8000220 <memchr>
 800c368:	b108      	cbz	r0, 800c36e <_printf_i+0x1f2>
 800c36a:	1b40      	subs	r0, r0, r5
 800c36c:	6060      	str	r0, [r4, #4]
 800c36e:	6863      	ldr	r3, [r4, #4]
 800c370:	6123      	str	r3, [r4, #16]
 800c372:	2300      	movs	r3, #0
 800c374:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c378:	e7a8      	b.n	800c2cc <_printf_i+0x150>
 800c37a:	6923      	ldr	r3, [r4, #16]
 800c37c:	462a      	mov	r2, r5
 800c37e:	4649      	mov	r1, r9
 800c380:	4640      	mov	r0, r8
 800c382:	47d0      	blx	sl
 800c384:	3001      	adds	r0, #1
 800c386:	d0ab      	beq.n	800c2e0 <_printf_i+0x164>
 800c388:	6823      	ldr	r3, [r4, #0]
 800c38a:	079b      	lsls	r3, r3, #30
 800c38c:	d413      	bmi.n	800c3b6 <_printf_i+0x23a>
 800c38e:	68e0      	ldr	r0, [r4, #12]
 800c390:	9b03      	ldr	r3, [sp, #12]
 800c392:	4298      	cmp	r0, r3
 800c394:	bfb8      	it	lt
 800c396:	4618      	movlt	r0, r3
 800c398:	e7a4      	b.n	800c2e4 <_printf_i+0x168>
 800c39a:	2301      	movs	r3, #1
 800c39c:	4632      	mov	r2, r6
 800c39e:	4649      	mov	r1, r9
 800c3a0:	4640      	mov	r0, r8
 800c3a2:	47d0      	blx	sl
 800c3a4:	3001      	adds	r0, #1
 800c3a6:	d09b      	beq.n	800c2e0 <_printf_i+0x164>
 800c3a8:	3501      	adds	r5, #1
 800c3aa:	68e3      	ldr	r3, [r4, #12]
 800c3ac:	9903      	ldr	r1, [sp, #12]
 800c3ae:	1a5b      	subs	r3, r3, r1
 800c3b0:	42ab      	cmp	r3, r5
 800c3b2:	dcf2      	bgt.n	800c39a <_printf_i+0x21e>
 800c3b4:	e7eb      	b.n	800c38e <_printf_i+0x212>
 800c3b6:	2500      	movs	r5, #0
 800c3b8:	f104 0619 	add.w	r6, r4, #25
 800c3bc:	e7f5      	b.n	800c3aa <_printf_i+0x22e>
 800c3be:	bf00      	nop
 800c3c0:	080104f6 	.word	0x080104f6
 800c3c4:	08010507 	.word	0x08010507

0800c3c8 <_scanf_float>:
 800c3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3cc:	b087      	sub	sp, #28
 800c3ce:	4617      	mov	r7, r2
 800c3d0:	9303      	str	r3, [sp, #12]
 800c3d2:	688b      	ldr	r3, [r1, #8]
 800c3d4:	1e5a      	subs	r2, r3, #1
 800c3d6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c3da:	bf83      	ittte	hi
 800c3dc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c3e0:	195b      	addhi	r3, r3, r5
 800c3e2:	9302      	strhi	r3, [sp, #8]
 800c3e4:	2300      	movls	r3, #0
 800c3e6:	bf86      	itte	hi
 800c3e8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c3ec:	608b      	strhi	r3, [r1, #8]
 800c3ee:	9302      	strls	r3, [sp, #8]
 800c3f0:	680b      	ldr	r3, [r1, #0]
 800c3f2:	468b      	mov	fp, r1
 800c3f4:	2500      	movs	r5, #0
 800c3f6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c3fa:	f84b 3b1c 	str.w	r3, [fp], #28
 800c3fe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c402:	4680      	mov	r8, r0
 800c404:	460c      	mov	r4, r1
 800c406:	465e      	mov	r6, fp
 800c408:	46aa      	mov	sl, r5
 800c40a:	46a9      	mov	r9, r5
 800c40c:	9501      	str	r5, [sp, #4]
 800c40e:	68a2      	ldr	r2, [r4, #8]
 800c410:	b152      	cbz	r2, 800c428 <_scanf_float+0x60>
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	781b      	ldrb	r3, [r3, #0]
 800c416:	2b4e      	cmp	r3, #78	; 0x4e
 800c418:	d864      	bhi.n	800c4e4 <_scanf_float+0x11c>
 800c41a:	2b40      	cmp	r3, #64	; 0x40
 800c41c:	d83c      	bhi.n	800c498 <_scanf_float+0xd0>
 800c41e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800c422:	b2c8      	uxtb	r0, r1
 800c424:	280e      	cmp	r0, #14
 800c426:	d93a      	bls.n	800c49e <_scanf_float+0xd6>
 800c428:	f1b9 0f00 	cmp.w	r9, #0
 800c42c:	d003      	beq.n	800c436 <_scanf_float+0x6e>
 800c42e:	6823      	ldr	r3, [r4, #0]
 800c430:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c434:	6023      	str	r3, [r4, #0]
 800c436:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c43a:	f1ba 0f01 	cmp.w	sl, #1
 800c43e:	f200 8113 	bhi.w	800c668 <_scanf_float+0x2a0>
 800c442:	455e      	cmp	r6, fp
 800c444:	f200 8105 	bhi.w	800c652 <_scanf_float+0x28a>
 800c448:	2501      	movs	r5, #1
 800c44a:	4628      	mov	r0, r5
 800c44c:	b007      	add	sp, #28
 800c44e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c452:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800c456:	2a0d      	cmp	r2, #13
 800c458:	d8e6      	bhi.n	800c428 <_scanf_float+0x60>
 800c45a:	a101      	add	r1, pc, #4	; (adr r1, 800c460 <_scanf_float+0x98>)
 800c45c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c460:	0800c59f 	.word	0x0800c59f
 800c464:	0800c429 	.word	0x0800c429
 800c468:	0800c429 	.word	0x0800c429
 800c46c:	0800c429 	.word	0x0800c429
 800c470:	0800c5ff 	.word	0x0800c5ff
 800c474:	0800c5d7 	.word	0x0800c5d7
 800c478:	0800c429 	.word	0x0800c429
 800c47c:	0800c429 	.word	0x0800c429
 800c480:	0800c5ad 	.word	0x0800c5ad
 800c484:	0800c429 	.word	0x0800c429
 800c488:	0800c429 	.word	0x0800c429
 800c48c:	0800c429 	.word	0x0800c429
 800c490:	0800c429 	.word	0x0800c429
 800c494:	0800c565 	.word	0x0800c565
 800c498:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800c49c:	e7db      	b.n	800c456 <_scanf_float+0x8e>
 800c49e:	290e      	cmp	r1, #14
 800c4a0:	d8c2      	bhi.n	800c428 <_scanf_float+0x60>
 800c4a2:	a001      	add	r0, pc, #4	; (adr r0, 800c4a8 <_scanf_float+0xe0>)
 800c4a4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c4a8:	0800c557 	.word	0x0800c557
 800c4ac:	0800c429 	.word	0x0800c429
 800c4b0:	0800c557 	.word	0x0800c557
 800c4b4:	0800c5eb 	.word	0x0800c5eb
 800c4b8:	0800c429 	.word	0x0800c429
 800c4bc:	0800c505 	.word	0x0800c505
 800c4c0:	0800c541 	.word	0x0800c541
 800c4c4:	0800c541 	.word	0x0800c541
 800c4c8:	0800c541 	.word	0x0800c541
 800c4cc:	0800c541 	.word	0x0800c541
 800c4d0:	0800c541 	.word	0x0800c541
 800c4d4:	0800c541 	.word	0x0800c541
 800c4d8:	0800c541 	.word	0x0800c541
 800c4dc:	0800c541 	.word	0x0800c541
 800c4e0:	0800c541 	.word	0x0800c541
 800c4e4:	2b6e      	cmp	r3, #110	; 0x6e
 800c4e6:	d809      	bhi.n	800c4fc <_scanf_float+0x134>
 800c4e8:	2b60      	cmp	r3, #96	; 0x60
 800c4ea:	d8b2      	bhi.n	800c452 <_scanf_float+0x8a>
 800c4ec:	2b54      	cmp	r3, #84	; 0x54
 800c4ee:	d077      	beq.n	800c5e0 <_scanf_float+0x218>
 800c4f0:	2b59      	cmp	r3, #89	; 0x59
 800c4f2:	d199      	bne.n	800c428 <_scanf_float+0x60>
 800c4f4:	2d07      	cmp	r5, #7
 800c4f6:	d197      	bne.n	800c428 <_scanf_float+0x60>
 800c4f8:	2508      	movs	r5, #8
 800c4fa:	e029      	b.n	800c550 <_scanf_float+0x188>
 800c4fc:	2b74      	cmp	r3, #116	; 0x74
 800c4fe:	d06f      	beq.n	800c5e0 <_scanf_float+0x218>
 800c500:	2b79      	cmp	r3, #121	; 0x79
 800c502:	e7f6      	b.n	800c4f2 <_scanf_float+0x12a>
 800c504:	6821      	ldr	r1, [r4, #0]
 800c506:	05c8      	lsls	r0, r1, #23
 800c508:	d51a      	bpl.n	800c540 <_scanf_float+0x178>
 800c50a:	9b02      	ldr	r3, [sp, #8]
 800c50c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c510:	6021      	str	r1, [r4, #0]
 800c512:	f109 0901 	add.w	r9, r9, #1
 800c516:	b11b      	cbz	r3, 800c520 <_scanf_float+0x158>
 800c518:	3b01      	subs	r3, #1
 800c51a:	3201      	adds	r2, #1
 800c51c:	9302      	str	r3, [sp, #8]
 800c51e:	60a2      	str	r2, [r4, #8]
 800c520:	68a3      	ldr	r3, [r4, #8]
 800c522:	3b01      	subs	r3, #1
 800c524:	60a3      	str	r3, [r4, #8]
 800c526:	6923      	ldr	r3, [r4, #16]
 800c528:	3301      	adds	r3, #1
 800c52a:	6123      	str	r3, [r4, #16]
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	3b01      	subs	r3, #1
 800c530:	2b00      	cmp	r3, #0
 800c532:	607b      	str	r3, [r7, #4]
 800c534:	f340 8084 	ble.w	800c640 <_scanf_float+0x278>
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	3301      	adds	r3, #1
 800c53c:	603b      	str	r3, [r7, #0]
 800c53e:	e766      	b.n	800c40e <_scanf_float+0x46>
 800c540:	eb1a 0f05 	cmn.w	sl, r5
 800c544:	f47f af70 	bne.w	800c428 <_scanf_float+0x60>
 800c548:	6822      	ldr	r2, [r4, #0]
 800c54a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800c54e:	6022      	str	r2, [r4, #0]
 800c550:	f806 3b01 	strb.w	r3, [r6], #1
 800c554:	e7e4      	b.n	800c520 <_scanf_float+0x158>
 800c556:	6822      	ldr	r2, [r4, #0]
 800c558:	0610      	lsls	r0, r2, #24
 800c55a:	f57f af65 	bpl.w	800c428 <_scanf_float+0x60>
 800c55e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c562:	e7f4      	b.n	800c54e <_scanf_float+0x186>
 800c564:	f1ba 0f00 	cmp.w	sl, #0
 800c568:	d10e      	bne.n	800c588 <_scanf_float+0x1c0>
 800c56a:	f1b9 0f00 	cmp.w	r9, #0
 800c56e:	d10e      	bne.n	800c58e <_scanf_float+0x1c6>
 800c570:	6822      	ldr	r2, [r4, #0]
 800c572:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c576:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c57a:	d108      	bne.n	800c58e <_scanf_float+0x1c6>
 800c57c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c580:	6022      	str	r2, [r4, #0]
 800c582:	f04f 0a01 	mov.w	sl, #1
 800c586:	e7e3      	b.n	800c550 <_scanf_float+0x188>
 800c588:	f1ba 0f02 	cmp.w	sl, #2
 800c58c:	d055      	beq.n	800c63a <_scanf_float+0x272>
 800c58e:	2d01      	cmp	r5, #1
 800c590:	d002      	beq.n	800c598 <_scanf_float+0x1d0>
 800c592:	2d04      	cmp	r5, #4
 800c594:	f47f af48 	bne.w	800c428 <_scanf_float+0x60>
 800c598:	3501      	adds	r5, #1
 800c59a:	b2ed      	uxtb	r5, r5
 800c59c:	e7d8      	b.n	800c550 <_scanf_float+0x188>
 800c59e:	f1ba 0f01 	cmp.w	sl, #1
 800c5a2:	f47f af41 	bne.w	800c428 <_scanf_float+0x60>
 800c5a6:	f04f 0a02 	mov.w	sl, #2
 800c5aa:	e7d1      	b.n	800c550 <_scanf_float+0x188>
 800c5ac:	b97d      	cbnz	r5, 800c5ce <_scanf_float+0x206>
 800c5ae:	f1b9 0f00 	cmp.w	r9, #0
 800c5b2:	f47f af3c 	bne.w	800c42e <_scanf_float+0x66>
 800c5b6:	6822      	ldr	r2, [r4, #0]
 800c5b8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c5bc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c5c0:	f47f af39 	bne.w	800c436 <_scanf_float+0x6e>
 800c5c4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c5c8:	6022      	str	r2, [r4, #0]
 800c5ca:	2501      	movs	r5, #1
 800c5cc:	e7c0      	b.n	800c550 <_scanf_float+0x188>
 800c5ce:	2d03      	cmp	r5, #3
 800c5d0:	d0e2      	beq.n	800c598 <_scanf_float+0x1d0>
 800c5d2:	2d05      	cmp	r5, #5
 800c5d4:	e7de      	b.n	800c594 <_scanf_float+0x1cc>
 800c5d6:	2d02      	cmp	r5, #2
 800c5d8:	f47f af26 	bne.w	800c428 <_scanf_float+0x60>
 800c5dc:	2503      	movs	r5, #3
 800c5de:	e7b7      	b.n	800c550 <_scanf_float+0x188>
 800c5e0:	2d06      	cmp	r5, #6
 800c5e2:	f47f af21 	bne.w	800c428 <_scanf_float+0x60>
 800c5e6:	2507      	movs	r5, #7
 800c5e8:	e7b2      	b.n	800c550 <_scanf_float+0x188>
 800c5ea:	6822      	ldr	r2, [r4, #0]
 800c5ec:	0591      	lsls	r1, r2, #22
 800c5ee:	f57f af1b 	bpl.w	800c428 <_scanf_float+0x60>
 800c5f2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800c5f6:	6022      	str	r2, [r4, #0]
 800c5f8:	f8cd 9004 	str.w	r9, [sp, #4]
 800c5fc:	e7a8      	b.n	800c550 <_scanf_float+0x188>
 800c5fe:	6822      	ldr	r2, [r4, #0]
 800c600:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800c604:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c608:	d006      	beq.n	800c618 <_scanf_float+0x250>
 800c60a:	0550      	lsls	r0, r2, #21
 800c60c:	f57f af0c 	bpl.w	800c428 <_scanf_float+0x60>
 800c610:	f1b9 0f00 	cmp.w	r9, #0
 800c614:	f43f af0f 	beq.w	800c436 <_scanf_float+0x6e>
 800c618:	0591      	lsls	r1, r2, #22
 800c61a:	bf58      	it	pl
 800c61c:	9901      	ldrpl	r1, [sp, #4]
 800c61e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c622:	bf58      	it	pl
 800c624:	eba9 0101 	subpl.w	r1, r9, r1
 800c628:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800c62c:	bf58      	it	pl
 800c62e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c632:	6022      	str	r2, [r4, #0]
 800c634:	f04f 0900 	mov.w	r9, #0
 800c638:	e78a      	b.n	800c550 <_scanf_float+0x188>
 800c63a:	f04f 0a03 	mov.w	sl, #3
 800c63e:	e787      	b.n	800c550 <_scanf_float+0x188>
 800c640:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c644:	4639      	mov	r1, r7
 800c646:	4640      	mov	r0, r8
 800c648:	4798      	blx	r3
 800c64a:	2800      	cmp	r0, #0
 800c64c:	f43f aedf 	beq.w	800c40e <_scanf_float+0x46>
 800c650:	e6ea      	b.n	800c428 <_scanf_float+0x60>
 800c652:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c656:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c65a:	463a      	mov	r2, r7
 800c65c:	4640      	mov	r0, r8
 800c65e:	4798      	blx	r3
 800c660:	6923      	ldr	r3, [r4, #16]
 800c662:	3b01      	subs	r3, #1
 800c664:	6123      	str	r3, [r4, #16]
 800c666:	e6ec      	b.n	800c442 <_scanf_float+0x7a>
 800c668:	1e6b      	subs	r3, r5, #1
 800c66a:	2b06      	cmp	r3, #6
 800c66c:	d825      	bhi.n	800c6ba <_scanf_float+0x2f2>
 800c66e:	2d02      	cmp	r5, #2
 800c670:	d836      	bhi.n	800c6e0 <_scanf_float+0x318>
 800c672:	455e      	cmp	r6, fp
 800c674:	f67f aee8 	bls.w	800c448 <_scanf_float+0x80>
 800c678:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c67c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c680:	463a      	mov	r2, r7
 800c682:	4640      	mov	r0, r8
 800c684:	4798      	blx	r3
 800c686:	6923      	ldr	r3, [r4, #16]
 800c688:	3b01      	subs	r3, #1
 800c68a:	6123      	str	r3, [r4, #16]
 800c68c:	e7f1      	b.n	800c672 <_scanf_float+0x2aa>
 800c68e:	9802      	ldr	r0, [sp, #8]
 800c690:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c694:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c698:	9002      	str	r0, [sp, #8]
 800c69a:	463a      	mov	r2, r7
 800c69c:	4640      	mov	r0, r8
 800c69e:	4798      	blx	r3
 800c6a0:	6923      	ldr	r3, [r4, #16]
 800c6a2:	3b01      	subs	r3, #1
 800c6a4:	6123      	str	r3, [r4, #16]
 800c6a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c6aa:	fa5f fa8a 	uxtb.w	sl, sl
 800c6ae:	f1ba 0f02 	cmp.w	sl, #2
 800c6b2:	d1ec      	bne.n	800c68e <_scanf_float+0x2c6>
 800c6b4:	3d03      	subs	r5, #3
 800c6b6:	b2ed      	uxtb	r5, r5
 800c6b8:	1b76      	subs	r6, r6, r5
 800c6ba:	6823      	ldr	r3, [r4, #0]
 800c6bc:	05da      	lsls	r2, r3, #23
 800c6be:	d52f      	bpl.n	800c720 <_scanf_float+0x358>
 800c6c0:	055b      	lsls	r3, r3, #21
 800c6c2:	d510      	bpl.n	800c6e6 <_scanf_float+0x31e>
 800c6c4:	455e      	cmp	r6, fp
 800c6c6:	f67f aebf 	bls.w	800c448 <_scanf_float+0x80>
 800c6ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c6ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c6d2:	463a      	mov	r2, r7
 800c6d4:	4640      	mov	r0, r8
 800c6d6:	4798      	blx	r3
 800c6d8:	6923      	ldr	r3, [r4, #16]
 800c6da:	3b01      	subs	r3, #1
 800c6dc:	6123      	str	r3, [r4, #16]
 800c6de:	e7f1      	b.n	800c6c4 <_scanf_float+0x2fc>
 800c6e0:	46aa      	mov	sl, r5
 800c6e2:	9602      	str	r6, [sp, #8]
 800c6e4:	e7df      	b.n	800c6a6 <_scanf_float+0x2de>
 800c6e6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c6ea:	6923      	ldr	r3, [r4, #16]
 800c6ec:	2965      	cmp	r1, #101	; 0x65
 800c6ee:	f103 33ff 	add.w	r3, r3, #4294967295
 800c6f2:	f106 35ff 	add.w	r5, r6, #4294967295
 800c6f6:	6123      	str	r3, [r4, #16]
 800c6f8:	d00c      	beq.n	800c714 <_scanf_float+0x34c>
 800c6fa:	2945      	cmp	r1, #69	; 0x45
 800c6fc:	d00a      	beq.n	800c714 <_scanf_float+0x34c>
 800c6fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c702:	463a      	mov	r2, r7
 800c704:	4640      	mov	r0, r8
 800c706:	4798      	blx	r3
 800c708:	6923      	ldr	r3, [r4, #16]
 800c70a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c70e:	3b01      	subs	r3, #1
 800c710:	1eb5      	subs	r5, r6, #2
 800c712:	6123      	str	r3, [r4, #16]
 800c714:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c718:	463a      	mov	r2, r7
 800c71a:	4640      	mov	r0, r8
 800c71c:	4798      	blx	r3
 800c71e:	462e      	mov	r6, r5
 800c720:	6825      	ldr	r5, [r4, #0]
 800c722:	f015 0510 	ands.w	r5, r5, #16
 800c726:	d159      	bne.n	800c7dc <_scanf_float+0x414>
 800c728:	7035      	strb	r5, [r6, #0]
 800c72a:	6823      	ldr	r3, [r4, #0]
 800c72c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c730:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c734:	d11b      	bne.n	800c76e <_scanf_float+0x3a6>
 800c736:	9b01      	ldr	r3, [sp, #4]
 800c738:	454b      	cmp	r3, r9
 800c73a:	eba3 0209 	sub.w	r2, r3, r9
 800c73e:	d123      	bne.n	800c788 <_scanf_float+0x3c0>
 800c740:	2200      	movs	r2, #0
 800c742:	4659      	mov	r1, fp
 800c744:	4640      	mov	r0, r8
 800c746:	f000 fe99 	bl	800d47c <_strtod_r>
 800c74a:	6822      	ldr	r2, [r4, #0]
 800c74c:	9b03      	ldr	r3, [sp, #12]
 800c74e:	f012 0f02 	tst.w	r2, #2
 800c752:	ec57 6b10 	vmov	r6, r7, d0
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	d021      	beq.n	800c79e <_scanf_float+0x3d6>
 800c75a:	9903      	ldr	r1, [sp, #12]
 800c75c:	1d1a      	adds	r2, r3, #4
 800c75e:	600a      	str	r2, [r1, #0]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	e9c3 6700 	strd	r6, r7, [r3]
 800c766:	68e3      	ldr	r3, [r4, #12]
 800c768:	3301      	adds	r3, #1
 800c76a:	60e3      	str	r3, [r4, #12]
 800c76c:	e66d      	b.n	800c44a <_scanf_float+0x82>
 800c76e:	9b04      	ldr	r3, [sp, #16]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d0e5      	beq.n	800c740 <_scanf_float+0x378>
 800c774:	9905      	ldr	r1, [sp, #20]
 800c776:	230a      	movs	r3, #10
 800c778:	462a      	mov	r2, r5
 800c77a:	3101      	adds	r1, #1
 800c77c:	4640      	mov	r0, r8
 800c77e:	f000 ff05 	bl	800d58c <_strtol_r>
 800c782:	9b04      	ldr	r3, [sp, #16]
 800c784:	9e05      	ldr	r6, [sp, #20]
 800c786:	1ac2      	subs	r2, r0, r3
 800c788:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c78c:	429e      	cmp	r6, r3
 800c78e:	bf28      	it	cs
 800c790:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800c794:	4912      	ldr	r1, [pc, #72]	; (800c7e0 <_scanf_float+0x418>)
 800c796:	4630      	mov	r0, r6
 800c798:	f000 f82c 	bl	800c7f4 <siprintf>
 800c79c:	e7d0      	b.n	800c740 <_scanf_float+0x378>
 800c79e:	9903      	ldr	r1, [sp, #12]
 800c7a0:	f012 0f04 	tst.w	r2, #4
 800c7a4:	f103 0204 	add.w	r2, r3, #4
 800c7a8:	600a      	str	r2, [r1, #0]
 800c7aa:	d1d9      	bne.n	800c760 <_scanf_float+0x398>
 800c7ac:	f8d3 8000 	ldr.w	r8, [r3]
 800c7b0:	ee10 2a10 	vmov	r2, s0
 800c7b4:	ee10 0a10 	vmov	r0, s0
 800c7b8:	463b      	mov	r3, r7
 800c7ba:	4639      	mov	r1, r7
 800c7bc:	f7f4 f9d6 	bl	8000b6c <__aeabi_dcmpun>
 800c7c0:	b128      	cbz	r0, 800c7ce <_scanf_float+0x406>
 800c7c2:	4808      	ldr	r0, [pc, #32]	; (800c7e4 <_scanf_float+0x41c>)
 800c7c4:	f000 f810 	bl	800c7e8 <nanf>
 800c7c8:	ed88 0a00 	vstr	s0, [r8]
 800c7cc:	e7cb      	b.n	800c766 <_scanf_float+0x39e>
 800c7ce:	4630      	mov	r0, r6
 800c7d0:	4639      	mov	r1, r7
 800c7d2:	f7f4 fa29 	bl	8000c28 <__aeabi_d2f>
 800c7d6:	f8c8 0000 	str.w	r0, [r8]
 800c7da:	e7c4      	b.n	800c766 <_scanf_float+0x39e>
 800c7dc:	2500      	movs	r5, #0
 800c7de:	e634      	b.n	800c44a <_scanf_float+0x82>
 800c7e0:	08010518 	.word	0x08010518
 800c7e4:	08010948 	.word	0x08010948

0800c7e8 <nanf>:
 800c7e8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c7f0 <nanf+0x8>
 800c7ec:	4770      	bx	lr
 800c7ee:	bf00      	nop
 800c7f0:	7fc00000 	.word	0x7fc00000

0800c7f4 <siprintf>:
 800c7f4:	b40e      	push	{r1, r2, r3}
 800c7f6:	b500      	push	{lr}
 800c7f8:	b09c      	sub	sp, #112	; 0x70
 800c7fa:	ab1d      	add	r3, sp, #116	; 0x74
 800c7fc:	9002      	str	r0, [sp, #8]
 800c7fe:	9006      	str	r0, [sp, #24]
 800c800:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c804:	4809      	ldr	r0, [pc, #36]	; (800c82c <siprintf+0x38>)
 800c806:	9107      	str	r1, [sp, #28]
 800c808:	9104      	str	r1, [sp, #16]
 800c80a:	4909      	ldr	r1, [pc, #36]	; (800c830 <siprintf+0x3c>)
 800c80c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c810:	9105      	str	r1, [sp, #20]
 800c812:	6800      	ldr	r0, [r0, #0]
 800c814:	9301      	str	r3, [sp, #4]
 800c816:	a902      	add	r1, sp, #8
 800c818:	f002 ff28 	bl	800f66c <_svfiprintf_r>
 800c81c:	9b02      	ldr	r3, [sp, #8]
 800c81e:	2200      	movs	r2, #0
 800c820:	701a      	strb	r2, [r3, #0]
 800c822:	b01c      	add	sp, #112	; 0x70
 800c824:	f85d eb04 	ldr.w	lr, [sp], #4
 800c828:	b003      	add	sp, #12
 800c82a:	4770      	bx	lr
 800c82c:	2000011c 	.word	0x2000011c
 800c830:	ffff0208 	.word	0xffff0208

0800c834 <sulp>:
 800c834:	b570      	push	{r4, r5, r6, lr}
 800c836:	4604      	mov	r4, r0
 800c838:	460d      	mov	r5, r1
 800c83a:	ec45 4b10 	vmov	d0, r4, r5
 800c83e:	4616      	mov	r6, r2
 800c840:	f002 fc72 	bl	800f128 <__ulp>
 800c844:	ec51 0b10 	vmov	r0, r1, d0
 800c848:	b17e      	cbz	r6, 800c86a <sulp+0x36>
 800c84a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c84e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c852:	2b00      	cmp	r3, #0
 800c854:	dd09      	ble.n	800c86a <sulp+0x36>
 800c856:	051b      	lsls	r3, r3, #20
 800c858:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c85c:	2400      	movs	r4, #0
 800c85e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c862:	4622      	mov	r2, r4
 800c864:	462b      	mov	r3, r5
 800c866:	f7f3 fee7 	bl	8000638 <__aeabi_dmul>
 800c86a:	bd70      	pop	{r4, r5, r6, pc}
 800c86c:	0000      	movs	r0, r0
	...

0800c870 <_strtod_l>:
 800c870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c874:	ed2d 8b02 	vpush	{d8}
 800c878:	b09d      	sub	sp, #116	; 0x74
 800c87a:	461f      	mov	r7, r3
 800c87c:	2300      	movs	r3, #0
 800c87e:	9318      	str	r3, [sp, #96]	; 0x60
 800c880:	4ba2      	ldr	r3, [pc, #648]	; (800cb0c <_strtod_l+0x29c>)
 800c882:	9213      	str	r2, [sp, #76]	; 0x4c
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	9305      	str	r3, [sp, #20]
 800c888:	4604      	mov	r4, r0
 800c88a:	4618      	mov	r0, r3
 800c88c:	4688      	mov	r8, r1
 800c88e:	f7f3 fcbf 	bl	8000210 <strlen>
 800c892:	f04f 0a00 	mov.w	sl, #0
 800c896:	4605      	mov	r5, r0
 800c898:	f04f 0b00 	mov.w	fp, #0
 800c89c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c8a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c8a2:	781a      	ldrb	r2, [r3, #0]
 800c8a4:	2a2b      	cmp	r2, #43	; 0x2b
 800c8a6:	d04e      	beq.n	800c946 <_strtod_l+0xd6>
 800c8a8:	d83b      	bhi.n	800c922 <_strtod_l+0xb2>
 800c8aa:	2a0d      	cmp	r2, #13
 800c8ac:	d834      	bhi.n	800c918 <_strtod_l+0xa8>
 800c8ae:	2a08      	cmp	r2, #8
 800c8b0:	d834      	bhi.n	800c91c <_strtod_l+0xac>
 800c8b2:	2a00      	cmp	r2, #0
 800c8b4:	d03e      	beq.n	800c934 <_strtod_l+0xc4>
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	930a      	str	r3, [sp, #40]	; 0x28
 800c8ba:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c8bc:	7833      	ldrb	r3, [r6, #0]
 800c8be:	2b30      	cmp	r3, #48	; 0x30
 800c8c0:	f040 80b0 	bne.w	800ca24 <_strtod_l+0x1b4>
 800c8c4:	7873      	ldrb	r3, [r6, #1]
 800c8c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c8ca:	2b58      	cmp	r3, #88	; 0x58
 800c8cc:	d168      	bne.n	800c9a0 <_strtod_l+0x130>
 800c8ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8d0:	9301      	str	r3, [sp, #4]
 800c8d2:	ab18      	add	r3, sp, #96	; 0x60
 800c8d4:	9702      	str	r7, [sp, #8]
 800c8d6:	9300      	str	r3, [sp, #0]
 800c8d8:	4a8d      	ldr	r2, [pc, #564]	; (800cb10 <_strtod_l+0x2a0>)
 800c8da:	ab19      	add	r3, sp, #100	; 0x64
 800c8dc:	a917      	add	r1, sp, #92	; 0x5c
 800c8de:	4620      	mov	r0, r4
 800c8e0:	f001 fd7c 	bl	800e3dc <__gethex>
 800c8e4:	f010 0707 	ands.w	r7, r0, #7
 800c8e8:	4605      	mov	r5, r0
 800c8ea:	d005      	beq.n	800c8f8 <_strtod_l+0x88>
 800c8ec:	2f06      	cmp	r7, #6
 800c8ee:	d12c      	bne.n	800c94a <_strtod_l+0xda>
 800c8f0:	3601      	adds	r6, #1
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	9617      	str	r6, [sp, #92]	; 0x5c
 800c8f6:	930a      	str	r3, [sp, #40]	; 0x28
 800c8f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	f040 8590 	bne.w	800d420 <_strtod_l+0xbb0>
 800c900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c902:	b1eb      	cbz	r3, 800c940 <_strtod_l+0xd0>
 800c904:	4652      	mov	r2, sl
 800c906:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c90a:	ec43 2b10 	vmov	d0, r2, r3
 800c90e:	b01d      	add	sp, #116	; 0x74
 800c910:	ecbd 8b02 	vpop	{d8}
 800c914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c918:	2a20      	cmp	r2, #32
 800c91a:	d1cc      	bne.n	800c8b6 <_strtod_l+0x46>
 800c91c:	3301      	adds	r3, #1
 800c91e:	9317      	str	r3, [sp, #92]	; 0x5c
 800c920:	e7be      	b.n	800c8a0 <_strtod_l+0x30>
 800c922:	2a2d      	cmp	r2, #45	; 0x2d
 800c924:	d1c7      	bne.n	800c8b6 <_strtod_l+0x46>
 800c926:	2201      	movs	r2, #1
 800c928:	920a      	str	r2, [sp, #40]	; 0x28
 800c92a:	1c5a      	adds	r2, r3, #1
 800c92c:	9217      	str	r2, [sp, #92]	; 0x5c
 800c92e:	785b      	ldrb	r3, [r3, #1]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d1c2      	bne.n	800c8ba <_strtod_l+0x4a>
 800c934:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c936:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	f040 856e 	bne.w	800d41c <_strtod_l+0xbac>
 800c940:	4652      	mov	r2, sl
 800c942:	465b      	mov	r3, fp
 800c944:	e7e1      	b.n	800c90a <_strtod_l+0x9a>
 800c946:	2200      	movs	r2, #0
 800c948:	e7ee      	b.n	800c928 <_strtod_l+0xb8>
 800c94a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c94c:	b13a      	cbz	r2, 800c95e <_strtod_l+0xee>
 800c94e:	2135      	movs	r1, #53	; 0x35
 800c950:	a81a      	add	r0, sp, #104	; 0x68
 800c952:	f002 fcf4 	bl	800f33e <__copybits>
 800c956:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c958:	4620      	mov	r0, r4
 800c95a:	f002 f8b3 	bl	800eac4 <_Bfree>
 800c95e:	3f01      	subs	r7, #1
 800c960:	2f04      	cmp	r7, #4
 800c962:	d806      	bhi.n	800c972 <_strtod_l+0x102>
 800c964:	e8df f007 	tbb	[pc, r7]
 800c968:	1714030a 	.word	0x1714030a
 800c96c:	0a          	.byte	0x0a
 800c96d:	00          	.byte	0x00
 800c96e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800c972:	0728      	lsls	r0, r5, #28
 800c974:	d5c0      	bpl.n	800c8f8 <_strtod_l+0x88>
 800c976:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c97a:	e7bd      	b.n	800c8f8 <_strtod_l+0x88>
 800c97c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800c980:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c982:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c986:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c98a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c98e:	e7f0      	b.n	800c972 <_strtod_l+0x102>
 800c990:	f8df b180 	ldr.w	fp, [pc, #384]	; 800cb14 <_strtod_l+0x2a4>
 800c994:	e7ed      	b.n	800c972 <_strtod_l+0x102>
 800c996:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c99a:	f04f 3aff 	mov.w	sl, #4294967295
 800c99e:	e7e8      	b.n	800c972 <_strtod_l+0x102>
 800c9a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c9a2:	1c5a      	adds	r2, r3, #1
 800c9a4:	9217      	str	r2, [sp, #92]	; 0x5c
 800c9a6:	785b      	ldrb	r3, [r3, #1]
 800c9a8:	2b30      	cmp	r3, #48	; 0x30
 800c9aa:	d0f9      	beq.n	800c9a0 <_strtod_l+0x130>
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d0a3      	beq.n	800c8f8 <_strtod_l+0x88>
 800c9b0:	2301      	movs	r3, #1
 800c9b2:	f04f 0900 	mov.w	r9, #0
 800c9b6:	9304      	str	r3, [sp, #16]
 800c9b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c9ba:	9308      	str	r3, [sp, #32]
 800c9bc:	f8cd 901c 	str.w	r9, [sp, #28]
 800c9c0:	464f      	mov	r7, r9
 800c9c2:	220a      	movs	r2, #10
 800c9c4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c9c6:	7806      	ldrb	r6, [r0, #0]
 800c9c8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c9cc:	b2d9      	uxtb	r1, r3
 800c9ce:	2909      	cmp	r1, #9
 800c9d0:	d92a      	bls.n	800ca28 <_strtod_l+0x1b8>
 800c9d2:	9905      	ldr	r1, [sp, #20]
 800c9d4:	462a      	mov	r2, r5
 800c9d6:	f002 ff63 	bl	800f8a0 <strncmp>
 800c9da:	b398      	cbz	r0, 800ca44 <_strtod_l+0x1d4>
 800c9dc:	2000      	movs	r0, #0
 800c9de:	4632      	mov	r2, r6
 800c9e0:	463d      	mov	r5, r7
 800c9e2:	9005      	str	r0, [sp, #20]
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	2a65      	cmp	r2, #101	; 0x65
 800c9e8:	d001      	beq.n	800c9ee <_strtod_l+0x17e>
 800c9ea:	2a45      	cmp	r2, #69	; 0x45
 800c9ec:	d118      	bne.n	800ca20 <_strtod_l+0x1b0>
 800c9ee:	b91d      	cbnz	r5, 800c9f8 <_strtod_l+0x188>
 800c9f0:	9a04      	ldr	r2, [sp, #16]
 800c9f2:	4302      	orrs	r2, r0
 800c9f4:	d09e      	beq.n	800c934 <_strtod_l+0xc4>
 800c9f6:	2500      	movs	r5, #0
 800c9f8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800c9fc:	f108 0201 	add.w	r2, r8, #1
 800ca00:	9217      	str	r2, [sp, #92]	; 0x5c
 800ca02:	f898 2001 	ldrb.w	r2, [r8, #1]
 800ca06:	2a2b      	cmp	r2, #43	; 0x2b
 800ca08:	d075      	beq.n	800caf6 <_strtod_l+0x286>
 800ca0a:	2a2d      	cmp	r2, #45	; 0x2d
 800ca0c:	d07b      	beq.n	800cb06 <_strtod_l+0x296>
 800ca0e:	f04f 0c00 	mov.w	ip, #0
 800ca12:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ca16:	2909      	cmp	r1, #9
 800ca18:	f240 8082 	bls.w	800cb20 <_strtod_l+0x2b0>
 800ca1c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ca20:	2600      	movs	r6, #0
 800ca22:	e09d      	b.n	800cb60 <_strtod_l+0x2f0>
 800ca24:	2300      	movs	r3, #0
 800ca26:	e7c4      	b.n	800c9b2 <_strtod_l+0x142>
 800ca28:	2f08      	cmp	r7, #8
 800ca2a:	bfd8      	it	le
 800ca2c:	9907      	ldrle	r1, [sp, #28]
 800ca2e:	f100 0001 	add.w	r0, r0, #1
 800ca32:	bfda      	itte	le
 800ca34:	fb02 3301 	mlale	r3, r2, r1, r3
 800ca38:	9307      	strle	r3, [sp, #28]
 800ca3a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800ca3e:	3701      	adds	r7, #1
 800ca40:	9017      	str	r0, [sp, #92]	; 0x5c
 800ca42:	e7bf      	b.n	800c9c4 <_strtod_l+0x154>
 800ca44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ca46:	195a      	adds	r2, r3, r5
 800ca48:	9217      	str	r2, [sp, #92]	; 0x5c
 800ca4a:	5d5a      	ldrb	r2, [r3, r5]
 800ca4c:	2f00      	cmp	r7, #0
 800ca4e:	d037      	beq.n	800cac0 <_strtod_l+0x250>
 800ca50:	9005      	str	r0, [sp, #20]
 800ca52:	463d      	mov	r5, r7
 800ca54:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ca58:	2b09      	cmp	r3, #9
 800ca5a:	d912      	bls.n	800ca82 <_strtod_l+0x212>
 800ca5c:	2301      	movs	r3, #1
 800ca5e:	e7c2      	b.n	800c9e6 <_strtod_l+0x176>
 800ca60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ca62:	1c5a      	adds	r2, r3, #1
 800ca64:	9217      	str	r2, [sp, #92]	; 0x5c
 800ca66:	785a      	ldrb	r2, [r3, #1]
 800ca68:	3001      	adds	r0, #1
 800ca6a:	2a30      	cmp	r2, #48	; 0x30
 800ca6c:	d0f8      	beq.n	800ca60 <_strtod_l+0x1f0>
 800ca6e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ca72:	2b08      	cmp	r3, #8
 800ca74:	f200 84d9 	bhi.w	800d42a <_strtod_l+0xbba>
 800ca78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ca7a:	9005      	str	r0, [sp, #20]
 800ca7c:	2000      	movs	r0, #0
 800ca7e:	9308      	str	r3, [sp, #32]
 800ca80:	4605      	mov	r5, r0
 800ca82:	3a30      	subs	r2, #48	; 0x30
 800ca84:	f100 0301 	add.w	r3, r0, #1
 800ca88:	d014      	beq.n	800cab4 <_strtod_l+0x244>
 800ca8a:	9905      	ldr	r1, [sp, #20]
 800ca8c:	4419      	add	r1, r3
 800ca8e:	9105      	str	r1, [sp, #20]
 800ca90:	462b      	mov	r3, r5
 800ca92:	eb00 0e05 	add.w	lr, r0, r5
 800ca96:	210a      	movs	r1, #10
 800ca98:	4573      	cmp	r3, lr
 800ca9a:	d113      	bne.n	800cac4 <_strtod_l+0x254>
 800ca9c:	182b      	adds	r3, r5, r0
 800ca9e:	2b08      	cmp	r3, #8
 800caa0:	f105 0501 	add.w	r5, r5, #1
 800caa4:	4405      	add	r5, r0
 800caa6:	dc1c      	bgt.n	800cae2 <_strtod_l+0x272>
 800caa8:	9907      	ldr	r1, [sp, #28]
 800caaa:	230a      	movs	r3, #10
 800caac:	fb03 2301 	mla	r3, r3, r1, r2
 800cab0:	9307      	str	r3, [sp, #28]
 800cab2:	2300      	movs	r3, #0
 800cab4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cab6:	1c51      	adds	r1, r2, #1
 800cab8:	9117      	str	r1, [sp, #92]	; 0x5c
 800caba:	7852      	ldrb	r2, [r2, #1]
 800cabc:	4618      	mov	r0, r3
 800cabe:	e7c9      	b.n	800ca54 <_strtod_l+0x1e4>
 800cac0:	4638      	mov	r0, r7
 800cac2:	e7d2      	b.n	800ca6a <_strtod_l+0x1fa>
 800cac4:	2b08      	cmp	r3, #8
 800cac6:	dc04      	bgt.n	800cad2 <_strtod_l+0x262>
 800cac8:	9e07      	ldr	r6, [sp, #28]
 800caca:	434e      	muls	r6, r1
 800cacc:	9607      	str	r6, [sp, #28]
 800cace:	3301      	adds	r3, #1
 800cad0:	e7e2      	b.n	800ca98 <_strtod_l+0x228>
 800cad2:	f103 0c01 	add.w	ip, r3, #1
 800cad6:	f1bc 0f10 	cmp.w	ip, #16
 800cada:	bfd8      	it	le
 800cadc:	fb01 f909 	mulle.w	r9, r1, r9
 800cae0:	e7f5      	b.n	800cace <_strtod_l+0x25e>
 800cae2:	2d10      	cmp	r5, #16
 800cae4:	bfdc      	itt	le
 800cae6:	230a      	movle	r3, #10
 800cae8:	fb03 2909 	mlale	r9, r3, r9, r2
 800caec:	e7e1      	b.n	800cab2 <_strtod_l+0x242>
 800caee:	2300      	movs	r3, #0
 800caf0:	9305      	str	r3, [sp, #20]
 800caf2:	2301      	movs	r3, #1
 800caf4:	e77c      	b.n	800c9f0 <_strtod_l+0x180>
 800caf6:	f04f 0c00 	mov.w	ip, #0
 800cafa:	f108 0202 	add.w	r2, r8, #2
 800cafe:	9217      	str	r2, [sp, #92]	; 0x5c
 800cb00:	f898 2002 	ldrb.w	r2, [r8, #2]
 800cb04:	e785      	b.n	800ca12 <_strtod_l+0x1a2>
 800cb06:	f04f 0c01 	mov.w	ip, #1
 800cb0a:	e7f6      	b.n	800cafa <_strtod_l+0x28a>
 800cb0c:	0801078c 	.word	0x0801078c
 800cb10:	08010520 	.word	0x08010520
 800cb14:	7ff00000 	.word	0x7ff00000
 800cb18:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cb1a:	1c51      	adds	r1, r2, #1
 800cb1c:	9117      	str	r1, [sp, #92]	; 0x5c
 800cb1e:	7852      	ldrb	r2, [r2, #1]
 800cb20:	2a30      	cmp	r2, #48	; 0x30
 800cb22:	d0f9      	beq.n	800cb18 <_strtod_l+0x2a8>
 800cb24:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800cb28:	2908      	cmp	r1, #8
 800cb2a:	f63f af79 	bhi.w	800ca20 <_strtod_l+0x1b0>
 800cb2e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800cb32:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cb34:	9206      	str	r2, [sp, #24]
 800cb36:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cb38:	1c51      	adds	r1, r2, #1
 800cb3a:	9117      	str	r1, [sp, #92]	; 0x5c
 800cb3c:	7852      	ldrb	r2, [r2, #1]
 800cb3e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800cb42:	2e09      	cmp	r6, #9
 800cb44:	d937      	bls.n	800cbb6 <_strtod_l+0x346>
 800cb46:	9e06      	ldr	r6, [sp, #24]
 800cb48:	1b89      	subs	r1, r1, r6
 800cb4a:	2908      	cmp	r1, #8
 800cb4c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800cb50:	dc02      	bgt.n	800cb58 <_strtod_l+0x2e8>
 800cb52:	4576      	cmp	r6, lr
 800cb54:	bfa8      	it	ge
 800cb56:	4676      	movge	r6, lr
 800cb58:	f1bc 0f00 	cmp.w	ip, #0
 800cb5c:	d000      	beq.n	800cb60 <_strtod_l+0x2f0>
 800cb5e:	4276      	negs	r6, r6
 800cb60:	2d00      	cmp	r5, #0
 800cb62:	d14d      	bne.n	800cc00 <_strtod_l+0x390>
 800cb64:	9904      	ldr	r1, [sp, #16]
 800cb66:	4301      	orrs	r1, r0
 800cb68:	f47f aec6 	bne.w	800c8f8 <_strtod_l+0x88>
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	f47f aee1 	bne.w	800c934 <_strtod_l+0xc4>
 800cb72:	2a69      	cmp	r2, #105	; 0x69
 800cb74:	d027      	beq.n	800cbc6 <_strtod_l+0x356>
 800cb76:	dc24      	bgt.n	800cbc2 <_strtod_l+0x352>
 800cb78:	2a49      	cmp	r2, #73	; 0x49
 800cb7a:	d024      	beq.n	800cbc6 <_strtod_l+0x356>
 800cb7c:	2a4e      	cmp	r2, #78	; 0x4e
 800cb7e:	f47f aed9 	bne.w	800c934 <_strtod_l+0xc4>
 800cb82:	499f      	ldr	r1, [pc, #636]	; (800ce00 <_strtod_l+0x590>)
 800cb84:	a817      	add	r0, sp, #92	; 0x5c
 800cb86:	f001 fe81 	bl	800e88c <__match>
 800cb8a:	2800      	cmp	r0, #0
 800cb8c:	f43f aed2 	beq.w	800c934 <_strtod_l+0xc4>
 800cb90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cb92:	781b      	ldrb	r3, [r3, #0]
 800cb94:	2b28      	cmp	r3, #40	; 0x28
 800cb96:	d12d      	bne.n	800cbf4 <_strtod_l+0x384>
 800cb98:	499a      	ldr	r1, [pc, #616]	; (800ce04 <_strtod_l+0x594>)
 800cb9a:	aa1a      	add	r2, sp, #104	; 0x68
 800cb9c:	a817      	add	r0, sp, #92	; 0x5c
 800cb9e:	f001 fe89 	bl	800e8b4 <__hexnan>
 800cba2:	2805      	cmp	r0, #5
 800cba4:	d126      	bne.n	800cbf4 <_strtod_l+0x384>
 800cba6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cba8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800cbac:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800cbb0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800cbb4:	e6a0      	b.n	800c8f8 <_strtod_l+0x88>
 800cbb6:	210a      	movs	r1, #10
 800cbb8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800cbbc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800cbc0:	e7b9      	b.n	800cb36 <_strtod_l+0x2c6>
 800cbc2:	2a6e      	cmp	r2, #110	; 0x6e
 800cbc4:	e7db      	b.n	800cb7e <_strtod_l+0x30e>
 800cbc6:	4990      	ldr	r1, [pc, #576]	; (800ce08 <_strtod_l+0x598>)
 800cbc8:	a817      	add	r0, sp, #92	; 0x5c
 800cbca:	f001 fe5f 	bl	800e88c <__match>
 800cbce:	2800      	cmp	r0, #0
 800cbd0:	f43f aeb0 	beq.w	800c934 <_strtod_l+0xc4>
 800cbd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cbd6:	498d      	ldr	r1, [pc, #564]	; (800ce0c <_strtod_l+0x59c>)
 800cbd8:	3b01      	subs	r3, #1
 800cbda:	a817      	add	r0, sp, #92	; 0x5c
 800cbdc:	9317      	str	r3, [sp, #92]	; 0x5c
 800cbde:	f001 fe55 	bl	800e88c <__match>
 800cbe2:	b910      	cbnz	r0, 800cbea <_strtod_l+0x37a>
 800cbe4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cbe6:	3301      	adds	r3, #1
 800cbe8:	9317      	str	r3, [sp, #92]	; 0x5c
 800cbea:	f8df b230 	ldr.w	fp, [pc, #560]	; 800ce1c <_strtod_l+0x5ac>
 800cbee:	f04f 0a00 	mov.w	sl, #0
 800cbf2:	e681      	b.n	800c8f8 <_strtod_l+0x88>
 800cbf4:	4886      	ldr	r0, [pc, #536]	; (800ce10 <_strtod_l+0x5a0>)
 800cbf6:	f002 fe3b 	bl	800f870 <nan>
 800cbfa:	ec5b ab10 	vmov	sl, fp, d0
 800cbfe:	e67b      	b.n	800c8f8 <_strtod_l+0x88>
 800cc00:	9b05      	ldr	r3, [sp, #20]
 800cc02:	9807      	ldr	r0, [sp, #28]
 800cc04:	1af3      	subs	r3, r6, r3
 800cc06:	2f00      	cmp	r7, #0
 800cc08:	bf08      	it	eq
 800cc0a:	462f      	moveq	r7, r5
 800cc0c:	2d10      	cmp	r5, #16
 800cc0e:	9306      	str	r3, [sp, #24]
 800cc10:	46a8      	mov	r8, r5
 800cc12:	bfa8      	it	ge
 800cc14:	f04f 0810 	movge.w	r8, #16
 800cc18:	f7f3 fc94 	bl	8000544 <__aeabi_ui2d>
 800cc1c:	2d09      	cmp	r5, #9
 800cc1e:	4682      	mov	sl, r0
 800cc20:	468b      	mov	fp, r1
 800cc22:	dd13      	ble.n	800cc4c <_strtod_l+0x3dc>
 800cc24:	4b7b      	ldr	r3, [pc, #492]	; (800ce14 <_strtod_l+0x5a4>)
 800cc26:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800cc2a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800cc2e:	f7f3 fd03 	bl	8000638 <__aeabi_dmul>
 800cc32:	4682      	mov	sl, r0
 800cc34:	4648      	mov	r0, r9
 800cc36:	468b      	mov	fp, r1
 800cc38:	f7f3 fc84 	bl	8000544 <__aeabi_ui2d>
 800cc3c:	4602      	mov	r2, r0
 800cc3e:	460b      	mov	r3, r1
 800cc40:	4650      	mov	r0, sl
 800cc42:	4659      	mov	r1, fp
 800cc44:	f7f3 fb42 	bl	80002cc <__adddf3>
 800cc48:	4682      	mov	sl, r0
 800cc4a:	468b      	mov	fp, r1
 800cc4c:	2d0f      	cmp	r5, #15
 800cc4e:	dc38      	bgt.n	800ccc2 <_strtod_l+0x452>
 800cc50:	9b06      	ldr	r3, [sp, #24]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	f43f ae50 	beq.w	800c8f8 <_strtod_l+0x88>
 800cc58:	dd24      	ble.n	800cca4 <_strtod_l+0x434>
 800cc5a:	2b16      	cmp	r3, #22
 800cc5c:	dc0b      	bgt.n	800cc76 <_strtod_l+0x406>
 800cc5e:	496d      	ldr	r1, [pc, #436]	; (800ce14 <_strtod_l+0x5a4>)
 800cc60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cc64:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc68:	4652      	mov	r2, sl
 800cc6a:	465b      	mov	r3, fp
 800cc6c:	f7f3 fce4 	bl	8000638 <__aeabi_dmul>
 800cc70:	4682      	mov	sl, r0
 800cc72:	468b      	mov	fp, r1
 800cc74:	e640      	b.n	800c8f8 <_strtod_l+0x88>
 800cc76:	9a06      	ldr	r2, [sp, #24]
 800cc78:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800cc7c:	4293      	cmp	r3, r2
 800cc7e:	db20      	blt.n	800ccc2 <_strtod_l+0x452>
 800cc80:	4c64      	ldr	r4, [pc, #400]	; (800ce14 <_strtod_l+0x5a4>)
 800cc82:	f1c5 050f 	rsb	r5, r5, #15
 800cc86:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800cc8a:	4652      	mov	r2, sl
 800cc8c:	465b      	mov	r3, fp
 800cc8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc92:	f7f3 fcd1 	bl	8000638 <__aeabi_dmul>
 800cc96:	9b06      	ldr	r3, [sp, #24]
 800cc98:	1b5d      	subs	r5, r3, r5
 800cc9a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cc9e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cca2:	e7e3      	b.n	800cc6c <_strtod_l+0x3fc>
 800cca4:	9b06      	ldr	r3, [sp, #24]
 800cca6:	3316      	adds	r3, #22
 800cca8:	db0b      	blt.n	800ccc2 <_strtod_l+0x452>
 800ccaa:	9b05      	ldr	r3, [sp, #20]
 800ccac:	1b9e      	subs	r6, r3, r6
 800ccae:	4b59      	ldr	r3, [pc, #356]	; (800ce14 <_strtod_l+0x5a4>)
 800ccb0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800ccb4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ccb8:	4650      	mov	r0, sl
 800ccba:	4659      	mov	r1, fp
 800ccbc:	f7f3 fde6 	bl	800088c <__aeabi_ddiv>
 800ccc0:	e7d6      	b.n	800cc70 <_strtod_l+0x400>
 800ccc2:	9b06      	ldr	r3, [sp, #24]
 800ccc4:	eba5 0808 	sub.w	r8, r5, r8
 800ccc8:	4498      	add	r8, r3
 800ccca:	f1b8 0f00 	cmp.w	r8, #0
 800ccce:	dd74      	ble.n	800cdba <_strtod_l+0x54a>
 800ccd0:	f018 030f 	ands.w	r3, r8, #15
 800ccd4:	d00a      	beq.n	800ccec <_strtod_l+0x47c>
 800ccd6:	494f      	ldr	r1, [pc, #316]	; (800ce14 <_strtod_l+0x5a4>)
 800ccd8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ccdc:	4652      	mov	r2, sl
 800ccde:	465b      	mov	r3, fp
 800cce0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cce4:	f7f3 fca8 	bl	8000638 <__aeabi_dmul>
 800cce8:	4682      	mov	sl, r0
 800ccea:	468b      	mov	fp, r1
 800ccec:	f038 080f 	bics.w	r8, r8, #15
 800ccf0:	d04f      	beq.n	800cd92 <_strtod_l+0x522>
 800ccf2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ccf6:	dd22      	ble.n	800cd3e <_strtod_l+0x4ce>
 800ccf8:	2500      	movs	r5, #0
 800ccfa:	462e      	mov	r6, r5
 800ccfc:	9507      	str	r5, [sp, #28]
 800ccfe:	9505      	str	r5, [sp, #20]
 800cd00:	2322      	movs	r3, #34	; 0x22
 800cd02:	f8df b118 	ldr.w	fp, [pc, #280]	; 800ce1c <_strtod_l+0x5ac>
 800cd06:	6023      	str	r3, [r4, #0]
 800cd08:	f04f 0a00 	mov.w	sl, #0
 800cd0c:	9b07      	ldr	r3, [sp, #28]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	f43f adf2 	beq.w	800c8f8 <_strtod_l+0x88>
 800cd14:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cd16:	4620      	mov	r0, r4
 800cd18:	f001 fed4 	bl	800eac4 <_Bfree>
 800cd1c:	9905      	ldr	r1, [sp, #20]
 800cd1e:	4620      	mov	r0, r4
 800cd20:	f001 fed0 	bl	800eac4 <_Bfree>
 800cd24:	4631      	mov	r1, r6
 800cd26:	4620      	mov	r0, r4
 800cd28:	f001 fecc 	bl	800eac4 <_Bfree>
 800cd2c:	9907      	ldr	r1, [sp, #28]
 800cd2e:	4620      	mov	r0, r4
 800cd30:	f001 fec8 	bl	800eac4 <_Bfree>
 800cd34:	4629      	mov	r1, r5
 800cd36:	4620      	mov	r0, r4
 800cd38:	f001 fec4 	bl	800eac4 <_Bfree>
 800cd3c:	e5dc      	b.n	800c8f8 <_strtod_l+0x88>
 800cd3e:	4b36      	ldr	r3, [pc, #216]	; (800ce18 <_strtod_l+0x5a8>)
 800cd40:	9304      	str	r3, [sp, #16]
 800cd42:	2300      	movs	r3, #0
 800cd44:	ea4f 1828 	mov.w	r8, r8, asr #4
 800cd48:	4650      	mov	r0, sl
 800cd4a:	4659      	mov	r1, fp
 800cd4c:	4699      	mov	r9, r3
 800cd4e:	f1b8 0f01 	cmp.w	r8, #1
 800cd52:	dc21      	bgt.n	800cd98 <_strtod_l+0x528>
 800cd54:	b10b      	cbz	r3, 800cd5a <_strtod_l+0x4ea>
 800cd56:	4682      	mov	sl, r0
 800cd58:	468b      	mov	fp, r1
 800cd5a:	4b2f      	ldr	r3, [pc, #188]	; (800ce18 <_strtod_l+0x5a8>)
 800cd5c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800cd60:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800cd64:	4652      	mov	r2, sl
 800cd66:	465b      	mov	r3, fp
 800cd68:	e9d9 0100 	ldrd	r0, r1, [r9]
 800cd6c:	f7f3 fc64 	bl	8000638 <__aeabi_dmul>
 800cd70:	4b2a      	ldr	r3, [pc, #168]	; (800ce1c <_strtod_l+0x5ac>)
 800cd72:	460a      	mov	r2, r1
 800cd74:	400b      	ands	r3, r1
 800cd76:	492a      	ldr	r1, [pc, #168]	; (800ce20 <_strtod_l+0x5b0>)
 800cd78:	428b      	cmp	r3, r1
 800cd7a:	4682      	mov	sl, r0
 800cd7c:	d8bc      	bhi.n	800ccf8 <_strtod_l+0x488>
 800cd7e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800cd82:	428b      	cmp	r3, r1
 800cd84:	bf86      	itte	hi
 800cd86:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800ce24 <_strtod_l+0x5b4>
 800cd8a:	f04f 3aff 	movhi.w	sl, #4294967295
 800cd8e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800cd92:	2300      	movs	r3, #0
 800cd94:	9304      	str	r3, [sp, #16]
 800cd96:	e084      	b.n	800cea2 <_strtod_l+0x632>
 800cd98:	f018 0f01 	tst.w	r8, #1
 800cd9c:	d005      	beq.n	800cdaa <_strtod_l+0x53a>
 800cd9e:	9b04      	ldr	r3, [sp, #16]
 800cda0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cda4:	f7f3 fc48 	bl	8000638 <__aeabi_dmul>
 800cda8:	2301      	movs	r3, #1
 800cdaa:	9a04      	ldr	r2, [sp, #16]
 800cdac:	3208      	adds	r2, #8
 800cdae:	f109 0901 	add.w	r9, r9, #1
 800cdb2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800cdb6:	9204      	str	r2, [sp, #16]
 800cdb8:	e7c9      	b.n	800cd4e <_strtod_l+0x4de>
 800cdba:	d0ea      	beq.n	800cd92 <_strtod_l+0x522>
 800cdbc:	f1c8 0800 	rsb	r8, r8, #0
 800cdc0:	f018 020f 	ands.w	r2, r8, #15
 800cdc4:	d00a      	beq.n	800cddc <_strtod_l+0x56c>
 800cdc6:	4b13      	ldr	r3, [pc, #76]	; (800ce14 <_strtod_l+0x5a4>)
 800cdc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cdcc:	4650      	mov	r0, sl
 800cdce:	4659      	mov	r1, fp
 800cdd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdd4:	f7f3 fd5a 	bl	800088c <__aeabi_ddiv>
 800cdd8:	4682      	mov	sl, r0
 800cdda:	468b      	mov	fp, r1
 800cddc:	ea5f 1828 	movs.w	r8, r8, asr #4
 800cde0:	d0d7      	beq.n	800cd92 <_strtod_l+0x522>
 800cde2:	f1b8 0f1f 	cmp.w	r8, #31
 800cde6:	dd1f      	ble.n	800ce28 <_strtod_l+0x5b8>
 800cde8:	2500      	movs	r5, #0
 800cdea:	462e      	mov	r6, r5
 800cdec:	9507      	str	r5, [sp, #28]
 800cdee:	9505      	str	r5, [sp, #20]
 800cdf0:	2322      	movs	r3, #34	; 0x22
 800cdf2:	f04f 0a00 	mov.w	sl, #0
 800cdf6:	f04f 0b00 	mov.w	fp, #0
 800cdfa:	6023      	str	r3, [r4, #0]
 800cdfc:	e786      	b.n	800cd0c <_strtod_l+0x49c>
 800cdfe:	bf00      	nop
 800ce00:	080104f1 	.word	0x080104f1
 800ce04:	08010534 	.word	0x08010534
 800ce08:	080104e9 	.word	0x080104e9
 800ce0c:	08010699 	.word	0x08010699
 800ce10:	08010948 	.word	0x08010948
 800ce14:	08010828 	.word	0x08010828
 800ce18:	08010800 	.word	0x08010800
 800ce1c:	7ff00000 	.word	0x7ff00000
 800ce20:	7ca00000 	.word	0x7ca00000
 800ce24:	7fefffff 	.word	0x7fefffff
 800ce28:	f018 0310 	ands.w	r3, r8, #16
 800ce2c:	bf18      	it	ne
 800ce2e:	236a      	movne	r3, #106	; 0x6a
 800ce30:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800d1e0 <_strtod_l+0x970>
 800ce34:	9304      	str	r3, [sp, #16]
 800ce36:	4650      	mov	r0, sl
 800ce38:	4659      	mov	r1, fp
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	f018 0f01 	tst.w	r8, #1
 800ce40:	d004      	beq.n	800ce4c <_strtod_l+0x5dc>
 800ce42:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ce46:	f7f3 fbf7 	bl	8000638 <__aeabi_dmul>
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800ce50:	f109 0908 	add.w	r9, r9, #8
 800ce54:	d1f2      	bne.n	800ce3c <_strtod_l+0x5cc>
 800ce56:	b10b      	cbz	r3, 800ce5c <_strtod_l+0x5ec>
 800ce58:	4682      	mov	sl, r0
 800ce5a:	468b      	mov	fp, r1
 800ce5c:	9b04      	ldr	r3, [sp, #16]
 800ce5e:	b1c3      	cbz	r3, 800ce92 <_strtod_l+0x622>
 800ce60:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ce64:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	4659      	mov	r1, fp
 800ce6c:	dd11      	ble.n	800ce92 <_strtod_l+0x622>
 800ce6e:	2b1f      	cmp	r3, #31
 800ce70:	f340 8124 	ble.w	800d0bc <_strtod_l+0x84c>
 800ce74:	2b34      	cmp	r3, #52	; 0x34
 800ce76:	bfde      	ittt	le
 800ce78:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800ce7c:	f04f 33ff 	movle.w	r3, #4294967295
 800ce80:	fa03 f202 	lslle.w	r2, r3, r2
 800ce84:	f04f 0a00 	mov.w	sl, #0
 800ce88:	bfcc      	ite	gt
 800ce8a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ce8e:	ea02 0b01 	andle.w	fp, r2, r1
 800ce92:	2200      	movs	r2, #0
 800ce94:	2300      	movs	r3, #0
 800ce96:	4650      	mov	r0, sl
 800ce98:	4659      	mov	r1, fp
 800ce9a:	f7f3 fe35 	bl	8000b08 <__aeabi_dcmpeq>
 800ce9e:	2800      	cmp	r0, #0
 800cea0:	d1a2      	bne.n	800cde8 <_strtod_l+0x578>
 800cea2:	9b07      	ldr	r3, [sp, #28]
 800cea4:	9300      	str	r3, [sp, #0]
 800cea6:	9908      	ldr	r1, [sp, #32]
 800cea8:	462b      	mov	r3, r5
 800ceaa:	463a      	mov	r2, r7
 800ceac:	4620      	mov	r0, r4
 800ceae:	f001 fe71 	bl	800eb94 <__s2b>
 800ceb2:	9007      	str	r0, [sp, #28]
 800ceb4:	2800      	cmp	r0, #0
 800ceb6:	f43f af1f 	beq.w	800ccf8 <_strtod_l+0x488>
 800ceba:	9b05      	ldr	r3, [sp, #20]
 800cebc:	1b9e      	subs	r6, r3, r6
 800cebe:	9b06      	ldr	r3, [sp, #24]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	bfb4      	ite	lt
 800cec4:	4633      	movlt	r3, r6
 800cec6:	2300      	movge	r3, #0
 800cec8:	930c      	str	r3, [sp, #48]	; 0x30
 800ceca:	9b06      	ldr	r3, [sp, #24]
 800cecc:	2500      	movs	r5, #0
 800cece:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ced2:	9312      	str	r3, [sp, #72]	; 0x48
 800ced4:	462e      	mov	r6, r5
 800ced6:	9b07      	ldr	r3, [sp, #28]
 800ced8:	4620      	mov	r0, r4
 800ceda:	6859      	ldr	r1, [r3, #4]
 800cedc:	f001 fdb2 	bl	800ea44 <_Balloc>
 800cee0:	9005      	str	r0, [sp, #20]
 800cee2:	2800      	cmp	r0, #0
 800cee4:	f43f af0c 	beq.w	800cd00 <_strtod_l+0x490>
 800cee8:	9b07      	ldr	r3, [sp, #28]
 800ceea:	691a      	ldr	r2, [r3, #16]
 800ceec:	3202      	adds	r2, #2
 800ceee:	f103 010c 	add.w	r1, r3, #12
 800cef2:	0092      	lsls	r2, r2, #2
 800cef4:	300c      	adds	r0, #12
 800cef6:	f001 fd97 	bl	800ea28 <memcpy>
 800cefa:	ec4b ab10 	vmov	d0, sl, fp
 800cefe:	aa1a      	add	r2, sp, #104	; 0x68
 800cf00:	a919      	add	r1, sp, #100	; 0x64
 800cf02:	4620      	mov	r0, r4
 800cf04:	f002 f98c 	bl	800f220 <__d2b>
 800cf08:	ec4b ab18 	vmov	d8, sl, fp
 800cf0c:	9018      	str	r0, [sp, #96]	; 0x60
 800cf0e:	2800      	cmp	r0, #0
 800cf10:	f43f aef6 	beq.w	800cd00 <_strtod_l+0x490>
 800cf14:	2101      	movs	r1, #1
 800cf16:	4620      	mov	r0, r4
 800cf18:	f001 fed6 	bl	800ecc8 <__i2b>
 800cf1c:	4606      	mov	r6, r0
 800cf1e:	2800      	cmp	r0, #0
 800cf20:	f43f aeee 	beq.w	800cd00 <_strtod_l+0x490>
 800cf24:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cf26:	9904      	ldr	r1, [sp, #16]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	bfab      	itete	ge
 800cf2c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800cf2e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800cf30:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800cf32:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800cf36:	bfac      	ite	ge
 800cf38:	eb03 0902 	addge.w	r9, r3, r2
 800cf3c:	1ad7      	sublt	r7, r2, r3
 800cf3e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800cf40:	eba3 0801 	sub.w	r8, r3, r1
 800cf44:	4490      	add	r8, r2
 800cf46:	4ba1      	ldr	r3, [pc, #644]	; (800d1cc <_strtod_l+0x95c>)
 800cf48:	f108 38ff 	add.w	r8, r8, #4294967295
 800cf4c:	4598      	cmp	r8, r3
 800cf4e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800cf52:	f280 80c7 	bge.w	800d0e4 <_strtod_l+0x874>
 800cf56:	eba3 0308 	sub.w	r3, r3, r8
 800cf5a:	2b1f      	cmp	r3, #31
 800cf5c:	eba2 0203 	sub.w	r2, r2, r3
 800cf60:	f04f 0101 	mov.w	r1, #1
 800cf64:	f300 80b1 	bgt.w	800d0ca <_strtod_l+0x85a>
 800cf68:	fa01 f303 	lsl.w	r3, r1, r3
 800cf6c:	930d      	str	r3, [sp, #52]	; 0x34
 800cf6e:	2300      	movs	r3, #0
 800cf70:	9308      	str	r3, [sp, #32]
 800cf72:	eb09 0802 	add.w	r8, r9, r2
 800cf76:	9b04      	ldr	r3, [sp, #16]
 800cf78:	45c1      	cmp	r9, r8
 800cf7a:	4417      	add	r7, r2
 800cf7c:	441f      	add	r7, r3
 800cf7e:	464b      	mov	r3, r9
 800cf80:	bfa8      	it	ge
 800cf82:	4643      	movge	r3, r8
 800cf84:	42bb      	cmp	r3, r7
 800cf86:	bfa8      	it	ge
 800cf88:	463b      	movge	r3, r7
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	bfc2      	ittt	gt
 800cf8e:	eba8 0803 	subgt.w	r8, r8, r3
 800cf92:	1aff      	subgt	r7, r7, r3
 800cf94:	eba9 0903 	subgt.w	r9, r9, r3
 800cf98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	dd17      	ble.n	800cfce <_strtod_l+0x75e>
 800cf9e:	4631      	mov	r1, r6
 800cfa0:	461a      	mov	r2, r3
 800cfa2:	4620      	mov	r0, r4
 800cfa4:	f001 ff50 	bl	800ee48 <__pow5mult>
 800cfa8:	4606      	mov	r6, r0
 800cfaa:	2800      	cmp	r0, #0
 800cfac:	f43f aea8 	beq.w	800cd00 <_strtod_l+0x490>
 800cfb0:	4601      	mov	r1, r0
 800cfb2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cfb4:	4620      	mov	r0, r4
 800cfb6:	f001 fe9d 	bl	800ecf4 <__multiply>
 800cfba:	900b      	str	r0, [sp, #44]	; 0x2c
 800cfbc:	2800      	cmp	r0, #0
 800cfbe:	f43f ae9f 	beq.w	800cd00 <_strtod_l+0x490>
 800cfc2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cfc4:	4620      	mov	r0, r4
 800cfc6:	f001 fd7d 	bl	800eac4 <_Bfree>
 800cfca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cfcc:	9318      	str	r3, [sp, #96]	; 0x60
 800cfce:	f1b8 0f00 	cmp.w	r8, #0
 800cfd2:	f300 808c 	bgt.w	800d0ee <_strtod_l+0x87e>
 800cfd6:	9b06      	ldr	r3, [sp, #24]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	dd08      	ble.n	800cfee <_strtod_l+0x77e>
 800cfdc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cfde:	9905      	ldr	r1, [sp, #20]
 800cfe0:	4620      	mov	r0, r4
 800cfe2:	f001 ff31 	bl	800ee48 <__pow5mult>
 800cfe6:	9005      	str	r0, [sp, #20]
 800cfe8:	2800      	cmp	r0, #0
 800cfea:	f43f ae89 	beq.w	800cd00 <_strtod_l+0x490>
 800cfee:	2f00      	cmp	r7, #0
 800cff0:	dd08      	ble.n	800d004 <_strtod_l+0x794>
 800cff2:	9905      	ldr	r1, [sp, #20]
 800cff4:	463a      	mov	r2, r7
 800cff6:	4620      	mov	r0, r4
 800cff8:	f001 ff80 	bl	800eefc <__lshift>
 800cffc:	9005      	str	r0, [sp, #20]
 800cffe:	2800      	cmp	r0, #0
 800d000:	f43f ae7e 	beq.w	800cd00 <_strtod_l+0x490>
 800d004:	f1b9 0f00 	cmp.w	r9, #0
 800d008:	dd08      	ble.n	800d01c <_strtod_l+0x7ac>
 800d00a:	4631      	mov	r1, r6
 800d00c:	464a      	mov	r2, r9
 800d00e:	4620      	mov	r0, r4
 800d010:	f001 ff74 	bl	800eefc <__lshift>
 800d014:	4606      	mov	r6, r0
 800d016:	2800      	cmp	r0, #0
 800d018:	f43f ae72 	beq.w	800cd00 <_strtod_l+0x490>
 800d01c:	9a05      	ldr	r2, [sp, #20]
 800d01e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d020:	4620      	mov	r0, r4
 800d022:	f001 fff7 	bl	800f014 <__mdiff>
 800d026:	4605      	mov	r5, r0
 800d028:	2800      	cmp	r0, #0
 800d02a:	f43f ae69 	beq.w	800cd00 <_strtod_l+0x490>
 800d02e:	68c3      	ldr	r3, [r0, #12]
 800d030:	930b      	str	r3, [sp, #44]	; 0x2c
 800d032:	2300      	movs	r3, #0
 800d034:	60c3      	str	r3, [r0, #12]
 800d036:	4631      	mov	r1, r6
 800d038:	f001 ffd0 	bl	800efdc <__mcmp>
 800d03c:	2800      	cmp	r0, #0
 800d03e:	da60      	bge.n	800d102 <_strtod_l+0x892>
 800d040:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d042:	ea53 030a 	orrs.w	r3, r3, sl
 800d046:	f040 8082 	bne.w	800d14e <_strtod_l+0x8de>
 800d04a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d17d      	bne.n	800d14e <_strtod_l+0x8de>
 800d052:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d056:	0d1b      	lsrs	r3, r3, #20
 800d058:	051b      	lsls	r3, r3, #20
 800d05a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d05e:	d976      	bls.n	800d14e <_strtod_l+0x8de>
 800d060:	696b      	ldr	r3, [r5, #20]
 800d062:	b913      	cbnz	r3, 800d06a <_strtod_l+0x7fa>
 800d064:	692b      	ldr	r3, [r5, #16]
 800d066:	2b01      	cmp	r3, #1
 800d068:	dd71      	ble.n	800d14e <_strtod_l+0x8de>
 800d06a:	4629      	mov	r1, r5
 800d06c:	2201      	movs	r2, #1
 800d06e:	4620      	mov	r0, r4
 800d070:	f001 ff44 	bl	800eefc <__lshift>
 800d074:	4631      	mov	r1, r6
 800d076:	4605      	mov	r5, r0
 800d078:	f001 ffb0 	bl	800efdc <__mcmp>
 800d07c:	2800      	cmp	r0, #0
 800d07e:	dd66      	ble.n	800d14e <_strtod_l+0x8de>
 800d080:	9904      	ldr	r1, [sp, #16]
 800d082:	4a53      	ldr	r2, [pc, #332]	; (800d1d0 <_strtod_l+0x960>)
 800d084:	465b      	mov	r3, fp
 800d086:	2900      	cmp	r1, #0
 800d088:	f000 8081 	beq.w	800d18e <_strtod_l+0x91e>
 800d08c:	ea02 010b 	and.w	r1, r2, fp
 800d090:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d094:	dc7b      	bgt.n	800d18e <_strtod_l+0x91e>
 800d096:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d09a:	f77f aea9 	ble.w	800cdf0 <_strtod_l+0x580>
 800d09e:	4b4d      	ldr	r3, [pc, #308]	; (800d1d4 <_strtod_l+0x964>)
 800d0a0:	4650      	mov	r0, sl
 800d0a2:	4659      	mov	r1, fp
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	f7f3 fac7 	bl	8000638 <__aeabi_dmul>
 800d0aa:	460b      	mov	r3, r1
 800d0ac:	4303      	orrs	r3, r0
 800d0ae:	bf08      	it	eq
 800d0b0:	2322      	moveq	r3, #34	; 0x22
 800d0b2:	4682      	mov	sl, r0
 800d0b4:	468b      	mov	fp, r1
 800d0b6:	bf08      	it	eq
 800d0b8:	6023      	streq	r3, [r4, #0]
 800d0ba:	e62b      	b.n	800cd14 <_strtod_l+0x4a4>
 800d0bc:	f04f 32ff 	mov.w	r2, #4294967295
 800d0c0:	fa02 f303 	lsl.w	r3, r2, r3
 800d0c4:	ea03 0a0a 	and.w	sl, r3, sl
 800d0c8:	e6e3      	b.n	800ce92 <_strtod_l+0x622>
 800d0ca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800d0ce:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800d0d2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800d0d6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800d0da:	fa01 f308 	lsl.w	r3, r1, r8
 800d0de:	9308      	str	r3, [sp, #32]
 800d0e0:	910d      	str	r1, [sp, #52]	; 0x34
 800d0e2:	e746      	b.n	800cf72 <_strtod_l+0x702>
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	9308      	str	r3, [sp, #32]
 800d0e8:	2301      	movs	r3, #1
 800d0ea:	930d      	str	r3, [sp, #52]	; 0x34
 800d0ec:	e741      	b.n	800cf72 <_strtod_l+0x702>
 800d0ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d0f0:	4642      	mov	r2, r8
 800d0f2:	4620      	mov	r0, r4
 800d0f4:	f001 ff02 	bl	800eefc <__lshift>
 800d0f8:	9018      	str	r0, [sp, #96]	; 0x60
 800d0fa:	2800      	cmp	r0, #0
 800d0fc:	f47f af6b 	bne.w	800cfd6 <_strtod_l+0x766>
 800d100:	e5fe      	b.n	800cd00 <_strtod_l+0x490>
 800d102:	465f      	mov	r7, fp
 800d104:	d16e      	bne.n	800d1e4 <_strtod_l+0x974>
 800d106:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d108:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d10c:	b342      	cbz	r2, 800d160 <_strtod_l+0x8f0>
 800d10e:	4a32      	ldr	r2, [pc, #200]	; (800d1d8 <_strtod_l+0x968>)
 800d110:	4293      	cmp	r3, r2
 800d112:	d128      	bne.n	800d166 <_strtod_l+0x8f6>
 800d114:	9b04      	ldr	r3, [sp, #16]
 800d116:	4651      	mov	r1, sl
 800d118:	b1eb      	cbz	r3, 800d156 <_strtod_l+0x8e6>
 800d11a:	4b2d      	ldr	r3, [pc, #180]	; (800d1d0 <_strtod_l+0x960>)
 800d11c:	403b      	ands	r3, r7
 800d11e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d122:	f04f 32ff 	mov.w	r2, #4294967295
 800d126:	d819      	bhi.n	800d15c <_strtod_l+0x8ec>
 800d128:	0d1b      	lsrs	r3, r3, #20
 800d12a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d12e:	fa02 f303 	lsl.w	r3, r2, r3
 800d132:	4299      	cmp	r1, r3
 800d134:	d117      	bne.n	800d166 <_strtod_l+0x8f6>
 800d136:	4b29      	ldr	r3, [pc, #164]	; (800d1dc <_strtod_l+0x96c>)
 800d138:	429f      	cmp	r7, r3
 800d13a:	d102      	bne.n	800d142 <_strtod_l+0x8d2>
 800d13c:	3101      	adds	r1, #1
 800d13e:	f43f addf 	beq.w	800cd00 <_strtod_l+0x490>
 800d142:	4b23      	ldr	r3, [pc, #140]	; (800d1d0 <_strtod_l+0x960>)
 800d144:	403b      	ands	r3, r7
 800d146:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d14a:	f04f 0a00 	mov.w	sl, #0
 800d14e:	9b04      	ldr	r3, [sp, #16]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d1a4      	bne.n	800d09e <_strtod_l+0x82e>
 800d154:	e5de      	b.n	800cd14 <_strtod_l+0x4a4>
 800d156:	f04f 33ff 	mov.w	r3, #4294967295
 800d15a:	e7ea      	b.n	800d132 <_strtod_l+0x8c2>
 800d15c:	4613      	mov	r3, r2
 800d15e:	e7e8      	b.n	800d132 <_strtod_l+0x8c2>
 800d160:	ea53 030a 	orrs.w	r3, r3, sl
 800d164:	d08c      	beq.n	800d080 <_strtod_l+0x810>
 800d166:	9b08      	ldr	r3, [sp, #32]
 800d168:	b1db      	cbz	r3, 800d1a2 <_strtod_l+0x932>
 800d16a:	423b      	tst	r3, r7
 800d16c:	d0ef      	beq.n	800d14e <_strtod_l+0x8de>
 800d16e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d170:	9a04      	ldr	r2, [sp, #16]
 800d172:	4650      	mov	r0, sl
 800d174:	4659      	mov	r1, fp
 800d176:	b1c3      	cbz	r3, 800d1aa <_strtod_l+0x93a>
 800d178:	f7ff fb5c 	bl	800c834 <sulp>
 800d17c:	4602      	mov	r2, r0
 800d17e:	460b      	mov	r3, r1
 800d180:	ec51 0b18 	vmov	r0, r1, d8
 800d184:	f7f3 f8a2 	bl	80002cc <__adddf3>
 800d188:	4682      	mov	sl, r0
 800d18a:	468b      	mov	fp, r1
 800d18c:	e7df      	b.n	800d14e <_strtod_l+0x8de>
 800d18e:	4013      	ands	r3, r2
 800d190:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d194:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d198:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d19c:	f04f 3aff 	mov.w	sl, #4294967295
 800d1a0:	e7d5      	b.n	800d14e <_strtod_l+0x8de>
 800d1a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d1a4:	ea13 0f0a 	tst.w	r3, sl
 800d1a8:	e7e0      	b.n	800d16c <_strtod_l+0x8fc>
 800d1aa:	f7ff fb43 	bl	800c834 <sulp>
 800d1ae:	4602      	mov	r2, r0
 800d1b0:	460b      	mov	r3, r1
 800d1b2:	ec51 0b18 	vmov	r0, r1, d8
 800d1b6:	f7f3 f887 	bl	80002c8 <__aeabi_dsub>
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	2300      	movs	r3, #0
 800d1be:	4682      	mov	sl, r0
 800d1c0:	468b      	mov	fp, r1
 800d1c2:	f7f3 fca1 	bl	8000b08 <__aeabi_dcmpeq>
 800d1c6:	2800      	cmp	r0, #0
 800d1c8:	d0c1      	beq.n	800d14e <_strtod_l+0x8de>
 800d1ca:	e611      	b.n	800cdf0 <_strtod_l+0x580>
 800d1cc:	fffffc02 	.word	0xfffffc02
 800d1d0:	7ff00000 	.word	0x7ff00000
 800d1d4:	39500000 	.word	0x39500000
 800d1d8:	000fffff 	.word	0x000fffff
 800d1dc:	7fefffff 	.word	0x7fefffff
 800d1e0:	08010548 	.word	0x08010548
 800d1e4:	4631      	mov	r1, r6
 800d1e6:	4628      	mov	r0, r5
 800d1e8:	f002 f876 	bl	800f2d8 <__ratio>
 800d1ec:	ec59 8b10 	vmov	r8, r9, d0
 800d1f0:	ee10 0a10 	vmov	r0, s0
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d1fa:	4649      	mov	r1, r9
 800d1fc:	f7f3 fc98 	bl	8000b30 <__aeabi_dcmple>
 800d200:	2800      	cmp	r0, #0
 800d202:	d07a      	beq.n	800d2fa <_strtod_l+0xa8a>
 800d204:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d206:	2b00      	cmp	r3, #0
 800d208:	d04a      	beq.n	800d2a0 <_strtod_l+0xa30>
 800d20a:	4b95      	ldr	r3, [pc, #596]	; (800d460 <_strtod_l+0xbf0>)
 800d20c:	2200      	movs	r2, #0
 800d20e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d212:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800d460 <_strtod_l+0xbf0>
 800d216:	f04f 0800 	mov.w	r8, #0
 800d21a:	4b92      	ldr	r3, [pc, #584]	; (800d464 <_strtod_l+0xbf4>)
 800d21c:	403b      	ands	r3, r7
 800d21e:	930d      	str	r3, [sp, #52]	; 0x34
 800d220:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d222:	4b91      	ldr	r3, [pc, #580]	; (800d468 <_strtod_l+0xbf8>)
 800d224:	429a      	cmp	r2, r3
 800d226:	f040 80b0 	bne.w	800d38a <_strtod_l+0xb1a>
 800d22a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d22e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800d232:	ec4b ab10 	vmov	d0, sl, fp
 800d236:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d23a:	f001 ff75 	bl	800f128 <__ulp>
 800d23e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d242:	ec53 2b10 	vmov	r2, r3, d0
 800d246:	f7f3 f9f7 	bl	8000638 <__aeabi_dmul>
 800d24a:	4652      	mov	r2, sl
 800d24c:	465b      	mov	r3, fp
 800d24e:	f7f3 f83d 	bl	80002cc <__adddf3>
 800d252:	460b      	mov	r3, r1
 800d254:	4983      	ldr	r1, [pc, #524]	; (800d464 <_strtod_l+0xbf4>)
 800d256:	4a85      	ldr	r2, [pc, #532]	; (800d46c <_strtod_l+0xbfc>)
 800d258:	4019      	ands	r1, r3
 800d25a:	4291      	cmp	r1, r2
 800d25c:	4682      	mov	sl, r0
 800d25e:	d960      	bls.n	800d322 <_strtod_l+0xab2>
 800d260:	ee18 3a90 	vmov	r3, s17
 800d264:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d268:	4293      	cmp	r3, r2
 800d26a:	d104      	bne.n	800d276 <_strtod_l+0xa06>
 800d26c:	ee18 3a10 	vmov	r3, s16
 800d270:	3301      	adds	r3, #1
 800d272:	f43f ad45 	beq.w	800cd00 <_strtod_l+0x490>
 800d276:	f8df b200 	ldr.w	fp, [pc, #512]	; 800d478 <_strtod_l+0xc08>
 800d27a:	f04f 3aff 	mov.w	sl, #4294967295
 800d27e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d280:	4620      	mov	r0, r4
 800d282:	f001 fc1f 	bl	800eac4 <_Bfree>
 800d286:	9905      	ldr	r1, [sp, #20]
 800d288:	4620      	mov	r0, r4
 800d28a:	f001 fc1b 	bl	800eac4 <_Bfree>
 800d28e:	4631      	mov	r1, r6
 800d290:	4620      	mov	r0, r4
 800d292:	f001 fc17 	bl	800eac4 <_Bfree>
 800d296:	4629      	mov	r1, r5
 800d298:	4620      	mov	r0, r4
 800d29a:	f001 fc13 	bl	800eac4 <_Bfree>
 800d29e:	e61a      	b.n	800ced6 <_strtod_l+0x666>
 800d2a0:	f1ba 0f00 	cmp.w	sl, #0
 800d2a4:	d11b      	bne.n	800d2de <_strtod_l+0xa6e>
 800d2a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d2aa:	b9f3      	cbnz	r3, 800d2ea <_strtod_l+0xa7a>
 800d2ac:	4b6c      	ldr	r3, [pc, #432]	; (800d460 <_strtod_l+0xbf0>)
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	4640      	mov	r0, r8
 800d2b2:	4649      	mov	r1, r9
 800d2b4:	f7f3 fc32 	bl	8000b1c <__aeabi_dcmplt>
 800d2b8:	b9d0      	cbnz	r0, 800d2f0 <_strtod_l+0xa80>
 800d2ba:	4640      	mov	r0, r8
 800d2bc:	4649      	mov	r1, r9
 800d2be:	4b6c      	ldr	r3, [pc, #432]	; (800d470 <_strtod_l+0xc00>)
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	f7f3 f9b9 	bl	8000638 <__aeabi_dmul>
 800d2c6:	4680      	mov	r8, r0
 800d2c8:	4689      	mov	r9, r1
 800d2ca:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d2ce:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800d2d2:	9315      	str	r3, [sp, #84]	; 0x54
 800d2d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d2d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d2dc:	e79d      	b.n	800d21a <_strtod_l+0x9aa>
 800d2de:	f1ba 0f01 	cmp.w	sl, #1
 800d2e2:	d102      	bne.n	800d2ea <_strtod_l+0xa7a>
 800d2e4:	2f00      	cmp	r7, #0
 800d2e6:	f43f ad83 	beq.w	800cdf0 <_strtod_l+0x580>
 800d2ea:	4b62      	ldr	r3, [pc, #392]	; (800d474 <_strtod_l+0xc04>)
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	e78e      	b.n	800d20e <_strtod_l+0x99e>
 800d2f0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800d470 <_strtod_l+0xc00>
 800d2f4:	f04f 0800 	mov.w	r8, #0
 800d2f8:	e7e7      	b.n	800d2ca <_strtod_l+0xa5a>
 800d2fa:	4b5d      	ldr	r3, [pc, #372]	; (800d470 <_strtod_l+0xc00>)
 800d2fc:	4640      	mov	r0, r8
 800d2fe:	4649      	mov	r1, r9
 800d300:	2200      	movs	r2, #0
 800d302:	f7f3 f999 	bl	8000638 <__aeabi_dmul>
 800d306:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d308:	4680      	mov	r8, r0
 800d30a:	4689      	mov	r9, r1
 800d30c:	b933      	cbnz	r3, 800d31c <_strtod_l+0xaac>
 800d30e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d312:	900e      	str	r0, [sp, #56]	; 0x38
 800d314:	930f      	str	r3, [sp, #60]	; 0x3c
 800d316:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d31a:	e7dd      	b.n	800d2d8 <_strtod_l+0xa68>
 800d31c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800d320:	e7f9      	b.n	800d316 <_strtod_l+0xaa6>
 800d322:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d326:	9b04      	ldr	r3, [sp, #16]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d1a8      	bne.n	800d27e <_strtod_l+0xa0e>
 800d32c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d330:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d332:	0d1b      	lsrs	r3, r3, #20
 800d334:	051b      	lsls	r3, r3, #20
 800d336:	429a      	cmp	r2, r3
 800d338:	d1a1      	bne.n	800d27e <_strtod_l+0xa0e>
 800d33a:	4640      	mov	r0, r8
 800d33c:	4649      	mov	r1, r9
 800d33e:	f7f3 fcdb 	bl	8000cf8 <__aeabi_d2lz>
 800d342:	f7f3 f94b 	bl	80005dc <__aeabi_l2d>
 800d346:	4602      	mov	r2, r0
 800d348:	460b      	mov	r3, r1
 800d34a:	4640      	mov	r0, r8
 800d34c:	4649      	mov	r1, r9
 800d34e:	f7f2 ffbb 	bl	80002c8 <__aeabi_dsub>
 800d352:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d354:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d358:	ea43 030a 	orr.w	r3, r3, sl
 800d35c:	4313      	orrs	r3, r2
 800d35e:	4680      	mov	r8, r0
 800d360:	4689      	mov	r9, r1
 800d362:	d055      	beq.n	800d410 <_strtod_l+0xba0>
 800d364:	a336      	add	r3, pc, #216	; (adr r3, 800d440 <_strtod_l+0xbd0>)
 800d366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d36a:	f7f3 fbd7 	bl	8000b1c <__aeabi_dcmplt>
 800d36e:	2800      	cmp	r0, #0
 800d370:	f47f acd0 	bne.w	800cd14 <_strtod_l+0x4a4>
 800d374:	a334      	add	r3, pc, #208	; (adr r3, 800d448 <_strtod_l+0xbd8>)
 800d376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d37a:	4640      	mov	r0, r8
 800d37c:	4649      	mov	r1, r9
 800d37e:	f7f3 fbeb 	bl	8000b58 <__aeabi_dcmpgt>
 800d382:	2800      	cmp	r0, #0
 800d384:	f43f af7b 	beq.w	800d27e <_strtod_l+0xa0e>
 800d388:	e4c4      	b.n	800cd14 <_strtod_l+0x4a4>
 800d38a:	9b04      	ldr	r3, [sp, #16]
 800d38c:	b333      	cbz	r3, 800d3dc <_strtod_l+0xb6c>
 800d38e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d390:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d394:	d822      	bhi.n	800d3dc <_strtod_l+0xb6c>
 800d396:	a32e      	add	r3, pc, #184	; (adr r3, 800d450 <_strtod_l+0xbe0>)
 800d398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d39c:	4640      	mov	r0, r8
 800d39e:	4649      	mov	r1, r9
 800d3a0:	f7f3 fbc6 	bl	8000b30 <__aeabi_dcmple>
 800d3a4:	b1a0      	cbz	r0, 800d3d0 <_strtod_l+0xb60>
 800d3a6:	4649      	mov	r1, r9
 800d3a8:	4640      	mov	r0, r8
 800d3aa:	f7f3 fc1d 	bl	8000be8 <__aeabi_d2uiz>
 800d3ae:	2801      	cmp	r0, #1
 800d3b0:	bf38      	it	cc
 800d3b2:	2001      	movcc	r0, #1
 800d3b4:	f7f3 f8c6 	bl	8000544 <__aeabi_ui2d>
 800d3b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d3ba:	4680      	mov	r8, r0
 800d3bc:	4689      	mov	r9, r1
 800d3be:	bb23      	cbnz	r3, 800d40a <_strtod_l+0xb9a>
 800d3c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d3c4:	9010      	str	r0, [sp, #64]	; 0x40
 800d3c6:	9311      	str	r3, [sp, #68]	; 0x44
 800d3c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d3cc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d3d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d3d4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d3d8:	1a9b      	subs	r3, r3, r2
 800d3da:	9309      	str	r3, [sp, #36]	; 0x24
 800d3dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d3e0:	eeb0 0a48 	vmov.f32	s0, s16
 800d3e4:	eef0 0a68 	vmov.f32	s1, s17
 800d3e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d3ec:	f001 fe9c 	bl	800f128 <__ulp>
 800d3f0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d3f4:	ec53 2b10 	vmov	r2, r3, d0
 800d3f8:	f7f3 f91e 	bl	8000638 <__aeabi_dmul>
 800d3fc:	ec53 2b18 	vmov	r2, r3, d8
 800d400:	f7f2 ff64 	bl	80002cc <__adddf3>
 800d404:	4682      	mov	sl, r0
 800d406:	468b      	mov	fp, r1
 800d408:	e78d      	b.n	800d326 <_strtod_l+0xab6>
 800d40a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800d40e:	e7db      	b.n	800d3c8 <_strtod_l+0xb58>
 800d410:	a311      	add	r3, pc, #68	; (adr r3, 800d458 <_strtod_l+0xbe8>)
 800d412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d416:	f7f3 fb81 	bl	8000b1c <__aeabi_dcmplt>
 800d41a:	e7b2      	b.n	800d382 <_strtod_l+0xb12>
 800d41c:	2300      	movs	r3, #0
 800d41e:	930a      	str	r3, [sp, #40]	; 0x28
 800d420:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d422:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d424:	6013      	str	r3, [r2, #0]
 800d426:	f7ff ba6b 	b.w	800c900 <_strtod_l+0x90>
 800d42a:	2a65      	cmp	r2, #101	; 0x65
 800d42c:	f43f ab5f 	beq.w	800caee <_strtod_l+0x27e>
 800d430:	2a45      	cmp	r2, #69	; 0x45
 800d432:	f43f ab5c 	beq.w	800caee <_strtod_l+0x27e>
 800d436:	2301      	movs	r3, #1
 800d438:	f7ff bb94 	b.w	800cb64 <_strtod_l+0x2f4>
 800d43c:	f3af 8000 	nop.w
 800d440:	94a03595 	.word	0x94a03595
 800d444:	3fdfffff 	.word	0x3fdfffff
 800d448:	35afe535 	.word	0x35afe535
 800d44c:	3fe00000 	.word	0x3fe00000
 800d450:	ffc00000 	.word	0xffc00000
 800d454:	41dfffff 	.word	0x41dfffff
 800d458:	94a03595 	.word	0x94a03595
 800d45c:	3fcfffff 	.word	0x3fcfffff
 800d460:	3ff00000 	.word	0x3ff00000
 800d464:	7ff00000 	.word	0x7ff00000
 800d468:	7fe00000 	.word	0x7fe00000
 800d46c:	7c9fffff 	.word	0x7c9fffff
 800d470:	3fe00000 	.word	0x3fe00000
 800d474:	bff00000 	.word	0xbff00000
 800d478:	7fefffff 	.word	0x7fefffff

0800d47c <_strtod_r>:
 800d47c:	4b01      	ldr	r3, [pc, #4]	; (800d484 <_strtod_r+0x8>)
 800d47e:	f7ff b9f7 	b.w	800c870 <_strtod_l>
 800d482:	bf00      	nop
 800d484:	20000184 	.word	0x20000184

0800d488 <_strtol_l.constprop.0>:
 800d488:	2b01      	cmp	r3, #1
 800d48a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d48e:	d001      	beq.n	800d494 <_strtol_l.constprop.0+0xc>
 800d490:	2b24      	cmp	r3, #36	; 0x24
 800d492:	d906      	bls.n	800d4a2 <_strtol_l.constprop.0+0x1a>
 800d494:	f7fe fae2 	bl	800ba5c <__errno>
 800d498:	2316      	movs	r3, #22
 800d49a:	6003      	str	r3, [r0, #0]
 800d49c:	2000      	movs	r0, #0
 800d49e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4a2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d588 <_strtol_l.constprop.0+0x100>
 800d4a6:	460d      	mov	r5, r1
 800d4a8:	462e      	mov	r6, r5
 800d4aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d4ae:	f814 700c 	ldrb.w	r7, [r4, ip]
 800d4b2:	f017 0708 	ands.w	r7, r7, #8
 800d4b6:	d1f7      	bne.n	800d4a8 <_strtol_l.constprop.0+0x20>
 800d4b8:	2c2d      	cmp	r4, #45	; 0x2d
 800d4ba:	d132      	bne.n	800d522 <_strtol_l.constprop.0+0x9a>
 800d4bc:	782c      	ldrb	r4, [r5, #0]
 800d4be:	2701      	movs	r7, #1
 800d4c0:	1cb5      	adds	r5, r6, #2
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d05b      	beq.n	800d57e <_strtol_l.constprop.0+0xf6>
 800d4c6:	2b10      	cmp	r3, #16
 800d4c8:	d109      	bne.n	800d4de <_strtol_l.constprop.0+0x56>
 800d4ca:	2c30      	cmp	r4, #48	; 0x30
 800d4cc:	d107      	bne.n	800d4de <_strtol_l.constprop.0+0x56>
 800d4ce:	782c      	ldrb	r4, [r5, #0]
 800d4d0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d4d4:	2c58      	cmp	r4, #88	; 0x58
 800d4d6:	d14d      	bne.n	800d574 <_strtol_l.constprop.0+0xec>
 800d4d8:	786c      	ldrb	r4, [r5, #1]
 800d4da:	2310      	movs	r3, #16
 800d4dc:	3502      	adds	r5, #2
 800d4de:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d4e2:	f108 38ff 	add.w	r8, r8, #4294967295
 800d4e6:	f04f 0c00 	mov.w	ip, #0
 800d4ea:	fbb8 f9f3 	udiv	r9, r8, r3
 800d4ee:	4666      	mov	r6, ip
 800d4f0:	fb03 8a19 	mls	sl, r3, r9, r8
 800d4f4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800d4f8:	f1be 0f09 	cmp.w	lr, #9
 800d4fc:	d816      	bhi.n	800d52c <_strtol_l.constprop.0+0xa4>
 800d4fe:	4674      	mov	r4, lr
 800d500:	42a3      	cmp	r3, r4
 800d502:	dd24      	ble.n	800d54e <_strtol_l.constprop.0+0xc6>
 800d504:	f1bc 0f00 	cmp.w	ip, #0
 800d508:	db1e      	blt.n	800d548 <_strtol_l.constprop.0+0xc0>
 800d50a:	45b1      	cmp	r9, r6
 800d50c:	d31c      	bcc.n	800d548 <_strtol_l.constprop.0+0xc0>
 800d50e:	d101      	bne.n	800d514 <_strtol_l.constprop.0+0x8c>
 800d510:	45a2      	cmp	sl, r4
 800d512:	db19      	blt.n	800d548 <_strtol_l.constprop.0+0xc0>
 800d514:	fb06 4603 	mla	r6, r6, r3, r4
 800d518:	f04f 0c01 	mov.w	ip, #1
 800d51c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d520:	e7e8      	b.n	800d4f4 <_strtol_l.constprop.0+0x6c>
 800d522:	2c2b      	cmp	r4, #43	; 0x2b
 800d524:	bf04      	itt	eq
 800d526:	782c      	ldrbeq	r4, [r5, #0]
 800d528:	1cb5      	addeq	r5, r6, #2
 800d52a:	e7ca      	b.n	800d4c2 <_strtol_l.constprop.0+0x3a>
 800d52c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800d530:	f1be 0f19 	cmp.w	lr, #25
 800d534:	d801      	bhi.n	800d53a <_strtol_l.constprop.0+0xb2>
 800d536:	3c37      	subs	r4, #55	; 0x37
 800d538:	e7e2      	b.n	800d500 <_strtol_l.constprop.0+0x78>
 800d53a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800d53e:	f1be 0f19 	cmp.w	lr, #25
 800d542:	d804      	bhi.n	800d54e <_strtol_l.constprop.0+0xc6>
 800d544:	3c57      	subs	r4, #87	; 0x57
 800d546:	e7db      	b.n	800d500 <_strtol_l.constprop.0+0x78>
 800d548:	f04f 3cff 	mov.w	ip, #4294967295
 800d54c:	e7e6      	b.n	800d51c <_strtol_l.constprop.0+0x94>
 800d54e:	f1bc 0f00 	cmp.w	ip, #0
 800d552:	da05      	bge.n	800d560 <_strtol_l.constprop.0+0xd8>
 800d554:	2322      	movs	r3, #34	; 0x22
 800d556:	6003      	str	r3, [r0, #0]
 800d558:	4646      	mov	r6, r8
 800d55a:	b942      	cbnz	r2, 800d56e <_strtol_l.constprop.0+0xe6>
 800d55c:	4630      	mov	r0, r6
 800d55e:	e79e      	b.n	800d49e <_strtol_l.constprop.0+0x16>
 800d560:	b107      	cbz	r7, 800d564 <_strtol_l.constprop.0+0xdc>
 800d562:	4276      	negs	r6, r6
 800d564:	2a00      	cmp	r2, #0
 800d566:	d0f9      	beq.n	800d55c <_strtol_l.constprop.0+0xd4>
 800d568:	f1bc 0f00 	cmp.w	ip, #0
 800d56c:	d000      	beq.n	800d570 <_strtol_l.constprop.0+0xe8>
 800d56e:	1e69      	subs	r1, r5, #1
 800d570:	6011      	str	r1, [r2, #0]
 800d572:	e7f3      	b.n	800d55c <_strtol_l.constprop.0+0xd4>
 800d574:	2430      	movs	r4, #48	; 0x30
 800d576:	2b00      	cmp	r3, #0
 800d578:	d1b1      	bne.n	800d4de <_strtol_l.constprop.0+0x56>
 800d57a:	2308      	movs	r3, #8
 800d57c:	e7af      	b.n	800d4de <_strtol_l.constprop.0+0x56>
 800d57e:	2c30      	cmp	r4, #48	; 0x30
 800d580:	d0a5      	beq.n	800d4ce <_strtol_l.constprop.0+0x46>
 800d582:	230a      	movs	r3, #10
 800d584:	e7ab      	b.n	800d4de <_strtol_l.constprop.0+0x56>
 800d586:	bf00      	nop
 800d588:	08010596 	.word	0x08010596

0800d58c <_strtol_r>:
 800d58c:	f7ff bf7c 	b.w	800d488 <_strtol_l.constprop.0>

0800d590 <__utoa>:
 800d590:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d592:	4c1f      	ldr	r4, [pc, #124]	; (800d610 <__utoa+0x80>)
 800d594:	b08b      	sub	sp, #44	; 0x2c
 800d596:	4605      	mov	r5, r0
 800d598:	460b      	mov	r3, r1
 800d59a:	466e      	mov	r6, sp
 800d59c:	f104 0c20 	add.w	ip, r4, #32
 800d5a0:	6820      	ldr	r0, [r4, #0]
 800d5a2:	6861      	ldr	r1, [r4, #4]
 800d5a4:	4637      	mov	r7, r6
 800d5a6:	c703      	stmia	r7!, {r0, r1}
 800d5a8:	3408      	adds	r4, #8
 800d5aa:	4564      	cmp	r4, ip
 800d5ac:	463e      	mov	r6, r7
 800d5ae:	d1f7      	bne.n	800d5a0 <__utoa+0x10>
 800d5b0:	7921      	ldrb	r1, [r4, #4]
 800d5b2:	7139      	strb	r1, [r7, #4]
 800d5b4:	1e91      	subs	r1, r2, #2
 800d5b6:	6820      	ldr	r0, [r4, #0]
 800d5b8:	6038      	str	r0, [r7, #0]
 800d5ba:	2922      	cmp	r1, #34	; 0x22
 800d5bc:	f04f 0100 	mov.w	r1, #0
 800d5c0:	d904      	bls.n	800d5cc <__utoa+0x3c>
 800d5c2:	7019      	strb	r1, [r3, #0]
 800d5c4:	460b      	mov	r3, r1
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	b00b      	add	sp, #44	; 0x2c
 800d5ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5cc:	1e58      	subs	r0, r3, #1
 800d5ce:	4684      	mov	ip, r0
 800d5d0:	fbb5 f7f2 	udiv	r7, r5, r2
 800d5d4:	fb02 5617 	mls	r6, r2, r7, r5
 800d5d8:	3628      	adds	r6, #40	; 0x28
 800d5da:	446e      	add	r6, sp
 800d5dc:	460c      	mov	r4, r1
 800d5de:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800d5e2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800d5e6:	462e      	mov	r6, r5
 800d5e8:	42b2      	cmp	r2, r6
 800d5ea:	f101 0101 	add.w	r1, r1, #1
 800d5ee:	463d      	mov	r5, r7
 800d5f0:	d9ee      	bls.n	800d5d0 <__utoa+0x40>
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	545a      	strb	r2, [r3, r1]
 800d5f6:	1919      	adds	r1, r3, r4
 800d5f8:	1aa5      	subs	r5, r4, r2
 800d5fa:	42aa      	cmp	r2, r5
 800d5fc:	dae3      	bge.n	800d5c6 <__utoa+0x36>
 800d5fe:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800d602:	780e      	ldrb	r6, [r1, #0]
 800d604:	7006      	strb	r6, [r0, #0]
 800d606:	3201      	adds	r2, #1
 800d608:	f801 5901 	strb.w	r5, [r1], #-1
 800d60c:	e7f4      	b.n	800d5f8 <__utoa+0x68>
 800d60e:	bf00      	nop
 800d610:	08010570 	.word	0x08010570

0800d614 <quorem>:
 800d614:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d618:	6903      	ldr	r3, [r0, #16]
 800d61a:	690c      	ldr	r4, [r1, #16]
 800d61c:	42a3      	cmp	r3, r4
 800d61e:	4607      	mov	r7, r0
 800d620:	f2c0 8081 	blt.w	800d726 <quorem+0x112>
 800d624:	3c01      	subs	r4, #1
 800d626:	f101 0814 	add.w	r8, r1, #20
 800d62a:	f100 0514 	add.w	r5, r0, #20
 800d62e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d632:	9301      	str	r3, [sp, #4]
 800d634:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d638:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d63c:	3301      	adds	r3, #1
 800d63e:	429a      	cmp	r2, r3
 800d640:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d644:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d648:	fbb2 f6f3 	udiv	r6, r2, r3
 800d64c:	d331      	bcc.n	800d6b2 <quorem+0x9e>
 800d64e:	f04f 0e00 	mov.w	lr, #0
 800d652:	4640      	mov	r0, r8
 800d654:	46ac      	mov	ip, r5
 800d656:	46f2      	mov	sl, lr
 800d658:	f850 2b04 	ldr.w	r2, [r0], #4
 800d65c:	b293      	uxth	r3, r2
 800d65e:	fb06 e303 	mla	r3, r6, r3, lr
 800d662:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d666:	b29b      	uxth	r3, r3
 800d668:	ebaa 0303 	sub.w	r3, sl, r3
 800d66c:	f8dc a000 	ldr.w	sl, [ip]
 800d670:	0c12      	lsrs	r2, r2, #16
 800d672:	fa13 f38a 	uxtah	r3, r3, sl
 800d676:	fb06 e202 	mla	r2, r6, r2, lr
 800d67a:	9300      	str	r3, [sp, #0]
 800d67c:	9b00      	ldr	r3, [sp, #0]
 800d67e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d682:	b292      	uxth	r2, r2
 800d684:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d688:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d68c:	f8bd 3000 	ldrh.w	r3, [sp]
 800d690:	4581      	cmp	r9, r0
 800d692:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d696:	f84c 3b04 	str.w	r3, [ip], #4
 800d69a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d69e:	d2db      	bcs.n	800d658 <quorem+0x44>
 800d6a0:	f855 300b 	ldr.w	r3, [r5, fp]
 800d6a4:	b92b      	cbnz	r3, 800d6b2 <quorem+0x9e>
 800d6a6:	9b01      	ldr	r3, [sp, #4]
 800d6a8:	3b04      	subs	r3, #4
 800d6aa:	429d      	cmp	r5, r3
 800d6ac:	461a      	mov	r2, r3
 800d6ae:	d32e      	bcc.n	800d70e <quorem+0xfa>
 800d6b0:	613c      	str	r4, [r7, #16]
 800d6b2:	4638      	mov	r0, r7
 800d6b4:	f001 fc92 	bl	800efdc <__mcmp>
 800d6b8:	2800      	cmp	r0, #0
 800d6ba:	db24      	blt.n	800d706 <quorem+0xf2>
 800d6bc:	3601      	adds	r6, #1
 800d6be:	4628      	mov	r0, r5
 800d6c0:	f04f 0c00 	mov.w	ip, #0
 800d6c4:	f858 2b04 	ldr.w	r2, [r8], #4
 800d6c8:	f8d0 e000 	ldr.w	lr, [r0]
 800d6cc:	b293      	uxth	r3, r2
 800d6ce:	ebac 0303 	sub.w	r3, ip, r3
 800d6d2:	0c12      	lsrs	r2, r2, #16
 800d6d4:	fa13 f38e 	uxtah	r3, r3, lr
 800d6d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d6dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d6e0:	b29b      	uxth	r3, r3
 800d6e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d6e6:	45c1      	cmp	r9, r8
 800d6e8:	f840 3b04 	str.w	r3, [r0], #4
 800d6ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d6f0:	d2e8      	bcs.n	800d6c4 <quorem+0xb0>
 800d6f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d6f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d6fa:	b922      	cbnz	r2, 800d706 <quorem+0xf2>
 800d6fc:	3b04      	subs	r3, #4
 800d6fe:	429d      	cmp	r5, r3
 800d700:	461a      	mov	r2, r3
 800d702:	d30a      	bcc.n	800d71a <quorem+0x106>
 800d704:	613c      	str	r4, [r7, #16]
 800d706:	4630      	mov	r0, r6
 800d708:	b003      	add	sp, #12
 800d70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d70e:	6812      	ldr	r2, [r2, #0]
 800d710:	3b04      	subs	r3, #4
 800d712:	2a00      	cmp	r2, #0
 800d714:	d1cc      	bne.n	800d6b0 <quorem+0x9c>
 800d716:	3c01      	subs	r4, #1
 800d718:	e7c7      	b.n	800d6aa <quorem+0x96>
 800d71a:	6812      	ldr	r2, [r2, #0]
 800d71c:	3b04      	subs	r3, #4
 800d71e:	2a00      	cmp	r2, #0
 800d720:	d1f0      	bne.n	800d704 <quorem+0xf0>
 800d722:	3c01      	subs	r4, #1
 800d724:	e7eb      	b.n	800d6fe <quorem+0xea>
 800d726:	2000      	movs	r0, #0
 800d728:	e7ee      	b.n	800d708 <quorem+0xf4>
 800d72a:	0000      	movs	r0, r0
 800d72c:	0000      	movs	r0, r0
	...

0800d730 <_dtoa_r>:
 800d730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d734:	ed2d 8b04 	vpush	{d8-d9}
 800d738:	ec57 6b10 	vmov	r6, r7, d0
 800d73c:	b093      	sub	sp, #76	; 0x4c
 800d73e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d740:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d744:	9106      	str	r1, [sp, #24]
 800d746:	ee10 aa10 	vmov	sl, s0
 800d74a:	4604      	mov	r4, r0
 800d74c:	9209      	str	r2, [sp, #36]	; 0x24
 800d74e:	930c      	str	r3, [sp, #48]	; 0x30
 800d750:	46bb      	mov	fp, r7
 800d752:	b975      	cbnz	r5, 800d772 <_dtoa_r+0x42>
 800d754:	2010      	movs	r0, #16
 800d756:	f001 f94d 	bl	800e9f4 <malloc>
 800d75a:	4602      	mov	r2, r0
 800d75c:	6260      	str	r0, [r4, #36]	; 0x24
 800d75e:	b920      	cbnz	r0, 800d76a <_dtoa_r+0x3a>
 800d760:	4ba7      	ldr	r3, [pc, #668]	; (800da00 <_dtoa_r+0x2d0>)
 800d762:	21ea      	movs	r1, #234	; 0xea
 800d764:	48a7      	ldr	r0, [pc, #668]	; (800da04 <_dtoa_r+0x2d4>)
 800d766:	f002 f8bd 	bl	800f8e4 <__assert_func>
 800d76a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d76e:	6005      	str	r5, [r0, #0]
 800d770:	60c5      	str	r5, [r0, #12]
 800d772:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d774:	6819      	ldr	r1, [r3, #0]
 800d776:	b151      	cbz	r1, 800d78e <_dtoa_r+0x5e>
 800d778:	685a      	ldr	r2, [r3, #4]
 800d77a:	604a      	str	r2, [r1, #4]
 800d77c:	2301      	movs	r3, #1
 800d77e:	4093      	lsls	r3, r2
 800d780:	608b      	str	r3, [r1, #8]
 800d782:	4620      	mov	r0, r4
 800d784:	f001 f99e 	bl	800eac4 <_Bfree>
 800d788:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d78a:	2200      	movs	r2, #0
 800d78c:	601a      	str	r2, [r3, #0]
 800d78e:	1e3b      	subs	r3, r7, #0
 800d790:	bfaa      	itet	ge
 800d792:	2300      	movge	r3, #0
 800d794:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d798:	f8c8 3000 	strge.w	r3, [r8]
 800d79c:	4b9a      	ldr	r3, [pc, #616]	; (800da08 <_dtoa_r+0x2d8>)
 800d79e:	bfbc      	itt	lt
 800d7a0:	2201      	movlt	r2, #1
 800d7a2:	f8c8 2000 	strlt.w	r2, [r8]
 800d7a6:	ea33 030b 	bics.w	r3, r3, fp
 800d7aa:	d11b      	bne.n	800d7e4 <_dtoa_r+0xb4>
 800d7ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d7ae:	f242 730f 	movw	r3, #9999	; 0x270f
 800d7b2:	6013      	str	r3, [r2, #0]
 800d7b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d7b8:	4333      	orrs	r3, r6
 800d7ba:	f000 8592 	beq.w	800e2e2 <_dtoa_r+0xbb2>
 800d7be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d7c0:	b963      	cbnz	r3, 800d7dc <_dtoa_r+0xac>
 800d7c2:	4b92      	ldr	r3, [pc, #584]	; (800da0c <_dtoa_r+0x2dc>)
 800d7c4:	e022      	b.n	800d80c <_dtoa_r+0xdc>
 800d7c6:	4b92      	ldr	r3, [pc, #584]	; (800da10 <_dtoa_r+0x2e0>)
 800d7c8:	9301      	str	r3, [sp, #4]
 800d7ca:	3308      	adds	r3, #8
 800d7cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d7ce:	6013      	str	r3, [r2, #0]
 800d7d0:	9801      	ldr	r0, [sp, #4]
 800d7d2:	b013      	add	sp, #76	; 0x4c
 800d7d4:	ecbd 8b04 	vpop	{d8-d9}
 800d7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7dc:	4b8b      	ldr	r3, [pc, #556]	; (800da0c <_dtoa_r+0x2dc>)
 800d7de:	9301      	str	r3, [sp, #4]
 800d7e0:	3303      	adds	r3, #3
 800d7e2:	e7f3      	b.n	800d7cc <_dtoa_r+0x9c>
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	4650      	mov	r0, sl
 800d7ea:	4659      	mov	r1, fp
 800d7ec:	f7f3 f98c 	bl	8000b08 <__aeabi_dcmpeq>
 800d7f0:	ec4b ab19 	vmov	d9, sl, fp
 800d7f4:	4680      	mov	r8, r0
 800d7f6:	b158      	cbz	r0, 800d810 <_dtoa_r+0xe0>
 800d7f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d7fa:	2301      	movs	r3, #1
 800d7fc:	6013      	str	r3, [r2, #0]
 800d7fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d800:	2b00      	cmp	r3, #0
 800d802:	f000 856b 	beq.w	800e2dc <_dtoa_r+0xbac>
 800d806:	4883      	ldr	r0, [pc, #524]	; (800da14 <_dtoa_r+0x2e4>)
 800d808:	6018      	str	r0, [r3, #0]
 800d80a:	1e43      	subs	r3, r0, #1
 800d80c:	9301      	str	r3, [sp, #4]
 800d80e:	e7df      	b.n	800d7d0 <_dtoa_r+0xa0>
 800d810:	ec4b ab10 	vmov	d0, sl, fp
 800d814:	aa10      	add	r2, sp, #64	; 0x40
 800d816:	a911      	add	r1, sp, #68	; 0x44
 800d818:	4620      	mov	r0, r4
 800d81a:	f001 fd01 	bl	800f220 <__d2b>
 800d81e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d822:	ee08 0a10 	vmov	s16, r0
 800d826:	2d00      	cmp	r5, #0
 800d828:	f000 8084 	beq.w	800d934 <_dtoa_r+0x204>
 800d82c:	ee19 3a90 	vmov	r3, s19
 800d830:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d834:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d838:	4656      	mov	r6, sl
 800d83a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d83e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d842:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d846:	4b74      	ldr	r3, [pc, #464]	; (800da18 <_dtoa_r+0x2e8>)
 800d848:	2200      	movs	r2, #0
 800d84a:	4630      	mov	r0, r6
 800d84c:	4639      	mov	r1, r7
 800d84e:	f7f2 fd3b 	bl	80002c8 <__aeabi_dsub>
 800d852:	a365      	add	r3, pc, #404	; (adr r3, 800d9e8 <_dtoa_r+0x2b8>)
 800d854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d858:	f7f2 feee 	bl	8000638 <__aeabi_dmul>
 800d85c:	a364      	add	r3, pc, #400	; (adr r3, 800d9f0 <_dtoa_r+0x2c0>)
 800d85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d862:	f7f2 fd33 	bl	80002cc <__adddf3>
 800d866:	4606      	mov	r6, r0
 800d868:	4628      	mov	r0, r5
 800d86a:	460f      	mov	r7, r1
 800d86c:	f7f2 fe7a 	bl	8000564 <__aeabi_i2d>
 800d870:	a361      	add	r3, pc, #388	; (adr r3, 800d9f8 <_dtoa_r+0x2c8>)
 800d872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d876:	f7f2 fedf 	bl	8000638 <__aeabi_dmul>
 800d87a:	4602      	mov	r2, r0
 800d87c:	460b      	mov	r3, r1
 800d87e:	4630      	mov	r0, r6
 800d880:	4639      	mov	r1, r7
 800d882:	f7f2 fd23 	bl	80002cc <__adddf3>
 800d886:	4606      	mov	r6, r0
 800d888:	460f      	mov	r7, r1
 800d88a:	f7f3 f985 	bl	8000b98 <__aeabi_d2iz>
 800d88e:	2200      	movs	r2, #0
 800d890:	9000      	str	r0, [sp, #0]
 800d892:	2300      	movs	r3, #0
 800d894:	4630      	mov	r0, r6
 800d896:	4639      	mov	r1, r7
 800d898:	f7f3 f940 	bl	8000b1c <__aeabi_dcmplt>
 800d89c:	b150      	cbz	r0, 800d8b4 <_dtoa_r+0x184>
 800d89e:	9800      	ldr	r0, [sp, #0]
 800d8a0:	f7f2 fe60 	bl	8000564 <__aeabi_i2d>
 800d8a4:	4632      	mov	r2, r6
 800d8a6:	463b      	mov	r3, r7
 800d8a8:	f7f3 f92e 	bl	8000b08 <__aeabi_dcmpeq>
 800d8ac:	b910      	cbnz	r0, 800d8b4 <_dtoa_r+0x184>
 800d8ae:	9b00      	ldr	r3, [sp, #0]
 800d8b0:	3b01      	subs	r3, #1
 800d8b2:	9300      	str	r3, [sp, #0]
 800d8b4:	9b00      	ldr	r3, [sp, #0]
 800d8b6:	2b16      	cmp	r3, #22
 800d8b8:	d85a      	bhi.n	800d970 <_dtoa_r+0x240>
 800d8ba:	9a00      	ldr	r2, [sp, #0]
 800d8bc:	4b57      	ldr	r3, [pc, #348]	; (800da1c <_dtoa_r+0x2ec>)
 800d8be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8c6:	ec51 0b19 	vmov	r0, r1, d9
 800d8ca:	f7f3 f927 	bl	8000b1c <__aeabi_dcmplt>
 800d8ce:	2800      	cmp	r0, #0
 800d8d0:	d050      	beq.n	800d974 <_dtoa_r+0x244>
 800d8d2:	9b00      	ldr	r3, [sp, #0]
 800d8d4:	3b01      	subs	r3, #1
 800d8d6:	9300      	str	r3, [sp, #0]
 800d8d8:	2300      	movs	r3, #0
 800d8da:	930b      	str	r3, [sp, #44]	; 0x2c
 800d8dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d8de:	1b5d      	subs	r5, r3, r5
 800d8e0:	1e6b      	subs	r3, r5, #1
 800d8e2:	9305      	str	r3, [sp, #20]
 800d8e4:	bf45      	ittet	mi
 800d8e6:	f1c5 0301 	rsbmi	r3, r5, #1
 800d8ea:	9304      	strmi	r3, [sp, #16]
 800d8ec:	2300      	movpl	r3, #0
 800d8ee:	2300      	movmi	r3, #0
 800d8f0:	bf4c      	ite	mi
 800d8f2:	9305      	strmi	r3, [sp, #20]
 800d8f4:	9304      	strpl	r3, [sp, #16]
 800d8f6:	9b00      	ldr	r3, [sp, #0]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	db3d      	blt.n	800d978 <_dtoa_r+0x248>
 800d8fc:	9b05      	ldr	r3, [sp, #20]
 800d8fe:	9a00      	ldr	r2, [sp, #0]
 800d900:	920a      	str	r2, [sp, #40]	; 0x28
 800d902:	4413      	add	r3, r2
 800d904:	9305      	str	r3, [sp, #20]
 800d906:	2300      	movs	r3, #0
 800d908:	9307      	str	r3, [sp, #28]
 800d90a:	9b06      	ldr	r3, [sp, #24]
 800d90c:	2b09      	cmp	r3, #9
 800d90e:	f200 8089 	bhi.w	800da24 <_dtoa_r+0x2f4>
 800d912:	2b05      	cmp	r3, #5
 800d914:	bfc4      	itt	gt
 800d916:	3b04      	subgt	r3, #4
 800d918:	9306      	strgt	r3, [sp, #24]
 800d91a:	9b06      	ldr	r3, [sp, #24]
 800d91c:	f1a3 0302 	sub.w	r3, r3, #2
 800d920:	bfcc      	ite	gt
 800d922:	2500      	movgt	r5, #0
 800d924:	2501      	movle	r5, #1
 800d926:	2b03      	cmp	r3, #3
 800d928:	f200 8087 	bhi.w	800da3a <_dtoa_r+0x30a>
 800d92c:	e8df f003 	tbb	[pc, r3]
 800d930:	59383a2d 	.word	0x59383a2d
 800d934:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d938:	441d      	add	r5, r3
 800d93a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d93e:	2b20      	cmp	r3, #32
 800d940:	bfc1      	itttt	gt
 800d942:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d946:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d94a:	fa0b f303 	lslgt.w	r3, fp, r3
 800d94e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d952:	bfda      	itte	le
 800d954:	f1c3 0320 	rsble	r3, r3, #32
 800d958:	fa06 f003 	lslle.w	r0, r6, r3
 800d95c:	4318      	orrgt	r0, r3
 800d95e:	f7f2 fdf1 	bl	8000544 <__aeabi_ui2d>
 800d962:	2301      	movs	r3, #1
 800d964:	4606      	mov	r6, r0
 800d966:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d96a:	3d01      	subs	r5, #1
 800d96c:	930e      	str	r3, [sp, #56]	; 0x38
 800d96e:	e76a      	b.n	800d846 <_dtoa_r+0x116>
 800d970:	2301      	movs	r3, #1
 800d972:	e7b2      	b.n	800d8da <_dtoa_r+0x1aa>
 800d974:	900b      	str	r0, [sp, #44]	; 0x2c
 800d976:	e7b1      	b.n	800d8dc <_dtoa_r+0x1ac>
 800d978:	9b04      	ldr	r3, [sp, #16]
 800d97a:	9a00      	ldr	r2, [sp, #0]
 800d97c:	1a9b      	subs	r3, r3, r2
 800d97e:	9304      	str	r3, [sp, #16]
 800d980:	4253      	negs	r3, r2
 800d982:	9307      	str	r3, [sp, #28]
 800d984:	2300      	movs	r3, #0
 800d986:	930a      	str	r3, [sp, #40]	; 0x28
 800d988:	e7bf      	b.n	800d90a <_dtoa_r+0x1da>
 800d98a:	2300      	movs	r3, #0
 800d98c:	9308      	str	r3, [sp, #32]
 800d98e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d990:	2b00      	cmp	r3, #0
 800d992:	dc55      	bgt.n	800da40 <_dtoa_r+0x310>
 800d994:	2301      	movs	r3, #1
 800d996:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d99a:	461a      	mov	r2, r3
 800d99c:	9209      	str	r2, [sp, #36]	; 0x24
 800d99e:	e00c      	b.n	800d9ba <_dtoa_r+0x28a>
 800d9a0:	2301      	movs	r3, #1
 800d9a2:	e7f3      	b.n	800d98c <_dtoa_r+0x25c>
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d9a8:	9308      	str	r3, [sp, #32]
 800d9aa:	9b00      	ldr	r3, [sp, #0]
 800d9ac:	4413      	add	r3, r2
 800d9ae:	9302      	str	r3, [sp, #8]
 800d9b0:	3301      	adds	r3, #1
 800d9b2:	2b01      	cmp	r3, #1
 800d9b4:	9303      	str	r3, [sp, #12]
 800d9b6:	bfb8      	it	lt
 800d9b8:	2301      	movlt	r3, #1
 800d9ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d9bc:	2200      	movs	r2, #0
 800d9be:	6042      	str	r2, [r0, #4]
 800d9c0:	2204      	movs	r2, #4
 800d9c2:	f102 0614 	add.w	r6, r2, #20
 800d9c6:	429e      	cmp	r6, r3
 800d9c8:	6841      	ldr	r1, [r0, #4]
 800d9ca:	d93d      	bls.n	800da48 <_dtoa_r+0x318>
 800d9cc:	4620      	mov	r0, r4
 800d9ce:	f001 f839 	bl	800ea44 <_Balloc>
 800d9d2:	9001      	str	r0, [sp, #4]
 800d9d4:	2800      	cmp	r0, #0
 800d9d6:	d13b      	bne.n	800da50 <_dtoa_r+0x320>
 800d9d8:	4b11      	ldr	r3, [pc, #68]	; (800da20 <_dtoa_r+0x2f0>)
 800d9da:	4602      	mov	r2, r0
 800d9dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d9e0:	e6c0      	b.n	800d764 <_dtoa_r+0x34>
 800d9e2:	2301      	movs	r3, #1
 800d9e4:	e7df      	b.n	800d9a6 <_dtoa_r+0x276>
 800d9e6:	bf00      	nop
 800d9e8:	636f4361 	.word	0x636f4361
 800d9ec:	3fd287a7 	.word	0x3fd287a7
 800d9f0:	8b60c8b3 	.word	0x8b60c8b3
 800d9f4:	3fc68a28 	.word	0x3fc68a28
 800d9f8:	509f79fb 	.word	0x509f79fb
 800d9fc:	3fd34413 	.word	0x3fd34413
 800da00:	080106a3 	.word	0x080106a3
 800da04:	080106ba 	.word	0x080106ba
 800da08:	7ff00000 	.word	0x7ff00000
 800da0c:	0801069f 	.word	0x0801069f
 800da10:	08010696 	.word	0x08010696
 800da14:	080104f5 	.word	0x080104f5
 800da18:	3ff80000 	.word	0x3ff80000
 800da1c:	08010828 	.word	0x08010828
 800da20:	08010715 	.word	0x08010715
 800da24:	2501      	movs	r5, #1
 800da26:	2300      	movs	r3, #0
 800da28:	9306      	str	r3, [sp, #24]
 800da2a:	9508      	str	r5, [sp, #32]
 800da2c:	f04f 33ff 	mov.w	r3, #4294967295
 800da30:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800da34:	2200      	movs	r2, #0
 800da36:	2312      	movs	r3, #18
 800da38:	e7b0      	b.n	800d99c <_dtoa_r+0x26c>
 800da3a:	2301      	movs	r3, #1
 800da3c:	9308      	str	r3, [sp, #32]
 800da3e:	e7f5      	b.n	800da2c <_dtoa_r+0x2fc>
 800da40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da42:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800da46:	e7b8      	b.n	800d9ba <_dtoa_r+0x28a>
 800da48:	3101      	adds	r1, #1
 800da4a:	6041      	str	r1, [r0, #4]
 800da4c:	0052      	lsls	r2, r2, #1
 800da4e:	e7b8      	b.n	800d9c2 <_dtoa_r+0x292>
 800da50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da52:	9a01      	ldr	r2, [sp, #4]
 800da54:	601a      	str	r2, [r3, #0]
 800da56:	9b03      	ldr	r3, [sp, #12]
 800da58:	2b0e      	cmp	r3, #14
 800da5a:	f200 809d 	bhi.w	800db98 <_dtoa_r+0x468>
 800da5e:	2d00      	cmp	r5, #0
 800da60:	f000 809a 	beq.w	800db98 <_dtoa_r+0x468>
 800da64:	9b00      	ldr	r3, [sp, #0]
 800da66:	2b00      	cmp	r3, #0
 800da68:	dd32      	ble.n	800dad0 <_dtoa_r+0x3a0>
 800da6a:	4ab7      	ldr	r2, [pc, #732]	; (800dd48 <_dtoa_r+0x618>)
 800da6c:	f003 030f 	and.w	r3, r3, #15
 800da70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800da74:	e9d3 8900 	ldrd	r8, r9, [r3]
 800da78:	9b00      	ldr	r3, [sp, #0]
 800da7a:	05d8      	lsls	r0, r3, #23
 800da7c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800da80:	d516      	bpl.n	800dab0 <_dtoa_r+0x380>
 800da82:	4bb2      	ldr	r3, [pc, #712]	; (800dd4c <_dtoa_r+0x61c>)
 800da84:	ec51 0b19 	vmov	r0, r1, d9
 800da88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800da8c:	f7f2 fefe 	bl	800088c <__aeabi_ddiv>
 800da90:	f007 070f 	and.w	r7, r7, #15
 800da94:	4682      	mov	sl, r0
 800da96:	468b      	mov	fp, r1
 800da98:	2503      	movs	r5, #3
 800da9a:	4eac      	ldr	r6, [pc, #688]	; (800dd4c <_dtoa_r+0x61c>)
 800da9c:	b957      	cbnz	r7, 800dab4 <_dtoa_r+0x384>
 800da9e:	4642      	mov	r2, r8
 800daa0:	464b      	mov	r3, r9
 800daa2:	4650      	mov	r0, sl
 800daa4:	4659      	mov	r1, fp
 800daa6:	f7f2 fef1 	bl	800088c <__aeabi_ddiv>
 800daaa:	4682      	mov	sl, r0
 800daac:	468b      	mov	fp, r1
 800daae:	e028      	b.n	800db02 <_dtoa_r+0x3d2>
 800dab0:	2502      	movs	r5, #2
 800dab2:	e7f2      	b.n	800da9a <_dtoa_r+0x36a>
 800dab4:	07f9      	lsls	r1, r7, #31
 800dab6:	d508      	bpl.n	800daca <_dtoa_r+0x39a>
 800dab8:	4640      	mov	r0, r8
 800daba:	4649      	mov	r1, r9
 800dabc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800dac0:	f7f2 fdba 	bl	8000638 <__aeabi_dmul>
 800dac4:	3501      	adds	r5, #1
 800dac6:	4680      	mov	r8, r0
 800dac8:	4689      	mov	r9, r1
 800daca:	107f      	asrs	r7, r7, #1
 800dacc:	3608      	adds	r6, #8
 800dace:	e7e5      	b.n	800da9c <_dtoa_r+0x36c>
 800dad0:	f000 809b 	beq.w	800dc0a <_dtoa_r+0x4da>
 800dad4:	9b00      	ldr	r3, [sp, #0]
 800dad6:	4f9d      	ldr	r7, [pc, #628]	; (800dd4c <_dtoa_r+0x61c>)
 800dad8:	425e      	negs	r6, r3
 800dada:	4b9b      	ldr	r3, [pc, #620]	; (800dd48 <_dtoa_r+0x618>)
 800dadc:	f006 020f 	and.w	r2, r6, #15
 800dae0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dae8:	ec51 0b19 	vmov	r0, r1, d9
 800daec:	f7f2 fda4 	bl	8000638 <__aeabi_dmul>
 800daf0:	1136      	asrs	r6, r6, #4
 800daf2:	4682      	mov	sl, r0
 800daf4:	468b      	mov	fp, r1
 800daf6:	2300      	movs	r3, #0
 800daf8:	2502      	movs	r5, #2
 800dafa:	2e00      	cmp	r6, #0
 800dafc:	d17a      	bne.n	800dbf4 <_dtoa_r+0x4c4>
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d1d3      	bne.n	800daaa <_dtoa_r+0x37a>
 800db02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db04:	2b00      	cmp	r3, #0
 800db06:	f000 8082 	beq.w	800dc0e <_dtoa_r+0x4de>
 800db0a:	4b91      	ldr	r3, [pc, #580]	; (800dd50 <_dtoa_r+0x620>)
 800db0c:	2200      	movs	r2, #0
 800db0e:	4650      	mov	r0, sl
 800db10:	4659      	mov	r1, fp
 800db12:	f7f3 f803 	bl	8000b1c <__aeabi_dcmplt>
 800db16:	2800      	cmp	r0, #0
 800db18:	d079      	beq.n	800dc0e <_dtoa_r+0x4de>
 800db1a:	9b03      	ldr	r3, [sp, #12]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d076      	beq.n	800dc0e <_dtoa_r+0x4de>
 800db20:	9b02      	ldr	r3, [sp, #8]
 800db22:	2b00      	cmp	r3, #0
 800db24:	dd36      	ble.n	800db94 <_dtoa_r+0x464>
 800db26:	9b00      	ldr	r3, [sp, #0]
 800db28:	4650      	mov	r0, sl
 800db2a:	4659      	mov	r1, fp
 800db2c:	1e5f      	subs	r7, r3, #1
 800db2e:	2200      	movs	r2, #0
 800db30:	4b88      	ldr	r3, [pc, #544]	; (800dd54 <_dtoa_r+0x624>)
 800db32:	f7f2 fd81 	bl	8000638 <__aeabi_dmul>
 800db36:	9e02      	ldr	r6, [sp, #8]
 800db38:	4682      	mov	sl, r0
 800db3a:	468b      	mov	fp, r1
 800db3c:	3501      	adds	r5, #1
 800db3e:	4628      	mov	r0, r5
 800db40:	f7f2 fd10 	bl	8000564 <__aeabi_i2d>
 800db44:	4652      	mov	r2, sl
 800db46:	465b      	mov	r3, fp
 800db48:	f7f2 fd76 	bl	8000638 <__aeabi_dmul>
 800db4c:	4b82      	ldr	r3, [pc, #520]	; (800dd58 <_dtoa_r+0x628>)
 800db4e:	2200      	movs	r2, #0
 800db50:	f7f2 fbbc 	bl	80002cc <__adddf3>
 800db54:	46d0      	mov	r8, sl
 800db56:	46d9      	mov	r9, fp
 800db58:	4682      	mov	sl, r0
 800db5a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800db5e:	2e00      	cmp	r6, #0
 800db60:	d158      	bne.n	800dc14 <_dtoa_r+0x4e4>
 800db62:	4b7e      	ldr	r3, [pc, #504]	; (800dd5c <_dtoa_r+0x62c>)
 800db64:	2200      	movs	r2, #0
 800db66:	4640      	mov	r0, r8
 800db68:	4649      	mov	r1, r9
 800db6a:	f7f2 fbad 	bl	80002c8 <__aeabi_dsub>
 800db6e:	4652      	mov	r2, sl
 800db70:	465b      	mov	r3, fp
 800db72:	4680      	mov	r8, r0
 800db74:	4689      	mov	r9, r1
 800db76:	f7f2 ffef 	bl	8000b58 <__aeabi_dcmpgt>
 800db7a:	2800      	cmp	r0, #0
 800db7c:	f040 8295 	bne.w	800e0aa <_dtoa_r+0x97a>
 800db80:	4652      	mov	r2, sl
 800db82:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800db86:	4640      	mov	r0, r8
 800db88:	4649      	mov	r1, r9
 800db8a:	f7f2 ffc7 	bl	8000b1c <__aeabi_dcmplt>
 800db8e:	2800      	cmp	r0, #0
 800db90:	f040 8289 	bne.w	800e0a6 <_dtoa_r+0x976>
 800db94:	ec5b ab19 	vmov	sl, fp, d9
 800db98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	f2c0 8148 	blt.w	800de30 <_dtoa_r+0x700>
 800dba0:	9a00      	ldr	r2, [sp, #0]
 800dba2:	2a0e      	cmp	r2, #14
 800dba4:	f300 8144 	bgt.w	800de30 <_dtoa_r+0x700>
 800dba8:	4b67      	ldr	r3, [pc, #412]	; (800dd48 <_dtoa_r+0x618>)
 800dbaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dbae:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dbb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	f280 80d5 	bge.w	800dd64 <_dtoa_r+0x634>
 800dbba:	9b03      	ldr	r3, [sp, #12]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	f300 80d1 	bgt.w	800dd64 <_dtoa_r+0x634>
 800dbc2:	f040 826f 	bne.w	800e0a4 <_dtoa_r+0x974>
 800dbc6:	4b65      	ldr	r3, [pc, #404]	; (800dd5c <_dtoa_r+0x62c>)
 800dbc8:	2200      	movs	r2, #0
 800dbca:	4640      	mov	r0, r8
 800dbcc:	4649      	mov	r1, r9
 800dbce:	f7f2 fd33 	bl	8000638 <__aeabi_dmul>
 800dbd2:	4652      	mov	r2, sl
 800dbd4:	465b      	mov	r3, fp
 800dbd6:	f7f2 ffb5 	bl	8000b44 <__aeabi_dcmpge>
 800dbda:	9e03      	ldr	r6, [sp, #12]
 800dbdc:	4637      	mov	r7, r6
 800dbde:	2800      	cmp	r0, #0
 800dbe0:	f040 8245 	bne.w	800e06e <_dtoa_r+0x93e>
 800dbe4:	9d01      	ldr	r5, [sp, #4]
 800dbe6:	2331      	movs	r3, #49	; 0x31
 800dbe8:	f805 3b01 	strb.w	r3, [r5], #1
 800dbec:	9b00      	ldr	r3, [sp, #0]
 800dbee:	3301      	adds	r3, #1
 800dbf0:	9300      	str	r3, [sp, #0]
 800dbf2:	e240      	b.n	800e076 <_dtoa_r+0x946>
 800dbf4:	07f2      	lsls	r2, r6, #31
 800dbf6:	d505      	bpl.n	800dc04 <_dtoa_r+0x4d4>
 800dbf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dbfc:	f7f2 fd1c 	bl	8000638 <__aeabi_dmul>
 800dc00:	3501      	adds	r5, #1
 800dc02:	2301      	movs	r3, #1
 800dc04:	1076      	asrs	r6, r6, #1
 800dc06:	3708      	adds	r7, #8
 800dc08:	e777      	b.n	800dafa <_dtoa_r+0x3ca>
 800dc0a:	2502      	movs	r5, #2
 800dc0c:	e779      	b.n	800db02 <_dtoa_r+0x3d2>
 800dc0e:	9f00      	ldr	r7, [sp, #0]
 800dc10:	9e03      	ldr	r6, [sp, #12]
 800dc12:	e794      	b.n	800db3e <_dtoa_r+0x40e>
 800dc14:	9901      	ldr	r1, [sp, #4]
 800dc16:	4b4c      	ldr	r3, [pc, #304]	; (800dd48 <_dtoa_r+0x618>)
 800dc18:	4431      	add	r1, r6
 800dc1a:	910d      	str	r1, [sp, #52]	; 0x34
 800dc1c:	9908      	ldr	r1, [sp, #32]
 800dc1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800dc22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dc26:	2900      	cmp	r1, #0
 800dc28:	d043      	beq.n	800dcb2 <_dtoa_r+0x582>
 800dc2a:	494d      	ldr	r1, [pc, #308]	; (800dd60 <_dtoa_r+0x630>)
 800dc2c:	2000      	movs	r0, #0
 800dc2e:	f7f2 fe2d 	bl	800088c <__aeabi_ddiv>
 800dc32:	4652      	mov	r2, sl
 800dc34:	465b      	mov	r3, fp
 800dc36:	f7f2 fb47 	bl	80002c8 <__aeabi_dsub>
 800dc3a:	9d01      	ldr	r5, [sp, #4]
 800dc3c:	4682      	mov	sl, r0
 800dc3e:	468b      	mov	fp, r1
 800dc40:	4649      	mov	r1, r9
 800dc42:	4640      	mov	r0, r8
 800dc44:	f7f2 ffa8 	bl	8000b98 <__aeabi_d2iz>
 800dc48:	4606      	mov	r6, r0
 800dc4a:	f7f2 fc8b 	bl	8000564 <__aeabi_i2d>
 800dc4e:	4602      	mov	r2, r0
 800dc50:	460b      	mov	r3, r1
 800dc52:	4640      	mov	r0, r8
 800dc54:	4649      	mov	r1, r9
 800dc56:	f7f2 fb37 	bl	80002c8 <__aeabi_dsub>
 800dc5a:	3630      	adds	r6, #48	; 0x30
 800dc5c:	f805 6b01 	strb.w	r6, [r5], #1
 800dc60:	4652      	mov	r2, sl
 800dc62:	465b      	mov	r3, fp
 800dc64:	4680      	mov	r8, r0
 800dc66:	4689      	mov	r9, r1
 800dc68:	f7f2 ff58 	bl	8000b1c <__aeabi_dcmplt>
 800dc6c:	2800      	cmp	r0, #0
 800dc6e:	d163      	bne.n	800dd38 <_dtoa_r+0x608>
 800dc70:	4642      	mov	r2, r8
 800dc72:	464b      	mov	r3, r9
 800dc74:	4936      	ldr	r1, [pc, #216]	; (800dd50 <_dtoa_r+0x620>)
 800dc76:	2000      	movs	r0, #0
 800dc78:	f7f2 fb26 	bl	80002c8 <__aeabi_dsub>
 800dc7c:	4652      	mov	r2, sl
 800dc7e:	465b      	mov	r3, fp
 800dc80:	f7f2 ff4c 	bl	8000b1c <__aeabi_dcmplt>
 800dc84:	2800      	cmp	r0, #0
 800dc86:	f040 80b5 	bne.w	800ddf4 <_dtoa_r+0x6c4>
 800dc8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dc8c:	429d      	cmp	r5, r3
 800dc8e:	d081      	beq.n	800db94 <_dtoa_r+0x464>
 800dc90:	4b30      	ldr	r3, [pc, #192]	; (800dd54 <_dtoa_r+0x624>)
 800dc92:	2200      	movs	r2, #0
 800dc94:	4650      	mov	r0, sl
 800dc96:	4659      	mov	r1, fp
 800dc98:	f7f2 fcce 	bl	8000638 <__aeabi_dmul>
 800dc9c:	4b2d      	ldr	r3, [pc, #180]	; (800dd54 <_dtoa_r+0x624>)
 800dc9e:	4682      	mov	sl, r0
 800dca0:	468b      	mov	fp, r1
 800dca2:	4640      	mov	r0, r8
 800dca4:	4649      	mov	r1, r9
 800dca6:	2200      	movs	r2, #0
 800dca8:	f7f2 fcc6 	bl	8000638 <__aeabi_dmul>
 800dcac:	4680      	mov	r8, r0
 800dcae:	4689      	mov	r9, r1
 800dcb0:	e7c6      	b.n	800dc40 <_dtoa_r+0x510>
 800dcb2:	4650      	mov	r0, sl
 800dcb4:	4659      	mov	r1, fp
 800dcb6:	f7f2 fcbf 	bl	8000638 <__aeabi_dmul>
 800dcba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dcbc:	9d01      	ldr	r5, [sp, #4]
 800dcbe:	930f      	str	r3, [sp, #60]	; 0x3c
 800dcc0:	4682      	mov	sl, r0
 800dcc2:	468b      	mov	fp, r1
 800dcc4:	4649      	mov	r1, r9
 800dcc6:	4640      	mov	r0, r8
 800dcc8:	f7f2 ff66 	bl	8000b98 <__aeabi_d2iz>
 800dccc:	4606      	mov	r6, r0
 800dcce:	f7f2 fc49 	bl	8000564 <__aeabi_i2d>
 800dcd2:	3630      	adds	r6, #48	; 0x30
 800dcd4:	4602      	mov	r2, r0
 800dcd6:	460b      	mov	r3, r1
 800dcd8:	4640      	mov	r0, r8
 800dcda:	4649      	mov	r1, r9
 800dcdc:	f7f2 faf4 	bl	80002c8 <__aeabi_dsub>
 800dce0:	f805 6b01 	strb.w	r6, [r5], #1
 800dce4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dce6:	429d      	cmp	r5, r3
 800dce8:	4680      	mov	r8, r0
 800dcea:	4689      	mov	r9, r1
 800dcec:	f04f 0200 	mov.w	r2, #0
 800dcf0:	d124      	bne.n	800dd3c <_dtoa_r+0x60c>
 800dcf2:	4b1b      	ldr	r3, [pc, #108]	; (800dd60 <_dtoa_r+0x630>)
 800dcf4:	4650      	mov	r0, sl
 800dcf6:	4659      	mov	r1, fp
 800dcf8:	f7f2 fae8 	bl	80002cc <__adddf3>
 800dcfc:	4602      	mov	r2, r0
 800dcfe:	460b      	mov	r3, r1
 800dd00:	4640      	mov	r0, r8
 800dd02:	4649      	mov	r1, r9
 800dd04:	f7f2 ff28 	bl	8000b58 <__aeabi_dcmpgt>
 800dd08:	2800      	cmp	r0, #0
 800dd0a:	d173      	bne.n	800ddf4 <_dtoa_r+0x6c4>
 800dd0c:	4652      	mov	r2, sl
 800dd0e:	465b      	mov	r3, fp
 800dd10:	4913      	ldr	r1, [pc, #76]	; (800dd60 <_dtoa_r+0x630>)
 800dd12:	2000      	movs	r0, #0
 800dd14:	f7f2 fad8 	bl	80002c8 <__aeabi_dsub>
 800dd18:	4602      	mov	r2, r0
 800dd1a:	460b      	mov	r3, r1
 800dd1c:	4640      	mov	r0, r8
 800dd1e:	4649      	mov	r1, r9
 800dd20:	f7f2 fefc 	bl	8000b1c <__aeabi_dcmplt>
 800dd24:	2800      	cmp	r0, #0
 800dd26:	f43f af35 	beq.w	800db94 <_dtoa_r+0x464>
 800dd2a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800dd2c:	1e6b      	subs	r3, r5, #1
 800dd2e:	930f      	str	r3, [sp, #60]	; 0x3c
 800dd30:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dd34:	2b30      	cmp	r3, #48	; 0x30
 800dd36:	d0f8      	beq.n	800dd2a <_dtoa_r+0x5fa>
 800dd38:	9700      	str	r7, [sp, #0]
 800dd3a:	e049      	b.n	800ddd0 <_dtoa_r+0x6a0>
 800dd3c:	4b05      	ldr	r3, [pc, #20]	; (800dd54 <_dtoa_r+0x624>)
 800dd3e:	f7f2 fc7b 	bl	8000638 <__aeabi_dmul>
 800dd42:	4680      	mov	r8, r0
 800dd44:	4689      	mov	r9, r1
 800dd46:	e7bd      	b.n	800dcc4 <_dtoa_r+0x594>
 800dd48:	08010828 	.word	0x08010828
 800dd4c:	08010800 	.word	0x08010800
 800dd50:	3ff00000 	.word	0x3ff00000
 800dd54:	40240000 	.word	0x40240000
 800dd58:	401c0000 	.word	0x401c0000
 800dd5c:	40140000 	.word	0x40140000
 800dd60:	3fe00000 	.word	0x3fe00000
 800dd64:	9d01      	ldr	r5, [sp, #4]
 800dd66:	4656      	mov	r6, sl
 800dd68:	465f      	mov	r7, fp
 800dd6a:	4642      	mov	r2, r8
 800dd6c:	464b      	mov	r3, r9
 800dd6e:	4630      	mov	r0, r6
 800dd70:	4639      	mov	r1, r7
 800dd72:	f7f2 fd8b 	bl	800088c <__aeabi_ddiv>
 800dd76:	f7f2 ff0f 	bl	8000b98 <__aeabi_d2iz>
 800dd7a:	4682      	mov	sl, r0
 800dd7c:	f7f2 fbf2 	bl	8000564 <__aeabi_i2d>
 800dd80:	4642      	mov	r2, r8
 800dd82:	464b      	mov	r3, r9
 800dd84:	f7f2 fc58 	bl	8000638 <__aeabi_dmul>
 800dd88:	4602      	mov	r2, r0
 800dd8a:	460b      	mov	r3, r1
 800dd8c:	4630      	mov	r0, r6
 800dd8e:	4639      	mov	r1, r7
 800dd90:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800dd94:	f7f2 fa98 	bl	80002c8 <__aeabi_dsub>
 800dd98:	f805 6b01 	strb.w	r6, [r5], #1
 800dd9c:	9e01      	ldr	r6, [sp, #4]
 800dd9e:	9f03      	ldr	r7, [sp, #12]
 800dda0:	1bae      	subs	r6, r5, r6
 800dda2:	42b7      	cmp	r7, r6
 800dda4:	4602      	mov	r2, r0
 800dda6:	460b      	mov	r3, r1
 800dda8:	d135      	bne.n	800de16 <_dtoa_r+0x6e6>
 800ddaa:	f7f2 fa8f 	bl	80002cc <__adddf3>
 800ddae:	4642      	mov	r2, r8
 800ddb0:	464b      	mov	r3, r9
 800ddb2:	4606      	mov	r6, r0
 800ddb4:	460f      	mov	r7, r1
 800ddb6:	f7f2 fecf 	bl	8000b58 <__aeabi_dcmpgt>
 800ddba:	b9d0      	cbnz	r0, 800ddf2 <_dtoa_r+0x6c2>
 800ddbc:	4642      	mov	r2, r8
 800ddbe:	464b      	mov	r3, r9
 800ddc0:	4630      	mov	r0, r6
 800ddc2:	4639      	mov	r1, r7
 800ddc4:	f7f2 fea0 	bl	8000b08 <__aeabi_dcmpeq>
 800ddc8:	b110      	cbz	r0, 800ddd0 <_dtoa_r+0x6a0>
 800ddca:	f01a 0f01 	tst.w	sl, #1
 800ddce:	d110      	bne.n	800ddf2 <_dtoa_r+0x6c2>
 800ddd0:	4620      	mov	r0, r4
 800ddd2:	ee18 1a10 	vmov	r1, s16
 800ddd6:	f000 fe75 	bl	800eac4 <_Bfree>
 800ddda:	2300      	movs	r3, #0
 800dddc:	9800      	ldr	r0, [sp, #0]
 800ddde:	702b      	strb	r3, [r5, #0]
 800dde0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dde2:	3001      	adds	r0, #1
 800dde4:	6018      	str	r0, [r3, #0]
 800dde6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	f43f acf1 	beq.w	800d7d0 <_dtoa_r+0xa0>
 800ddee:	601d      	str	r5, [r3, #0]
 800ddf0:	e4ee      	b.n	800d7d0 <_dtoa_r+0xa0>
 800ddf2:	9f00      	ldr	r7, [sp, #0]
 800ddf4:	462b      	mov	r3, r5
 800ddf6:	461d      	mov	r5, r3
 800ddf8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ddfc:	2a39      	cmp	r2, #57	; 0x39
 800ddfe:	d106      	bne.n	800de0e <_dtoa_r+0x6de>
 800de00:	9a01      	ldr	r2, [sp, #4]
 800de02:	429a      	cmp	r2, r3
 800de04:	d1f7      	bne.n	800ddf6 <_dtoa_r+0x6c6>
 800de06:	9901      	ldr	r1, [sp, #4]
 800de08:	2230      	movs	r2, #48	; 0x30
 800de0a:	3701      	adds	r7, #1
 800de0c:	700a      	strb	r2, [r1, #0]
 800de0e:	781a      	ldrb	r2, [r3, #0]
 800de10:	3201      	adds	r2, #1
 800de12:	701a      	strb	r2, [r3, #0]
 800de14:	e790      	b.n	800dd38 <_dtoa_r+0x608>
 800de16:	4ba6      	ldr	r3, [pc, #664]	; (800e0b0 <_dtoa_r+0x980>)
 800de18:	2200      	movs	r2, #0
 800de1a:	f7f2 fc0d 	bl	8000638 <__aeabi_dmul>
 800de1e:	2200      	movs	r2, #0
 800de20:	2300      	movs	r3, #0
 800de22:	4606      	mov	r6, r0
 800de24:	460f      	mov	r7, r1
 800de26:	f7f2 fe6f 	bl	8000b08 <__aeabi_dcmpeq>
 800de2a:	2800      	cmp	r0, #0
 800de2c:	d09d      	beq.n	800dd6a <_dtoa_r+0x63a>
 800de2e:	e7cf      	b.n	800ddd0 <_dtoa_r+0x6a0>
 800de30:	9a08      	ldr	r2, [sp, #32]
 800de32:	2a00      	cmp	r2, #0
 800de34:	f000 80d7 	beq.w	800dfe6 <_dtoa_r+0x8b6>
 800de38:	9a06      	ldr	r2, [sp, #24]
 800de3a:	2a01      	cmp	r2, #1
 800de3c:	f300 80ba 	bgt.w	800dfb4 <_dtoa_r+0x884>
 800de40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800de42:	2a00      	cmp	r2, #0
 800de44:	f000 80b2 	beq.w	800dfac <_dtoa_r+0x87c>
 800de48:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800de4c:	9e07      	ldr	r6, [sp, #28]
 800de4e:	9d04      	ldr	r5, [sp, #16]
 800de50:	9a04      	ldr	r2, [sp, #16]
 800de52:	441a      	add	r2, r3
 800de54:	9204      	str	r2, [sp, #16]
 800de56:	9a05      	ldr	r2, [sp, #20]
 800de58:	2101      	movs	r1, #1
 800de5a:	441a      	add	r2, r3
 800de5c:	4620      	mov	r0, r4
 800de5e:	9205      	str	r2, [sp, #20]
 800de60:	f000 ff32 	bl	800ecc8 <__i2b>
 800de64:	4607      	mov	r7, r0
 800de66:	2d00      	cmp	r5, #0
 800de68:	dd0c      	ble.n	800de84 <_dtoa_r+0x754>
 800de6a:	9b05      	ldr	r3, [sp, #20]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	dd09      	ble.n	800de84 <_dtoa_r+0x754>
 800de70:	42ab      	cmp	r3, r5
 800de72:	9a04      	ldr	r2, [sp, #16]
 800de74:	bfa8      	it	ge
 800de76:	462b      	movge	r3, r5
 800de78:	1ad2      	subs	r2, r2, r3
 800de7a:	9204      	str	r2, [sp, #16]
 800de7c:	9a05      	ldr	r2, [sp, #20]
 800de7e:	1aed      	subs	r5, r5, r3
 800de80:	1ad3      	subs	r3, r2, r3
 800de82:	9305      	str	r3, [sp, #20]
 800de84:	9b07      	ldr	r3, [sp, #28]
 800de86:	b31b      	cbz	r3, 800ded0 <_dtoa_r+0x7a0>
 800de88:	9b08      	ldr	r3, [sp, #32]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	f000 80af 	beq.w	800dfee <_dtoa_r+0x8be>
 800de90:	2e00      	cmp	r6, #0
 800de92:	dd13      	ble.n	800debc <_dtoa_r+0x78c>
 800de94:	4639      	mov	r1, r7
 800de96:	4632      	mov	r2, r6
 800de98:	4620      	mov	r0, r4
 800de9a:	f000 ffd5 	bl	800ee48 <__pow5mult>
 800de9e:	ee18 2a10 	vmov	r2, s16
 800dea2:	4601      	mov	r1, r0
 800dea4:	4607      	mov	r7, r0
 800dea6:	4620      	mov	r0, r4
 800dea8:	f000 ff24 	bl	800ecf4 <__multiply>
 800deac:	ee18 1a10 	vmov	r1, s16
 800deb0:	4680      	mov	r8, r0
 800deb2:	4620      	mov	r0, r4
 800deb4:	f000 fe06 	bl	800eac4 <_Bfree>
 800deb8:	ee08 8a10 	vmov	s16, r8
 800debc:	9b07      	ldr	r3, [sp, #28]
 800debe:	1b9a      	subs	r2, r3, r6
 800dec0:	d006      	beq.n	800ded0 <_dtoa_r+0x7a0>
 800dec2:	ee18 1a10 	vmov	r1, s16
 800dec6:	4620      	mov	r0, r4
 800dec8:	f000 ffbe 	bl	800ee48 <__pow5mult>
 800decc:	ee08 0a10 	vmov	s16, r0
 800ded0:	2101      	movs	r1, #1
 800ded2:	4620      	mov	r0, r4
 800ded4:	f000 fef8 	bl	800ecc8 <__i2b>
 800ded8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800deda:	2b00      	cmp	r3, #0
 800dedc:	4606      	mov	r6, r0
 800dede:	f340 8088 	ble.w	800dff2 <_dtoa_r+0x8c2>
 800dee2:	461a      	mov	r2, r3
 800dee4:	4601      	mov	r1, r0
 800dee6:	4620      	mov	r0, r4
 800dee8:	f000 ffae 	bl	800ee48 <__pow5mult>
 800deec:	9b06      	ldr	r3, [sp, #24]
 800deee:	2b01      	cmp	r3, #1
 800def0:	4606      	mov	r6, r0
 800def2:	f340 8081 	ble.w	800dff8 <_dtoa_r+0x8c8>
 800def6:	f04f 0800 	mov.w	r8, #0
 800defa:	6933      	ldr	r3, [r6, #16]
 800defc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800df00:	6918      	ldr	r0, [r3, #16]
 800df02:	f000 fe91 	bl	800ec28 <__hi0bits>
 800df06:	f1c0 0020 	rsb	r0, r0, #32
 800df0a:	9b05      	ldr	r3, [sp, #20]
 800df0c:	4418      	add	r0, r3
 800df0e:	f010 001f 	ands.w	r0, r0, #31
 800df12:	f000 8092 	beq.w	800e03a <_dtoa_r+0x90a>
 800df16:	f1c0 0320 	rsb	r3, r0, #32
 800df1a:	2b04      	cmp	r3, #4
 800df1c:	f340 808a 	ble.w	800e034 <_dtoa_r+0x904>
 800df20:	f1c0 001c 	rsb	r0, r0, #28
 800df24:	9b04      	ldr	r3, [sp, #16]
 800df26:	4403      	add	r3, r0
 800df28:	9304      	str	r3, [sp, #16]
 800df2a:	9b05      	ldr	r3, [sp, #20]
 800df2c:	4403      	add	r3, r0
 800df2e:	4405      	add	r5, r0
 800df30:	9305      	str	r3, [sp, #20]
 800df32:	9b04      	ldr	r3, [sp, #16]
 800df34:	2b00      	cmp	r3, #0
 800df36:	dd07      	ble.n	800df48 <_dtoa_r+0x818>
 800df38:	ee18 1a10 	vmov	r1, s16
 800df3c:	461a      	mov	r2, r3
 800df3e:	4620      	mov	r0, r4
 800df40:	f000 ffdc 	bl	800eefc <__lshift>
 800df44:	ee08 0a10 	vmov	s16, r0
 800df48:	9b05      	ldr	r3, [sp, #20]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	dd05      	ble.n	800df5a <_dtoa_r+0x82a>
 800df4e:	4631      	mov	r1, r6
 800df50:	461a      	mov	r2, r3
 800df52:	4620      	mov	r0, r4
 800df54:	f000 ffd2 	bl	800eefc <__lshift>
 800df58:	4606      	mov	r6, r0
 800df5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d06e      	beq.n	800e03e <_dtoa_r+0x90e>
 800df60:	ee18 0a10 	vmov	r0, s16
 800df64:	4631      	mov	r1, r6
 800df66:	f001 f839 	bl	800efdc <__mcmp>
 800df6a:	2800      	cmp	r0, #0
 800df6c:	da67      	bge.n	800e03e <_dtoa_r+0x90e>
 800df6e:	9b00      	ldr	r3, [sp, #0]
 800df70:	3b01      	subs	r3, #1
 800df72:	ee18 1a10 	vmov	r1, s16
 800df76:	9300      	str	r3, [sp, #0]
 800df78:	220a      	movs	r2, #10
 800df7a:	2300      	movs	r3, #0
 800df7c:	4620      	mov	r0, r4
 800df7e:	f000 fdc3 	bl	800eb08 <__multadd>
 800df82:	9b08      	ldr	r3, [sp, #32]
 800df84:	ee08 0a10 	vmov	s16, r0
 800df88:	2b00      	cmp	r3, #0
 800df8a:	f000 81b1 	beq.w	800e2f0 <_dtoa_r+0xbc0>
 800df8e:	2300      	movs	r3, #0
 800df90:	4639      	mov	r1, r7
 800df92:	220a      	movs	r2, #10
 800df94:	4620      	mov	r0, r4
 800df96:	f000 fdb7 	bl	800eb08 <__multadd>
 800df9a:	9b02      	ldr	r3, [sp, #8]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	4607      	mov	r7, r0
 800dfa0:	f300 808e 	bgt.w	800e0c0 <_dtoa_r+0x990>
 800dfa4:	9b06      	ldr	r3, [sp, #24]
 800dfa6:	2b02      	cmp	r3, #2
 800dfa8:	dc51      	bgt.n	800e04e <_dtoa_r+0x91e>
 800dfaa:	e089      	b.n	800e0c0 <_dtoa_r+0x990>
 800dfac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dfae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800dfb2:	e74b      	b.n	800de4c <_dtoa_r+0x71c>
 800dfb4:	9b03      	ldr	r3, [sp, #12]
 800dfb6:	1e5e      	subs	r6, r3, #1
 800dfb8:	9b07      	ldr	r3, [sp, #28]
 800dfba:	42b3      	cmp	r3, r6
 800dfbc:	bfbf      	itttt	lt
 800dfbe:	9b07      	ldrlt	r3, [sp, #28]
 800dfc0:	9607      	strlt	r6, [sp, #28]
 800dfc2:	1af2      	sublt	r2, r6, r3
 800dfc4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800dfc6:	bfb6      	itet	lt
 800dfc8:	189b      	addlt	r3, r3, r2
 800dfca:	1b9e      	subge	r6, r3, r6
 800dfcc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800dfce:	9b03      	ldr	r3, [sp, #12]
 800dfd0:	bfb8      	it	lt
 800dfd2:	2600      	movlt	r6, #0
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	bfb7      	itett	lt
 800dfd8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800dfdc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800dfe0:	1a9d      	sublt	r5, r3, r2
 800dfe2:	2300      	movlt	r3, #0
 800dfe4:	e734      	b.n	800de50 <_dtoa_r+0x720>
 800dfe6:	9e07      	ldr	r6, [sp, #28]
 800dfe8:	9d04      	ldr	r5, [sp, #16]
 800dfea:	9f08      	ldr	r7, [sp, #32]
 800dfec:	e73b      	b.n	800de66 <_dtoa_r+0x736>
 800dfee:	9a07      	ldr	r2, [sp, #28]
 800dff0:	e767      	b.n	800dec2 <_dtoa_r+0x792>
 800dff2:	9b06      	ldr	r3, [sp, #24]
 800dff4:	2b01      	cmp	r3, #1
 800dff6:	dc18      	bgt.n	800e02a <_dtoa_r+0x8fa>
 800dff8:	f1ba 0f00 	cmp.w	sl, #0
 800dffc:	d115      	bne.n	800e02a <_dtoa_r+0x8fa>
 800dffe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e002:	b993      	cbnz	r3, 800e02a <_dtoa_r+0x8fa>
 800e004:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e008:	0d1b      	lsrs	r3, r3, #20
 800e00a:	051b      	lsls	r3, r3, #20
 800e00c:	b183      	cbz	r3, 800e030 <_dtoa_r+0x900>
 800e00e:	9b04      	ldr	r3, [sp, #16]
 800e010:	3301      	adds	r3, #1
 800e012:	9304      	str	r3, [sp, #16]
 800e014:	9b05      	ldr	r3, [sp, #20]
 800e016:	3301      	adds	r3, #1
 800e018:	9305      	str	r3, [sp, #20]
 800e01a:	f04f 0801 	mov.w	r8, #1
 800e01e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e020:	2b00      	cmp	r3, #0
 800e022:	f47f af6a 	bne.w	800defa <_dtoa_r+0x7ca>
 800e026:	2001      	movs	r0, #1
 800e028:	e76f      	b.n	800df0a <_dtoa_r+0x7da>
 800e02a:	f04f 0800 	mov.w	r8, #0
 800e02e:	e7f6      	b.n	800e01e <_dtoa_r+0x8ee>
 800e030:	4698      	mov	r8, r3
 800e032:	e7f4      	b.n	800e01e <_dtoa_r+0x8ee>
 800e034:	f43f af7d 	beq.w	800df32 <_dtoa_r+0x802>
 800e038:	4618      	mov	r0, r3
 800e03a:	301c      	adds	r0, #28
 800e03c:	e772      	b.n	800df24 <_dtoa_r+0x7f4>
 800e03e:	9b03      	ldr	r3, [sp, #12]
 800e040:	2b00      	cmp	r3, #0
 800e042:	dc37      	bgt.n	800e0b4 <_dtoa_r+0x984>
 800e044:	9b06      	ldr	r3, [sp, #24]
 800e046:	2b02      	cmp	r3, #2
 800e048:	dd34      	ble.n	800e0b4 <_dtoa_r+0x984>
 800e04a:	9b03      	ldr	r3, [sp, #12]
 800e04c:	9302      	str	r3, [sp, #8]
 800e04e:	9b02      	ldr	r3, [sp, #8]
 800e050:	b96b      	cbnz	r3, 800e06e <_dtoa_r+0x93e>
 800e052:	4631      	mov	r1, r6
 800e054:	2205      	movs	r2, #5
 800e056:	4620      	mov	r0, r4
 800e058:	f000 fd56 	bl	800eb08 <__multadd>
 800e05c:	4601      	mov	r1, r0
 800e05e:	4606      	mov	r6, r0
 800e060:	ee18 0a10 	vmov	r0, s16
 800e064:	f000 ffba 	bl	800efdc <__mcmp>
 800e068:	2800      	cmp	r0, #0
 800e06a:	f73f adbb 	bgt.w	800dbe4 <_dtoa_r+0x4b4>
 800e06e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e070:	9d01      	ldr	r5, [sp, #4]
 800e072:	43db      	mvns	r3, r3
 800e074:	9300      	str	r3, [sp, #0]
 800e076:	f04f 0800 	mov.w	r8, #0
 800e07a:	4631      	mov	r1, r6
 800e07c:	4620      	mov	r0, r4
 800e07e:	f000 fd21 	bl	800eac4 <_Bfree>
 800e082:	2f00      	cmp	r7, #0
 800e084:	f43f aea4 	beq.w	800ddd0 <_dtoa_r+0x6a0>
 800e088:	f1b8 0f00 	cmp.w	r8, #0
 800e08c:	d005      	beq.n	800e09a <_dtoa_r+0x96a>
 800e08e:	45b8      	cmp	r8, r7
 800e090:	d003      	beq.n	800e09a <_dtoa_r+0x96a>
 800e092:	4641      	mov	r1, r8
 800e094:	4620      	mov	r0, r4
 800e096:	f000 fd15 	bl	800eac4 <_Bfree>
 800e09a:	4639      	mov	r1, r7
 800e09c:	4620      	mov	r0, r4
 800e09e:	f000 fd11 	bl	800eac4 <_Bfree>
 800e0a2:	e695      	b.n	800ddd0 <_dtoa_r+0x6a0>
 800e0a4:	2600      	movs	r6, #0
 800e0a6:	4637      	mov	r7, r6
 800e0a8:	e7e1      	b.n	800e06e <_dtoa_r+0x93e>
 800e0aa:	9700      	str	r7, [sp, #0]
 800e0ac:	4637      	mov	r7, r6
 800e0ae:	e599      	b.n	800dbe4 <_dtoa_r+0x4b4>
 800e0b0:	40240000 	.word	0x40240000
 800e0b4:	9b08      	ldr	r3, [sp, #32]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	f000 80ca 	beq.w	800e250 <_dtoa_r+0xb20>
 800e0bc:	9b03      	ldr	r3, [sp, #12]
 800e0be:	9302      	str	r3, [sp, #8]
 800e0c0:	2d00      	cmp	r5, #0
 800e0c2:	dd05      	ble.n	800e0d0 <_dtoa_r+0x9a0>
 800e0c4:	4639      	mov	r1, r7
 800e0c6:	462a      	mov	r2, r5
 800e0c8:	4620      	mov	r0, r4
 800e0ca:	f000 ff17 	bl	800eefc <__lshift>
 800e0ce:	4607      	mov	r7, r0
 800e0d0:	f1b8 0f00 	cmp.w	r8, #0
 800e0d4:	d05b      	beq.n	800e18e <_dtoa_r+0xa5e>
 800e0d6:	6879      	ldr	r1, [r7, #4]
 800e0d8:	4620      	mov	r0, r4
 800e0da:	f000 fcb3 	bl	800ea44 <_Balloc>
 800e0de:	4605      	mov	r5, r0
 800e0e0:	b928      	cbnz	r0, 800e0ee <_dtoa_r+0x9be>
 800e0e2:	4b87      	ldr	r3, [pc, #540]	; (800e300 <_dtoa_r+0xbd0>)
 800e0e4:	4602      	mov	r2, r0
 800e0e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e0ea:	f7ff bb3b 	b.w	800d764 <_dtoa_r+0x34>
 800e0ee:	693a      	ldr	r2, [r7, #16]
 800e0f0:	3202      	adds	r2, #2
 800e0f2:	0092      	lsls	r2, r2, #2
 800e0f4:	f107 010c 	add.w	r1, r7, #12
 800e0f8:	300c      	adds	r0, #12
 800e0fa:	f000 fc95 	bl	800ea28 <memcpy>
 800e0fe:	2201      	movs	r2, #1
 800e100:	4629      	mov	r1, r5
 800e102:	4620      	mov	r0, r4
 800e104:	f000 fefa 	bl	800eefc <__lshift>
 800e108:	9b01      	ldr	r3, [sp, #4]
 800e10a:	f103 0901 	add.w	r9, r3, #1
 800e10e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e112:	4413      	add	r3, r2
 800e114:	9305      	str	r3, [sp, #20]
 800e116:	f00a 0301 	and.w	r3, sl, #1
 800e11a:	46b8      	mov	r8, r7
 800e11c:	9304      	str	r3, [sp, #16]
 800e11e:	4607      	mov	r7, r0
 800e120:	4631      	mov	r1, r6
 800e122:	ee18 0a10 	vmov	r0, s16
 800e126:	f7ff fa75 	bl	800d614 <quorem>
 800e12a:	4641      	mov	r1, r8
 800e12c:	9002      	str	r0, [sp, #8]
 800e12e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e132:	ee18 0a10 	vmov	r0, s16
 800e136:	f000 ff51 	bl	800efdc <__mcmp>
 800e13a:	463a      	mov	r2, r7
 800e13c:	9003      	str	r0, [sp, #12]
 800e13e:	4631      	mov	r1, r6
 800e140:	4620      	mov	r0, r4
 800e142:	f000 ff67 	bl	800f014 <__mdiff>
 800e146:	68c2      	ldr	r2, [r0, #12]
 800e148:	f109 3bff 	add.w	fp, r9, #4294967295
 800e14c:	4605      	mov	r5, r0
 800e14e:	bb02      	cbnz	r2, 800e192 <_dtoa_r+0xa62>
 800e150:	4601      	mov	r1, r0
 800e152:	ee18 0a10 	vmov	r0, s16
 800e156:	f000 ff41 	bl	800efdc <__mcmp>
 800e15a:	4602      	mov	r2, r0
 800e15c:	4629      	mov	r1, r5
 800e15e:	4620      	mov	r0, r4
 800e160:	9207      	str	r2, [sp, #28]
 800e162:	f000 fcaf 	bl	800eac4 <_Bfree>
 800e166:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e16a:	ea43 0102 	orr.w	r1, r3, r2
 800e16e:	9b04      	ldr	r3, [sp, #16]
 800e170:	430b      	orrs	r3, r1
 800e172:	464d      	mov	r5, r9
 800e174:	d10f      	bne.n	800e196 <_dtoa_r+0xa66>
 800e176:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e17a:	d02a      	beq.n	800e1d2 <_dtoa_r+0xaa2>
 800e17c:	9b03      	ldr	r3, [sp, #12]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	dd02      	ble.n	800e188 <_dtoa_r+0xa58>
 800e182:	9b02      	ldr	r3, [sp, #8]
 800e184:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e188:	f88b a000 	strb.w	sl, [fp]
 800e18c:	e775      	b.n	800e07a <_dtoa_r+0x94a>
 800e18e:	4638      	mov	r0, r7
 800e190:	e7ba      	b.n	800e108 <_dtoa_r+0x9d8>
 800e192:	2201      	movs	r2, #1
 800e194:	e7e2      	b.n	800e15c <_dtoa_r+0xa2c>
 800e196:	9b03      	ldr	r3, [sp, #12]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	db04      	blt.n	800e1a6 <_dtoa_r+0xa76>
 800e19c:	9906      	ldr	r1, [sp, #24]
 800e19e:	430b      	orrs	r3, r1
 800e1a0:	9904      	ldr	r1, [sp, #16]
 800e1a2:	430b      	orrs	r3, r1
 800e1a4:	d122      	bne.n	800e1ec <_dtoa_r+0xabc>
 800e1a6:	2a00      	cmp	r2, #0
 800e1a8:	ddee      	ble.n	800e188 <_dtoa_r+0xa58>
 800e1aa:	ee18 1a10 	vmov	r1, s16
 800e1ae:	2201      	movs	r2, #1
 800e1b0:	4620      	mov	r0, r4
 800e1b2:	f000 fea3 	bl	800eefc <__lshift>
 800e1b6:	4631      	mov	r1, r6
 800e1b8:	ee08 0a10 	vmov	s16, r0
 800e1bc:	f000 ff0e 	bl	800efdc <__mcmp>
 800e1c0:	2800      	cmp	r0, #0
 800e1c2:	dc03      	bgt.n	800e1cc <_dtoa_r+0xa9c>
 800e1c4:	d1e0      	bne.n	800e188 <_dtoa_r+0xa58>
 800e1c6:	f01a 0f01 	tst.w	sl, #1
 800e1ca:	d0dd      	beq.n	800e188 <_dtoa_r+0xa58>
 800e1cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e1d0:	d1d7      	bne.n	800e182 <_dtoa_r+0xa52>
 800e1d2:	2339      	movs	r3, #57	; 0x39
 800e1d4:	f88b 3000 	strb.w	r3, [fp]
 800e1d8:	462b      	mov	r3, r5
 800e1da:	461d      	mov	r5, r3
 800e1dc:	3b01      	subs	r3, #1
 800e1de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e1e2:	2a39      	cmp	r2, #57	; 0x39
 800e1e4:	d071      	beq.n	800e2ca <_dtoa_r+0xb9a>
 800e1e6:	3201      	adds	r2, #1
 800e1e8:	701a      	strb	r2, [r3, #0]
 800e1ea:	e746      	b.n	800e07a <_dtoa_r+0x94a>
 800e1ec:	2a00      	cmp	r2, #0
 800e1ee:	dd07      	ble.n	800e200 <_dtoa_r+0xad0>
 800e1f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e1f4:	d0ed      	beq.n	800e1d2 <_dtoa_r+0xaa2>
 800e1f6:	f10a 0301 	add.w	r3, sl, #1
 800e1fa:	f88b 3000 	strb.w	r3, [fp]
 800e1fe:	e73c      	b.n	800e07a <_dtoa_r+0x94a>
 800e200:	9b05      	ldr	r3, [sp, #20]
 800e202:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e206:	4599      	cmp	r9, r3
 800e208:	d047      	beq.n	800e29a <_dtoa_r+0xb6a>
 800e20a:	ee18 1a10 	vmov	r1, s16
 800e20e:	2300      	movs	r3, #0
 800e210:	220a      	movs	r2, #10
 800e212:	4620      	mov	r0, r4
 800e214:	f000 fc78 	bl	800eb08 <__multadd>
 800e218:	45b8      	cmp	r8, r7
 800e21a:	ee08 0a10 	vmov	s16, r0
 800e21e:	f04f 0300 	mov.w	r3, #0
 800e222:	f04f 020a 	mov.w	r2, #10
 800e226:	4641      	mov	r1, r8
 800e228:	4620      	mov	r0, r4
 800e22a:	d106      	bne.n	800e23a <_dtoa_r+0xb0a>
 800e22c:	f000 fc6c 	bl	800eb08 <__multadd>
 800e230:	4680      	mov	r8, r0
 800e232:	4607      	mov	r7, r0
 800e234:	f109 0901 	add.w	r9, r9, #1
 800e238:	e772      	b.n	800e120 <_dtoa_r+0x9f0>
 800e23a:	f000 fc65 	bl	800eb08 <__multadd>
 800e23e:	4639      	mov	r1, r7
 800e240:	4680      	mov	r8, r0
 800e242:	2300      	movs	r3, #0
 800e244:	220a      	movs	r2, #10
 800e246:	4620      	mov	r0, r4
 800e248:	f000 fc5e 	bl	800eb08 <__multadd>
 800e24c:	4607      	mov	r7, r0
 800e24e:	e7f1      	b.n	800e234 <_dtoa_r+0xb04>
 800e250:	9b03      	ldr	r3, [sp, #12]
 800e252:	9302      	str	r3, [sp, #8]
 800e254:	9d01      	ldr	r5, [sp, #4]
 800e256:	ee18 0a10 	vmov	r0, s16
 800e25a:	4631      	mov	r1, r6
 800e25c:	f7ff f9da 	bl	800d614 <quorem>
 800e260:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e264:	9b01      	ldr	r3, [sp, #4]
 800e266:	f805 ab01 	strb.w	sl, [r5], #1
 800e26a:	1aea      	subs	r2, r5, r3
 800e26c:	9b02      	ldr	r3, [sp, #8]
 800e26e:	4293      	cmp	r3, r2
 800e270:	dd09      	ble.n	800e286 <_dtoa_r+0xb56>
 800e272:	ee18 1a10 	vmov	r1, s16
 800e276:	2300      	movs	r3, #0
 800e278:	220a      	movs	r2, #10
 800e27a:	4620      	mov	r0, r4
 800e27c:	f000 fc44 	bl	800eb08 <__multadd>
 800e280:	ee08 0a10 	vmov	s16, r0
 800e284:	e7e7      	b.n	800e256 <_dtoa_r+0xb26>
 800e286:	9b02      	ldr	r3, [sp, #8]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	bfc8      	it	gt
 800e28c:	461d      	movgt	r5, r3
 800e28e:	9b01      	ldr	r3, [sp, #4]
 800e290:	bfd8      	it	le
 800e292:	2501      	movle	r5, #1
 800e294:	441d      	add	r5, r3
 800e296:	f04f 0800 	mov.w	r8, #0
 800e29a:	ee18 1a10 	vmov	r1, s16
 800e29e:	2201      	movs	r2, #1
 800e2a0:	4620      	mov	r0, r4
 800e2a2:	f000 fe2b 	bl	800eefc <__lshift>
 800e2a6:	4631      	mov	r1, r6
 800e2a8:	ee08 0a10 	vmov	s16, r0
 800e2ac:	f000 fe96 	bl	800efdc <__mcmp>
 800e2b0:	2800      	cmp	r0, #0
 800e2b2:	dc91      	bgt.n	800e1d8 <_dtoa_r+0xaa8>
 800e2b4:	d102      	bne.n	800e2bc <_dtoa_r+0xb8c>
 800e2b6:	f01a 0f01 	tst.w	sl, #1
 800e2ba:	d18d      	bne.n	800e1d8 <_dtoa_r+0xaa8>
 800e2bc:	462b      	mov	r3, r5
 800e2be:	461d      	mov	r5, r3
 800e2c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e2c4:	2a30      	cmp	r2, #48	; 0x30
 800e2c6:	d0fa      	beq.n	800e2be <_dtoa_r+0xb8e>
 800e2c8:	e6d7      	b.n	800e07a <_dtoa_r+0x94a>
 800e2ca:	9a01      	ldr	r2, [sp, #4]
 800e2cc:	429a      	cmp	r2, r3
 800e2ce:	d184      	bne.n	800e1da <_dtoa_r+0xaaa>
 800e2d0:	9b00      	ldr	r3, [sp, #0]
 800e2d2:	3301      	adds	r3, #1
 800e2d4:	9300      	str	r3, [sp, #0]
 800e2d6:	2331      	movs	r3, #49	; 0x31
 800e2d8:	7013      	strb	r3, [r2, #0]
 800e2da:	e6ce      	b.n	800e07a <_dtoa_r+0x94a>
 800e2dc:	4b09      	ldr	r3, [pc, #36]	; (800e304 <_dtoa_r+0xbd4>)
 800e2de:	f7ff ba95 	b.w	800d80c <_dtoa_r+0xdc>
 800e2e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	f47f aa6e 	bne.w	800d7c6 <_dtoa_r+0x96>
 800e2ea:	4b07      	ldr	r3, [pc, #28]	; (800e308 <_dtoa_r+0xbd8>)
 800e2ec:	f7ff ba8e 	b.w	800d80c <_dtoa_r+0xdc>
 800e2f0:	9b02      	ldr	r3, [sp, #8]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	dcae      	bgt.n	800e254 <_dtoa_r+0xb24>
 800e2f6:	9b06      	ldr	r3, [sp, #24]
 800e2f8:	2b02      	cmp	r3, #2
 800e2fa:	f73f aea8 	bgt.w	800e04e <_dtoa_r+0x91e>
 800e2fe:	e7a9      	b.n	800e254 <_dtoa_r+0xb24>
 800e300:	08010715 	.word	0x08010715
 800e304:	080104f4 	.word	0x080104f4
 800e308:	08010696 	.word	0x08010696

0800e30c <rshift>:
 800e30c:	6903      	ldr	r3, [r0, #16]
 800e30e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e312:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e316:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e31a:	f100 0414 	add.w	r4, r0, #20
 800e31e:	dd45      	ble.n	800e3ac <rshift+0xa0>
 800e320:	f011 011f 	ands.w	r1, r1, #31
 800e324:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e328:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e32c:	d10c      	bne.n	800e348 <rshift+0x3c>
 800e32e:	f100 0710 	add.w	r7, r0, #16
 800e332:	4629      	mov	r1, r5
 800e334:	42b1      	cmp	r1, r6
 800e336:	d334      	bcc.n	800e3a2 <rshift+0x96>
 800e338:	1a9b      	subs	r3, r3, r2
 800e33a:	009b      	lsls	r3, r3, #2
 800e33c:	1eea      	subs	r2, r5, #3
 800e33e:	4296      	cmp	r6, r2
 800e340:	bf38      	it	cc
 800e342:	2300      	movcc	r3, #0
 800e344:	4423      	add	r3, r4
 800e346:	e015      	b.n	800e374 <rshift+0x68>
 800e348:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e34c:	f1c1 0820 	rsb	r8, r1, #32
 800e350:	40cf      	lsrs	r7, r1
 800e352:	f105 0e04 	add.w	lr, r5, #4
 800e356:	46a1      	mov	r9, r4
 800e358:	4576      	cmp	r6, lr
 800e35a:	46f4      	mov	ip, lr
 800e35c:	d815      	bhi.n	800e38a <rshift+0x7e>
 800e35e:	1a9a      	subs	r2, r3, r2
 800e360:	0092      	lsls	r2, r2, #2
 800e362:	3a04      	subs	r2, #4
 800e364:	3501      	adds	r5, #1
 800e366:	42ae      	cmp	r6, r5
 800e368:	bf38      	it	cc
 800e36a:	2200      	movcc	r2, #0
 800e36c:	18a3      	adds	r3, r4, r2
 800e36e:	50a7      	str	r7, [r4, r2]
 800e370:	b107      	cbz	r7, 800e374 <rshift+0x68>
 800e372:	3304      	adds	r3, #4
 800e374:	1b1a      	subs	r2, r3, r4
 800e376:	42a3      	cmp	r3, r4
 800e378:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e37c:	bf08      	it	eq
 800e37e:	2300      	moveq	r3, #0
 800e380:	6102      	str	r2, [r0, #16]
 800e382:	bf08      	it	eq
 800e384:	6143      	streq	r3, [r0, #20]
 800e386:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e38a:	f8dc c000 	ldr.w	ip, [ip]
 800e38e:	fa0c fc08 	lsl.w	ip, ip, r8
 800e392:	ea4c 0707 	orr.w	r7, ip, r7
 800e396:	f849 7b04 	str.w	r7, [r9], #4
 800e39a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e39e:	40cf      	lsrs	r7, r1
 800e3a0:	e7da      	b.n	800e358 <rshift+0x4c>
 800e3a2:	f851 cb04 	ldr.w	ip, [r1], #4
 800e3a6:	f847 cf04 	str.w	ip, [r7, #4]!
 800e3aa:	e7c3      	b.n	800e334 <rshift+0x28>
 800e3ac:	4623      	mov	r3, r4
 800e3ae:	e7e1      	b.n	800e374 <rshift+0x68>

0800e3b0 <__hexdig_fun>:
 800e3b0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e3b4:	2b09      	cmp	r3, #9
 800e3b6:	d802      	bhi.n	800e3be <__hexdig_fun+0xe>
 800e3b8:	3820      	subs	r0, #32
 800e3ba:	b2c0      	uxtb	r0, r0
 800e3bc:	4770      	bx	lr
 800e3be:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e3c2:	2b05      	cmp	r3, #5
 800e3c4:	d801      	bhi.n	800e3ca <__hexdig_fun+0x1a>
 800e3c6:	3847      	subs	r0, #71	; 0x47
 800e3c8:	e7f7      	b.n	800e3ba <__hexdig_fun+0xa>
 800e3ca:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e3ce:	2b05      	cmp	r3, #5
 800e3d0:	d801      	bhi.n	800e3d6 <__hexdig_fun+0x26>
 800e3d2:	3827      	subs	r0, #39	; 0x27
 800e3d4:	e7f1      	b.n	800e3ba <__hexdig_fun+0xa>
 800e3d6:	2000      	movs	r0, #0
 800e3d8:	4770      	bx	lr
	...

0800e3dc <__gethex>:
 800e3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3e0:	ed2d 8b02 	vpush	{d8}
 800e3e4:	b089      	sub	sp, #36	; 0x24
 800e3e6:	ee08 0a10 	vmov	s16, r0
 800e3ea:	9304      	str	r3, [sp, #16]
 800e3ec:	4bb4      	ldr	r3, [pc, #720]	; (800e6c0 <__gethex+0x2e4>)
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	9301      	str	r3, [sp, #4]
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	468b      	mov	fp, r1
 800e3f6:	4690      	mov	r8, r2
 800e3f8:	f7f1 ff0a 	bl	8000210 <strlen>
 800e3fc:	9b01      	ldr	r3, [sp, #4]
 800e3fe:	f8db 2000 	ldr.w	r2, [fp]
 800e402:	4403      	add	r3, r0
 800e404:	4682      	mov	sl, r0
 800e406:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e40a:	9305      	str	r3, [sp, #20]
 800e40c:	1c93      	adds	r3, r2, #2
 800e40e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e412:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e416:	32fe      	adds	r2, #254	; 0xfe
 800e418:	18d1      	adds	r1, r2, r3
 800e41a:	461f      	mov	r7, r3
 800e41c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e420:	9100      	str	r1, [sp, #0]
 800e422:	2830      	cmp	r0, #48	; 0x30
 800e424:	d0f8      	beq.n	800e418 <__gethex+0x3c>
 800e426:	f7ff ffc3 	bl	800e3b0 <__hexdig_fun>
 800e42a:	4604      	mov	r4, r0
 800e42c:	2800      	cmp	r0, #0
 800e42e:	d13a      	bne.n	800e4a6 <__gethex+0xca>
 800e430:	9901      	ldr	r1, [sp, #4]
 800e432:	4652      	mov	r2, sl
 800e434:	4638      	mov	r0, r7
 800e436:	f001 fa33 	bl	800f8a0 <strncmp>
 800e43a:	4605      	mov	r5, r0
 800e43c:	2800      	cmp	r0, #0
 800e43e:	d168      	bne.n	800e512 <__gethex+0x136>
 800e440:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e444:	eb07 060a 	add.w	r6, r7, sl
 800e448:	f7ff ffb2 	bl	800e3b0 <__hexdig_fun>
 800e44c:	2800      	cmp	r0, #0
 800e44e:	d062      	beq.n	800e516 <__gethex+0x13a>
 800e450:	4633      	mov	r3, r6
 800e452:	7818      	ldrb	r0, [r3, #0]
 800e454:	2830      	cmp	r0, #48	; 0x30
 800e456:	461f      	mov	r7, r3
 800e458:	f103 0301 	add.w	r3, r3, #1
 800e45c:	d0f9      	beq.n	800e452 <__gethex+0x76>
 800e45e:	f7ff ffa7 	bl	800e3b0 <__hexdig_fun>
 800e462:	2301      	movs	r3, #1
 800e464:	fab0 f480 	clz	r4, r0
 800e468:	0964      	lsrs	r4, r4, #5
 800e46a:	4635      	mov	r5, r6
 800e46c:	9300      	str	r3, [sp, #0]
 800e46e:	463a      	mov	r2, r7
 800e470:	4616      	mov	r6, r2
 800e472:	3201      	adds	r2, #1
 800e474:	7830      	ldrb	r0, [r6, #0]
 800e476:	f7ff ff9b 	bl	800e3b0 <__hexdig_fun>
 800e47a:	2800      	cmp	r0, #0
 800e47c:	d1f8      	bne.n	800e470 <__gethex+0x94>
 800e47e:	9901      	ldr	r1, [sp, #4]
 800e480:	4652      	mov	r2, sl
 800e482:	4630      	mov	r0, r6
 800e484:	f001 fa0c 	bl	800f8a0 <strncmp>
 800e488:	b980      	cbnz	r0, 800e4ac <__gethex+0xd0>
 800e48a:	b94d      	cbnz	r5, 800e4a0 <__gethex+0xc4>
 800e48c:	eb06 050a 	add.w	r5, r6, sl
 800e490:	462a      	mov	r2, r5
 800e492:	4616      	mov	r6, r2
 800e494:	3201      	adds	r2, #1
 800e496:	7830      	ldrb	r0, [r6, #0]
 800e498:	f7ff ff8a 	bl	800e3b0 <__hexdig_fun>
 800e49c:	2800      	cmp	r0, #0
 800e49e:	d1f8      	bne.n	800e492 <__gethex+0xb6>
 800e4a0:	1bad      	subs	r5, r5, r6
 800e4a2:	00ad      	lsls	r5, r5, #2
 800e4a4:	e004      	b.n	800e4b0 <__gethex+0xd4>
 800e4a6:	2400      	movs	r4, #0
 800e4a8:	4625      	mov	r5, r4
 800e4aa:	e7e0      	b.n	800e46e <__gethex+0x92>
 800e4ac:	2d00      	cmp	r5, #0
 800e4ae:	d1f7      	bne.n	800e4a0 <__gethex+0xc4>
 800e4b0:	7833      	ldrb	r3, [r6, #0]
 800e4b2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e4b6:	2b50      	cmp	r3, #80	; 0x50
 800e4b8:	d13b      	bne.n	800e532 <__gethex+0x156>
 800e4ba:	7873      	ldrb	r3, [r6, #1]
 800e4bc:	2b2b      	cmp	r3, #43	; 0x2b
 800e4be:	d02c      	beq.n	800e51a <__gethex+0x13e>
 800e4c0:	2b2d      	cmp	r3, #45	; 0x2d
 800e4c2:	d02e      	beq.n	800e522 <__gethex+0x146>
 800e4c4:	1c71      	adds	r1, r6, #1
 800e4c6:	f04f 0900 	mov.w	r9, #0
 800e4ca:	7808      	ldrb	r0, [r1, #0]
 800e4cc:	f7ff ff70 	bl	800e3b0 <__hexdig_fun>
 800e4d0:	1e43      	subs	r3, r0, #1
 800e4d2:	b2db      	uxtb	r3, r3
 800e4d4:	2b18      	cmp	r3, #24
 800e4d6:	d82c      	bhi.n	800e532 <__gethex+0x156>
 800e4d8:	f1a0 0210 	sub.w	r2, r0, #16
 800e4dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e4e0:	f7ff ff66 	bl	800e3b0 <__hexdig_fun>
 800e4e4:	1e43      	subs	r3, r0, #1
 800e4e6:	b2db      	uxtb	r3, r3
 800e4e8:	2b18      	cmp	r3, #24
 800e4ea:	d91d      	bls.n	800e528 <__gethex+0x14c>
 800e4ec:	f1b9 0f00 	cmp.w	r9, #0
 800e4f0:	d000      	beq.n	800e4f4 <__gethex+0x118>
 800e4f2:	4252      	negs	r2, r2
 800e4f4:	4415      	add	r5, r2
 800e4f6:	f8cb 1000 	str.w	r1, [fp]
 800e4fa:	b1e4      	cbz	r4, 800e536 <__gethex+0x15a>
 800e4fc:	9b00      	ldr	r3, [sp, #0]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	bf14      	ite	ne
 800e502:	2700      	movne	r7, #0
 800e504:	2706      	moveq	r7, #6
 800e506:	4638      	mov	r0, r7
 800e508:	b009      	add	sp, #36	; 0x24
 800e50a:	ecbd 8b02 	vpop	{d8}
 800e50e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e512:	463e      	mov	r6, r7
 800e514:	4625      	mov	r5, r4
 800e516:	2401      	movs	r4, #1
 800e518:	e7ca      	b.n	800e4b0 <__gethex+0xd4>
 800e51a:	f04f 0900 	mov.w	r9, #0
 800e51e:	1cb1      	adds	r1, r6, #2
 800e520:	e7d3      	b.n	800e4ca <__gethex+0xee>
 800e522:	f04f 0901 	mov.w	r9, #1
 800e526:	e7fa      	b.n	800e51e <__gethex+0x142>
 800e528:	230a      	movs	r3, #10
 800e52a:	fb03 0202 	mla	r2, r3, r2, r0
 800e52e:	3a10      	subs	r2, #16
 800e530:	e7d4      	b.n	800e4dc <__gethex+0x100>
 800e532:	4631      	mov	r1, r6
 800e534:	e7df      	b.n	800e4f6 <__gethex+0x11a>
 800e536:	1bf3      	subs	r3, r6, r7
 800e538:	3b01      	subs	r3, #1
 800e53a:	4621      	mov	r1, r4
 800e53c:	2b07      	cmp	r3, #7
 800e53e:	dc0b      	bgt.n	800e558 <__gethex+0x17c>
 800e540:	ee18 0a10 	vmov	r0, s16
 800e544:	f000 fa7e 	bl	800ea44 <_Balloc>
 800e548:	4604      	mov	r4, r0
 800e54a:	b940      	cbnz	r0, 800e55e <__gethex+0x182>
 800e54c:	4b5d      	ldr	r3, [pc, #372]	; (800e6c4 <__gethex+0x2e8>)
 800e54e:	4602      	mov	r2, r0
 800e550:	21de      	movs	r1, #222	; 0xde
 800e552:	485d      	ldr	r0, [pc, #372]	; (800e6c8 <__gethex+0x2ec>)
 800e554:	f001 f9c6 	bl	800f8e4 <__assert_func>
 800e558:	3101      	adds	r1, #1
 800e55a:	105b      	asrs	r3, r3, #1
 800e55c:	e7ee      	b.n	800e53c <__gethex+0x160>
 800e55e:	f100 0914 	add.w	r9, r0, #20
 800e562:	f04f 0b00 	mov.w	fp, #0
 800e566:	f1ca 0301 	rsb	r3, sl, #1
 800e56a:	f8cd 9008 	str.w	r9, [sp, #8]
 800e56e:	f8cd b000 	str.w	fp, [sp]
 800e572:	9306      	str	r3, [sp, #24]
 800e574:	42b7      	cmp	r7, r6
 800e576:	d340      	bcc.n	800e5fa <__gethex+0x21e>
 800e578:	9802      	ldr	r0, [sp, #8]
 800e57a:	9b00      	ldr	r3, [sp, #0]
 800e57c:	f840 3b04 	str.w	r3, [r0], #4
 800e580:	eba0 0009 	sub.w	r0, r0, r9
 800e584:	1080      	asrs	r0, r0, #2
 800e586:	0146      	lsls	r6, r0, #5
 800e588:	6120      	str	r0, [r4, #16]
 800e58a:	4618      	mov	r0, r3
 800e58c:	f000 fb4c 	bl	800ec28 <__hi0bits>
 800e590:	1a30      	subs	r0, r6, r0
 800e592:	f8d8 6000 	ldr.w	r6, [r8]
 800e596:	42b0      	cmp	r0, r6
 800e598:	dd63      	ble.n	800e662 <__gethex+0x286>
 800e59a:	1b87      	subs	r7, r0, r6
 800e59c:	4639      	mov	r1, r7
 800e59e:	4620      	mov	r0, r4
 800e5a0:	f000 fef0 	bl	800f384 <__any_on>
 800e5a4:	4682      	mov	sl, r0
 800e5a6:	b1a8      	cbz	r0, 800e5d4 <__gethex+0x1f8>
 800e5a8:	1e7b      	subs	r3, r7, #1
 800e5aa:	1159      	asrs	r1, r3, #5
 800e5ac:	f003 021f 	and.w	r2, r3, #31
 800e5b0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e5b4:	f04f 0a01 	mov.w	sl, #1
 800e5b8:	fa0a f202 	lsl.w	r2, sl, r2
 800e5bc:	420a      	tst	r2, r1
 800e5be:	d009      	beq.n	800e5d4 <__gethex+0x1f8>
 800e5c0:	4553      	cmp	r3, sl
 800e5c2:	dd05      	ble.n	800e5d0 <__gethex+0x1f4>
 800e5c4:	1eb9      	subs	r1, r7, #2
 800e5c6:	4620      	mov	r0, r4
 800e5c8:	f000 fedc 	bl	800f384 <__any_on>
 800e5cc:	2800      	cmp	r0, #0
 800e5ce:	d145      	bne.n	800e65c <__gethex+0x280>
 800e5d0:	f04f 0a02 	mov.w	sl, #2
 800e5d4:	4639      	mov	r1, r7
 800e5d6:	4620      	mov	r0, r4
 800e5d8:	f7ff fe98 	bl	800e30c <rshift>
 800e5dc:	443d      	add	r5, r7
 800e5de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e5e2:	42ab      	cmp	r3, r5
 800e5e4:	da4c      	bge.n	800e680 <__gethex+0x2a4>
 800e5e6:	ee18 0a10 	vmov	r0, s16
 800e5ea:	4621      	mov	r1, r4
 800e5ec:	f000 fa6a 	bl	800eac4 <_Bfree>
 800e5f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	6013      	str	r3, [r2, #0]
 800e5f6:	27a3      	movs	r7, #163	; 0xa3
 800e5f8:	e785      	b.n	800e506 <__gethex+0x12a>
 800e5fa:	1e73      	subs	r3, r6, #1
 800e5fc:	9a05      	ldr	r2, [sp, #20]
 800e5fe:	9303      	str	r3, [sp, #12]
 800e600:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e604:	4293      	cmp	r3, r2
 800e606:	d019      	beq.n	800e63c <__gethex+0x260>
 800e608:	f1bb 0f20 	cmp.w	fp, #32
 800e60c:	d107      	bne.n	800e61e <__gethex+0x242>
 800e60e:	9b02      	ldr	r3, [sp, #8]
 800e610:	9a00      	ldr	r2, [sp, #0]
 800e612:	f843 2b04 	str.w	r2, [r3], #4
 800e616:	9302      	str	r3, [sp, #8]
 800e618:	2300      	movs	r3, #0
 800e61a:	9300      	str	r3, [sp, #0]
 800e61c:	469b      	mov	fp, r3
 800e61e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e622:	f7ff fec5 	bl	800e3b0 <__hexdig_fun>
 800e626:	9b00      	ldr	r3, [sp, #0]
 800e628:	f000 000f 	and.w	r0, r0, #15
 800e62c:	fa00 f00b 	lsl.w	r0, r0, fp
 800e630:	4303      	orrs	r3, r0
 800e632:	9300      	str	r3, [sp, #0]
 800e634:	f10b 0b04 	add.w	fp, fp, #4
 800e638:	9b03      	ldr	r3, [sp, #12]
 800e63a:	e00d      	b.n	800e658 <__gethex+0x27c>
 800e63c:	9b03      	ldr	r3, [sp, #12]
 800e63e:	9a06      	ldr	r2, [sp, #24]
 800e640:	4413      	add	r3, r2
 800e642:	42bb      	cmp	r3, r7
 800e644:	d3e0      	bcc.n	800e608 <__gethex+0x22c>
 800e646:	4618      	mov	r0, r3
 800e648:	9901      	ldr	r1, [sp, #4]
 800e64a:	9307      	str	r3, [sp, #28]
 800e64c:	4652      	mov	r2, sl
 800e64e:	f001 f927 	bl	800f8a0 <strncmp>
 800e652:	9b07      	ldr	r3, [sp, #28]
 800e654:	2800      	cmp	r0, #0
 800e656:	d1d7      	bne.n	800e608 <__gethex+0x22c>
 800e658:	461e      	mov	r6, r3
 800e65a:	e78b      	b.n	800e574 <__gethex+0x198>
 800e65c:	f04f 0a03 	mov.w	sl, #3
 800e660:	e7b8      	b.n	800e5d4 <__gethex+0x1f8>
 800e662:	da0a      	bge.n	800e67a <__gethex+0x29e>
 800e664:	1a37      	subs	r7, r6, r0
 800e666:	4621      	mov	r1, r4
 800e668:	ee18 0a10 	vmov	r0, s16
 800e66c:	463a      	mov	r2, r7
 800e66e:	f000 fc45 	bl	800eefc <__lshift>
 800e672:	1bed      	subs	r5, r5, r7
 800e674:	4604      	mov	r4, r0
 800e676:	f100 0914 	add.w	r9, r0, #20
 800e67a:	f04f 0a00 	mov.w	sl, #0
 800e67e:	e7ae      	b.n	800e5de <__gethex+0x202>
 800e680:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e684:	42a8      	cmp	r0, r5
 800e686:	dd72      	ble.n	800e76e <__gethex+0x392>
 800e688:	1b45      	subs	r5, r0, r5
 800e68a:	42ae      	cmp	r6, r5
 800e68c:	dc36      	bgt.n	800e6fc <__gethex+0x320>
 800e68e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e692:	2b02      	cmp	r3, #2
 800e694:	d02a      	beq.n	800e6ec <__gethex+0x310>
 800e696:	2b03      	cmp	r3, #3
 800e698:	d02c      	beq.n	800e6f4 <__gethex+0x318>
 800e69a:	2b01      	cmp	r3, #1
 800e69c:	d11c      	bne.n	800e6d8 <__gethex+0x2fc>
 800e69e:	42ae      	cmp	r6, r5
 800e6a0:	d11a      	bne.n	800e6d8 <__gethex+0x2fc>
 800e6a2:	2e01      	cmp	r6, #1
 800e6a4:	d112      	bne.n	800e6cc <__gethex+0x2f0>
 800e6a6:	9a04      	ldr	r2, [sp, #16]
 800e6a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e6ac:	6013      	str	r3, [r2, #0]
 800e6ae:	2301      	movs	r3, #1
 800e6b0:	6123      	str	r3, [r4, #16]
 800e6b2:	f8c9 3000 	str.w	r3, [r9]
 800e6b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e6b8:	2762      	movs	r7, #98	; 0x62
 800e6ba:	601c      	str	r4, [r3, #0]
 800e6bc:	e723      	b.n	800e506 <__gethex+0x12a>
 800e6be:	bf00      	nop
 800e6c0:	0801078c 	.word	0x0801078c
 800e6c4:	08010715 	.word	0x08010715
 800e6c8:	08010726 	.word	0x08010726
 800e6cc:	1e71      	subs	r1, r6, #1
 800e6ce:	4620      	mov	r0, r4
 800e6d0:	f000 fe58 	bl	800f384 <__any_on>
 800e6d4:	2800      	cmp	r0, #0
 800e6d6:	d1e6      	bne.n	800e6a6 <__gethex+0x2ca>
 800e6d8:	ee18 0a10 	vmov	r0, s16
 800e6dc:	4621      	mov	r1, r4
 800e6de:	f000 f9f1 	bl	800eac4 <_Bfree>
 800e6e2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	6013      	str	r3, [r2, #0]
 800e6e8:	2750      	movs	r7, #80	; 0x50
 800e6ea:	e70c      	b.n	800e506 <__gethex+0x12a>
 800e6ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d1f2      	bne.n	800e6d8 <__gethex+0x2fc>
 800e6f2:	e7d8      	b.n	800e6a6 <__gethex+0x2ca>
 800e6f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d1d5      	bne.n	800e6a6 <__gethex+0x2ca>
 800e6fa:	e7ed      	b.n	800e6d8 <__gethex+0x2fc>
 800e6fc:	1e6f      	subs	r7, r5, #1
 800e6fe:	f1ba 0f00 	cmp.w	sl, #0
 800e702:	d131      	bne.n	800e768 <__gethex+0x38c>
 800e704:	b127      	cbz	r7, 800e710 <__gethex+0x334>
 800e706:	4639      	mov	r1, r7
 800e708:	4620      	mov	r0, r4
 800e70a:	f000 fe3b 	bl	800f384 <__any_on>
 800e70e:	4682      	mov	sl, r0
 800e710:	117b      	asrs	r3, r7, #5
 800e712:	2101      	movs	r1, #1
 800e714:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e718:	f007 071f 	and.w	r7, r7, #31
 800e71c:	fa01 f707 	lsl.w	r7, r1, r7
 800e720:	421f      	tst	r7, r3
 800e722:	4629      	mov	r1, r5
 800e724:	4620      	mov	r0, r4
 800e726:	bf18      	it	ne
 800e728:	f04a 0a02 	orrne.w	sl, sl, #2
 800e72c:	1b76      	subs	r6, r6, r5
 800e72e:	f7ff fded 	bl	800e30c <rshift>
 800e732:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e736:	2702      	movs	r7, #2
 800e738:	f1ba 0f00 	cmp.w	sl, #0
 800e73c:	d048      	beq.n	800e7d0 <__gethex+0x3f4>
 800e73e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e742:	2b02      	cmp	r3, #2
 800e744:	d015      	beq.n	800e772 <__gethex+0x396>
 800e746:	2b03      	cmp	r3, #3
 800e748:	d017      	beq.n	800e77a <__gethex+0x39e>
 800e74a:	2b01      	cmp	r3, #1
 800e74c:	d109      	bne.n	800e762 <__gethex+0x386>
 800e74e:	f01a 0f02 	tst.w	sl, #2
 800e752:	d006      	beq.n	800e762 <__gethex+0x386>
 800e754:	f8d9 0000 	ldr.w	r0, [r9]
 800e758:	ea4a 0a00 	orr.w	sl, sl, r0
 800e75c:	f01a 0f01 	tst.w	sl, #1
 800e760:	d10e      	bne.n	800e780 <__gethex+0x3a4>
 800e762:	f047 0710 	orr.w	r7, r7, #16
 800e766:	e033      	b.n	800e7d0 <__gethex+0x3f4>
 800e768:	f04f 0a01 	mov.w	sl, #1
 800e76c:	e7d0      	b.n	800e710 <__gethex+0x334>
 800e76e:	2701      	movs	r7, #1
 800e770:	e7e2      	b.n	800e738 <__gethex+0x35c>
 800e772:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e774:	f1c3 0301 	rsb	r3, r3, #1
 800e778:	9315      	str	r3, [sp, #84]	; 0x54
 800e77a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d0f0      	beq.n	800e762 <__gethex+0x386>
 800e780:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e784:	f104 0314 	add.w	r3, r4, #20
 800e788:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e78c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e790:	f04f 0c00 	mov.w	ip, #0
 800e794:	4618      	mov	r0, r3
 800e796:	f853 2b04 	ldr.w	r2, [r3], #4
 800e79a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e79e:	d01c      	beq.n	800e7da <__gethex+0x3fe>
 800e7a0:	3201      	adds	r2, #1
 800e7a2:	6002      	str	r2, [r0, #0]
 800e7a4:	2f02      	cmp	r7, #2
 800e7a6:	f104 0314 	add.w	r3, r4, #20
 800e7aa:	d13f      	bne.n	800e82c <__gethex+0x450>
 800e7ac:	f8d8 2000 	ldr.w	r2, [r8]
 800e7b0:	3a01      	subs	r2, #1
 800e7b2:	42b2      	cmp	r2, r6
 800e7b4:	d10a      	bne.n	800e7cc <__gethex+0x3f0>
 800e7b6:	1171      	asrs	r1, r6, #5
 800e7b8:	2201      	movs	r2, #1
 800e7ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e7be:	f006 061f 	and.w	r6, r6, #31
 800e7c2:	fa02 f606 	lsl.w	r6, r2, r6
 800e7c6:	421e      	tst	r6, r3
 800e7c8:	bf18      	it	ne
 800e7ca:	4617      	movne	r7, r2
 800e7cc:	f047 0720 	orr.w	r7, r7, #32
 800e7d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e7d2:	601c      	str	r4, [r3, #0]
 800e7d4:	9b04      	ldr	r3, [sp, #16]
 800e7d6:	601d      	str	r5, [r3, #0]
 800e7d8:	e695      	b.n	800e506 <__gethex+0x12a>
 800e7da:	4299      	cmp	r1, r3
 800e7dc:	f843 cc04 	str.w	ip, [r3, #-4]
 800e7e0:	d8d8      	bhi.n	800e794 <__gethex+0x3b8>
 800e7e2:	68a3      	ldr	r3, [r4, #8]
 800e7e4:	459b      	cmp	fp, r3
 800e7e6:	db19      	blt.n	800e81c <__gethex+0x440>
 800e7e8:	6861      	ldr	r1, [r4, #4]
 800e7ea:	ee18 0a10 	vmov	r0, s16
 800e7ee:	3101      	adds	r1, #1
 800e7f0:	f000 f928 	bl	800ea44 <_Balloc>
 800e7f4:	4681      	mov	r9, r0
 800e7f6:	b918      	cbnz	r0, 800e800 <__gethex+0x424>
 800e7f8:	4b1a      	ldr	r3, [pc, #104]	; (800e864 <__gethex+0x488>)
 800e7fa:	4602      	mov	r2, r0
 800e7fc:	2184      	movs	r1, #132	; 0x84
 800e7fe:	e6a8      	b.n	800e552 <__gethex+0x176>
 800e800:	6922      	ldr	r2, [r4, #16]
 800e802:	3202      	adds	r2, #2
 800e804:	f104 010c 	add.w	r1, r4, #12
 800e808:	0092      	lsls	r2, r2, #2
 800e80a:	300c      	adds	r0, #12
 800e80c:	f000 f90c 	bl	800ea28 <memcpy>
 800e810:	4621      	mov	r1, r4
 800e812:	ee18 0a10 	vmov	r0, s16
 800e816:	f000 f955 	bl	800eac4 <_Bfree>
 800e81a:	464c      	mov	r4, r9
 800e81c:	6923      	ldr	r3, [r4, #16]
 800e81e:	1c5a      	adds	r2, r3, #1
 800e820:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e824:	6122      	str	r2, [r4, #16]
 800e826:	2201      	movs	r2, #1
 800e828:	615a      	str	r2, [r3, #20]
 800e82a:	e7bb      	b.n	800e7a4 <__gethex+0x3c8>
 800e82c:	6922      	ldr	r2, [r4, #16]
 800e82e:	455a      	cmp	r2, fp
 800e830:	dd0b      	ble.n	800e84a <__gethex+0x46e>
 800e832:	2101      	movs	r1, #1
 800e834:	4620      	mov	r0, r4
 800e836:	f7ff fd69 	bl	800e30c <rshift>
 800e83a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e83e:	3501      	adds	r5, #1
 800e840:	42ab      	cmp	r3, r5
 800e842:	f6ff aed0 	blt.w	800e5e6 <__gethex+0x20a>
 800e846:	2701      	movs	r7, #1
 800e848:	e7c0      	b.n	800e7cc <__gethex+0x3f0>
 800e84a:	f016 061f 	ands.w	r6, r6, #31
 800e84e:	d0fa      	beq.n	800e846 <__gethex+0x46a>
 800e850:	4453      	add	r3, sl
 800e852:	f1c6 0620 	rsb	r6, r6, #32
 800e856:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e85a:	f000 f9e5 	bl	800ec28 <__hi0bits>
 800e85e:	42b0      	cmp	r0, r6
 800e860:	dbe7      	blt.n	800e832 <__gethex+0x456>
 800e862:	e7f0      	b.n	800e846 <__gethex+0x46a>
 800e864:	08010715 	.word	0x08010715

0800e868 <L_shift>:
 800e868:	f1c2 0208 	rsb	r2, r2, #8
 800e86c:	0092      	lsls	r2, r2, #2
 800e86e:	b570      	push	{r4, r5, r6, lr}
 800e870:	f1c2 0620 	rsb	r6, r2, #32
 800e874:	6843      	ldr	r3, [r0, #4]
 800e876:	6804      	ldr	r4, [r0, #0]
 800e878:	fa03 f506 	lsl.w	r5, r3, r6
 800e87c:	432c      	orrs	r4, r5
 800e87e:	40d3      	lsrs	r3, r2
 800e880:	6004      	str	r4, [r0, #0]
 800e882:	f840 3f04 	str.w	r3, [r0, #4]!
 800e886:	4288      	cmp	r0, r1
 800e888:	d3f4      	bcc.n	800e874 <L_shift+0xc>
 800e88a:	bd70      	pop	{r4, r5, r6, pc}

0800e88c <__match>:
 800e88c:	b530      	push	{r4, r5, lr}
 800e88e:	6803      	ldr	r3, [r0, #0]
 800e890:	3301      	adds	r3, #1
 800e892:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e896:	b914      	cbnz	r4, 800e89e <__match+0x12>
 800e898:	6003      	str	r3, [r0, #0]
 800e89a:	2001      	movs	r0, #1
 800e89c:	bd30      	pop	{r4, r5, pc}
 800e89e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e8a2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e8a6:	2d19      	cmp	r5, #25
 800e8a8:	bf98      	it	ls
 800e8aa:	3220      	addls	r2, #32
 800e8ac:	42a2      	cmp	r2, r4
 800e8ae:	d0f0      	beq.n	800e892 <__match+0x6>
 800e8b0:	2000      	movs	r0, #0
 800e8b2:	e7f3      	b.n	800e89c <__match+0x10>

0800e8b4 <__hexnan>:
 800e8b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8b8:	680b      	ldr	r3, [r1, #0]
 800e8ba:	115e      	asrs	r6, r3, #5
 800e8bc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e8c0:	f013 031f 	ands.w	r3, r3, #31
 800e8c4:	b087      	sub	sp, #28
 800e8c6:	bf18      	it	ne
 800e8c8:	3604      	addne	r6, #4
 800e8ca:	2500      	movs	r5, #0
 800e8cc:	1f37      	subs	r7, r6, #4
 800e8ce:	4690      	mov	r8, r2
 800e8d0:	6802      	ldr	r2, [r0, #0]
 800e8d2:	9301      	str	r3, [sp, #4]
 800e8d4:	4682      	mov	sl, r0
 800e8d6:	f846 5c04 	str.w	r5, [r6, #-4]
 800e8da:	46b9      	mov	r9, r7
 800e8dc:	463c      	mov	r4, r7
 800e8de:	9502      	str	r5, [sp, #8]
 800e8e0:	46ab      	mov	fp, r5
 800e8e2:	7851      	ldrb	r1, [r2, #1]
 800e8e4:	1c53      	adds	r3, r2, #1
 800e8e6:	9303      	str	r3, [sp, #12]
 800e8e8:	b341      	cbz	r1, 800e93c <__hexnan+0x88>
 800e8ea:	4608      	mov	r0, r1
 800e8ec:	9205      	str	r2, [sp, #20]
 800e8ee:	9104      	str	r1, [sp, #16]
 800e8f0:	f7ff fd5e 	bl	800e3b0 <__hexdig_fun>
 800e8f4:	2800      	cmp	r0, #0
 800e8f6:	d14f      	bne.n	800e998 <__hexnan+0xe4>
 800e8f8:	9904      	ldr	r1, [sp, #16]
 800e8fa:	9a05      	ldr	r2, [sp, #20]
 800e8fc:	2920      	cmp	r1, #32
 800e8fe:	d818      	bhi.n	800e932 <__hexnan+0x7e>
 800e900:	9b02      	ldr	r3, [sp, #8]
 800e902:	459b      	cmp	fp, r3
 800e904:	dd13      	ble.n	800e92e <__hexnan+0x7a>
 800e906:	454c      	cmp	r4, r9
 800e908:	d206      	bcs.n	800e918 <__hexnan+0x64>
 800e90a:	2d07      	cmp	r5, #7
 800e90c:	dc04      	bgt.n	800e918 <__hexnan+0x64>
 800e90e:	462a      	mov	r2, r5
 800e910:	4649      	mov	r1, r9
 800e912:	4620      	mov	r0, r4
 800e914:	f7ff ffa8 	bl	800e868 <L_shift>
 800e918:	4544      	cmp	r4, r8
 800e91a:	d950      	bls.n	800e9be <__hexnan+0x10a>
 800e91c:	2300      	movs	r3, #0
 800e91e:	f1a4 0904 	sub.w	r9, r4, #4
 800e922:	f844 3c04 	str.w	r3, [r4, #-4]
 800e926:	f8cd b008 	str.w	fp, [sp, #8]
 800e92a:	464c      	mov	r4, r9
 800e92c:	461d      	mov	r5, r3
 800e92e:	9a03      	ldr	r2, [sp, #12]
 800e930:	e7d7      	b.n	800e8e2 <__hexnan+0x2e>
 800e932:	2929      	cmp	r1, #41	; 0x29
 800e934:	d156      	bne.n	800e9e4 <__hexnan+0x130>
 800e936:	3202      	adds	r2, #2
 800e938:	f8ca 2000 	str.w	r2, [sl]
 800e93c:	f1bb 0f00 	cmp.w	fp, #0
 800e940:	d050      	beq.n	800e9e4 <__hexnan+0x130>
 800e942:	454c      	cmp	r4, r9
 800e944:	d206      	bcs.n	800e954 <__hexnan+0xa0>
 800e946:	2d07      	cmp	r5, #7
 800e948:	dc04      	bgt.n	800e954 <__hexnan+0xa0>
 800e94a:	462a      	mov	r2, r5
 800e94c:	4649      	mov	r1, r9
 800e94e:	4620      	mov	r0, r4
 800e950:	f7ff ff8a 	bl	800e868 <L_shift>
 800e954:	4544      	cmp	r4, r8
 800e956:	d934      	bls.n	800e9c2 <__hexnan+0x10e>
 800e958:	f1a8 0204 	sub.w	r2, r8, #4
 800e95c:	4623      	mov	r3, r4
 800e95e:	f853 1b04 	ldr.w	r1, [r3], #4
 800e962:	f842 1f04 	str.w	r1, [r2, #4]!
 800e966:	429f      	cmp	r7, r3
 800e968:	d2f9      	bcs.n	800e95e <__hexnan+0xaa>
 800e96a:	1b3b      	subs	r3, r7, r4
 800e96c:	f023 0303 	bic.w	r3, r3, #3
 800e970:	3304      	adds	r3, #4
 800e972:	3401      	adds	r4, #1
 800e974:	3e03      	subs	r6, #3
 800e976:	42b4      	cmp	r4, r6
 800e978:	bf88      	it	hi
 800e97a:	2304      	movhi	r3, #4
 800e97c:	4443      	add	r3, r8
 800e97e:	2200      	movs	r2, #0
 800e980:	f843 2b04 	str.w	r2, [r3], #4
 800e984:	429f      	cmp	r7, r3
 800e986:	d2fb      	bcs.n	800e980 <__hexnan+0xcc>
 800e988:	683b      	ldr	r3, [r7, #0]
 800e98a:	b91b      	cbnz	r3, 800e994 <__hexnan+0xe0>
 800e98c:	4547      	cmp	r7, r8
 800e98e:	d127      	bne.n	800e9e0 <__hexnan+0x12c>
 800e990:	2301      	movs	r3, #1
 800e992:	603b      	str	r3, [r7, #0]
 800e994:	2005      	movs	r0, #5
 800e996:	e026      	b.n	800e9e6 <__hexnan+0x132>
 800e998:	3501      	adds	r5, #1
 800e99a:	2d08      	cmp	r5, #8
 800e99c:	f10b 0b01 	add.w	fp, fp, #1
 800e9a0:	dd06      	ble.n	800e9b0 <__hexnan+0xfc>
 800e9a2:	4544      	cmp	r4, r8
 800e9a4:	d9c3      	bls.n	800e92e <__hexnan+0x7a>
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	f844 3c04 	str.w	r3, [r4, #-4]
 800e9ac:	2501      	movs	r5, #1
 800e9ae:	3c04      	subs	r4, #4
 800e9b0:	6822      	ldr	r2, [r4, #0]
 800e9b2:	f000 000f 	and.w	r0, r0, #15
 800e9b6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800e9ba:	6022      	str	r2, [r4, #0]
 800e9bc:	e7b7      	b.n	800e92e <__hexnan+0x7a>
 800e9be:	2508      	movs	r5, #8
 800e9c0:	e7b5      	b.n	800e92e <__hexnan+0x7a>
 800e9c2:	9b01      	ldr	r3, [sp, #4]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d0df      	beq.n	800e988 <__hexnan+0xd4>
 800e9c8:	f04f 32ff 	mov.w	r2, #4294967295
 800e9cc:	f1c3 0320 	rsb	r3, r3, #32
 800e9d0:	fa22 f303 	lsr.w	r3, r2, r3
 800e9d4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e9d8:	401a      	ands	r2, r3
 800e9da:	f846 2c04 	str.w	r2, [r6, #-4]
 800e9de:	e7d3      	b.n	800e988 <__hexnan+0xd4>
 800e9e0:	3f04      	subs	r7, #4
 800e9e2:	e7d1      	b.n	800e988 <__hexnan+0xd4>
 800e9e4:	2004      	movs	r0, #4
 800e9e6:	b007      	add	sp, #28
 800e9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e9ec <_localeconv_r>:
 800e9ec:	4800      	ldr	r0, [pc, #0]	; (800e9f0 <_localeconv_r+0x4>)
 800e9ee:	4770      	bx	lr
 800e9f0:	20000274 	.word	0x20000274

0800e9f4 <malloc>:
 800e9f4:	4b02      	ldr	r3, [pc, #8]	; (800ea00 <malloc+0xc>)
 800e9f6:	4601      	mov	r1, r0
 800e9f8:	6818      	ldr	r0, [r3, #0]
 800e9fa:	f000 bd67 	b.w	800f4cc <_malloc_r>
 800e9fe:	bf00      	nop
 800ea00:	2000011c 	.word	0x2000011c

0800ea04 <__ascii_mbtowc>:
 800ea04:	b082      	sub	sp, #8
 800ea06:	b901      	cbnz	r1, 800ea0a <__ascii_mbtowc+0x6>
 800ea08:	a901      	add	r1, sp, #4
 800ea0a:	b142      	cbz	r2, 800ea1e <__ascii_mbtowc+0x1a>
 800ea0c:	b14b      	cbz	r3, 800ea22 <__ascii_mbtowc+0x1e>
 800ea0e:	7813      	ldrb	r3, [r2, #0]
 800ea10:	600b      	str	r3, [r1, #0]
 800ea12:	7812      	ldrb	r2, [r2, #0]
 800ea14:	1e10      	subs	r0, r2, #0
 800ea16:	bf18      	it	ne
 800ea18:	2001      	movne	r0, #1
 800ea1a:	b002      	add	sp, #8
 800ea1c:	4770      	bx	lr
 800ea1e:	4610      	mov	r0, r2
 800ea20:	e7fb      	b.n	800ea1a <__ascii_mbtowc+0x16>
 800ea22:	f06f 0001 	mvn.w	r0, #1
 800ea26:	e7f8      	b.n	800ea1a <__ascii_mbtowc+0x16>

0800ea28 <memcpy>:
 800ea28:	440a      	add	r2, r1
 800ea2a:	4291      	cmp	r1, r2
 800ea2c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ea30:	d100      	bne.n	800ea34 <memcpy+0xc>
 800ea32:	4770      	bx	lr
 800ea34:	b510      	push	{r4, lr}
 800ea36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ea3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ea3e:	4291      	cmp	r1, r2
 800ea40:	d1f9      	bne.n	800ea36 <memcpy+0xe>
 800ea42:	bd10      	pop	{r4, pc}

0800ea44 <_Balloc>:
 800ea44:	b570      	push	{r4, r5, r6, lr}
 800ea46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ea48:	4604      	mov	r4, r0
 800ea4a:	460d      	mov	r5, r1
 800ea4c:	b976      	cbnz	r6, 800ea6c <_Balloc+0x28>
 800ea4e:	2010      	movs	r0, #16
 800ea50:	f7ff ffd0 	bl	800e9f4 <malloc>
 800ea54:	4602      	mov	r2, r0
 800ea56:	6260      	str	r0, [r4, #36]	; 0x24
 800ea58:	b920      	cbnz	r0, 800ea64 <_Balloc+0x20>
 800ea5a:	4b18      	ldr	r3, [pc, #96]	; (800eabc <_Balloc+0x78>)
 800ea5c:	4818      	ldr	r0, [pc, #96]	; (800eac0 <_Balloc+0x7c>)
 800ea5e:	2166      	movs	r1, #102	; 0x66
 800ea60:	f000 ff40 	bl	800f8e4 <__assert_func>
 800ea64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ea68:	6006      	str	r6, [r0, #0]
 800ea6a:	60c6      	str	r6, [r0, #12]
 800ea6c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ea6e:	68f3      	ldr	r3, [r6, #12]
 800ea70:	b183      	cbz	r3, 800ea94 <_Balloc+0x50>
 800ea72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea74:	68db      	ldr	r3, [r3, #12]
 800ea76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ea7a:	b9b8      	cbnz	r0, 800eaac <_Balloc+0x68>
 800ea7c:	2101      	movs	r1, #1
 800ea7e:	fa01 f605 	lsl.w	r6, r1, r5
 800ea82:	1d72      	adds	r2, r6, #5
 800ea84:	0092      	lsls	r2, r2, #2
 800ea86:	4620      	mov	r0, r4
 800ea88:	f000 fc9d 	bl	800f3c6 <_calloc_r>
 800ea8c:	b160      	cbz	r0, 800eaa8 <_Balloc+0x64>
 800ea8e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ea92:	e00e      	b.n	800eab2 <_Balloc+0x6e>
 800ea94:	2221      	movs	r2, #33	; 0x21
 800ea96:	2104      	movs	r1, #4
 800ea98:	4620      	mov	r0, r4
 800ea9a:	f000 fc94 	bl	800f3c6 <_calloc_r>
 800ea9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eaa0:	60f0      	str	r0, [r6, #12]
 800eaa2:	68db      	ldr	r3, [r3, #12]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d1e4      	bne.n	800ea72 <_Balloc+0x2e>
 800eaa8:	2000      	movs	r0, #0
 800eaaa:	bd70      	pop	{r4, r5, r6, pc}
 800eaac:	6802      	ldr	r2, [r0, #0]
 800eaae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800eab2:	2300      	movs	r3, #0
 800eab4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800eab8:	e7f7      	b.n	800eaaa <_Balloc+0x66>
 800eaba:	bf00      	nop
 800eabc:	080106a3 	.word	0x080106a3
 800eac0:	080107a0 	.word	0x080107a0

0800eac4 <_Bfree>:
 800eac4:	b570      	push	{r4, r5, r6, lr}
 800eac6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800eac8:	4605      	mov	r5, r0
 800eaca:	460c      	mov	r4, r1
 800eacc:	b976      	cbnz	r6, 800eaec <_Bfree+0x28>
 800eace:	2010      	movs	r0, #16
 800ead0:	f7ff ff90 	bl	800e9f4 <malloc>
 800ead4:	4602      	mov	r2, r0
 800ead6:	6268      	str	r0, [r5, #36]	; 0x24
 800ead8:	b920      	cbnz	r0, 800eae4 <_Bfree+0x20>
 800eada:	4b09      	ldr	r3, [pc, #36]	; (800eb00 <_Bfree+0x3c>)
 800eadc:	4809      	ldr	r0, [pc, #36]	; (800eb04 <_Bfree+0x40>)
 800eade:	218a      	movs	r1, #138	; 0x8a
 800eae0:	f000 ff00 	bl	800f8e4 <__assert_func>
 800eae4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eae8:	6006      	str	r6, [r0, #0]
 800eaea:	60c6      	str	r6, [r0, #12]
 800eaec:	b13c      	cbz	r4, 800eafe <_Bfree+0x3a>
 800eaee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800eaf0:	6862      	ldr	r2, [r4, #4]
 800eaf2:	68db      	ldr	r3, [r3, #12]
 800eaf4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eaf8:	6021      	str	r1, [r4, #0]
 800eafa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800eafe:	bd70      	pop	{r4, r5, r6, pc}
 800eb00:	080106a3 	.word	0x080106a3
 800eb04:	080107a0 	.word	0x080107a0

0800eb08 <__multadd>:
 800eb08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb0c:	690d      	ldr	r5, [r1, #16]
 800eb0e:	4607      	mov	r7, r0
 800eb10:	460c      	mov	r4, r1
 800eb12:	461e      	mov	r6, r3
 800eb14:	f101 0c14 	add.w	ip, r1, #20
 800eb18:	2000      	movs	r0, #0
 800eb1a:	f8dc 3000 	ldr.w	r3, [ip]
 800eb1e:	b299      	uxth	r1, r3
 800eb20:	fb02 6101 	mla	r1, r2, r1, r6
 800eb24:	0c1e      	lsrs	r6, r3, #16
 800eb26:	0c0b      	lsrs	r3, r1, #16
 800eb28:	fb02 3306 	mla	r3, r2, r6, r3
 800eb2c:	b289      	uxth	r1, r1
 800eb2e:	3001      	adds	r0, #1
 800eb30:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800eb34:	4285      	cmp	r5, r0
 800eb36:	f84c 1b04 	str.w	r1, [ip], #4
 800eb3a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800eb3e:	dcec      	bgt.n	800eb1a <__multadd+0x12>
 800eb40:	b30e      	cbz	r6, 800eb86 <__multadd+0x7e>
 800eb42:	68a3      	ldr	r3, [r4, #8]
 800eb44:	42ab      	cmp	r3, r5
 800eb46:	dc19      	bgt.n	800eb7c <__multadd+0x74>
 800eb48:	6861      	ldr	r1, [r4, #4]
 800eb4a:	4638      	mov	r0, r7
 800eb4c:	3101      	adds	r1, #1
 800eb4e:	f7ff ff79 	bl	800ea44 <_Balloc>
 800eb52:	4680      	mov	r8, r0
 800eb54:	b928      	cbnz	r0, 800eb62 <__multadd+0x5a>
 800eb56:	4602      	mov	r2, r0
 800eb58:	4b0c      	ldr	r3, [pc, #48]	; (800eb8c <__multadd+0x84>)
 800eb5a:	480d      	ldr	r0, [pc, #52]	; (800eb90 <__multadd+0x88>)
 800eb5c:	21b5      	movs	r1, #181	; 0xb5
 800eb5e:	f000 fec1 	bl	800f8e4 <__assert_func>
 800eb62:	6922      	ldr	r2, [r4, #16]
 800eb64:	3202      	adds	r2, #2
 800eb66:	f104 010c 	add.w	r1, r4, #12
 800eb6a:	0092      	lsls	r2, r2, #2
 800eb6c:	300c      	adds	r0, #12
 800eb6e:	f7ff ff5b 	bl	800ea28 <memcpy>
 800eb72:	4621      	mov	r1, r4
 800eb74:	4638      	mov	r0, r7
 800eb76:	f7ff ffa5 	bl	800eac4 <_Bfree>
 800eb7a:	4644      	mov	r4, r8
 800eb7c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800eb80:	3501      	adds	r5, #1
 800eb82:	615e      	str	r6, [r3, #20]
 800eb84:	6125      	str	r5, [r4, #16]
 800eb86:	4620      	mov	r0, r4
 800eb88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb8c:	08010715 	.word	0x08010715
 800eb90:	080107a0 	.word	0x080107a0

0800eb94 <__s2b>:
 800eb94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb98:	460c      	mov	r4, r1
 800eb9a:	4615      	mov	r5, r2
 800eb9c:	461f      	mov	r7, r3
 800eb9e:	2209      	movs	r2, #9
 800eba0:	3308      	adds	r3, #8
 800eba2:	4606      	mov	r6, r0
 800eba4:	fb93 f3f2 	sdiv	r3, r3, r2
 800eba8:	2100      	movs	r1, #0
 800ebaa:	2201      	movs	r2, #1
 800ebac:	429a      	cmp	r2, r3
 800ebae:	db09      	blt.n	800ebc4 <__s2b+0x30>
 800ebb0:	4630      	mov	r0, r6
 800ebb2:	f7ff ff47 	bl	800ea44 <_Balloc>
 800ebb6:	b940      	cbnz	r0, 800ebca <__s2b+0x36>
 800ebb8:	4602      	mov	r2, r0
 800ebba:	4b19      	ldr	r3, [pc, #100]	; (800ec20 <__s2b+0x8c>)
 800ebbc:	4819      	ldr	r0, [pc, #100]	; (800ec24 <__s2b+0x90>)
 800ebbe:	21ce      	movs	r1, #206	; 0xce
 800ebc0:	f000 fe90 	bl	800f8e4 <__assert_func>
 800ebc4:	0052      	lsls	r2, r2, #1
 800ebc6:	3101      	adds	r1, #1
 800ebc8:	e7f0      	b.n	800ebac <__s2b+0x18>
 800ebca:	9b08      	ldr	r3, [sp, #32]
 800ebcc:	6143      	str	r3, [r0, #20]
 800ebce:	2d09      	cmp	r5, #9
 800ebd0:	f04f 0301 	mov.w	r3, #1
 800ebd4:	6103      	str	r3, [r0, #16]
 800ebd6:	dd16      	ble.n	800ec06 <__s2b+0x72>
 800ebd8:	f104 0909 	add.w	r9, r4, #9
 800ebdc:	46c8      	mov	r8, r9
 800ebde:	442c      	add	r4, r5
 800ebe0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ebe4:	4601      	mov	r1, r0
 800ebe6:	3b30      	subs	r3, #48	; 0x30
 800ebe8:	220a      	movs	r2, #10
 800ebea:	4630      	mov	r0, r6
 800ebec:	f7ff ff8c 	bl	800eb08 <__multadd>
 800ebf0:	45a0      	cmp	r8, r4
 800ebf2:	d1f5      	bne.n	800ebe0 <__s2b+0x4c>
 800ebf4:	f1a5 0408 	sub.w	r4, r5, #8
 800ebf8:	444c      	add	r4, r9
 800ebfa:	1b2d      	subs	r5, r5, r4
 800ebfc:	1963      	adds	r3, r4, r5
 800ebfe:	42bb      	cmp	r3, r7
 800ec00:	db04      	blt.n	800ec0c <__s2b+0x78>
 800ec02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec06:	340a      	adds	r4, #10
 800ec08:	2509      	movs	r5, #9
 800ec0a:	e7f6      	b.n	800ebfa <__s2b+0x66>
 800ec0c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ec10:	4601      	mov	r1, r0
 800ec12:	3b30      	subs	r3, #48	; 0x30
 800ec14:	220a      	movs	r2, #10
 800ec16:	4630      	mov	r0, r6
 800ec18:	f7ff ff76 	bl	800eb08 <__multadd>
 800ec1c:	e7ee      	b.n	800ebfc <__s2b+0x68>
 800ec1e:	bf00      	nop
 800ec20:	08010715 	.word	0x08010715
 800ec24:	080107a0 	.word	0x080107a0

0800ec28 <__hi0bits>:
 800ec28:	0c03      	lsrs	r3, r0, #16
 800ec2a:	041b      	lsls	r3, r3, #16
 800ec2c:	b9d3      	cbnz	r3, 800ec64 <__hi0bits+0x3c>
 800ec2e:	0400      	lsls	r0, r0, #16
 800ec30:	2310      	movs	r3, #16
 800ec32:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ec36:	bf04      	itt	eq
 800ec38:	0200      	lsleq	r0, r0, #8
 800ec3a:	3308      	addeq	r3, #8
 800ec3c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ec40:	bf04      	itt	eq
 800ec42:	0100      	lsleq	r0, r0, #4
 800ec44:	3304      	addeq	r3, #4
 800ec46:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ec4a:	bf04      	itt	eq
 800ec4c:	0080      	lsleq	r0, r0, #2
 800ec4e:	3302      	addeq	r3, #2
 800ec50:	2800      	cmp	r0, #0
 800ec52:	db05      	blt.n	800ec60 <__hi0bits+0x38>
 800ec54:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ec58:	f103 0301 	add.w	r3, r3, #1
 800ec5c:	bf08      	it	eq
 800ec5e:	2320      	moveq	r3, #32
 800ec60:	4618      	mov	r0, r3
 800ec62:	4770      	bx	lr
 800ec64:	2300      	movs	r3, #0
 800ec66:	e7e4      	b.n	800ec32 <__hi0bits+0xa>

0800ec68 <__lo0bits>:
 800ec68:	6803      	ldr	r3, [r0, #0]
 800ec6a:	f013 0207 	ands.w	r2, r3, #7
 800ec6e:	4601      	mov	r1, r0
 800ec70:	d00b      	beq.n	800ec8a <__lo0bits+0x22>
 800ec72:	07da      	lsls	r2, r3, #31
 800ec74:	d423      	bmi.n	800ecbe <__lo0bits+0x56>
 800ec76:	0798      	lsls	r0, r3, #30
 800ec78:	bf49      	itett	mi
 800ec7a:	085b      	lsrmi	r3, r3, #1
 800ec7c:	089b      	lsrpl	r3, r3, #2
 800ec7e:	2001      	movmi	r0, #1
 800ec80:	600b      	strmi	r3, [r1, #0]
 800ec82:	bf5c      	itt	pl
 800ec84:	600b      	strpl	r3, [r1, #0]
 800ec86:	2002      	movpl	r0, #2
 800ec88:	4770      	bx	lr
 800ec8a:	b298      	uxth	r0, r3
 800ec8c:	b9a8      	cbnz	r0, 800ecba <__lo0bits+0x52>
 800ec8e:	0c1b      	lsrs	r3, r3, #16
 800ec90:	2010      	movs	r0, #16
 800ec92:	b2da      	uxtb	r2, r3
 800ec94:	b90a      	cbnz	r2, 800ec9a <__lo0bits+0x32>
 800ec96:	3008      	adds	r0, #8
 800ec98:	0a1b      	lsrs	r3, r3, #8
 800ec9a:	071a      	lsls	r2, r3, #28
 800ec9c:	bf04      	itt	eq
 800ec9e:	091b      	lsreq	r3, r3, #4
 800eca0:	3004      	addeq	r0, #4
 800eca2:	079a      	lsls	r2, r3, #30
 800eca4:	bf04      	itt	eq
 800eca6:	089b      	lsreq	r3, r3, #2
 800eca8:	3002      	addeq	r0, #2
 800ecaa:	07da      	lsls	r2, r3, #31
 800ecac:	d403      	bmi.n	800ecb6 <__lo0bits+0x4e>
 800ecae:	085b      	lsrs	r3, r3, #1
 800ecb0:	f100 0001 	add.w	r0, r0, #1
 800ecb4:	d005      	beq.n	800ecc2 <__lo0bits+0x5a>
 800ecb6:	600b      	str	r3, [r1, #0]
 800ecb8:	4770      	bx	lr
 800ecba:	4610      	mov	r0, r2
 800ecbc:	e7e9      	b.n	800ec92 <__lo0bits+0x2a>
 800ecbe:	2000      	movs	r0, #0
 800ecc0:	4770      	bx	lr
 800ecc2:	2020      	movs	r0, #32
 800ecc4:	4770      	bx	lr
	...

0800ecc8 <__i2b>:
 800ecc8:	b510      	push	{r4, lr}
 800ecca:	460c      	mov	r4, r1
 800eccc:	2101      	movs	r1, #1
 800ecce:	f7ff feb9 	bl	800ea44 <_Balloc>
 800ecd2:	4602      	mov	r2, r0
 800ecd4:	b928      	cbnz	r0, 800ece2 <__i2b+0x1a>
 800ecd6:	4b05      	ldr	r3, [pc, #20]	; (800ecec <__i2b+0x24>)
 800ecd8:	4805      	ldr	r0, [pc, #20]	; (800ecf0 <__i2b+0x28>)
 800ecda:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ecde:	f000 fe01 	bl	800f8e4 <__assert_func>
 800ece2:	2301      	movs	r3, #1
 800ece4:	6144      	str	r4, [r0, #20]
 800ece6:	6103      	str	r3, [r0, #16]
 800ece8:	bd10      	pop	{r4, pc}
 800ecea:	bf00      	nop
 800ecec:	08010715 	.word	0x08010715
 800ecf0:	080107a0 	.word	0x080107a0

0800ecf4 <__multiply>:
 800ecf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecf8:	4691      	mov	r9, r2
 800ecfa:	690a      	ldr	r2, [r1, #16]
 800ecfc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ed00:	429a      	cmp	r2, r3
 800ed02:	bfb8      	it	lt
 800ed04:	460b      	movlt	r3, r1
 800ed06:	460c      	mov	r4, r1
 800ed08:	bfbc      	itt	lt
 800ed0a:	464c      	movlt	r4, r9
 800ed0c:	4699      	movlt	r9, r3
 800ed0e:	6927      	ldr	r7, [r4, #16]
 800ed10:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ed14:	68a3      	ldr	r3, [r4, #8]
 800ed16:	6861      	ldr	r1, [r4, #4]
 800ed18:	eb07 060a 	add.w	r6, r7, sl
 800ed1c:	42b3      	cmp	r3, r6
 800ed1e:	b085      	sub	sp, #20
 800ed20:	bfb8      	it	lt
 800ed22:	3101      	addlt	r1, #1
 800ed24:	f7ff fe8e 	bl	800ea44 <_Balloc>
 800ed28:	b930      	cbnz	r0, 800ed38 <__multiply+0x44>
 800ed2a:	4602      	mov	r2, r0
 800ed2c:	4b44      	ldr	r3, [pc, #272]	; (800ee40 <__multiply+0x14c>)
 800ed2e:	4845      	ldr	r0, [pc, #276]	; (800ee44 <__multiply+0x150>)
 800ed30:	f240 115d 	movw	r1, #349	; 0x15d
 800ed34:	f000 fdd6 	bl	800f8e4 <__assert_func>
 800ed38:	f100 0514 	add.w	r5, r0, #20
 800ed3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ed40:	462b      	mov	r3, r5
 800ed42:	2200      	movs	r2, #0
 800ed44:	4543      	cmp	r3, r8
 800ed46:	d321      	bcc.n	800ed8c <__multiply+0x98>
 800ed48:	f104 0314 	add.w	r3, r4, #20
 800ed4c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ed50:	f109 0314 	add.w	r3, r9, #20
 800ed54:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ed58:	9202      	str	r2, [sp, #8]
 800ed5a:	1b3a      	subs	r2, r7, r4
 800ed5c:	3a15      	subs	r2, #21
 800ed5e:	f022 0203 	bic.w	r2, r2, #3
 800ed62:	3204      	adds	r2, #4
 800ed64:	f104 0115 	add.w	r1, r4, #21
 800ed68:	428f      	cmp	r7, r1
 800ed6a:	bf38      	it	cc
 800ed6c:	2204      	movcc	r2, #4
 800ed6e:	9201      	str	r2, [sp, #4]
 800ed70:	9a02      	ldr	r2, [sp, #8]
 800ed72:	9303      	str	r3, [sp, #12]
 800ed74:	429a      	cmp	r2, r3
 800ed76:	d80c      	bhi.n	800ed92 <__multiply+0x9e>
 800ed78:	2e00      	cmp	r6, #0
 800ed7a:	dd03      	ble.n	800ed84 <__multiply+0x90>
 800ed7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d05a      	beq.n	800ee3a <__multiply+0x146>
 800ed84:	6106      	str	r6, [r0, #16]
 800ed86:	b005      	add	sp, #20
 800ed88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed8c:	f843 2b04 	str.w	r2, [r3], #4
 800ed90:	e7d8      	b.n	800ed44 <__multiply+0x50>
 800ed92:	f8b3 a000 	ldrh.w	sl, [r3]
 800ed96:	f1ba 0f00 	cmp.w	sl, #0
 800ed9a:	d024      	beq.n	800ede6 <__multiply+0xf2>
 800ed9c:	f104 0e14 	add.w	lr, r4, #20
 800eda0:	46a9      	mov	r9, r5
 800eda2:	f04f 0c00 	mov.w	ip, #0
 800eda6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800edaa:	f8d9 1000 	ldr.w	r1, [r9]
 800edae:	fa1f fb82 	uxth.w	fp, r2
 800edb2:	b289      	uxth	r1, r1
 800edb4:	fb0a 110b 	mla	r1, sl, fp, r1
 800edb8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800edbc:	f8d9 2000 	ldr.w	r2, [r9]
 800edc0:	4461      	add	r1, ip
 800edc2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800edc6:	fb0a c20b 	mla	r2, sl, fp, ip
 800edca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800edce:	b289      	uxth	r1, r1
 800edd0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800edd4:	4577      	cmp	r7, lr
 800edd6:	f849 1b04 	str.w	r1, [r9], #4
 800edda:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800edde:	d8e2      	bhi.n	800eda6 <__multiply+0xb2>
 800ede0:	9a01      	ldr	r2, [sp, #4]
 800ede2:	f845 c002 	str.w	ip, [r5, r2]
 800ede6:	9a03      	ldr	r2, [sp, #12]
 800ede8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800edec:	3304      	adds	r3, #4
 800edee:	f1b9 0f00 	cmp.w	r9, #0
 800edf2:	d020      	beq.n	800ee36 <__multiply+0x142>
 800edf4:	6829      	ldr	r1, [r5, #0]
 800edf6:	f104 0c14 	add.w	ip, r4, #20
 800edfa:	46ae      	mov	lr, r5
 800edfc:	f04f 0a00 	mov.w	sl, #0
 800ee00:	f8bc b000 	ldrh.w	fp, [ip]
 800ee04:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ee08:	fb09 220b 	mla	r2, r9, fp, r2
 800ee0c:	4492      	add	sl, r2
 800ee0e:	b289      	uxth	r1, r1
 800ee10:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ee14:	f84e 1b04 	str.w	r1, [lr], #4
 800ee18:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ee1c:	f8be 1000 	ldrh.w	r1, [lr]
 800ee20:	0c12      	lsrs	r2, r2, #16
 800ee22:	fb09 1102 	mla	r1, r9, r2, r1
 800ee26:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ee2a:	4567      	cmp	r7, ip
 800ee2c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ee30:	d8e6      	bhi.n	800ee00 <__multiply+0x10c>
 800ee32:	9a01      	ldr	r2, [sp, #4]
 800ee34:	50a9      	str	r1, [r5, r2]
 800ee36:	3504      	adds	r5, #4
 800ee38:	e79a      	b.n	800ed70 <__multiply+0x7c>
 800ee3a:	3e01      	subs	r6, #1
 800ee3c:	e79c      	b.n	800ed78 <__multiply+0x84>
 800ee3e:	bf00      	nop
 800ee40:	08010715 	.word	0x08010715
 800ee44:	080107a0 	.word	0x080107a0

0800ee48 <__pow5mult>:
 800ee48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee4c:	4615      	mov	r5, r2
 800ee4e:	f012 0203 	ands.w	r2, r2, #3
 800ee52:	4606      	mov	r6, r0
 800ee54:	460f      	mov	r7, r1
 800ee56:	d007      	beq.n	800ee68 <__pow5mult+0x20>
 800ee58:	4c25      	ldr	r4, [pc, #148]	; (800eef0 <__pow5mult+0xa8>)
 800ee5a:	3a01      	subs	r2, #1
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ee62:	f7ff fe51 	bl	800eb08 <__multadd>
 800ee66:	4607      	mov	r7, r0
 800ee68:	10ad      	asrs	r5, r5, #2
 800ee6a:	d03d      	beq.n	800eee8 <__pow5mult+0xa0>
 800ee6c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ee6e:	b97c      	cbnz	r4, 800ee90 <__pow5mult+0x48>
 800ee70:	2010      	movs	r0, #16
 800ee72:	f7ff fdbf 	bl	800e9f4 <malloc>
 800ee76:	4602      	mov	r2, r0
 800ee78:	6270      	str	r0, [r6, #36]	; 0x24
 800ee7a:	b928      	cbnz	r0, 800ee88 <__pow5mult+0x40>
 800ee7c:	4b1d      	ldr	r3, [pc, #116]	; (800eef4 <__pow5mult+0xac>)
 800ee7e:	481e      	ldr	r0, [pc, #120]	; (800eef8 <__pow5mult+0xb0>)
 800ee80:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ee84:	f000 fd2e 	bl	800f8e4 <__assert_func>
 800ee88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ee8c:	6004      	str	r4, [r0, #0]
 800ee8e:	60c4      	str	r4, [r0, #12]
 800ee90:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ee94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ee98:	b94c      	cbnz	r4, 800eeae <__pow5mult+0x66>
 800ee9a:	f240 2171 	movw	r1, #625	; 0x271
 800ee9e:	4630      	mov	r0, r6
 800eea0:	f7ff ff12 	bl	800ecc8 <__i2b>
 800eea4:	2300      	movs	r3, #0
 800eea6:	f8c8 0008 	str.w	r0, [r8, #8]
 800eeaa:	4604      	mov	r4, r0
 800eeac:	6003      	str	r3, [r0, #0]
 800eeae:	f04f 0900 	mov.w	r9, #0
 800eeb2:	07eb      	lsls	r3, r5, #31
 800eeb4:	d50a      	bpl.n	800eecc <__pow5mult+0x84>
 800eeb6:	4639      	mov	r1, r7
 800eeb8:	4622      	mov	r2, r4
 800eeba:	4630      	mov	r0, r6
 800eebc:	f7ff ff1a 	bl	800ecf4 <__multiply>
 800eec0:	4639      	mov	r1, r7
 800eec2:	4680      	mov	r8, r0
 800eec4:	4630      	mov	r0, r6
 800eec6:	f7ff fdfd 	bl	800eac4 <_Bfree>
 800eeca:	4647      	mov	r7, r8
 800eecc:	106d      	asrs	r5, r5, #1
 800eece:	d00b      	beq.n	800eee8 <__pow5mult+0xa0>
 800eed0:	6820      	ldr	r0, [r4, #0]
 800eed2:	b938      	cbnz	r0, 800eee4 <__pow5mult+0x9c>
 800eed4:	4622      	mov	r2, r4
 800eed6:	4621      	mov	r1, r4
 800eed8:	4630      	mov	r0, r6
 800eeda:	f7ff ff0b 	bl	800ecf4 <__multiply>
 800eede:	6020      	str	r0, [r4, #0]
 800eee0:	f8c0 9000 	str.w	r9, [r0]
 800eee4:	4604      	mov	r4, r0
 800eee6:	e7e4      	b.n	800eeb2 <__pow5mult+0x6a>
 800eee8:	4638      	mov	r0, r7
 800eeea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eeee:	bf00      	nop
 800eef0:	080108f0 	.word	0x080108f0
 800eef4:	080106a3 	.word	0x080106a3
 800eef8:	080107a0 	.word	0x080107a0

0800eefc <__lshift>:
 800eefc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef00:	460c      	mov	r4, r1
 800ef02:	6849      	ldr	r1, [r1, #4]
 800ef04:	6923      	ldr	r3, [r4, #16]
 800ef06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ef0a:	68a3      	ldr	r3, [r4, #8]
 800ef0c:	4607      	mov	r7, r0
 800ef0e:	4691      	mov	r9, r2
 800ef10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ef14:	f108 0601 	add.w	r6, r8, #1
 800ef18:	42b3      	cmp	r3, r6
 800ef1a:	db0b      	blt.n	800ef34 <__lshift+0x38>
 800ef1c:	4638      	mov	r0, r7
 800ef1e:	f7ff fd91 	bl	800ea44 <_Balloc>
 800ef22:	4605      	mov	r5, r0
 800ef24:	b948      	cbnz	r0, 800ef3a <__lshift+0x3e>
 800ef26:	4602      	mov	r2, r0
 800ef28:	4b2a      	ldr	r3, [pc, #168]	; (800efd4 <__lshift+0xd8>)
 800ef2a:	482b      	ldr	r0, [pc, #172]	; (800efd8 <__lshift+0xdc>)
 800ef2c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ef30:	f000 fcd8 	bl	800f8e4 <__assert_func>
 800ef34:	3101      	adds	r1, #1
 800ef36:	005b      	lsls	r3, r3, #1
 800ef38:	e7ee      	b.n	800ef18 <__lshift+0x1c>
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	f100 0114 	add.w	r1, r0, #20
 800ef40:	f100 0210 	add.w	r2, r0, #16
 800ef44:	4618      	mov	r0, r3
 800ef46:	4553      	cmp	r3, sl
 800ef48:	db37      	blt.n	800efba <__lshift+0xbe>
 800ef4a:	6920      	ldr	r0, [r4, #16]
 800ef4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ef50:	f104 0314 	add.w	r3, r4, #20
 800ef54:	f019 091f 	ands.w	r9, r9, #31
 800ef58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ef5c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ef60:	d02f      	beq.n	800efc2 <__lshift+0xc6>
 800ef62:	f1c9 0e20 	rsb	lr, r9, #32
 800ef66:	468a      	mov	sl, r1
 800ef68:	f04f 0c00 	mov.w	ip, #0
 800ef6c:	681a      	ldr	r2, [r3, #0]
 800ef6e:	fa02 f209 	lsl.w	r2, r2, r9
 800ef72:	ea42 020c 	orr.w	r2, r2, ip
 800ef76:	f84a 2b04 	str.w	r2, [sl], #4
 800ef7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef7e:	4298      	cmp	r0, r3
 800ef80:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ef84:	d8f2      	bhi.n	800ef6c <__lshift+0x70>
 800ef86:	1b03      	subs	r3, r0, r4
 800ef88:	3b15      	subs	r3, #21
 800ef8a:	f023 0303 	bic.w	r3, r3, #3
 800ef8e:	3304      	adds	r3, #4
 800ef90:	f104 0215 	add.w	r2, r4, #21
 800ef94:	4290      	cmp	r0, r2
 800ef96:	bf38      	it	cc
 800ef98:	2304      	movcc	r3, #4
 800ef9a:	f841 c003 	str.w	ip, [r1, r3]
 800ef9e:	f1bc 0f00 	cmp.w	ip, #0
 800efa2:	d001      	beq.n	800efa8 <__lshift+0xac>
 800efa4:	f108 0602 	add.w	r6, r8, #2
 800efa8:	3e01      	subs	r6, #1
 800efaa:	4638      	mov	r0, r7
 800efac:	612e      	str	r6, [r5, #16]
 800efae:	4621      	mov	r1, r4
 800efb0:	f7ff fd88 	bl	800eac4 <_Bfree>
 800efb4:	4628      	mov	r0, r5
 800efb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efba:	f842 0f04 	str.w	r0, [r2, #4]!
 800efbe:	3301      	adds	r3, #1
 800efc0:	e7c1      	b.n	800ef46 <__lshift+0x4a>
 800efc2:	3904      	subs	r1, #4
 800efc4:	f853 2b04 	ldr.w	r2, [r3], #4
 800efc8:	f841 2f04 	str.w	r2, [r1, #4]!
 800efcc:	4298      	cmp	r0, r3
 800efce:	d8f9      	bhi.n	800efc4 <__lshift+0xc8>
 800efd0:	e7ea      	b.n	800efa8 <__lshift+0xac>
 800efd2:	bf00      	nop
 800efd4:	08010715 	.word	0x08010715
 800efd8:	080107a0 	.word	0x080107a0

0800efdc <__mcmp>:
 800efdc:	b530      	push	{r4, r5, lr}
 800efde:	6902      	ldr	r2, [r0, #16]
 800efe0:	690c      	ldr	r4, [r1, #16]
 800efe2:	1b12      	subs	r2, r2, r4
 800efe4:	d10e      	bne.n	800f004 <__mcmp+0x28>
 800efe6:	f100 0314 	add.w	r3, r0, #20
 800efea:	3114      	adds	r1, #20
 800efec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800eff0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800eff4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800eff8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800effc:	42a5      	cmp	r5, r4
 800effe:	d003      	beq.n	800f008 <__mcmp+0x2c>
 800f000:	d305      	bcc.n	800f00e <__mcmp+0x32>
 800f002:	2201      	movs	r2, #1
 800f004:	4610      	mov	r0, r2
 800f006:	bd30      	pop	{r4, r5, pc}
 800f008:	4283      	cmp	r3, r0
 800f00a:	d3f3      	bcc.n	800eff4 <__mcmp+0x18>
 800f00c:	e7fa      	b.n	800f004 <__mcmp+0x28>
 800f00e:	f04f 32ff 	mov.w	r2, #4294967295
 800f012:	e7f7      	b.n	800f004 <__mcmp+0x28>

0800f014 <__mdiff>:
 800f014:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f018:	460c      	mov	r4, r1
 800f01a:	4606      	mov	r6, r0
 800f01c:	4611      	mov	r1, r2
 800f01e:	4620      	mov	r0, r4
 800f020:	4690      	mov	r8, r2
 800f022:	f7ff ffdb 	bl	800efdc <__mcmp>
 800f026:	1e05      	subs	r5, r0, #0
 800f028:	d110      	bne.n	800f04c <__mdiff+0x38>
 800f02a:	4629      	mov	r1, r5
 800f02c:	4630      	mov	r0, r6
 800f02e:	f7ff fd09 	bl	800ea44 <_Balloc>
 800f032:	b930      	cbnz	r0, 800f042 <__mdiff+0x2e>
 800f034:	4b3a      	ldr	r3, [pc, #232]	; (800f120 <__mdiff+0x10c>)
 800f036:	4602      	mov	r2, r0
 800f038:	f240 2132 	movw	r1, #562	; 0x232
 800f03c:	4839      	ldr	r0, [pc, #228]	; (800f124 <__mdiff+0x110>)
 800f03e:	f000 fc51 	bl	800f8e4 <__assert_func>
 800f042:	2301      	movs	r3, #1
 800f044:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f048:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f04c:	bfa4      	itt	ge
 800f04e:	4643      	movge	r3, r8
 800f050:	46a0      	movge	r8, r4
 800f052:	4630      	mov	r0, r6
 800f054:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f058:	bfa6      	itte	ge
 800f05a:	461c      	movge	r4, r3
 800f05c:	2500      	movge	r5, #0
 800f05e:	2501      	movlt	r5, #1
 800f060:	f7ff fcf0 	bl	800ea44 <_Balloc>
 800f064:	b920      	cbnz	r0, 800f070 <__mdiff+0x5c>
 800f066:	4b2e      	ldr	r3, [pc, #184]	; (800f120 <__mdiff+0x10c>)
 800f068:	4602      	mov	r2, r0
 800f06a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f06e:	e7e5      	b.n	800f03c <__mdiff+0x28>
 800f070:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f074:	6926      	ldr	r6, [r4, #16]
 800f076:	60c5      	str	r5, [r0, #12]
 800f078:	f104 0914 	add.w	r9, r4, #20
 800f07c:	f108 0514 	add.w	r5, r8, #20
 800f080:	f100 0e14 	add.w	lr, r0, #20
 800f084:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f088:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f08c:	f108 0210 	add.w	r2, r8, #16
 800f090:	46f2      	mov	sl, lr
 800f092:	2100      	movs	r1, #0
 800f094:	f859 3b04 	ldr.w	r3, [r9], #4
 800f098:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f09c:	fa1f f883 	uxth.w	r8, r3
 800f0a0:	fa11 f18b 	uxtah	r1, r1, fp
 800f0a4:	0c1b      	lsrs	r3, r3, #16
 800f0a6:	eba1 0808 	sub.w	r8, r1, r8
 800f0aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f0ae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f0b2:	fa1f f888 	uxth.w	r8, r8
 800f0b6:	1419      	asrs	r1, r3, #16
 800f0b8:	454e      	cmp	r6, r9
 800f0ba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f0be:	f84a 3b04 	str.w	r3, [sl], #4
 800f0c2:	d8e7      	bhi.n	800f094 <__mdiff+0x80>
 800f0c4:	1b33      	subs	r3, r6, r4
 800f0c6:	3b15      	subs	r3, #21
 800f0c8:	f023 0303 	bic.w	r3, r3, #3
 800f0cc:	3304      	adds	r3, #4
 800f0ce:	3415      	adds	r4, #21
 800f0d0:	42a6      	cmp	r6, r4
 800f0d2:	bf38      	it	cc
 800f0d4:	2304      	movcc	r3, #4
 800f0d6:	441d      	add	r5, r3
 800f0d8:	4473      	add	r3, lr
 800f0da:	469e      	mov	lr, r3
 800f0dc:	462e      	mov	r6, r5
 800f0de:	4566      	cmp	r6, ip
 800f0e0:	d30e      	bcc.n	800f100 <__mdiff+0xec>
 800f0e2:	f10c 0203 	add.w	r2, ip, #3
 800f0e6:	1b52      	subs	r2, r2, r5
 800f0e8:	f022 0203 	bic.w	r2, r2, #3
 800f0ec:	3d03      	subs	r5, #3
 800f0ee:	45ac      	cmp	ip, r5
 800f0f0:	bf38      	it	cc
 800f0f2:	2200      	movcc	r2, #0
 800f0f4:	441a      	add	r2, r3
 800f0f6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f0fa:	b17b      	cbz	r3, 800f11c <__mdiff+0x108>
 800f0fc:	6107      	str	r7, [r0, #16]
 800f0fe:	e7a3      	b.n	800f048 <__mdiff+0x34>
 800f100:	f856 8b04 	ldr.w	r8, [r6], #4
 800f104:	fa11 f288 	uxtah	r2, r1, r8
 800f108:	1414      	asrs	r4, r2, #16
 800f10a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f10e:	b292      	uxth	r2, r2
 800f110:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f114:	f84e 2b04 	str.w	r2, [lr], #4
 800f118:	1421      	asrs	r1, r4, #16
 800f11a:	e7e0      	b.n	800f0de <__mdiff+0xca>
 800f11c:	3f01      	subs	r7, #1
 800f11e:	e7ea      	b.n	800f0f6 <__mdiff+0xe2>
 800f120:	08010715 	.word	0x08010715
 800f124:	080107a0 	.word	0x080107a0

0800f128 <__ulp>:
 800f128:	b082      	sub	sp, #8
 800f12a:	ed8d 0b00 	vstr	d0, [sp]
 800f12e:	9b01      	ldr	r3, [sp, #4]
 800f130:	4912      	ldr	r1, [pc, #72]	; (800f17c <__ulp+0x54>)
 800f132:	4019      	ands	r1, r3
 800f134:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800f138:	2900      	cmp	r1, #0
 800f13a:	dd05      	ble.n	800f148 <__ulp+0x20>
 800f13c:	2200      	movs	r2, #0
 800f13e:	460b      	mov	r3, r1
 800f140:	ec43 2b10 	vmov	d0, r2, r3
 800f144:	b002      	add	sp, #8
 800f146:	4770      	bx	lr
 800f148:	4249      	negs	r1, r1
 800f14a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800f14e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800f152:	f04f 0200 	mov.w	r2, #0
 800f156:	f04f 0300 	mov.w	r3, #0
 800f15a:	da04      	bge.n	800f166 <__ulp+0x3e>
 800f15c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800f160:	fa41 f300 	asr.w	r3, r1, r0
 800f164:	e7ec      	b.n	800f140 <__ulp+0x18>
 800f166:	f1a0 0114 	sub.w	r1, r0, #20
 800f16a:	291e      	cmp	r1, #30
 800f16c:	bfda      	itte	le
 800f16e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800f172:	fa20 f101 	lsrle.w	r1, r0, r1
 800f176:	2101      	movgt	r1, #1
 800f178:	460a      	mov	r2, r1
 800f17a:	e7e1      	b.n	800f140 <__ulp+0x18>
 800f17c:	7ff00000 	.word	0x7ff00000

0800f180 <__b2d>:
 800f180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f182:	6905      	ldr	r5, [r0, #16]
 800f184:	f100 0714 	add.w	r7, r0, #20
 800f188:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f18c:	1f2e      	subs	r6, r5, #4
 800f18e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f192:	4620      	mov	r0, r4
 800f194:	f7ff fd48 	bl	800ec28 <__hi0bits>
 800f198:	f1c0 0320 	rsb	r3, r0, #32
 800f19c:	280a      	cmp	r0, #10
 800f19e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800f21c <__b2d+0x9c>
 800f1a2:	600b      	str	r3, [r1, #0]
 800f1a4:	dc14      	bgt.n	800f1d0 <__b2d+0x50>
 800f1a6:	f1c0 0e0b 	rsb	lr, r0, #11
 800f1aa:	fa24 f10e 	lsr.w	r1, r4, lr
 800f1ae:	42b7      	cmp	r7, r6
 800f1b0:	ea41 030c 	orr.w	r3, r1, ip
 800f1b4:	bf34      	ite	cc
 800f1b6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f1ba:	2100      	movcs	r1, #0
 800f1bc:	3015      	adds	r0, #21
 800f1be:	fa04 f000 	lsl.w	r0, r4, r0
 800f1c2:	fa21 f10e 	lsr.w	r1, r1, lr
 800f1c6:	ea40 0201 	orr.w	r2, r0, r1
 800f1ca:	ec43 2b10 	vmov	d0, r2, r3
 800f1ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1d0:	42b7      	cmp	r7, r6
 800f1d2:	bf3a      	itte	cc
 800f1d4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f1d8:	f1a5 0608 	subcc.w	r6, r5, #8
 800f1dc:	2100      	movcs	r1, #0
 800f1de:	380b      	subs	r0, #11
 800f1e0:	d017      	beq.n	800f212 <__b2d+0x92>
 800f1e2:	f1c0 0c20 	rsb	ip, r0, #32
 800f1e6:	fa04 f500 	lsl.w	r5, r4, r0
 800f1ea:	42be      	cmp	r6, r7
 800f1ec:	fa21 f40c 	lsr.w	r4, r1, ip
 800f1f0:	ea45 0504 	orr.w	r5, r5, r4
 800f1f4:	bf8c      	ite	hi
 800f1f6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f1fa:	2400      	movls	r4, #0
 800f1fc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800f200:	fa01 f000 	lsl.w	r0, r1, r0
 800f204:	fa24 f40c 	lsr.w	r4, r4, ip
 800f208:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f20c:	ea40 0204 	orr.w	r2, r0, r4
 800f210:	e7db      	b.n	800f1ca <__b2d+0x4a>
 800f212:	ea44 030c 	orr.w	r3, r4, ip
 800f216:	460a      	mov	r2, r1
 800f218:	e7d7      	b.n	800f1ca <__b2d+0x4a>
 800f21a:	bf00      	nop
 800f21c:	3ff00000 	.word	0x3ff00000

0800f220 <__d2b>:
 800f220:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f224:	4689      	mov	r9, r1
 800f226:	2101      	movs	r1, #1
 800f228:	ec57 6b10 	vmov	r6, r7, d0
 800f22c:	4690      	mov	r8, r2
 800f22e:	f7ff fc09 	bl	800ea44 <_Balloc>
 800f232:	4604      	mov	r4, r0
 800f234:	b930      	cbnz	r0, 800f244 <__d2b+0x24>
 800f236:	4602      	mov	r2, r0
 800f238:	4b25      	ldr	r3, [pc, #148]	; (800f2d0 <__d2b+0xb0>)
 800f23a:	4826      	ldr	r0, [pc, #152]	; (800f2d4 <__d2b+0xb4>)
 800f23c:	f240 310a 	movw	r1, #778	; 0x30a
 800f240:	f000 fb50 	bl	800f8e4 <__assert_func>
 800f244:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f248:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f24c:	bb35      	cbnz	r5, 800f29c <__d2b+0x7c>
 800f24e:	2e00      	cmp	r6, #0
 800f250:	9301      	str	r3, [sp, #4]
 800f252:	d028      	beq.n	800f2a6 <__d2b+0x86>
 800f254:	4668      	mov	r0, sp
 800f256:	9600      	str	r6, [sp, #0]
 800f258:	f7ff fd06 	bl	800ec68 <__lo0bits>
 800f25c:	9900      	ldr	r1, [sp, #0]
 800f25e:	b300      	cbz	r0, 800f2a2 <__d2b+0x82>
 800f260:	9a01      	ldr	r2, [sp, #4]
 800f262:	f1c0 0320 	rsb	r3, r0, #32
 800f266:	fa02 f303 	lsl.w	r3, r2, r3
 800f26a:	430b      	orrs	r3, r1
 800f26c:	40c2      	lsrs	r2, r0
 800f26e:	6163      	str	r3, [r4, #20]
 800f270:	9201      	str	r2, [sp, #4]
 800f272:	9b01      	ldr	r3, [sp, #4]
 800f274:	61a3      	str	r3, [r4, #24]
 800f276:	2b00      	cmp	r3, #0
 800f278:	bf14      	ite	ne
 800f27a:	2202      	movne	r2, #2
 800f27c:	2201      	moveq	r2, #1
 800f27e:	6122      	str	r2, [r4, #16]
 800f280:	b1d5      	cbz	r5, 800f2b8 <__d2b+0x98>
 800f282:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f286:	4405      	add	r5, r0
 800f288:	f8c9 5000 	str.w	r5, [r9]
 800f28c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f290:	f8c8 0000 	str.w	r0, [r8]
 800f294:	4620      	mov	r0, r4
 800f296:	b003      	add	sp, #12
 800f298:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f29c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f2a0:	e7d5      	b.n	800f24e <__d2b+0x2e>
 800f2a2:	6161      	str	r1, [r4, #20]
 800f2a4:	e7e5      	b.n	800f272 <__d2b+0x52>
 800f2a6:	a801      	add	r0, sp, #4
 800f2a8:	f7ff fcde 	bl	800ec68 <__lo0bits>
 800f2ac:	9b01      	ldr	r3, [sp, #4]
 800f2ae:	6163      	str	r3, [r4, #20]
 800f2b0:	2201      	movs	r2, #1
 800f2b2:	6122      	str	r2, [r4, #16]
 800f2b4:	3020      	adds	r0, #32
 800f2b6:	e7e3      	b.n	800f280 <__d2b+0x60>
 800f2b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f2bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f2c0:	f8c9 0000 	str.w	r0, [r9]
 800f2c4:	6918      	ldr	r0, [r3, #16]
 800f2c6:	f7ff fcaf 	bl	800ec28 <__hi0bits>
 800f2ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f2ce:	e7df      	b.n	800f290 <__d2b+0x70>
 800f2d0:	08010715 	.word	0x08010715
 800f2d4:	080107a0 	.word	0x080107a0

0800f2d8 <__ratio>:
 800f2d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2dc:	4688      	mov	r8, r1
 800f2de:	4669      	mov	r1, sp
 800f2e0:	4681      	mov	r9, r0
 800f2e2:	f7ff ff4d 	bl	800f180 <__b2d>
 800f2e6:	a901      	add	r1, sp, #4
 800f2e8:	4640      	mov	r0, r8
 800f2ea:	ec55 4b10 	vmov	r4, r5, d0
 800f2ee:	f7ff ff47 	bl	800f180 <__b2d>
 800f2f2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f2f6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f2fa:	eba3 0c02 	sub.w	ip, r3, r2
 800f2fe:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f302:	1a9b      	subs	r3, r3, r2
 800f304:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f308:	ec51 0b10 	vmov	r0, r1, d0
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	bfd6      	itet	le
 800f310:	460a      	movle	r2, r1
 800f312:	462a      	movgt	r2, r5
 800f314:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f318:	468b      	mov	fp, r1
 800f31a:	462f      	mov	r7, r5
 800f31c:	bfd4      	ite	le
 800f31e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f322:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f326:	4620      	mov	r0, r4
 800f328:	ee10 2a10 	vmov	r2, s0
 800f32c:	465b      	mov	r3, fp
 800f32e:	4639      	mov	r1, r7
 800f330:	f7f1 faac 	bl	800088c <__aeabi_ddiv>
 800f334:	ec41 0b10 	vmov	d0, r0, r1
 800f338:	b003      	add	sp, #12
 800f33a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f33e <__copybits>:
 800f33e:	3901      	subs	r1, #1
 800f340:	b570      	push	{r4, r5, r6, lr}
 800f342:	1149      	asrs	r1, r1, #5
 800f344:	6914      	ldr	r4, [r2, #16]
 800f346:	3101      	adds	r1, #1
 800f348:	f102 0314 	add.w	r3, r2, #20
 800f34c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f350:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f354:	1f05      	subs	r5, r0, #4
 800f356:	42a3      	cmp	r3, r4
 800f358:	d30c      	bcc.n	800f374 <__copybits+0x36>
 800f35a:	1aa3      	subs	r3, r4, r2
 800f35c:	3b11      	subs	r3, #17
 800f35e:	f023 0303 	bic.w	r3, r3, #3
 800f362:	3211      	adds	r2, #17
 800f364:	42a2      	cmp	r2, r4
 800f366:	bf88      	it	hi
 800f368:	2300      	movhi	r3, #0
 800f36a:	4418      	add	r0, r3
 800f36c:	2300      	movs	r3, #0
 800f36e:	4288      	cmp	r0, r1
 800f370:	d305      	bcc.n	800f37e <__copybits+0x40>
 800f372:	bd70      	pop	{r4, r5, r6, pc}
 800f374:	f853 6b04 	ldr.w	r6, [r3], #4
 800f378:	f845 6f04 	str.w	r6, [r5, #4]!
 800f37c:	e7eb      	b.n	800f356 <__copybits+0x18>
 800f37e:	f840 3b04 	str.w	r3, [r0], #4
 800f382:	e7f4      	b.n	800f36e <__copybits+0x30>

0800f384 <__any_on>:
 800f384:	f100 0214 	add.w	r2, r0, #20
 800f388:	6900      	ldr	r0, [r0, #16]
 800f38a:	114b      	asrs	r3, r1, #5
 800f38c:	4298      	cmp	r0, r3
 800f38e:	b510      	push	{r4, lr}
 800f390:	db11      	blt.n	800f3b6 <__any_on+0x32>
 800f392:	dd0a      	ble.n	800f3aa <__any_on+0x26>
 800f394:	f011 011f 	ands.w	r1, r1, #31
 800f398:	d007      	beq.n	800f3aa <__any_on+0x26>
 800f39a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f39e:	fa24 f001 	lsr.w	r0, r4, r1
 800f3a2:	fa00 f101 	lsl.w	r1, r0, r1
 800f3a6:	428c      	cmp	r4, r1
 800f3a8:	d10b      	bne.n	800f3c2 <__any_on+0x3e>
 800f3aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f3ae:	4293      	cmp	r3, r2
 800f3b0:	d803      	bhi.n	800f3ba <__any_on+0x36>
 800f3b2:	2000      	movs	r0, #0
 800f3b4:	bd10      	pop	{r4, pc}
 800f3b6:	4603      	mov	r3, r0
 800f3b8:	e7f7      	b.n	800f3aa <__any_on+0x26>
 800f3ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f3be:	2900      	cmp	r1, #0
 800f3c0:	d0f5      	beq.n	800f3ae <__any_on+0x2a>
 800f3c2:	2001      	movs	r0, #1
 800f3c4:	e7f6      	b.n	800f3b4 <__any_on+0x30>

0800f3c6 <_calloc_r>:
 800f3c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f3c8:	fba1 2402 	umull	r2, r4, r1, r2
 800f3cc:	b94c      	cbnz	r4, 800f3e2 <_calloc_r+0x1c>
 800f3ce:	4611      	mov	r1, r2
 800f3d0:	9201      	str	r2, [sp, #4]
 800f3d2:	f000 f87b 	bl	800f4cc <_malloc_r>
 800f3d6:	9a01      	ldr	r2, [sp, #4]
 800f3d8:	4605      	mov	r5, r0
 800f3da:	b930      	cbnz	r0, 800f3ea <_calloc_r+0x24>
 800f3dc:	4628      	mov	r0, r5
 800f3de:	b003      	add	sp, #12
 800f3e0:	bd30      	pop	{r4, r5, pc}
 800f3e2:	220c      	movs	r2, #12
 800f3e4:	6002      	str	r2, [r0, #0]
 800f3e6:	2500      	movs	r5, #0
 800f3e8:	e7f8      	b.n	800f3dc <_calloc_r+0x16>
 800f3ea:	4621      	mov	r1, r4
 800f3ec:	f7fc fb7a 	bl	800bae4 <memset>
 800f3f0:	e7f4      	b.n	800f3dc <_calloc_r+0x16>
	...

0800f3f4 <_free_r>:
 800f3f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f3f6:	2900      	cmp	r1, #0
 800f3f8:	d044      	beq.n	800f484 <_free_r+0x90>
 800f3fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f3fe:	9001      	str	r0, [sp, #4]
 800f400:	2b00      	cmp	r3, #0
 800f402:	f1a1 0404 	sub.w	r4, r1, #4
 800f406:	bfb8      	it	lt
 800f408:	18e4      	addlt	r4, r4, r3
 800f40a:	f000 fab5 	bl	800f978 <__malloc_lock>
 800f40e:	4a1e      	ldr	r2, [pc, #120]	; (800f488 <_free_r+0x94>)
 800f410:	9801      	ldr	r0, [sp, #4]
 800f412:	6813      	ldr	r3, [r2, #0]
 800f414:	b933      	cbnz	r3, 800f424 <_free_r+0x30>
 800f416:	6063      	str	r3, [r4, #4]
 800f418:	6014      	str	r4, [r2, #0]
 800f41a:	b003      	add	sp, #12
 800f41c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f420:	f000 bab0 	b.w	800f984 <__malloc_unlock>
 800f424:	42a3      	cmp	r3, r4
 800f426:	d908      	bls.n	800f43a <_free_r+0x46>
 800f428:	6825      	ldr	r5, [r4, #0]
 800f42a:	1961      	adds	r1, r4, r5
 800f42c:	428b      	cmp	r3, r1
 800f42e:	bf01      	itttt	eq
 800f430:	6819      	ldreq	r1, [r3, #0]
 800f432:	685b      	ldreq	r3, [r3, #4]
 800f434:	1949      	addeq	r1, r1, r5
 800f436:	6021      	streq	r1, [r4, #0]
 800f438:	e7ed      	b.n	800f416 <_free_r+0x22>
 800f43a:	461a      	mov	r2, r3
 800f43c:	685b      	ldr	r3, [r3, #4]
 800f43e:	b10b      	cbz	r3, 800f444 <_free_r+0x50>
 800f440:	42a3      	cmp	r3, r4
 800f442:	d9fa      	bls.n	800f43a <_free_r+0x46>
 800f444:	6811      	ldr	r1, [r2, #0]
 800f446:	1855      	adds	r5, r2, r1
 800f448:	42a5      	cmp	r5, r4
 800f44a:	d10b      	bne.n	800f464 <_free_r+0x70>
 800f44c:	6824      	ldr	r4, [r4, #0]
 800f44e:	4421      	add	r1, r4
 800f450:	1854      	adds	r4, r2, r1
 800f452:	42a3      	cmp	r3, r4
 800f454:	6011      	str	r1, [r2, #0]
 800f456:	d1e0      	bne.n	800f41a <_free_r+0x26>
 800f458:	681c      	ldr	r4, [r3, #0]
 800f45a:	685b      	ldr	r3, [r3, #4]
 800f45c:	6053      	str	r3, [r2, #4]
 800f45e:	4421      	add	r1, r4
 800f460:	6011      	str	r1, [r2, #0]
 800f462:	e7da      	b.n	800f41a <_free_r+0x26>
 800f464:	d902      	bls.n	800f46c <_free_r+0x78>
 800f466:	230c      	movs	r3, #12
 800f468:	6003      	str	r3, [r0, #0]
 800f46a:	e7d6      	b.n	800f41a <_free_r+0x26>
 800f46c:	6825      	ldr	r5, [r4, #0]
 800f46e:	1961      	adds	r1, r4, r5
 800f470:	428b      	cmp	r3, r1
 800f472:	bf04      	itt	eq
 800f474:	6819      	ldreq	r1, [r3, #0]
 800f476:	685b      	ldreq	r3, [r3, #4]
 800f478:	6063      	str	r3, [r4, #4]
 800f47a:	bf04      	itt	eq
 800f47c:	1949      	addeq	r1, r1, r5
 800f47e:	6021      	streq	r1, [r4, #0]
 800f480:	6054      	str	r4, [r2, #4]
 800f482:	e7ca      	b.n	800f41a <_free_r+0x26>
 800f484:	b003      	add	sp, #12
 800f486:	bd30      	pop	{r4, r5, pc}
 800f488:	2000208c 	.word	0x2000208c

0800f48c <sbrk_aligned>:
 800f48c:	b570      	push	{r4, r5, r6, lr}
 800f48e:	4e0e      	ldr	r6, [pc, #56]	; (800f4c8 <sbrk_aligned+0x3c>)
 800f490:	460c      	mov	r4, r1
 800f492:	6831      	ldr	r1, [r6, #0]
 800f494:	4605      	mov	r5, r0
 800f496:	b911      	cbnz	r1, 800f49e <sbrk_aligned+0x12>
 800f498:	f000 f9f2 	bl	800f880 <_sbrk_r>
 800f49c:	6030      	str	r0, [r6, #0]
 800f49e:	4621      	mov	r1, r4
 800f4a0:	4628      	mov	r0, r5
 800f4a2:	f000 f9ed 	bl	800f880 <_sbrk_r>
 800f4a6:	1c43      	adds	r3, r0, #1
 800f4a8:	d00a      	beq.n	800f4c0 <sbrk_aligned+0x34>
 800f4aa:	1cc4      	adds	r4, r0, #3
 800f4ac:	f024 0403 	bic.w	r4, r4, #3
 800f4b0:	42a0      	cmp	r0, r4
 800f4b2:	d007      	beq.n	800f4c4 <sbrk_aligned+0x38>
 800f4b4:	1a21      	subs	r1, r4, r0
 800f4b6:	4628      	mov	r0, r5
 800f4b8:	f000 f9e2 	bl	800f880 <_sbrk_r>
 800f4bc:	3001      	adds	r0, #1
 800f4be:	d101      	bne.n	800f4c4 <sbrk_aligned+0x38>
 800f4c0:	f04f 34ff 	mov.w	r4, #4294967295
 800f4c4:	4620      	mov	r0, r4
 800f4c6:	bd70      	pop	{r4, r5, r6, pc}
 800f4c8:	20002090 	.word	0x20002090

0800f4cc <_malloc_r>:
 800f4cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4d0:	1ccd      	adds	r5, r1, #3
 800f4d2:	f025 0503 	bic.w	r5, r5, #3
 800f4d6:	3508      	adds	r5, #8
 800f4d8:	2d0c      	cmp	r5, #12
 800f4da:	bf38      	it	cc
 800f4dc:	250c      	movcc	r5, #12
 800f4de:	2d00      	cmp	r5, #0
 800f4e0:	4607      	mov	r7, r0
 800f4e2:	db01      	blt.n	800f4e8 <_malloc_r+0x1c>
 800f4e4:	42a9      	cmp	r1, r5
 800f4e6:	d905      	bls.n	800f4f4 <_malloc_r+0x28>
 800f4e8:	230c      	movs	r3, #12
 800f4ea:	603b      	str	r3, [r7, #0]
 800f4ec:	2600      	movs	r6, #0
 800f4ee:	4630      	mov	r0, r6
 800f4f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4f4:	4e2e      	ldr	r6, [pc, #184]	; (800f5b0 <_malloc_r+0xe4>)
 800f4f6:	f000 fa3f 	bl	800f978 <__malloc_lock>
 800f4fa:	6833      	ldr	r3, [r6, #0]
 800f4fc:	461c      	mov	r4, r3
 800f4fe:	bb34      	cbnz	r4, 800f54e <_malloc_r+0x82>
 800f500:	4629      	mov	r1, r5
 800f502:	4638      	mov	r0, r7
 800f504:	f7ff ffc2 	bl	800f48c <sbrk_aligned>
 800f508:	1c43      	adds	r3, r0, #1
 800f50a:	4604      	mov	r4, r0
 800f50c:	d14d      	bne.n	800f5aa <_malloc_r+0xde>
 800f50e:	6834      	ldr	r4, [r6, #0]
 800f510:	4626      	mov	r6, r4
 800f512:	2e00      	cmp	r6, #0
 800f514:	d140      	bne.n	800f598 <_malloc_r+0xcc>
 800f516:	6823      	ldr	r3, [r4, #0]
 800f518:	4631      	mov	r1, r6
 800f51a:	4638      	mov	r0, r7
 800f51c:	eb04 0803 	add.w	r8, r4, r3
 800f520:	f000 f9ae 	bl	800f880 <_sbrk_r>
 800f524:	4580      	cmp	r8, r0
 800f526:	d13a      	bne.n	800f59e <_malloc_r+0xd2>
 800f528:	6821      	ldr	r1, [r4, #0]
 800f52a:	3503      	adds	r5, #3
 800f52c:	1a6d      	subs	r5, r5, r1
 800f52e:	f025 0503 	bic.w	r5, r5, #3
 800f532:	3508      	adds	r5, #8
 800f534:	2d0c      	cmp	r5, #12
 800f536:	bf38      	it	cc
 800f538:	250c      	movcc	r5, #12
 800f53a:	4629      	mov	r1, r5
 800f53c:	4638      	mov	r0, r7
 800f53e:	f7ff ffa5 	bl	800f48c <sbrk_aligned>
 800f542:	3001      	adds	r0, #1
 800f544:	d02b      	beq.n	800f59e <_malloc_r+0xd2>
 800f546:	6823      	ldr	r3, [r4, #0]
 800f548:	442b      	add	r3, r5
 800f54a:	6023      	str	r3, [r4, #0]
 800f54c:	e00e      	b.n	800f56c <_malloc_r+0xa0>
 800f54e:	6822      	ldr	r2, [r4, #0]
 800f550:	1b52      	subs	r2, r2, r5
 800f552:	d41e      	bmi.n	800f592 <_malloc_r+0xc6>
 800f554:	2a0b      	cmp	r2, #11
 800f556:	d916      	bls.n	800f586 <_malloc_r+0xba>
 800f558:	1961      	adds	r1, r4, r5
 800f55a:	42a3      	cmp	r3, r4
 800f55c:	6025      	str	r5, [r4, #0]
 800f55e:	bf18      	it	ne
 800f560:	6059      	strne	r1, [r3, #4]
 800f562:	6863      	ldr	r3, [r4, #4]
 800f564:	bf08      	it	eq
 800f566:	6031      	streq	r1, [r6, #0]
 800f568:	5162      	str	r2, [r4, r5]
 800f56a:	604b      	str	r3, [r1, #4]
 800f56c:	4638      	mov	r0, r7
 800f56e:	f104 060b 	add.w	r6, r4, #11
 800f572:	f000 fa07 	bl	800f984 <__malloc_unlock>
 800f576:	f026 0607 	bic.w	r6, r6, #7
 800f57a:	1d23      	adds	r3, r4, #4
 800f57c:	1af2      	subs	r2, r6, r3
 800f57e:	d0b6      	beq.n	800f4ee <_malloc_r+0x22>
 800f580:	1b9b      	subs	r3, r3, r6
 800f582:	50a3      	str	r3, [r4, r2]
 800f584:	e7b3      	b.n	800f4ee <_malloc_r+0x22>
 800f586:	6862      	ldr	r2, [r4, #4]
 800f588:	42a3      	cmp	r3, r4
 800f58a:	bf0c      	ite	eq
 800f58c:	6032      	streq	r2, [r6, #0]
 800f58e:	605a      	strne	r2, [r3, #4]
 800f590:	e7ec      	b.n	800f56c <_malloc_r+0xa0>
 800f592:	4623      	mov	r3, r4
 800f594:	6864      	ldr	r4, [r4, #4]
 800f596:	e7b2      	b.n	800f4fe <_malloc_r+0x32>
 800f598:	4634      	mov	r4, r6
 800f59a:	6876      	ldr	r6, [r6, #4]
 800f59c:	e7b9      	b.n	800f512 <_malloc_r+0x46>
 800f59e:	230c      	movs	r3, #12
 800f5a0:	603b      	str	r3, [r7, #0]
 800f5a2:	4638      	mov	r0, r7
 800f5a4:	f000 f9ee 	bl	800f984 <__malloc_unlock>
 800f5a8:	e7a1      	b.n	800f4ee <_malloc_r+0x22>
 800f5aa:	6025      	str	r5, [r4, #0]
 800f5ac:	e7de      	b.n	800f56c <_malloc_r+0xa0>
 800f5ae:	bf00      	nop
 800f5b0:	2000208c 	.word	0x2000208c

0800f5b4 <__ssputs_r>:
 800f5b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5b8:	688e      	ldr	r6, [r1, #8]
 800f5ba:	429e      	cmp	r6, r3
 800f5bc:	4682      	mov	sl, r0
 800f5be:	460c      	mov	r4, r1
 800f5c0:	4690      	mov	r8, r2
 800f5c2:	461f      	mov	r7, r3
 800f5c4:	d838      	bhi.n	800f638 <__ssputs_r+0x84>
 800f5c6:	898a      	ldrh	r2, [r1, #12]
 800f5c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f5cc:	d032      	beq.n	800f634 <__ssputs_r+0x80>
 800f5ce:	6825      	ldr	r5, [r4, #0]
 800f5d0:	6909      	ldr	r1, [r1, #16]
 800f5d2:	eba5 0901 	sub.w	r9, r5, r1
 800f5d6:	6965      	ldr	r5, [r4, #20]
 800f5d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f5dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f5e0:	3301      	adds	r3, #1
 800f5e2:	444b      	add	r3, r9
 800f5e4:	106d      	asrs	r5, r5, #1
 800f5e6:	429d      	cmp	r5, r3
 800f5e8:	bf38      	it	cc
 800f5ea:	461d      	movcc	r5, r3
 800f5ec:	0553      	lsls	r3, r2, #21
 800f5ee:	d531      	bpl.n	800f654 <__ssputs_r+0xa0>
 800f5f0:	4629      	mov	r1, r5
 800f5f2:	f7ff ff6b 	bl	800f4cc <_malloc_r>
 800f5f6:	4606      	mov	r6, r0
 800f5f8:	b950      	cbnz	r0, 800f610 <__ssputs_r+0x5c>
 800f5fa:	230c      	movs	r3, #12
 800f5fc:	f8ca 3000 	str.w	r3, [sl]
 800f600:	89a3      	ldrh	r3, [r4, #12]
 800f602:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f606:	81a3      	strh	r3, [r4, #12]
 800f608:	f04f 30ff 	mov.w	r0, #4294967295
 800f60c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f610:	6921      	ldr	r1, [r4, #16]
 800f612:	464a      	mov	r2, r9
 800f614:	f7ff fa08 	bl	800ea28 <memcpy>
 800f618:	89a3      	ldrh	r3, [r4, #12]
 800f61a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f61e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f622:	81a3      	strh	r3, [r4, #12]
 800f624:	6126      	str	r6, [r4, #16]
 800f626:	6165      	str	r5, [r4, #20]
 800f628:	444e      	add	r6, r9
 800f62a:	eba5 0509 	sub.w	r5, r5, r9
 800f62e:	6026      	str	r6, [r4, #0]
 800f630:	60a5      	str	r5, [r4, #8]
 800f632:	463e      	mov	r6, r7
 800f634:	42be      	cmp	r6, r7
 800f636:	d900      	bls.n	800f63a <__ssputs_r+0x86>
 800f638:	463e      	mov	r6, r7
 800f63a:	6820      	ldr	r0, [r4, #0]
 800f63c:	4632      	mov	r2, r6
 800f63e:	4641      	mov	r1, r8
 800f640:	f000 f980 	bl	800f944 <memmove>
 800f644:	68a3      	ldr	r3, [r4, #8]
 800f646:	1b9b      	subs	r3, r3, r6
 800f648:	60a3      	str	r3, [r4, #8]
 800f64a:	6823      	ldr	r3, [r4, #0]
 800f64c:	4433      	add	r3, r6
 800f64e:	6023      	str	r3, [r4, #0]
 800f650:	2000      	movs	r0, #0
 800f652:	e7db      	b.n	800f60c <__ssputs_r+0x58>
 800f654:	462a      	mov	r2, r5
 800f656:	f000 f99b 	bl	800f990 <_realloc_r>
 800f65a:	4606      	mov	r6, r0
 800f65c:	2800      	cmp	r0, #0
 800f65e:	d1e1      	bne.n	800f624 <__ssputs_r+0x70>
 800f660:	6921      	ldr	r1, [r4, #16]
 800f662:	4650      	mov	r0, sl
 800f664:	f7ff fec6 	bl	800f3f4 <_free_r>
 800f668:	e7c7      	b.n	800f5fa <__ssputs_r+0x46>
	...

0800f66c <_svfiprintf_r>:
 800f66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f670:	4698      	mov	r8, r3
 800f672:	898b      	ldrh	r3, [r1, #12]
 800f674:	061b      	lsls	r3, r3, #24
 800f676:	b09d      	sub	sp, #116	; 0x74
 800f678:	4607      	mov	r7, r0
 800f67a:	460d      	mov	r5, r1
 800f67c:	4614      	mov	r4, r2
 800f67e:	d50e      	bpl.n	800f69e <_svfiprintf_r+0x32>
 800f680:	690b      	ldr	r3, [r1, #16]
 800f682:	b963      	cbnz	r3, 800f69e <_svfiprintf_r+0x32>
 800f684:	2140      	movs	r1, #64	; 0x40
 800f686:	f7ff ff21 	bl	800f4cc <_malloc_r>
 800f68a:	6028      	str	r0, [r5, #0]
 800f68c:	6128      	str	r0, [r5, #16]
 800f68e:	b920      	cbnz	r0, 800f69a <_svfiprintf_r+0x2e>
 800f690:	230c      	movs	r3, #12
 800f692:	603b      	str	r3, [r7, #0]
 800f694:	f04f 30ff 	mov.w	r0, #4294967295
 800f698:	e0d1      	b.n	800f83e <_svfiprintf_r+0x1d2>
 800f69a:	2340      	movs	r3, #64	; 0x40
 800f69c:	616b      	str	r3, [r5, #20]
 800f69e:	2300      	movs	r3, #0
 800f6a0:	9309      	str	r3, [sp, #36]	; 0x24
 800f6a2:	2320      	movs	r3, #32
 800f6a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f6a8:	f8cd 800c 	str.w	r8, [sp, #12]
 800f6ac:	2330      	movs	r3, #48	; 0x30
 800f6ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f858 <_svfiprintf_r+0x1ec>
 800f6b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f6b6:	f04f 0901 	mov.w	r9, #1
 800f6ba:	4623      	mov	r3, r4
 800f6bc:	469a      	mov	sl, r3
 800f6be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f6c2:	b10a      	cbz	r2, 800f6c8 <_svfiprintf_r+0x5c>
 800f6c4:	2a25      	cmp	r2, #37	; 0x25
 800f6c6:	d1f9      	bne.n	800f6bc <_svfiprintf_r+0x50>
 800f6c8:	ebba 0b04 	subs.w	fp, sl, r4
 800f6cc:	d00b      	beq.n	800f6e6 <_svfiprintf_r+0x7a>
 800f6ce:	465b      	mov	r3, fp
 800f6d0:	4622      	mov	r2, r4
 800f6d2:	4629      	mov	r1, r5
 800f6d4:	4638      	mov	r0, r7
 800f6d6:	f7ff ff6d 	bl	800f5b4 <__ssputs_r>
 800f6da:	3001      	adds	r0, #1
 800f6dc:	f000 80aa 	beq.w	800f834 <_svfiprintf_r+0x1c8>
 800f6e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f6e2:	445a      	add	r2, fp
 800f6e4:	9209      	str	r2, [sp, #36]	; 0x24
 800f6e6:	f89a 3000 	ldrb.w	r3, [sl]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	f000 80a2 	beq.w	800f834 <_svfiprintf_r+0x1c8>
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	f04f 32ff 	mov.w	r2, #4294967295
 800f6f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f6fa:	f10a 0a01 	add.w	sl, sl, #1
 800f6fe:	9304      	str	r3, [sp, #16]
 800f700:	9307      	str	r3, [sp, #28]
 800f702:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f706:	931a      	str	r3, [sp, #104]	; 0x68
 800f708:	4654      	mov	r4, sl
 800f70a:	2205      	movs	r2, #5
 800f70c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f710:	4851      	ldr	r0, [pc, #324]	; (800f858 <_svfiprintf_r+0x1ec>)
 800f712:	f7f0 fd85 	bl	8000220 <memchr>
 800f716:	9a04      	ldr	r2, [sp, #16]
 800f718:	b9d8      	cbnz	r0, 800f752 <_svfiprintf_r+0xe6>
 800f71a:	06d0      	lsls	r0, r2, #27
 800f71c:	bf44      	itt	mi
 800f71e:	2320      	movmi	r3, #32
 800f720:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f724:	0711      	lsls	r1, r2, #28
 800f726:	bf44      	itt	mi
 800f728:	232b      	movmi	r3, #43	; 0x2b
 800f72a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f72e:	f89a 3000 	ldrb.w	r3, [sl]
 800f732:	2b2a      	cmp	r3, #42	; 0x2a
 800f734:	d015      	beq.n	800f762 <_svfiprintf_r+0xf6>
 800f736:	9a07      	ldr	r2, [sp, #28]
 800f738:	4654      	mov	r4, sl
 800f73a:	2000      	movs	r0, #0
 800f73c:	f04f 0c0a 	mov.w	ip, #10
 800f740:	4621      	mov	r1, r4
 800f742:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f746:	3b30      	subs	r3, #48	; 0x30
 800f748:	2b09      	cmp	r3, #9
 800f74a:	d94e      	bls.n	800f7ea <_svfiprintf_r+0x17e>
 800f74c:	b1b0      	cbz	r0, 800f77c <_svfiprintf_r+0x110>
 800f74e:	9207      	str	r2, [sp, #28]
 800f750:	e014      	b.n	800f77c <_svfiprintf_r+0x110>
 800f752:	eba0 0308 	sub.w	r3, r0, r8
 800f756:	fa09 f303 	lsl.w	r3, r9, r3
 800f75a:	4313      	orrs	r3, r2
 800f75c:	9304      	str	r3, [sp, #16]
 800f75e:	46a2      	mov	sl, r4
 800f760:	e7d2      	b.n	800f708 <_svfiprintf_r+0x9c>
 800f762:	9b03      	ldr	r3, [sp, #12]
 800f764:	1d19      	adds	r1, r3, #4
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	9103      	str	r1, [sp, #12]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	bfbb      	ittet	lt
 800f76e:	425b      	neglt	r3, r3
 800f770:	f042 0202 	orrlt.w	r2, r2, #2
 800f774:	9307      	strge	r3, [sp, #28]
 800f776:	9307      	strlt	r3, [sp, #28]
 800f778:	bfb8      	it	lt
 800f77a:	9204      	strlt	r2, [sp, #16]
 800f77c:	7823      	ldrb	r3, [r4, #0]
 800f77e:	2b2e      	cmp	r3, #46	; 0x2e
 800f780:	d10c      	bne.n	800f79c <_svfiprintf_r+0x130>
 800f782:	7863      	ldrb	r3, [r4, #1]
 800f784:	2b2a      	cmp	r3, #42	; 0x2a
 800f786:	d135      	bne.n	800f7f4 <_svfiprintf_r+0x188>
 800f788:	9b03      	ldr	r3, [sp, #12]
 800f78a:	1d1a      	adds	r2, r3, #4
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	9203      	str	r2, [sp, #12]
 800f790:	2b00      	cmp	r3, #0
 800f792:	bfb8      	it	lt
 800f794:	f04f 33ff 	movlt.w	r3, #4294967295
 800f798:	3402      	adds	r4, #2
 800f79a:	9305      	str	r3, [sp, #20]
 800f79c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f868 <_svfiprintf_r+0x1fc>
 800f7a0:	7821      	ldrb	r1, [r4, #0]
 800f7a2:	2203      	movs	r2, #3
 800f7a4:	4650      	mov	r0, sl
 800f7a6:	f7f0 fd3b 	bl	8000220 <memchr>
 800f7aa:	b140      	cbz	r0, 800f7be <_svfiprintf_r+0x152>
 800f7ac:	2340      	movs	r3, #64	; 0x40
 800f7ae:	eba0 000a 	sub.w	r0, r0, sl
 800f7b2:	fa03 f000 	lsl.w	r0, r3, r0
 800f7b6:	9b04      	ldr	r3, [sp, #16]
 800f7b8:	4303      	orrs	r3, r0
 800f7ba:	3401      	adds	r4, #1
 800f7bc:	9304      	str	r3, [sp, #16]
 800f7be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7c2:	4826      	ldr	r0, [pc, #152]	; (800f85c <_svfiprintf_r+0x1f0>)
 800f7c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f7c8:	2206      	movs	r2, #6
 800f7ca:	f7f0 fd29 	bl	8000220 <memchr>
 800f7ce:	2800      	cmp	r0, #0
 800f7d0:	d038      	beq.n	800f844 <_svfiprintf_r+0x1d8>
 800f7d2:	4b23      	ldr	r3, [pc, #140]	; (800f860 <_svfiprintf_r+0x1f4>)
 800f7d4:	bb1b      	cbnz	r3, 800f81e <_svfiprintf_r+0x1b2>
 800f7d6:	9b03      	ldr	r3, [sp, #12]
 800f7d8:	3307      	adds	r3, #7
 800f7da:	f023 0307 	bic.w	r3, r3, #7
 800f7de:	3308      	adds	r3, #8
 800f7e0:	9303      	str	r3, [sp, #12]
 800f7e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7e4:	4433      	add	r3, r6
 800f7e6:	9309      	str	r3, [sp, #36]	; 0x24
 800f7e8:	e767      	b.n	800f6ba <_svfiprintf_r+0x4e>
 800f7ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800f7ee:	460c      	mov	r4, r1
 800f7f0:	2001      	movs	r0, #1
 800f7f2:	e7a5      	b.n	800f740 <_svfiprintf_r+0xd4>
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	3401      	adds	r4, #1
 800f7f8:	9305      	str	r3, [sp, #20]
 800f7fa:	4619      	mov	r1, r3
 800f7fc:	f04f 0c0a 	mov.w	ip, #10
 800f800:	4620      	mov	r0, r4
 800f802:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f806:	3a30      	subs	r2, #48	; 0x30
 800f808:	2a09      	cmp	r2, #9
 800f80a:	d903      	bls.n	800f814 <_svfiprintf_r+0x1a8>
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d0c5      	beq.n	800f79c <_svfiprintf_r+0x130>
 800f810:	9105      	str	r1, [sp, #20]
 800f812:	e7c3      	b.n	800f79c <_svfiprintf_r+0x130>
 800f814:	fb0c 2101 	mla	r1, ip, r1, r2
 800f818:	4604      	mov	r4, r0
 800f81a:	2301      	movs	r3, #1
 800f81c:	e7f0      	b.n	800f800 <_svfiprintf_r+0x194>
 800f81e:	ab03      	add	r3, sp, #12
 800f820:	9300      	str	r3, [sp, #0]
 800f822:	462a      	mov	r2, r5
 800f824:	4b0f      	ldr	r3, [pc, #60]	; (800f864 <_svfiprintf_r+0x1f8>)
 800f826:	a904      	add	r1, sp, #16
 800f828:	4638      	mov	r0, r7
 800f82a:	f7fc fa03 	bl	800bc34 <_printf_float>
 800f82e:	1c42      	adds	r2, r0, #1
 800f830:	4606      	mov	r6, r0
 800f832:	d1d6      	bne.n	800f7e2 <_svfiprintf_r+0x176>
 800f834:	89ab      	ldrh	r3, [r5, #12]
 800f836:	065b      	lsls	r3, r3, #25
 800f838:	f53f af2c 	bmi.w	800f694 <_svfiprintf_r+0x28>
 800f83c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f83e:	b01d      	add	sp, #116	; 0x74
 800f840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f844:	ab03      	add	r3, sp, #12
 800f846:	9300      	str	r3, [sp, #0]
 800f848:	462a      	mov	r2, r5
 800f84a:	4b06      	ldr	r3, [pc, #24]	; (800f864 <_svfiprintf_r+0x1f8>)
 800f84c:	a904      	add	r1, sp, #16
 800f84e:	4638      	mov	r0, r7
 800f850:	f7fc fc94 	bl	800c17c <_printf_i>
 800f854:	e7eb      	b.n	800f82e <_svfiprintf_r+0x1c2>
 800f856:	bf00      	nop
 800f858:	080108fc 	.word	0x080108fc
 800f85c:	08010906 	.word	0x08010906
 800f860:	0800bc35 	.word	0x0800bc35
 800f864:	0800f5b5 	.word	0x0800f5b5
 800f868:	08010902 	.word	0x08010902
 800f86c:	00000000 	.word	0x00000000

0800f870 <nan>:
 800f870:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f878 <nan+0x8>
 800f874:	4770      	bx	lr
 800f876:	bf00      	nop
 800f878:	00000000 	.word	0x00000000
 800f87c:	7ff80000 	.word	0x7ff80000

0800f880 <_sbrk_r>:
 800f880:	b538      	push	{r3, r4, r5, lr}
 800f882:	4d06      	ldr	r5, [pc, #24]	; (800f89c <_sbrk_r+0x1c>)
 800f884:	2300      	movs	r3, #0
 800f886:	4604      	mov	r4, r0
 800f888:	4608      	mov	r0, r1
 800f88a:	602b      	str	r3, [r5, #0]
 800f88c:	f7f2 f8a4 	bl	80019d8 <_sbrk>
 800f890:	1c43      	adds	r3, r0, #1
 800f892:	d102      	bne.n	800f89a <_sbrk_r+0x1a>
 800f894:	682b      	ldr	r3, [r5, #0]
 800f896:	b103      	cbz	r3, 800f89a <_sbrk_r+0x1a>
 800f898:	6023      	str	r3, [r4, #0]
 800f89a:	bd38      	pop	{r3, r4, r5, pc}
 800f89c:	20002094 	.word	0x20002094

0800f8a0 <strncmp>:
 800f8a0:	b510      	push	{r4, lr}
 800f8a2:	b17a      	cbz	r2, 800f8c4 <strncmp+0x24>
 800f8a4:	4603      	mov	r3, r0
 800f8a6:	3901      	subs	r1, #1
 800f8a8:	1884      	adds	r4, r0, r2
 800f8aa:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f8ae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f8b2:	4290      	cmp	r0, r2
 800f8b4:	d101      	bne.n	800f8ba <strncmp+0x1a>
 800f8b6:	42a3      	cmp	r3, r4
 800f8b8:	d101      	bne.n	800f8be <strncmp+0x1e>
 800f8ba:	1a80      	subs	r0, r0, r2
 800f8bc:	bd10      	pop	{r4, pc}
 800f8be:	2800      	cmp	r0, #0
 800f8c0:	d1f3      	bne.n	800f8aa <strncmp+0xa>
 800f8c2:	e7fa      	b.n	800f8ba <strncmp+0x1a>
 800f8c4:	4610      	mov	r0, r2
 800f8c6:	e7f9      	b.n	800f8bc <strncmp+0x1c>

0800f8c8 <__ascii_wctomb>:
 800f8c8:	b149      	cbz	r1, 800f8de <__ascii_wctomb+0x16>
 800f8ca:	2aff      	cmp	r2, #255	; 0xff
 800f8cc:	bf85      	ittet	hi
 800f8ce:	238a      	movhi	r3, #138	; 0x8a
 800f8d0:	6003      	strhi	r3, [r0, #0]
 800f8d2:	700a      	strbls	r2, [r1, #0]
 800f8d4:	f04f 30ff 	movhi.w	r0, #4294967295
 800f8d8:	bf98      	it	ls
 800f8da:	2001      	movls	r0, #1
 800f8dc:	4770      	bx	lr
 800f8de:	4608      	mov	r0, r1
 800f8e0:	4770      	bx	lr
	...

0800f8e4 <__assert_func>:
 800f8e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f8e6:	4614      	mov	r4, r2
 800f8e8:	461a      	mov	r2, r3
 800f8ea:	4b09      	ldr	r3, [pc, #36]	; (800f910 <__assert_func+0x2c>)
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	4605      	mov	r5, r0
 800f8f0:	68d8      	ldr	r0, [r3, #12]
 800f8f2:	b14c      	cbz	r4, 800f908 <__assert_func+0x24>
 800f8f4:	4b07      	ldr	r3, [pc, #28]	; (800f914 <__assert_func+0x30>)
 800f8f6:	9100      	str	r1, [sp, #0]
 800f8f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f8fc:	4906      	ldr	r1, [pc, #24]	; (800f918 <__assert_func+0x34>)
 800f8fe:	462b      	mov	r3, r5
 800f900:	f000 f80e 	bl	800f920 <fiprintf>
 800f904:	f000 fa8c 	bl	800fe20 <abort>
 800f908:	4b04      	ldr	r3, [pc, #16]	; (800f91c <__assert_func+0x38>)
 800f90a:	461c      	mov	r4, r3
 800f90c:	e7f3      	b.n	800f8f6 <__assert_func+0x12>
 800f90e:	bf00      	nop
 800f910:	2000011c 	.word	0x2000011c
 800f914:	0801090d 	.word	0x0801090d
 800f918:	0801091a 	.word	0x0801091a
 800f91c:	08010948 	.word	0x08010948

0800f920 <fiprintf>:
 800f920:	b40e      	push	{r1, r2, r3}
 800f922:	b503      	push	{r0, r1, lr}
 800f924:	4601      	mov	r1, r0
 800f926:	ab03      	add	r3, sp, #12
 800f928:	4805      	ldr	r0, [pc, #20]	; (800f940 <fiprintf+0x20>)
 800f92a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f92e:	6800      	ldr	r0, [r0, #0]
 800f930:	9301      	str	r3, [sp, #4]
 800f932:	f000 f885 	bl	800fa40 <_vfiprintf_r>
 800f936:	b002      	add	sp, #8
 800f938:	f85d eb04 	ldr.w	lr, [sp], #4
 800f93c:	b003      	add	sp, #12
 800f93e:	4770      	bx	lr
 800f940:	2000011c 	.word	0x2000011c

0800f944 <memmove>:
 800f944:	4288      	cmp	r0, r1
 800f946:	b510      	push	{r4, lr}
 800f948:	eb01 0402 	add.w	r4, r1, r2
 800f94c:	d902      	bls.n	800f954 <memmove+0x10>
 800f94e:	4284      	cmp	r4, r0
 800f950:	4623      	mov	r3, r4
 800f952:	d807      	bhi.n	800f964 <memmove+0x20>
 800f954:	1e43      	subs	r3, r0, #1
 800f956:	42a1      	cmp	r1, r4
 800f958:	d008      	beq.n	800f96c <memmove+0x28>
 800f95a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f95e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f962:	e7f8      	b.n	800f956 <memmove+0x12>
 800f964:	4402      	add	r2, r0
 800f966:	4601      	mov	r1, r0
 800f968:	428a      	cmp	r2, r1
 800f96a:	d100      	bne.n	800f96e <memmove+0x2a>
 800f96c:	bd10      	pop	{r4, pc}
 800f96e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f972:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f976:	e7f7      	b.n	800f968 <memmove+0x24>

0800f978 <__malloc_lock>:
 800f978:	4801      	ldr	r0, [pc, #4]	; (800f980 <__malloc_lock+0x8>)
 800f97a:	f000 bc11 	b.w	80101a0 <__retarget_lock_acquire_recursive>
 800f97e:	bf00      	nop
 800f980:	20002098 	.word	0x20002098

0800f984 <__malloc_unlock>:
 800f984:	4801      	ldr	r0, [pc, #4]	; (800f98c <__malloc_unlock+0x8>)
 800f986:	f000 bc0c 	b.w	80101a2 <__retarget_lock_release_recursive>
 800f98a:	bf00      	nop
 800f98c:	20002098 	.word	0x20002098

0800f990 <_realloc_r>:
 800f990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f994:	4680      	mov	r8, r0
 800f996:	4614      	mov	r4, r2
 800f998:	460e      	mov	r6, r1
 800f99a:	b921      	cbnz	r1, 800f9a6 <_realloc_r+0x16>
 800f99c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f9a0:	4611      	mov	r1, r2
 800f9a2:	f7ff bd93 	b.w	800f4cc <_malloc_r>
 800f9a6:	b92a      	cbnz	r2, 800f9b4 <_realloc_r+0x24>
 800f9a8:	f7ff fd24 	bl	800f3f4 <_free_r>
 800f9ac:	4625      	mov	r5, r4
 800f9ae:	4628      	mov	r0, r5
 800f9b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9b4:	f000 fc5c 	bl	8010270 <_malloc_usable_size_r>
 800f9b8:	4284      	cmp	r4, r0
 800f9ba:	4607      	mov	r7, r0
 800f9bc:	d802      	bhi.n	800f9c4 <_realloc_r+0x34>
 800f9be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f9c2:	d812      	bhi.n	800f9ea <_realloc_r+0x5a>
 800f9c4:	4621      	mov	r1, r4
 800f9c6:	4640      	mov	r0, r8
 800f9c8:	f7ff fd80 	bl	800f4cc <_malloc_r>
 800f9cc:	4605      	mov	r5, r0
 800f9ce:	2800      	cmp	r0, #0
 800f9d0:	d0ed      	beq.n	800f9ae <_realloc_r+0x1e>
 800f9d2:	42bc      	cmp	r4, r7
 800f9d4:	4622      	mov	r2, r4
 800f9d6:	4631      	mov	r1, r6
 800f9d8:	bf28      	it	cs
 800f9da:	463a      	movcs	r2, r7
 800f9dc:	f7ff f824 	bl	800ea28 <memcpy>
 800f9e0:	4631      	mov	r1, r6
 800f9e2:	4640      	mov	r0, r8
 800f9e4:	f7ff fd06 	bl	800f3f4 <_free_r>
 800f9e8:	e7e1      	b.n	800f9ae <_realloc_r+0x1e>
 800f9ea:	4635      	mov	r5, r6
 800f9ec:	e7df      	b.n	800f9ae <_realloc_r+0x1e>

0800f9ee <__sfputc_r>:
 800f9ee:	6893      	ldr	r3, [r2, #8]
 800f9f0:	3b01      	subs	r3, #1
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	b410      	push	{r4}
 800f9f6:	6093      	str	r3, [r2, #8]
 800f9f8:	da08      	bge.n	800fa0c <__sfputc_r+0x1e>
 800f9fa:	6994      	ldr	r4, [r2, #24]
 800f9fc:	42a3      	cmp	r3, r4
 800f9fe:	db01      	blt.n	800fa04 <__sfputc_r+0x16>
 800fa00:	290a      	cmp	r1, #10
 800fa02:	d103      	bne.n	800fa0c <__sfputc_r+0x1e>
 800fa04:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa08:	f000 b94a 	b.w	800fca0 <__swbuf_r>
 800fa0c:	6813      	ldr	r3, [r2, #0]
 800fa0e:	1c58      	adds	r0, r3, #1
 800fa10:	6010      	str	r0, [r2, #0]
 800fa12:	7019      	strb	r1, [r3, #0]
 800fa14:	4608      	mov	r0, r1
 800fa16:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa1a:	4770      	bx	lr

0800fa1c <__sfputs_r>:
 800fa1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa1e:	4606      	mov	r6, r0
 800fa20:	460f      	mov	r7, r1
 800fa22:	4614      	mov	r4, r2
 800fa24:	18d5      	adds	r5, r2, r3
 800fa26:	42ac      	cmp	r4, r5
 800fa28:	d101      	bne.n	800fa2e <__sfputs_r+0x12>
 800fa2a:	2000      	movs	r0, #0
 800fa2c:	e007      	b.n	800fa3e <__sfputs_r+0x22>
 800fa2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa32:	463a      	mov	r2, r7
 800fa34:	4630      	mov	r0, r6
 800fa36:	f7ff ffda 	bl	800f9ee <__sfputc_r>
 800fa3a:	1c43      	adds	r3, r0, #1
 800fa3c:	d1f3      	bne.n	800fa26 <__sfputs_r+0xa>
 800fa3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fa40 <_vfiprintf_r>:
 800fa40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa44:	460d      	mov	r5, r1
 800fa46:	b09d      	sub	sp, #116	; 0x74
 800fa48:	4614      	mov	r4, r2
 800fa4a:	4698      	mov	r8, r3
 800fa4c:	4606      	mov	r6, r0
 800fa4e:	b118      	cbz	r0, 800fa58 <_vfiprintf_r+0x18>
 800fa50:	6983      	ldr	r3, [r0, #24]
 800fa52:	b90b      	cbnz	r3, 800fa58 <_vfiprintf_r+0x18>
 800fa54:	f000 fb06 	bl	8010064 <__sinit>
 800fa58:	4b89      	ldr	r3, [pc, #548]	; (800fc80 <_vfiprintf_r+0x240>)
 800fa5a:	429d      	cmp	r5, r3
 800fa5c:	d11b      	bne.n	800fa96 <_vfiprintf_r+0x56>
 800fa5e:	6875      	ldr	r5, [r6, #4]
 800fa60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fa62:	07d9      	lsls	r1, r3, #31
 800fa64:	d405      	bmi.n	800fa72 <_vfiprintf_r+0x32>
 800fa66:	89ab      	ldrh	r3, [r5, #12]
 800fa68:	059a      	lsls	r2, r3, #22
 800fa6a:	d402      	bmi.n	800fa72 <_vfiprintf_r+0x32>
 800fa6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fa6e:	f000 fb97 	bl	80101a0 <__retarget_lock_acquire_recursive>
 800fa72:	89ab      	ldrh	r3, [r5, #12]
 800fa74:	071b      	lsls	r3, r3, #28
 800fa76:	d501      	bpl.n	800fa7c <_vfiprintf_r+0x3c>
 800fa78:	692b      	ldr	r3, [r5, #16]
 800fa7a:	b9eb      	cbnz	r3, 800fab8 <_vfiprintf_r+0x78>
 800fa7c:	4629      	mov	r1, r5
 800fa7e:	4630      	mov	r0, r6
 800fa80:	f000 f960 	bl	800fd44 <__swsetup_r>
 800fa84:	b1c0      	cbz	r0, 800fab8 <_vfiprintf_r+0x78>
 800fa86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fa88:	07dc      	lsls	r4, r3, #31
 800fa8a:	d50e      	bpl.n	800faaa <_vfiprintf_r+0x6a>
 800fa8c:	f04f 30ff 	mov.w	r0, #4294967295
 800fa90:	b01d      	add	sp, #116	; 0x74
 800fa92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa96:	4b7b      	ldr	r3, [pc, #492]	; (800fc84 <_vfiprintf_r+0x244>)
 800fa98:	429d      	cmp	r5, r3
 800fa9a:	d101      	bne.n	800faa0 <_vfiprintf_r+0x60>
 800fa9c:	68b5      	ldr	r5, [r6, #8]
 800fa9e:	e7df      	b.n	800fa60 <_vfiprintf_r+0x20>
 800faa0:	4b79      	ldr	r3, [pc, #484]	; (800fc88 <_vfiprintf_r+0x248>)
 800faa2:	429d      	cmp	r5, r3
 800faa4:	bf08      	it	eq
 800faa6:	68f5      	ldreq	r5, [r6, #12]
 800faa8:	e7da      	b.n	800fa60 <_vfiprintf_r+0x20>
 800faaa:	89ab      	ldrh	r3, [r5, #12]
 800faac:	0598      	lsls	r0, r3, #22
 800faae:	d4ed      	bmi.n	800fa8c <_vfiprintf_r+0x4c>
 800fab0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fab2:	f000 fb76 	bl	80101a2 <__retarget_lock_release_recursive>
 800fab6:	e7e9      	b.n	800fa8c <_vfiprintf_r+0x4c>
 800fab8:	2300      	movs	r3, #0
 800faba:	9309      	str	r3, [sp, #36]	; 0x24
 800fabc:	2320      	movs	r3, #32
 800fabe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fac2:	f8cd 800c 	str.w	r8, [sp, #12]
 800fac6:	2330      	movs	r3, #48	; 0x30
 800fac8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fc8c <_vfiprintf_r+0x24c>
 800facc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fad0:	f04f 0901 	mov.w	r9, #1
 800fad4:	4623      	mov	r3, r4
 800fad6:	469a      	mov	sl, r3
 800fad8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fadc:	b10a      	cbz	r2, 800fae2 <_vfiprintf_r+0xa2>
 800fade:	2a25      	cmp	r2, #37	; 0x25
 800fae0:	d1f9      	bne.n	800fad6 <_vfiprintf_r+0x96>
 800fae2:	ebba 0b04 	subs.w	fp, sl, r4
 800fae6:	d00b      	beq.n	800fb00 <_vfiprintf_r+0xc0>
 800fae8:	465b      	mov	r3, fp
 800faea:	4622      	mov	r2, r4
 800faec:	4629      	mov	r1, r5
 800faee:	4630      	mov	r0, r6
 800faf0:	f7ff ff94 	bl	800fa1c <__sfputs_r>
 800faf4:	3001      	adds	r0, #1
 800faf6:	f000 80aa 	beq.w	800fc4e <_vfiprintf_r+0x20e>
 800fafa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fafc:	445a      	add	r2, fp
 800fafe:	9209      	str	r2, [sp, #36]	; 0x24
 800fb00:	f89a 3000 	ldrb.w	r3, [sl]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	f000 80a2 	beq.w	800fc4e <_vfiprintf_r+0x20e>
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	f04f 32ff 	mov.w	r2, #4294967295
 800fb10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fb14:	f10a 0a01 	add.w	sl, sl, #1
 800fb18:	9304      	str	r3, [sp, #16]
 800fb1a:	9307      	str	r3, [sp, #28]
 800fb1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fb20:	931a      	str	r3, [sp, #104]	; 0x68
 800fb22:	4654      	mov	r4, sl
 800fb24:	2205      	movs	r2, #5
 800fb26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb2a:	4858      	ldr	r0, [pc, #352]	; (800fc8c <_vfiprintf_r+0x24c>)
 800fb2c:	f7f0 fb78 	bl	8000220 <memchr>
 800fb30:	9a04      	ldr	r2, [sp, #16]
 800fb32:	b9d8      	cbnz	r0, 800fb6c <_vfiprintf_r+0x12c>
 800fb34:	06d1      	lsls	r1, r2, #27
 800fb36:	bf44      	itt	mi
 800fb38:	2320      	movmi	r3, #32
 800fb3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb3e:	0713      	lsls	r3, r2, #28
 800fb40:	bf44      	itt	mi
 800fb42:	232b      	movmi	r3, #43	; 0x2b
 800fb44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb48:	f89a 3000 	ldrb.w	r3, [sl]
 800fb4c:	2b2a      	cmp	r3, #42	; 0x2a
 800fb4e:	d015      	beq.n	800fb7c <_vfiprintf_r+0x13c>
 800fb50:	9a07      	ldr	r2, [sp, #28]
 800fb52:	4654      	mov	r4, sl
 800fb54:	2000      	movs	r0, #0
 800fb56:	f04f 0c0a 	mov.w	ip, #10
 800fb5a:	4621      	mov	r1, r4
 800fb5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fb60:	3b30      	subs	r3, #48	; 0x30
 800fb62:	2b09      	cmp	r3, #9
 800fb64:	d94e      	bls.n	800fc04 <_vfiprintf_r+0x1c4>
 800fb66:	b1b0      	cbz	r0, 800fb96 <_vfiprintf_r+0x156>
 800fb68:	9207      	str	r2, [sp, #28]
 800fb6a:	e014      	b.n	800fb96 <_vfiprintf_r+0x156>
 800fb6c:	eba0 0308 	sub.w	r3, r0, r8
 800fb70:	fa09 f303 	lsl.w	r3, r9, r3
 800fb74:	4313      	orrs	r3, r2
 800fb76:	9304      	str	r3, [sp, #16]
 800fb78:	46a2      	mov	sl, r4
 800fb7a:	e7d2      	b.n	800fb22 <_vfiprintf_r+0xe2>
 800fb7c:	9b03      	ldr	r3, [sp, #12]
 800fb7e:	1d19      	adds	r1, r3, #4
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	9103      	str	r1, [sp, #12]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	bfbb      	ittet	lt
 800fb88:	425b      	neglt	r3, r3
 800fb8a:	f042 0202 	orrlt.w	r2, r2, #2
 800fb8e:	9307      	strge	r3, [sp, #28]
 800fb90:	9307      	strlt	r3, [sp, #28]
 800fb92:	bfb8      	it	lt
 800fb94:	9204      	strlt	r2, [sp, #16]
 800fb96:	7823      	ldrb	r3, [r4, #0]
 800fb98:	2b2e      	cmp	r3, #46	; 0x2e
 800fb9a:	d10c      	bne.n	800fbb6 <_vfiprintf_r+0x176>
 800fb9c:	7863      	ldrb	r3, [r4, #1]
 800fb9e:	2b2a      	cmp	r3, #42	; 0x2a
 800fba0:	d135      	bne.n	800fc0e <_vfiprintf_r+0x1ce>
 800fba2:	9b03      	ldr	r3, [sp, #12]
 800fba4:	1d1a      	adds	r2, r3, #4
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	9203      	str	r2, [sp, #12]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	bfb8      	it	lt
 800fbae:	f04f 33ff 	movlt.w	r3, #4294967295
 800fbb2:	3402      	adds	r4, #2
 800fbb4:	9305      	str	r3, [sp, #20]
 800fbb6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fc9c <_vfiprintf_r+0x25c>
 800fbba:	7821      	ldrb	r1, [r4, #0]
 800fbbc:	2203      	movs	r2, #3
 800fbbe:	4650      	mov	r0, sl
 800fbc0:	f7f0 fb2e 	bl	8000220 <memchr>
 800fbc4:	b140      	cbz	r0, 800fbd8 <_vfiprintf_r+0x198>
 800fbc6:	2340      	movs	r3, #64	; 0x40
 800fbc8:	eba0 000a 	sub.w	r0, r0, sl
 800fbcc:	fa03 f000 	lsl.w	r0, r3, r0
 800fbd0:	9b04      	ldr	r3, [sp, #16]
 800fbd2:	4303      	orrs	r3, r0
 800fbd4:	3401      	adds	r4, #1
 800fbd6:	9304      	str	r3, [sp, #16]
 800fbd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbdc:	482c      	ldr	r0, [pc, #176]	; (800fc90 <_vfiprintf_r+0x250>)
 800fbde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fbe2:	2206      	movs	r2, #6
 800fbe4:	f7f0 fb1c 	bl	8000220 <memchr>
 800fbe8:	2800      	cmp	r0, #0
 800fbea:	d03f      	beq.n	800fc6c <_vfiprintf_r+0x22c>
 800fbec:	4b29      	ldr	r3, [pc, #164]	; (800fc94 <_vfiprintf_r+0x254>)
 800fbee:	bb1b      	cbnz	r3, 800fc38 <_vfiprintf_r+0x1f8>
 800fbf0:	9b03      	ldr	r3, [sp, #12]
 800fbf2:	3307      	adds	r3, #7
 800fbf4:	f023 0307 	bic.w	r3, r3, #7
 800fbf8:	3308      	adds	r3, #8
 800fbfa:	9303      	str	r3, [sp, #12]
 800fbfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fbfe:	443b      	add	r3, r7
 800fc00:	9309      	str	r3, [sp, #36]	; 0x24
 800fc02:	e767      	b.n	800fad4 <_vfiprintf_r+0x94>
 800fc04:	fb0c 3202 	mla	r2, ip, r2, r3
 800fc08:	460c      	mov	r4, r1
 800fc0a:	2001      	movs	r0, #1
 800fc0c:	e7a5      	b.n	800fb5a <_vfiprintf_r+0x11a>
 800fc0e:	2300      	movs	r3, #0
 800fc10:	3401      	adds	r4, #1
 800fc12:	9305      	str	r3, [sp, #20]
 800fc14:	4619      	mov	r1, r3
 800fc16:	f04f 0c0a 	mov.w	ip, #10
 800fc1a:	4620      	mov	r0, r4
 800fc1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fc20:	3a30      	subs	r2, #48	; 0x30
 800fc22:	2a09      	cmp	r2, #9
 800fc24:	d903      	bls.n	800fc2e <_vfiprintf_r+0x1ee>
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d0c5      	beq.n	800fbb6 <_vfiprintf_r+0x176>
 800fc2a:	9105      	str	r1, [sp, #20]
 800fc2c:	e7c3      	b.n	800fbb6 <_vfiprintf_r+0x176>
 800fc2e:	fb0c 2101 	mla	r1, ip, r1, r2
 800fc32:	4604      	mov	r4, r0
 800fc34:	2301      	movs	r3, #1
 800fc36:	e7f0      	b.n	800fc1a <_vfiprintf_r+0x1da>
 800fc38:	ab03      	add	r3, sp, #12
 800fc3a:	9300      	str	r3, [sp, #0]
 800fc3c:	462a      	mov	r2, r5
 800fc3e:	4b16      	ldr	r3, [pc, #88]	; (800fc98 <_vfiprintf_r+0x258>)
 800fc40:	a904      	add	r1, sp, #16
 800fc42:	4630      	mov	r0, r6
 800fc44:	f7fb fff6 	bl	800bc34 <_printf_float>
 800fc48:	4607      	mov	r7, r0
 800fc4a:	1c78      	adds	r0, r7, #1
 800fc4c:	d1d6      	bne.n	800fbfc <_vfiprintf_r+0x1bc>
 800fc4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fc50:	07d9      	lsls	r1, r3, #31
 800fc52:	d405      	bmi.n	800fc60 <_vfiprintf_r+0x220>
 800fc54:	89ab      	ldrh	r3, [r5, #12]
 800fc56:	059a      	lsls	r2, r3, #22
 800fc58:	d402      	bmi.n	800fc60 <_vfiprintf_r+0x220>
 800fc5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fc5c:	f000 faa1 	bl	80101a2 <__retarget_lock_release_recursive>
 800fc60:	89ab      	ldrh	r3, [r5, #12]
 800fc62:	065b      	lsls	r3, r3, #25
 800fc64:	f53f af12 	bmi.w	800fa8c <_vfiprintf_r+0x4c>
 800fc68:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fc6a:	e711      	b.n	800fa90 <_vfiprintf_r+0x50>
 800fc6c:	ab03      	add	r3, sp, #12
 800fc6e:	9300      	str	r3, [sp, #0]
 800fc70:	462a      	mov	r2, r5
 800fc72:	4b09      	ldr	r3, [pc, #36]	; (800fc98 <_vfiprintf_r+0x258>)
 800fc74:	a904      	add	r1, sp, #16
 800fc76:	4630      	mov	r0, r6
 800fc78:	f7fc fa80 	bl	800c17c <_printf_i>
 800fc7c:	e7e4      	b.n	800fc48 <_vfiprintf_r+0x208>
 800fc7e:	bf00      	nop
 800fc80:	0801096c 	.word	0x0801096c
 800fc84:	0801098c 	.word	0x0801098c
 800fc88:	0801094c 	.word	0x0801094c
 800fc8c:	080108fc 	.word	0x080108fc
 800fc90:	08010906 	.word	0x08010906
 800fc94:	0800bc35 	.word	0x0800bc35
 800fc98:	0800fa1d 	.word	0x0800fa1d
 800fc9c:	08010902 	.word	0x08010902

0800fca0 <__swbuf_r>:
 800fca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fca2:	460e      	mov	r6, r1
 800fca4:	4614      	mov	r4, r2
 800fca6:	4605      	mov	r5, r0
 800fca8:	b118      	cbz	r0, 800fcb2 <__swbuf_r+0x12>
 800fcaa:	6983      	ldr	r3, [r0, #24]
 800fcac:	b90b      	cbnz	r3, 800fcb2 <__swbuf_r+0x12>
 800fcae:	f000 f9d9 	bl	8010064 <__sinit>
 800fcb2:	4b21      	ldr	r3, [pc, #132]	; (800fd38 <__swbuf_r+0x98>)
 800fcb4:	429c      	cmp	r4, r3
 800fcb6:	d12b      	bne.n	800fd10 <__swbuf_r+0x70>
 800fcb8:	686c      	ldr	r4, [r5, #4]
 800fcba:	69a3      	ldr	r3, [r4, #24]
 800fcbc:	60a3      	str	r3, [r4, #8]
 800fcbe:	89a3      	ldrh	r3, [r4, #12]
 800fcc0:	071a      	lsls	r2, r3, #28
 800fcc2:	d52f      	bpl.n	800fd24 <__swbuf_r+0x84>
 800fcc4:	6923      	ldr	r3, [r4, #16]
 800fcc6:	b36b      	cbz	r3, 800fd24 <__swbuf_r+0x84>
 800fcc8:	6923      	ldr	r3, [r4, #16]
 800fcca:	6820      	ldr	r0, [r4, #0]
 800fccc:	1ac0      	subs	r0, r0, r3
 800fcce:	6963      	ldr	r3, [r4, #20]
 800fcd0:	b2f6      	uxtb	r6, r6
 800fcd2:	4283      	cmp	r3, r0
 800fcd4:	4637      	mov	r7, r6
 800fcd6:	dc04      	bgt.n	800fce2 <__swbuf_r+0x42>
 800fcd8:	4621      	mov	r1, r4
 800fcda:	4628      	mov	r0, r5
 800fcdc:	f000 f92e 	bl	800ff3c <_fflush_r>
 800fce0:	bb30      	cbnz	r0, 800fd30 <__swbuf_r+0x90>
 800fce2:	68a3      	ldr	r3, [r4, #8]
 800fce4:	3b01      	subs	r3, #1
 800fce6:	60a3      	str	r3, [r4, #8]
 800fce8:	6823      	ldr	r3, [r4, #0]
 800fcea:	1c5a      	adds	r2, r3, #1
 800fcec:	6022      	str	r2, [r4, #0]
 800fcee:	701e      	strb	r6, [r3, #0]
 800fcf0:	6963      	ldr	r3, [r4, #20]
 800fcf2:	3001      	adds	r0, #1
 800fcf4:	4283      	cmp	r3, r0
 800fcf6:	d004      	beq.n	800fd02 <__swbuf_r+0x62>
 800fcf8:	89a3      	ldrh	r3, [r4, #12]
 800fcfa:	07db      	lsls	r3, r3, #31
 800fcfc:	d506      	bpl.n	800fd0c <__swbuf_r+0x6c>
 800fcfe:	2e0a      	cmp	r6, #10
 800fd00:	d104      	bne.n	800fd0c <__swbuf_r+0x6c>
 800fd02:	4621      	mov	r1, r4
 800fd04:	4628      	mov	r0, r5
 800fd06:	f000 f919 	bl	800ff3c <_fflush_r>
 800fd0a:	b988      	cbnz	r0, 800fd30 <__swbuf_r+0x90>
 800fd0c:	4638      	mov	r0, r7
 800fd0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd10:	4b0a      	ldr	r3, [pc, #40]	; (800fd3c <__swbuf_r+0x9c>)
 800fd12:	429c      	cmp	r4, r3
 800fd14:	d101      	bne.n	800fd1a <__swbuf_r+0x7a>
 800fd16:	68ac      	ldr	r4, [r5, #8]
 800fd18:	e7cf      	b.n	800fcba <__swbuf_r+0x1a>
 800fd1a:	4b09      	ldr	r3, [pc, #36]	; (800fd40 <__swbuf_r+0xa0>)
 800fd1c:	429c      	cmp	r4, r3
 800fd1e:	bf08      	it	eq
 800fd20:	68ec      	ldreq	r4, [r5, #12]
 800fd22:	e7ca      	b.n	800fcba <__swbuf_r+0x1a>
 800fd24:	4621      	mov	r1, r4
 800fd26:	4628      	mov	r0, r5
 800fd28:	f000 f80c 	bl	800fd44 <__swsetup_r>
 800fd2c:	2800      	cmp	r0, #0
 800fd2e:	d0cb      	beq.n	800fcc8 <__swbuf_r+0x28>
 800fd30:	f04f 37ff 	mov.w	r7, #4294967295
 800fd34:	e7ea      	b.n	800fd0c <__swbuf_r+0x6c>
 800fd36:	bf00      	nop
 800fd38:	0801096c 	.word	0x0801096c
 800fd3c:	0801098c 	.word	0x0801098c
 800fd40:	0801094c 	.word	0x0801094c

0800fd44 <__swsetup_r>:
 800fd44:	4b32      	ldr	r3, [pc, #200]	; (800fe10 <__swsetup_r+0xcc>)
 800fd46:	b570      	push	{r4, r5, r6, lr}
 800fd48:	681d      	ldr	r5, [r3, #0]
 800fd4a:	4606      	mov	r6, r0
 800fd4c:	460c      	mov	r4, r1
 800fd4e:	b125      	cbz	r5, 800fd5a <__swsetup_r+0x16>
 800fd50:	69ab      	ldr	r3, [r5, #24]
 800fd52:	b913      	cbnz	r3, 800fd5a <__swsetup_r+0x16>
 800fd54:	4628      	mov	r0, r5
 800fd56:	f000 f985 	bl	8010064 <__sinit>
 800fd5a:	4b2e      	ldr	r3, [pc, #184]	; (800fe14 <__swsetup_r+0xd0>)
 800fd5c:	429c      	cmp	r4, r3
 800fd5e:	d10f      	bne.n	800fd80 <__swsetup_r+0x3c>
 800fd60:	686c      	ldr	r4, [r5, #4]
 800fd62:	89a3      	ldrh	r3, [r4, #12]
 800fd64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fd68:	0719      	lsls	r1, r3, #28
 800fd6a:	d42c      	bmi.n	800fdc6 <__swsetup_r+0x82>
 800fd6c:	06dd      	lsls	r5, r3, #27
 800fd6e:	d411      	bmi.n	800fd94 <__swsetup_r+0x50>
 800fd70:	2309      	movs	r3, #9
 800fd72:	6033      	str	r3, [r6, #0]
 800fd74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fd78:	81a3      	strh	r3, [r4, #12]
 800fd7a:	f04f 30ff 	mov.w	r0, #4294967295
 800fd7e:	e03e      	b.n	800fdfe <__swsetup_r+0xba>
 800fd80:	4b25      	ldr	r3, [pc, #148]	; (800fe18 <__swsetup_r+0xd4>)
 800fd82:	429c      	cmp	r4, r3
 800fd84:	d101      	bne.n	800fd8a <__swsetup_r+0x46>
 800fd86:	68ac      	ldr	r4, [r5, #8]
 800fd88:	e7eb      	b.n	800fd62 <__swsetup_r+0x1e>
 800fd8a:	4b24      	ldr	r3, [pc, #144]	; (800fe1c <__swsetup_r+0xd8>)
 800fd8c:	429c      	cmp	r4, r3
 800fd8e:	bf08      	it	eq
 800fd90:	68ec      	ldreq	r4, [r5, #12]
 800fd92:	e7e6      	b.n	800fd62 <__swsetup_r+0x1e>
 800fd94:	0758      	lsls	r0, r3, #29
 800fd96:	d512      	bpl.n	800fdbe <__swsetup_r+0x7a>
 800fd98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fd9a:	b141      	cbz	r1, 800fdae <__swsetup_r+0x6a>
 800fd9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fda0:	4299      	cmp	r1, r3
 800fda2:	d002      	beq.n	800fdaa <__swsetup_r+0x66>
 800fda4:	4630      	mov	r0, r6
 800fda6:	f7ff fb25 	bl	800f3f4 <_free_r>
 800fdaa:	2300      	movs	r3, #0
 800fdac:	6363      	str	r3, [r4, #52]	; 0x34
 800fdae:	89a3      	ldrh	r3, [r4, #12]
 800fdb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fdb4:	81a3      	strh	r3, [r4, #12]
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	6063      	str	r3, [r4, #4]
 800fdba:	6923      	ldr	r3, [r4, #16]
 800fdbc:	6023      	str	r3, [r4, #0]
 800fdbe:	89a3      	ldrh	r3, [r4, #12]
 800fdc0:	f043 0308 	orr.w	r3, r3, #8
 800fdc4:	81a3      	strh	r3, [r4, #12]
 800fdc6:	6923      	ldr	r3, [r4, #16]
 800fdc8:	b94b      	cbnz	r3, 800fdde <__swsetup_r+0x9a>
 800fdca:	89a3      	ldrh	r3, [r4, #12]
 800fdcc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fdd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fdd4:	d003      	beq.n	800fdde <__swsetup_r+0x9a>
 800fdd6:	4621      	mov	r1, r4
 800fdd8:	4630      	mov	r0, r6
 800fdda:	f000 fa09 	bl	80101f0 <__smakebuf_r>
 800fdde:	89a0      	ldrh	r0, [r4, #12]
 800fde0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fde4:	f010 0301 	ands.w	r3, r0, #1
 800fde8:	d00a      	beq.n	800fe00 <__swsetup_r+0xbc>
 800fdea:	2300      	movs	r3, #0
 800fdec:	60a3      	str	r3, [r4, #8]
 800fdee:	6963      	ldr	r3, [r4, #20]
 800fdf0:	425b      	negs	r3, r3
 800fdf2:	61a3      	str	r3, [r4, #24]
 800fdf4:	6923      	ldr	r3, [r4, #16]
 800fdf6:	b943      	cbnz	r3, 800fe0a <__swsetup_r+0xc6>
 800fdf8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fdfc:	d1ba      	bne.n	800fd74 <__swsetup_r+0x30>
 800fdfe:	bd70      	pop	{r4, r5, r6, pc}
 800fe00:	0781      	lsls	r1, r0, #30
 800fe02:	bf58      	it	pl
 800fe04:	6963      	ldrpl	r3, [r4, #20]
 800fe06:	60a3      	str	r3, [r4, #8]
 800fe08:	e7f4      	b.n	800fdf4 <__swsetup_r+0xb0>
 800fe0a:	2000      	movs	r0, #0
 800fe0c:	e7f7      	b.n	800fdfe <__swsetup_r+0xba>
 800fe0e:	bf00      	nop
 800fe10:	2000011c 	.word	0x2000011c
 800fe14:	0801096c 	.word	0x0801096c
 800fe18:	0801098c 	.word	0x0801098c
 800fe1c:	0801094c 	.word	0x0801094c

0800fe20 <abort>:
 800fe20:	b508      	push	{r3, lr}
 800fe22:	2006      	movs	r0, #6
 800fe24:	f000 fa54 	bl	80102d0 <raise>
 800fe28:	2001      	movs	r0, #1
 800fe2a:	f7f1 fd5d 	bl	80018e8 <_exit>
	...

0800fe30 <__sflush_r>:
 800fe30:	898a      	ldrh	r2, [r1, #12]
 800fe32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe36:	4605      	mov	r5, r0
 800fe38:	0710      	lsls	r0, r2, #28
 800fe3a:	460c      	mov	r4, r1
 800fe3c:	d458      	bmi.n	800fef0 <__sflush_r+0xc0>
 800fe3e:	684b      	ldr	r3, [r1, #4]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	dc05      	bgt.n	800fe50 <__sflush_r+0x20>
 800fe44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	dc02      	bgt.n	800fe50 <__sflush_r+0x20>
 800fe4a:	2000      	movs	r0, #0
 800fe4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fe52:	2e00      	cmp	r6, #0
 800fe54:	d0f9      	beq.n	800fe4a <__sflush_r+0x1a>
 800fe56:	2300      	movs	r3, #0
 800fe58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fe5c:	682f      	ldr	r7, [r5, #0]
 800fe5e:	602b      	str	r3, [r5, #0]
 800fe60:	d032      	beq.n	800fec8 <__sflush_r+0x98>
 800fe62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fe64:	89a3      	ldrh	r3, [r4, #12]
 800fe66:	075a      	lsls	r2, r3, #29
 800fe68:	d505      	bpl.n	800fe76 <__sflush_r+0x46>
 800fe6a:	6863      	ldr	r3, [r4, #4]
 800fe6c:	1ac0      	subs	r0, r0, r3
 800fe6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fe70:	b10b      	cbz	r3, 800fe76 <__sflush_r+0x46>
 800fe72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fe74:	1ac0      	subs	r0, r0, r3
 800fe76:	2300      	movs	r3, #0
 800fe78:	4602      	mov	r2, r0
 800fe7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fe7c:	6a21      	ldr	r1, [r4, #32]
 800fe7e:	4628      	mov	r0, r5
 800fe80:	47b0      	blx	r6
 800fe82:	1c43      	adds	r3, r0, #1
 800fe84:	89a3      	ldrh	r3, [r4, #12]
 800fe86:	d106      	bne.n	800fe96 <__sflush_r+0x66>
 800fe88:	6829      	ldr	r1, [r5, #0]
 800fe8a:	291d      	cmp	r1, #29
 800fe8c:	d82c      	bhi.n	800fee8 <__sflush_r+0xb8>
 800fe8e:	4a2a      	ldr	r2, [pc, #168]	; (800ff38 <__sflush_r+0x108>)
 800fe90:	40ca      	lsrs	r2, r1
 800fe92:	07d6      	lsls	r6, r2, #31
 800fe94:	d528      	bpl.n	800fee8 <__sflush_r+0xb8>
 800fe96:	2200      	movs	r2, #0
 800fe98:	6062      	str	r2, [r4, #4]
 800fe9a:	04d9      	lsls	r1, r3, #19
 800fe9c:	6922      	ldr	r2, [r4, #16]
 800fe9e:	6022      	str	r2, [r4, #0]
 800fea0:	d504      	bpl.n	800feac <__sflush_r+0x7c>
 800fea2:	1c42      	adds	r2, r0, #1
 800fea4:	d101      	bne.n	800feaa <__sflush_r+0x7a>
 800fea6:	682b      	ldr	r3, [r5, #0]
 800fea8:	b903      	cbnz	r3, 800feac <__sflush_r+0x7c>
 800feaa:	6560      	str	r0, [r4, #84]	; 0x54
 800feac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800feae:	602f      	str	r7, [r5, #0]
 800feb0:	2900      	cmp	r1, #0
 800feb2:	d0ca      	beq.n	800fe4a <__sflush_r+0x1a>
 800feb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800feb8:	4299      	cmp	r1, r3
 800feba:	d002      	beq.n	800fec2 <__sflush_r+0x92>
 800febc:	4628      	mov	r0, r5
 800febe:	f7ff fa99 	bl	800f3f4 <_free_r>
 800fec2:	2000      	movs	r0, #0
 800fec4:	6360      	str	r0, [r4, #52]	; 0x34
 800fec6:	e7c1      	b.n	800fe4c <__sflush_r+0x1c>
 800fec8:	6a21      	ldr	r1, [r4, #32]
 800feca:	2301      	movs	r3, #1
 800fecc:	4628      	mov	r0, r5
 800fece:	47b0      	blx	r6
 800fed0:	1c41      	adds	r1, r0, #1
 800fed2:	d1c7      	bne.n	800fe64 <__sflush_r+0x34>
 800fed4:	682b      	ldr	r3, [r5, #0]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d0c4      	beq.n	800fe64 <__sflush_r+0x34>
 800feda:	2b1d      	cmp	r3, #29
 800fedc:	d001      	beq.n	800fee2 <__sflush_r+0xb2>
 800fede:	2b16      	cmp	r3, #22
 800fee0:	d101      	bne.n	800fee6 <__sflush_r+0xb6>
 800fee2:	602f      	str	r7, [r5, #0]
 800fee4:	e7b1      	b.n	800fe4a <__sflush_r+0x1a>
 800fee6:	89a3      	ldrh	r3, [r4, #12]
 800fee8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800feec:	81a3      	strh	r3, [r4, #12]
 800feee:	e7ad      	b.n	800fe4c <__sflush_r+0x1c>
 800fef0:	690f      	ldr	r7, [r1, #16]
 800fef2:	2f00      	cmp	r7, #0
 800fef4:	d0a9      	beq.n	800fe4a <__sflush_r+0x1a>
 800fef6:	0793      	lsls	r3, r2, #30
 800fef8:	680e      	ldr	r6, [r1, #0]
 800fefa:	bf08      	it	eq
 800fefc:	694b      	ldreq	r3, [r1, #20]
 800fefe:	600f      	str	r7, [r1, #0]
 800ff00:	bf18      	it	ne
 800ff02:	2300      	movne	r3, #0
 800ff04:	eba6 0807 	sub.w	r8, r6, r7
 800ff08:	608b      	str	r3, [r1, #8]
 800ff0a:	f1b8 0f00 	cmp.w	r8, #0
 800ff0e:	dd9c      	ble.n	800fe4a <__sflush_r+0x1a>
 800ff10:	6a21      	ldr	r1, [r4, #32]
 800ff12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ff14:	4643      	mov	r3, r8
 800ff16:	463a      	mov	r2, r7
 800ff18:	4628      	mov	r0, r5
 800ff1a:	47b0      	blx	r6
 800ff1c:	2800      	cmp	r0, #0
 800ff1e:	dc06      	bgt.n	800ff2e <__sflush_r+0xfe>
 800ff20:	89a3      	ldrh	r3, [r4, #12]
 800ff22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff26:	81a3      	strh	r3, [r4, #12]
 800ff28:	f04f 30ff 	mov.w	r0, #4294967295
 800ff2c:	e78e      	b.n	800fe4c <__sflush_r+0x1c>
 800ff2e:	4407      	add	r7, r0
 800ff30:	eba8 0800 	sub.w	r8, r8, r0
 800ff34:	e7e9      	b.n	800ff0a <__sflush_r+0xda>
 800ff36:	bf00      	nop
 800ff38:	20400001 	.word	0x20400001

0800ff3c <_fflush_r>:
 800ff3c:	b538      	push	{r3, r4, r5, lr}
 800ff3e:	690b      	ldr	r3, [r1, #16]
 800ff40:	4605      	mov	r5, r0
 800ff42:	460c      	mov	r4, r1
 800ff44:	b913      	cbnz	r3, 800ff4c <_fflush_r+0x10>
 800ff46:	2500      	movs	r5, #0
 800ff48:	4628      	mov	r0, r5
 800ff4a:	bd38      	pop	{r3, r4, r5, pc}
 800ff4c:	b118      	cbz	r0, 800ff56 <_fflush_r+0x1a>
 800ff4e:	6983      	ldr	r3, [r0, #24]
 800ff50:	b90b      	cbnz	r3, 800ff56 <_fflush_r+0x1a>
 800ff52:	f000 f887 	bl	8010064 <__sinit>
 800ff56:	4b14      	ldr	r3, [pc, #80]	; (800ffa8 <_fflush_r+0x6c>)
 800ff58:	429c      	cmp	r4, r3
 800ff5a:	d11b      	bne.n	800ff94 <_fflush_r+0x58>
 800ff5c:	686c      	ldr	r4, [r5, #4]
 800ff5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d0ef      	beq.n	800ff46 <_fflush_r+0xa>
 800ff66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ff68:	07d0      	lsls	r0, r2, #31
 800ff6a:	d404      	bmi.n	800ff76 <_fflush_r+0x3a>
 800ff6c:	0599      	lsls	r1, r3, #22
 800ff6e:	d402      	bmi.n	800ff76 <_fflush_r+0x3a>
 800ff70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff72:	f000 f915 	bl	80101a0 <__retarget_lock_acquire_recursive>
 800ff76:	4628      	mov	r0, r5
 800ff78:	4621      	mov	r1, r4
 800ff7a:	f7ff ff59 	bl	800fe30 <__sflush_r>
 800ff7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ff80:	07da      	lsls	r2, r3, #31
 800ff82:	4605      	mov	r5, r0
 800ff84:	d4e0      	bmi.n	800ff48 <_fflush_r+0xc>
 800ff86:	89a3      	ldrh	r3, [r4, #12]
 800ff88:	059b      	lsls	r3, r3, #22
 800ff8a:	d4dd      	bmi.n	800ff48 <_fflush_r+0xc>
 800ff8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff8e:	f000 f908 	bl	80101a2 <__retarget_lock_release_recursive>
 800ff92:	e7d9      	b.n	800ff48 <_fflush_r+0xc>
 800ff94:	4b05      	ldr	r3, [pc, #20]	; (800ffac <_fflush_r+0x70>)
 800ff96:	429c      	cmp	r4, r3
 800ff98:	d101      	bne.n	800ff9e <_fflush_r+0x62>
 800ff9a:	68ac      	ldr	r4, [r5, #8]
 800ff9c:	e7df      	b.n	800ff5e <_fflush_r+0x22>
 800ff9e:	4b04      	ldr	r3, [pc, #16]	; (800ffb0 <_fflush_r+0x74>)
 800ffa0:	429c      	cmp	r4, r3
 800ffa2:	bf08      	it	eq
 800ffa4:	68ec      	ldreq	r4, [r5, #12]
 800ffa6:	e7da      	b.n	800ff5e <_fflush_r+0x22>
 800ffa8:	0801096c 	.word	0x0801096c
 800ffac:	0801098c 	.word	0x0801098c
 800ffb0:	0801094c 	.word	0x0801094c

0800ffb4 <std>:
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	b510      	push	{r4, lr}
 800ffb8:	4604      	mov	r4, r0
 800ffba:	e9c0 3300 	strd	r3, r3, [r0]
 800ffbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ffc2:	6083      	str	r3, [r0, #8]
 800ffc4:	8181      	strh	r1, [r0, #12]
 800ffc6:	6643      	str	r3, [r0, #100]	; 0x64
 800ffc8:	81c2      	strh	r2, [r0, #14]
 800ffca:	6183      	str	r3, [r0, #24]
 800ffcc:	4619      	mov	r1, r3
 800ffce:	2208      	movs	r2, #8
 800ffd0:	305c      	adds	r0, #92	; 0x5c
 800ffd2:	f7fb fd87 	bl	800bae4 <memset>
 800ffd6:	4b05      	ldr	r3, [pc, #20]	; (800ffec <std+0x38>)
 800ffd8:	6263      	str	r3, [r4, #36]	; 0x24
 800ffda:	4b05      	ldr	r3, [pc, #20]	; (800fff0 <std+0x3c>)
 800ffdc:	62a3      	str	r3, [r4, #40]	; 0x28
 800ffde:	4b05      	ldr	r3, [pc, #20]	; (800fff4 <std+0x40>)
 800ffe0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ffe2:	4b05      	ldr	r3, [pc, #20]	; (800fff8 <std+0x44>)
 800ffe4:	6224      	str	r4, [r4, #32]
 800ffe6:	6323      	str	r3, [r4, #48]	; 0x30
 800ffe8:	bd10      	pop	{r4, pc}
 800ffea:	bf00      	nop
 800ffec:	08010309 	.word	0x08010309
 800fff0:	0801032b 	.word	0x0801032b
 800fff4:	08010363 	.word	0x08010363
 800fff8:	08010387 	.word	0x08010387

0800fffc <_cleanup_r>:
 800fffc:	4901      	ldr	r1, [pc, #4]	; (8010004 <_cleanup_r+0x8>)
 800fffe:	f000 b8af 	b.w	8010160 <_fwalk_reent>
 8010002:	bf00      	nop
 8010004:	0800ff3d 	.word	0x0800ff3d

08010008 <__sfmoreglue>:
 8010008:	b570      	push	{r4, r5, r6, lr}
 801000a:	2268      	movs	r2, #104	; 0x68
 801000c:	1e4d      	subs	r5, r1, #1
 801000e:	4355      	muls	r5, r2
 8010010:	460e      	mov	r6, r1
 8010012:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010016:	f7ff fa59 	bl	800f4cc <_malloc_r>
 801001a:	4604      	mov	r4, r0
 801001c:	b140      	cbz	r0, 8010030 <__sfmoreglue+0x28>
 801001e:	2100      	movs	r1, #0
 8010020:	e9c0 1600 	strd	r1, r6, [r0]
 8010024:	300c      	adds	r0, #12
 8010026:	60a0      	str	r0, [r4, #8]
 8010028:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801002c:	f7fb fd5a 	bl	800bae4 <memset>
 8010030:	4620      	mov	r0, r4
 8010032:	bd70      	pop	{r4, r5, r6, pc}

08010034 <__sfp_lock_acquire>:
 8010034:	4801      	ldr	r0, [pc, #4]	; (801003c <__sfp_lock_acquire+0x8>)
 8010036:	f000 b8b3 	b.w	80101a0 <__retarget_lock_acquire_recursive>
 801003a:	bf00      	nop
 801003c:	20002099 	.word	0x20002099

08010040 <__sfp_lock_release>:
 8010040:	4801      	ldr	r0, [pc, #4]	; (8010048 <__sfp_lock_release+0x8>)
 8010042:	f000 b8ae 	b.w	80101a2 <__retarget_lock_release_recursive>
 8010046:	bf00      	nop
 8010048:	20002099 	.word	0x20002099

0801004c <__sinit_lock_acquire>:
 801004c:	4801      	ldr	r0, [pc, #4]	; (8010054 <__sinit_lock_acquire+0x8>)
 801004e:	f000 b8a7 	b.w	80101a0 <__retarget_lock_acquire_recursive>
 8010052:	bf00      	nop
 8010054:	2000209a 	.word	0x2000209a

08010058 <__sinit_lock_release>:
 8010058:	4801      	ldr	r0, [pc, #4]	; (8010060 <__sinit_lock_release+0x8>)
 801005a:	f000 b8a2 	b.w	80101a2 <__retarget_lock_release_recursive>
 801005e:	bf00      	nop
 8010060:	2000209a 	.word	0x2000209a

08010064 <__sinit>:
 8010064:	b510      	push	{r4, lr}
 8010066:	4604      	mov	r4, r0
 8010068:	f7ff fff0 	bl	801004c <__sinit_lock_acquire>
 801006c:	69a3      	ldr	r3, [r4, #24]
 801006e:	b11b      	cbz	r3, 8010078 <__sinit+0x14>
 8010070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010074:	f7ff bff0 	b.w	8010058 <__sinit_lock_release>
 8010078:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801007c:	6523      	str	r3, [r4, #80]	; 0x50
 801007e:	4b13      	ldr	r3, [pc, #76]	; (80100cc <__sinit+0x68>)
 8010080:	4a13      	ldr	r2, [pc, #76]	; (80100d0 <__sinit+0x6c>)
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	62a2      	str	r2, [r4, #40]	; 0x28
 8010086:	42a3      	cmp	r3, r4
 8010088:	bf04      	itt	eq
 801008a:	2301      	moveq	r3, #1
 801008c:	61a3      	streq	r3, [r4, #24]
 801008e:	4620      	mov	r0, r4
 8010090:	f000 f820 	bl	80100d4 <__sfp>
 8010094:	6060      	str	r0, [r4, #4]
 8010096:	4620      	mov	r0, r4
 8010098:	f000 f81c 	bl	80100d4 <__sfp>
 801009c:	60a0      	str	r0, [r4, #8]
 801009e:	4620      	mov	r0, r4
 80100a0:	f000 f818 	bl	80100d4 <__sfp>
 80100a4:	2200      	movs	r2, #0
 80100a6:	60e0      	str	r0, [r4, #12]
 80100a8:	2104      	movs	r1, #4
 80100aa:	6860      	ldr	r0, [r4, #4]
 80100ac:	f7ff ff82 	bl	800ffb4 <std>
 80100b0:	68a0      	ldr	r0, [r4, #8]
 80100b2:	2201      	movs	r2, #1
 80100b4:	2109      	movs	r1, #9
 80100b6:	f7ff ff7d 	bl	800ffb4 <std>
 80100ba:	68e0      	ldr	r0, [r4, #12]
 80100bc:	2202      	movs	r2, #2
 80100be:	2112      	movs	r1, #18
 80100c0:	f7ff ff78 	bl	800ffb4 <std>
 80100c4:	2301      	movs	r3, #1
 80100c6:	61a3      	str	r3, [r4, #24]
 80100c8:	e7d2      	b.n	8010070 <__sinit+0xc>
 80100ca:	bf00      	nop
 80100cc:	080104e0 	.word	0x080104e0
 80100d0:	0800fffd 	.word	0x0800fffd

080100d4 <__sfp>:
 80100d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100d6:	4607      	mov	r7, r0
 80100d8:	f7ff ffac 	bl	8010034 <__sfp_lock_acquire>
 80100dc:	4b1e      	ldr	r3, [pc, #120]	; (8010158 <__sfp+0x84>)
 80100de:	681e      	ldr	r6, [r3, #0]
 80100e0:	69b3      	ldr	r3, [r6, #24]
 80100e2:	b913      	cbnz	r3, 80100ea <__sfp+0x16>
 80100e4:	4630      	mov	r0, r6
 80100e6:	f7ff ffbd 	bl	8010064 <__sinit>
 80100ea:	3648      	adds	r6, #72	; 0x48
 80100ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80100f0:	3b01      	subs	r3, #1
 80100f2:	d503      	bpl.n	80100fc <__sfp+0x28>
 80100f4:	6833      	ldr	r3, [r6, #0]
 80100f6:	b30b      	cbz	r3, 801013c <__sfp+0x68>
 80100f8:	6836      	ldr	r6, [r6, #0]
 80100fa:	e7f7      	b.n	80100ec <__sfp+0x18>
 80100fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010100:	b9d5      	cbnz	r5, 8010138 <__sfp+0x64>
 8010102:	4b16      	ldr	r3, [pc, #88]	; (801015c <__sfp+0x88>)
 8010104:	60e3      	str	r3, [r4, #12]
 8010106:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801010a:	6665      	str	r5, [r4, #100]	; 0x64
 801010c:	f000 f847 	bl	801019e <__retarget_lock_init_recursive>
 8010110:	f7ff ff96 	bl	8010040 <__sfp_lock_release>
 8010114:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010118:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801011c:	6025      	str	r5, [r4, #0]
 801011e:	61a5      	str	r5, [r4, #24]
 8010120:	2208      	movs	r2, #8
 8010122:	4629      	mov	r1, r5
 8010124:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010128:	f7fb fcdc 	bl	800bae4 <memset>
 801012c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010130:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010134:	4620      	mov	r0, r4
 8010136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010138:	3468      	adds	r4, #104	; 0x68
 801013a:	e7d9      	b.n	80100f0 <__sfp+0x1c>
 801013c:	2104      	movs	r1, #4
 801013e:	4638      	mov	r0, r7
 8010140:	f7ff ff62 	bl	8010008 <__sfmoreglue>
 8010144:	4604      	mov	r4, r0
 8010146:	6030      	str	r0, [r6, #0]
 8010148:	2800      	cmp	r0, #0
 801014a:	d1d5      	bne.n	80100f8 <__sfp+0x24>
 801014c:	f7ff ff78 	bl	8010040 <__sfp_lock_release>
 8010150:	230c      	movs	r3, #12
 8010152:	603b      	str	r3, [r7, #0]
 8010154:	e7ee      	b.n	8010134 <__sfp+0x60>
 8010156:	bf00      	nop
 8010158:	080104e0 	.word	0x080104e0
 801015c:	ffff0001 	.word	0xffff0001

08010160 <_fwalk_reent>:
 8010160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010164:	4606      	mov	r6, r0
 8010166:	4688      	mov	r8, r1
 8010168:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801016c:	2700      	movs	r7, #0
 801016e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010172:	f1b9 0901 	subs.w	r9, r9, #1
 8010176:	d505      	bpl.n	8010184 <_fwalk_reent+0x24>
 8010178:	6824      	ldr	r4, [r4, #0]
 801017a:	2c00      	cmp	r4, #0
 801017c:	d1f7      	bne.n	801016e <_fwalk_reent+0xe>
 801017e:	4638      	mov	r0, r7
 8010180:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010184:	89ab      	ldrh	r3, [r5, #12]
 8010186:	2b01      	cmp	r3, #1
 8010188:	d907      	bls.n	801019a <_fwalk_reent+0x3a>
 801018a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801018e:	3301      	adds	r3, #1
 8010190:	d003      	beq.n	801019a <_fwalk_reent+0x3a>
 8010192:	4629      	mov	r1, r5
 8010194:	4630      	mov	r0, r6
 8010196:	47c0      	blx	r8
 8010198:	4307      	orrs	r7, r0
 801019a:	3568      	adds	r5, #104	; 0x68
 801019c:	e7e9      	b.n	8010172 <_fwalk_reent+0x12>

0801019e <__retarget_lock_init_recursive>:
 801019e:	4770      	bx	lr

080101a0 <__retarget_lock_acquire_recursive>:
 80101a0:	4770      	bx	lr

080101a2 <__retarget_lock_release_recursive>:
 80101a2:	4770      	bx	lr

080101a4 <__swhatbuf_r>:
 80101a4:	b570      	push	{r4, r5, r6, lr}
 80101a6:	460e      	mov	r6, r1
 80101a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101ac:	2900      	cmp	r1, #0
 80101ae:	b096      	sub	sp, #88	; 0x58
 80101b0:	4614      	mov	r4, r2
 80101b2:	461d      	mov	r5, r3
 80101b4:	da08      	bge.n	80101c8 <__swhatbuf_r+0x24>
 80101b6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80101ba:	2200      	movs	r2, #0
 80101bc:	602a      	str	r2, [r5, #0]
 80101be:	061a      	lsls	r2, r3, #24
 80101c0:	d410      	bmi.n	80101e4 <__swhatbuf_r+0x40>
 80101c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80101c6:	e00e      	b.n	80101e6 <__swhatbuf_r+0x42>
 80101c8:	466a      	mov	r2, sp
 80101ca:	f000 f903 	bl	80103d4 <_fstat_r>
 80101ce:	2800      	cmp	r0, #0
 80101d0:	dbf1      	blt.n	80101b6 <__swhatbuf_r+0x12>
 80101d2:	9a01      	ldr	r2, [sp, #4]
 80101d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80101d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80101dc:	425a      	negs	r2, r3
 80101de:	415a      	adcs	r2, r3
 80101e0:	602a      	str	r2, [r5, #0]
 80101e2:	e7ee      	b.n	80101c2 <__swhatbuf_r+0x1e>
 80101e4:	2340      	movs	r3, #64	; 0x40
 80101e6:	2000      	movs	r0, #0
 80101e8:	6023      	str	r3, [r4, #0]
 80101ea:	b016      	add	sp, #88	; 0x58
 80101ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080101f0 <__smakebuf_r>:
 80101f0:	898b      	ldrh	r3, [r1, #12]
 80101f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80101f4:	079d      	lsls	r5, r3, #30
 80101f6:	4606      	mov	r6, r0
 80101f8:	460c      	mov	r4, r1
 80101fa:	d507      	bpl.n	801020c <__smakebuf_r+0x1c>
 80101fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010200:	6023      	str	r3, [r4, #0]
 8010202:	6123      	str	r3, [r4, #16]
 8010204:	2301      	movs	r3, #1
 8010206:	6163      	str	r3, [r4, #20]
 8010208:	b002      	add	sp, #8
 801020a:	bd70      	pop	{r4, r5, r6, pc}
 801020c:	ab01      	add	r3, sp, #4
 801020e:	466a      	mov	r2, sp
 8010210:	f7ff ffc8 	bl	80101a4 <__swhatbuf_r>
 8010214:	9900      	ldr	r1, [sp, #0]
 8010216:	4605      	mov	r5, r0
 8010218:	4630      	mov	r0, r6
 801021a:	f7ff f957 	bl	800f4cc <_malloc_r>
 801021e:	b948      	cbnz	r0, 8010234 <__smakebuf_r+0x44>
 8010220:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010224:	059a      	lsls	r2, r3, #22
 8010226:	d4ef      	bmi.n	8010208 <__smakebuf_r+0x18>
 8010228:	f023 0303 	bic.w	r3, r3, #3
 801022c:	f043 0302 	orr.w	r3, r3, #2
 8010230:	81a3      	strh	r3, [r4, #12]
 8010232:	e7e3      	b.n	80101fc <__smakebuf_r+0xc>
 8010234:	4b0d      	ldr	r3, [pc, #52]	; (801026c <__smakebuf_r+0x7c>)
 8010236:	62b3      	str	r3, [r6, #40]	; 0x28
 8010238:	89a3      	ldrh	r3, [r4, #12]
 801023a:	6020      	str	r0, [r4, #0]
 801023c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010240:	81a3      	strh	r3, [r4, #12]
 8010242:	9b00      	ldr	r3, [sp, #0]
 8010244:	6163      	str	r3, [r4, #20]
 8010246:	9b01      	ldr	r3, [sp, #4]
 8010248:	6120      	str	r0, [r4, #16]
 801024a:	b15b      	cbz	r3, 8010264 <__smakebuf_r+0x74>
 801024c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010250:	4630      	mov	r0, r6
 8010252:	f000 f8d1 	bl	80103f8 <_isatty_r>
 8010256:	b128      	cbz	r0, 8010264 <__smakebuf_r+0x74>
 8010258:	89a3      	ldrh	r3, [r4, #12]
 801025a:	f023 0303 	bic.w	r3, r3, #3
 801025e:	f043 0301 	orr.w	r3, r3, #1
 8010262:	81a3      	strh	r3, [r4, #12]
 8010264:	89a0      	ldrh	r0, [r4, #12]
 8010266:	4305      	orrs	r5, r0
 8010268:	81a5      	strh	r5, [r4, #12]
 801026a:	e7cd      	b.n	8010208 <__smakebuf_r+0x18>
 801026c:	0800fffd 	.word	0x0800fffd

08010270 <_malloc_usable_size_r>:
 8010270:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010274:	1f18      	subs	r0, r3, #4
 8010276:	2b00      	cmp	r3, #0
 8010278:	bfbc      	itt	lt
 801027a:	580b      	ldrlt	r3, [r1, r0]
 801027c:	18c0      	addlt	r0, r0, r3
 801027e:	4770      	bx	lr

08010280 <_raise_r>:
 8010280:	291f      	cmp	r1, #31
 8010282:	b538      	push	{r3, r4, r5, lr}
 8010284:	4604      	mov	r4, r0
 8010286:	460d      	mov	r5, r1
 8010288:	d904      	bls.n	8010294 <_raise_r+0x14>
 801028a:	2316      	movs	r3, #22
 801028c:	6003      	str	r3, [r0, #0]
 801028e:	f04f 30ff 	mov.w	r0, #4294967295
 8010292:	bd38      	pop	{r3, r4, r5, pc}
 8010294:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010296:	b112      	cbz	r2, 801029e <_raise_r+0x1e>
 8010298:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801029c:	b94b      	cbnz	r3, 80102b2 <_raise_r+0x32>
 801029e:	4620      	mov	r0, r4
 80102a0:	f000 f830 	bl	8010304 <_getpid_r>
 80102a4:	462a      	mov	r2, r5
 80102a6:	4601      	mov	r1, r0
 80102a8:	4620      	mov	r0, r4
 80102aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80102ae:	f000 b817 	b.w	80102e0 <_kill_r>
 80102b2:	2b01      	cmp	r3, #1
 80102b4:	d00a      	beq.n	80102cc <_raise_r+0x4c>
 80102b6:	1c59      	adds	r1, r3, #1
 80102b8:	d103      	bne.n	80102c2 <_raise_r+0x42>
 80102ba:	2316      	movs	r3, #22
 80102bc:	6003      	str	r3, [r0, #0]
 80102be:	2001      	movs	r0, #1
 80102c0:	e7e7      	b.n	8010292 <_raise_r+0x12>
 80102c2:	2400      	movs	r4, #0
 80102c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80102c8:	4628      	mov	r0, r5
 80102ca:	4798      	blx	r3
 80102cc:	2000      	movs	r0, #0
 80102ce:	e7e0      	b.n	8010292 <_raise_r+0x12>

080102d0 <raise>:
 80102d0:	4b02      	ldr	r3, [pc, #8]	; (80102dc <raise+0xc>)
 80102d2:	4601      	mov	r1, r0
 80102d4:	6818      	ldr	r0, [r3, #0]
 80102d6:	f7ff bfd3 	b.w	8010280 <_raise_r>
 80102da:	bf00      	nop
 80102dc:	2000011c 	.word	0x2000011c

080102e0 <_kill_r>:
 80102e0:	b538      	push	{r3, r4, r5, lr}
 80102e2:	4d07      	ldr	r5, [pc, #28]	; (8010300 <_kill_r+0x20>)
 80102e4:	2300      	movs	r3, #0
 80102e6:	4604      	mov	r4, r0
 80102e8:	4608      	mov	r0, r1
 80102ea:	4611      	mov	r1, r2
 80102ec:	602b      	str	r3, [r5, #0]
 80102ee:	f7f1 faeb 	bl	80018c8 <_kill>
 80102f2:	1c43      	adds	r3, r0, #1
 80102f4:	d102      	bne.n	80102fc <_kill_r+0x1c>
 80102f6:	682b      	ldr	r3, [r5, #0]
 80102f8:	b103      	cbz	r3, 80102fc <_kill_r+0x1c>
 80102fa:	6023      	str	r3, [r4, #0]
 80102fc:	bd38      	pop	{r3, r4, r5, pc}
 80102fe:	bf00      	nop
 8010300:	20002094 	.word	0x20002094

08010304 <_getpid_r>:
 8010304:	f7f1 bad8 	b.w	80018b8 <_getpid>

08010308 <__sread>:
 8010308:	b510      	push	{r4, lr}
 801030a:	460c      	mov	r4, r1
 801030c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010310:	f000 f894 	bl	801043c <_read_r>
 8010314:	2800      	cmp	r0, #0
 8010316:	bfab      	itete	ge
 8010318:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801031a:	89a3      	ldrhlt	r3, [r4, #12]
 801031c:	181b      	addge	r3, r3, r0
 801031e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010322:	bfac      	ite	ge
 8010324:	6563      	strge	r3, [r4, #84]	; 0x54
 8010326:	81a3      	strhlt	r3, [r4, #12]
 8010328:	bd10      	pop	{r4, pc}

0801032a <__swrite>:
 801032a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801032e:	461f      	mov	r7, r3
 8010330:	898b      	ldrh	r3, [r1, #12]
 8010332:	05db      	lsls	r3, r3, #23
 8010334:	4605      	mov	r5, r0
 8010336:	460c      	mov	r4, r1
 8010338:	4616      	mov	r6, r2
 801033a:	d505      	bpl.n	8010348 <__swrite+0x1e>
 801033c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010340:	2302      	movs	r3, #2
 8010342:	2200      	movs	r2, #0
 8010344:	f000 f868 	bl	8010418 <_lseek_r>
 8010348:	89a3      	ldrh	r3, [r4, #12]
 801034a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801034e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010352:	81a3      	strh	r3, [r4, #12]
 8010354:	4632      	mov	r2, r6
 8010356:	463b      	mov	r3, r7
 8010358:	4628      	mov	r0, r5
 801035a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801035e:	f000 b817 	b.w	8010390 <_write_r>

08010362 <__sseek>:
 8010362:	b510      	push	{r4, lr}
 8010364:	460c      	mov	r4, r1
 8010366:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801036a:	f000 f855 	bl	8010418 <_lseek_r>
 801036e:	1c43      	adds	r3, r0, #1
 8010370:	89a3      	ldrh	r3, [r4, #12]
 8010372:	bf15      	itete	ne
 8010374:	6560      	strne	r0, [r4, #84]	; 0x54
 8010376:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801037a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801037e:	81a3      	strheq	r3, [r4, #12]
 8010380:	bf18      	it	ne
 8010382:	81a3      	strhne	r3, [r4, #12]
 8010384:	bd10      	pop	{r4, pc}

08010386 <__sclose>:
 8010386:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801038a:	f000 b813 	b.w	80103b4 <_close_r>
	...

08010390 <_write_r>:
 8010390:	b538      	push	{r3, r4, r5, lr}
 8010392:	4d07      	ldr	r5, [pc, #28]	; (80103b0 <_write_r+0x20>)
 8010394:	4604      	mov	r4, r0
 8010396:	4608      	mov	r0, r1
 8010398:	4611      	mov	r1, r2
 801039a:	2200      	movs	r2, #0
 801039c:	602a      	str	r2, [r5, #0]
 801039e:	461a      	mov	r2, r3
 80103a0:	f7f1 fac9 	bl	8001936 <_write>
 80103a4:	1c43      	adds	r3, r0, #1
 80103a6:	d102      	bne.n	80103ae <_write_r+0x1e>
 80103a8:	682b      	ldr	r3, [r5, #0]
 80103aa:	b103      	cbz	r3, 80103ae <_write_r+0x1e>
 80103ac:	6023      	str	r3, [r4, #0]
 80103ae:	bd38      	pop	{r3, r4, r5, pc}
 80103b0:	20002094 	.word	0x20002094

080103b4 <_close_r>:
 80103b4:	b538      	push	{r3, r4, r5, lr}
 80103b6:	4d06      	ldr	r5, [pc, #24]	; (80103d0 <_close_r+0x1c>)
 80103b8:	2300      	movs	r3, #0
 80103ba:	4604      	mov	r4, r0
 80103bc:	4608      	mov	r0, r1
 80103be:	602b      	str	r3, [r5, #0]
 80103c0:	f7f1 fad5 	bl	800196e <_close>
 80103c4:	1c43      	adds	r3, r0, #1
 80103c6:	d102      	bne.n	80103ce <_close_r+0x1a>
 80103c8:	682b      	ldr	r3, [r5, #0]
 80103ca:	b103      	cbz	r3, 80103ce <_close_r+0x1a>
 80103cc:	6023      	str	r3, [r4, #0]
 80103ce:	bd38      	pop	{r3, r4, r5, pc}
 80103d0:	20002094 	.word	0x20002094

080103d4 <_fstat_r>:
 80103d4:	b538      	push	{r3, r4, r5, lr}
 80103d6:	4d07      	ldr	r5, [pc, #28]	; (80103f4 <_fstat_r+0x20>)
 80103d8:	2300      	movs	r3, #0
 80103da:	4604      	mov	r4, r0
 80103dc:	4608      	mov	r0, r1
 80103de:	4611      	mov	r1, r2
 80103e0:	602b      	str	r3, [r5, #0]
 80103e2:	f7f1 fad0 	bl	8001986 <_fstat>
 80103e6:	1c43      	adds	r3, r0, #1
 80103e8:	d102      	bne.n	80103f0 <_fstat_r+0x1c>
 80103ea:	682b      	ldr	r3, [r5, #0]
 80103ec:	b103      	cbz	r3, 80103f0 <_fstat_r+0x1c>
 80103ee:	6023      	str	r3, [r4, #0]
 80103f0:	bd38      	pop	{r3, r4, r5, pc}
 80103f2:	bf00      	nop
 80103f4:	20002094 	.word	0x20002094

080103f8 <_isatty_r>:
 80103f8:	b538      	push	{r3, r4, r5, lr}
 80103fa:	4d06      	ldr	r5, [pc, #24]	; (8010414 <_isatty_r+0x1c>)
 80103fc:	2300      	movs	r3, #0
 80103fe:	4604      	mov	r4, r0
 8010400:	4608      	mov	r0, r1
 8010402:	602b      	str	r3, [r5, #0]
 8010404:	f7f1 facf 	bl	80019a6 <_isatty>
 8010408:	1c43      	adds	r3, r0, #1
 801040a:	d102      	bne.n	8010412 <_isatty_r+0x1a>
 801040c:	682b      	ldr	r3, [r5, #0]
 801040e:	b103      	cbz	r3, 8010412 <_isatty_r+0x1a>
 8010410:	6023      	str	r3, [r4, #0]
 8010412:	bd38      	pop	{r3, r4, r5, pc}
 8010414:	20002094 	.word	0x20002094

08010418 <_lseek_r>:
 8010418:	b538      	push	{r3, r4, r5, lr}
 801041a:	4d07      	ldr	r5, [pc, #28]	; (8010438 <_lseek_r+0x20>)
 801041c:	4604      	mov	r4, r0
 801041e:	4608      	mov	r0, r1
 8010420:	4611      	mov	r1, r2
 8010422:	2200      	movs	r2, #0
 8010424:	602a      	str	r2, [r5, #0]
 8010426:	461a      	mov	r2, r3
 8010428:	f7f1 fac8 	bl	80019bc <_lseek>
 801042c:	1c43      	adds	r3, r0, #1
 801042e:	d102      	bne.n	8010436 <_lseek_r+0x1e>
 8010430:	682b      	ldr	r3, [r5, #0]
 8010432:	b103      	cbz	r3, 8010436 <_lseek_r+0x1e>
 8010434:	6023      	str	r3, [r4, #0]
 8010436:	bd38      	pop	{r3, r4, r5, pc}
 8010438:	20002094 	.word	0x20002094

0801043c <_read_r>:
 801043c:	b538      	push	{r3, r4, r5, lr}
 801043e:	4d07      	ldr	r5, [pc, #28]	; (801045c <_read_r+0x20>)
 8010440:	4604      	mov	r4, r0
 8010442:	4608      	mov	r0, r1
 8010444:	4611      	mov	r1, r2
 8010446:	2200      	movs	r2, #0
 8010448:	602a      	str	r2, [r5, #0]
 801044a:	461a      	mov	r2, r3
 801044c:	f7f1 fa56 	bl	80018fc <_read>
 8010450:	1c43      	adds	r3, r0, #1
 8010452:	d102      	bne.n	801045a <_read_r+0x1e>
 8010454:	682b      	ldr	r3, [r5, #0]
 8010456:	b103      	cbz	r3, 801045a <_read_r+0x1e>
 8010458:	6023      	str	r3, [r4, #0]
 801045a:	bd38      	pop	{r3, r4, r5, pc}
 801045c:	20002094 	.word	0x20002094

08010460 <_init>:
 8010460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010462:	bf00      	nop
 8010464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010466:	bc08      	pop	{r3}
 8010468:	469e      	mov	lr, r3
 801046a:	4770      	bx	lr

0801046c <_fini>:
 801046c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801046e:	bf00      	nop
 8010470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010472:	bc08      	pop	{r3}
 8010474:	469e      	mov	lr, r3
 8010476:	4770      	bx	lr
