
ad7606_f446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f04  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080040c8  080040c8  000140c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040e0  080040e0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080040e0  080040e0  000140e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040e8  080040e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040e8  080040e8  000140e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040ec  080040ec  000140ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080040f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a0  2000000c  080040fc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006ac  080040fc  000206ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf4c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f83  00000000  00000000  0002bf88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  0002df10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000978  00000000  00000000  0002e970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020cd8  00000000  00000000  0002f2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c50f  00000000  00000000  0004ffc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c617a  00000000  00000000  0005c4cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00122649  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a98  00000000  00000000  0012269c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080040b0 	.word	0x080040b0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080040b0 	.word	0x080040b0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fc3a 	bl	8000d84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f822 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f95a 	bl	80007cc <MX_GPIO_Init>
  MX_DMA_Init();
 8000518:	f000 f922 	bl	8000760 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 800051c:	f000 f8f2 	bl	8000704 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8000520:	f000 f886 	bl	8000630 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000524:	f000 f8bc 	bl	80006a0 <MX_SPI2_Init>




  //Follow HAL Procedures
  HAL_SPI_DeInit(&hspi1);
 8000528:	4808      	ldr	r0, [pc, #32]	; (800054c <main+0x44>)
 800052a:	f002 fe6c 	bl	8003206 <HAL_SPI_DeInit>
  HAL_SPI_Init(&hspi1);
 800052e:	4807      	ldr	r0, [pc, #28]	; (800054c <main+0x44>)
 8000530:	f002 fde0 	bl	80030f4 <HAL_SPI_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 HAL_GPIO_WritePin(AD_CS_GPIO_Port, AD_CS_Pin, RESET);
 8000534:	2200      	movs	r2, #0
 8000536:	2110      	movs	r1, #16
 8000538:	4805      	ldr	r0, [pc, #20]	; (8000550 <main+0x48>)
 800053a:	f001 fc21 	bl	8001d80 <HAL_GPIO_WritePin>
	 //HAL_SPI_Transmit(&hspi2, &data_send, 1, 100);
	 //HAL_SPI_Transmit_DMA(&hspi2, &data_send, 1);
	 HAL_SPI_Receive_DMA(&hspi1, &data_receive, 1);
 800053e:	2201      	movs	r2, #1
 8000540:	4904      	ldr	r1, [pc, #16]	; (8000554 <main+0x4c>)
 8000542:	4802      	ldr	r0, [pc, #8]	; (800054c <main+0x44>)
 8000544:	f002 fe88 	bl	8003258 <HAL_SPI_Receive_DMA>
	 HAL_GPIO_WritePin(AD_CS_GPIO_Port, AD_CS_Pin, RESET);
 8000548:	e7f4      	b.n	8000534 <main+0x2c>
 800054a:	bf00      	nop
 800054c:	20000028 	.word	0x20000028
 8000550:	40020000 	.word	0x40020000
 8000554:	200006a4 	.word	0x200006a4

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b094      	sub	sp, #80	; 0x50
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 031c 	add.w	r3, r7, #28
 8000562:	2234      	movs	r2, #52	; 0x34
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f003 fd9a 	bl	80040a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	f107 0308 	add.w	r3, r7, #8
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	4b29      	ldr	r3, [pc, #164]	; (8000628 <SystemClock_Config+0xd0>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000584:	4a28      	ldr	r2, [pc, #160]	; (8000628 <SystemClock_Config+0xd0>)
 8000586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058a:	6413      	str	r3, [r2, #64]	; 0x40
 800058c:	4b26      	ldr	r3, [pc, #152]	; (8000628 <SystemClock_Config+0xd0>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000598:	2300      	movs	r3, #0
 800059a:	603b      	str	r3, [r7, #0]
 800059c:	4b23      	ldr	r3, [pc, #140]	; (800062c <SystemClock_Config+0xd4>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005a4:	4a21      	ldr	r2, [pc, #132]	; (800062c <SystemClock_Config+0xd4>)
 80005a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005aa:	6013      	str	r3, [r2, #0]
 80005ac:	4b1f      	ldr	r3, [pc, #124]	; (800062c <SystemClock_Config+0xd4>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b4:	603b      	str	r3, [r7, #0]
 80005b6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b8:	2301      	movs	r3, #1
 80005ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005c0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c2:	2302      	movs	r3, #2
 80005c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 13;
 80005cc:	230d      	movs	r3, #13
 80005ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005d0:	2348      	movs	r3, #72	; 0x48
 80005d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d4:	2302      	movs	r3, #2
 80005d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005d8:	2303      	movs	r3, #3
 80005da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005dc:	2302      	movs	r3, #2
 80005de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e0:	f107 031c 	add.w	r3, r7, #28
 80005e4:	4618      	mov	r0, r3
 80005e6:	f002 fae7 	bl	8002bb8 <HAL_RCC_OscConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005f0:	f000 f99e 	bl	8000930 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f4:	230f      	movs	r3, #15
 80005f6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80005f8:	2301      	movs	r3, #1
 80005fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000608:	f107 0308 	add.w	r3, r7, #8
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f001 fd18 	bl	8002044 <HAL_RCC_ClockConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800061a:	f000 f989 	bl	8000930 <Error_Handler>
  }
}
 800061e:	bf00      	nop
 8000620:	3750      	adds	r7, #80	; 0x50
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40023800 	.word	0x40023800
 800062c:	40007000 	.word	0x40007000

08000630 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000634:	4b18      	ldr	r3, [pc, #96]	; (8000698 <MX_SPI1_Init+0x68>)
 8000636:	4a19      	ldr	r2, [pc, #100]	; (800069c <MX_SPI1_Init+0x6c>)
 8000638:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800063a:	4b17      	ldr	r3, [pc, #92]	; (8000698 <MX_SPI1_Init+0x68>)
 800063c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000640:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000642:	4b15      	ldr	r3, [pc, #84]	; (8000698 <MX_SPI1_Init+0x68>)
 8000644:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000648:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800064a:	4b13      	ldr	r3, [pc, #76]	; (8000698 <MX_SPI1_Init+0x68>)
 800064c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000650:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000652:	4b11      	ldr	r3, [pc, #68]	; (8000698 <MX_SPI1_Init+0x68>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000658:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <MX_SPI1_Init+0x68>)
 800065a:	2200      	movs	r2, #0
 800065c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800065e:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <MX_SPI1_Init+0x68>)
 8000660:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000664:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000666:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <MX_SPI1_Init+0x68>)
 8000668:	2200      	movs	r2, #0
 800066a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800066c:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <MX_SPI1_Init+0x68>)
 800066e:	2200      	movs	r2, #0
 8000670:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000672:	4b09      	ldr	r3, [pc, #36]	; (8000698 <MX_SPI1_Init+0x68>)
 8000674:	2200      	movs	r2, #0
 8000676:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000678:	4b07      	ldr	r3, [pc, #28]	; (8000698 <MX_SPI1_Init+0x68>)
 800067a:	2200      	movs	r2, #0
 800067c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <MX_SPI1_Init+0x68>)
 8000680:	220a      	movs	r2, #10
 8000682:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000684:	4804      	ldr	r0, [pc, #16]	; (8000698 <MX_SPI1_Init+0x68>)
 8000686:	f002 fd35 	bl	80030f4 <HAL_SPI_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000690:	f000 f94e 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000028 	.word	0x20000028
 800069c:	40013000 	.word	0x40013000

080006a0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80006a4:	4b15      	ldr	r3, [pc, #84]	; (80006fc <MX_SPI2_Init+0x5c>)
 80006a6:	4a16      	ldr	r2, [pc, #88]	; (8000700 <MX_SPI2_Init+0x60>)
 80006a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80006aa:	4b14      	ldr	r3, [pc, #80]	; (80006fc <MX_SPI2_Init+0x5c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <MX_SPI2_Init+0x5c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_SPI2_Init+0x5c>)
 80006b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006bc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_SPI2_Init+0x5c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006c4:	4b0d      	ldr	r3, [pc, #52]	; (80006fc <MX_SPI2_Init+0x5c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80006ca:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <MX_SPI2_Init+0x5c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006d0:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <MX_SPI2_Init+0x5c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <MX_SPI2_Init+0x5c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <MX_SPI2_Init+0x5c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80006e2:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MX_SPI2_Init+0x5c>)
 80006e4:	220a      	movs	r2, #10
 80006e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006e8:	4804      	ldr	r0, [pc, #16]	; (80006fc <MX_SPI2_Init+0x5c>)
 80006ea:	f002 fd03 	bl	80030f4 <HAL_SPI_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_SPI2_Init+0x58>
  {
    Error_Handler();
 80006f4:	f000 f91c 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000080 	.word	0x20000080
 8000700:	40003800 	.word	0x40003800

08000704 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000708:	4b14      	ldr	r3, [pc, #80]	; (800075c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800070a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800070e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000712:	2206      	movs	r2, #6
 8000714:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000718:	2202      	movs	r2, #2
 800071a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000724:	2202      	movs	r2, #2
 8000726:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800072e:	4b0b      	ldr	r3, [pc, #44]	; (800075c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000736:	2200      	movs	r2, #0
 8000738:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800073a:	4b08      	ldr	r3, [pc, #32]	; (800075c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000742:	2200      	movs	r2, #0
 8000744:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000746:	4805      	ldr	r0, [pc, #20]	; (800075c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000748:	f001 fb33 	bl	8001db2 <HAL_PCD_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000752:	f000 f8ed 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000198 	.word	0x20000198

08000760 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <MX_DMA_Init+0x68>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a16      	ldr	r2, [pc, #88]	; (80007c8 <MX_DMA_Init+0x68>)
 8000770:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_DMA_Init+0x68>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	603b      	str	r3, [r7, #0]
 8000786:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <MX_DMA_Init+0x68>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a0f      	ldr	r2, [pc, #60]	; (80007c8 <MX_DMA_Init+0x68>)
 800078c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <MX_DMA_Init+0x68>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800079e:	2200      	movs	r2, #0
 80007a0:	2100      	movs	r1, #0
 80007a2:	200f      	movs	r0, #15
 80007a4:	f000 fc5f 	bl	8001066 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80007a8:	200f      	movs	r0, #15
 80007aa:	f000 fc78 	bl	800109e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2100      	movs	r1, #0
 80007b2:	2038      	movs	r0, #56	; 0x38
 80007b4:	f000 fc57 	bl	8001066 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80007b8:	2038      	movs	r0, #56	; 0x38
 80007ba:	f000 fc70 	bl	800109e <HAL_NVIC_EnableIRQ>

}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40023800 	.word	0x40023800

080007cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08a      	sub	sp, #40	; 0x28
 80007d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	4b4f      	ldr	r3, [pc, #316]	; (8000924 <MX_GPIO_Init+0x158>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a4e      	ldr	r2, [pc, #312]	; (8000924 <MX_GPIO_Init+0x158>)
 80007ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b4c      	ldr	r3, [pc, #304]	; (8000924 <MX_GPIO_Init+0x158>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	4b48      	ldr	r3, [pc, #288]	; (8000924 <MX_GPIO_Init+0x158>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a47      	ldr	r2, [pc, #284]	; (8000924 <MX_GPIO_Init+0x158>)
 8000808:	f043 0304 	orr.w	r3, r3, #4
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b45      	ldr	r3, [pc, #276]	; (8000924 <MX_GPIO_Init+0x158>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0304 	and.w	r3, r3, #4
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	4b41      	ldr	r3, [pc, #260]	; (8000924 <MX_GPIO_Init+0x158>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a40      	ldr	r2, [pc, #256]	; (8000924 <MX_GPIO_Init+0x158>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b3e      	ldr	r3, [pc, #248]	; (8000924 <MX_GPIO_Init+0x158>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	4b3a      	ldr	r3, [pc, #232]	; (8000924 <MX_GPIO_Init+0x158>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a39      	ldr	r2, [pc, #228]	; (8000924 <MX_GPIO_Init+0x158>)
 8000840:	f043 0302 	orr.w	r3, r3, #2
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b37      	ldr	r3, [pc, #220]	; (8000924 <MX_GPIO_Init+0x158>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0302 	and.w	r3, r3, #2
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD_RST_Pin|AD_OS2_Pin, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	210c      	movs	r1, #12
 8000856:	4834      	ldr	r0, [pc, #208]	; (8000928 <MX_GPIO_Init+0x15c>)
 8000858:	f001 fa92 	bl	8001d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AD_OS1_Pin|AD_OS0_Pin, GPIO_PIN_RESET);
 800085c:	2200      	movs	r2, #0
 800085e:	2103      	movs	r1, #3
 8000860:	4832      	ldr	r0, [pc, #200]	; (800092c <MX_GPIO_Init+0x160>)
 8000862:	f001 fa8d 	bl	8001d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD_CS_GPIO_Port, AD_CS_Pin, GPIO_PIN_SET);
 8000866:	2201      	movs	r2, #1
 8000868:	2110      	movs	r1, #16
 800086a:	4830      	ldr	r0, [pc, #192]	; (800092c <MX_GPIO_Init+0x160>)
 800086c:	f001 fa88 	bl	8001d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : AD_RST_Pin AD_OS2_Pin */
  GPIO_InitStruct.Pin = AD_RST_Pin|AD_OS2_Pin;
 8000870:	230c      	movs	r3, #12
 8000872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	2301      	movs	r3, #1
 8000876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	4619      	mov	r1, r3
 8000886:	4828      	ldr	r0, [pc, #160]	; (8000928 <MX_GPIO_Init+0x15c>)
 8000888:	f000 fff2 	bl	8001870 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD_OS1_Pin AD_OS0_Pin */
  GPIO_InitStruct.Pin = AD_OS1_Pin|AD_OS0_Pin;
 800088c:	2303      	movs	r3, #3
 800088e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000890:	2301      	movs	r3, #1
 8000892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2300      	movs	r3, #0
 800089a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	4619      	mov	r1, r3
 80008a2:	4822      	ldr	r0, [pc, #136]	; (800092c <MX_GPIO_Init+0x160>)
 80008a4:	f000 ffe4 	bl	8001870 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008a8:	2304      	movs	r3, #4
 80008aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ac:	2302      	movs	r3, #2
 80008ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	2300      	movs	r3, #0
 80008b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80008b8:	2301      	movs	r3, #1
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	4619      	mov	r1, r3
 80008c2:	481a      	ldr	r0, [pc, #104]	; (800092c <MX_GPIO_Init+0x160>)
 80008c4:	f000 ffd4 	bl	8001870 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008c8:	2308      	movs	r3, #8
 80008ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008cc:	2302      	movs	r3, #2
 80008ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80008d8:	2302      	movs	r3, #2
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	4619      	mov	r1, r3
 80008e2:	4812      	ldr	r0, [pc, #72]	; (800092c <MX_GPIO_Init+0x160>)
 80008e4:	f000 ffc4 	bl	8001870 <HAL_GPIO_Init>

  /*Configure GPIO pin : AD_CS_Pin */
  GPIO_InitStruct.Pin = AD_CS_Pin;
 80008e8:	2310      	movs	r3, #16
 80008ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ec:	2301      	movs	r3, #1
 80008ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80008f4:	2301      	movs	r3, #1
 80008f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(AD_CS_GPIO_Port, &GPIO_InitStruct);
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	4619      	mov	r1, r3
 80008fe:	480b      	ldr	r0, [pc, #44]	; (800092c <MX_GPIO_Init+0x160>)
 8000900:	f000 ffb6 	bl	8001870 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD_BUSY_Pin AD_FRST_Pin */
  GPIO_InitStruct.Pin = AD_BUSY_Pin|AD_FRST_Pin;
 8000904:	2330      	movs	r3, #48	; 0x30
 8000906:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000908:	2300      	movs	r3, #0
 800090a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4619      	mov	r1, r3
 8000916:	4804      	ldr	r0, [pc, #16]	; (8000928 <MX_GPIO_Init+0x15c>)
 8000918:	f000 ffaa 	bl	8001870 <HAL_GPIO_Init>

}
 800091c:	bf00      	nop
 800091e:	3728      	adds	r7, #40	; 0x28
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40023800 	.word	0x40023800
 8000928:	40020800 	.word	0x40020800
 800092c:	40020000 	.word	0x40020000

08000930 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000934:	b672      	cpsid	i
}
 8000936:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000938:	e7fe      	b.n	8000938 <Error_Handler+0x8>
	...

0800093c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	607b      	str	r3, [r7, #4]
 8000946:	4b10      	ldr	r3, [pc, #64]	; (8000988 <HAL_MspInit+0x4c>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094a:	4a0f      	ldr	r2, [pc, #60]	; (8000988 <HAL_MspInit+0x4c>)
 800094c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000950:	6453      	str	r3, [r2, #68]	; 0x44
 8000952:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <HAL_MspInit+0x4c>)
 8000954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	603b      	str	r3, [r7, #0]
 8000962:	4b09      	ldr	r3, [pc, #36]	; (8000988 <HAL_MspInit+0x4c>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	4a08      	ldr	r2, [pc, #32]	; (8000988 <HAL_MspInit+0x4c>)
 8000968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800096c:	6413      	str	r3, [r2, #64]	; 0x40
 800096e:	4b06      	ldr	r3, [pc, #24]	; (8000988 <HAL_MspInit+0x4c>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	40023800 	.word	0x40023800

0800098c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08c      	sub	sp, #48	; 0x30
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000994:	f107 031c 	add.w	r3, r7, #28
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a61      	ldr	r2, [pc, #388]	; (8000b30 <HAL_SPI_MspInit+0x1a4>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d15a      	bne.n	8000a64 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	61bb      	str	r3, [r7, #24]
 80009b2:	4b60      	ldr	r3, [pc, #384]	; (8000b34 <HAL_SPI_MspInit+0x1a8>)
 80009b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b6:	4a5f      	ldr	r2, [pc, #380]	; (8000b34 <HAL_SPI_MspInit+0x1a8>)
 80009b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009bc:	6453      	str	r3, [r2, #68]	; 0x44
 80009be:	4b5d      	ldr	r3, [pc, #372]	; (8000b34 <HAL_SPI_MspInit+0x1a8>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	617b      	str	r3, [r7, #20]
 80009ce:	4b59      	ldr	r3, [pc, #356]	; (8000b34 <HAL_SPI_MspInit+0x1a8>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a58      	ldr	r2, [pc, #352]	; (8000b34 <HAL_SPI_MspInit+0x1a8>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b56      	ldr	r3, [pc, #344]	; (8000b34 <HAL_SPI_MspInit+0x1a8>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	617b      	str	r3, [r7, #20]
 80009e4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = AD_SCK_Pin|AD_DOU_A_Pin;
 80009e6:	2360      	movs	r3, #96	; 0x60
 80009e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ea:	2302      	movs	r3, #2
 80009ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f2:	2303      	movs	r3, #3
 80009f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009f6:	2305      	movs	r3, #5
 80009f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	484d      	ldr	r0, [pc, #308]	; (8000b38 <HAL_SPI_MspInit+0x1ac>)
 8000a02:	f000 ff35 	bl	8001870 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8000a06:	4b4d      	ldr	r3, [pc, #308]	; (8000b3c <HAL_SPI_MspInit+0x1b0>)
 8000a08:	4a4d      	ldr	r2, [pc, #308]	; (8000b40 <HAL_SPI_MspInit+0x1b4>)
 8000a0a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000a0c:	4b4b      	ldr	r3, [pc, #300]	; (8000b3c <HAL_SPI_MspInit+0x1b0>)
 8000a0e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000a12:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a14:	4b49      	ldr	r3, [pc, #292]	; (8000b3c <HAL_SPI_MspInit+0x1b0>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a1a:	4b48      	ldr	r3, [pc, #288]	; (8000b3c <HAL_SPI_MspInit+0x1b0>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a20:	4b46      	ldr	r3, [pc, #280]	; (8000b3c <HAL_SPI_MspInit+0x1b0>)
 8000a22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a26:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a28:	4b44      	ldr	r3, [pc, #272]	; (8000b3c <HAL_SPI_MspInit+0x1b0>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a2e:	4b43      	ldr	r3, [pc, #268]	; (8000b3c <HAL_SPI_MspInit+0x1b0>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000a34:	4b41      	ldr	r3, [pc, #260]	; (8000b3c <HAL_SPI_MspInit+0x1b0>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a3a:	4b40      	ldr	r3, [pc, #256]	; (8000b3c <HAL_SPI_MspInit+0x1b0>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a40:	4b3e      	ldr	r3, [pc, #248]	; (8000b3c <HAL_SPI_MspInit+0x1b0>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000a46:	483d      	ldr	r0, [pc, #244]	; (8000b3c <HAL_SPI_MspInit+0x1b0>)
 8000a48:	f000 fb44 	bl	80010d4 <HAL_DMA_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8000a52:	f7ff ff6d 	bl	8000930 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4a38      	ldr	r2, [pc, #224]	; (8000b3c <HAL_SPI_MspInit+0x1b0>)
 8000a5a:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a5c:	4a37      	ldr	r2, [pc, #220]	; (8000b3c <HAL_SPI_MspInit+0x1b0>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000a62:	e060      	b.n	8000b26 <HAL_SPI_MspInit+0x19a>
  else if(hspi->Instance==SPI2)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a36      	ldr	r2, [pc, #216]	; (8000b44 <HAL_SPI_MspInit+0x1b8>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d15b      	bne.n	8000b26 <HAL_SPI_MspInit+0x19a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	613b      	str	r3, [r7, #16]
 8000a72:	4b30      	ldr	r3, [pc, #192]	; (8000b34 <HAL_SPI_MspInit+0x1a8>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	4a2f      	ldr	r2, [pc, #188]	; (8000b34 <HAL_SPI_MspInit+0x1a8>)
 8000a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7e:	4b2d      	ldr	r3, [pc, #180]	; (8000b34 <HAL_SPI_MspInit+0x1a8>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a86:	613b      	str	r3, [r7, #16]
 8000a88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	4b29      	ldr	r3, [pc, #164]	; (8000b34 <HAL_SPI_MspInit+0x1a8>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a28      	ldr	r2, [pc, #160]	; (8000b34 <HAL_SPI_MspInit+0x1a8>)
 8000a94:	f043 0302 	orr.w	r3, r3, #2
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b26      	ldr	r3, [pc, #152]	; (8000b34 <HAL_SPI_MspInit+0x1a8>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0302 	and.w	r3, r3, #2
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14;
 8000aa6:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8000aaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aac:	2302      	movs	r3, #2
 8000aae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ab8:	2305      	movs	r3, #5
 8000aba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000abc:	f107 031c 	add.w	r3, r7, #28
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4821      	ldr	r0, [pc, #132]	; (8000b48 <HAL_SPI_MspInit+0x1bc>)
 8000ac4:	f000 fed4 	bl	8001870 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000ac8:	4b20      	ldr	r3, [pc, #128]	; (8000b4c <HAL_SPI_MspInit+0x1c0>)
 8000aca:	4a21      	ldr	r2, [pc, #132]	; (8000b50 <HAL_SPI_MspInit+0x1c4>)
 8000acc:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000ace:	4b1f      	ldr	r3, [pc, #124]	; (8000b4c <HAL_SPI_MspInit+0x1c0>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ad4:	4b1d      	ldr	r3, [pc, #116]	; (8000b4c <HAL_SPI_MspInit+0x1c0>)
 8000ad6:	2240      	movs	r2, #64	; 0x40
 8000ad8:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ada:	4b1c      	ldr	r3, [pc, #112]	; (8000b4c <HAL_SPI_MspInit+0x1c0>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ae0:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <HAL_SPI_MspInit+0x1c0>)
 8000ae2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ae6:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ae8:	4b18      	ldr	r3, [pc, #96]	; (8000b4c <HAL_SPI_MspInit+0x1c0>)
 8000aea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000aee:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000af0:	4b16      	ldr	r3, [pc, #88]	; (8000b4c <HAL_SPI_MspInit+0x1c0>)
 8000af2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000af6:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000af8:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <HAL_SPI_MspInit+0x1c0>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000afe:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <HAL_SPI_MspInit+0x1c0>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b04:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <HAL_SPI_MspInit+0x1c0>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000b0a:	4810      	ldr	r0, [pc, #64]	; (8000b4c <HAL_SPI_MspInit+0x1c0>)
 8000b0c:	f000 fae2 	bl	80010d4 <HAL_DMA_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <HAL_SPI_MspInit+0x18e>
      Error_Handler();
 8000b16:	f7ff ff0b 	bl	8000930 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4a0b      	ldr	r2, [pc, #44]	; (8000b4c <HAL_SPI_MspInit+0x1c0>)
 8000b1e:	649a      	str	r2, [r3, #72]	; 0x48
 8000b20:	4a0a      	ldr	r2, [pc, #40]	; (8000b4c <HAL_SPI_MspInit+0x1c0>)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b26:	bf00      	nop
 8000b28:	3730      	adds	r7, #48	; 0x30
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40013000 	.word	0x40013000
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40020000 	.word	0x40020000
 8000b3c:	200000d8 	.word	0x200000d8
 8000b40:	40026410 	.word	0x40026410
 8000b44:	40003800 	.word	0x40003800
 8000b48:	40020400 	.word	0x40020400
 8000b4c:	20000138 	.word	0x20000138
 8000b50:	40026070 	.word	0x40026070

08000b54 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a15      	ldr	r2, [pc, #84]	; (8000bb8 <HAL_SPI_MspDeInit+0x64>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d10f      	bne.n	8000b86 <HAL_SPI_MspDeInit+0x32>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8000b66:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <HAL_SPI_MspDeInit+0x68>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6a:	4a14      	ldr	r2, [pc, #80]	; (8000bbc <HAL_SPI_MspDeInit+0x68>)
 8000b6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000b70:	6453      	str	r3, [r2, #68]	; 0x44

    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    HAL_GPIO_DeInit(GPIOA, AD_SCK_Pin|AD_DOU_A_Pin);
 8000b72:	2160      	movs	r1, #96	; 0x60
 8000b74:	4812      	ldr	r0, [pc, #72]	; (8000bc0 <HAL_SPI_MspDeInit+0x6c>)
 8000b76:	f001 f80f 	bl	8001b98 <HAL_GPIO_DeInit>

    /* SPI1 DMA DeInit */
    HAL_DMA_DeInit(hspi->hdmarx);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f000 fb56 	bl	8001230 <HAL_DMA_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 8000b84:	e014      	b.n	8000bb0 <HAL_SPI_MspDeInit+0x5c>
  else if(hspi->Instance==SPI2)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a0e      	ldr	r2, [pc, #56]	; (8000bc4 <HAL_SPI_MspDeInit+0x70>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d10f      	bne.n	8000bb0 <HAL_SPI_MspDeInit+0x5c>
    __HAL_RCC_SPI2_CLK_DISABLE();
 8000b90:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <HAL_SPI_MspDeInit+0x68>)
 8000b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b94:	4a09      	ldr	r2, [pc, #36]	; (8000bbc <HAL_SPI_MspDeInit+0x68>)
 8000b96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000b9a:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14);
 8000b9c:	f44f 41a8 	mov.w	r1, #21504	; 0x5400
 8000ba0:	4809      	ldr	r0, [pc, #36]	; (8000bc8 <HAL_SPI_MspDeInit+0x74>)
 8000ba2:	f000 fff9 	bl	8001b98 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 fb40 	bl	8001230 <HAL_DMA_DeInit>
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40013000 	.word	0x40013000
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40020000 	.word	0x40020000
 8000bc4:	40003800 	.word	0x40003800
 8000bc8:	40020400 	.word	0x40020400

08000bcc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b0a0      	sub	sp, #128	; 0x80
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000be4:	f107 0310 	add.w	r3, r7, #16
 8000be8:	225c      	movs	r2, #92	; 0x5c
 8000bea:	2100      	movs	r1, #0
 8000bec:	4618      	mov	r0, r3
 8000bee:	f003 fa57 	bl	80040a0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000bfa:	d141      	bne.n	8000c80 <HAL_PCD_MspInit+0xb4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000bfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c00:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000c02:	2300      	movs	r3, #0
 8000c04:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c06:	f107 0310 	add.w	r3, r7, #16
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f001 fb00 	bl	8002210 <HAL_RCCEx_PeriphCLKConfig>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8000c16:	f7ff fe8b 	bl	8000930 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <HAL_PCD_MspInit+0xbc>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a19      	ldr	r2, [pc, #100]	; (8000c88 <HAL_PCD_MspInit+0xbc>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b17      	ldr	r3, [pc, #92]	; (8000c88 <HAL_PCD_MspInit+0xbc>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c36:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c3a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c44:	2303      	movs	r3, #3
 8000c46:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c48:	230a      	movs	r3, #10
 8000c4a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000c50:	4619      	mov	r1, r3
 8000c52:	480e      	ldr	r0, [pc, #56]	; (8000c8c <HAL_PCD_MspInit+0xc0>)
 8000c54:	f000 fe0c 	bl	8001870 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c58:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <HAL_PCD_MspInit+0xbc>)
 8000c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c5c:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <HAL_PCD_MspInit+0xbc>)
 8000c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c62:	6353      	str	r3, [r2, #52]	; 0x34
 8000c64:	2300      	movs	r3, #0
 8000c66:	60bb      	str	r3, [r7, #8]
 8000c68:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <HAL_PCD_MspInit+0xbc>)
 8000c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6c:	4a06      	ldr	r2, [pc, #24]	; (8000c88 <HAL_PCD_MspInit+0xbc>)
 8000c6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c72:	6453      	str	r3, [r2, #68]	; 0x44
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <HAL_PCD_MspInit+0xbc>)
 8000c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000c80:	bf00      	nop
 8000c82:	3780      	adds	r7, #128	; 0x80
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40020000 	.word	0x40020000

08000c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <NMI_Handler+0x4>

08000c96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <HardFault_Handler+0x4>

08000c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <MemManage_Handler+0x4>

08000ca2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <BusFault_Handler+0x4>

08000ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <UsageFault_Handler+0x4>

08000cae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cdc:	f000 f8a4 	bl	8000e28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000ce8:	4802      	ldr	r0, [pc, #8]	; (8000cf4 <DMA1_Stream4_IRQHandler+0x10>)
 8000cea:	f000 fb57 	bl	800139c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000138 	.word	0x20000138

08000cf8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000cfc:	4802      	ldr	r0, [pc, #8]	; (8000d08 <DMA2_Stream0_IRQHandler+0x10>)
 8000cfe:	f000 fb4d 	bl	800139c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	200000d8 	.word	0x200000d8

08000d0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <SystemInit+0x20>)
 8000d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d16:	4a05      	ldr	r2, [pc, #20]	; (8000d2c <SystemInit+0x20>)
 8000d18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d34:	480d      	ldr	r0, [pc, #52]	; (8000d6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d36:	490e      	ldr	r1, [pc, #56]	; (8000d70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d38:	4a0e      	ldr	r2, [pc, #56]	; (8000d74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d3c:	e002      	b.n	8000d44 <LoopCopyDataInit>

08000d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d42:	3304      	adds	r3, #4

08000d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d48:	d3f9      	bcc.n	8000d3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d4a:	4a0b      	ldr	r2, [pc, #44]	; (8000d78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d4c:	4c0b      	ldr	r4, [pc, #44]	; (8000d7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d50:	e001      	b.n	8000d56 <LoopFillZerobss>

08000d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d54:	3204      	adds	r2, #4

08000d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d58:	d3fb      	bcc.n	8000d52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d5a:	f7ff ffd7 	bl	8000d0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d5e:	f003 f97b 	bl	8004058 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d62:	f7ff fbd1 	bl	8000508 <main>
  bx  lr    
 8000d66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d70:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d74:	080040f0 	.word	0x080040f0
  ldr r2, =_sbss
 8000d78:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d7c:	200006ac 	.word	0x200006ac

08000d80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d80:	e7fe      	b.n	8000d80 <ADC_IRQHandler>
	...

08000d84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d88:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <HAL_Init+0x40>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a0d      	ldr	r2, [pc, #52]	; (8000dc4 <HAL_Init+0x40>)
 8000d8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d94:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <HAL_Init+0x40>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <HAL_Init+0x40>)
 8000d9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <HAL_Init+0x40>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a07      	ldr	r2, [pc, #28]	; (8000dc4 <HAL_Init+0x40>)
 8000da6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000daa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dac:	2003      	movs	r0, #3
 8000dae:	f000 f94f 	bl	8001050 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000db2:	200f      	movs	r0, #15
 8000db4:	f000 f808 	bl	8000dc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db8:	f7ff fdc0 	bl	800093c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40023c00 	.word	0x40023c00

08000dc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd0:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <HAL_InitTick+0x54>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <HAL_InitTick+0x58>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 f967 	bl	80010ba <HAL_SYSTICK_Config>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e00e      	b.n	8000e14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2b0f      	cmp	r3, #15
 8000dfa:	d80a      	bhi.n	8000e12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295
 8000e04:	f000 f92f 	bl	8001066 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e08:	4a06      	ldr	r2, [pc, #24]	; (8000e24 <HAL_InitTick+0x5c>)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e000      	b.n	8000e14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20000000 	.word	0x20000000
 8000e20:	20000008 	.word	0x20000008
 8000e24:	20000004 	.word	0x20000004

08000e28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_IncTick+0x20>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	461a      	mov	r2, r3
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <HAL_IncTick+0x24>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4413      	add	r3, r2
 8000e38:	4a04      	ldr	r2, [pc, #16]	; (8000e4c <HAL_IncTick+0x24>)
 8000e3a:	6013      	str	r3, [r2, #0]
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	20000008 	.word	0x20000008
 8000e4c:	200006a8 	.word	0x200006a8

08000e50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  return uwTick;
 8000e54:	4b03      	ldr	r3, [pc, #12]	; (8000e64 <HAL_GetTick+0x14>)
 8000e56:	681b      	ldr	r3, [r3, #0]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	200006a8 	.word	0x200006a8

08000e68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e70:	f7ff ffee 	bl	8000e50 <HAL_GetTick>
 8000e74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e80:	d005      	beq.n	8000e8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e82:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <HAL_Delay+0x44>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	461a      	mov	r2, r3
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e8e:	bf00      	nop
 8000e90:	f7ff ffde 	bl	8000e50 <HAL_GetTick>
 8000e94:	4602      	mov	r2, r0
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	68fa      	ldr	r2, [r7, #12]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d8f7      	bhi.n	8000e90 <HAL_Delay+0x28>
  {
  }
}
 8000ea0:	bf00      	nop
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000008 	.word	0x20000008

08000eb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ec6:	68ba      	ldr	r2, [r7, #8]
 8000ec8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ecc:	4013      	ands	r3, r2
 8000ece:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ee2:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	60d3      	str	r3, [r2, #12]
}
 8000ee8:	bf00      	nop
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <__NVIC_GetPriorityGrouping+0x18>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	0a1b      	lsrs	r3, r3, #8
 8000f02:	f003 0307 	and.w	r3, r3, #7
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	db0b      	blt.n	8000f3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	f003 021f 	and.w	r2, r3, #31
 8000f2c:	4907      	ldr	r1, [pc, #28]	; (8000f4c <__NVIC_EnableIRQ+0x38>)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	095b      	lsrs	r3, r3, #5
 8000f34:	2001      	movs	r0, #1
 8000f36:	fa00 f202 	lsl.w	r2, r0, r2
 8000f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	e000e100 	.word	0xe000e100

08000f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	6039      	str	r1, [r7, #0]
 8000f5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	db0a      	blt.n	8000f7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	490c      	ldr	r1, [pc, #48]	; (8000f9c <__NVIC_SetPriority+0x4c>)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	0112      	lsls	r2, r2, #4
 8000f70:	b2d2      	uxtb	r2, r2
 8000f72:	440b      	add	r3, r1
 8000f74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f78:	e00a      	b.n	8000f90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	4908      	ldr	r1, [pc, #32]	; (8000fa0 <__NVIC_SetPriority+0x50>)
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	f003 030f 	and.w	r3, r3, #15
 8000f86:	3b04      	subs	r3, #4
 8000f88:	0112      	lsls	r2, r2, #4
 8000f8a:	b2d2      	uxtb	r2, r2
 8000f8c:	440b      	add	r3, r1
 8000f8e:	761a      	strb	r2, [r3, #24]
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000e100 	.word	0xe000e100
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b089      	sub	sp, #36	; 0x24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	f1c3 0307 	rsb	r3, r3, #7
 8000fbe:	2b04      	cmp	r3, #4
 8000fc0:	bf28      	it	cs
 8000fc2:	2304      	movcs	r3, #4
 8000fc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3304      	adds	r3, #4
 8000fca:	2b06      	cmp	r3, #6
 8000fcc:	d902      	bls.n	8000fd4 <NVIC_EncodePriority+0x30>
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	3b03      	subs	r3, #3
 8000fd2:	e000      	b.n	8000fd6 <NVIC_EncodePriority+0x32>
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43da      	mvns	r2, r3
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	401a      	ands	r2, r3
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fec:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff6:	43d9      	mvns	r1, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ffc:	4313      	orrs	r3, r2
         );
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3724      	adds	r7, #36	; 0x24
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
	...

0800100c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3b01      	subs	r3, #1
 8001018:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800101c:	d301      	bcc.n	8001022 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800101e:	2301      	movs	r3, #1
 8001020:	e00f      	b.n	8001042 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001022:	4a0a      	ldr	r2, [pc, #40]	; (800104c <SysTick_Config+0x40>)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3b01      	subs	r3, #1
 8001028:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800102a:	210f      	movs	r1, #15
 800102c:	f04f 30ff 	mov.w	r0, #4294967295
 8001030:	f7ff ff8e 	bl	8000f50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001034:	4b05      	ldr	r3, [pc, #20]	; (800104c <SysTick_Config+0x40>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800103a:	4b04      	ldr	r3, [pc, #16]	; (800104c <SysTick_Config+0x40>)
 800103c:	2207      	movs	r2, #7
 800103e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	e000e010 	.word	0xe000e010

08001050 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f7ff ff29 	bl	8000eb0 <__NVIC_SetPriorityGrouping>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001066:	b580      	push	{r7, lr}
 8001068:	b086      	sub	sp, #24
 800106a:	af00      	add	r7, sp, #0
 800106c:	4603      	mov	r3, r0
 800106e:	60b9      	str	r1, [r7, #8]
 8001070:	607a      	str	r2, [r7, #4]
 8001072:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001078:	f7ff ff3e 	bl	8000ef8 <__NVIC_GetPriorityGrouping>
 800107c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	68b9      	ldr	r1, [r7, #8]
 8001082:	6978      	ldr	r0, [r7, #20]
 8001084:	f7ff ff8e 	bl	8000fa4 <NVIC_EncodePriority>
 8001088:	4602      	mov	r2, r0
 800108a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800108e:	4611      	mov	r1, r2
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ff5d 	bl	8000f50 <__NVIC_SetPriority>
}
 8001096:	bf00      	nop
 8001098:	3718      	adds	r7, #24
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	4603      	mov	r3, r0
 80010a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ff31 	bl	8000f14 <__NVIC_EnableIRQ>
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff ffa2 	bl	800100c <SysTick_Config>
 80010c8:	4603      	mov	r3, r0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80010e0:	f7ff feb6 	bl	8000e50 <HAL_GetTick>
 80010e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d101      	bne.n	80010f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e099      	b.n	8001224 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2202      	movs	r2, #2
 80010f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f022 0201 	bic.w	r2, r2, #1
 800110e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001110:	e00f      	b.n	8001132 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001112:	f7ff fe9d 	bl	8000e50 <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b05      	cmp	r3, #5
 800111e:	d908      	bls.n	8001132 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2220      	movs	r2, #32
 8001124:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2203      	movs	r2, #3
 800112a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e078      	b.n	8001224 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1e8      	bne.n	8001112 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001148:	697a      	ldr	r2, [r7, #20]
 800114a:	4b38      	ldr	r3, [pc, #224]	; (800122c <HAL_DMA_Init+0x158>)
 800114c:	4013      	ands	r3, r2
 800114e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685a      	ldr	r2, [r3, #4]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800115e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	691b      	ldr	r3, [r3, #16]
 8001164:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800116a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001176:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6a1b      	ldr	r3, [r3, #32]
 800117c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800117e:	697a      	ldr	r2, [r7, #20]
 8001180:	4313      	orrs	r3, r2
 8001182:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001188:	2b04      	cmp	r3, #4
 800118a:	d107      	bne.n	800119c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001194:	4313      	orrs	r3, r2
 8001196:	697a      	ldr	r2, [r7, #20]
 8001198:	4313      	orrs	r3, r2
 800119a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	697a      	ldr	r2, [r7, #20]
 80011a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	f023 0307 	bic.w	r3, r3, #7
 80011b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b8:	697a      	ldr	r2, [r7, #20]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c2:	2b04      	cmp	r3, #4
 80011c4:	d117      	bne.n	80011f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ca:	697a      	ldr	r2, [r7, #20]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d00e      	beq.n	80011f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f000 facd 	bl	8001778 <DMA_CheckFifoParam>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d008      	beq.n	80011f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2240      	movs	r2, #64	; 0x40
 80011e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2201      	movs	r2, #1
 80011ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80011f2:	2301      	movs	r3, #1
 80011f4:	e016      	b.n	8001224 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	697a      	ldr	r2, [r7, #20]
 80011fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f000 fa84 	bl	800170c <DMA_CalcBaseAndBitshift>
 8001204:	4603      	mov	r3, r0
 8001206:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800120c:	223f      	movs	r2, #63	; 0x3f
 800120e:	409a      	lsls	r2, r3
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2201      	movs	r2, #1
 800121e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001222:	2300      	movs	r3, #0
}
 8001224:	4618      	mov	r0, r3
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	f010803f 	.word	0xf010803f

08001230 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d101      	bne.n	8001242 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e050      	b.n	80012e4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b02      	cmp	r3, #2
 800124c:	d101      	bne.n	8001252 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800124e:	2302      	movs	r3, #2
 8001250:	e048      	b.n	80012e4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f022 0201 	bic.w	r2, r2, #1
 8001260:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2200      	movs	r2, #0
 8001270:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2200      	movs	r2, #0
 8001280:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2200      	movs	r2, #0
 8001288:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2221      	movs	r2, #33	; 0x21
 8001290:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f000 fa3a 	bl	800170c <DMA_CalcBaseAndBitshift>
 8001298:	4603      	mov	r3, r0
 800129a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2200      	movs	r2, #0
 80012ac:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012c4:	223f      	movs	r2, #63	; 0x3f
 80012c6:	409a      	lsls	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80012e2:	2300      	movs	r3, #0
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
 80012f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80012fa:	2300      	movs	r3, #0
 80012fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001302:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800130a:	2b01      	cmp	r3, #1
 800130c:	d101      	bne.n	8001312 <HAL_DMA_Start_IT+0x26>
 800130e:	2302      	movs	r3, #2
 8001310:	e040      	b.n	8001394 <HAL_DMA_Start_IT+0xa8>
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2201      	movs	r2, #1
 8001316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b01      	cmp	r3, #1
 8001324:	d12f      	bne.n	8001386 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	2202      	movs	r2, #2
 800132a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	2200      	movs	r2, #0
 8001332:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	68b9      	ldr	r1, [r7, #8]
 800133a:	68f8      	ldr	r0, [r7, #12]
 800133c:	f000 f9b8 	bl	80016b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001344:	223f      	movs	r2, #63	; 0x3f
 8001346:	409a      	lsls	r2, r3
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f042 0216 	orr.w	r2, r2, #22
 800135a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001360:	2b00      	cmp	r3, #0
 8001362:	d007      	beq.n	8001374 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f042 0208 	orr.w	r2, r2, #8
 8001372:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f042 0201 	orr.w	r2, r2, #1
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	e005      	b.n	8001392 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800138e:	2302      	movs	r3, #2
 8001390:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001392:	7dfb      	ldrb	r3, [r7, #23]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3718      	adds	r7, #24
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80013a8:	4b8e      	ldr	r3, [pc, #568]	; (80015e4 <HAL_DMA_IRQHandler+0x248>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a8e      	ldr	r2, [pc, #568]	; (80015e8 <HAL_DMA_IRQHandler+0x24c>)
 80013ae:	fba2 2303 	umull	r2, r3, r2, r3
 80013b2:	0a9b      	lsrs	r3, r3, #10
 80013b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013c6:	2208      	movs	r2, #8
 80013c8:	409a      	lsls	r2, r3
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	4013      	ands	r3, r2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d01a      	beq.n	8001408 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d013      	beq.n	8001408 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f022 0204 	bic.w	r2, r2, #4
 80013ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013f4:	2208      	movs	r2, #8
 80013f6:	409a      	lsls	r2, r3
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001400:	f043 0201 	orr.w	r2, r3, #1
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800140c:	2201      	movs	r2, #1
 800140e:	409a      	lsls	r2, r3
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	4013      	ands	r3, r2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d012      	beq.n	800143e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00b      	beq.n	800143e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800142a:	2201      	movs	r2, #1
 800142c:	409a      	lsls	r2, r3
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001436:	f043 0202 	orr.w	r2, r3, #2
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001442:	2204      	movs	r2, #4
 8001444:	409a      	lsls	r2, r3
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	4013      	ands	r3, r2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d012      	beq.n	8001474 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d00b      	beq.n	8001474 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001460:	2204      	movs	r2, #4
 8001462:	409a      	lsls	r2, r3
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800146c:	f043 0204 	orr.w	r2, r3, #4
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001478:	2210      	movs	r2, #16
 800147a:	409a      	lsls	r2, r3
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	4013      	ands	r3, r2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d043      	beq.n	800150c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0308 	and.w	r3, r3, #8
 800148e:	2b00      	cmp	r3, #0
 8001490:	d03c      	beq.n	800150c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001496:	2210      	movs	r2, #16
 8001498:	409a      	lsls	r2, r3
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d018      	beq.n	80014de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d108      	bne.n	80014cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d024      	beq.n	800150c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	4798      	blx	r3
 80014ca:	e01f      	b.n	800150c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d01b      	beq.n	800150c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	4798      	blx	r3
 80014dc:	e016      	b.n	800150c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d107      	bne.n	80014fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f022 0208 	bic.w	r2, r2, #8
 80014fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001500:	2b00      	cmp	r3, #0
 8001502:	d003      	beq.n	800150c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001510:	2220      	movs	r2, #32
 8001512:	409a      	lsls	r2, r3
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	4013      	ands	r3, r2
 8001518:	2b00      	cmp	r3, #0
 800151a:	f000 808f 	beq.w	800163c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0310 	and.w	r3, r3, #16
 8001528:	2b00      	cmp	r3, #0
 800152a:	f000 8087 	beq.w	800163c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001532:	2220      	movs	r2, #32
 8001534:	409a      	lsls	r2, r3
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b05      	cmp	r3, #5
 8001544:	d136      	bne.n	80015b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f022 0216 	bic.w	r2, r2, #22
 8001554:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	695a      	ldr	r2, [r3, #20]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001564:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	2b00      	cmp	r3, #0
 800156c:	d103      	bne.n	8001576 <HAL_DMA_IRQHandler+0x1da>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001572:	2b00      	cmp	r3, #0
 8001574:	d007      	beq.n	8001586 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 0208 	bic.w	r2, r2, #8
 8001584:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800158a:	223f      	movs	r2, #63	; 0x3f
 800158c:	409a      	lsls	r2, r3
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2201      	movs	r2, #1
 8001596:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d07e      	beq.n	80016a8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	4798      	blx	r3
        }
        return;
 80015b2:	e079      	b.n	80016a8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d01d      	beq.n	80015fe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d10d      	bne.n	80015ec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d031      	beq.n	800163c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	4798      	blx	r3
 80015e0:	e02c      	b.n	800163c <HAL_DMA_IRQHandler+0x2a0>
 80015e2:	bf00      	nop
 80015e4:	20000000 	.word	0x20000000
 80015e8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d023      	beq.n	800163c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	4798      	blx	r3
 80015fc:	e01e      	b.n	800163c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001608:	2b00      	cmp	r3, #0
 800160a:	d10f      	bne.n	800162c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 0210 	bic.w	r2, r2, #16
 800161a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001630:	2b00      	cmp	r3, #0
 8001632:	d003      	beq.n	800163c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001640:	2b00      	cmp	r3, #0
 8001642:	d032      	beq.n	80016aa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001648:	f003 0301 	and.w	r3, r3, #1
 800164c:	2b00      	cmp	r3, #0
 800164e:	d022      	beq.n	8001696 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2205      	movs	r2, #5
 8001654:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f022 0201 	bic.w	r2, r2, #1
 8001666:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	3301      	adds	r3, #1
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	697a      	ldr	r2, [r7, #20]
 8001670:	429a      	cmp	r2, r3
 8001672:	d307      	bcc.n	8001684 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1f2      	bne.n	8001668 <HAL_DMA_IRQHandler+0x2cc>
 8001682:	e000      	b.n	8001686 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001684:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2201      	movs	r2, #1
 800168a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169a:	2b00      	cmp	r3, #0
 800169c:	d005      	beq.n	80016aa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	4798      	blx	r3
 80016a6:	e000      	b.n	80016aa <HAL_DMA_IRQHandler+0x30e>
        return;
 80016a8:	bf00      	nop
    }
  }
}
 80016aa:	3718      	adds	r7, #24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
 80016bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	683a      	ldr	r2, [r7, #0]
 80016d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	2b40      	cmp	r3, #64	; 0x40
 80016dc:	d108      	bne.n	80016f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	68ba      	ldr	r2, [r7, #8]
 80016ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80016ee:	e007      	b.n	8001700 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	68ba      	ldr	r2, [r7, #8]
 80016f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	60da      	str	r2, [r3, #12]
}
 8001700:	bf00      	nop
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	b2db      	uxtb	r3, r3
 800171a:	3b10      	subs	r3, #16
 800171c:	4a14      	ldr	r2, [pc, #80]	; (8001770 <DMA_CalcBaseAndBitshift+0x64>)
 800171e:	fba2 2303 	umull	r2, r3, r2, r3
 8001722:	091b      	lsrs	r3, r3, #4
 8001724:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001726:	4a13      	ldr	r2, [pc, #76]	; (8001774 <DMA_CalcBaseAndBitshift+0x68>)
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4413      	add	r3, r2
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	461a      	mov	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2b03      	cmp	r3, #3
 8001738:	d909      	bls.n	800174e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001742:	f023 0303 	bic.w	r3, r3, #3
 8001746:	1d1a      	adds	r2, r3, #4
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	659a      	str	r2, [r3, #88]	; 0x58
 800174c:	e007      	b.n	800175e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001756:	f023 0303 	bic.w	r3, r3, #3
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001762:	4618      	mov	r0, r3
 8001764:	3714      	adds	r7, #20
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	aaaaaaab 	.word	0xaaaaaaab
 8001774:	080040d8 	.word	0x080040d8

08001778 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001780:	2300      	movs	r3, #0
 8001782:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001788:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d11f      	bne.n	80017d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	2b03      	cmp	r3, #3
 8001796:	d856      	bhi.n	8001846 <DMA_CheckFifoParam+0xce>
 8001798:	a201      	add	r2, pc, #4	; (adr r2, 80017a0 <DMA_CheckFifoParam+0x28>)
 800179a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800179e:	bf00      	nop
 80017a0:	080017b1 	.word	0x080017b1
 80017a4:	080017c3 	.word	0x080017c3
 80017a8:	080017b1 	.word	0x080017b1
 80017ac:	08001847 	.word	0x08001847
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d046      	beq.n	800184a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017c0:	e043      	b.n	800184a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80017ca:	d140      	bne.n	800184e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017d0:	e03d      	b.n	800184e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017da:	d121      	bne.n	8001820 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	2b03      	cmp	r3, #3
 80017e0:	d837      	bhi.n	8001852 <DMA_CheckFifoParam+0xda>
 80017e2:	a201      	add	r2, pc, #4	; (adr r2, 80017e8 <DMA_CheckFifoParam+0x70>)
 80017e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e8:	080017f9 	.word	0x080017f9
 80017ec:	080017ff 	.word	0x080017ff
 80017f0:	080017f9 	.word	0x080017f9
 80017f4:	08001811 	.word	0x08001811
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	73fb      	strb	r3, [r7, #15]
      break;
 80017fc:	e030      	b.n	8001860 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001802:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d025      	beq.n	8001856 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800180e:	e022      	b.n	8001856 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001814:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001818:	d11f      	bne.n	800185a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800181e:	e01c      	b.n	800185a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	2b02      	cmp	r3, #2
 8001824:	d903      	bls.n	800182e <DMA_CheckFifoParam+0xb6>
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	2b03      	cmp	r3, #3
 800182a:	d003      	beq.n	8001834 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800182c:	e018      	b.n	8001860 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	73fb      	strb	r3, [r7, #15]
      break;
 8001832:	e015      	b.n	8001860 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001838:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d00e      	beq.n	800185e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	73fb      	strb	r3, [r7, #15]
      break;
 8001844:	e00b      	b.n	800185e <DMA_CheckFifoParam+0xe6>
      break;
 8001846:	bf00      	nop
 8001848:	e00a      	b.n	8001860 <DMA_CheckFifoParam+0xe8>
      break;
 800184a:	bf00      	nop
 800184c:	e008      	b.n	8001860 <DMA_CheckFifoParam+0xe8>
      break;
 800184e:	bf00      	nop
 8001850:	e006      	b.n	8001860 <DMA_CheckFifoParam+0xe8>
      break;
 8001852:	bf00      	nop
 8001854:	e004      	b.n	8001860 <DMA_CheckFifoParam+0xe8>
      break;
 8001856:	bf00      	nop
 8001858:	e002      	b.n	8001860 <DMA_CheckFifoParam+0xe8>
      break;   
 800185a:	bf00      	nop
 800185c:	e000      	b.n	8001860 <DMA_CheckFifoParam+0xe8>
      break;
 800185e:	bf00      	nop
    }
  } 
  
  return status; 
 8001860:	7bfb      	ldrb	r3, [r7, #15]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop

08001870 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001870:	b480      	push	{r7}
 8001872:	b089      	sub	sp, #36	; 0x24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800187e:	2300      	movs	r3, #0
 8001880:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001882:	2300      	movs	r3, #0
 8001884:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001886:	2300      	movs	r3, #0
 8001888:	61fb      	str	r3, [r7, #28]
 800188a:	e165      	b.n	8001b58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800188c:	2201      	movs	r2, #1
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	697a      	ldr	r2, [r7, #20]
 800189c:	4013      	ands	r3, r2
 800189e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	f040 8154 	bne.w	8001b52 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f003 0303 	and.w	r3, r3, #3
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d005      	beq.n	80018c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d130      	bne.n	8001924 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	2203      	movs	r2, #3
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43db      	mvns	r3, r3
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4013      	ands	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	68da      	ldr	r2, [r3, #12]
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018f8:	2201      	movs	r2, #1
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4013      	ands	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	091b      	lsrs	r3, r3, #4
 800190e:	f003 0201 	and.w	r2, r3, #1
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	4313      	orrs	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 0303 	and.w	r3, r3, #3
 800192c:	2b03      	cmp	r3, #3
 800192e:	d017      	beq.n	8001960 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	2203      	movs	r2, #3
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4013      	ands	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4313      	orrs	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 0303 	and.w	r3, r3, #3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d123      	bne.n	80019b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	08da      	lsrs	r2, r3, #3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3208      	adds	r2, #8
 8001974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001978:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	f003 0307 	and.w	r3, r3, #7
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	220f      	movs	r2, #15
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4013      	ands	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	691a      	ldr	r2, [r3, #16]
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	08da      	lsrs	r2, r3, #3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	3208      	adds	r2, #8
 80019ae:	69b9      	ldr	r1, [r7, #24]
 80019b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	2203      	movs	r2, #3
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4013      	ands	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 0203 	and.w	r2, r3, #3
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f000 80ae 	beq.w	8001b52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	4b5d      	ldr	r3, [pc, #372]	; (8001b70 <HAL_GPIO_Init+0x300>)
 80019fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fe:	4a5c      	ldr	r2, [pc, #368]	; (8001b70 <HAL_GPIO_Init+0x300>)
 8001a00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a04:	6453      	str	r3, [r2, #68]	; 0x44
 8001a06:	4b5a      	ldr	r3, [pc, #360]	; (8001b70 <HAL_GPIO_Init+0x300>)
 8001a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a12:	4a58      	ldr	r2, [pc, #352]	; (8001b74 <HAL_GPIO_Init+0x304>)
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	089b      	lsrs	r3, r3, #2
 8001a18:	3302      	adds	r3, #2
 8001a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	f003 0303 	and.w	r3, r3, #3
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	220f      	movs	r2, #15
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4013      	ands	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a4f      	ldr	r2, [pc, #316]	; (8001b78 <HAL_GPIO_Init+0x308>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d025      	beq.n	8001a8a <HAL_GPIO_Init+0x21a>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a4e      	ldr	r2, [pc, #312]	; (8001b7c <HAL_GPIO_Init+0x30c>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d01f      	beq.n	8001a86 <HAL_GPIO_Init+0x216>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a4d      	ldr	r2, [pc, #308]	; (8001b80 <HAL_GPIO_Init+0x310>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d019      	beq.n	8001a82 <HAL_GPIO_Init+0x212>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a4c      	ldr	r2, [pc, #304]	; (8001b84 <HAL_GPIO_Init+0x314>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d013      	beq.n	8001a7e <HAL_GPIO_Init+0x20e>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a4b      	ldr	r2, [pc, #300]	; (8001b88 <HAL_GPIO_Init+0x318>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d00d      	beq.n	8001a7a <HAL_GPIO_Init+0x20a>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a4a      	ldr	r2, [pc, #296]	; (8001b8c <HAL_GPIO_Init+0x31c>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d007      	beq.n	8001a76 <HAL_GPIO_Init+0x206>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a49      	ldr	r2, [pc, #292]	; (8001b90 <HAL_GPIO_Init+0x320>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d101      	bne.n	8001a72 <HAL_GPIO_Init+0x202>
 8001a6e:	2306      	movs	r3, #6
 8001a70:	e00c      	b.n	8001a8c <HAL_GPIO_Init+0x21c>
 8001a72:	2307      	movs	r3, #7
 8001a74:	e00a      	b.n	8001a8c <HAL_GPIO_Init+0x21c>
 8001a76:	2305      	movs	r3, #5
 8001a78:	e008      	b.n	8001a8c <HAL_GPIO_Init+0x21c>
 8001a7a:	2304      	movs	r3, #4
 8001a7c:	e006      	b.n	8001a8c <HAL_GPIO_Init+0x21c>
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e004      	b.n	8001a8c <HAL_GPIO_Init+0x21c>
 8001a82:	2302      	movs	r3, #2
 8001a84:	e002      	b.n	8001a8c <HAL_GPIO_Init+0x21c>
 8001a86:	2301      	movs	r3, #1
 8001a88:	e000      	b.n	8001a8c <HAL_GPIO_Init+0x21c>
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	69fa      	ldr	r2, [r7, #28]
 8001a8e:	f002 0203 	and.w	r2, r2, #3
 8001a92:	0092      	lsls	r2, r2, #2
 8001a94:	4093      	lsls	r3, r2
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a9c:	4935      	ldr	r1, [pc, #212]	; (8001b74 <HAL_GPIO_Init+0x304>)
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	089b      	lsrs	r3, r3, #2
 8001aa2:	3302      	adds	r3, #2
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aaa:	4b3a      	ldr	r3, [pc, #232]	; (8001b94 <HAL_GPIO_Init+0x324>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ace:	4a31      	ldr	r2, [pc, #196]	; (8001b94 <HAL_GPIO_Init+0x324>)
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ad4:	4b2f      	ldr	r3, [pc, #188]	; (8001b94 <HAL_GPIO_Init+0x324>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	43db      	mvns	r3, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d003      	beq.n	8001af8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001af8:	4a26      	ldr	r2, [pc, #152]	; (8001b94 <HAL_GPIO_Init+0x324>)
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001afe:	4b25      	ldr	r3, [pc, #148]	; (8001b94 <HAL_GPIO_Init+0x324>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	43db      	mvns	r3, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b22:	4a1c      	ldr	r2, [pc, #112]	; (8001b94 <HAL_GPIO_Init+0x324>)
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b28:	4b1a      	ldr	r3, [pc, #104]	; (8001b94 <HAL_GPIO_Init+0x324>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	43db      	mvns	r3, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4013      	ands	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b4c:	4a11      	ldr	r2, [pc, #68]	; (8001b94 <HAL_GPIO_Init+0x324>)
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	3301      	adds	r3, #1
 8001b56:	61fb      	str	r3, [r7, #28]
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	2b0f      	cmp	r3, #15
 8001b5c:	f67f ae96 	bls.w	800188c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b60:	bf00      	nop
 8001b62:	bf00      	nop
 8001b64:	3724      	adds	r7, #36	; 0x24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40013800 	.word	0x40013800
 8001b78:	40020000 	.word	0x40020000
 8001b7c:	40020400 	.word	0x40020400
 8001b80:	40020800 	.word	0x40020800
 8001b84:	40020c00 	.word	0x40020c00
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	40021400 	.word	0x40021400
 8001b90:	40021800 	.word	0x40021800
 8001b94:	40013c00 	.word	0x40013c00

08001b98 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b087      	sub	sp, #28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bae:	2300      	movs	r3, #0
 8001bb0:	617b      	str	r3, [r7, #20]
 8001bb2:	e0c7      	b.n	8001d44 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	f040 80b7 	bne.w	8001d3e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001bd0:	4a62      	ldr	r2, [pc, #392]	; (8001d5c <HAL_GPIO_DeInit+0x1c4>)
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	089b      	lsrs	r3, r3, #2
 8001bd6:	3302      	adds	r3, #2
 8001bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bdc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	f003 0303 	and.w	r3, r3, #3
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	220f      	movs	r2, #15
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	68ba      	ldr	r2, [r7, #8]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a5a      	ldr	r2, [pc, #360]	; (8001d60 <HAL_GPIO_DeInit+0x1c8>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d025      	beq.n	8001c46 <HAL_GPIO_DeInit+0xae>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a59      	ldr	r2, [pc, #356]	; (8001d64 <HAL_GPIO_DeInit+0x1cc>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d01f      	beq.n	8001c42 <HAL_GPIO_DeInit+0xaa>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a58      	ldr	r2, [pc, #352]	; (8001d68 <HAL_GPIO_DeInit+0x1d0>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d019      	beq.n	8001c3e <HAL_GPIO_DeInit+0xa6>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a57      	ldr	r2, [pc, #348]	; (8001d6c <HAL_GPIO_DeInit+0x1d4>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d013      	beq.n	8001c3a <HAL_GPIO_DeInit+0xa2>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a56      	ldr	r2, [pc, #344]	; (8001d70 <HAL_GPIO_DeInit+0x1d8>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d00d      	beq.n	8001c36 <HAL_GPIO_DeInit+0x9e>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a55      	ldr	r2, [pc, #340]	; (8001d74 <HAL_GPIO_DeInit+0x1dc>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d007      	beq.n	8001c32 <HAL_GPIO_DeInit+0x9a>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a54      	ldr	r2, [pc, #336]	; (8001d78 <HAL_GPIO_DeInit+0x1e0>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d101      	bne.n	8001c2e <HAL_GPIO_DeInit+0x96>
 8001c2a:	2306      	movs	r3, #6
 8001c2c:	e00c      	b.n	8001c48 <HAL_GPIO_DeInit+0xb0>
 8001c2e:	2307      	movs	r3, #7
 8001c30:	e00a      	b.n	8001c48 <HAL_GPIO_DeInit+0xb0>
 8001c32:	2305      	movs	r3, #5
 8001c34:	e008      	b.n	8001c48 <HAL_GPIO_DeInit+0xb0>
 8001c36:	2304      	movs	r3, #4
 8001c38:	e006      	b.n	8001c48 <HAL_GPIO_DeInit+0xb0>
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e004      	b.n	8001c48 <HAL_GPIO_DeInit+0xb0>
 8001c3e:	2302      	movs	r3, #2
 8001c40:	e002      	b.n	8001c48 <HAL_GPIO_DeInit+0xb0>
 8001c42:	2301      	movs	r3, #1
 8001c44:	e000      	b.n	8001c48 <HAL_GPIO_DeInit+0xb0>
 8001c46:	2300      	movs	r3, #0
 8001c48:	697a      	ldr	r2, [r7, #20]
 8001c4a:	f002 0203 	and.w	r2, r2, #3
 8001c4e:	0092      	lsls	r2, r2, #2
 8001c50:	4093      	lsls	r3, r2
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d132      	bne.n	8001cbe <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001c58:	4b48      	ldr	r3, [pc, #288]	; (8001d7c <HAL_GPIO_DeInit+0x1e4>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	4946      	ldr	r1, [pc, #280]	; (8001d7c <HAL_GPIO_DeInit+0x1e4>)
 8001c62:	4013      	ands	r3, r2
 8001c64:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001c66:	4b45      	ldr	r3, [pc, #276]	; (8001d7c <HAL_GPIO_DeInit+0x1e4>)
 8001c68:	685a      	ldr	r2, [r3, #4]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	4943      	ldr	r1, [pc, #268]	; (8001d7c <HAL_GPIO_DeInit+0x1e4>)
 8001c70:	4013      	ands	r3, r2
 8001c72:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001c74:	4b41      	ldr	r3, [pc, #260]	; (8001d7c <HAL_GPIO_DeInit+0x1e4>)
 8001c76:	68da      	ldr	r2, [r3, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	493f      	ldr	r1, [pc, #252]	; (8001d7c <HAL_GPIO_DeInit+0x1e4>)
 8001c7e:	4013      	ands	r3, r2
 8001c80:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001c82:	4b3e      	ldr	r3, [pc, #248]	; (8001d7c <HAL_GPIO_DeInit+0x1e4>)
 8001c84:	689a      	ldr	r2, [r3, #8]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	493c      	ldr	r1, [pc, #240]	; (8001d7c <HAL_GPIO_DeInit+0x1e4>)
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	f003 0303 	and.w	r3, r3, #3
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	220f      	movs	r2, #15
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001ca0:	4a2e      	ldr	r2, [pc, #184]	; (8001d5c <HAL_GPIO_DeInit+0x1c4>)
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	089b      	lsrs	r3, r3, #2
 8001ca6:	3302      	adds	r3, #2
 8001ca8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	43da      	mvns	r2, r3
 8001cb0:	482a      	ldr	r0, [pc, #168]	; (8001d5c <HAL_GPIO_DeInit+0x1c4>)
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	089b      	lsrs	r3, r3, #2
 8001cb6:	400a      	ands	r2, r1
 8001cb8:	3302      	adds	r3, #2
 8001cba:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	2103      	movs	r1, #3
 8001cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	401a      	ands	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	08da      	lsrs	r2, r3, #3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3208      	adds	r2, #8
 8001cdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	220f      	movs	r2, #15
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	08d2      	lsrs	r2, r2, #3
 8001cf4:	4019      	ands	r1, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	3208      	adds	r2, #8
 8001cfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	68da      	ldr	r2, [r3, #12]
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	2103      	movs	r1, #3
 8001d08:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	401a      	ands	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	2101      	movs	r1, #1
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d20:	43db      	mvns	r3, r3
 8001d22:	401a      	ands	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	2103      	movs	r1, #3
 8001d32:	fa01 f303 	lsl.w	r3, r1, r3
 8001d36:	43db      	mvns	r3, r3
 8001d38:	401a      	ands	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	3301      	adds	r3, #1
 8001d42:	617b      	str	r3, [r7, #20]
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	2b0f      	cmp	r3, #15
 8001d48:	f67f af34 	bls.w	8001bb4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001d4c:	bf00      	nop
 8001d4e:	bf00      	nop
 8001d50:	371c      	adds	r7, #28
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	40013800 	.word	0x40013800
 8001d60:	40020000 	.word	0x40020000
 8001d64:	40020400 	.word	0x40020400
 8001d68:	40020800 	.word	0x40020800
 8001d6c:	40020c00 	.word	0x40020c00
 8001d70:	40021000 	.word	0x40021000
 8001d74:	40021400 	.word	0x40021400
 8001d78:	40021800 	.word	0x40021800
 8001d7c:	40013c00 	.word	0x40013c00

08001d80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	807b      	strh	r3, [r7, #2]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d90:	787b      	ldrb	r3, [r7, #1]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d96:	887a      	ldrh	r2, [r7, #2]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d9c:	e003      	b.n	8001da6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d9e:	887b      	ldrh	r3, [r7, #2]
 8001da0:	041a      	lsls	r2, r3, #16
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	619a      	str	r2, [r3, #24]
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001db2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db4:	b08f      	sub	sp, #60	; 0x3c
 8001db6:	af0a      	add	r7, sp, #40	; 0x28
 8001db8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d101      	bne.n	8001dc4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e116      	b.n	8001ff2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d106      	bne.n	8001de4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7fe fef4 	bl	8000bcc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2203      	movs	r2, #3
 8001de8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d102      	bne.n	8001dfe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f001 fe8d 	bl	8003b22 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	603b      	str	r3, [r7, #0]
 8001e0e:	687e      	ldr	r6, [r7, #4]
 8001e10:	466d      	mov	r5, sp
 8001e12:	f106 0410 	add.w	r4, r6, #16
 8001e16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e1e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e22:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e26:	1d33      	adds	r3, r6, #4
 8001e28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e2a:	6838      	ldr	r0, [r7, #0]
 8001e2c:	f001 fe18 	bl	8003a60 <USB_CoreInit>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d005      	beq.n	8001e42 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2202      	movs	r2, #2
 8001e3a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e0d7      	b.n	8001ff2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2100      	movs	r1, #0
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f001 fe7b 	bl	8003b44 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e4e:	2300      	movs	r3, #0
 8001e50:	73fb      	strb	r3, [r7, #15]
 8001e52:	e04a      	b.n	8001eea <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e54:	7bfa      	ldrb	r2, [r7, #15]
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	4413      	add	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	440b      	add	r3, r1
 8001e62:	333d      	adds	r3, #61	; 0x3d
 8001e64:	2201      	movs	r2, #1
 8001e66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e68:	7bfa      	ldrb	r2, [r7, #15]
 8001e6a:	6879      	ldr	r1, [r7, #4]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	4413      	add	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	440b      	add	r3, r1
 8001e76:	333c      	adds	r3, #60	; 0x3c
 8001e78:	7bfa      	ldrb	r2, [r7, #15]
 8001e7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e7c:	7bfa      	ldrb	r2, [r7, #15]
 8001e7e:	7bfb      	ldrb	r3, [r7, #15]
 8001e80:	b298      	uxth	r0, r3
 8001e82:	6879      	ldr	r1, [r7, #4]
 8001e84:	4613      	mov	r3, r2
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	4413      	add	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	3344      	adds	r3, #68	; 0x44
 8001e90:	4602      	mov	r2, r0
 8001e92:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e94:	7bfa      	ldrb	r2, [r7, #15]
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	4413      	add	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	3340      	adds	r3, #64	; 0x40
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ea8:	7bfa      	ldrb	r2, [r7, #15]
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	4613      	mov	r3, r2
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	4413      	add	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	3348      	adds	r3, #72	; 0x48
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ebc:	7bfa      	ldrb	r2, [r7, #15]
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	4413      	add	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	440b      	add	r3, r1
 8001eca:	334c      	adds	r3, #76	; 0x4c
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ed0:	7bfa      	ldrb	r2, [r7, #15]
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	4413      	add	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	440b      	add	r3, r1
 8001ede:	3354      	adds	r3, #84	; 0x54
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ee4:	7bfb      	ldrb	r3, [r7, #15]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	73fb      	strb	r3, [r7, #15]
 8001eea:	7bfa      	ldrb	r2, [r7, #15]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d3af      	bcc.n	8001e54 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	73fb      	strb	r3, [r7, #15]
 8001ef8:	e044      	b.n	8001f84 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001efa:	7bfa      	ldrb	r2, [r7, #15]
 8001efc:	6879      	ldr	r1, [r7, #4]
 8001efe:	4613      	mov	r3, r2
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	4413      	add	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	440b      	add	r3, r1
 8001f08:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f10:	7bfa      	ldrb	r2, [r7, #15]
 8001f12:	6879      	ldr	r1, [r7, #4]
 8001f14:	4613      	mov	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	4413      	add	r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001f22:	7bfa      	ldrb	r2, [r7, #15]
 8001f24:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f26:	7bfa      	ldrb	r2, [r7, #15]
 8001f28:	6879      	ldr	r1, [r7, #4]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	4413      	add	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	440b      	add	r3, r1
 8001f34:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001f38:	2200      	movs	r2, #0
 8001f3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f3c:	7bfa      	ldrb	r2, [r7, #15]
 8001f3e:	6879      	ldr	r1, [r7, #4]
 8001f40:	4613      	mov	r3, r2
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	4413      	add	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	440b      	add	r3, r1
 8001f4a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f52:	7bfa      	ldrb	r2, [r7, #15]
 8001f54:	6879      	ldr	r1, [r7, #4]
 8001f56:	4613      	mov	r3, r2
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	4413      	add	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	440b      	add	r3, r1
 8001f60:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f68:	7bfa      	ldrb	r2, [r7, #15]
 8001f6a:	6879      	ldr	r1, [r7, #4]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	4413      	add	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	440b      	add	r3, r1
 8001f76:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f7e:	7bfb      	ldrb	r3, [r7, #15]
 8001f80:	3301      	adds	r3, #1
 8001f82:	73fb      	strb	r3, [r7, #15]
 8001f84:	7bfa      	ldrb	r2, [r7, #15]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d3b5      	bcc.n	8001efa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	603b      	str	r3, [r7, #0]
 8001f94:	687e      	ldr	r6, [r7, #4]
 8001f96:	466d      	mov	r5, sp
 8001f98:	f106 0410 	add.w	r4, r6, #16
 8001f9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fa2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fa4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fa8:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fac:	1d33      	adds	r3, r6, #4
 8001fae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fb0:	6838      	ldr	r0, [r7, #0]
 8001fb2:	f001 fe13 	bl	8003bdc <USB_DevInit>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d005      	beq.n	8001fc8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e014      	b.n	8001ff2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d102      	bne.n	8001fe6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f80a 	bl	8001ffa <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f001 ffd1 	bl	8003f92 <USB_DevDisconnect>

  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ffa <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b085      	sub	sp, #20
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800202c:	f043 0303 	orr.w	r3, r3, #3
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3714      	adds	r7, #20
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
	...

08002044 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e0cc      	b.n	80021f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002058:	4b68      	ldr	r3, [pc, #416]	; (80021fc <HAL_RCC_ClockConfig+0x1b8>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 030f 	and.w	r3, r3, #15
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	429a      	cmp	r2, r3
 8002064:	d90c      	bls.n	8002080 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002066:	4b65      	ldr	r3, [pc, #404]	; (80021fc <HAL_RCC_ClockConfig+0x1b8>)
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	b2d2      	uxtb	r2, r2
 800206c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800206e:	4b63      	ldr	r3, [pc, #396]	; (80021fc <HAL_RCC_ClockConfig+0x1b8>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 030f 	and.w	r3, r3, #15
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	429a      	cmp	r2, r3
 800207a:	d001      	beq.n	8002080 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e0b8      	b.n	80021f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d020      	beq.n	80020ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	2b00      	cmp	r3, #0
 8002096:	d005      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002098:	4b59      	ldr	r3, [pc, #356]	; (8002200 <HAL_RCC_ClockConfig+0x1bc>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	4a58      	ldr	r2, [pc, #352]	; (8002200 <HAL_RCC_ClockConfig+0x1bc>)
 800209e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0308 	and.w	r3, r3, #8
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d005      	beq.n	80020bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020b0:	4b53      	ldr	r3, [pc, #332]	; (8002200 <HAL_RCC_ClockConfig+0x1bc>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	4a52      	ldr	r2, [pc, #328]	; (8002200 <HAL_RCC_ClockConfig+0x1bc>)
 80020b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020bc:	4b50      	ldr	r3, [pc, #320]	; (8002200 <HAL_RCC_ClockConfig+0x1bc>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	494d      	ldr	r1, [pc, #308]	; (8002200 <HAL_RCC_ClockConfig+0x1bc>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d044      	beq.n	8002164 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d107      	bne.n	80020f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e2:	4b47      	ldr	r3, [pc, #284]	; (8002200 <HAL_RCC_ClockConfig+0x1bc>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d119      	bne.n	8002122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e07f      	b.n	80021f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d003      	beq.n	8002102 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020fe:	2b03      	cmp	r3, #3
 8002100:	d107      	bne.n	8002112 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002102:	4b3f      	ldr	r3, [pc, #252]	; (8002200 <HAL_RCC_ClockConfig+0x1bc>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d109      	bne.n	8002122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e06f      	b.n	80021f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002112:	4b3b      	ldr	r3, [pc, #236]	; (8002200 <HAL_RCC_ClockConfig+0x1bc>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e067      	b.n	80021f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002122:	4b37      	ldr	r3, [pc, #220]	; (8002200 <HAL_RCC_ClockConfig+0x1bc>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f023 0203 	bic.w	r2, r3, #3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	4934      	ldr	r1, [pc, #208]	; (8002200 <HAL_RCC_ClockConfig+0x1bc>)
 8002130:	4313      	orrs	r3, r2
 8002132:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002134:	f7fe fe8c 	bl	8000e50 <HAL_GetTick>
 8002138:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800213a:	e00a      	b.n	8002152 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800213c:	f7fe fe88 	bl	8000e50 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	f241 3288 	movw	r2, #5000	; 0x1388
 800214a:	4293      	cmp	r3, r2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e04f      	b.n	80021f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002152:	4b2b      	ldr	r3, [pc, #172]	; (8002200 <HAL_RCC_ClockConfig+0x1bc>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f003 020c 	and.w	r2, r3, #12
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	429a      	cmp	r2, r3
 8002162:	d1eb      	bne.n	800213c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002164:	4b25      	ldr	r3, [pc, #148]	; (80021fc <HAL_RCC_ClockConfig+0x1b8>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 030f 	and.w	r3, r3, #15
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	429a      	cmp	r2, r3
 8002170:	d20c      	bcs.n	800218c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002172:	4b22      	ldr	r3, [pc, #136]	; (80021fc <HAL_RCC_ClockConfig+0x1b8>)
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800217a:	4b20      	ldr	r3, [pc, #128]	; (80021fc <HAL_RCC_ClockConfig+0x1b8>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	429a      	cmp	r2, r3
 8002186:	d001      	beq.n	800218c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e032      	b.n	80021f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0304 	and.w	r3, r3, #4
 8002194:	2b00      	cmp	r3, #0
 8002196:	d008      	beq.n	80021aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002198:	4b19      	ldr	r3, [pc, #100]	; (8002200 <HAL_RCC_ClockConfig+0x1bc>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	4916      	ldr	r1, [pc, #88]	; (8002200 <HAL_RCC_ClockConfig+0x1bc>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0308 	and.w	r3, r3, #8
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d009      	beq.n	80021ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021b6:	4b12      	ldr	r3, [pc, #72]	; (8002200 <HAL_RCC_ClockConfig+0x1bc>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	490e      	ldr	r1, [pc, #56]	; (8002200 <HAL_RCC_ClockConfig+0x1bc>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021ca:	f000 fb4b 	bl	8002864 <HAL_RCC_GetSysClockFreq>
 80021ce:	4602      	mov	r2, r0
 80021d0:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <HAL_RCC_ClockConfig+0x1bc>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	091b      	lsrs	r3, r3, #4
 80021d6:	f003 030f 	and.w	r3, r3, #15
 80021da:	490a      	ldr	r1, [pc, #40]	; (8002204 <HAL_RCC_ClockConfig+0x1c0>)
 80021dc:	5ccb      	ldrb	r3, [r1, r3]
 80021de:	fa22 f303 	lsr.w	r3, r2, r3
 80021e2:	4a09      	ldr	r2, [pc, #36]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80021e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021e6:	4b09      	ldr	r3, [pc, #36]	; (800220c <HAL_RCC_ClockConfig+0x1c8>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7fe fdec 	bl	8000dc8 <HAL_InitTick>

  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40023c00 	.word	0x40023c00
 8002200:	40023800 	.word	0x40023800
 8002204:	080040c8 	.word	0x080040c8
 8002208:	20000000 	.word	0x20000000
 800220c:	20000004 	.word	0x20000004

08002210 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b08c      	sub	sp, #48	; 0x30
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002218:	2300      	movs	r3, #0
 800221a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800221c:	2300      	movs	r3, #0
 800221e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002220:	2300      	movs	r3, #0
 8002222:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002224:	2300      	movs	r3, #0
 8002226:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800222c:	2300      	movs	r3, #0
 800222e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002234:	2300      	movs	r3, #0
 8002236:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002238:	2300      	movs	r3, #0
 800223a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	2b00      	cmp	r3, #0
 8002246:	d010      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002248:	4b6f      	ldr	r3, [pc, #444]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800224a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800224e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002256:	496c      	ldr	r1, [pc, #432]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002258:	4313      	orrs	r3, r2
 800225a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002266:	2301      	movs	r3, #1
 8002268:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d010      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002276:	4b64      	ldr	r3, [pc, #400]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002278:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800227c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002284:	4960      	ldr	r1, [pc, #384]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002286:	4313      	orrs	r3, r2
 8002288:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002294:	2301      	movs	r3, #1
 8002296:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d017      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022a4:	4b58      	ldr	r3, [pc, #352]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	4955      	ldr	r1, [pc, #340]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022c2:	d101      	bne.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80022c4:	2301      	movs	r3, #1
 80022c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80022d0:	2301      	movs	r3, #1
 80022d2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0308 	and.w	r3, r3, #8
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d017      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80022e0:	4b49      	ldr	r3, [pc, #292]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ee:	4946      	ldr	r1, [pc, #280]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022fe:	d101      	bne.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002300:	2301      	movs	r3, #1
 8002302:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800230c:	2301      	movs	r3, #1
 800230e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0320 	and.w	r3, r3, #32
 8002318:	2b00      	cmp	r3, #0
 800231a:	f000 808a 	beq.w	8002432 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	60bb      	str	r3, [r7, #8]
 8002322:	4b39      	ldr	r3, [pc, #228]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	4a38      	ldr	r2, [pc, #224]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800232c:	6413      	str	r3, [r2, #64]	; 0x40
 800232e:	4b36      	ldr	r3, [pc, #216]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002336:	60bb      	str	r3, [r7, #8]
 8002338:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800233a:	4b34      	ldr	r3, [pc, #208]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a33      	ldr	r2, [pc, #204]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002344:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002346:	f7fe fd83 	bl	8000e50 <HAL_GetTick>
 800234a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800234c:	e008      	b.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800234e:	f7fe fd7f 	bl	8000e50 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d901      	bls.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e278      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002360:	4b2a      	ldr	r3, [pc, #168]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0f0      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800236c:	4b26      	ldr	r3, [pc, #152]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800236e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002370:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002374:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002376:	6a3b      	ldr	r3, [r7, #32]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d02f      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002380:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002384:	6a3a      	ldr	r2, [r7, #32]
 8002386:	429a      	cmp	r2, r3
 8002388:	d028      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800238a:	4b1f      	ldr	r3, [pc, #124]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800238c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800238e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002392:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002394:	4b1e      	ldr	r3, [pc, #120]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002396:	2201      	movs	r2, #1
 8002398:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800239a:	4b1d      	ldr	r3, [pc, #116]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80023a0:	4a19      	ldr	r2, [pc, #100]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023a2:	6a3b      	ldr	r3, [r7, #32]
 80023a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80023a6:	4b18      	ldr	r3, [pc, #96]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d114      	bne.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80023b2:	f7fe fd4d 	bl	8000e50 <HAL_GetTick>
 80023b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b8:	e00a      	b.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ba:	f7fe fd49 	bl	8000e50 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e240      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d0:	4b0d      	ldr	r3, [pc, #52]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0ee      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80023e8:	d114      	bne.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80023ea:	4b07      	ldr	r3, [pc, #28]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80023fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023fe:	4902      	ldr	r1, [pc, #8]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002400:	4313      	orrs	r3, r2
 8002402:	608b      	str	r3, [r1, #8]
 8002404:	e00c      	b.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002406:	bf00      	nop
 8002408:	40023800 	.word	0x40023800
 800240c:	40007000 	.word	0x40007000
 8002410:	42470e40 	.word	0x42470e40
 8002414:	4b4a      	ldr	r3, [pc, #296]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	4a49      	ldr	r2, [pc, #292]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800241a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800241e:	6093      	str	r3, [r2, #8]
 8002420:	4b47      	ldr	r3, [pc, #284]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002422:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800242c:	4944      	ldr	r1, [pc, #272]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800242e:	4313      	orrs	r3, r2
 8002430:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0310 	and.w	r3, r3, #16
 800243a:	2b00      	cmp	r3, #0
 800243c:	d004      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002444:	4b3f      	ldr	r3, [pc, #252]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002446:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00a      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002454:	4b3a      	ldr	r3, [pc, #232]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002456:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800245a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002462:	4937      	ldr	r1, [pc, #220]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002464:	4313      	orrs	r3, r2
 8002466:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00a      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002476:	4b32      	ldr	r3, [pc, #200]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002478:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800247c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002484:	492e      	ldr	r1, [pc, #184]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002486:	4313      	orrs	r3, r2
 8002488:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002494:	2b00      	cmp	r3, #0
 8002496:	d011      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002498:	4b29      	ldr	r3, [pc, #164]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800249a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800249e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a6:	4926      	ldr	r1, [pc, #152]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024b6:	d101      	bne.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80024b8:	2301      	movs	r3, #1
 80024ba:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00a      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80024c8:	4b1d      	ldr	r3, [pc, #116]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024ce:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d6:	491a      	ldr	r1, [pc, #104]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d011      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80024ea:	4b15      	ldr	r3, [pc, #84]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024f0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024f8:	4911      	ldr	r1, [pc, #68]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002504:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002508:	d101      	bne.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800250a:	2301      	movs	r3, #1
 800250c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800250e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002510:	2b01      	cmp	r3, #1
 8002512:	d005      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800251c:	f040 80ff 	bne.w	800271e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002520:	4b09      	ldr	r3, [pc, #36]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002526:	f7fe fc93 	bl	8000e50 <HAL_GetTick>
 800252a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800252c:	e00e      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800252e:	f7fe fc8f 	bl	8000e50 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d907      	bls.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e188      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002540:	40023800 	.word	0x40023800
 8002544:	424711e0 	.word	0x424711e0
 8002548:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800254c:	4b7e      	ldr	r3, [pc, #504]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1ea      	bne.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	2b00      	cmp	r3, #0
 8002562:	d003      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002568:	2b00      	cmp	r3, #0
 800256a:	d009      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002574:	2b00      	cmp	r3, #0
 8002576:	d028      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800257c:	2b00      	cmp	r3, #0
 800257e:	d124      	bne.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002580:	4b71      	ldr	r3, [pc, #452]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002582:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002586:	0c1b      	lsrs	r3, r3, #16
 8002588:	f003 0303 	and.w	r3, r3, #3
 800258c:	3301      	adds	r3, #1
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002592:	4b6d      	ldr	r3, [pc, #436]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002594:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002598:	0e1b      	lsrs	r3, r3, #24
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	019b      	lsls	r3, r3, #6
 80025aa:	431a      	orrs	r2, r3
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	085b      	lsrs	r3, r3, #1
 80025b0:	3b01      	subs	r3, #1
 80025b2:	041b      	lsls	r3, r3, #16
 80025b4:	431a      	orrs	r2, r3
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	061b      	lsls	r3, r3, #24
 80025ba:	431a      	orrs	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	071b      	lsls	r3, r3, #28
 80025c2:	4961      	ldr	r1, [pc, #388]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0304 	and.w	r3, r3, #4
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d004      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025de:	d00a      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d035      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025f4:	d130      	bne.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80025f6:	4b54      	ldr	r3, [pc, #336]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80025f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025fc:	0c1b      	lsrs	r3, r3, #16
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	3301      	adds	r3, #1
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002608:	4b4f      	ldr	r3, [pc, #316]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800260a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800260e:	0f1b      	lsrs	r3, r3, #28
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	019b      	lsls	r3, r3, #6
 8002620:	431a      	orrs	r2, r3
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	085b      	lsrs	r3, r3, #1
 8002626:	3b01      	subs	r3, #1
 8002628:	041b      	lsls	r3, r3, #16
 800262a:	431a      	orrs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	061b      	lsls	r3, r3, #24
 8002632:	431a      	orrs	r2, r3
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	071b      	lsls	r3, r3, #28
 8002638:	4943      	ldr	r1, [pc, #268]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800263a:	4313      	orrs	r3, r2
 800263c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002640:	4b41      	ldr	r3, [pc, #260]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002642:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002646:	f023 021f 	bic.w	r2, r3, #31
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264e:	3b01      	subs	r3, #1
 8002650:	493d      	ldr	r1, [pc, #244]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002652:	4313      	orrs	r3, r2
 8002654:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002660:	2b00      	cmp	r3, #0
 8002662:	d029      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002668:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800266c:	d124      	bne.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800266e:	4b36      	ldr	r3, [pc, #216]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002670:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002674:	0c1b      	lsrs	r3, r3, #16
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	3301      	adds	r3, #1
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002680:	4b31      	ldr	r3, [pc, #196]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002682:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002686:	0f1b      	lsrs	r3, r3, #28
 8002688:	f003 0307 	and.w	r3, r3, #7
 800268c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	019b      	lsls	r3, r3, #6
 8002698:	431a      	orrs	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	085b      	lsrs	r3, r3, #1
 80026a0:	3b01      	subs	r3, #1
 80026a2:	041b      	lsls	r3, r3, #16
 80026a4:	431a      	orrs	r2, r3
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	061b      	lsls	r3, r3, #24
 80026aa:	431a      	orrs	r2, r3
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	071b      	lsls	r3, r3, #28
 80026b0:	4925      	ldr	r1, [pc, #148]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d016      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	019b      	lsls	r3, r3, #6
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	085b      	lsrs	r3, r3, #1
 80026d6:	3b01      	subs	r3, #1
 80026d8:	041b      	lsls	r3, r3, #16
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	061b      	lsls	r3, r3, #24
 80026e2:	431a      	orrs	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	071b      	lsls	r3, r3, #28
 80026ea:	4917      	ldr	r1, [pc, #92]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80026f2:	4b16      	ldr	r3, [pc, #88]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80026f4:	2201      	movs	r2, #1
 80026f6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80026f8:	f7fe fbaa 	bl	8000e50 <HAL_GetTick>
 80026fc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80026fe:	e008      	b.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002700:	f7fe fba6 	bl	8000e50 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d901      	bls.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e09f      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002712:	4b0d      	ldr	r3, [pc, #52]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d0f0      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800271e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002720:	2b01      	cmp	r3, #1
 8002722:	f040 8095 	bne.w	8002850 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002726:	4b0a      	ldr	r3, [pc, #40]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800272c:	f7fe fb90 	bl	8000e50 <HAL_GetTick>
 8002730:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002732:	e00f      	b.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002734:	f7fe fb8c 	bl	8000e50 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d908      	bls.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e085      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002746:	bf00      	nop
 8002748:	40023800 	.word	0x40023800
 800274c:	42470068 	.word	0x42470068
 8002750:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002754:	4b41      	ldr	r3, [pc, #260]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800275c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002760:	d0e8      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0304 	and.w	r3, r3, #4
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	2b00      	cmp	r3, #0
 8002774:	d009      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800277e:	2b00      	cmp	r3, #0
 8002780:	d02b      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002786:	2b00      	cmp	r3, #0
 8002788:	d127      	bne.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800278a:	4b34      	ldr	r3, [pc, #208]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800278c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002790:	0c1b      	lsrs	r3, r3, #16
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	3301      	adds	r3, #1
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	699a      	ldr	r2, [r3, #24]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	69db      	ldr	r3, [r3, #28]
 80027a4:	019b      	lsls	r3, r3, #6
 80027a6:	431a      	orrs	r2, r3
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	085b      	lsrs	r3, r3, #1
 80027ac:	3b01      	subs	r3, #1
 80027ae:	041b      	lsls	r3, r3, #16
 80027b0:	431a      	orrs	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b6:	061b      	lsls	r3, r3, #24
 80027b8:	4928      	ldr	r1, [pc, #160]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80027c0:	4b26      	ldr	r3, [pc, #152]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80027c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027c6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ce:	3b01      	subs	r3, #1
 80027d0:	021b      	lsls	r3, r3, #8
 80027d2:	4922      	ldr	r1, [pc, #136]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d01d      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027ee:	d118      	bne.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80027f0:	4b1a      	ldr	r3, [pc, #104]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80027f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f6:	0e1b      	lsrs	r3, r3, #24
 80027f8:	f003 030f 	and.w	r3, r3, #15
 80027fc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	699a      	ldr	r2, [r3, #24]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	019b      	lsls	r3, r3, #6
 8002808:	431a      	orrs	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	085b      	lsrs	r3, r3, #1
 8002810:	3b01      	subs	r3, #1
 8002812:	041b      	lsls	r3, r3, #16
 8002814:	431a      	orrs	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	061b      	lsls	r3, r3, #24
 800281a:	4910      	ldr	r1, [pc, #64]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800281c:	4313      	orrs	r3, r2
 800281e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002822:	4b0f      	ldr	r3, [pc, #60]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002824:	2201      	movs	r2, #1
 8002826:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002828:	f7fe fb12 	bl	8000e50 <HAL_GetTick>
 800282c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002830:	f7fe fb0e 	bl	8000e50 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e007      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002842:	4b06      	ldr	r3, [pc, #24]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800284a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800284e:	d1ef      	bne.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3730      	adds	r7, #48	; 0x30
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	40023800 	.word	0x40023800
 8002860:	42470070 	.word	0x42470070

08002864 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002868:	b0a6      	sub	sp, #152	; 0x98
 800286a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800286c:	2300      	movs	r3, #0
 800286e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8002872:	2300      	movs	r3, #0
 8002874:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8002878:	2300      	movs	r3, #0
 800287a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800287e:	2300      	movs	r3, #0
 8002880:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8002884:	2300      	movs	r3, #0
 8002886:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800288a:	4bc8      	ldr	r3, [pc, #800]	; (8002bac <HAL_RCC_GetSysClockFreq+0x348>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f003 030c 	and.w	r3, r3, #12
 8002892:	2b0c      	cmp	r3, #12
 8002894:	f200 817e 	bhi.w	8002b94 <HAL_RCC_GetSysClockFreq+0x330>
 8002898:	a201      	add	r2, pc, #4	; (adr r2, 80028a0 <HAL_RCC_GetSysClockFreq+0x3c>)
 800289a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800289e:	bf00      	nop
 80028a0:	080028d5 	.word	0x080028d5
 80028a4:	08002b95 	.word	0x08002b95
 80028a8:	08002b95 	.word	0x08002b95
 80028ac:	08002b95 	.word	0x08002b95
 80028b0:	080028dd 	.word	0x080028dd
 80028b4:	08002b95 	.word	0x08002b95
 80028b8:	08002b95 	.word	0x08002b95
 80028bc:	08002b95 	.word	0x08002b95
 80028c0:	080028e5 	.word	0x080028e5
 80028c4:	08002b95 	.word	0x08002b95
 80028c8:	08002b95 	.word	0x08002b95
 80028cc:	08002b95 	.word	0x08002b95
 80028d0:	08002a4f 	.word	0x08002a4f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028d4:	4bb6      	ldr	r3, [pc, #728]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0x34c>)
 80028d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80028da:	e15f      	b.n	8002b9c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028dc:	4bb5      	ldr	r3, [pc, #724]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0x350>)
 80028de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80028e2:	e15b      	b.n	8002b9c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028e4:	4bb1      	ldr	r3, [pc, #708]	; (8002bac <HAL_RCC_GetSysClockFreq+0x348>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028f0:	4bae      	ldr	r3, [pc, #696]	; (8002bac <HAL_RCC_GetSysClockFreq+0x348>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d031      	beq.n	8002960 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028fc:	4bab      	ldr	r3, [pc, #684]	; (8002bac <HAL_RCC_GetSysClockFreq+0x348>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	099b      	lsrs	r3, r3, #6
 8002902:	2200      	movs	r2, #0
 8002904:	66bb      	str	r3, [r7, #104]	; 0x68
 8002906:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002908:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800290a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800290e:	663b      	str	r3, [r7, #96]	; 0x60
 8002910:	2300      	movs	r3, #0
 8002912:	667b      	str	r3, [r7, #100]	; 0x64
 8002914:	4ba7      	ldr	r3, [pc, #668]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0x350>)
 8002916:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800291a:	462a      	mov	r2, r5
 800291c:	fb03 f202 	mul.w	r2, r3, r2
 8002920:	2300      	movs	r3, #0
 8002922:	4621      	mov	r1, r4
 8002924:	fb01 f303 	mul.w	r3, r1, r3
 8002928:	4413      	add	r3, r2
 800292a:	4aa2      	ldr	r2, [pc, #648]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0x350>)
 800292c:	4621      	mov	r1, r4
 800292e:	fba1 1202 	umull	r1, r2, r1, r2
 8002932:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002934:	460a      	mov	r2, r1
 8002936:	67ba      	str	r2, [r7, #120]	; 0x78
 8002938:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800293a:	4413      	add	r3, r2
 800293c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800293e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002942:	2200      	movs	r2, #0
 8002944:	65bb      	str	r3, [r7, #88]	; 0x58
 8002946:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002948:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800294c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002950:	f7fd fc58 	bl	8000204 <__aeabi_uldivmod>
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
 8002958:	4613      	mov	r3, r2
 800295a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800295e:	e064      	b.n	8002a2a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002960:	4b92      	ldr	r3, [pc, #584]	; (8002bac <HAL_RCC_GetSysClockFreq+0x348>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	099b      	lsrs	r3, r3, #6
 8002966:	2200      	movs	r2, #0
 8002968:	653b      	str	r3, [r7, #80]	; 0x50
 800296a:	657a      	str	r2, [r7, #84]	; 0x54
 800296c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800296e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002972:	64bb      	str	r3, [r7, #72]	; 0x48
 8002974:	2300      	movs	r3, #0
 8002976:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002978:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800297c:	4622      	mov	r2, r4
 800297e:	462b      	mov	r3, r5
 8002980:	f04f 0000 	mov.w	r0, #0
 8002984:	f04f 0100 	mov.w	r1, #0
 8002988:	0159      	lsls	r1, r3, #5
 800298a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800298e:	0150      	lsls	r0, r2, #5
 8002990:	4602      	mov	r2, r0
 8002992:	460b      	mov	r3, r1
 8002994:	4621      	mov	r1, r4
 8002996:	1a51      	subs	r1, r2, r1
 8002998:	6139      	str	r1, [r7, #16]
 800299a:	4629      	mov	r1, r5
 800299c:	eb63 0301 	sbc.w	r3, r3, r1
 80029a0:	617b      	str	r3, [r7, #20]
 80029a2:	f04f 0200 	mov.w	r2, #0
 80029a6:	f04f 0300 	mov.w	r3, #0
 80029aa:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029ae:	4659      	mov	r1, fp
 80029b0:	018b      	lsls	r3, r1, #6
 80029b2:	4651      	mov	r1, sl
 80029b4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029b8:	4651      	mov	r1, sl
 80029ba:	018a      	lsls	r2, r1, #6
 80029bc:	4651      	mov	r1, sl
 80029be:	ebb2 0801 	subs.w	r8, r2, r1
 80029c2:	4659      	mov	r1, fp
 80029c4:	eb63 0901 	sbc.w	r9, r3, r1
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	f04f 0300 	mov.w	r3, #0
 80029d0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029d4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029d8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029dc:	4690      	mov	r8, r2
 80029de:	4699      	mov	r9, r3
 80029e0:	4623      	mov	r3, r4
 80029e2:	eb18 0303 	adds.w	r3, r8, r3
 80029e6:	60bb      	str	r3, [r7, #8]
 80029e8:	462b      	mov	r3, r5
 80029ea:	eb49 0303 	adc.w	r3, r9, r3
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	f04f 0200 	mov.w	r2, #0
 80029f4:	f04f 0300 	mov.w	r3, #0
 80029f8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80029fc:	4629      	mov	r1, r5
 80029fe:	028b      	lsls	r3, r1, #10
 8002a00:	4621      	mov	r1, r4
 8002a02:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a06:	4621      	mov	r1, r4
 8002a08:	028a      	lsls	r2, r1, #10
 8002a0a:	4610      	mov	r0, r2
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a12:	2200      	movs	r2, #0
 8002a14:	643b      	str	r3, [r7, #64]	; 0x40
 8002a16:	647a      	str	r2, [r7, #68]	; 0x44
 8002a18:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002a1c:	f7fd fbf2 	bl	8000204 <__aeabi_uldivmod>
 8002a20:	4602      	mov	r2, r0
 8002a22:	460b      	mov	r3, r1
 8002a24:	4613      	mov	r3, r2
 8002a26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a2a:	4b60      	ldr	r3, [pc, #384]	; (8002bac <HAL_RCC_GetSysClockFreq+0x348>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	0c1b      	lsrs	r3, r3, #16
 8002a30:	f003 0303 	and.w	r3, r3, #3
 8002a34:	3301      	adds	r3, #1
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8002a3c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002a40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002a4c:	e0a6      	b.n	8002b9c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a4e:	4b57      	ldr	r3, [pc, #348]	; (8002bac <HAL_RCC_GetSysClockFreq+0x348>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a5a:	4b54      	ldr	r3, [pc, #336]	; (8002bac <HAL_RCC_GetSysClockFreq+0x348>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d02a      	beq.n	8002abc <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a66:	4b51      	ldr	r3, [pc, #324]	; (8002bac <HAL_RCC_GetSysClockFreq+0x348>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	099b      	lsrs	r3, r3, #6
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a70:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a74:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002a78:	2100      	movs	r1, #0
 8002a7a:	4b4e      	ldr	r3, [pc, #312]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0x350>)
 8002a7c:	fb03 f201 	mul.w	r2, r3, r1
 8002a80:	2300      	movs	r3, #0
 8002a82:	fb00 f303 	mul.w	r3, r0, r3
 8002a86:	4413      	add	r3, r2
 8002a88:	4a4a      	ldr	r2, [pc, #296]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0x350>)
 8002a8a:	fba0 1202 	umull	r1, r2, r0, r2
 8002a8e:	677a      	str	r2, [r7, #116]	; 0x74
 8002a90:	460a      	mov	r2, r1
 8002a92:	673a      	str	r2, [r7, #112]	; 0x70
 8002a94:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002a96:	4413      	add	r3, r2
 8002a98:	677b      	str	r3, [r7, #116]	; 0x74
 8002a9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	633b      	str	r3, [r7, #48]	; 0x30
 8002aa2:	637a      	str	r2, [r7, #52]	; 0x34
 8002aa4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002aa8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002aac:	f7fd fbaa 	bl	8000204 <__aeabi_uldivmod>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002aba:	e05b      	b.n	8002b74 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002abc:	4b3b      	ldr	r3, [pc, #236]	; (8002bac <HAL_RCC_GetSysClockFreq+0x348>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	099b      	lsrs	r3, r3, #6
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ac6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ace:	623b      	str	r3, [r7, #32]
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ad4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ad8:	4642      	mov	r2, r8
 8002ada:	464b      	mov	r3, r9
 8002adc:	f04f 0000 	mov.w	r0, #0
 8002ae0:	f04f 0100 	mov.w	r1, #0
 8002ae4:	0159      	lsls	r1, r3, #5
 8002ae6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002aea:	0150      	lsls	r0, r2, #5
 8002aec:	4602      	mov	r2, r0
 8002aee:	460b      	mov	r3, r1
 8002af0:	4641      	mov	r1, r8
 8002af2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002af6:	4649      	mov	r1, r9
 8002af8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002afc:	f04f 0200 	mov.w	r2, #0
 8002b00:	f04f 0300 	mov.w	r3, #0
 8002b04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b10:	ebb2 040a 	subs.w	r4, r2, sl
 8002b14:	eb63 050b 	sbc.w	r5, r3, fp
 8002b18:	f04f 0200 	mov.w	r2, #0
 8002b1c:	f04f 0300 	mov.w	r3, #0
 8002b20:	00eb      	lsls	r3, r5, #3
 8002b22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b26:	00e2      	lsls	r2, r4, #3
 8002b28:	4614      	mov	r4, r2
 8002b2a:	461d      	mov	r5, r3
 8002b2c:	4643      	mov	r3, r8
 8002b2e:	18e3      	adds	r3, r4, r3
 8002b30:	603b      	str	r3, [r7, #0]
 8002b32:	464b      	mov	r3, r9
 8002b34:	eb45 0303 	adc.w	r3, r5, r3
 8002b38:	607b      	str	r3, [r7, #4]
 8002b3a:	f04f 0200 	mov.w	r2, #0
 8002b3e:	f04f 0300 	mov.w	r3, #0
 8002b42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b46:	4629      	mov	r1, r5
 8002b48:	028b      	lsls	r3, r1, #10
 8002b4a:	4621      	mov	r1, r4
 8002b4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b50:	4621      	mov	r1, r4
 8002b52:	028a      	lsls	r2, r1, #10
 8002b54:	4610      	mov	r0, r2
 8002b56:	4619      	mov	r1, r3
 8002b58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	61bb      	str	r3, [r7, #24]
 8002b60:	61fa      	str	r2, [r7, #28]
 8002b62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b66:	f7fd fb4d 	bl	8000204 <__aeabi_uldivmod>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	4613      	mov	r3, r2
 8002b70:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002b74:	4b0d      	ldr	r3, [pc, #52]	; (8002bac <HAL_RCC_GetSysClockFreq+0x348>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	0f1b      	lsrs	r3, r3, #28
 8002b7a:	f003 0307 	and.w	r3, r3, #7
 8002b7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8002b82:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002b92:	e003      	b.n	8002b9c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b94:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002b96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002b9a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3798      	adds	r7, #152	; 0x98
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002baa:	bf00      	nop
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	00f42400 	.word	0x00f42400
 8002bb4:	018cba80 	.word	0x018cba80

08002bb8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e28d      	b.n	80030e6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f000 8083 	beq.w	8002cde <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002bd8:	4b94      	ldr	r3, [pc, #592]	; (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f003 030c 	and.w	r3, r3, #12
 8002be0:	2b04      	cmp	r3, #4
 8002be2:	d019      	beq.n	8002c18 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002be4:	4b91      	ldr	r3, [pc, #580]	; (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002bec:	2b08      	cmp	r3, #8
 8002bee:	d106      	bne.n	8002bfe <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002bf0:	4b8e      	ldr	r3, [pc, #568]	; (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bf8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bfc:	d00c      	beq.n	8002c18 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bfe:	4b8b      	ldr	r3, [pc, #556]	; (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c06:	2b0c      	cmp	r3, #12
 8002c08:	d112      	bne.n	8002c30 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c0a:	4b88      	ldr	r3, [pc, #544]	; (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c16:	d10b      	bne.n	8002c30 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c18:	4b84      	ldr	r3, [pc, #528]	; (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d05b      	beq.n	8002cdc <HAL_RCC_OscConfig+0x124>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d157      	bne.n	8002cdc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e25a      	b.n	80030e6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c38:	d106      	bne.n	8002c48 <HAL_RCC_OscConfig+0x90>
 8002c3a:	4b7c      	ldr	r3, [pc, #496]	; (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a7b      	ldr	r2, [pc, #492]	; (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	e01d      	b.n	8002c84 <HAL_RCC_OscConfig+0xcc>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c50:	d10c      	bne.n	8002c6c <HAL_RCC_OscConfig+0xb4>
 8002c52:	4b76      	ldr	r3, [pc, #472]	; (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a75      	ldr	r2, [pc, #468]	; (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002c58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	4b73      	ldr	r3, [pc, #460]	; (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a72      	ldr	r2, [pc, #456]	; (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	e00b      	b.n	8002c84 <HAL_RCC_OscConfig+0xcc>
 8002c6c:	4b6f      	ldr	r3, [pc, #444]	; (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a6e      	ldr	r2, [pc, #440]	; (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002c72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c76:	6013      	str	r3, [r2, #0]
 8002c78:	4b6c      	ldr	r3, [pc, #432]	; (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a6b      	ldr	r2, [pc, #428]	; (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002c7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d013      	beq.n	8002cb4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8c:	f7fe f8e0 	bl	8000e50 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c94:	f7fe f8dc 	bl	8000e50 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b64      	cmp	r3, #100	; 0x64
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e21f      	b.n	80030e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca6:	4b61      	ldr	r3, [pc, #388]	; (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0f0      	beq.n	8002c94 <HAL_RCC_OscConfig+0xdc>
 8002cb2:	e014      	b.n	8002cde <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb4:	f7fe f8cc 	bl	8000e50 <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cbc:	f7fe f8c8 	bl	8000e50 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b64      	cmp	r3, #100	; 0x64
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e20b      	b.n	80030e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cce:	4b57      	ldr	r3, [pc, #348]	; (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1f0      	bne.n	8002cbc <HAL_RCC_OscConfig+0x104>
 8002cda:	e000      	b.n	8002cde <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d06f      	beq.n	8002dca <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002cea:	4b50      	ldr	r3, [pc, #320]	; (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 030c 	and.w	r3, r3, #12
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d017      	beq.n	8002d26 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002cf6:	4b4d      	ldr	r3, [pc, #308]	; (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002cfe:	2b08      	cmp	r3, #8
 8002d00:	d105      	bne.n	8002d0e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d02:	4b4a      	ldr	r3, [pc, #296]	; (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00b      	beq.n	8002d26 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d0e:	4b47      	ldr	r3, [pc, #284]	; (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d16:	2b0c      	cmp	r3, #12
 8002d18:	d11c      	bne.n	8002d54 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d1a:	4b44      	ldr	r3, [pc, #272]	; (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d116      	bne.n	8002d54 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d26:	4b41      	ldr	r3, [pc, #260]	; (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d005      	beq.n	8002d3e <HAL_RCC_OscConfig+0x186>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d001      	beq.n	8002d3e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e1d3      	b.n	80030e6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d3e:	4b3b      	ldr	r3, [pc, #236]	; (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	4937      	ldr	r1, [pc, #220]	; (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d52:	e03a      	b.n	8002dca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d020      	beq.n	8002d9e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d5c:	4b34      	ldr	r3, [pc, #208]	; (8002e30 <HAL_RCC_OscConfig+0x278>)
 8002d5e:	2201      	movs	r2, #1
 8002d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d62:	f7fe f875 	bl	8000e50 <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d68:	e008      	b.n	8002d7c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d6a:	f7fe f871 	bl	8000e50 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e1b4      	b.n	80030e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d7c:	4b2b      	ldr	r3, [pc, #172]	; (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d0f0      	beq.n	8002d6a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d88:	4b28      	ldr	r3, [pc, #160]	; (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	4925      	ldr	r1, [pc, #148]	; (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	600b      	str	r3, [r1, #0]
 8002d9c:	e015      	b.n	8002dca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d9e:	4b24      	ldr	r3, [pc, #144]	; (8002e30 <HAL_RCC_OscConfig+0x278>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da4:	f7fe f854 	bl	8000e50 <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dac:	f7fe f850 	bl	8000e50 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e193      	b.n	80030e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dbe:	4b1b      	ldr	r3, [pc, #108]	; (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1f0      	bne.n	8002dac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0308 	and.w	r3, r3, #8
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d036      	beq.n	8002e44 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d016      	beq.n	8002e0c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dde:	4b15      	ldr	r3, [pc, #84]	; (8002e34 <HAL_RCC_OscConfig+0x27c>)
 8002de0:	2201      	movs	r2, #1
 8002de2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de4:	f7fe f834 	bl	8000e50 <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dec:	f7fe f830 	bl	8000e50 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e173      	b.n	80030e6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dfe:	4b0b      	ldr	r3, [pc, #44]	; (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002e00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0f0      	beq.n	8002dec <HAL_RCC_OscConfig+0x234>
 8002e0a:	e01b      	b.n	8002e44 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e0c:	4b09      	ldr	r3, [pc, #36]	; (8002e34 <HAL_RCC_OscConfig+0x27c>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e12:	f7fe f81d 	bl	8000e50 <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e18:	e00e      	b.n	8002e38 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e1a:	f7fe f819 	bl	8000e50 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d907      	bls.n	8002e38 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e15c      	b.n	80030e6 <HAL_RCC_OscConfig+0x52e>
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	42470000 	.word	0x42470000
 8002e34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e38:	4b8a      	ldr	r3, [pc, #552]	; (8003064 <HAL_RCC_OscConfig+0x4ac>)
 8002e3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1ea      	bne.n	8002e1a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0304 	and.w	r3, r3, #4
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f000 8097 	beq.w	8002f80 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e52:	2300      	movs	r3, #0
 8002e54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e56:	4b83      	ldr	r3, [pc, #524]	; (8003064 <HAL_RCC_OscConfig+0x4ac>)
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10f      	bne.n	8002e82 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e62:	2300      	movs	r3, #0
 8002e64:	60bb      	str	r3, [r7, #8]
 8002e66:	4b7f      	ldr	r3, [pc, #508]	; (8003064 <HAL_RCC_OscConfig+0x4ac>)
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	4a7e      	ldr	r2, [pc, #504]	; (8003064 <HAL_RCC_OscConfig+0x4ac>)
 8002e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e70:	6413      	str	r3, [r2, #64]	; 0x40
 8002e72:	4b7c      	ldr	r3, [pc, #496]	; (8003064 <HAL_RCC_OscConfig+0x4ac>)
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e7a:	60bb      	str	r3, [r7, #8]
 8002e7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e82:	4b79      	ldr	r3, [pc, #484]	; (8003068 <HAL_RCC_OscConfig+0x4b0>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d118      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e8e:	4b76      	ldr	r3, [pc, #472]	; (8003068 <HAL_RCC_OscConfig+0x4b0>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a75      	ldr	r2, [pc, #468]	; (8003068 <HAL_RCC_OscConfig+0x4b0>)
 8002e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e9a:	f7fd ffd9 	bl	8000e50 <HAL_GetTick>
 8002e9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea0:	e008      	b.n	8002eb4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ea2:	f7fd ffd5 	bl	8000e50 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e118      	b.n	80030e6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb4:	4b6c      	ldr	r3, [pc, #432]	; (8003068 <HAL_RCC_OscConfig+0x4b0>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d0f0      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d106      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x31e>
 8002ec8:	4b66      	ldr	r3, [pc, #408]	; (8003064 <HAL_RCC_OscConfig+0x4ac>)
 8002eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ecc:	4a65      	ldr	r2, [pc, #404]	; (8003064 <HAL_RCC_OscConfig+0x4ac>)
 8002ece:	f043 0301 	orr.w	r3, r3, #1
 8002ed2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed4:	e01c      	b.n	8002f10 <HAL_RCC_OscConfig+0x358>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	2b05      	cmp	r3, #5
 8002edc:	d10c      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x340>
 8002ede:	4b61      	ldr	r3, [pc, #388]	; (8003064 <HAL_RCC_OscConfig+0x4ac>)
 8002ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee2:	4a60      	ldr	r2, [pc, #384]	; (8003064 <HAL_RCC_OscConfig+0x4ac>)
 8002ee4:	f043 0304 	orr.w	r3, r3, #4
 8002ee8:	6713      	str	r3, [r2, #112]	; 0x70
 8002eea:	4b5e      	ldr	r3, [pc, #376]	; (8003064 <HAL_RCC_OscConfig+0x4ac>)
 8002eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eee:	4a5d      	ldr	r2, [pc, #372]	; (8003064 <HAL_RCC_OscConfig+0x4ac>)
 8002ef0:	f043 0301 	orr.w	r3, r3, #1
 8002ef4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef6:	e00b      	b.n	8002f10 <HAL_RCC_OscConfig+0x358>
 8002ef8:	4b5a      	ldr	r3, [pc, #360]	; (8003064 <HAL_RCC_OscConfig+0x4ac>)
 8002efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efc:	4a59      	ldr	r2, [pc, #356]	; (8003064 <HAL_RCC_OscConfig+0x4ac>)
 8002efe:	f023 0301 	bic.w	r3, r3, #1
 8002f02:	6713      	str	r3, [r2, #112]	; 0x70
 8002f04:	4b57      	ldr	r3, [pc, #348]	; (8003064 <HAL_RCC_OscConfig+0x4ac>)
 8002f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f08:	4a56      	ldr	r2, [pc, #344]	; (8003064 <HAL_RCC_OscConfig+0x4ac>)
 8002f0a:	f023 0304 	bic.w	r3, r3, #4
 8002f0e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d015      	beq.n	8002f44 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f18:	f7fd ff9a 	bl	8000e50 <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f1e:	e00a      	b.n	8002f36 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f20:	f7fd ff96 	bl	8000e50 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e0d7      	b.n	80030e6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f36:	4b4b      	ldr	r3, [pc, #300]	; (8003064 <HAL_RCC_OscConfig+0x4ac>)
 8002f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d0ee      	beq.n	8002f20 <HAL_RCC_OscConfig+0x368>
 8002f42:	e014      	b.n	8002f6e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f44:	f7fd ff84 	bl	8000e50 <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f4a:	e00a      	b.n	8002f62 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f4c:	f7fd ff80 	bl	8000e50 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e0c1      	b.n	80030e6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f62:	4b40      	ldr	r3, [pc, #256]	; (8003064 <HAL_RCC_OscConfig+0x4ac>)
 8002f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1ee      	bne.n	8002f4c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f6e:	7dfb      	ldrb	r3, [r7, #23]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d105      	bne.n	8002f80 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f74:	4b3b      	ldr	r3, [pc, #236]	; (8003064 <HAL_RCC_OscConfig+0x4ac>)
 8002f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f78:	4a3a      	ldr	r2, [pc, #232]	; (8003064 <HAL_RCC_OscConfig+0x4ac>)
 8002f7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f7e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f000 80ad 	beq.w	80030e4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f8a:	4b36      	ldr	r3, [pc, #216]	; (8003064 <HAL_RCC_OscConfig+0x4ac>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f003 030c 	and.w	r3, r3, #12
 8002f92:	2b08      	cmp	r3, #8
 8002f94:	d060      	beq.n	8003058 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d145      	bne.n	800302a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f9e:	4b33      	ldr	r3, [pc, #204]	; (800306c <HAL_RCC_OscConfig+0x4b4>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa4:	f7fd ff54 	bl	8000e50 <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fac:	f7fd ff50 	bl	8000e50 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e093      	b.n	80030e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fbe:	4b29      	ldr	r3, [pc, #164]	; (8003064 <HAL_RCC_OscConfig+0x4ac>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1f0      	bne.n	8002fac <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69da      	ldr	r2, [r3, #28]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	019b      	lsls	r3, r3, #6
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe0:	085b      	lsrs	r3, r3, #1
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	041b      	lsls	r3, r3, #16
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fec:	061b      	lsls	r3, r3, #24
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff4:	071b      	lsls	r3, r3, #28
 8002ff6:	491b      	ldr	r1, [pc, #108]	; (8003064 <HAL_RCC_OscConfig+0x4ac>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ffc:	4b1b      	ldr	r3, [pc, #108]	; (800306c <HAL_RCC_OscConfig+0x4b4>)
 8002ffe:	2201      	movs	r2, #1
 8003000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003002:	f7fd ff25 	bl	8000e50 <HAL_GetTick>
 8003006:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003008:	e008      	b.n	800301c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800300a:	f7fd ff21 	bl	8000e50 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d901      	bls.n	800301c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e064      	b.n	80030e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800301c:	4b11      	ldr	r3, [pc, #68]	; (8003064 <HAL_RCC_OscConfig+0x4ac>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d0f0      	beq.n	800300a <HAL_RCC_OscConfig+0x452>
 8003028:	e05c      	b.n	80030e4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800302a:	4b10      	ldr	r3, [pc, #64]	; (800306c <HAL_RCC_OscConfig+0x4b4>)
 800302c:	2200      	movs	r2, #0
 800302e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003030:	f7fd ff0e 	bl	8000e50 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003038:	f7fd ff0a 	bl	8000e50 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e04d      	b.n	80030e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800304a:	4b06      	ldr	r3, [pc, #24]	; (8003064 <HAL_RCC_OscConfig+0x4ac>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1f0      	bne.n	8003038 <HAL_RCC_OscConfig+0x480>
 8003056:	e045      	b.n	80030e4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d107      	bne.n	8003070 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e040      	b.n	80030e6 <HAL_RCC_OscConfig+0x52e>
 8003064:	40023800 	.word	0x40023800
 8003068:	40007000 	.word	0x40007000
 800306c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003070:	4b1f      	ldr	r3, [pc, #124]	; (80030f0 <HAL_RCC_OscConfig+0x538>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d030      	beq.n	80030e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003088:	429a      	cmp	r2, r3
 800308a:	d129      	bne.n	80030e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003096:	429a      	cmp	r2, r3
 8003098:	d122      	bne.n	80030e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030a0:	4013      	ands	r3, r2
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d119      	bne.n	80030e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b6:	085b      	lsrs	r3, r3, #1
 80030b8:	3b01      	subs	r3, #1
 80030ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030bc:	429a      	cmp	r2, r3
 80030be:	d10f      	bne.n	80030e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d107      	bne.n	80030e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030da:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030dc:	429a      	cmp	r2, r3
 80030de:	d001      	beq.n	80030e4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e000      	b.n	80030e6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3718      	adds	r7, #24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40023800 	.word	0x40023800

080030f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e07b      	b.n	80031fe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	2b00      	cmp	r3, #0
 800310c:	d108      	bne.n	8003120 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003116:	d009      	beq.n	800312c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	61da      	str	r2, [r3, #28]
 800311e:	e005      	b.n	800312c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d106      	bne.n	800314c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f7fd fc20 	bl	800098c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2202      	movs	r2, #2
 8003150:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003162:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003174:	431a      	orrs	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800317e:	431a      	orrs	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	431a      	orrs	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	431a      	orrs	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800319c:	431a      	orrs	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031b0:	ea42 0103 	orr.w	r1, r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	430a      	orrs	r2, r1
 80031c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	0c1b      	lsrs	r3, r3, #16
 80031ca:	f003 0104 	and.w	r1, r3, #4
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d2:	f003 0210 	and.w	r2, r3, #16
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	430a      	orrs	r2, r1
 80031dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	69da      	ldr	r2, [r3, #28]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b082      	sub	sp, #8
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d101      	bne.n	8003218 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e01a      	b.n	800324e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2202      	movs	r2, #2
 800321c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800322e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f7fd fc8f 	bl	8000b54 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
	...

08003258 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	4613      	mov	r3, r2
 8003264:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003266:	2300      	movs	r3, #0
 8003268:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d110      	bne.n	8003294 <HAL_SPI_Receive_DMA+0x3c>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800327a:	d10b      	bne.n	8003294 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2204      	movs	r2, #4
 8003280:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8003284:	88fb      	ldrh	r3, [r7, #6]
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	68b9      	ldr	r1, [r7, #8]
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f000 f8ac 	bl	80033e8 <HAL_SPI_TransmitReceive_DMA>
 8003290:	4603      	mov	r3, r0
 8003292:	e09f      	b.n	80033d4 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800329a:	2b01      	cmp	r3, #1
 800329c:	d101      	bne.n	80032a2 <HAL_SPI_Receive_DMA+0x4a>
 800329e:	2302      	movs	r3, #2
 80032a0:	e098      	b.n	80033d4 <HAL_SPI_Receive_DMA+0x17c>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d002      	beq.n	80032bc <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 80032b6:	2302      	movs	r3, #2
 80032b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80032ba:	e086      	b.n	80033ca <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d002      	beq.n	80032c8 <HAL_SPI_Receive_DMA+0x70>
 80032c2:	88fb      	ldrh	r3, [r7, #6]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d102      	bne.n	80032ce <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80032cc:	e07d      	b.n	80033ca <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2204      	movs	r2, #4
 80032d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	68ba      	ldr	r2, [r7, #8]
 80032e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	88fa      	ldrh	r2, [r7, #6]
 80032e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	88fa      	ldrh	r2, [r7, #6]
 80032ec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800330e:	d10f      	bne.n	8003330 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800331e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800332e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003334:	4a29      	ldr	r2, [pc, #164]	; (80033dc <HAL_SPI_Receive_DMA+0x184>)
 8003336:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800333c:	4a28      	ldr	r2, [pc, #160]	; (80033e0 <HAL_SPI_Receive_DMA+0x188>)
 800333e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003344:	4a27      	ldr	r2, [pc, #156]	; (80033e4 <HAL_SPI_Receive_DMA+0x18c>)
 8003346:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800334c:	2200      	movs	r2, #0
 800334e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	330c      	adds	r3, #12
 800335a:	4619      	mov	r1, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003360:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003366:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003368:	f7fd ffc0 	bl	80012ec <HAL_DMA_Start_IT>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00c      	beq.n	800338c <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003376:	f043 0210 	orr.w	r2, r3, #16
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800338a:	e01e      	b.n	80033ca <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003396:	2b40      	cmp	r3, #64	; 0x40
 8003398:	d007      	beq.n	80033aa <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033a8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f042 0220 	orr.w	r2, r2, #32
 80033b8:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	685a      	ldr	r2, [r3, #4]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f042 0201 	orr.w	r2, r2, #1
 80033c8:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80033d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3718      	adds	r7, #24
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	08003789 	.word	0x08003789
 80033e0:	08003651 	.word	0x08003651
 80033e4:	080037c1 	.word	0x080037c1

080033e8 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
 80033f4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033f6:	2300      	movs	r3, #0
 80033f8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003400:	2b01      	cmp	r3, #1
 8003402:	d101      	bne.n	8003408 <HAL_SPI_TransmitReceive_DMA+0x20>
 8003404:	2302      	movs	r3, #2
 8003406:	e0e3      	b.n	80035d0 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003416:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800341e:	7dbb      	ldrb	r3, [r7, #22]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d00d      	beq.n	8003440 <HAL_SPI_TransmitReceive_DMA+0x58>
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800342a:	d106      	bne.n	800343a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d102      	bne.n	800343a <HAL_SPI_TransmitReceive_DMA+0x52>
 8003434:	7dbb      	ldrb	r3, [r7, #22]
 8003436:	2b04      	cmp	r3, #4
 8003438:	d002      	beq.n	8003440 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800343a:	2302      	movs	r3, #2
 800343c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800343e:	e0c2      	b.n	80035c6 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d005      	beq.n	8003452 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d002      	beq.n	8003452 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800344c:	887b      	ldrh	r3, [r7, #2]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d102      	bne.n	8003458 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003456:	e0b6      	b.n	80035c6 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b04      	cmp	r3, #4
 8003462:	d003      	beq.n	800346c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2205      	movs	r2, #5
 8003468:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	887a      	ldrh	r2, [r7, #2]
 800347c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	887a      	ldrh	r2, [r7, #2]
 8003482:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	887a      	ldrh	r2, [r7, #2]
 800348e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	887a      	ldrh	r2, [r7, #2]
 8003494:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b04      	cmp	r3, #4
 80034ac:	d108      	bne.n	80034c0 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034b2:	4a49      	ldr	r2, [pc, #292]	; (80035d8 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 80034b4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ba:	4a48      	ldr	r2, [pc, #288]	; (80035dc <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 80034bc:	63da      	str	r2, [r3, #60]	; 0x3c
 80034be:	e007      	b.n	80034d0 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034c4:	4a46      	ldr	r2, [pc, #280]	; (80035e0 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 80034c6:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034cc:	4a45      	ldr	r2, [pc, #276]	; (80035e4 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 80034ce:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034d4:	4a44      	ldr	r2, [pc, #272]	; (80035e8 <HAL_SPI_TransmitReceive_DMA+0x200>)
 80034d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034dc:	2200      	movs	r2, #0
 80034de:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	330c      	adds	r3, #12
 80034ea:	4619      	mov	r1, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034f6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80034f8:	f7fd fef8 	bl	80012ec <HAL_DMA_Start_IT>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00c      	beq.n	800351c <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003506:	f043 0210 	orr.w	r2, r3, #16
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800351a:	e054      	b.n	80035c6 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	685a      	ldr	r2, [r3, #4]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f042 0201 	orr.w	r2, r2, #1
 800352a:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003530:	2200      	movs	r2, #0
 8003532:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003538:	2200      	movs	r2, #0
 800353a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003540:	2200      	movs	r2, #0
 8003542:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003548:	2200      	movs	r2, #0
 800354a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003554:	4619      	mov	r1, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	330c      	adds	r3, #12
 800355c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003562:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003564:	f7fd fec2 	bl	80012ec <HAL_DMA_Start_IT>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00c      	beq.n	8003588 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003572:	f043 0210 	orr.w	r2, r3, #16
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003586:	e01e      	b.n	80035c6 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003592:	2b40      	cmp	r3, #64	; 0x40
 8003594:	d007      	beq.n	80035a6 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035a4:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	685a      	ldr	r2, [r3, #4]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f042 0220 	orr.w	r2, r2, #32
 80035b4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f042 0202 	orr.w	r2, r2, #2
 80035c4:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80035ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3718      	adds	r7, #24
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	08003789 	.word	0x08003789
 80035dc:	08003651 	.word	0x08003651
 80035e0:	080037a5 	.word	0x080037a5
 80035e4:	080036f9 	.word	0x080036f9
 80035e8:	080037c1 	.word	0x080037c1

080035ec <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800365e:	f7fd fbf7 	bl	8000e50 <HAL_GetTick>
 8003662:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003672:	d03b      	beq.n	80036ec <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 0220 	bic.w	r2, r2, #32
 8003682:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10d      	bne.n	80036a8 <SPI_DMAReceiveCplt+0x58>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003694:	d108      	bne.n	80036a8 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f022 0203 	bic.w	r2, r2, #3
 80036a4:	605a      	str	r2, [r3, #4]
 80036a6:	e007      	b.n	80036b8 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0201 	bic.w	r2, r2, #1
 80036b6:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80036b8:	68ba      	ldr	r2, [r7, #8]
 80036ba:	2164      	movs	r1, #100	; 0x64
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f000 f927 	bl	8003910 <SPI_EndRxTransaction>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d002      	beq.n	80036ce <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2220      	movs	r2, #32
 80036cc:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d003      	beq.n	80036ec <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f7ff ffa9 	bl	800363c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80036ea:	e002      	b.n	80036f2 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f7ff ff7d 	bl	80035ec <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003704:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003706:	f7fd fba3 	bl	8000e50 <HAL_GetTick>
 800370a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003716:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800371a:	d02f      	beq.n	800377c <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0220 	bic.w	r2, r2, #32
 800372a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800372c:	68ba      	ldr	r2, [r7, #8]
 800372e:	2164      	movs	r1, #100	; 0x64
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f000 f953 	bl	80039dc <SPI_EndRxTxTransaction>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d005      	beq.n	8003748 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003740:	f043 0220 	orr.w	r2, r3, #32
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 0203 	bic.w	r2, r2, #3
 8003756:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003770:	2b00      	cmp	r3, #0
 8003772:	d003      	beq.n	800377c <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f7ff ff61 	bl	800363c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800377a:	e002      	b.n	8003782 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f7ff ff3f 	bl	8003600 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003794:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f7ff ff3c 	bl	8003614 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800379c:	bf00      	nop
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b0:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80037b2:	68f8      	ldr	r0, [r7, #12]
 80037b4:	f7ff ff38 	bl	8003628 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80037b8:	bf00      	nop
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037cc:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0203 	bic.w	r2, r2, #3
 80037dc:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e2:	f043 0210 	orr.w	r2, r3, #16
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f7ff ff22 	bl	800363c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80037f8:	bf00      	nop
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b088      	sub	sp, #32
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	603b      	str	r3, [r7, #0]
 800380c:	4613      	mov	r3, r2
 800380e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003810:	f7fd fb1e 	bl	8000e50 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003818:	1a9b      	subs	r3, r3, r2
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	4413      	add	r3, r2
 800381e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003820:	f7fd fb16 	bl	8000e50 <HAL_GetTick>
 8003824:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003826:	4b39      	ldr	r3, [pc, #228]	; (800390c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	015b      	lsls	r3, r3, #5
 800382c:	0d1b      	lsrs	r3, r3, #20
 800382e:	69fa      	ldr	r2, [r7, #28]
 8003830:	fb02 f303 	mul.w	r3, r2, r3
 8003834:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003836:	e054      	b.n	80038e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800383e:	d050      	beq.n	80038e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003840:	f7fd fb06 	bl	8000e50 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	69fa      	ldr	r2, [r7, #28]
 800384c:	429a      	cmp	r2, r3
 800384e:	d902      	bls.n	8003856 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d13d      	bne.n	80038d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	685a      	ldr	r2, [r3, #4]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003864:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800386e:	d111      	bne.n	8003894 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003878:	d004      	beq.n	8003884 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003882:	d107      	bne.n	8003894 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003892:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003898:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800389c:	d10f      	bne.n	80038be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e017      	b.n	8003902 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d101      	bne.n	80038dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80038d8:	2300      	movs	r3, #0
 80038da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	3b01      	subs	r3, #1
 80038e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	4013      	ands	r3, r2
 80038ec:	68ba      	ldr	r2, [r7, #8]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	bf0c      	ite	eq
 80038f2:	2301      	moveq	r3, #1
 80038f4:	2300      	movne	r3, #0
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	461a      	mov	r2, r3
 80038fa:	79fb      	ldrb	r3, [r7, #7]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d19b      	bne.n	8003838 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3720      	adds	r7, #32
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	20000000 	.word	0x20000000

08003910 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af02      	add	r7, sp, #8
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003924:	d111      	bne.n	800394a <SPI_EndRxTransaction+0x3a>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800392e:	d004      	beq.n	800393a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003938:	d107      	bne.n	800394a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003948:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003952:	d12a      	bne.n	80039aa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800395c:	d012      	beq.n	8003984 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	9300      	str	r3, [sp, #0]
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	2200      	movs	r2, #0
 8003966:	2180      	movs	r1, #128	; 0x80
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f7ff ff49 	bl	8003800 <SPI_WaitFlagStateUntilTimeout>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d02d      	beq.n	80039d0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003978:	f043 0220 	orr.w	r2, r3, #32
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e026      	b.n	80039d2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	2200      	movs	r2, #0
 800398c:	2101      	movs	r1, #1
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f7ff ff36 	bl	8003800 <SPI_WaitFlagStateUntilTimeout>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d01a      	beq.n	80039d0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800399e:	f043 0220 	orr.w	r2, r3, #32
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e013      	b.n	80039d2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	2200      	movs	r2, #0
 80039b2:	2101      	movs	r1, #1
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f7ff ff23 	bl	8003800 <SPI_WaitFlagStateUntilTimeout>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d007      	beq.n	80039d0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c4:	f043 0220 	orr.w	r2, r3, #32
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e000      	b.n	80039d2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
	...

080039dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b088      	sub	sp, #32
 80039e0:	af02      	add	r7, sp, #8
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80039e8:	4b1b      	ldr	r3, [pc, #108]	; (8003a58 <SPI_EndRxTxTransaction+0x7c>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a1b      	ldr	r2, [pc, #108]	; (8003a5c <SPI_EndRxTxTransaction+0x80>)
 80039ee:	fba2 2303 	umull	r2, r3, r2, r3
 80039f2:	0d5b      	lsrs	r3, r3, #21
 80039f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80039f8:	fb02 f303 	mul.w	r3, r2, r3
 80039fc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a06:	d112      	bne.n	8003a2e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	2180      	movs	r1, #128	; 0x80
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f7ff fef4 	bl	8003800 <SPI_WaitFlagStateUntilTimeout>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d016      	beq.n	8003a4c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a22:	f043 0220 	orr.w	r2, r3, #32
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e00f      	b.n	8003a4e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00a      	beq.n	8003a4a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	3b01      	subs	r3, #1
 8003a38:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a44:	2b80      	cmp	r3, #128	; 0x80
 8003a46:	d0f2      	beq.n	8003a2e <SPI_EndRxTxTransaction+0x52>
 8003a48:	e000      	b.n	8003a4c <SPI_EndRxTxTransaction+0x70>
        break;
 8003a4a:	bf00      	nop
  }

  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3718      	adds	r7, #24
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	20000000 	.word	0x20000000
 8003a5c:	165e9f81 	.word	0x165e9f81

08003a60 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a60:	b084      	sub	sp, #16
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b084      	sub	sp, #16
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
 8003a6a:	f107 001c 	add.w	r0, r7, #28
 8003a6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d122      	bne.n	8003abe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003a8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003aa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d105      	bne.n	8003ab2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 fa9c 	bl	8003ff0 <USB_CoreReset>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	73fb      	strb	r3, [r7, #15]
 8003abc:	e01a      	b.n	8003af4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 fa90 	bl	8003ff0 <USB_CoreReset>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003ad4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d106      	bne.n	8003ae8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ade:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	639a      	str	r2, [r3, #56]	; 0x38
 8003ae6:	e005      	b.n	8003af4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d10b      	bne.n	8003b12 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f043 0206 	orr.w	r2, r3, #6
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f043 0220 	orr.w	r2, r3, #32
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b1e:	b004      	add	sp, #16
 8003b20:	4770      	bx	lr

08003b22 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b083      	sub	sp, #12
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f023 0201 	bic.w	r2, r3, #1
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003b50:	2300      	movs	r3, #0
 8003b52:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003b60:	78fb      	ldrb	r3, [r7, #3]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d115      	bne.n	8003b92 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003b72:	2001      	movs	r0, #1
 8003b74:	f7fd f978 	bl	8000e68 <HAL_Delay>
      ms++;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 fa28 	bl	8003fd4 <USB_GetMode>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d01e      	beq.n	8003bc8 <USB_SetCurrentMode+0x84>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2b31      	cmp	r3, #49	; 0x31
 8003b8e:	d9f0      	bls.n	8003b72 <USB_SetCurrentMode+0x2e>
 8003b90:	e01a      	b.n	8003bc8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003b92:	78fb      	ldrb	r3, [r7, #3]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d115      	bne.n	8003bc4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003ba4:	2001      	movs	r0, #1
 8003ba6:	f7fd f95f 	bl	8000e68 <HAL_Delay>
      ms++;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	3301      	adds	r3, #1
 8003bae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 fa0f 	bl	8003fd4 <USB_GetMode>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d005      	beq.n	8003bc8 <USB_SetCurrentMode+0x84>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2b31      	cmp	r3, #49	; 0x31
 8003bc0:	d9f0      	bls.n	8003ba4 <USB_SetCurrentMode+0x60>
 8003bc2:	e001      	b.n	8003bc8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e005      	b.n	8003bd4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2b32      	cmp	r3, #50	; 0x32
 8003bcc:	d101      	bne.n	8003bd2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e000      	b.n	8003bd4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003bdc:	b084      	sub	sp, #16
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b086      	sub	sp, #24
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
 8003be6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003bea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	613b      	str	r3, [r7, #16]
 8003bfa:	e009      	b.n	8003c10 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	3340      	adds	r3, #64	; 0x40
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	2200      	movs	r2, #0
 8003c08:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	613b      	str	r3, [r7, #16]
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	2b0e      	cmp	r3, #14
 8003c14:	d9f2      	bls.n	8003bfc <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d11c      	bne.n	8003c56 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c2a:	f043 0302 	orr.w	r3, r3, #2
 8003c2e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c34:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	601a      	str	r2, [r3, #0]
 8003c54:	e005      	b.n	8003c62 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003c68:	461a      	mov	r2, r3
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c74:	4619      	mov	r1, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	680b      	ldr	r3, [r1, #0]
 8003c80:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d10c      	bne.n	8003ca2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d104      	bne.n	8003c98 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003c8e:	2100      	movs	r1, #0
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 f965 	bl	8003f60 <USB_SetDevSpeed>
 8003c96:	e008      	b.n	8003caa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003c98:	2101      	movs	r1, #1
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f960 	bl	8003f60 <USB_SetDevSpeed>
 8003ca0:	e003      	b.n	8003caa <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003ca2:	2103      	movs	r1, #3
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 f95b 	bl	8003f60 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003caa:	2110      	movs	r1, #16
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 f8f3 	bl	8003e98 <USB_FlushTxFifo>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d001      	beq.n	8003cbc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 f91f 	bl	8003f00 <USB_FlushRxFifo>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cde:	461a      	mov	r2, r3
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cea:	461a      	mov	r2, r3
 8003cec:	2300      	movs	r3, #0
 8003cee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	613b      	str	r3, [r7, #16]
 8003cf4:	e043      	b.n	8003d7e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	015a      	lsls	r2, r3, #5
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d0c:	d118      	bne.n	8003d40 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10a      	bne.n	8003d2a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	015a      	lsls	r2, r3, #5
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d20:	461a      	mov	r2, r3
 8003d22:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003d26:	6013      	str	r3, [r2, #0]
 8003d28:	e013      	b.n	8003d52 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	015a      	lsls	r2, r3, #5
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	4413      	add	r3, r2
 8003d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d36:	461a      	mov	r2, r3
 8003d38:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003d3c:	6013      	str	r3, [r2, #0]
 8003d3e:	e008      	b.n	8003d52 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	015a      	lsls	r2, r3, #5
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	4413      	add	r3, r2
 8003d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	2300      	movs	r3, #0
 8003d50:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	015a      	lsls	r2, r3, #5
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	4413      	add	r3, r2
 8003d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d5e:	461a      	mov	r2, r3
 8003d60:	2300      	movs	r3, #0
 8003d62:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	015a      	lsls	r2, r3, #5
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d70:	461a      	mov	r2, r3
 8003d72:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d76:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	613b      	str	r3, [r7, #16]
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d3b7      	bcc.n	8003cf6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d86:	2300      	movs	r3, #0
 8003d88:	613b      	str	r3, [r7, #16]
 8003d8a:	e043      	b.n	8003e14 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	015a      	lsls	r2, r3, #5
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	4413      	add	r3, r2
 8003d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003da2:	d118      	bne.n	8003dd6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10a      	bne.n	8003dc0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	015a      	lsls	r2, r3, #5
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	4413      	add	r3, r2
 8003db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003db6:	461a      	mov	r2, r3
 8003db8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003dbc:	6013      	str	r3, [r2, #0]
 8003dbe:	e013      	b.n	8003de8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	015a      	lsls	r2, r3, #5
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dcc:	461a      	mov	r2, r3
 8003dce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003dd2:	6013      	str	r3, [r2, #0]
 8003dd4:	e008      	b.n	8003de8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	015a      	lsls	r2, r3, #5
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	4413      	add	r3, r2
 8003dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003de2:	461a      	mov	r2, r3
 8003de4:	2300      	movs	r3, #0
 8003de6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	015a      	lsls	r2, r3, #5
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	4413      	add	r3, r2
 8003df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003df4:	461a      	mov	r2, r3
 8003df6:	2300      	movs	r3, #0
 8003df8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	015a      	lsls	r2, r3, #5
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	4413      	add	r3, r2
 8003e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e06:	461a      	mov	r2, r3
 8003e08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e0c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	3301      	adds	r3, #1
 8003e12:	613b      	str	r3, [r7, #16]
 8003e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d3b7      	bcc.n	8003d8c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e2e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003e3c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d105      	bne.n	8003e50 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	f043 0210 	orr.w	r2, r3, #16
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	699a      	ldr	r2, [r3, #24]
 8003e54:	4b0f      	ldr	r3, [pc, #60]	; (8003e94 <USB_DevInit+0x2b8>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d005      	beq.n	8003e6e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	f043 0208 	orr.w	r2, r3, #8
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003e6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d107      	bne.n	8003e84 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e7c:	f043 0304 	orr.w	r3, r3, #4
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003e84:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3718      	adds	r7, #24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e90:	b004      	add	sp, #16
 8003e92:	4770      	bx	lr
 8003e94:	803c3800 	.word	0x803c3800

08003e98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	4a13      	ldr	r2, [pc, #76]	; (8003efc <USB_FlushTxFifo+0x64>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d901      	bls.n	8003eb8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e01b      	b.n	8003ef0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	daf2      	bge.n	8003ea6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	019b      	lsls	r3, r3, #6
 8003ec8:	f043 0220 	orr.w	r2, r3, #32
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	4a08      	ldr	r2, [pc, #32]	; (8003efc <USB_FlushTxFifo+0x64>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d901      	bls.n	8003ee2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e006      	b.n	8003ef0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	f003 0320 	and.w	r3, r3, #32
 8003eea:	2b20      	cmp	r3, #32
 8003eec:	d0f0      	beq.n	8003ed0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3714      	adds	r7, #20
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr
 8003efc:	00030d40 	.word	0x00030d40

08003f00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	4a11      	ldr	r2, [pc, #68]	; (8003f5c <USB_FlushRxFifo+0x5c>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d901      	bls.n	8003f1e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e018      	b.n	8003f50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	daf2      	bge.n	8003f0c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003f26:	2300      	movs	r3, #0
 8003f28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2210      	movs	r2, #16
 8003f2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	3301      	adds	r3, #1
 8003f34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	4a08      	ldr	r2, [pc, #32]	; (8003f5c <USB_FlushRxFifo+0x5c>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d901      	bls.n	8003f42 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e006      	b.n	8003f50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	f003 0310 	and.w	r3, r3, #16
 8003f4a:	2b10      	cmp	r3, #16
 8003f4c:	d0f0      	beq.n	8003f30 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3714      	adds	r7, #20
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr
 8003f5c:	00030d40 	.word	0x00030d40

08003f60 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	460b      	mov	r3, r1
 8003f6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	78fb      	ldrb	r3, [r7, #3]
 8003f7a:	68f9      	ldr	r1, [r7, #12]
 8003f7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f80:	4313      	orrs	r3, r2
 8003f82:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3714      	adds	r7, #20
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003f92:	b480      	push	{r7}
 8003f94:	b085      	sub	sp, #20
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003fac:	f023 0303 	bic.w	r3, r3, #3
 8003fb0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fc0:	f043 0302 	orr.w	r3, r3, #2
 8003fc4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3714      	adds	r7, #20
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	f003 0301 	and.w	r3, r3, #1
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	3301      	adds	r3, #1
 8004000:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	4a13      	ldr	r2, [pc, #76]	; (8004054 <USB_CoreReset+0x64>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d901      	bls.n	800400e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e01b      	b.n	8004046 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	2b00      	cmp	r3, #0
 8004014:	daf2      	bge.n	8003ffc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004016:	2300      	movs	r3, #0
 8004018:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	f043 0201 	orr.w	r2, r3, #1
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	3301      	adds	r3, #1
 800402a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	4a09      	ldr	r2, [pc, #36]	; (8004054 <USB_CoreReset+0x64>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d901      	bls.n	8004038 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e006      	b.n	8004046 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b01      	cmp	r3, #1
 8004042:	d0f0      	beq.n	8004026 <USB_CoreReset+0x36>

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3714      	adds	r7, #20
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	00030d40 	.word	0x00030d40

08004058 <__libc_init_array>:
 8004058:	b570      	push	{r4, r5, r6, lr}
 800405a:	4d0d      	ldr	r5, [pc, #52]	; (8004090 <__libc_init_array+0x38>)
 800405c:	4c0d      	ldr	r4, [pc, #52]	; (8004094 <__libc_init_array+0x3c>)
 800405e:	1b64      	subs	r4, r4, r5
 8004060:	10a4      	asrs	r4, r4, #2
 8004062:	2600      	movs	r6, #0
 8004064:	42a6      	cmp	r6, r4
 8004066:	d109      	bne.n	800407c <__libc_init_array+0x24>
 8004068:	4d0b      	ldr	r5, [pc, #44]	; (8004098 <__libc_init_array+0x40>)
 800406a:	4c0c      	ldr	r4, [pc, #48]	; (800409c <__libc_init_array+0x44>)
 800406c:	f000 f820 	bl	80040b0 <_init>
 8004070:	1b64      	subs	r4, r4, r5
 8004072:	10a4      	asrs	r4, r4, #2
 8004074:	2600      	movs	r6, #0
 8004076:	42a6      	cmp	r6, r4
 8004078:	d105      	bne.n	8004086 <__libc_init_array+0x2e>
 800407a:	bd70      	pop	{r4, r5, r6, pc}
 800407c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004080:	4798      	blx	r3
 8004082:	3601      	adds	r6, #1
 8004084:	e7ee      	b.n	8004064 <__libc_init_array+0xc>
 8004086:	f855 3b04 	ldr.w	r3, [r5], #4
 800408a:	4798      	blx	r3
 800408c:	3601      	adds	r6, #1
 800408e:	e7f2      	b.n	8004076 <__libc_init_array+0x1e>
 8004090:	080040e8 	.word	0x080040e8
 8004094:	080040e8 	.word	0x080040e8
 8004098:	080040e8 	.word	0x080040e8
 800409c:	080040ec 	.word	0x080040ec

080040a0 <memset>:
 80040a0:	4402      	add	r2, r0
 80040a2:	4603      	mov	r3, r0
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d100      	bne.n	80040aa <memset+0xa>
 80040a8:	4770      	bx	lr
 80040aa:	f803 1b01 	strb.w	r1, [r3], #1
 80040ae:	e7f9      	b.n	80040a4 <memset+0x4>

080040b0 <_init>:
 80040b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040b2:	bf00      	nop
 80040b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040b6:	bc08      	pop	{r3}
 80040b8:	469e      	mov	lr, r3
 80040ba:	4770      	bx	lr

080040bc <_fini>:
 80040bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040be:	bf00      	nop
 80040c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040c2:	bc08      	pop	{r3}
 80040c4:	469e      	mov	lr, r3
 80040c6:	4770      	bx	lr
