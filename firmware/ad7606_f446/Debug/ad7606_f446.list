
ad7606_f446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f44  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004108  08004108  00014108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004120  08004120  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004120  08004120  00014120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004128  08004128  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004128  08004128  00014128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800412c  0800412c  0001412c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004130  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e8  2000000c  0800413c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005f4  0800413c  000205f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be98  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f11  00000000  00000000  0002bed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  0002dde8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000978  00000000  00000000  0002e848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020cf0  00000000  00000000  0002f1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c475  00000000  00000000  0004feb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c61d4  00000000  00000000  0005c325  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001224f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a90  00000000  00000000  0012254c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080040f0 	.word	0x080040f0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080040f0 	.word	0x080040f0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <ad7606_os_set>:
  * @brief Over-sample Rate Configuration
  * @param os_ratio (Only, 1,2,4,8,16,32,64 available)
  * @retval None
  */
void ad7606_os_set (uint8_t os_ratio)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
	uint16_t os_val;
	switch (os_ratio)
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	2b20      	cmp	r3, #32
 8000516:	dc47      	bgt.n	80005a8 <ad7606_os_set+0xa0>
 8000518:	2b00      	cmp	r3, #0
 800051a:	dd60      	ble.n	80005de <ad7606_os_set+0xd6>
 800051c:	3b01      	subs	r3, #1
 800051e:	2b1f      	cmp	r3, #31
 8000520:	d85d      	bhi.n	80005de <ad7606_os_set+0xd6>
 8000522:	a201      	add	r2, pc, #4	; (adr r2, 8000528 <ad7606_os_set+0x20>)
 8000524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000528:	080005af 	.word	0x080005af
 800052c:	080005b5 	.word	0x080005b5
 8000530:	080005df 	.word	0x080005df
 8000534:	080005bb 	.word	0x080005bb
 8000538:	080005df 	.word	0x080005df
 800053c:	080005df 	.word	0x080005df
 8000540:	080005df 	.word	0x080005df
 8000544:	080005c1 	.word	0x080005c1
 8000548:	080005df 	.word	0x080005df
 800054c:	080005df 	.word	0x080005df
 8000550:	080005df 	.word	0x080005df
 8000554:	080005df 	.word	0x080005df
 8000558:	080005df 	.word	0x080005df
 800055c:	080005df 	.word	0x080005df
 8000560:	080005df 	.word	0x080005df
 8000564:	080005c7 	.word	0x080005c7
 8000568:	080005df 	.word	0x080005df
 800056c:	080005df 	.word	0x080005df
 8000570:	080005df 	.word	0x080005df
 8000574:	080005df 	.word	0x080005df
 8000578:	080005df 	.word	0x080005df
 800057c:	080005df 	.word	0x080005df
 8000580:	080005df 	.word	0x080005df
 8000584:	080005df 	.word	0x080005df
 8000588:	080005df 	.word	0x080005df
 800058c:	080005df 	.word	0x080005df
 8000590:	080005df 	.word	0x080005df
 8000594:	080005df 	.word	0x080005df
 8000598:	080005df 	.word	0x080005df
 800059c:	080005df 	.word	0x080005df
 80005a0:	080005df 	.word	0x080005df
 80005a4:	080005cf 	.word	0x080005cf
 80005a8:	2b40      	cmp	r3, #64	; 0x40
 80005aa:	d014      	beq.n	80005d6 <ad7606_os_set+0xce>
 80005ac:	e017      	b.n	80005de <ad7606_os_set+0xd6>
	{
	case 1: os_val = 0x000;
 80005ae:	2300      	movs	r3, #0
 80005b0:	81fb      	strh	r3, [r7, #14]
	break;
 80005b2:	e016      	b.n	80005e2 <ad7606_os_set+0xda>
	case 2: os_val = 0x001;
 80005b4:	2301      	movs	r3, #1
 80005b6:	81fb      	strh	r3, [r7, #14]
	break;
 80005b8:	e013      	b.n	80005e2 <ad7606_os_set+0xda>
	case 4: os_val = 0x010;
 80005ba:	2310      	movs	r3, #16
 80005bc:	81fb      	strh	r3, [r7, #14]
	break;
 80005be:	e010      	b.n	80005e2 <ad7606_os_set+0xda>
	case 8: os_val = 0x011;
 80005c0:	2311      	movs	r3, #17
 80005c2:	81fb      	strh	r3, [r7, #14]
	break;
 80005c4:	e00d      	b.n	80005e2 <ad7606_os_set+0xda>
	case 16: os_val = 0x100;
 80005c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005ca:	81fb      	strh	r3, [r7, #14]
	break;
 80005cc:	e009      	b.n	80005e2 <ad7606_os_set+0xda>
	case 32: os_val = 0x101;
 80005ce:	f240 1301 	movw	r3, #257	; 0x101
 80005d2:	81fb      	strh	r3, [r7, #14]
	break;
 80005d4:	e005      	b.n	80005e2 <ad7606_os_set+0xda>
	case 64: os_val = 0x110;
 80005d6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80005da:	81fb      	strh	r3, [r7, #14]
	break;
 80005dc:	e001      	b.n	80005e2 <ad7606_os_set+0xda>
	default: os_val = 0x000;
 80005de:	2300      	movs	r3, #0
 80005e0:	81fb      	strh	r3, [r7, #14]
	}
	HAL_GPIO_WritePin(AD_OS0_GPIO_Port, AD_OS0_Pin, os_val & 0x001);
 80005e2:	89fb      	ldrh	r3, [r7, #14]
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	461a      	mov	r2, r3
 80005ee:	2102      	movs	r1, #2
 80005f0:	480f      	ldr	r0, [pc, #60]	; (8000630 <ad7606_os_set+0x128>)
 80005f2:	f001 fbe5 	bl	8001dc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD_OS1_GPIO_Port, AD_OS1_Pin, (os_val >> 4) & 0x001);
 80005f6:	89fb      	ldrh	r3, [r7, #14]
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	b29b      	uxth	r3, r3
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	b2db      	uxtb	r3, r3
 8000604:	461a      	mov	r2, r3
 8000606:	2101      	movs	r1, #1
 8000608:	4809      	ldr	r0, [pc, #36]	; (8000630 <ad7606_os_set+0x128>)
 800060a:	f001 fbd9 	bl	8001dc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD_OS2_GPIO_Port, AD_OS2_Pin, (os_val >> 8) & 0x001);
 800060e:	89fb      	ldrh	r3, [r7, #14]
 8000610:	0a1b      	lsrs	r3, r3, #8
 8000612:	b29b      	uxth	r3, r3
 8000614:	b2db      	uxtb	r3, r3
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	b2db      	uxtb	r3, r3
 800061c:	461a      	mov	r2, r3
 800061e:	2108      	movs	r1, #8
 8000620:	4804      	ldr	r0, [pc, #16]	; (8000634 <ad7606_os_set+0x12c>)
 8000622:	f001 fbcd 	bl	8001dc0 <HAL_GPIO_WritePin>
}
 8000626:	bf00      	nop
 8000628:	3710      	adds	r7, #16
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40020000 	.word	0x40020000
 8000634:	40020800 	.word	0x40020800

08000638 <ad7606_rst_set>:
  * @brief RESET bit Configuration
  * @param None
  * @retval None
  */
void ad7606_rst_set(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AD_RST_GPIO_Port, AD_RST_Pin, GPIO_PIN_RESET);
 800063c:	2200      	movs	r2, #0
 800063e:	2104      	movs	r1, #4
 8000640:	480a      	ldr	r0, [pc, #40]	; (800066c <ad7606_rst_set+0x34>)
 8000642:	f001 fbbd 	bl	8001dc0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000646:	2001      	movs	r0, #1
 8000648:	f000 fc16 	bl	8000e78 <HAL_Delay>
	HAL_GPIO_WritePin(AD_RST_GPIO_Port, AD_RST_Pin, GPIO_PIN_SET);
 800064c:	2201      	movs	r2, #1
 800064e:	2104      	movs	r1, #4
 8000650:	4806      	ldr	r0, [pc, #24]	; (800066c <ad7606_rst_set+0x34>)
 8000652:	f001 fbb5 	bl	8001dc0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000656:	2001      	movs	r0, #1
 8000658:	f000 fc0e 	bl	8000e78 <HAL_Delay>
	HAL_GPIO_WritePin(AD_RST_GPIO_Port, AD_RST_Pin, GPIO_PIN_RESET);
 800065c:	2200      	movs	r2, #0
 800065e:	2104      	movs	r1, #4
 8000660:	4802      	ldr	r0, [pc, #8]	; (800066c <ad7606_rst_set+0x34>)
 8000662:	f001 fbad 	bl	8001dc0 <HAL_GPIO_WritePin>

}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40020800 	.word	0x40020800

08000670 <ad7606_init>:
  * @brief Initialize States for ad7606
  * @param None
  * @retval None
  */
void ad7606_init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ad_dou_a_GPIO_Port, ad_dou_a_Pin, GPIO_PIN_SET);
 8000674:	2201      	movs	r2, #1
 8000676:	2104      	movs	r1, #4
 8000678:	480b      	ldr	r0, [pc, #44]	; (80006a8 <ad7606_init+0x38>)
 800067a:	f001 fba1 	bl	8001dc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ad_dou_b_GPIO_Port, ad_dou_b_Pin, GPIO_PIN_SET);
 800067e:	2201      	movs	r2, #1
 8000680:	2108      	movs	r1, #8
 8000682:	4809      	ldr	r0, [pc, #36]	; (80006a8 <ad7606_init+0x38>)
 8000684:	f001 fb9c 	bl	8001dc0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000688:	2001      	movs	r0, #1
 800068a:	f000 fbf5 	bl	8000e78 <HAL_Delay>
	//SER PIN??

	//OS PINS
	ad7606_os_set(1);
 800068e:	2001      	movs	r0, #1
 8000690:	f7ff ff3a 	bl	8000508 <ad7606_os_set>

	//RESET
	ad7606_rst_set();
 8000694:	f7ff ffd0 	bl	8000638 <ad7606_rst_set>

	HAL_Delay(1);
 8000698:	2001      	movs	r0, #1
 800069a:	f000 fbed 	bl	8000e78 <HAL_Delay>

	//Start CONVST
	ad7606_convst_set();
 800069e:	f000 f805 	bl	80006ac <ad7606_convst_set>

}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40020000 	.word	0x40020000

080006ac <ad7606_convst_set>:
  * @brief Start Conversion
  * @param None
  * @retval None
  */
void ad7606_convst_set(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ad_dou_a_GPIO_Port, ad_dou_a_Pin, GPIO_PIN_RESET);
 80006b0:	2200      	movs	r2, #0
 80006b2:	2104      	movs	r1, #4
 80006b4:	480c      	ldr	r0, [pc, #48]	; (80006e8 <ad7606_convst_set+0x3c>)
 80006b6:	f001 fb83 	bl	8001dc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ad_dou_b_GPIO_Port, ad_dou_b_Pin, GPIO_PIN_RESET);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2108      	movs	r1, #8
 80006be:	480a      	ldr	r0, [pc, #40]	; (80006e8 <ad7606_convst_set+0x3c>)
 80006c0:	f001 fb7e 	bl	8001dc0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80006c4:	2001      	movs	r0, #1
 80006c6:	f000 fbd7 	bl	8000e78 <HAL_Delay>
	HAL_GPIO_WritePin(ad_dou_a_GPIO_Port, ad_dou_a_Pin, GPIO_PIN_SET);
 80006ca:	2201      	movs	r2, #1
 80006cc:	2104      	movs	r1, #4
 80006ce:	4806      	ldr	r0, [pc, #24]	; (80006e8 <ad7606_convst_set+0x3c>)
 80006d0:	f001 fb76 	bl	8001dc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ad_dou_b_GPIO_Port, ad_dou_b_Pin, GPIO_PIN_SET);
 80006d4:	2201      	movs	r2, #1
 80006d6:	2108      	movs	r1, #8
 80006d8:	4803      	ldr	r0, [pc, #12]	; (80006e8 <ad7606_convst_set+0x3c>)
 80006da:	f001 fb71 	bl	8001dc0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80006de:	2001      	movs	r0, #1
 80006e0:	f000 fbca 	bl	8000e78 <HAL_Delay>


}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40020000 	.word	0x40020000

080006ec <ad7606_receive>:
  * @brief Data received via SPI Interface
  * @param None
  * @retval None
  */
void ad7606_receive(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AD_CS_GPIO_Port, AD_CS_Pin, RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2110      	movs	r1, #16
 80006f4:	4804      	ldr	r0, [pc, #16]	; (8000708 <ad7606_receive+0x1c>)
 80006f6:	f001 fb63 	bl	8001dc0 <HAL_GPIO_WritePin>
	HAL_SPI_Receive_DMA(&hspi1, &data_receive, 1);
 80006fa:	2201      	movs	r2, #1
 80006fc:	4903      	ldr	r1, [pc, #12]	; (800070c <ad7606_receive+0x20>)
 80006fe:	4804      	ldr	r0, [pc, #16]	; (8000710 <ad7606_receive+0x24>)
 8000700:	f002 fdca 	bl	8003298 <HAL_SPI_Receive_DMA>
}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40020000 	.word	0x40020000
 800070c:	200005ec 	.word	0x200005ec
 8000710:	20000028 	.word	0x20000028

08000714 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000718:	f000 fb3c 	bl	8000d94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800071c:	f000 f828 	bl	8000770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000720:	f000 f918 	bl	8000954 <MX_GPIO_Init>
  MX_DMA_Init();
 8000724:	f000 f8f6 	bl	8000914 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000728:	f000 f8c6 	bl	80008b8 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 800072c:	f000 f88c 	bl	8000848 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  //Follow HAL Procedures
  HAL_SPI_DeInit(&hspi1);
 8000730:	480d      	ldr	r0, [pc, #52]	; (8000768 <main+0x54>)
 8000732:	f002 fd88 	bl	8003246 <HAL_SPI_DeInit>
  HAL_SPI_Init(&hspi1);
 8000736:	480c      	ldr	r0, [pc, #48]	; (8000768 <main+0x54>)
 8000738:	f002 fcfc 	bl	8003134 <HAL_SPI_Init>
  ad7606_init();
 800073c:	f7ff ff98 	bl	8000670 <ad7606_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	 HAL_Delay(500);
 8000740:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000744:	f000 fb98 	bl	8000e78 <HAL_Delay>
	 ad7606_convst_set();
 8000748:	f7ff ffb0 	bl	80006ac <ad7606_convst_set>
	 while ((HAL_GPIO_ReadPin(AD_BUSY_GPIO_Port, AD_BUSY_Pin) == GPIO_PIN_SET));
 800074c:	bf00      	nop
 800074e:	2110      	movs	r1, #16
 8000750:	4806      	ldr	r0, [pc, #24]	; (800076c <main+0x58>)
 8000752:	f001 fb1d 	bl	8001d90 <HAL_GPIO_ReadPin>
 8000756:	4603      	mov	r3, r0
 8000758:	2b01      	cmp	r3, #1
 800075a:	d0f8      	beq.n	800074e <main+0x3a>
	 HAL_Delay(10);
 800075c:	200a      	movs	r0, #10
 800075e:	f000 fb8b 	bl	8000e78 <HAL_Delay>
	 ad7606_receive();
 8000762:	f7ff ffc3 	bl	80006ec <ad7606_receive>
	 HAL_Delay(500);
 8000766:	e7eb      	b.n	8000740 <main+0x2c>
 8000768:	20000028 	.word	0x20000028
 800076c:	40020800 	.word	0x40020800

08000770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b094      	sub	sp, #80	; 0x50
 8000774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000776:	f107 031c 	add.w	r3, r7, #28
 800077a:	2234      	movs	r2, #52	; 0x34
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f003 fcae 	bl	80040e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000784:	f107 0308 	add.w	r3, r7, #8
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000794:	2300      	movs	r3, #0
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	4b29      	ldr	r3, [pc, #164]	; (8000840 <SystemClock_Config+0xd0>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079c:	4a28      	ldr	r2, [pc, #160]	; (8000840 <SystemClock_Config+0xd0>)
 800079e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a2:	6413      	str	r3, [r2, #64]	; 0x40
 80007a4:	4b26      	ldr	r3, [pc, #152]	; (8000840 <SystemClock_Config+0xd0>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007b0:	2300      	movs	r3, #0
 80007b2:	603b      	str	r3, [r7, #0]
 80007b4:	4b23      	ldr	r3, [pc, #140]	; (8000844 <SystemClock_Config+0xd4>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007bc:	4a21      	ldr	r2, [pc, #132]	; (8000844 <SystemClock_Config+0xd4>)
 80007be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c2:	6013      	str	r3, [r2, #0]
 80007c4:	4b1f      	ldr	r3, [pc, #124]	; (8000844 <SystemClock_Config+0xd4>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007cc:	603b      	str	r3, [r7, #0]
 80007ce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007d0:	2301      	movs	r3, #1
 80007d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007da:	2302      	movs	r3, #2
 80007dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 13;
 80007e4:	230d      	movs	r3, #13
 80007e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80007e8:	2348      	movs	r3, #72	; 0x48
 80007ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ec:	2302      	movs	r3, #2
 80007ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80007f0:	2303      	movs	r3, #3
 80007f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007f4:	2302      	movs	r3, #2
 80007f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f8:	f107 031c 	add.w	r3, r7, #28
 80007fc:	4618      	mov	r0, r3
 80007fe:	f002 f9fb 	bl	8002bf8 <HAL_RCC_OscConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000808:	f000 f928 	bl	8000a5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080c:	230f      	movs	r3, #15
 800080e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000810:	2301      	movs	r3, #1
 8000812:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000814:	2300      	movs	r3, #0
 8000816:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800081c:	2300      	movs	r3, #0
 800081e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000820:	f107 0308 	add.w	r3, r7, #8
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f001 fc2c 	bl	8002084 <HAL_RCC_ClockConfig>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000832:	f000 f913 	bl	8000a5c <Error_Handler>
  }
}
 8000836:	bf00      	nop
 8000838:	3750      	adds	r7, #80	; 0x50
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800
 8000844:	40007000 	.word	0x40007000

08000848 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800084c:	4b18      	ldr	r3, [pc, #96]	; (80008b0 <MX_SPI1_Init+0x68>)
 800084e:	4a19      	ldr	r2, [pc, #100]	; (80008b4 <MX_SPI1_Init+0x6c>)
 8000850:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000852:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <MX_SPI1_Init+0x68>)
 8000854:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000858:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800085a:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <MX_SPI1_Init+0x68>)
 800085c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000860:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000862:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <MX_SPI1_Init+0x68>)
 8000864:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000868:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <MX_SPI1_Init+0x68>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MX_SPI1_Init+0x68>)
 8000872:	2200      	movs	r2, #0
 8000874:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <MX_SPI1_Init+0x68>)
 8000878:	f44f 7200 	mov.w	r2, #512	; 0x200
 800087c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800087e:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_SPI1_Init+0x68>)
 8000880:	2200      	movs	r2, #0
 8000882:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000884:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <MX_SPI1_Init+0x68>)
 8000886:	2200      	movs	r2, #0
 8000888:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_SPI1_Init+0x68>)
 800088c:	2200      	movs	r2, #0
 800088e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000890:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <MX_SPI1_Init+0x68>)
 8000892:	2200      	movs	r2, #0
 8000894:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_SPI1_Init+0x68>)
 8000898:	220a      	movs	r2, #10
 800089a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800089c:	4804      	ldr	r0, [pc, #16]	; (80008b0 <MX_SPI1_Init+0x68>)
 800089e:	f002 fc49 	bl	8003134 <HAL_SPI_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 80008a8:	f000 f8d8 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000028 	.word	0x20000028
 80008b4:	40013000 	.word	0x40013000

080008b8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008bc:	4b14      	ldr	r3, [pc, #80]	; (8000910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008c4:	4b12      	ldr	r3, [pc, #72]	; (8000910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c6:	2206      	movs	r2, #6
 80008c8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008ca:	4b11      	ldr	r3, [pc, #68]	; (8000910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008cc:	2202      	movs	r2, #2
 80008ce:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008d0:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d8:	2202      	movs	r2, #2
 80008da:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008e2:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008e8:	4b09      	ldr	r3, [pc, #36]	; (8000910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80008ee:	4b08      	ldr	r3, [pc, #32]	; (8000910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008fa:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008fc:	f001 fa79 	bl	8001df2 <HAL_PCD_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000906:	f000 f8a9 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	200000e0 	.word	0x200000e0

08000914 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_DMA_Init+0x3c>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a0b      	ldr	r2, [pc, #44]	; (8000950 <MX_DMA_Init+0x3c>)
 8000924:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_DMA_Init+0x3c>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	2100      	movs	r1, #0
 800093a:	2038      	movs	r0, #56	; 0x38
 800093c:	f000 fb9b 	bl	8001076 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000940:	2038      	movs	r0, #56	; 0x38
 8000942:	f000 fbb4 	bl	80010ae <HAL_NVIC_EnableIRQ>

}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40023800 	.word	0x40023800

08000954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b088      	sub	sp, #32
 8000958:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095a:	f107 030c 	add.w	r3, r7, #12
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]
 8000968:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	4b38      	ldr	r3, [pc, #224]	; (8000a50 <MX_GPIO_Init+0xfc>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a37      	ldr	r2, [pc, #220]	; (8000a50 <MX_GPIO_Init+0xfc>)
 8000974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b35      	ldr	r3, [pc, #212]	; (8000a50 <MX_GPIO_Init+0xfc>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	4b31      	ldr	r3, [pc, #196]	; (8000a50 <MX_GPIO_Init+0xfc>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a30      	ldr	r2, [pc, #192]	; (8000a50 <MX_GPIO_Init+0xfc>)
 8000990:	f043 0304 	orr.w	r3, r3, #4
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b2e      	ldr	r3, [pc, #184]	; (8000a50 <MX_GPIO_Init+0xfc>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0304 	and.w	r3, r3, #4
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	603b      	str	r3, [r7, #0]
 80009a6:	4b2a      	ldr	r3, [pc, #168]	; (8000a50 <MX_GPIO_Init+0xfc>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a29      	ldr	r2, [pc, #164]	; (8000a50 <MX_GPIO_Init+0xfc>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b27      	ldr	r3, [pc, #156]	; (8000a50 <MX_GPIO_Init+0xfc>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD_RST_Pin|AD_OS2_Pin, GPIO_PIN_RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	210c      	movs	r1, #12
 80009c2:	4824      	ldr	r0, [pc, #144]	; (8000a54 <MX_GPIO_Init+0x100>)
 80009c4:	f001 f9fc 	bl	8001dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AD_OS1_Pin|AD_OS0_Pin|ad_dou_a_Pin|ad_dou_b_Pin, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	210f      	movs	r1, #15
 80009cc:	4822      	ldr	r0, [pc, #136]	; (8000a58 <MX_GPIO_Init+0x104>)
 80009ce:	f001 f9f7 	bl	8001dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD_CS_GPIO_Port, AD_CS_Pin, GPIO_PIN_SET);
 80009d2:	2201      	movs	r2, #1
 80009d4:	2110      	movs	r1, #16
 80009d6:	4820      	ldr	r0, [pc, #128]	; (8000a58 <MX_GPIO_Init+0x104>)
 80009d8:	f001 f9f2 	bl	8001dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : AD_RST_Pin AD_OS2_Pin */
  GPIO_InitStruct.Pin = AD_RST_Pin|AD_OS2_Pin;
 80009dc:	230c      	movs	r3, #12
 80009de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e0:	2301      	movs	r3, #1
 80009e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ec:	f107 030c 	add.w	r3, r7, #12
 80009f0:	4619      	mov	r1, r3
 80009f2:	4818      	ldr	r0, [pc, #96]	; (8000a54 <MX_GPIO_Init+0x100>)
 80009f4:	f000 ff44 	bl	8001880 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD_OS1_Pin AD_OS0_Pin ad_dou_a_Pin ad_dou_b_Pin */
  GPIO_InitStruct.Pin = AD_OS1_Pin|AD_OS0_Pin|ad_dou_a_Pin|ad_dou_b_Pin;
 80009f8:	230f      	movs	r3, #15
 80009fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fc:	2301      	movs	r3, #1
 80009fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a08:	f107 030c 	add.w	r3, r7, #12
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4812      	ldr	r0, [pc, #72]	; (8000a58 <MX_GPIO_Init+0x104>)
 8000a10:	f000 ff36 	bl	8001880 <HAL_GPIO_Init>

  /*Configure GPIO pin : AD_CS_Pin */
  GPIO_InitStruct.Pin = AD_CS_Pin;
 8000a14:	2310      	movs	r3, #16
 8000a16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000a20:	2301      	movs	r3, #1
 8000a22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AD_CS_GPIO_Port, &GPIO_InitStruct);
 8000a24:	f107 030c 	add.w	r3, r7, #12
 8000a28:	4619      	mov	r1, r3
 8000a2a:	480b      	ldr	r0, [pc, #44]	; (8000a58 <MX_GPIO_Init+0x104>)
 8000a2c:	f000 ff28 	bl	8001880 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD_BUSY_Pin AD_FRST_Pin */
  GPIO_InitStruct.Pin = AD_BUSY_Pin|AD_FRST_Pin;
 8000a30:	2330      	movs	r3, #48	; 0x30
 8000a32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a34:	2300      	movs	r3, #0
 8000a36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a3c:	f107 030c 	add.w	r3, r7, #12
 8000a40:	4619      	mov	r1, r3
 8000a42:	4804      	ldr	r0, [pc, #16]	; (8000a54 <MX_GPIO_Init+0x100>)
 8000a44:	f000 ff1c 	bl	8001880 <HAL_GPIO_Init>

}
 8000a48:	bf00      	nop
 8000a4a:	3720      	adds	r7, #32
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40020800 	.word	0x40020800
 8000a58:	40020000 	.word	0x40020000

08000a5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a60:	b672      	cpsid	i
}
 8000a62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <Error_Handler+0x8>
	...

08000a68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <HAL_MspInit+0x4c>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a76:	4a0f      	ldr	r2, [pc, #60]	; (8000ab4 <HAL_MspInit+0x4c>)
 8000a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	; (8000ab4 <HAL_MspInit+0x4c>)
 8000a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	603b      	str	r3, [r7, #0]
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <HAL_MspInit+0x4c>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a92:	4a08      	ldr	r2, [pc, #32]	; (8000ab4 <HAL_MspInit+0x4c>)
 8000a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a98:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_MspInit+0x4c>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa2:	603b      	str	r3, [r7, #0]
 8000aa4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	40023800 	.word	0x40023800

08000ab8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08a      	sub	sp, #40	; 0x28
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a30      	ldr	r2, [pc, #192]	; (8000b98 <HAL_SPI_MspInit+0xe0>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d159      	bne.n	8000b8e <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	4b2f      	ldr	r3, [pc, #188]	; (8000b9c <HAL_SPI_MspInit+0xe4>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae2:	4a2e      	ldr	r2, [pc, #184]	; (8000b9c <HAL_SPI_MspInit+0xe4>)
 8000ae4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aea:	4b2c      	ldr	r3, [pc, #176]	; (8000b9c <HAL_SPI_MspInit+0xe4>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	4b28      	ldr	r3, [pc, #160]	; (8000b9c <HAL_SPI_MspInit+0xe4>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a27      	ldr	r2, [pc, #156]	; (8000b9c <HAL_SPI_MspInit+0xe4>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b25      	ldr	r3, [pc, #148]	; (8000b9c <HAL_SPI_MspInit+0xe4>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = AD_SCK_Pin|AD_DOU_A_Pin;
 8000b12:	2360      	movs	r3, #96	; 0x60
 8000b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	2302      	movs	r3, #2
 8000b18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b22:	2305      	movs	r3, #5
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	481c      	ldr	r0, [pc, #112]	; (8000ba0 <HAL_SPI_MspInit+0xe8>)
 8000b2e:	f000 fea7 	bl	8001880 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8000b32:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <HAL_SPI_MspInit+0xec>)
 8000b34:	4a1c      	ldr	r2, [pc, #112]	; (8000ba8 <HAL_SPI_MspInit+0xf0>)
 8000b36:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000b38:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <HAL_SPI_MspInit+0xec>)
 8000b3a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000b3e:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b40:	4b18      	ldr	r3, [pc, #96]	; (8000ba4 <HAL_SPI_MspInit+0xec>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b46:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <HAL_SPI_MspInit+0xec>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b4c:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <HAL_SPI_MspInit+0xec>)
 8000b4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b52:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b54:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <HAL_SPI_MspInit+0xec>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b5a:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <HAL_SPI_MspInit+0xec>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000b60:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <HAL_SPI_MspInit+0xec>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b66:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <HAL_SPI_MspInit+0xec>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <HAL_SPI_MspInit+0xec>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000b72:	480c      	ldr	r0, [pc, #48]	; (8000ba4 <HAL_SPI_MspInit+0xec>)
 8000b74:	f000 fab6 	bl	80010e4 <HAL_DMA_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8000b7e:	f7ff ff6d 	bl	8000a5c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4a07      	ldr	r2, [pc, #28]	; (8000ba4 <HAL_SPI_MspInit+0xec>)
 8000b86:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b88:	4a06      	ldr	r2, [pc, #24]	; (8000ba4 <HAL_SPI_MspInit+0xec>)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b8e:	bf00      	nop
 8000b90:	3728      	adds	r7, #40	; 0x28
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40013000 	.word	0x40013000
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40020000 	.word	0x40020000
 8000ba4:	20000080 	.word	0x20000080
 8000ba8:	40026410 	.word	0x40026410

08000bac <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <HAL_SPI_MspDeInit+0x38>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d10e      	bne.n	8000bdc <HAL_SPI_MspDeInit+0x30>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8000bbe:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <HAL_SPI_MspDeInit+0x3c>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc2:	4a09      	ldr	r2, [pc, #36]	; (8000be8 <HAL_SPI_MspDeInit+0x3c>)
 8000bc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000bc8:	6453      	str	r3, [r2, #68]	; 0x44

    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    HAL_GPIO_DeInit(GPIOA, AD_SCK_Pin|AD_DOU_A_Pin);
 8000bca:	2160      	movs	r1, #96	; 0x60
 8000bcc:	4807      	ldr	r0, [pc, #28]	; (8000bec <HAL_SPI_MspDeInit+0x40>)
 8000bce:	f000 ffeb 	bl	8001ba8 <HAL_GPIO_DeInit>

    /* SPI1 DMA DeInit */
    HAL_DMA_DeInit(hspi->hdmarx);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f000 fb32 	bl	8001240 <HAL_DMA_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40013000 	.word	0x40013000
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40020000 	.word	0x40020000

08000bf0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b0a0      	sub	sp, #128	; 0x80
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c08:	f107 0310 	add.w	r3, r7, #16
 8000c0c:	225c      	movs	r2, #92	; 0x5c
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4618      	mov	r0, r3
 8000c12:	f003 fa65 	bl	80040e0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c1e:	d141      	bne.n	8000ca4 <HAL_PCD_MspInit+0xb4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000c20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c24:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000c26:	2300      	movs	r3, #0
 8000c28:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c2a:	f107 0310 	add.w	r3, r7, #16
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f001 fb0e 	bl	8002250 <HAL_RCCEx_PeriphCLKConfig>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8000c3a:	f7ff ff0f 	bl	8000a5c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	4b1a      	ldr	r3, [pc, #104]	; (8000cac <HAL_PCD_MspInit+0xbc>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a19      	ldr	r2, [pc, #100]	; (8000cac <HAL_PCD_MspInit+0xbc>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b17      	ldr	r3, [pc, #92]	; (8000cac <HAL_PCD_MspInit+0xbc>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c5a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c5e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c60:	2302      	movs	r3, #2
 8000c62:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c6c:	230a      	movs	r3, #10
 8000c6e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c70:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000c74:	4619      	mov	r1, r3
 8000c76:	480e      	ldr	r0, [pc, #56]	; (8000cb0 <HAL_PCD_MspInit+0xc0>)
 8000c78:	f000 fe02 	bl	8001880 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c7c:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <HAL_PCD_MspInit+0xbc>)
 8000c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c80:	4a0a      	ldr	r2, [pc, #40]	; (8000cac <HAL_PCD_MspInit+0xbc>)
 8000c82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c86:	6353      	str	r3, [r2, #52]	; 0x34
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60bb      	str	r3, [r7, #8]
 8000c8c:	4b07      	ldr	r3, [pc, #28]	; (8000cac <HAL_PCD_MspInit+0xbc>)
 8000c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c90:	4a06      	ldr	r2, [pc, #24]	; (8000cac <HAL_PCD_MspInit+0xbc>)
 8000c92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c96:	6453      	str	r3, [r2, #68]	; 0x44
 8000c98:	4b04      	ldr	r3, [pc, #16]	; (8000cac <HAL_PCD_MspInit+0xbc>)
 8000c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000ca4:	bf00      	nop
 8000ca6:	3780      	adds	r7, #128	; 0x80
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40020000 	.word	0x40020000

08000cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <NMI_Handler+0x4>

08000cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cbe:	e7fe      	b.n	8000cbe <HardFault_Handler+0x4>

08000cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <MemManage_Handler+0x4>

08000cc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cca:	e7fe      	b.n	8000cca <BusFault_Handler+0x4>

08000ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <UsageFault_Handler+0x4>

08000cd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d00:	f000 f89a 	bl	8000e38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000d0c:	4802      	ldr	r0, [pc, #8]	; (8000d18 <DMA2_Stream0_IRQHandler+0x10>)
 8000d0e:	f000 fb4d 	bl	80013ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000080 	.word	0x20000080

08000d1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <SystemInit+0x20>)
 8000d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d26:	4a05      	ldr	r2, [pc, #20]	; (8000d3c <SystemInit+0x20>)
 8000d28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d44:	480d      	ldr	r0, [pc, #52]	; (8000d7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d46:	490e      	ldr	r1, [pc, #56]	; (8000d80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d48:	4a0e      	ldr	r2, [pc, #56]	; (8000d84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d4c:	e002      	b.n	8000d54 <LoopCopyDataInit>

08000d4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d52:	3304      	adds	r3, #4

08000d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d58:	d3f9      	bcc.n	8000d4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d5a:	4a0b      	ldr	r2, [pc, #44]	; (8000d88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d5c:	4c0b      	ldr	r4, [pc, #44]	; (8000d8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d60:	e001      	b.n	8000d66 <LoopFillZerobss>

08000d62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d64:	3204      	adds	r2, #4

08000d66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d68:	d3fb      	bcc.n	8000d62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d6a:	f7ff ffd7 	bl	8000d1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d6e:	f003 f993 	bl	8004098 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d72:	f7ff fccf 	bl	8000714 <main>
  bx  lr    
 8000d76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d80:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d84:	08004130 	.word	0x08004130
  ldr r2, =_sbss
 8000d88:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d8c:	200005f4 	.word	0x200005f4

08000d90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d90:	e7fe      	b.n	8000d90 <ADC_IRQHandler>
	...

08000d94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d98:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <HAL_Init+0x40>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a0d      	ldr	r2, [pc, #52]	; (8000dd4 <HAL_Init+0x40>)
 8000d9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000da2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000da4:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <HAL_Init+0x40>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a0a      	ldr	r2, [pc, #40]	; (8000dd4 <HAL_Init+0x40>)
 8000daa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db0:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <HAL_Init+0x40>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a07      	ldr	r2, [pc, #28]	; (8000dd4 <HAL_Init+0x40>)
 8000db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dbc:	2003      	movs	r0, #3
 8000dbe:	f000 f94f 	bl	8001060 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dc2:	200f      	movs	r0, #15
 8000dc4:	f000 f808 	bl	8000dd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc8:	f7ff fe4e 	bl	8000a68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dcc:	2300      	movs	r3, #0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40023c00 	.word	0x40023c00

08000dd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <HAL_InitTick+0x54>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <HAL_InitTick+0x58>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	4619      	mov	r1, r3
 8000dea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 f967 	bl	80010ca <HAL_SYSTICK_Config>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e00e      	b.n	8000e24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2b0f      	cmp	r3, #15
 8000e0a:	d80a      	bhi.n	8000e22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	6879      	ldr	r1, [r7, #4]
 8000e10:	f04f 30ff 	mov.w	r0, #4294967295
 8000e14:	f000 f92f 	bl	8001076 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e18:	4a06      	ldr	r2, [pc, #24]	; (8000e34 <HAL_InitTick+0x5c>)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	e000      	b.n	8000e24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20000000 	.word	0x20000000
 8000e30:	20000008 	.word	0x20000008
 8000e34:	20000004 	.word	0x20000004

08000e38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <HAL_IncTick+0x20>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	461a      	mov	r2, r3
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <HAL_IncTick+0x24>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4413      	add	r3, r2
 8000e48:	4a04      	ldr	r2, [pc, #16]	; (8000e5c <HAL_IncTick+0x24>)
 8000e4a:	6013      	str	r3, [r2, #0]
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	20000008 	.word	0x20000008
 8000e5c:	200005f0 	.word	0x200005f0

08000e60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  return uwTick;
 8000e64:	4b03      	ldr	r3, [pc, #12]	; (8000e74 <HAL_GetTick+0x14>)
 8000e66:	681b      	ldr	r3, [r3, #0]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	200005f0 	.word	0x200005f0

08000e78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e80:	f7ff ffee 	bl	8000e60 <HAL_GetTick>
 8000e84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e90:	d005      	beq.n	8000e9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e92:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <HAL_Delay+0x44>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	461a      	mov	r2, r3
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e9e:	bf00      	nop
 8000ea0:	f7ff ffde 	bl	8000e60 <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	68fa      	ldr	r2, [r7, #12]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d8f7      	bhi.n	8000ea0 <HAL_Delay+0x28>
  {
  }
}
 8000eb0:	bf00      	nop
 8000eb2:	bf00      	nop
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000008 	.word	0x20000008

08000ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed6:	68ba      	ldr	r2, [r7, #8]
 8000ed8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000edc:	4013      	ands	r3, r2
 8000ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef2:	4a04      	ldr	r2, [pc, #16]	; (8000f04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	60d3      	str	r3, [r2, #12]
}
 8000ef8:	bf00      	nop
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f0c:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <__NVIC_GetPriorityGrouping+0x18>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	0a1b      	lsrs	r3, r3, #8
 8000f12:	f003 0307 	and.w	r3, r3, #7
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	db0b      	blt.n	8000f4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	f003 021f 	and.w	r2, r3, #31
 8000f3c:	4907      	ldr	r1, [pc, #28]	; (8000f5c <__NVIC_EnableIRQ+0x38>)
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	095b      	lsrs	r3, r3, #5
 8000f44:	2001      	movs	r0, #1
 8000f46:	fa00 f202 	lsl.w	r2, r0, r2
 8000f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	e000e100 	.word	0xe000e100

08000f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	6039      	str	r1, [r7, #0]
 8000f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	db0a      	blt.n	8000f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	490c      	ldr	r1, [pc, #48]	; (8000fac <__NVIC_SetPriority+0x4c>)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	0112      	lsls	r2, r2, #4
 8000f80:	b2d2      	uxtb	r2, r2
 8000f82:	440b      	add	r3, r1
 8000f84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f88:	e00a      	b.n	8000fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	4908      	ldr	r1, [pc, #32]	; (8000fb0 <__NVIC_SetPriority+0x50>)
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	f003 030f 	and.w	r3, r3, #15
 8000f96:	3b04      	subs	r3, #4
 8000f98:	0112      	lsls	r2, r2, #4
 8000f9a:	b2d2      	uxtb	r2, r2
 8000f9c:	440b      	add	r3, r1
 8000f9e:	761a      	strb	r2, [r3, #24]
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000e100 	.word	0xe000e100
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b089      	sub	sp, #36	; 0x24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	f1c3 0307 	rsb	r3, r3, #7
 8000fce:	2b04      	cmp	r3, #4
 8000fd0:	bf28      	it	cs
 8000fd2:	2304      	movcs	r3, #4
 8000fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3304      	adds	r3, #4
 8000fda:	2b06      	cmp	r3, #6
 8000fdc:	d902      	bls.n	8000fe4 <NVIC_EncodePriority+0x30>
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	3b03      	subs	r3, #3
 8000fe2:	e000      	b.n	8000fe6 <NVIC_EncodePriority+0x32>
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43da      	mvns	r2, r3
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	401a      	ands	r2, r3
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	fa01 f303 	lsl.w	r3, r1, r3
 8001006:	43d9      	mvns	r1, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800100c:	4313      	orrs	r3, r2
         );
}
 800100e:	4618      	mov	r0, r3
 8001010:	3724      	adds	r7, #36	; 0x24
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
	...

0800101c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3b01      	subs	r3, #1
 8001028:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800102c:	d301      	bcc.n	8001032 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800102e:	2301      	movs	r3, #1
 8001030:	e00f      	b.n	8001052 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001032:	4a0a      	ldr	r2, [pc, #40]	; (800105c <SysTick_Config+0x40>)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3b01      	subs	r3, #1
 8001038:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800103a:	210f      	movs	r1, #15
 800103c:	f04f 30ff 	mov.w	r0, #4294967295
 8001040:	f7ff ff8e 	bl	8000f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <SysTick_Config+0x40>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800104a:	4b04      	ldr	r3, [pc, #16]	; (800105c <SysTick_Config+0x40>)
 800104c:	2207      	movs	r2, #7
 800104e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	e000e010 	.word	0xe000e010

08001060 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff ff29 	bl	8000ec0 <__NVIC_SetPriorityGrouping>
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001076:	b580      	push	{r7, lr}
 8001078:	b086      	sub	sp, #24
 800107a:	af00      	add	r7, sp, #0
 800107c:	4603      	mov	r3, r0
 800107e:	60b9      	str	r1, [r7, #8]
 8001080:	607a      	str	r2, [r7, #4]
 8001082:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001088:	f7ff ff3e 	bl	8000f08 <__NVIC_GetPriorityGrouping>
 800108c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	68b9      	ldr	r1, [r7, #8]
 8001092:	6978      	ldr	r0, [r7, #20]
 8001094:	f7ff ff8e 	bl	8000fb4 <NVIC_EncodePriority>
 8001098:	4602      	mov	r2, r0
 800109a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109e:	4611      	mov	r1, r2
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff ff5d 	bl	8000f60 <__NVIC_SetPriority>
}
 80010a6:	bf00      	nop
 80010a8:	3718      	adds	r7, #24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	4603      	mov	r3, r0
 80010b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ff31 	bl	8000f24 <__NVIC_EnableIRQ>
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff ffa2 	bl	800101c <SysTick_Config>
 80010d8:	4603      	mov	r3, r0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
	...

080010e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80010f0:	f7ff feb6 	bl	8000e60 <HAL_GetTick>
 80010f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d101      	bne.n	8001100 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e099      	b.n	8001234 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2202      	movs	r2, #2
 8001104:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f022 0201 	bic.w	r2, r2, #1
 800111e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001120:	e00f      	b.n	8001142 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001122:	f7ff fe9d 	bl	8000e60 <HAL_GetTick>
 8001126:	4602      	mov	r2, r0
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	2b05      	cmp	r3, #5
 800112e:	d908      	bls.n	8001142 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2220      	movs	r2, #32
 8001134:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2203      	movs	r2, #3
 800113a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e078      	b.n	8001234 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	2b00      	cmp	r3, #0
 800114e:	d1e8      	bne.n	8001122 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001158:	697a      	ldr	r2, [r7, #20]
 800115a:	4b38      	ldr	r3, [pc, #224]	; (800123c <HAL_DMA_Init+0x158>)
 800115c:	4013      	ands	r3, r2
 800115e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685a      	ldr	r2, [r3, #4]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800116e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	691b      	ldr	r3, [r3, #16]
 8001174:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800117a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001186:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6a1b      	ldr	r3, [r3, #32]
 800118c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800118e:	697a      	ldr	r2, [r7, #20]
 8001190:	4313      	orrs	r3, r2
 8001192:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001198:	2b04      	cmp	r3, #4
 800119a:	d107      	bne.n	80011ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a4:	4313      	orrs	r3, r2
 80011a6:	697a      	ldr	r2, [r7, #20]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	697a      	ldr	r2, [r7, #20]
 80011b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	f023 0307 	bic.w	r3, r3, #7
 80011c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c8:	697a      	ldr	r2, [r7, #20]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	d117      	bne.n	8001206 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011da:	697a      	ldr	r2, [r7, #20]
 80011dc:	4313      	orrs	r3, r2
 80011de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d00e      	beq.n	8001206 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f000 facd 	bl	8001788 <DMA_CheckFifoParam>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d008      	beq.n	8001206 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2240      	movs	r2, #64	; 0x40
 80011f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2201      	movs	r2, #1
 80011fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001202:	2301      	movs	r3, #1
 8001204:	e016      	b.n	8001234 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	697a      	ldr	r2, [r7, #20]
 800120c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f000 fa84 	bl	800171c <DMA_CalcBaseAndBitshift>
 8001214:	4603      	mov	r3, r0
 8001216:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800121c:	223f      	movs	r2, #63	; 0x3f
 800121e:	409a      	lsls	r2, r3
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2201      	movs	r2, #1
 800122e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001232:	2300      	movs	r3, #0
}
 8001234:	4618      	mov	r0, r3
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	f010803f 	.word	0xf010803f

08001240 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d101      	bne.n	8001252 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e050      	b.n	80012f4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b02      	cmp	r3, #2
 800125c:	d101      	bne.n	8001262 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800125e:	2302      	movs	r3, #2
 8001260:	e048      	b.n	80012f4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f022 0201 	bic.w	r2, r2, #1
 8001270:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2200      	movs	r2, #0
 8001280:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2200      	movs	r2, #0
 8001290:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2200      	movs	r2, #0
 8001298:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2221      	movs	r2, #33	; 0x21
 80012a0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f000 fa3a 	bl	800171c <DMA_CalcBaseAndBitshift>
 80012a8:	4603      	mov	r3, r0
 80012aa:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2200      	movs	r2, #0
 80012b6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012d4:	223f      	movs	r2, #63	; 0x3f
 80012d6:	409a      	lsls	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80012f2:	2300      	movs	r3, #0
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
 8001308:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800130a:	2300      	movs	r3, #0
 800130c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001312:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800131a:	2b01      	cmp	r3, #1
 800131c:	d101      	bne.n	8001322 <HAL_DMA_Start_IT+0x26>
 800131e:	2302      	movs	r3, #2
 8001320:	e040      	b.n	80013a4 <HAL_DMA_Start_IT+0xa8>
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2201      	movs	r2, #1
 8001326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b01      	cmp	r3, #1
 8001334:	d12f      	bne.n	8001396 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2202      	movs	r2, #2
 800133a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2200      	movs	r2, #0
 8001342:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	68b9      	ldr	r1, [r7, #8]
 800134a:	68f8      	ldr	r0, [r7, #12]
 800134c:	f000 f9b8 	bl	80016c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001354:	223f      	movs	r2, #63	; 0x3f
 8001356:	409a      	lsls	r2, r3
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f042 0216 	orr.w	r2, r2, #22
 800136a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001370:	2b00      	cmp	r3, #0
 8001372:	d007      	beq.n	8001384 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f042 0208 	orr.w	r2, r2, #8
 8001382:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f042 0201 	orr.w	r2, r2, #1
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	e005      	b.n	80013a2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	2200      	movs	r2, #0
 800139a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800139e:	2302      	movs	r3, #2
 80013a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80013a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3718      	adds	r7, #24
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80013b4:	2300      	movs	r3, #0
 80013b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80013b8:	4b8e      	ldr	r3, [pc, #568]	; (80015f4 <HAL_DMA_IRQHandler+0x248>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a8e      	ldr	r2, [pc, #568]	; (80015f8 <HAL_DMA_IRQHandler+0x24c>)
 80013be:	fba2 2303 	umull	r2, r3, r2, r3
 80013c2:	0a9b      	lsrs	r3, r3, #10
 80013c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d6:	2208      	movs	r2, #8
 80013d8:	409a      	lsls	r2, r3
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	4013      	ands	r3, r2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d01a      	beq.n	8001418 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d013      	beq.n	8001418 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f022 0204 	bic.w	r2, r2, #4
 80013fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001404:	2208      	movs	r2, #8
 8001406:	409a      	lsls	r2, r3
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001410:	f043 0201 	orr.w	r2, r3, #1
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800141c:	2201      	movs	r2, #1
 800141e:	409a      	lsls	r2, r3
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	4013      	ands	r3, r2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d012      	beq.n	800144e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001432:	2b00      	cmp	r3, #0
 8001434:	d00b      	beq.n	800144e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800143a:	2201      	movs	r2, #1
 800143c:	409a      	lsls	r2, r3
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001446:	f043 0202 	orr.w	r2, r3, #2
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001452:	2204      	movs	r2, #4
 8001454:	409a      	lsls	r2, r3
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	4013      	ands	r3, r2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d012      	beq.n	8001484 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d00b      	beq.n	8001484 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001470:	2204      	movs	r2, #4
 8001472:	409a      	lsls	r2, r3
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800147c:	f043 0204 	orr.w	r2, r3, #4
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001488:	2210      	movs	r2, #16
 800148a:	409a      	lsls	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	4013      	ands	r3, r2
 8001490:	2b00      	cmp	r3, #0
 8001492:	d043      	beq.n	800151c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0308 	and.w	r3, r3, #8
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d03c      	beq.n	800151c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a6:	2210      	movs	r2, #16
 80014a8:	409a      	lsls	r2, r3
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d018      	beq.n	80014ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d108      	bne.n	80014dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d024      	beq.n	800151c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	4798      	blx	r3
 80014da:	e01f      	b.n	800151c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d01b      	beq.n	800151c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	4798      	blx	r3
 80014ec:	e016      	b.n	800151c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d107      	bne.n	800150c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f022 0208 	bic.w	r2, r2, #8
 800150a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001510:	2b00      	cmp	r3, #0
 8001512:	d003      	beq.n	800151c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001520:	2220      	movs	r2, #32
 8001522:	409a      	lsls	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4013      	ands	r3, r2
 8001528:	2b00      	cmp	r3, #0
 800152a:	f000 808f 	beq.w	800164c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0310 	and.w	r3, r3, #16
 8001538:	2b00      	cmp	r3, #0
 800153a:	f000 8087 	beq.w	800164c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001542:	2220      	movs	r2, #32
 8001544:	409a      	lsls	r2, r3
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b05      	cmp	r3, #5
 8001554:	d136      	bne.n	80015c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f022 0216 	bic.w	r2, r2, #22
 8001564:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	695a      	ldr	r2, [r3, #20]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001574:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	2b00      	cmp	r3, #0
 800157c:	d103      	bne.n	8001586 <HAL_DMA_IRQHandler+0x1da>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001582:	2b00      	cmp	r3, #0
 8001584:	d007      	beq.n	8001596 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 0208 	bic.w	r2, r2, #8
 8001594:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800159a:	223f      	movs	r2, #63	; 0x3f
 800159c:	409a      	lsls	r2, r3
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2201      	movs	r2, #1
 80015a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d07e      	beq.n	80016b8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	4798      	blx	r3
        }
        return;
 80015c2:	e079      	b.n	80016b8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d01d      	beq.n	800160e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d10d      	bne.n	80015fc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d031      	beq.n	800164c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	4798      	blx	r3
 80015f0:	e02c      	b.n	800164c <HAL_DMA_IRQHandler+0x2a0>
 80015f2:	bf00      	nop
 80015f4:	20000000 	.word	0x20000000
 80015f8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001600:	2b00      	cmp	r3, #0
 8001602:	d023      	beq.n	800164c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	4798      	blx	r3
 800160c:	e01e      	b.n	800164c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001618:	2b00      	cmp	r3, #0
 800161a:	d10f      	bne.n	800163c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f022 0210 	bic.w	r2, r2, #16
 800162a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2201      	movs	r2, #1
 8001630:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001650:	2b00      	cmp	r3, #0
 8001652:	d032      	beq.n	80016ba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001658:	f003 0301 	and.w	r3, r3, #1
 800165c:	2b00      	cmp	r3, #0
 800165e:	d022      	beq.n	80016a6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2205      	movs	r2, #5
 8001664:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f022 0201 	bic.w	r2, r2, #1
 8001676:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	3301      	adds	r3, #1
 800167c:	60bb      	str	r3, [r7, #8]
 800167e:	697a      	ldr	r2, [r7, #20]
 8001680:	429a      	cmp	r2, r3
 8001682:	d307      	bcc.n	8001694 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1f2      	bne.n	8001678 <HAL_DMA_IRQHandler+0x2cc>
 8001692:	e000      	b.n	8001696 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001694:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2201      	movs	r2, #1
 800169a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d005      	beq.n	80016ba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	4798      	blx	r3
 80016b6:	e000      	b.n	80016ba <HAL_DMA_IRQHandler+0x30e>
        return;
 80016b8:	bf00      	nop
    }
  }
}
 80016ba:	3718      	adds	r7, #24
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
 80016cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	683a      	ldr	r2, [r7, #0]
 80016e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	2b40      	cmp	r3, #64	; 0x40
 80016ec:	d108      	bne.n	8001700 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80016fe:	e007      	b.n	8001710 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	68ba      	ldr	r2, [r7, #8]
 8001706:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	60da      	str	r2, [r3, #12]
}
 8001710:	bf00      	nop
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	b2db      	uxtb	r3, r3
 800172a:	3b10      	subs	r3, #16
 800172c:	4a14      	ldr	r2, [pc, #80]	; (8001780 <DMA_CalcBaseAndBitshift+0x64>)
 800172e:	fba2 2303 	umull	r2, r3, r2, r3
 8001732:	091b      	lsrs	r3, r3, #4
 8001734:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001736:	4a13      	ldr	r2, [pc, #76]	; (8001784 <DMA_CalcBaseAndBitshift+0x68>)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4413      	add	r3, r2
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	461a      	mov	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2b03      	cmp	r3, #3
 8001748:	d909      	bls.n	800175e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001752:	f023 0303 	bic.w	r3, r3, #3
 8001756:	1d1a      	adds	r2, r3, #4
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	659a      	str	r2, [r3, #88]	; 0x58
 800175c:	e007      	b.n	800176e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001766:	f023 0303 	bic.w	r3, r3, #3
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001772:	4618      	mov	r0, r3
 8001774:	3714      	adds	r7, #20
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	aaaaaaab 	.word	0xaaaaaaab
 8001784:	08004118 	.word	0x08004118

08001788 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001790:	2300      	movs	r3, #0
 8001792:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001798:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d11f      	bne.n	80017e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	2b03      	cmp	r3, #3
 80017a6:	d856      	bhi.n	8001856 <DMA_CheckFifoParam+0xce>
 80017a8:	a201      	add	r2, pc, #4	; (adr r2, 80017b0 <DMA_CheckFifoParam+0x28>)
 80017aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ae:	bf00      	nop
 80017b0:	080017c1 	.word	0x080017c1
 80017b4:	080017d3 	.word	0x080017d3
 80017b8:	080017c1 	.word	0x080017c1
 80017bc:	08001857 	.word	0x08001857
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d046      	beq.n	800185a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017d0:	e043      	b.n	800185a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80017da:	d140      	bne.n	800185e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017e0:	e03d      	b.n	800185e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017ea:	d121      	bne.n	8001830 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	2b03      	cmp	r3, #3
 80017f0:	d837      	bhi.n	8001862 <DMA_CheckFifoParam+0xda>
 80017f2:	a201      	add	r2, pc, #4	; (adr r2, 80017f8 <DMA_CheckFifoParam+0x70>)
 80017f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f8:	08001809 	.word	0x08001809
 80017fc:	0800180f 	.word	0x0800180f
 8001800:	08001809 	.word	0x08001809
 8001804:	08001821 	.word	0x08001821
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	73fb      	strb	r3, [r7, #15]
      break;
 800180c:	e030      	b.n	8001870 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001812:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d025      	beq.n	8001866 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800181e:	e022      	b.n	8001866 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001824:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001828:	d11f      	bne.n	800186a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800182e:	e01c      	b.n	800186a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	2b02      	cmp	r3, #2
 8001834:	d903      	bls.n	800183e <DMA_CheckFifoParam+0xb6>
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	2b03      	cmp	r3, #3
 800183a:	d003      	beq.n	8001844 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800183c:	e018      	b.n	8001870 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	73fb      	strb	r3, [r7, #15]
      break;
 8001842:	e015      	b.n	8001870 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001848:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d00e      	beq.n	800186e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	73fb      	strb	r3, [r7, #15]
      break;
 8001854:	e00b      	b.n	800186e <DMA_CheckFifoParam+0xe6>
      break;
 8001856:	bf00      	nop
 8001858:	e00a      	b.n	8001870 <DMA_CheckFifoParam+0xe8>
      break;
 800185a:	bf00      	nop
 800185c:	e008      	b.n	8001870 <DMA_CheckFifoParam+0xe8>
      break;
 800185e:	bf00      	nop
 8001860:	e006      	b.n	8001870 <DMA_CheckFifoParam+0xe8>
      break;
 8001862:	bf00      	nop
 8001864:	e004      	b.n	8001870 <DMA_CheckFifoParam+0xe8>
      break;
 8001866:	bf00      	nop
 8001868:	e002      	b.n	8001870 <DMA_CheckFifoParam+0xe8>
      break;   
 800186a:	bf00      	nop
 800186c:	e000      	b.n	8001870 <DMA_CheckFifoParam+0xe8>
      break;
 800186e:	bf00      	nop
    }
  } 
  
  return status; 
 8001870:	7bfb      	ldrb	r3, [r7, #15]
}
 8001872:	4618      	mov	r0, r3
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop

08001880 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001880:	b480      	push	{r7}
 8001882:	b089      	sub	sp, #36	; 0x24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001892:	2300      	movs	r3, #0
 8001894:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
 800189a:	e165      	b.n	8001b68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800189c:	2201      	movs	r2, #1
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	697a      	ldr	r2, [r7, #20]
 80018ac:	4013      	ands	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	f040 8154 	bne.w	8001b62 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f003 0303 	and.w	r3, r3, #3
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d005      	beq.n	80018d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d130      	bne.n	8001934 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	2203      	movs	r2, #3
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43db      	mvns	r3, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4013      	ands	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	68da      	ldr	r2, [r3, #12]
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001908:	2201      	movs	r2, #1
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	43db      	mvns	r3, r3
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	4013      	ands	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	091b      	lsrs	r3, r3, #4
 800191e:	f003 0201 	and.w	r2, r3, #1
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4313      	orrs	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 0303 	and.w	r3, r3, #3
 800193c:	2b03      	cmp	r3, #3
 800193e:	d017      	beq.n	8001970 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	2203      	movs	r2, #3
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4013      	ands	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4313      	orrs	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 0303 	and.w	r3, r3, #3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d123      	bne.n	80019c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	08da      	lsrs	r2, r3, #3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3208      	adds	r2, #8
 8001984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001988:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	f003 0307 	and.w	r3, r3, #7
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	220f      	movs	r2, #15
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4013      	ands	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	691a      	ldr	r2, [r3, #16]
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	08da      	lsrs	r2, r3, #3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3208      	adds	r2, #8
 80019be:	69b9      	ldr	r1, [r7, #24]
 80019c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	2203      	movs	r2, #3
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 0203 	and.w	r2, r3, #3
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	f000 80ae 	beq.w	8001b62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	4b5d      	ldr	r3, [pc, #372]	; (8001b80 <HAL_GPIO_Init+0x300>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	4a5c      	ldr	r2, [pc, #368]	; (8001b80 <HAL_GPIO_Init+0x300>)
 8001a10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a14:	6453      	str	r3, [r2, #68]	; 0x44
 8001a16:	4b5a      	ldr	r3, [pc, #360]	; (8001b80 <HAL_GPIO_Init+0x300>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a22:	4a58      	ldr	r2, [pc, #352]	; (8001b84 <HAL_GPIO_Init+0x304>)
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	089b      	lsrs	r3, r3, #2
 8001a28:	3302      	adds	r3, #2
 8001a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	f003 0303 	and.w	r3, r3, #3
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	220f      	movs	r2, #15
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4013      	ands	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a4f      	ldr	r2, [pc, #316]	; (8001b88 <HAL_GPIO_Init+0x308>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d025      	beq.n	8001a9a <HAL_GPIO_Init+0x21a>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a4e      	ldr	r2, [pc, #312]	; (8001b8c <HAL_GPIO_Init+0x30c>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d01f      	beq.n	8001a96 <HAL_GPIO_Init+0x216>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a4d      	ldr	r2, [pc, #308]	; (8001b90 <HAL_GPIO_Init+0x310>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d019      	beq.n	8001a92 <HAL_GPIO_Init+0x212>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a4c      	ldr	r2, [pc, #304]	; (8001b94 <HAL_GPIO_Init+0x314>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d013      	beq.n	8001a8e <HAL_GPIO_Init+0x20e>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a4b      	ldr	r2, [pc, #300]	; (8001b98 <HAL_GPIO_Init+0x318>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d00d      	beq.n	8001a8a <HAL_GPIO_Init+0x20a>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a4a      	ldr	r2, [pc, #296]	; (8001b9c <HAL_GPIO_Init+0x31c>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d007      	beq.n	8001a86 <HAL_GPIO_Init+0x206>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a49      	ldr	r2, [pc, #292]	; (8001ba0 <HAL_GPIO_Init+0x320>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d101      	bne.n	8001a82 <HAL_GPIO_Init+0x202>
 8001a7e:	2306      	movs	r3, #6
 8001a80:	e00c      	b.n	8001a9c <HAL_GPIO_Init+0x21c>
 8001a82:	2307      	movs	r3, #7
 8001a84:	e00a      	b.n	8001a9c <HAL_GPIO_Init+0x21c>
 8001a86:	2305      	movs	r3, #5
 8001a88:	e008      	b.n	8001a9c <HAL_GPIO_Init+0x21c>
 8001a8a:	2304      	movs	r3, #4
 8001a8c:	e006      	b.n	8001a9c <HAL_GPIO_Init+0x21c>
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e004      	b.n	8001a9c <HAL_GPIO_Init+0x21c>
 8001a92:	2302      	movs	r3, #2
 8001a94:	e002      	b.n	8001a9c <HAL_GPIO_Init+0x21c>
 8001a96:	2301      	movs	r3, #1
 8001a98:	e000      	b.n	8001a9c <HAL_GPIO_Init+0x21c>
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	69fa      	ldr	r2, [r7, #28]
 8001a9e:	f002 0203 	and.w	r2, r2, #3
 8001aa2:	0092      	lsls	r2, r2, #2
 8001aa4:	4093      	lsls	r3, r2
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001aac:	4935      	ldr	r1, [pc, #212]	; (8001b84 <HAL_GPIO_Init+0x304>)
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	089b      	lsrs	r3, r3, #2
 8001ab2:	3302      	adds	r3, #2
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aba:	4b3a      	ldr	r3, [pc, #232]	; (8001ba4 <HAL_GPIO_Init+0x324>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ade:	4a31      	ldr	r2, [pc, #196]	; (8001ba4 <HAL_GPIO_Init+0x324>)
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ae4:	4b2f      	ldr	r3, [pc, #188]	; (8001ba4 <HAL_GPIO_Init+0x324>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	43db      	mvns	r3, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d003      	beq.n	8001b08 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b08:	4a26      	ldr	r2, [pc, #152]	; (8001ba4 <HAL_GPIO_Init+0x324>)
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b0e:	4b25      	ldr	r3, [pc, #148]	; (8001ba4 <HAL_GPIO_Init+0x324>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	43db      	mvns	r3, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b32:	4a1c      	ldr	r2, [pc, #112]	; (8001ba4 <HAL_GPIO_Init+0x324>)
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b38:	4b1a      	ldr	r3, [pc, #104]	; (8001ba4 <HAL_GPIO_Init+0x324>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d003      	beq.n	8001b5c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b5c:	4a11      	ldr	r2, [pc, #68]	; (8001ba4 <HAL_GPIO_Init+0x324>)
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	3301      	adds	r3, #1
 8001b66:	61fb      	str	r3, [r7, #28]
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	2b0f      	cmp	r3, #15
 8001b6c:	f67f ae96 	bls.w	800189c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b70:	bf00      	nop
 8001b72:	bf00      	nop
 8001b74:	3724      	adds	r7, #36	; 0x24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40013800 	.word	0x40013800
 8001b88:	40020000 	.word	0x40020000
 8001b8c:	40020400 	.word	0x40020400
 8001b90:	40020800 	.word	0x40020800
 8001b94:	40020c00 	.word	0x40020c00
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	40021400 	.word	0x40021400
 8001ba0:	40021800 	.word	0x40021800
 8001ba4:	40013c00 	.word	0x40013c00

08001ba8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b087      	sub	sp, #28
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]
 8001bc2:	e0c7      	b.n	8001d54 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	f040 80b7 	bne.w	8001d4e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001be0:	4a62      	ldr	r2, [pc, #392]	; (8001d6c <HAL_GPIO_DeInit+0x1c4>)
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	089b      	lsrs	r3, r3, #2
 8001be6:	3302      	adds	r3, #2
 8001be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bec:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	f003 0303 	and.w	r3, r3, #3
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	220f      	movs	r2, #15
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	68ba      	ldr	r2, [r7, #8]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a5a      	ldr	r2, [pc, #360]	; (8001d70 <HAL_GPIO_DeInit+0x1c8>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d025      	beq.n	8001c56 <HAL_GPIO_DeInit+0xae>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a59      	ldr	r2, [pc, #356]	; (8001d74 <HAL_GPIO_DeInit+0x1cc>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d01f      	beq.n	8001c52 <HAL_GPIO_DeInit+0xaa>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a58      	ldr	r2, [pc, #352]	; (8001d78 <HAL_GPIO_DeInit+0x1d0>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d019      	beq.n	8001c4e <HAL_GPIO_DeInit+0xa6>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a57      	ldr	r2, [pc, #348]	; (8001d7c <HAL_GPIO_DeInit+0x1d4>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d013      	beq.n	8001c4a <HAL_GPIO_DeInit+0xa2>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a56      	ldr	r2, [pc, #344]	; (8001d80 <HAL_GPIO_DeInit+0x1d8>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d00d      	beq.n	8001c46 <HAL_GPIO_DeInit+0x9e>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a55      	ldr	r2, [pc, #340]	; (8001d84 <HAL_GPIO_DeInit+0x1dc>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d007      	beq.n	8001c42 <HAL_GPIO_DeInit+0x9a>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a54      	ldr	r2, [pc, #336]	; (8001d88 <HAL_GPIO_DeInit+0x1e0>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d101      	bne.n	8001c3e <HAL_GPIO_DeInit+0x96>
 8001c3a:	2306      	movs	r3, #6
 8001c3c:	e00c      	b.n	8001c58 <HAL_GPIO_DeInit+0xb0>
 8001c3e:	2307      	movs	r3, #7
 8001c40:	e00a      	b.n	8001c58 <HAL_GPIO_DeInit+0xb0>
 8001c42:	2305      	movs	r3, #5
 8001c44:	e008      	b.n	8001c58 <HAL_GPIO_DeInit+0xb0>
 8001c46:	2304      	movs	r3, #4
 8001c48:	e006      	b.n	8001c58 <HAL_GPIO_DeInit+0xb0>
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e004      	b.n	8001c58 <HAL_GPIO_DeInit+0xb0>
 8001c4e:	2302      	movs	r3, #2
 8001c50:	e002      	b.n	8001c58 <HAL_GPIO_DeInit+0xb0>
 8001c52:	2301      	movs	r3, #1
 8001c54:	e000      	b.n	8001c58 <HAL_GPIO_DeInit+0xb0>
 8001c56:	2300      	movs	r3, #0
 8001c58:	697a      	ldr	r2, [r7, #20]
 8001c5a:	f002 0203 	and.w	r2, r2, #3
 8001c5e:	0092      	lsls	r2, r2, #2
 8001c60:	4093      	lsls	r3, r2
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d132      	bne.n	8001cce <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001c68:	4b48      	ldr	r3, [pc, #288]	; (8001d8c <HAL_GPIO_DeInit+0x1e4>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	4946      	ldr	r1, [pc, #280]	; (8001d8c <HAL_GPIO_DeInit+0x1e4>)
 8001c72:	4013      	ands	r3, r2
 8001c74:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001c76:	4b45      	ldr	r3, [pc, #276]	; (8001d8c <HAL_GPIO_DeInit+0x1e4>)
 8001c78:	685a      	ldr	r2, [r3, #4]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	4943      	ldr	r1, [pc, #268]	; (8001d8c <HAL_GPIO_DeInit+0x1e4>)
 8001c80:	4013      	ands	r3, r2
 8001c82:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001c84:	4b41      	ldr	r3, [pc, #260]	; (8001d8c <HAL_GPIO_DeInit+0x1e4>)
 8001c86:	68da      	ldr	r2, [r3, #12]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	493f      	ldr	r1, [pc, #252]	; (8001d8c <HAL_GPIO_DeInit+0x1e4>)
 8001c8e:	4013      	ands	r3, r2
 8001c90:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001c92:	4b3e      	ldr	r3, [pc, #248]	; (8001d8c <HAL_GPIO_DeInit+0x1e4>)
 8001c94:	689a      	ldr	r2, [r3, #8]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	493c      	ldr	r1, [pc, #240]	; (8001d8c <HAL_GPIO_DeInit+0x1e4>)
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	220f      	movs	r2, #15
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001cb0:	4a2e      	ldr	r2, [pc, #184]	; (8001d6c <HAL_GPIO_DeInit+0x1c4>)
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	089b      	lsrs	r3, r3, #2
 8001cb6:	3302      	adds	r3, #2
 8001cb8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	43da      	mvns	r2, r3
 8001cc0:	482a      	ldr	r0, [pc, #168]	; (8001d6c <HAL_GPIO_DeInit+0x1c4>)
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	089b      	lsrs	r3, r3, #2
 8001cc6:	400a      	ands	r2, r1
 8001cc8:	3302      	adds	r3, #2
 8001cca:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	2103      	movs	r1, #3
 8001cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	401a      	ands	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	08da      	lsrs	r2, r3, #3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3208      	adds	r2, #8
 8001cec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	220f      	movs	r2, #15
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	697a      	ldr	r2, [r7, #20]
 8001d02:	08d2      	lsrs	r2, r2, #3
 8001d04:	4019      	ands	r1, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	3208      	adds	r2, #8
 8001d0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68da      	ldr	r2, [r3, #12]
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	2103      	movs	r1, #3
 8001d18:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	401a      	ands	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685a      	ldr	r2, [r3, #4]
 8001d28:	2101      	movs	r1, #1
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	401a      	ands	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	2103      	movs	r1, #3
 8001d42:	fa01 f303 	lsl.w	r3, r1, r3
 8001d46:	43db      	mvns	r3, r3
 8001d48:	401a      	ands	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	3301      	adds	r3, #1
 8001d52:	617b      	str	r3, [r7, #20]
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	2b0f      	cmp	r3, #15
 8001d58:	f67f af34 	bls.w	8001bc4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001d5c:	bf00      	nop
 8001d5e:	bf00      	nop
 8001d60:	371c      	adds	r7, #28
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	40013800 	.word	0x40013800
 8001d70:	40020000 	.word	0x40020000
 8001d74:	40020400 	.word	0x40020400
 8001d78:	40020800 	.word	0x40020800
 8001d7c:	40020c00 	.word	0x40020c00
 8001d80:	40021000 	.word	0x40021000
 8001d84:	40021400 	.word	0x40021400
 8001d88:	40021800 	.word	0x40021800
 8001d8c:	40013c00 	.word	0x40013c00

08001d90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	691a      	ldr	r2, [r3, #16]
 8001da0:	887b      	ldrh	r3, [r7, #2]
 8001da2:	4013      	ands	r3, r2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d002      	beq.n	8001dae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001da8:	2301      	movs	r3, #1
 8001daa:	73fb      	strb	r3, [r7, #15]
 8001dac:	e001      	b.n	8001db2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dae:	2300      	movs	r3, #0
 8001db0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	807b      	strh	r3, [r7, #2]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dd0:	787b      	ldrb	r3, [r7, #1]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dd6:	887a      	ldrh	r2, [r7, #2]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ddc:	e003      	b.n	8001de6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dde:	887b      	ldrh	r3, [r7, #2]
 8001de0:	041a      	lsls	r2, r3, #16
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	619a      	str	r2, [r3, #24]
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001df2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001df4:	b08f      	sub	sp, #60	; 0x3c
 8001df6:	af0a      	add	r7, sp, #40	; 0x28
 8001df8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d101      	bne.n	8001e04 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e116      	b.n	8002032 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d106      	bne.n	8001e24 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7fe fee6 	bl	8000bf0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2203      	movs	r2, #3
 8001e28:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d102      	bne.n	8001e3e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f001 fe8d 	bl	8003b62 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	603b      	str	r3, [r7, #0]
 8001e4e:	687e      	ldr	r6, [r7, #4]
 8001e50:	466d      	mov	r5, sp
 8001e52:	f106 0410 	add.w	r4, r6, #16
 8001e56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e62:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e66:	1d33      	adds	r3, r6, #4
 8001e68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e6a:	6838      	ldr	r0, [r7, #0]
 8001e6c:	f001 fe18 	bl	8003aa0 <USB_CoreInit>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d005      	beq.n	8001e82 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2202      	movs	r2, #2
 8001e7a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e0d7      	b.n	8002032 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2100      	movs	r1, #0
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f001 fe7b 	bl	8003b84 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e8e:	2300      	movs	r3, #0
 8001e90:	73fb      	strb	r3, [r7, #15]
 8001e92:	e04a      	b.n	8001f2a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e94:	7bfa      	ldrb	r2, [r7, #15]
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	4413      	add	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	333d      	adds	r3, #61	; 0x3d
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ea8:	7bfa      	ldrb	r2, [r7, #15]
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	4613      	mov	r3, r2
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	4413      	add	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	333c      	adds	r3, #60	; 0x3c
 8001eb8:	7bfa      	ldrb	r2, [r7, #15]
 8001eba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ebc:	7bfa      	ldrb	r2, [r7, #15]
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
 8001ec0:	b298      	uxth	r0, r3
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	4413      	add	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	440b      	add	r3, r1
 8001ece:	3344      	adds	r3, #68	; 0x44
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ed4:	7bfa      	ldrb	r2, [r7, #15]
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	4413      	add	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	3340      	adds	r3, #64	; 0x40
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ee8:	7bfa      	ldrb	r2, [r7, #15]
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	4613      	mov	r3, r2
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	4413      	add	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	3348      	adds	r3, #72	; 0x48
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001efc:	7bfa      	ldrb	r2, [r7, #15]
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	4613      	mov	r3, r2
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	4413      	add	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	440b      	add	r3, r1
 8001f0a:	334c      	adds	r3, #76	; 0x4c
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f10:	7bfa      	ldrb	r2, [r7, #15]
 8001f12:	6879      	ldr	r1, [r7, #4]
 8001f14:	4613      	mov	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	4413      	add	r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	3354      	adds	r3, #84	; 0x54
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
 8001f26:	3301      	adds	r3, #1
 8001f28:	73fb      	strb	r3, [r7, #15]
 8001f2a:	7bfa      	ldrb	r2, [r7, #15]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d3af      	bcc.n	8001e94 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f34:	2300      	movs	r3, #0
 8001f36:	73fb      	strb	r3, [r7, #15]
 8001f38:	e044      	b.n	8001fc4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f3a:	7bfa      	ldrb	r2, [r7, #15]
 8001f3c:	6879      	ldr	r1, [r7, #4]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	4413      	add	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	440b      	add	r3, r1
 8001f48:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f50:	7bfa      	ldrb	r2, [r7, #15]
 8001f52:	6879      	ldr	r1, [r7, #4]
 8001f54:	4613      	mov	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4413      	add	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001f62:	7bfa      	ldrb	r2, [r7, #15]
 8001f64:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f66:	7bfa      	ldrb	r2, [r7, #15]
 8001f68:	6879      	ldr	r1, [r7, #4]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	4413      	add	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	440b      	add	r3, r1
 8001f74:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001f78:	2200      	movs	r2, #0
 8001f7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f7c:	7bfa      	ldrb	r2, [r7, #15]
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	4613      	mov	r3, r2
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	4413      	add	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	440b      	add	r3, r1
 8001f8a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f92:	7bfa      	ldrb	r2, [r7, #15]
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	4613      	mov	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	4413      	add	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	440b      	add	r3, r1
 8001fa0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001fa8:	7bfa      	ldrb	r2, [r7, #15]
 8001faa:	6879      	ldr	r1, [r7, #4]
 8001fac:	4613      	mov	r3, r2
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fbe:	7bfb      	ldrb	r3, [r7, #15]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	73fb      	strb	r3, [r7, #15]
 8001fc4:	7bfa      	ldrb	r2, [r7, #15]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d3b5      	bcc.n	8001f3a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	603b      	str	r3, [r7, #0]
 8001fd4:	687e      	ldr	r6, [r7, #4]
 8001fd6:	466d      	mov	r5, sp
 8001fd8:	f106 0410 	add.w	r4, r6, #16
 8001fdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fe0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fe2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fe4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fe8:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fec:	1d33      	adds	r3, r6, #4
 8001fee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ff0:	6838      	ldr	r0, [r7, #0]
 8001ff2:	f001 fe13 	bl	8003c1c <USB_DevInit>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d005      	beq.n	8002008 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2202      	movs	r2, #2
 8002000:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e014      	b.n	8002032 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201c:	2b01      	cmp	r3, #1
 800201e:	d102      	bne.n	8002026 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 f80a 	bl	800203a <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f001 ffd1 	bl	8003fd2 <USB_DevDisconnect>

  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3714      	adds	r7, #20
 8002036:	46bd      	mov	sp, r7
 8002038:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800203a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800203a:	b480      	push	{r7}
 800203c:	b085      	sub	sp, #20
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800206c:	f043 0303 	orr.w	r3, r3, #3
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
	...

08002084 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e0cc      	b.n	8002232 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002098:	4b68      	ldr	r3, [pc, #416]	; (800223c <HAL_RCC_ClockConfig+0x1b8>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 030f 	and.w	r3, r3, #15
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d90c      	bls.n	80020c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020a6:	4b65      	ldr	r3, [pc, #404]	; (800223c <HAL_RCC_ClockConfig+0x1b8>)
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	b2d2      	uxtb	r2, r2
 80020ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ae:	4b63      	ldr	r3, [pc, #396]	; (800223c <HAL_RCC_ClockConfig+0x1b8>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 030f 	and.w	r3, r3, #15
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d001      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e0b8      	b.n	8002232 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d020      	beq.n	800210e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0304 	and.w	r3, r3, #4
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d005      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020d8:	4b59      	ldr	r3, [pc, #356]	; (8002240 <HAL_RCC_ClockConfig+0x1bc>)
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	4a58      	ldr	r2, [pc, #352]	; (8002240 <HAL_RCC_ClockConfig+0x1bc>)
 80020de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0308 	and.w	r3, r3, #8
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d005      	beq.n	80020fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020f0:	4b53      	ldr	r3, [pc, #332]	; (8002240 <HAL_RCC_ClockConfig+0x1bc>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	4a52      	ldr	r2, [pc, #328]	; (8002240 <HAL_RCC_ClockConfig+0x1bc>)
 80020f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020fc:	4b50      	ldr	r3, [pc, #320]	; (8002240 <HAL_RCC_ClockConfig+0x1bc>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	494d      	ldr	r1, [pc, #308]	; (8002240 <HAL_RCC_ClockConfig+0x1bc>)
 800210a:	4313      	orrs	r3, r2
 800210c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b00      	cmp	r3, #0
 8002118:	d044      	beq.n	80021a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d107      	bne.n	8002132 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002122:	4b47      	ldr	r3, [pc, #284]	; (8002240 <HAL_RCC_ClockConfig+0x1bc>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d119      	bne.n	8002162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e07f      	b.n	8002232 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b02      	cmp	r3, #2
 8002138:	d003      	beq.n	8002142 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800213e:	2b03      	cmp	r3, #3
 8002140:	d107      	bne.n	8002152 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002142:	4b3f      	ldr	r3, [pc, #252]	; (8002240 <HAL_RCC_ClockConfig+0x1bc>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d109      	bne.n	8002162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e06f      	b.n	8002232 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002152:	4b3b      	ldr	r3, [pc, #236]	; (8002240 <HAL_RCC_ClockConfig+0x1bc>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e067      	b.n	8002232 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002162:	4b37      	ldr	r3, [pc, #220]	; (8002240 <HAL_RCC_ClockConfig+0x1bc>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f023 0203 	bic.w	r2, r3, #3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	4934      	ldr	r1, [pc, #208]	; (8002240 <HAL_RCC_ClockConfig+0x1bc>)
 8002170:	4313      	orrs	r3, r2
 8002172:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002174:	f7fe fe74 	bl	8000e60 <HAL_GetTick>
 8002178:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800217a:	e00a      	b.n	8002192 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800217c:	f7fe fe70 	bl	8000e60 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	f241 3288 	movw	r2, #5000	; 0x1388
 800218a:	4293      	cmp	r3, r2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e04f      	b.n	8002232 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002192:	4b2b      	ldr	r3, [pc, #172]	; (8002240 <HAL_RCC_ClockConfig+0x1bc>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f003 020c 	and.w	r2, r3, #12
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d1eb      	bne.n	800217c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021a4:	4b25      	ldr	r3, [pc, #148]	; (800223c <HAL_RCC_ClockConfig+0x1b8>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 030f 	and.w	r3, r3, #15
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d20c      	bcs.n	80021cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021b2:	4b22      	ldr	r3, [pc, #136]	; (800223c <HAL_RCC_ClockConfig+0x1b8>)
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ba:	4b20      	ldr	r3, [pc, #128]	; (800223c <HAL_RCC_ClockConfig+0x1b8>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 030f 	and.w	r3, r3, #15
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d001      	beq.n	80021cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e032      	b.n	8002232 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0304 	and.w	r3, r3, #4
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d008      	beq.n	80021ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021d8:	4b19      	ldr	r3, [pc, #100]	; (8002240 <HAL_RCC_ClockConfig+0x1bc>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	4916      	ldr	r1, [pc, #88]	; (8002240 <HAL_RCC_ClockConfig+0x1bc>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0308 	and.w	r3, r3, #8
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d009      	beq.n	800220a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021f6:	4b12      	ldr	r3, [pc, #72]	; (8002240 <HAL_RCC_ClockConfig+0x1bc>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	490e      	ldr	r1, [pc, #56]	; (8002240 <HAL_RCC_ClockConfig+0x1bc>)
 8002206:	4313      	orrs	r3, r2
 8002208:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800220a:	f000 fb4b 	bl	80028a4 <HAL_RCC_GetSysClockFreq>
 800220e:	4602      	mov	r2, r0
 8002210:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <HAL_RCC_ClockConfig+0x1bc>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	091b      	lsrs	r3, r3, #4
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	490a      	ldr	r1, [pc, #40]	; (8002244 <HAL_RCC_ClockConfig+0x1c0>)
 800221c:	5ccb      	ldrb	r3, [r1, r3]
 800221e:	fa22 f303 	lsr.w	r3, r2, r3
 8002222:	4a09      	ldr	r2, [pc, #36]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 8002224:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002226:	4b09      	ldr	r3, [pc, #36]	; (800224c <HAL_RCC_ClockConfig+0x1c8>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f7fe fdd4 	bl	8000dd8 <HAL_InitTick>

  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40023c00 	.word	0x40023c00
 8002240:	40023800 	.word	0x40023800
 8002244:	08004108 	.word	0x08004108
 8002248:	20000000 	.word	0x20000000
 800224c:	20000004 	.word	0x20000004

08002250 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b08c      	sub	sp, #48	; 0x30
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002258:	2300      	movs	r3, #0
 800225a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800225c:	2300      	movs	r3, #0
 800225e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002260:	2300      	movs	r3, #0
 8002262:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002264:	2300      	movs	r3, #0
 8002266:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800226c:	2300      	movs	r3, #0
 800226e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002270:	2300      	movs	r3, #0
 8002272:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002274:	2300      	movs	r3, #0
 8002276:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002278:	2300      	movs	r3, #0
 800227a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	2b00      	cmp	r3, #0
 8002286:	d010      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002288:	4b6f      	ldr	r3, [pc, #444]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800228a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800228e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002296:	496c      	ldr	r1, [pc, #432]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002298:	4313      	orrs	r3, r2
 800229a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80022a6:	2301      	movs	r3, #1
 80022a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d010      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80022b6:	4b64      	ldr	r3, [pc, #400]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022bc:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c4:	4960      	ldr	r1, [pc, #384]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d101      	bne.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80022d4:	2301      	movs	r3, #1
 80022d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d017      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022e4:	4b58      	ldr	r3, [pc, #352]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	4955      	ldr	r1, [pc, #340]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002302:	d101      	bne.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002304:	2301      	movs	r3, #1
 8002306:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002310:	2301      	movs	r3, #1
 8002312:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0308 	and.w	r3, r3, #8
 800231c:	2b00      	cmp	r3, #0
 800231e:	d017      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002320:	4b49      	ldr	r3, [pc, #292]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002322:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002326:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800232e:	4946      	ldr	r1, [pc, #280]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002330:	4313      	orrs	r3, r2
 8002332:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800233a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800233e:	d101      	bne.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002340:	2301      	movs	r3, #1
 8002342:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800234c:	2301      	movs	r3, #1
 800234e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0320 	and.w	r3, r3, #32
 8002358:	2b00      	cmp	r3, #0
 800235a:	f000 808a 	beq.w	8002472 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	60bb      	str	r3, [r7, #8]
 8002362:	4b39      	ldr	r3, [pc, #228]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	4a38      	ldr	r2, [pc, #224]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800236c:	6413      	str	r3, [r2, #64]	; 0x40
 800236e:	4b36      	ldr	r3, [pc, #216]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002376:	60bb      	str	r3, [r7, #8]
 8002378:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800237a:	4b34      	ldr	r3, [pc, #208]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a33      	ldr	r2, [pc, #204]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002384:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002386:	f7fe fd6b 	bl	8000e60 <HAL_GetTick>
 800238a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800238c:	e008      	b.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800238e:	f7fe fd67 	bl	8000e60 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d901      	bls.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e278      	b.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80023a0:	4b2a      	ldr	r3, [pc, #168]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d0f0      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023ac:	4b26      	ldr	r3, [pc, #152]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023b4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023b6:	6a3b      	ldr	r3, [r7, #32]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d02f      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023c4:	6a3a      	ldr	r2, [r7, #32]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d028      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023ca:	4b1f      	ldr	r3, [pc, #124]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023d2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023d4:	4b1e      	ldr	r3, [pc, #120]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80023d6:	2201      	movs	r2, #1
 80023d8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023da:	4b1d      	ldr	r3, [pc, #116]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80023e0:	4a19      	ldr	r2, [pc, #100]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023e2:	6a3b      	ldr	r3, [r7, #32]
 80023e4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80023e6:	4b18      	ldr	r3, [pc, #96]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d114      	bne.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80023f2:	f7fe fd35 	bl	8000e60 <HAL_GetTick>
 80023f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f8:	e00a      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023fa:	f7fe fd31 	bl	8000e60 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	f241 3288 	movw	r2, #5000	; 0x1388
 8002408:	4293      	cmp	r3, r2
 800240a:	d901      	bls.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e240      	b.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002410:	4b0d      	ldr	r3, [pc, #52]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0ee      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002420:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002424:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002428:	d114      	bne.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800242a:	4b07      	ldr	r3, [pc, #28]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800243a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800243e:	4902      	ldr	r1, [pc, #8]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002440:	4313      	orrs	r3, r2
 8002442:	608b      	str	r3, [r1, #8]
 8002444:	e00c      	b.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002446:	bf00      	nop
 8002448:	40023800 	.word	0x40023800
 800244c:	40007000 	.word	0x40007000
 8002450:	42470e40 	.word	0x42470e40
 8002454:	4b4a      	ldr	r3, [pc, #296]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	4a49      	ldr	r2, [pc, #292]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800245a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800245e:	6093      	str	r3, [r2, #8]
 8002460:	4b47      	ldr	r3, [pc, #284]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002462:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002468:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800246c:	4944      	ldr	r1, [pc, #272]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800246e:	4313      	orrs	r3, r2
 8002470:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0310 	and.w	r3, r3, #16
 800247a:	2b00      	cmp	r3, #0
 800247c:	d004      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002484:	4b3f      	ldr	r3, [pc, #252]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002486:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00a      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002494:	4b3a      	ldr	r3, [pc, #232]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002496:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800249a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a2:	4937      	ldr	r1, [pc, #220]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00a      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80024b6:	4b32      	ldr	r3, [pc, #200]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024bc:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024c4:	492e      	ldr	r1, [pc, #184]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d011      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80024d8:	4b29      	ldr	r3, [pc, #164]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024de:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e6:	4926      	ldr	r1, [pc, #152]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024f6:	d101      	bne.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80024f8:	2301      	movs	r3, #1
 80024fa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00a      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002508:	4b1d      	ldr	r3, [pc, #116]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800250a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800250e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002516:	491a      	ldr	r1, [pc, #104]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002518:	4313      	orrs	r3, r2
 800251a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002526:	2b00      	cmp	r3, #0
 8002528:	d011      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800252a:	4b15      	ldr	r3, [pc, #84]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800252c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002530:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002538:	4911      	ldr	r1, [pc, #68]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800253a:	4313      	orrs	r3, r2
 800253c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002544:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002548:	d101      	bne.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800254a:	2301      	movs	r3, #1
 800254c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800254e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002550:	2b01      	cmp	r3, #1
 8002552:	d005      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800255c:	f040 80ff 	bne.w	800275e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002560:	4b09      	ldr	r3, [pc, #36]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002566:	f7fe fc7b 	bl	8000e60 <HAL_GetTick>
 800256a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800256c:	e00e      	b.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800256e:	f7fe fc77 	bl	8000e60 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d907      	bls.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e188      	b.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002580:	40023800 	.word	0x40023800
 8002584:	424711e0 	.word	0x424711e0
 8002588:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800258c:	4b7e      	ldr	r3, [pc, #504]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1ea      	bne.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d003      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d009      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d028      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d124      	bne.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80025c0:	4b71      	ldr	r3, [pc, #452]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80025c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025c6:	0c1b      	lsrs	r3, r3, #16
 80025c8:	f003 0303 	and.w	r3, r3, #3
 80025cc:	3301      	adds	r3, #1
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80025d2:	4b6d      	ldr	r3, [pc, #436]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80025d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025d8:	0e1b      	lsrs	r3, r3, #24
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	019b      	lsls	r3, r3, #6
 80025ea:	431a      	orrs	r2, r3
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	085b      	lsrs	r3, r3, #1
 80025f0:	3b01      	subs	r3, #1
 80025f2:	041b      	lsls	r3, r3, #16
 80025f4:	431a      	orrs	r2, r3
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	061b      	lsls	r3, r3, #24
 80025fa:	431a      	orrs	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	071b      	lsls	r3, r3, #28
 8002602:	4961      	ldr	r1, [pc, #388]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002604:	4313      	orrs	r3, r2
 8002606:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0304 	and.w	r3, r3, #4
 8002612:	2b00      	cmp	r3, #0
 8002614:	d004      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800261e:	d00a      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002628:	2b00      	cmp	r3, #0
 800262a:	d035      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002630:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002634:	d130      	bne.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002636:	4b54      	ldr	r3, [pc, #336]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002638:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800263c:	0c1b      	lsrs	r3, r3, #16
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	3301      	adds	r3, #1
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002648:	4b4f      	ldr	r3, [pc, #316]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800264a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800264e:	0f1b      	lsrs	r3, r3, #28
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	019b      	lsls	r3, r3, #6
 8002660:	431a      	orrs	r2, r3
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	085b      	lsrs	r3, r3, #1
 8002666:	3b01      	subs	r3, #1
 8002668:	041b      	lsls	r3, r3, #16
 800266a:	431a      	orrs	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	061b      	lsls	r3, r3, #24
 8002672:	431a      	orrs	r2, r3
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	071b      	lsls	r3, r3, #28
 8002678:	4943      	ldr	r1, [pc, #268]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800267a:	4313      	orrs	r3, r2
 800267c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002680:	4b41      	ldr	r3, [pc, #260]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002682:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002686:	f023 021f 	bic.w	r2, r3, #31
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268e:	3b01      	subs	r3, #1
 8002690:	493d      	ldr	r1, [pc, #244]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002692:	4313      	orrs	r3, r2
 8002694:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d029      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026ac:	d124      	bne.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80026ae:	4b36      	ldr	r3, [pc, #216]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80026b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026b4:	0c1b      	lsrs	r3, r3, #16
 80026b6:	f003 0303 	and.w	r3, r3, #3
 80026ba:	3301      	adds	r3, #1
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80026c0:	4b31      	ldr	r3, [pc, #196]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80026c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026c6:	0f1b      	lsrs	r3, r3, #28
 80026c8:	f003 0307 	and.w	r3, r3, #7
 80026cc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	019b      	lsls	r3, r3, #6
 80026d8:	431a      	orrs	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	085b      	lsrs	r3, r3, #1
 80026e0:	3b01      	subs	r3, #1
 80026e2:	041b      	lsls	r3, r3, #16
 80026e4:	431a      	orrs	r2, r3
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	061b      	lsls	r3, r3, #24
 80026ea:	431a      	orrs	r2, r3
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	071b      	lsls	r3, r3, #28
 80026f0:	4925      	ldr	r1, [pc, #148]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002700:	2b00      	cmp	r3, #0
 8002702:	d016      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	019b      	lsls	r3, r3, #6
 800270e:	431a      	orrs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	085b      	lsrs	r3, r3, #1
 8002716:	3b01      	subs	r3, #1
 8002718:	041b      	lsls	r3, r3, #16
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	061b      	lsls	r3, r3, #24
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	071b      	lsls	r3, r3, #28
 800272a:	4917      	ldr	r1, [pc, #92]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800272c:	4313      	orrs	r3, r2
 800272e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002732:	4b16      	ldr	r3, [pc, #88]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002734:	2201      	movs	r2, #1
 8002736:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002738:	f7fe fb92 	bl	8000e60 <HAL_GetTick>
 800273c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800273e:	e008      	b.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002740:	f7fe fb8e 	bl	8000e60 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e09f      	b.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002752:	4b0d      	ldr	r3, [pc, #52]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0f0      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800275e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002760:	2b01      	cmp	r3, #1
 8002762:	f040 8095 	bne.w	8002890 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002766:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800276c:	f7fe fb78 	bl	8000e60 <HAL_GetTick>
 8002770:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002772:	e00f      	b.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002774:	f7fe fb74 	bl	8000e60 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d908      	bls.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e085      	b.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002786:	bf00      	nop
 8002788:	40023800 	.word	0x40023800
 800278c:	42470068 	.word	0x42470068
 8002790:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002794:	4b41      	ldr	r3, [pc, #260]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800279c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027a0:	d0e8      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0304 	and.w	r3, r3, #4
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d009      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d02b      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d127      	bne.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80027ca:	4b34      	ldr	r3, [pc, #208]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80027cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d0:	0c1b      	lsrs	r3, r3, #16
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	3301      	adds	r3, #1
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	699a      	ldr	r2, [r3, #24]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	69db      	ldr	r3, [r3, #28]
 80027e4:	019b      	lsls	r3, r3, #6
 80027e6:	431a      	orrs	r2, r3
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	085b      	lsrs	r3, r3, #1
 80027ec:	3b01      	subs	r3, #1
 80027ee:	041b      	lsls	r3, r3, #16
 80027f0:	431a      	orrs	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f6:	061b      	lsls	r3, r3, #24
 80027f8:	4928      	ldr	r1, [pc, #160]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002800:	4b26      	ldr	r3, [pc, #152]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002802:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002806:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280e:	3b01      	subs	r3, #1
 8002810:	021b      	lsls	r3, r3, #8
 8002812:	4922      	ldr	r1, [pc, #136]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002814:	4313      	orrs	r3, r2
 8002816:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002822:	2b00      	cmp	r3, #0
 8002824:	d01d      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800282e:	d118      	bne.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002830:	4b1a      	ldr	r3, [pc, #104]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002836:	0e1b      	lsrs	r3, r3, #24
 8002838:	f003 030f 	and.w	r3, r3, #15
 800283c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	699a      	ldr	r2, [r3, #24]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	019b      	lsls	r3, r3, #6
 8002848:	431a      	orrs	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	085b      	lsrs	r3, r3, #1
 8002850:	3b01      	subs	r3, #1
 8002852:	041b      	lsls	r3, r3, #16
 8002854:	431a      	orrs	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	061b      	lsls	r3, r3, #24
 800285a:	4910      	ldr	r1, [pc, #64]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800285c:	4313      	orrs	r3, r2
 800285e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002862:	4b0f      	ldr	r3, [pc, #60]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002864:	2201      	movs	r2, #1
 8002866:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002868:	f7fe fafa 	bl	8000e60 <HAL_GetTick>
 800286c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800286e:	e008      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002870:	f7fe faf6 	bl	8000e60 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e007      	b.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002882:	4b06      	ldr	r3, [pc, #24]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800288a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800288e:	d1ef      	bne.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3730      	adds	r7, #48	; 0x30
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	40023800 	.word	0x40023800
 80028a0:	42470070 	.word	0x42470070

080028a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028a8:	b0a6      	sub	sp, #152	; 0x98
 80028aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80028ac:	2300      	movs	r3, #0
 80028ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80028b2:	2300      	movs	r3, #0
 80028b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80028b8:	2300      	movs	r3, #0
 80028ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80028be:	2300      	movs	r3, #0
 80028c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80028c4:	2300      	movs	r3, #0
 80028c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028ca:	4bc8      	ldr	r3, [pc, #800]	; (8002bec <HAL_RCC_GetSysClockFreq+0x348>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 030c 	and.w	r3, r3, #12
 80028d2:	2b0c      	cmp	r3, #12
 80028d4:	f200 817e 	bhi.w	8002bd4 <HAL_RCC_GetSysClockFreq+0x330>
 80028d8:	a201      	add	r2, pc, #4	; (adr r2, 80028e0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80028da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028de:	bf00      	nop
 80028e0:	08002915 	.word	0x08002915
 80028e4:	08002bd5 	.word	0x08002bd5
 80028e8:	08002bd5 	.word	0x08002bd5
 80028ec:	08002bd5 	.word	0x08002bd5
 80028f0:	0800291d 	.word	0x0800291d
 80028f4:	08002bd5 	.word	0x08002bd5
 80028f8:	08002bd5 	.word	0x08002bd5
 80028fc:	08002bd5 	.word	0x08002bd5
 8002900:	08002925 	.word	0x08002925
 8002904:	08002bd5 	.word	0x08002bd5
 8002908:	08002bd5 	.word	0x08002bd5
 800290c:	08002bd5 	.word	0x08002bd5
 8002910:	08002a8f 	.word	0x08002a8f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002914:	4bb6      	ldr	r3, [pc, #728]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002916:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 800291a:	e15f      	b.n	8002bdc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800291c:	4bb5      	ldr	r3, [pc, #724]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x350>)
 800291e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002922:	e15b      	b.n	8002bdc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002924:	4bb1      	ldr	r3, [pc, #708]	; (8002bec <HAL_RCC_GetSysClockFreq+0x348>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800292c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002930:	4bae      	ldr	r3, [pc, #696]	; (8002bec <HAL_RCC_GetSysClockFreq+0x348>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d031      	beq.n	80029a0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800293c:	4bab      	ldr	r3, [pc, #684]	; (8002bec <HAL_RCC_GetSysClockFreq+0x348>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	099b      	lsrs	r3, r3, #6
 8002942:	2200      	movs	r2, #0
 8002944:	66bb      	str	r3, [r7, #104]	; 0x68
 8002946:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002948:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800294a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800294e:	663b      	str	r3, [r7, #96]	; 0x60
 8002950:	2300      	movs	r3, #0
 8002952:	667b      	str	r3, [r7, #100]	; 0x64
 8002954:	4ba7      	ldr	r3, [pc, #668]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x350>)
 8002956:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800295a:	462a      	mov	r2, r5
 800295c:	fb03 f202 	mul.w	r2, r3, r2
 8002960:	2300      	movs	r3, #0
 8002962:	4621      	mov	r1, r4
 8002964:	fb01 f303 	mul.w	r3, r1, r3
 8002968:	4413      	add	r3, r2
 800296a:	4aa2      	ldr	r2, [pc, #648]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x350>)
 800296c:	4621      	mov	r1, r4
 800296e:	fba1 1202 	umull	r1, r2, r1, r2
 8002972:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002974:	460a      	mov	r2, r1
 8002976:	67ba      	str	r2, [r7, #120]	; 0x78
 8002978:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800297a:	4413      	add	r3, r2
 800297c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800297e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002982:	2200      	movs	r2, #0
 8002984:	65bb      	str	r3, [r7, #88]	; 0x58
 8002986:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002988:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800298c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002990:	f7fd fc38 	bl	8000204 <__aeabi_uldivmod>
 8002994:	4602      	mov	r2, r0
 8002996:	460b      	mov	r3, r1
 8002998:	4613      	mov	r3, r2
 800299a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800299e:	e064      	b.n	8002a6a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029a0:	4b92      	ldr	r3, [pc, #584]	; (8002bec <HAL_RCC_GetSysClockFreq+0x348>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	099b      	lsrs	r3, r3, #6
 80029a6:	2200      	movs	r2, #0
 80029a8:	653b      	str	r3, [r7, #80]	; 0x50
 80029aa:	657a      	str	r2, [r7, #84]	; 0x54
 80029ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80029b4:	2300      	movs	r3, #0
 80029b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029b8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80029bc:	4622      	mov	r2, r4
 80029be:	462b      	mov	r3, r5
 80029c0:	f04f 0000 	mov.w	r0, #0
 80029c4:	f04f 0100 	mov.w	r1, #0
 80029c8:	0159      	lsls	r1, r3, #5
 80029ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029ce:	0150      	lsls	r0, r2, #5
 80029d0:	4602      	mov	r2, r0
 80029d2:	460b      	mov	r3, r1
 80029d4:	4621      	mov	r1, r4
 80029d6:	1a51      	subs	r1, r2, r1
 80029d8:	6139      	str	r1, [r7, #16]
 80029da:	4629      	mov	r1, r5
 80029dc:	eb63 0301 	sbc.w	r3, r3, r1
 80029e0:	617b      	str	r3, [r7, #20]
 80029e2:	f04f 0200 	mov.w	r2, #0
 80029e6:	f04f 0300 	mov.w	r3, #0
 80029ea:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029ee:	4659      	mov	r1, fp
 80029f0:	018b      	lsls	r3, r1, #6
 80029f2:	4651      	mov	r1, sl
 80029f4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029f8:	4651      	mov	r1, sl
 80029fa:	018a      	lsls	r2, r1, #6
 80029fc:	4651      	mov	r1, sl
 80029fe:	ebb2 0801 	subs.w	r8, r2, r1
 8002a02:	4659      	mov	r1, fp
 8002a04:	eb63 0901 	sbc.w	r9, r3, r1
 8002a08:	f04f 0200 	mov.w	r2, #0
 8002a0c:	f04f 0300 	mov.w	r3, #0
 8002a10:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a14:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a18:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a1c:	4690      	mov	r8, r2
 8002a1e:	4699      	mov	r9, r3
 8002a20:	4623      	mov	r3, r4
 8002a22:	eb18 0303 	adds.w	r3, r8, r3
 8002a26:	60bb      	str	r3, [r7, #8]
 8002a28:	462b      	mov	r3, r5
 8002a2a:	eb49 0303 	adc.w	r3, r9, r3
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	f04f 0200 	mov.w	r2, #0
 8002a34:	f04f 0300 	mov.w	r3, #0
 8002a38:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a3c:	4629      	mov	r1, r5
 8002a3e:	028b      	lsls	r3, r1, #10
 8002a40:	4621      	mov	r1, r4
 8002a42:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a46:	4621      	mov	r1, r4
 8002a48:	028a      	lsls	r2, r1, #10
 8002a4a:	4610      	mov	r0, r2
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a52:	2200      	movs	r2, #0
 8002a54:	643b      	str	r3, [r7, #64]	; 0x40
 8002a56:	647a      	str	r2, [r7, #68]	; 0x44
 8002a58:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002a5c:	f7fd fbd2 	bl	8000204 <__aeabi_uldivmod>
 8002a60:	4602      	mov	r2, r0
 8002a62:	460b      	mov	r3, r1
 8002a64:	4613      	mov	r3, r2
 8002a66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a6a:	4b60      	ldr	r3, [pc, #384]	; (8002bec <HAL_RCC_GetSysClockFreq+0x348>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	0c1b      	lsrs	r3, r3, #16
 8002a70:	f003 0303 	and.w	r3, r3, #3
 8002a74:	3301      	adds	r3, #1
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8002a7c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002a80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002a8c:	e0a6      	b.n	8002bdc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a8e:	4b57      	ldr	r3, [pc, #348]	; (8002bec <HAL_RCC_GetSysClockFreq+0x348>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a9a:	4b54      	ldr	r3, [pc, #336]	; (8002bec <HAL_RCC_GetSysClockFreq+0x348>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d02a      	beq.n	8002afc <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aa6:	4b51      	ldr	r3, [pc, #324]	; (8002bec <HAL_RCC_GetSysClockFreq+0x348>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	099b      	lsrs	r3, r3, #6
 8002aac:	2200      	movs	r2, #0
 8002aae:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ab0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002ab8:	2100      	movs	r1, #0
 8002aba:	4b4e      	ldr	r3, [pc, #312]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x350>)
 8002abc:	fb03 f201 	mul.w	r2, r3, r1
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	fb00 f303 	mul.w	r3, r0, r3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	4a4a      	ldr	r2, [pc, #296]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x350>)
 8002aca:	fba0 1202 	umull	r1, r2, r0, r2
 8002ace:	677a      	str	r2, [r7, #116]	; 0x74
 8002ad0:	460a      	mov	r2, r1
 8002ad2:	673a      	str	r2, [r7, #112]	; 0x70
 8002ad4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002ad6:	4413      	add	r3, r2
 8002ad8:	677b      	str	r3, [r7, #116]	; 0x74
 8002ada:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ade:	2200      	movs	r2, #0
 8002ae0:	633b      	str	r3, [r7, #48]	; 0x30
 8002ae2:	637a      	str	r2, [r7, #52]	; 0x34
 8002ae4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002ae8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002aec:	f7fd fb8a 	bl	8000204 <__aeabi_uldivmod>
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
 8002af4:	4613      	mov	r3, r2
 8002af6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002afa:	e05b      	b.n	8002bb4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002afc:	4b3b      	ldr	r3, [pc, #236]	; (8002bec <HAL_RCC_GetSysClockFreq+0x348>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	099b      	lsrs	r3, r3, #6
 8002b02:	2200      	movs	r2, #0
 8002b04:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b0e:	623b      	str	r3, [r7, #32]
 8002b10:	2300      	movs	r3, #0
 8002b12:	627b      	str	r3, [r7, #36]	; 0x24
 8002b14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b18:	4642      	mov	r2, r8
 8002b1a:	464b      	mov	r3, r9
 8002b1c:	f04f 0000 	mov.w	r0, #0
 8002b20:	f04f 0100 	mov.w	r1, #0
 8002b24:	0159      	lsls	r1, r3, #5
 8002b26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b2a:	0150      	lsls	r0, r2, #5
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	460b      	mov	r3, r1
 8002b30:	4641      	mov	r1, r8
 8002b32:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b36:	4649      	mov	r1, r9
 8002b38:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	f04f 0300 	mov.w	r3, #0
 8002b44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b50:	ebb2 040a 	subs.w	r4, r2, sl
 8002b54:	eb63 050b 	sbc.w	r5, r3, fp
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	f04f 0300 	mov.w	r3, #0
 8002b60:	00eb      	lsls	r3, r5, #3
 8002b62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b66:	00e2      	lsls	r2, r4, #3
 8002b68:	4614      	mov	r4, r2
 8002b6a:	461d      	mov	r5, r3
 8002b6c:	4643      	mov	r3, r8
 8002b6e:	18e3      	adds	r3, r4, r3
 8002b70:	603b      	str	r3, [r7, #0]
 8002b72:	464b      	mov	r3, r9
 8002b74:	eb45 0303 	adc.w	r3, r5, r3
 8002b78:	607b      	str	r3, [r7, #4]
 8002b7a:	f04f 0200 	mov.w	r2, #0
 8002b7e:	f04f 0300 	mov.w	r3, #0
 8002b82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b86:	4629      	mov	r1, r5
 8002b88:	028b      	lsls	r3, r1, #10
 8002b8a:	4621      	mov	r1, r4
 8002b8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b90:	4621      	mov	r1, r4
 8002b92:	028a      	lsls	r2, r1, #10
 8002b94:	4610      	mov	r0, r2
 8002b96:	4619      	mov	r1, r3
 8002b98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	61bb      	str	r3, [r7, #24]
 8002ba0:	61fa      	str	r2, [r7, #28]
 8002ba2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ba6:	f7fd fb2d 	bl	8000204 <__aeabi_uldivmod>
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	4613      	mov	r3, r2
 8002bb0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002bb4:	4b0d      	ldr	r3, [pc, #52]	; (8002bec <HAL_RCC_GetSysClockFreq+0x348>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	0f1b      	lsrs	r3, r3, #28
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8002bc2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002bc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002bd2:	e003      	b.n	8002bdc <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bd4:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002bd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002bda:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bdc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3798      	adds	r7, #152	; 0x98
 8002be4:	46bd      	mov	sp, r7
 8002be6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bea:	bf00      	nop
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	00f42400 	.word	0x00f42400
 8002bf4:	018cba80 	.word	0x018cba80

08002bf8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e28d      	b.n	8003126 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f000 8083 	beq.w	8002d1e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c18:	4b94      	ldr	r3, [pc, #592]	; (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f003 030c 	and.w	r3, r3, #12
 8002c20:	2b04      	cmp	r3, #4
 8002c22:	d019      	beq.n	8002c58 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c24:	4b91      	ldr	r3, [pc, #580]	; (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c2c:	2b08      	cmp	r3, #8
 8002c2e:	d106      	bne.n	8002c3e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c30:	4b8e      	ldr	r3, [pc, #568]	; (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c3c:	d00c      	beq.n	8002c58 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c3e:	4b8b      	ldr	r3, [pc, #556]	; (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c46:	2b0c      	cmp	r3, #12
 8002c48:	d112      	bne.n	8002c70 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c4a:	4b88      	ldr	r3, [pc, #544]	; (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c56:	d10b      	bne.n	8002c70 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c58:	4b84      	ldr	r3, [pc, #528]	; (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d05b      	beq.n	8002d1c <HAL_RCC_OscConfig+0x124>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d157      	bne.n	8002d1c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e25a      	b.n	8003126 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c78:	d106      	bne.n	8002c88 <HAL_RCC_OscConfig+0x90>
 8002c7a:	4b7c      	ldr	r3, [pc, #496]	; (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a7b      	ldr	r2, [pc, #492]	; (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c84:	6013      	str	r3, [r2, #0]
 8002c86:	e01d      	b.n	8002cc4 <HAL_RCC_OscConfig+0xcc>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c90:	d10c      	bne.n	8002cac <HAL_RCC_OscConfig+0xb4>
 8002c92:	4b76      	ldr	r3, [pc, #472]	; (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a75      	ldr	r2, [pc, #468]	; (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002c98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c9c:	6013      	str	r3, [r2, #0]
 8002c9e:	4b73      	ldr	r3, [pc, #460]	; (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a72      	ldr	r2, [pc, #456]	; (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca8:	6013      	str	r3, [r2, #0]
 8002caa:	e00b      	b.n	8002cc4 <HAL_RCC_OscConfig+0xcc>
 8002cac:	4b6f      	ldr	r3, [pc, #444]	; (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a6e      	ldr	r2, [pc, #440]	; (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002cb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cb6:	6013      	str	r3, [r2, #0]
 8002cb8:	4b6c      	ldr	r3, [pc, #432]	; (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a6b      	ldr	r2, [pc, #428]	; (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002cbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d013      	beq.n	8002cf4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ccc:	f7fe f8c8 	bl	8000e60 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cd4:	f7fe f8c4 	bl	8000e60 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b64      	cmp	r3, #100	; 0x64
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e21f      	b.n	8003126 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ce6:	4b61      	ldr	r3, [pc, #388]	; (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d0f0      	beq.n	8002cd4 <HAL_RCC_OscConfig+0xdc>
 8002cf2:	e014      	b.n	8002d1e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf4:	f7fe f8b4 	bl	8000e60 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cfc:	f7fe f8b0 	bl	8000e60 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b64      	cmp	r3, #100	; 0x64
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e20b      	b.n	8003126 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d0e:	4b57      	ldr	r3, [pc, #348]	; (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1f0      	bne.n	8002cfc <HAL_RCC_OscConfig+0x104>
 8002d1a:	e000      	b.n	8002d1e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d06f      	beq.n	8002e0a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002d2a:	4b50      	ldr	r3, [pc, #320]	; (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 030c 	and.w	r3, r3, #12
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d017      	beq.n	8002d66 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d36:	4b4d      	ldr	r3, [pc, #308]	; (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002d3e:	2b08      	cmp	r3, #8
 8002d40:	d105      	bne.n	8002d4e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d42:	4b4a      	ldr	r3, [pc, #296]	; (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00b      	beq.n	8002d66 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d4e:	4b47      	ldr	r3, [pc, #284]	; (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d56:	2b0c      	cmp	r3, #12
 8002d58:	d11c      	bne.n	8002d94 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d5a:	4b44      	ldr	r3, [pc, #272]	; (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d116      	bne.n	8002d94 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d66:	4b41      	ldr	r3, [pc, #260]	; (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d005      	beq.n	8002d7e <HAL_RCC_OscConfig+0x186>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d001      	beq.n	8002d7e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e1d3      	b.n	8003126 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d7e:	4b3b      	ldr	r3, [pc, #236]	; (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	4937      	ldr	r1, [pc, #220]	; (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d92:	e03a      	b.n	8002e0a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d020      	beq.n	8002dde <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d9c:	4b34      	ldr	r3, [pc, #208]	; (8002e70 <HAL_RCC_OscConfig+0x278>)
 8002d9e:	2201      	movs	r2, #1
 8002da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da2:	f7fe f85d 	bl	8000e60 <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da8:	e008      	b.n	8002dbc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002daa:	f7fe f859 	bl	8000e60 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e1b4      	b.n	8003126 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dbc:	4b2b      	ldr	r3, [pc, #172]	; (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0f0      	beq.n	8002daa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc8:	4b28      	ldr	r3, [pc, #160]	; (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	4925      	ldr	r1, [pc, #148]	; (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	600b      	str	r3, [r1, #0]
 8002ddc:	e015      	b.n	8002e0a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dde:	4b24      	ldr	r3, [pc, #144]	; (8002e70 <HAL_RCC_OscConfig+0x278>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de4:	f7fe f83c 	bl	8000e60 <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dec:	f7fe f838 	bl	8000e60 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e193      	b.n	8003126 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dfe:	4b1b      	ldr	r3, [pc, #108]	; (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1f0      	bne.n	8002dec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0308 	and.w	r3, r3, #8
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d036      	beq.n	8002e84 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d016      	beq.n	8002e4c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e1e:	4b15      	ldr	r3, [pc, #84]	; (8002e74 <HAL_RCC_OscConfig+0x27c>)
 8002e20:	2201      	movs	r2, #1
 8002e22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e24:	f7fe f81c 	bl	8000e60 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e2c:	f7fe f818 	bl	8000e60 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e173      	b.n	8003126 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e3e:	4b0b      	ldr	r3, [pc, #44]	; (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002e40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0f0      	beq.n	8002e2c <HAL_RCC_OscConfig+0x234>
 8002e4a:	e01b      	b.n	8002e84 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e4c:	4b09      	ldr	r3, [pc, #36]	; (8002e74 <HAL_RCC_OscConfig+0x27c>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e52:	f7fe f805 	bl	8000e60 <HAL_GetTick>
 8002e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e58:	e00e      	b.n	8002e78 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e5a:	f7fe f801 	bl	8000e60 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d907      	bls.n	8002e78 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e15c      	b.n	8003126 <HAL_RCC_OscConfig+0x52e>
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	42470000 	.word	0x42470000
 8002e74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e78:	4b8a      	ldr	r3, [pc, #552]	; (80030a4 <HAL_RCC_OscConfig+0x4ac>)
 8002e7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1ea      	bne.n	8002e5a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 8097 	beq.w	8002fc0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e92:	2300      	movs	r3, #0
 8002e94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e96:	4b83      	ldr	r3, [pc, #524]	; (80030a4 <HAL_RCC_OscConfig+0x4ac>)
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10f      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	60bb      	str	r3, [r7, #8]
 8002ea6:	4b7f      	ldr	r3, [pc, #508]	; (80030a4 <HAL_RCC_OscConfig+0x4ac>)
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	4a7e      	ldr	r2, [pc, #504]	; (80030a4 <HAL_RCC_OscConfig+0x4ac>)
 8002eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002eb2:	4b7c      	ldr	r3, [pc, #496]	; (80030a4 <HAL_RCC_OscConfig+0x4ac>)
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eba:	60bb      	str	r3, [r7, #8]
 8002ebc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec2:	4b79      	ldr	r3, [pc, #484]	; (80030a8 <HAL_RCC_OscConfig+0x4b0>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d118      	bne.n	8002f00 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ece:	4b76      	ldr	r3, [pc, #472]	; (80030a8 <HAL_RCC_OscConfig+0x4b0>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a75      	ldr	r2, [pc, #468]	; (80030a8 <HAL_RCC_OscConfig+0x4b0>)
 8002ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ed8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eda:	f7fd ffc1 	bl	8000e60 <HAL_GetTick>
 8002ede:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee0:	e008      	b.n	8002ef4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ee2:	f7fd ffbd 	bl	8000e60 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e118      	b.n	8003126 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef4:	4b6c      	ldr	r3, [pc, #432]	; (80030a8 <HAL_RCC_OscConfig+0x4b0>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d0f0      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d106      	bne.n	8002f16 <HAL_RCC_OscConfig+0x31e>
 8002f08:	4b66      	ldr	r3, [pc, #408]	; (80030a4 <HAL_RCC_OscConfig+0x4ac>)
 8002f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0c:	4a65      	ldr	r2, [pc, #404]	; (80030a4 <HAL_RCC_OscConfig+0x4ac>)
 8002f0e:	f043 0301 	orr.w	r3, r3, #1
 8002f12:	6713      	str	r3, [r2, #112]	; 0x70
 8002f14:	e01c      	b.n	8002f50 <HAL_RCC_OscConfig+0x358>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	2b05      	cmp	r3, #5
 8002f1c:	d10c      	bne.n	8002f38 <HAL_RCC_OscConfig+0x340>
 8002f1e:	4b61      	ldr	r3, [pc, #388]	; (80030a4 <HAL_RCC_OscConfig+0x4ac>)
 8002f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f22:	4a60      	ldr	r2, [pc, #384]	; (80030a4 <HAL_RCC_OscConfig+0x4ac>)
 8002f24:	f043 0304 	orr.w	r3, r3, #4
 8002f28:	6713      	str	r3, [r2, #112]	; 0x70
 8002f2a:	4b5e      	ldr	r3, [pc, #376]	; (80030a4 <HAL_RCC_OscConfig+0x4ac>)
 8002f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2e:	4a5d      	ldr	r2, [pc, #372]	; (80030a4 <HAL_RCC_OscConfig+0x4ac>)
 8002f30:	f043 0301 	orr.w	r3, r3, #1
 8002f34:	6713      	str	r3, [r2, #112]	; 0x70
 8002f36:	e00b      	b.n	8002f50 <HAL_RCC_OscConfig+0x358>
 8002f38:	4b5a      	ldr	r3, [pc, #360]	; (80030a4 <HAL_RCC_OscConfig+0x4ac>)
 8002f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3c:	4a59      	ldr	r2, [pc, #356]	; (80030a4 <HAL_RCC_OscConfig+0x4ac>)
 8002f3e:	f023 0301 	bic.w	r3, r3, #1
 8002f42:	6713      	str	r3, [r2, #112]	; 0x70
 8002f44:	4b57      	ldr	r3, [pc, #348]	; (80030a4 <HAL_RCC_OscConfig+0x4ac>)
 8002f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f48:	4a56      	ldr	r2, [pc, #344]	; (80030a4 <HAL_RCC_OscConfig+0x4ac>)
 8002f4a:	f023 0304 	bic.w	r3, r3, #4
 8002f4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d015      	beq.n	8002f84 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f58:	f7fd ff82 	bl	8000e60 <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f5e:	e00a      	b.n	8002f76 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f60:	f7fd ff7e 	bl	8000e60 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e0d7      	b.n	8003126 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f76:	4b4b      	ldr	r3, [pc, #300]	; (80030a4 <HAL_RCC_OscConfig+0x4ac>)
 8002f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d0ee      	beq.n	8002f60 <HAL_RCC_OscConfig+0x368>
 8002f82:	e014      	b.n	8002fae <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f84:	f7fd ff6c 	bl	8000e60 <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f8a:	e00a      	b.n	8002fa2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f8c:	f7fd ff68 	bl	8000e60 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e0c1      	b.n	8003126 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fa2:	4b40      	ldr	r3, [pc, #256]	; (80030a4 <HAL_RCC_OscConfig+0x4ac>)
 8002fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1ee      	bne.n	8002f8c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fae:	7dfb      	ldrb	r3, [r7, #23]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d105      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fb4:	4b3b      	ldr	r3, [pc, #236]	; (80030a4 <HAL_RCC_OscConfig+0x4ac>)
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb8:	4a3a      	ldr	r2, [pc, #232]	; (80030a4 <HAL_RCC_OscConfig+0x4ac>)
 8002fba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fbe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 80ad 	beq.w	8003124 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fca:	4b36      	ldr	r3, [pc, #216]	; (80030a4 <HAL_RCC_OscConfig+0x4ac>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 030c 	and.w	r3, r3, #12
 8002fd2:	2b08      	cmp	r3, #8
 8002fd4:	d060      	beq.n	8003098 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d145      	bne.n	800306a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fde:	4b33      	ldr	r3, [pc, #204]	; (80030ac <HAL_RCC_OscConfig+0x4b4>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe4:	f7fd ff3c 	bl	8000e60 <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fec:	f7fd ff38 	bl	8000e60 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e093      	b.n	8003126 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ffe:	4b29      	ldr	r3, [pc, #164]	; (80030a4 <HAL_RCC_OscConfig+0x4ac>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1f0      	bne.n	8002fec <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	69da      	ldr	r2, [r3, #28]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003018:	019b      	lsls	r3, r3, #6
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003020:	085b      	lsrs	r3, r3, #1
 8003022:	3b01      	subs	r3, #1
 8003024:	041b      	lsls	r3, r3, #16
 8003026:	431a      	orrs	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302c:	061b      	lsls	r3, r3, #24
 800302e:	431a      	orrs	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003034:	071b      	lsls	r3, r3, #28
 8003036:	491b      	ldr	r1, [pc, #108]	; (80030a4 <HAL_RCC_OscConfig+0x4ac>)
 8003038:	4313      	orrs	r3, r2
 800303a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800303c:	4b1b      	ldr	r3, [pc, #108]	; (80030ac <HAL_RCC_OscConfig+0x4b4>)
 800303e:	2201      	movs	r2, #1
 8003040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003042:	f7fd ff0d 	bl	8000e60 <HAL_GetTick>
 8003046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003048:	e008      	b.n	800305c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800304a:	f7fd ff09 	bl	8000e60 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e064      	b.n	8003126 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800305c:	4b11      	ldr	r3, [pc, #68]	; (80030a4 <HAL_RCC_OscConfig+0x4ac>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0f0      	beq.n	800304a <HAL_RCC_OscConfig+0x452>
 8003068:	e05c      	b.n	8003124 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800306a:	4b10      	ldr	r3, [pc, #64]	; (80030ac <HAL_RCC_OscConfig+0x4b4>)
 800306c:	2200      	movs	r2, #0
 800306e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003070:	f7fd fef6 	bl	8000e60 <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003078:	f7fd fef2 	bl	8000e60 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e04d      	b.n	8003126 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800308a:	4b06      	ldr	r3, [pc, #24]	; (80030a4 <HAL_RCC_OscConfig+0x4ac>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1f0      	bne.n	8003078 <HAL_RCC_OscConfig+0x480>
 8003096:	e045      	b.n	8003124 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d107      	bne.n	80030b0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e040      	b.n	8003126 <HAL_RCC_OscConfig+0x52e>
 80030a4:	40023800 	.word	0x40023800
 80030a8:	40007000 	.word	0x40007000
 80030ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030b0:	4b1f      	ldr	r3, [pc, #124]	; (8003130 <HAL_RCC_OscConfig+0x538>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d030      	beq.n	8003120 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d129      	bne.n	8003120 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d122      	bne.n	8003120 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030e0:	4013      	ands	r3, r2
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d119      	bne.n	8003120 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f6:	085b      	lsrs	r3, r3, #1
 80030f8:	3b01      	subs	r3, #1
 80030fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d10f      	bne.n	8003120 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800310c:	429a      	cmp	r2, r3
 800310e:	d107      	bne.n	8003120 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800311c:	429a      	cmp	r2, r3
 800311e:	d001      	beq.n	8003124 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e000      	b.n	8003126 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3718      	adds	r7, #24
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	40023800 	.word	0x40023800

08003134 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e07b      	b.n	800323e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	2b00      	cmp	r3, #0
 800314c:	d108      	bne.n	8003160 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003156:	d009      	beq.n	800316c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	61da      	str	r2, [r3, #28]
 800315e:	e005      	b.n	800316c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d106      	bne.n	800318c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7fd fc96 	bl	8000ab8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2202      	movs	r2, #2
 8003190:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80031b4:	431a      	orrs	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031be:	431a      	orrs	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	431a      	orrs	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	431a      	orrs	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031dc:	431a      	orrs	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031e6:	431a      	orrs	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f0:	ea42 0103 	orr.w	r1, r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	430a      	orrs	r2, r1
 8003202:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	0c1b      	lsrs	r3, r3, #16
 800320a:	f003 0104 	and.w	r1, r3, #4
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003212:	f003 0210 	and.w	r2, r3, #16
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	430a      	orrs	r2, r1
 800321c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	69da      	ldr	r2, [r3, #28]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800322c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b082      	sub	sp, #8
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e01a      	b.n	800328e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2202      	movs	r2, #2
 800325c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800326e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f7fd fc9b 	bl	8000bac <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
	...

08003298 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	4613      	mov	r3, r2
 80032a4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80032a6:	2300      	movs	r3, #0
 80032a8:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d110      	bne.n	80032d4 <HAL_SPI_Receive_DMA+0x3c>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032ba:	d10b      	bne.n	80032d4 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2204      	movs	r2, #4
 80032c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80032c4:	88fb      	ldrh	r3, [r7, #6]
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	68b9      	ldr	r1, [r7, #8]
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f000 f8ac 	bl	8003428 <HAL_SPI_TransmitReceive_DMA>
 80032d0:	4603      	mov	r3, r0
 80032d2:	e09f      	b.n	8003414 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d101      	bne.n	80032e2 <HAL_SPI_Receive_DMA+0x4a>
 80032de:	2302      	movs	r3, #2
 80032e0:	e098      	b.n	8003414 <HAL_SPI_Receive_DMA+0x17c>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d002      	beq.n	80032fc <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 80032f6:	2302      	movs	r3, #2
 80032f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80032fa:	e086      	b.n	800340a <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d002      	beq.n	8003308 <HAL_SPI_Receive_DMA+0x70>
 8003302:	88fb      	ldrh	r3, [r7, #6]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d102      	bne.n	800330e <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800330c:	e07d      	b.n	800340a <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2204      	movs	r2, #4
 8003312:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	88fa      	ldrh	r2, [r7, #6]
 8003326:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	88fa      	ldrh	r2, [r7, #6]
 800332c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800334e:	d10f      	bne.n	8003370 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800335e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800336e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003374:	4a29      	ldr	r2, [pc, #164]	; (800341c <HAL_SPI_Receive_DMA+0x184>)
 8003376:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800337c:	4a28      	ldr	r2, [pc, #160]	; (8003420 <HAL_SPI_Receive_DMA+0x188>)
 800337e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003384:	4a27      	ldr	r2, [pc, #156]	; (8003424 <HAL_SPI_Receive_DMA+0x18c>)
 8003386:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800338c:	2200      	movs	r2, #0
 800338e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	330c      	adds	r3, #12
 800339a:	4619      	mov	r1, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033a6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80033a8:	f7fd ffa8 	bl	80012fc <HAL_DMA_Start_IT>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00c      	beq.n	80033cc <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b6:	f043 0210 	orr.w	r2, r3, #16
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80033ca:	e01e      	b.n	800340a <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d6:	2b40      	cmp	r3, #64	; 0x40
 80033d8:	d007      	beq.n	80033ea <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033e8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	685a      	ldr	r2, [r3, #4]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f042 0220 	orr.w	r2, r2, #32
 80033f8:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	685a      	ldr	r2, [r3, #4]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f042 0201 	orr.w	r2, r2, #1
 8003408:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003412:	7dfb      	ldrb	r3, [r7, #23]
}
 8003414:	4618      	mov	r0, r3
 8003416:	3718      	adds	r7, #24
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	080037c9 	.word	0x080037c9
 8003420:	08003691 	.word	0x08003691
 8003424:	08003801 	.word	0x08003801

08003428 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
 8003434:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003436:	2300      	movs	r3, #0
 8003438:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003440:	2b01      	cmp	r3, #1
 8003442:	d101      	bne.n	8003448 <HAL_SPI_TransmitReceive_DMA+0x20>
 8003444:	2302      	movs	r3, #2
 8003446:	e0e3      	b.n	8003610 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003456:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800345e:	7dbb      	ldrb	r3, [r7, #22]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d00d      	beq.n	8003480 <HAL_SPI_TransmitReceive_DMA+0x58>
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800346a:	d106      	bne.n	800347a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d102      	bne.n	800347a <HAL_SPI_TransmitReceive_DMA+0x52>
 8003474:	7dbb      	ldrb	r3, [r7, #22]
 8003476:	2b04      	cmp	r3, #4
 8003478:	d002      	beq.n	8003480 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800347a:	2302      	movs	r3, #2
 800347c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800347e:	e0c2      	b.n	8003606 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d005      	beq.n	8003492 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d002      	beq.n	8003492 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800348c:	887b      	ldrh	r3, [r7, #2]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d102      	bne.n	8003498 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003496:	e0b6      	b.n	8003606 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b04      	cmp	r3, #4
 80034a2:	d003      	beq.n	80034ac <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2205      	movs	r2, #5
 80034a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	68ba      	ldr	r2, [r7, #8]
 80034b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	887a      	ldrh	r2, [r7, #2]
 80034bc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	887a      	ldrh	r2, [r7, #2]
 80034c2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	887a      	ldrh	r2, [r7, #2]
 80034ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	887a      	ldrh	r2, [r7, #2]
 80034d4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b04      	cmp	r3, #4
 80034ec:	d108      	bne.n	8003500 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f2:	4a49      	ldr	r2, [pc, #292]	; (8003618 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 80034f4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034fa:	4a48      	ldr	r2, [pc, #288]	; (800361c <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 80034fc:	63da      	str	r2, [r3, #60]	; 0x3c
 80034fe:	e007      	b.n	8003510 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003504:	4a46      	ldr	r2, [pc, #280]	; (8003620 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8003506:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800350c:	4a45      	ldr	r2, [pc, #276]	; (8003624 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800350e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003514:	4a44      	ldr	r2, [pc, #272]	; (8003628 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8003516:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800351c:	2200      	movs	r2, #0
 800351e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	330c      	adds	r3, #12
 800352a:	4619      	mov	r1, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003530:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003536:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003538:	f7fd fee0 	bl	80012fc <HAL_DMA_Start_IT>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00c      	beq.n	800355c <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003546:	f043 0210 	orr.w	r2, r3, #16
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800355a:	e054      	b.n	8003606 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	685a      	ldr	r2, [r3, #4]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f042 0201 	orr.w	r2, r2, #1
 800356a:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003570:	2200      	movs	r2, #0
 8003572:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003578:	2200      	movs	r2, #0
 800357a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003580:	2200      	movs	r2, #0
 8003582:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003588:	2200      	movs	r2, #0
 800358a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003594:	4619      	mov	r1, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	330c      	adds	r3, #12
 800359c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035a2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80035a4:	f7fd feaa 	bl	80012fc <HAL_DMA_Start_IT>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00c      	beq.n	80035c8 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b2:	f043 0210 	orr.w	r2, r3, #16
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80035c6:	e01e      	b.n	8003606 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d2:	2b40      	cmp	r3, #64	; 0x40
 80035d4:	d007      	beq.n	80035e6 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035e4:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f042 0220 	orr.w	r2, r2, #32
 80035f4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f042 0202 	orr.w	r2, r2, #2
 8003604:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800360e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003610:	4618      	mov	r0, r3
 8003612:	3718      	adds	r7, #24
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	080037c9 	.word	0x080037c9
 800361c:	08003691 	.word	0x08003691
 8003620:	080037e5 	.word	0x080037e5
 8003624:	08003739 	.word	0x08003739
 8003628:	08003801 	.word	0x08003801

0800362c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800369e:	f7fd fbdf 	bl	8000e60 <HAL_GetTick>
 80036a2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036b2:	d03b      	beq.n	800372c <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685a      	ldr	r2, [r3, #4]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 0220 	bic.w	r2, r2, #32
 80036c2:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d10d      	bne.n	80036e8 <SPI_DMAReceiveCplt+0x58>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036d4:	d108      	bne.n	80036e8 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685a      	ldr	r2, [r3, #4]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 0203 	bic.w	r2, r2, #3
 80036e4:	605a      	str	r2, [r3, #4]
 80036e6:	e007      	b.n	80036f8 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	685a      	ldr	r2, [r3, #4]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 0201 	bic.w	r2, r2, #1
 80036f6:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80036f8:	68ba      	ldr	r2, [r7, #8]
 80036fa:	2164      	movs	r1, #100	; 0x64
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f000 f927 	bl	8003950 <SPI_EndRxTransaction>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d002      	beq.n	800370e <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2220      	movs	r2, #32
 800370c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003720:	2b00      	cmp	r3, #0
 8003722:	d003      	beq.n	800372c <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f7ff ffa9 	bl	800367c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800372a:	e002      	b.n	8003732 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f7ff ff7d 	bl	800362c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003744:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003746:	f7fd fb8b 	bl	8000e60 <HAL_GetTick>
 800374a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003756:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800375a:	d02f      	beq.n	80037bc <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f022 0220 	bic.w	r2, r2, #32
 800376a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800376c:	68ba      	ldr	r2, [r7, #8]
 800376e:	2164      	movs	r1, #100	; 0x64
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f000 f953 	bl	8003a1c <SPI_EndRxTxTransaction>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d005      	beq.n	8003788 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003780:	f043 0220 	orr.w	r2, r3, #32
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 0203 	bic.w	r2, r2, #3
 8003796:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d003      	beq.n	80037bc <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f7ff ff61 	bl	800367c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80037ba:	e002      	b.n	80037c2 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f7ff ff3f 	bl	8003640 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d4:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f7ff ff3c 	bl	8003654 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80037dc:	bf00      	nop
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f0:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f7ff ff38 	bl	8003668 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80037f8:	bf00      	nop
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 0203 	bic.w	r2, r2, #3
 800381c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003822:	f043 0210 	orr.w	r2, r3, #16
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f7ff ff22 	bl	800367c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003838:	bf00      	nop
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b088      	sub	sp, #32
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	603b      	str	r3, [r7, #0]
 800384c:	4613      	mov	r3, r2
 800384e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003850:	f7fd fb06 	bl	8000e60 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003858:	1a9b      	subs	r3, r3, r2
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	4413      	add	r3, r2
 800385e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003860:	f7fd fafe 	bl	8000e60 <HAL_GetTick>
 8003864:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003866:	4b39      	ldr	r3, [pc, #228]	; (800394c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	015b      	lsls	r3, r3, #5
 800386c:	0d1b      	lsrs	r3, r3, #20
 800386e:	69fa      	ldr	r2, [r7, #28]
 8003870:	fb02 f303 	mul.w	r3, r2, r3
 8003874:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003876:	e054      	b.n	8003922 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800387e:	d050      	beq.n	8003922 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003880:	f7fd faee 	bl	8000e60 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	69fa      	ldr	r2, [r7, #28]
 800388c:	429a      	cmp	r2, r3
 800388e:	d902      	bls.n	8003896 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d13d      	bne.n	8003912 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	685a      	ldr	r2, [r3, #4]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80038a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038ae:	d111      	bne.n	80038d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038b8:	d004      	beq.n	80038c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038c2:	d107      	bne.n	80038d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038dc:	d10f      	bne.n	80038fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038ec:	601a      	str	r2, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e017      	b.n	8003942 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d101      	bne.n	800391c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003918:	2300      	movs	r3, #0
 800391a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	3b01      	subs	r3, #1
 8003920:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	689a      	ldr	r2, [r3, #8]
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	4013      	ands	r3, r2
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	429a      	cmp	r2, r3
 8003930:	bf0c      	ite	eq
 8003932:	2301      	moveq	r3, #1
 8003934:	2300      	movne	r3, #0
 8003936:	b2db      	uxtb	r3, r3
 8003938:	461a      	mov	r2, r3
 800393a:	79fb      	ldrb	r3, [r7, #7]
 800393c:	429a      	cmp	r2, r3
 800393e:	d19b      	bne.n	8003878 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3720      	adds	r7, #32
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	20000000 	.word	0x20000000

08003950 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af02      	add	r7, sp, #8
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003964:	d111      	bne.n	800398a <SPI_EndRxTransaction+0x3a>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800396e:	d004      	beq.n	800397a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003978:	d107      	bne.n	800398a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003988:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003992:	d12a      	bne.n	80039ea <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800399c:	d012      	beq.n	80039c4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	2200      	movs	r2, #0
 80039a6:	2180      	movs	r1, #128	; 0x80
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f7ff ff49 	bl	8003840 <SPI_WaitFlagStateUntilTimeout>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d02d      	beq.n	8003a10 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b8:	f043 0220 	orr.w	r2, r3, #32
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e026      	b.n	8003a12 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	9300      	str	r3, [sp, #0]
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	2200      	movs	r2, #0
 80039cc:	2101      	movs	r1, #1
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f7ff ff36 	bl	8003840 <SPI_WaitFlagStateUntilTimeout>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d01a      	beq.n	8003a10 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039de:	f043 0220 	orr.w	r2, r3, #32
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e013      	b.n	8003a12 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	2200      	movs	r2, #0
 80039f2:	2101      	movs	r1, #1
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f7ff ff23 	bl	8003840 <SPI_WaitFlagStateUntilTimeout>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d007      	beq.n	8003a10 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a04:	f043 0220 	orr.w	r2, r3, #32
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e000      	b.n	8003a12 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
	...

08003a1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b088      	sub	sp, #32
 8003a20:	af02      	add	r7, sp, #8
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003a28:	4b1b      	ldr	r3, [pc, #108]	; (8003a98 <SPI_EndRxTxTransaction+0x7c>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a1b      	ldr	r2, [pc, #108]	; (8003a9c <SPI_EndRxTxTransaction+0x80>)
 8003a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a32:	0d5b      	lsrs	r3, r3, #21
 8003a34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a38:	fb02 f303 	mul.w	r3, r2, r3
 8003a3c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a46:	d112      	bne.n	8003a6e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	2180      	movs	r1, #128	; 0x80
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f7ff fef4 	bl	8003840 <SPI_WaitFlagStateUntilTimeout>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d016      	beq.n	8003a8c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a62:	f043 0220 	orr.w	r2, r3, #32
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e00f      	b.n	8003a8e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00a      	beq.n	8003a8a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	3b01      	subs	r3, #1
 8003a78:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a84:	2b80      	cmp	r3, #128	; 0x80
 8003a86:	d0f2      	beq.n	8003a6e <SPI_EndRxTxTransaction+0x52>
 8003a88:	e000      	b.n	8003a8c <SPI_EndRxTxTransaction+0x70>
        break;
 8003a8a:	bf00      	nop
  }

  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3718      	adds	r7, #24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	20000000 	.word	0x20000000
 8003a9c:	165e9f81 	.word	0x165e9f81

08003aa0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003aa0:	b084      	sub	sp, #16
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b084      	sub	sp, #16
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
 8003aaa:	f107 001c 	add.w	r0, r7, #28
 8003aae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d122      	bne.n	8003afe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003abc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003acc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003ae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d105      	bne.n	8003af2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 fa9c 	bl	8004030 <USB_CoreReset>
 8003af8:	4603      	mov	r3, r0
 8003afa:	73fb      	strb	r3, [r7, #15]
 8003afc:	e01a      	b.n	8003b34 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 fa90 	bl	8004030 <USB_CoreReset>
 8003b10:	4603      	mov	r3, r0
 8003b12:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003b14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d106      	bne.n	8003b28 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	639a      	str	r2, [r3, #56]	; 0x38
 8003b26:	e005      	b.n	8003b34 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d10b      	bne.n	8003b52 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f043 0206 	orr.w	r2, r3, #6
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f043 0220 	orr.w	r2, r3, #32
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b5e:	b004      	add	sp, #16
 8003b60:	4770      	bx	lr

08003b62 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003b62:	b480      	push	{r7}
 8003b64:	b083      	sub	sp, #12
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f023 0201 	bic.w	r2, r3, #1
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003b90:	2300      	movs	r3, #0
 8003b92:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003ba0:	78fb      	ldrb	r3, [r7, #3]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d115      	bne.n	8003bd2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003bb2:	2001      	movs	r0, #1
 8003bb4:	f7fd f960 	bl	8000e78 <HAL_Delay>
      ms++;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 fa28 	bl	8004014 <USB_GetMode>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d01e      	beq.n	8003c08 <USB_SetCurrentMode+0x84>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2b31      	cmp	r3, #49	; 0x31
 8003bce:	d9f0      	bls.n	8003bb2 <USB_SetCurrentMode+0x2e>
 8003bd0:	e01a      	b.n	8003c08 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003bd2:	78fb      	ldrb	r3, [r7, #3]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d115      	bne.n	8003c04 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003be4:	2001      	movs	r0, #1
 8003be6:	f7fd f947 	bl	8000e78 <HAL_Delay>
      ms++;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	3301      	adds	r3, #1
 8003bee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 fa0f 	bl	8004014 <USB_GetMode>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d005      	beq.n	8003c08 <USB_SetCurrentMode+0x84>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2b31      	cmp	r3, #49	; 0x31
 8003c00:	d9f0      	bls.n	8003be4 <USB_SetCurrentMode+0x60>
 8003c02:	e001      	b.n	8003c08 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e005      	b.n	8003c14 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2b32      	cmp	r3, #50	; 0x32
 8003c0c:	d101      	bne.n	8003c12 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e000      	b.n	8003c14 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c1c:	b084      	sub	sp, #16
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b086      	sub	sp, #24
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
 8003c26:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003c2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003c36:	2300      	movs	r3, #0
 8003c38:	613b      	str	r3, [r7, #16]
 8003c3a:	e009      	b.n	8003c50 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	3340      	adds	r3, #64	; 0x40
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4413      	add	r3, r2
 8003c46:	2200      	movs	r2, #0
 8003c48:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	613b      	str	r3, [r7, #16]
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	2b0e      	cmp	r3, #14
 8003c54:	d9f2      	bls.n	8003c3c <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d11c      	bne.n	8003c96 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c6a:	f043 0302 	orr.w	r3, r3, #2
 8003c6e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c74:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	e005      	b.n	8003ca2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003ca8:	461a      	mov	r2, r3
 8003caa:	2300      	movs	r3, #0
 8003cac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	680b      	ldr	r3, [r1, #0]
 8003cc0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d10c      	bne.n	8003ce2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d104      	bne.n	8003cd8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003cce:	2100      	movs	r1, #0
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 f965 	bl	8003fa0 <USB_SetDevSpeed>
 8003cd6:	e008      	b.n	8003cea <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003cd8:	2101      	movs	r1, #1
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f960 	bl	8003fa0 <USB_SetDevSpeed>
 8003ce0:	e003      	b.n	8003cea <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003ce2:	2103      	movs	r1, #3
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 f95b 	bl	8003fa0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003cea:	2110      	movs	r1, #16
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 f8f3 	bl	8003ed8 <USB_FlushTxFifo>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 f91f 	bl	8003f40 <USB_FlushRxFifo>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d001      	beq.n	8003d0c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d12:	461a      	mov	r2, r3
 8003d14:	2300      	movs	r3, #0
 8003d16:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d1e:	461a      	mov	r2, r3
 8003d20:	2300      	movs	r3, #0
 8003d22:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d30:	2300      	movs	r3, #0
 8003d32:	613b      	str	r3, [r7, #16]
 8003d34:	e043      	b.n	8003dbe <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	015a      	lsls	r2, r3, #5
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d4c:	d118      	bne.n	8003d80 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10a      	bne.n	8003d6a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	015a      	lsls	r2, r3, #5
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d60:	461a      	mov	r2, r3
 8003d62:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003d66:	6013      	str	r3, [r2, #0]
 8003d68:	e013      	b.n	8003d92 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	015a      	lsls	r2, r3, #5
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	4413      	add	r3, r2
 8003d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d76:	461a      	mov	r2, r3
 8003d78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	e008      	b.n	8003d92 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	015a      	lsls	r2, r3, #5
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	4413      	add	r3, r2
 8003d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	2300      	movs	r3, #0
 8003d90:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	015a      	lsls	r2, r3, #5
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	4413      	add	r3, r2
 8003d9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d9e:	461a      	mov	r2, r3
 8003da0:	2300      	movs	r3, #0
 8003da2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	015a      	lsls	r2, r3, #5
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	4413      	add	r3, r2
 8003dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003db0:	461a      	mov	r2, r3
 8003db2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003db6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	3301      	adds	r3, #1
 8003dbc:	613b      	str	r3, [r7, #16]
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d3b7      	bcc.n	8003d36 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	613b      	str	r3, [r7, #16]
 8003dca:	e043      	b.n	8003e54 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	015a      	lsls	r2, r3, #5
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003de2:	d118      	bne.n	8003e16 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10a      	bne.n	8003e00 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	015a      	lsls	r2, r3, #5
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	4413      	add	r3, r2
 8003df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003df6:	461a      	mov	r2, r3
 8003df8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003dfc:	6013      	str	r3, [r2, #0]
 8003dfe:	e013      	b.n	8003e28 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	015a      	lsls	r2, r3, #5
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	4413      	add	r3, r2
 8003e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e12:	6013      	str	r3, [r2, #0]
 8003e14:	e008      	b.n	8003e28 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	015a      	lsls	r2, r3, #5
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e22:	461a      	mov	r2, r3
 8003e24:	2300      	movs	r3, #0
 8003e26:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e34:	461a      	mov	r2, r3
 8003e36:	2300      	movs	r3, #0
 8003e38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	015a      	lsls	r2, r3, #5
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	4413      	add	r3, r2
 8003e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e46:	461a      	mov	r2, r3
 8003e48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e4c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	3301      	adds	r3, #1
 8003e52:	613b      	str	r3, [r7, #16]
 8003e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d3b7      	bcc.n	8003dcc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e6e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003e7c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d105      	bne.n	8003e90 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	f043 0210 	orr.w	r2, r3, #16
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	699a      	ldr	r2, [r3, #24]
 8003e94:	4b0f      	ldr	r3, [pc, #60]	; (8003ed4 <USB_DevInit+0x2b8>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d005      	beq.n	8003eae <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	f043 0208 	orr.w	r2, r3, #8
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003eae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d107      	bne.n	8003ec4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ebc:	f043 0304 	orr.w	r3, r3, #4
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3718      	adds	r7, #24
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ed0:	b004      	add	sp, #16
 8003ed2:	4770      	bx	lr
 8003ed4:	803c3800 	.word	0x803c3800

08003ed8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	3301      	adds	r3, #1
 8003eea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	4a13      	ldr	r2, [pc, #76]	; (8003f3c <USB_FlushTxFifo+0x64>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d901      	bls.n	8003ef8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e01b      	b.n	8003f30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	daf2      	bge.n	8003ee6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003f00:	2300      	movs	r3, #0
 8003f02:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	019b      	lsls	r3, r3, #6
 8003f08:	f043 0220 	orr.w	r2, r3, #32
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	3301      	adds	r3, #1
 8003f14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	4a08      	ldr	r2, [pc, #32]	; (8003f3c <USB_FlushTxFifo+0x64>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d901      	bls.n	8003f22 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e006      	b.n	8003f30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	f003 0320 	and.w	r3, r3, #32
 8003f2a:	2b20      	cmp	r3, #32
 8003f2c:	d0f0      	beq.n	8003f10 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3714      	adds	r7, #20
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr
 8003f3c:	00030d40 	.word	0x00030d40

08003f40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	4a11      	ldr	r2, [pc, #68]	; (8003f9c <USB_FlushRxFifo+0x5c>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d901      	bls.n	8003f5e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e018      	b.n	8003f90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	daf2      	bge.n	8003f4c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003f66:	2300      	movs	r3, #0
 8003f68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2210      	movs	r2, #16
 8003f6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	3301      	adds	r3, #1
 8003f74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	4a08      	ldr	r2, [pc, #32]	; (8003f9c <USB_FlushRxFifo+0x5c>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d901      	bls.n	8003f82 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e006      	b.n	8003f90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	f003 0310 	and.w	r3, r3, #16
 8003f8a:	2b10      	cmp	r3, #16
 8003f8c:	d0f0      	beq.n	8003f70 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3714      	adds	r7, #20
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr
 8003f9c:	00030d40 	.word	0x00030d40

08003fa0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	460b      	mov	r3, r1
 8003faa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	78fb      	ldrb	r3, [r7, #3]
 8003fba:	68f9      	ldr	r1, [r7, #12]
 8003fbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3714      	adds	r7, #20
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b085      	sub	sp, #20
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003fec:	f023 0303 	bic.w	r3, r3, #3
 8003ff0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004000:	f043 0302 	orr.w	r3, r3, #2
 8004004:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3714      	adds	r7, #20
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	695b      	ldr	r3, [r3, #20]
 8004020:	f003 0301 	and.w	r3, r3, #1
}
 8004024:	4618      	mov	r0, r3
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004038:	2300      	movs	r3, #0
 800403a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	3301      	adds	r3, #1
 8004040:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	4a13      	ldr	r2, [pc, #76]	; (8004094 <USB_CoreReset+0x64>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d901      	bls.n	800404e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e01b      	b.n	8004086 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	2b00      	cmp	r3, #0
 8004054:	daf2      	bge.n	800403c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004056:	2300      	movs	r3, #0
 8004058:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	f043 0201 	orr.w	r2, r3, #1
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	3301      	adds	r3, #1
 800406a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4a09      	ldr	r2, [pc, #36]	; (8004094 <USB_CoreReset+0x64>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d901      	bls.n	8004078 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e006      	b.n	8004086 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	2b01      	cmp	r3, #1
 8004082:	d0f0      	beq.n	8004066 <USB_CoreReset+0x36>

  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3714      	adds	r7, #20
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	00030d40 	.word	0x00030d40

08004098 <__libc_init_array>:
 8004098:	b570      	push	{r4, r5, r6, lr}
 800409a:	4d0d      	ldr	r5, [pc, #52]	; (80040d0 <__libc_init_array+0x38>)
 800409c:	4c0d      	ldr	r4, [pc, #52]	; (80040d4 <__libc_init_array+0x3c>)
 800409e:	1b64      	subs	r4, r4, r5
 80040a0:	10a4      	asrs	r4, r4, #2
 80040a2:	2600      	movs	r6, #0
 80040a4:	42a6      	cmp	r6, r4
 80040a6:	d109      	bne.n	80040bc <__libc_init_array+0x24>
 80040a8:	4d0b      	ldr	r5, [pc, #44]	; (80040d8 <__libc_init_array+0x40>)
 80040aa:	4c0c      	ldr	r4, [pc, #48]	; (80040dc <__libc_init_array+0x44>)
 80040ac:	f000 f820 	bl	80040f0 <_init>
 80040b0:	1b64      	subs	r4, r4, r5
 80040b2:	10a4      	asrs	r4, r4, #2
 80040b4:	2600      	movs	r6, #0
 80040b6:	42a6      	cmp	r6, r4
 80040b8:	d105      	bne.n	80040c6 <__libc_init_array+0x2e>
 80040ba:	bd70      	pop	{r4, r5, r6, pc}
 80040bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80040c0:	4798      	blx	r3
 80040c2:	3601      	adds	r6, #1
 80040c4:	e7ee      	b.n	80040a4 <__libc_init_array+0xc>
 80040c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80040ca:	4798      	blx	r3
 80040cc:	3601      	adds	r6, #1
 80040ce:	e7f2      	b.n	80040b6 <__libc_init_array+0x1e>
 80040d0:	08004128 	.word	0x08004128
 80040d4:	08004128 	.word	0x08004128
 80040d8:	08004128 	.word	0x08004128
 80040dc:	0800412c 	.word	0x0800412c

080040e0 <memset>:
 80040e0:	4402      	add	r2, r0
 80040e2:	4603      	mov	r3, r0
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d100      	bne.n	80040ea <memset+0xa>
 80040e8:	4770      	bx	lr
 80040ea:	f803 1b01 	strb.w	r1, [r3], #1
 80040ee:	e7f9      	b.n	80040e4 <memset+0x4>

080040f0 <_init>:
 80040f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040f2:	bf00      	nop
 80040f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040f6:	bc08      	pop	{r3}
 80040f8:	469e      	mov	lr, r3
 80040fa:	4770      	bx	lr

080040fc <_fini>:
 80040fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040fe:	bf00      	nop
 8004100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004102:	bc08      	pop	{r3}
 8004104:	469e      	mov	lr, r3
 8004106:	4770      	bx	lr
