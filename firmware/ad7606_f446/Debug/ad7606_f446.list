
ad7606_f446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000101a8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  08010378  08010378  00020378  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010884  08010884  000302f0  2**0
                  CONTENTS
  4 .ARM          00000008  08010884  08010884  00020884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801088c  0801088c  000302f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801088c  0801088c  0002088c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010890  08010890  00020890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f0  20000000  08010894  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001da4  200002f0  08010b84  000302f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002094  08010b84  00032094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b408  00000000  00000000  00030320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c3b  00000000  00000000  0004b728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016c0  00000000  00000000  0004f368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001538  00000000  00000000  00050a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026411  00000000  00000000  00051f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bf7e  00000000  00000000  00078371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8095  00000000  00000000  000942ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016c384  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007594  00000000  00000000  0016c3d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002f0 	.word	0x200002f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08010360 	.word	0x08010360

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002f4 	.word	0x200002f4
 800020c:	08010360 	.word	0x08010360

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <AD7606_RST>:
	HAL_GPIO_WritePin(AD_OS2_GPIO_Port, AD_OS2_Pin, GPIO_PIN_RESET);
}*/


void AD7606_RST(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(AD_RST_GPIO_Port, AD_RST_Pin, GPIO_PIN_SET);
 800103c:	2201      	movs	r2, #1
 800103e:	2104      	movs	r1, #4
 8001040:	4806      	ldr	r0, [pc, #24]	; (800105c <AD7606_RST+0x24>)
 8001042:	f001 fd6b 	bl	8002b1c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001046:	2001      	movs	r0, #1
 8001048:	f000 fdb8 	bl	8001bbc <HAL_Delay>
	HAL_GPIO_WritePin(AD_RST_GPIO_Port, AD_RST_Pin, GPIO_PIN_RESET);
 800104c:	2200      	movs	r2, #0
 800104e:	2104      	movs	r1, #4
 8001050:	4802      	ldr	r0, [pc, #8]	; (800105c <AD7606_RST+0x24>)
 8001052:	f001 fd63 	bl	8002b1c <HAL_GPIO_WritePin>
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40020800 	.word	0x40020800

08001060 <AD7606_StartReadBytes>:
		__NOP();
	}
	return;
}*/
void AD7606_StartReadBytes(SPI_HandleTypeDef *hspi, int16_t *pDst, uint16_t Length)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	4613      	mov	r3, r2
 800106c:	80fb      	strh	r3, [r7, #6]
	while (HAL_GPIO_ReadPin(AD_BUSY_GPIO_Port, AD_BUSY_Pin) == GPIO_PIN_SET);
 800106e:	bf00      	nop
 8001070:	2110      	movs	r1, #16
 8001072:	4809      	ldr	r0, [pc, #36]	; (8001098 <AD7606_StartReadBytes+0x38>)
 8001074:	f001 fd3a 	bl	8002aec <HAL_GPIO_ReadPin>
 8001078:	4603      	mov	r3, r0
 800107a:	2b01      	cmp	r3, #1
 800107c:	d0f8      	beq.n	8001070 <AD7606_StartReadBytes+0x10>
	HAL_Delay(0.000015);
 800107e:	2000      	movs	r0, #0
 8001080:	f000 fd9c 	bl	8001bbc <HAL_Delay>
//	HAL_SPI_Receive_DMA(hspi, (uint8_t*)pDst, Length);

	HAL_SPI_Receive(hspi, (uint8_t*)pDst, Length, 10);
 8001084:	88fa      	ldrh	r2, [r7, #6]
 8001086:	230a      	movs	r3, #10
 8001088:	68b9      	ldr	r1, [r7, #8]
 800108a:	68f8      	ldr	r0, [r7, #12]
 800108c:	f004 f9eb 	bl	8005466 <HAL_SPI_Receive>
	//HAL_SPI_Receive(hspi, pDst, Length, 10);
//	HAL_SPI_TransmitReceive_DMA(hspi, &dummy, (uint8_t*)pDst, Length);
	return;
 8001090:	bf00      	nop

}
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40020800 	.word	0x40020800

0800109c <AD7606_ConvertToVoltage>:

void AD7606_ConvertToVoltage (uint16_t Length, int16_t *pSrc, float *pDst)
{
 800109c:	b480      	push	{r7}
 800109e:	b087      	sub	sp, #28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
 80010a8:	81fb      	strh	r3, [r7, #14]
	uint16_t i;
	for (i = 0; i < Length; i++)
 80010aa:	2300      	movs	r3, #0
 80010ac:	82fb      	strh	r3, [r7, #22]
 80010ae:	e01a      	b.n	80010e6 <AD7606_ConvertToVoltage+0x4a>
	{
		//pDst[i] = ((float)pSrc[i] * 5.5 ) / 32767.0;
		//pDst[i] = ((float)pSrc[i] * 10 * (2.5/4.5)) / 32768.0;
		//pDst[i] = (pSrc[i] * 0.00016954);
		pDst[i] = ((float)pSrc[i] * 10) / 32768.0;
 80010b0:	8afb      	ldrh	r3, [r7, #22]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	68ba      	ldr	r2, [r7, #8]
 80010b6:	4413      	add	r3, r2
 80010b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010bc:	ee07 3a90 	vmov	s15, r3
 80010c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010c4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80010c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010cc:	8afb      	ldrh	r3, [r7, #22]
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	4413      	add	r3, r2
 80010d4:	eddf 6a09 	vldr	s13, [pc, #36]	; 80010fc <AD7606_ConvertToVoltage+0x60>
 80010d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010dc:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < Length; i++)
 80010e0:	8afb      	ldrh	r3, [r7, #22]
 80010e2:	3301      	adds	r3, #1
 80010e4:	82fb      	strh	r3, [r7, #22]
 80010e6:	8afa      	ldrh	r2, [r7, #22]
 80010e8:	89fb      	ldrh	r3, [r7, #14]
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d3e0      	bcc.n	80010b0 <AD7606_ConvertToVoltage+0x14>
	}
	return;
 80010ee:	bf00      	nop
}
 80010f0:	371c      	adds	r7, #28
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	47000000 	.word	0x47000000

08001100 <AD7606_CO_START>:


void AD7606_CO_START(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); //Start AD7606 Conversion
 8001104:	2104      	movs	r1, #4
 8001106:	4802      	ldr	r0, [pc, #8]	; (8001110 <AD7606_CO_START+0x10>)
 8001108:	f004 fe38 	bl	8005d7c <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}
 8001110:	200003c4 	.word	0x200003c4

08001114 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001118:	f000 fcde 	bl	8001ad8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800111c:	f000 f828 	bl	8001170 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001120:	f000 f98c 	bl	800143c <MX_GPIO_Init>
  MX_DMA_Init();
 8001124:	f000 f96a 	bl	80013fc <MX_DMA_Init>
  MX_TIM2_Init();
 8001128:	f000 f8c8 	bl	80012bc <MX_TIM2_Init>
  MX_SPI1_Init();
 800112c:	f000 f88e 	bl	800124c <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8001130:	f009 ff0a 	bl	800af48 <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 8001134:	f000 f938 	bl	80013a8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //follow spi hal procedure
  HAL_SPI_DeInit(&hspi1);
 8001138:	480a      	ldr	r0, [pc, #40]	; (8001164 <main+0x50>)
 800113a:	f004 f96c 	bl	8005416 <HAL_SPI_DeInit>
  HAL_SPI_Init(&hspi1);
 800113e:	4809      	ldr	r0, [pc, #36]	; (8001164 <main+0x50>)
 8001140:	f004 f8e0 	bl	8005304 <HAL_SPI_Init>

  //AD7606_OS_SET();
  AD7606_RST();
 8001144:	f7ff ff78 	bl	8001038 <AD7606_RST>
  AD7606_CO_START();
 8001148:	f7ff ffda 	bl	8001100 <AD7606_CO_START>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  AD7606_StartReadBytes(&hspi1, bufferi, 8);
 800114c:	2208      	movs	r2, #8
 800114e:	4906      	ldr	r1, [pc, #24]	; (8001168 <main+0x54>)
 8001150:	4804      	ldr	r0, [pc, #16]	; (8001164 <main+0x50>)
 8001152:	f7ff ff85 	bl	8001060 <AD7606_StartReadBytes>

	  AD7606_ConvertToVoltage(8, bufferi, bufferf);
 8001156:	4a05      	ldr	r2, [pc, #20]	; (800116c <main+0x58>)
 8001158:	4903      	ldr	r1, [pc, #12]	; (8001168 <main+0x54>)
 800115a:	2008      	movs	r0, #8
 800115c:	f7ff ff9e 	bl	800109c <AD7606_ConvertToVoltage>
	  AD7606_StartReadBytes(&hspi1, bufferi, 8);
 8001160:	e7f4      	b.n	800114c <main+0x38>
 8001162:	bf00      	nop
 8001164:	2000030c 	.word	0x2000030c
 8001168:	20000000 	.word	0x20000000
 800116c:	20000450 	.word	0x20000450

08001170 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b094      	sub	sp, #80	; 0x50
 8001174:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001176:	f107 031c 	add.w	r3, r7, #28
 800117a:	2234      	movs	r2, #52	; 0x34
 800117c:	2100      	movs	r1, #0
 800117e:	4618      	mov	r0, r3
 8001180:	f00a fc76 	bl	800ba70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001184:	f107 0308 	add.w	r3, r7, #8
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001194:	2300      	movs	r3, #0
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	4b2a      	ldr	r3, [pc, #168]	; (8001244 <SystemClock_Config+0xd4>)
 800119a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119c:	4a29      	ldr	r2, [pc, #164]	; (8001244 <SystemClock_Config+0xd4>)
 800119e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a2:	6413      	str	r3, [r2, #64]	; 0x40
 80011a4:	4b27      	ldr	r3, [pc, #156]	; (8001244 <SystemClock_Config+0xd4>)
 80011a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011b0:	2300      	movs	r3, #0
 80011b2:	603b      	str	r3, [r7, #0]
 80011b4:	4b24      	ldr	r3, [pc, #144]	; (8001248 <SystemClock_Config+0xd8>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011bc:	4a22      	ldr	r2, [pc, #136]	; (8001248 <SystemClock_Config+0xd8>)
 80011be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c2:	6013      	str	r3, [r2, #0]
 80011c4:	4b20      	ldr	r3, [pc, #128]	; (8001248 <SystemClock_Config+0xd8>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011cc:	603b      	str	r3, [r7, #0]
 80011ce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011d0:	2301      	movs	r3, #1
 80011d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011da:	2302      	movs	r3, #2
 80011dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011e4:	2308      	movs	r3, #8
 80011e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011e8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80011ec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011ee:	2304      	movs	r3, #4
 80011f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011f2:	2307      	movs	r3, #7
 80011f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011f6:	2302      	movs	r3, #2
 80011f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011fa:	f107 031c 	add.w	r3, r7, #28
 80011fe:	4618      	mov	r0, r3
 8001200:	f003 fde2 	bl	8004dc8 <HAL_RCC_OscConfig>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800120a:	f000 f997 	bl	800153c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800120e:	230f      	movs	r3, #15
 8001210:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001212:	2302      	movs	r3, #2
 8001214:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800121a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800121e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001220:	2300      	movs	r3, #0
 8001222:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001224:	f107 0308 	add.w	r3, r7, #8
 8001228:	2102      	movs	r1, #2
 800122a:	4618      	mov	r0, r3
 800122c:	f002 ff58 	bl	80040e0 <HAL_RCC_ClockConfig>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001236:	f000 f981 	bl	800153c <Error_Handler>
  }
}
 800123a:	bf00      	nop
 800123c:	3750      	adds	r7, #80	; 0x50
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40023800 	.word	0x40023800
 8001248:	40007000 	.word	0x40007000

0800124c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001250:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <MX_SPI1_Init+0x68>)
 8001252:	4a19      	ldr	r2, [pc, #100]	; (80012b8 <MX_SPI1_Init+0x6c>)
 8001254:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001256:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <MX_SPI1_Init+0x68>)
 8001258:	f44f 7282 	mov.w	r2, #260	; 0x104
 800125c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800125e:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <MX_SPI1_Init+0x68>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001264:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <MX_SPI1_Init+0x68>)
 8001266:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800126a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800126c:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <MX_SPI1_Init+0x68>)
 800126e:	2202      	movs	r2, #2
 8001270:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001272:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <MX_SPI1_Init+0x68>)
 8001274:	2201      	movs	r2, #1
 8001276:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001278:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <MX_SPI1_Init+0x68>)
 800127a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800127e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <MX_SPI1_Init+0x68>)
 8001282:	2208      	movs	r2, #8
 8001284:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001286:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <MX_SPI1_Init+0x68>)
 8001288:	2200      	movs	r2, #0
 800128a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800128c:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <MX_SPI1_Init+0x68>)
 800128e:	2200      	movs	r2, #0
 8001290:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001292:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <MX_SPI1_Init+0x68>)
 8001294:	2200      	movs	r2, #0
 8001296:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <MX_SPI1_Init+0x68>)
 800129a:	220a      	movs	r2, #10
 800129c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800129e:	4805      	ldr	r0, [pc, #20]	; (80012b4 <MX_SPI1_Init+0x68>)
 80012a0:	f004 f830 	bl	8005304 <HAL_SPI_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80012aa:	f000 f947 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	2000030c 	.word	0x2000030c
 80012b8:	40013000 	.word	0x40013000

080012bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08e      	sub	sp, #56	; 0x38
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d0:	f107 0320 	add.w	r3, r7, #32
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
 80012e8:	615a      	str	r2, [r3, #20]
 80012ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */


  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012ec:	4b2d      	ldr	r3, [pc, #180]	; (80013a4 <MX_TIM2_Init+0xe8>)
 80012ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840;
 80012f4:	4b2b      	ldr	r3, [pc, #172]	; (80013a4 <MX_TIM2_Init+0xe8>)
 80012f6:	f44f 7252 	mov.w	r2, #840	; 0x348
 80012fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fc:	4b29      	ldr	r3, [pc, #164]	; (80013a4 <MX_TIM2_Init+0xe8>)
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8001302:	4b28      	ldr	r3, [pc, #160]	; (80013a4 <MX_TIM2_Init+0xe8>)
 8001304:	2263      	movs	r2, #99	; 0x63
 8001306:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001308:	4b26      	ldr	r3, [pc, #152]	; (80013a4 <MX_TIM2_Init+0xe8>)
 800130a:	2200      	movs	r2, #0
 800130c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800130e:	4b25      	ldr	r3, [pc, #148]	; (80013a4 <MX_TIM2_Init+0xe8>)
 8001310:	2200      	movs	r2, #0
 8001312:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001314:	4823      	ldr	r0, [pc, #140]	; (80013a4 <MX_TIM2_Init+0xe8>)
 8001316:	f004 fc89 	bl	8005c2c <HAL_TIM_Base_Init>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001320:	f000 f90c 	bl	800153c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001324:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001328:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800132a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800132e:	4619      	mov	r1, r3
 8001330:	481c      	ldr	r0, [pc, #112]	; (80013a4 <MX_TIM2_Init+0xe8>)
 8001332:	f004 fead 	bl	8006090 <HAL_TIM_ConfigClockSource>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800133c:	f000 f8fe 	bl	800153c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001340:	4818      	ldr	r0, [pc, #96]	; (80013a4 <MX_TIM2_Init+0xe8>)
 8001342:	f004 fcc2 	bl	8005cca <HAL_TIM_PWM_Init>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800134c:	f000 f8f6 	bl	800153c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001350:	2300      	movs	r3, #0
 8001352:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001354:	2300      	movs	r3, #0
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001358:	f107 0320 	add.w	r3, r7, #32
 800135c:	4619      	mov	r1, r3
 800135e:	4811      	ldr	r0, [pc, #68]	; (80013a4 <MX_TIM2_Init+0xe8>)
 8001360:	f005 fa6e 	bl	8006840 <HAL_TIMEx_MasterConfigSynchronization>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800136a:	f000 f8e7 	bl	800153c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800136e:	2360      	movs	r3, #96	; 0x60
 8001370:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 97;
 8001372:	2361      	movs	r3, #97	; 0x61
 8001374:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	2204      	movs	r2, #4
 8001382:	4619      	mov	r1, r3
 8001384:	4807      	ldr	r0, [pc, #28]	; (80013a4 <MX_TIM2_Init+0xe8>)
 8001386:	f004 fdc1 	bl	8005f0c <HAL_TIM_PWM_ConfigChannel>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001390:	f000 f8d4 	bl	800153c <Error_Handler>
  /* USER CODE BEGIN TIM2_Init 2 */



  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001394:	4803      	ldr	r0, [pc, #12]	; (80013a4 <MX_TIM2_Init+0xe8>)
 8001396:	f000 f9cd 	bl	8001734 <HAL_TIM_MspPostInit>

}
 800139a:	bf00      	nop
 800139c:	3738      	adds	r7, #56	; 0x38
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	200003c4 	.word	0x200003c4

080013a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013ac:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013ae:	4a12      	ldr	r2, [pc, #72]	; (80013f8 <MX_USART2_UART_Init+0x50>)
 80013b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013b2:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013c6:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013cc:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013ce:	220c      	movs	r2, #12
 80013d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d2:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013de:	4805      	ldr	r0, [pc, #20]	; (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013e0:	f005 faaa 	bl	8006938 <HAL_UART_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013ea:	f000 f8a7 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	2000040c 	.word	0x2000040c
 80013f8:	40004400 	.word	0x40004400

080013fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <MX_DMA_Init+0x3c>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a0b      	ldr	r2, [pc, #44]	; (8001438 <MX_DMA_Init+0x3c>)
 800140c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <MX_DMA_Init+0x3c>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800141e:	2200      	movs	r2, #0
 8001420:	2100      	movs	r1, #0
 8001422:	2038      	movs	r0, #56	; 0x38
 8001424:	f000 fcc9 	bl	8001dba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001428:	2038      	movs	r0, #56	; 0x38
 800142a:	f000 fce2 	bl	8001df2 <HAL_NVIC_EnableIRQ>

}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40023800 	.word	0x40023800

0800143c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08a      	sub	sp, #40	; 0x28
 8001440:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001442:	f107 0314 	add.w	r3, r7, #20
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]
 8001450:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]
 8001456:	4b36      	ldr	r3, [pc, #216]	; (8001530 <MX_GPIO_Init+0xf4>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a35      	ldr	r2, [pc, #212]	; (8001530 <MX_GPIO_Init+0xf4>)
 800145c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b33      	ldr	r3, [pc, #204]	; (8001530 <MX_GPIO_Init+0xf4>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	4b2f      	ldr	r3, [pc, #188]	; (8001530 <MX_GPIO_Init+0xf4>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a2e      	ldr	r2, [pc, #184]	; (8001530 <MX_GPIO_Init+0xf4>)
 8001478:	f043 0304 	orr.w	r3, r3, #4
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b2c      	ldr	r3, [pc, #176]	; (8001530 <MX_GPIO_Init+0xf4>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f003 0304 	and.w	r3, r3, #4
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	60bb      	str	r3, [r7, #8]
 800148e:	4b28      	ldr	r3, [pc, #160]	; (8001530 <MX_GPIO_Init+0xf4>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a27      	ldr	r2, [pc, #156]	; (8001530 <MX_GPIO_Init+0xf4>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b25      	ldr	r3, [pc, #148]	; (8001530 <MX_GPIO_Init+0xf4>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	607b      	str	r3, [r7, #4]
 80014aa:	4b21      	ldr	r3, [pc, #132]	; (8001530 <MX_GPIO_Init+0xf4>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	4a20      	ldr	r2, [pc, #128]	; (8001530 <MX_GPIO_Init+0xf4>)
 80014b0:	f043 0302 	orr.w	r3, r3, #2
 80014b4:	6313      	str	r3, [r2, #48]	; 0x30
 80014b6:	4b1e      	ldr	r3, [pc, #120]	; (8001530 <MX_GPIO_Init+0xf4>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD_RST_Pin|AD_OS2_Pin, GPIO_PIN_RESET);
 80014c2:	2200      	movs	r2, #0
 80014c4:	210c      	movs	r1, #12
 80014c6:	481b      	ldr	r0, [pc, #108]	; (8001534 <MX_GPIO_Init+0xf8>)
 80014c8:	f001 fb28 	bl	8002b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AD_OS1_Pin|AD_OS0_Pin, GPIO_PIN_RESET);
 80014cc:	2200      	movs	r2, #0
 80014ce:	2103      	movs	r1, #3
 80014d0:	4819      	ldr	r0, [pc, #100]	; (8001538 <MX_GPIO_Init+0xfc>)
 80014d2:	f001 fb23 	bl	8002b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : AD_RST_Pin AD_OS2_Pin */
  GPIO_InitStruct.Pin = AD_RST_Pin|AD_OS2_Pin;
 80014d6:	230c      	movs	r3, #12
 80014d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014da:	2301      	movs	r3, #1
 80014dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e2:	2300      	movs	r3, #0
 80014e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	4619      	mov	r1, r3
 80014ec:	4811      	ldr	r0, [pc, #68]	; (8001534 <MX_GPIO_Init+0xf8>)
 80014ee:	f001 f875 	bl	80025dc <HAL_GPIO_Init>

  /*Configure GPIO pins : AD_OS1_Pin AD_OS0_Pin */
  GPIO_InitStruct.Pin = AD_OS1_Pin|AD_OS0_Pin;
 80014f2:	2303      	movs	r3, #3
 80014f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f6:	2301      	movs	r3, #1
 80014f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	2300      	movs	r3, #0
 8001500:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001502:	f107 0314 	add.w	r3, r7, #20
 8001506:	4619      	mov	r1, r3
 8001508:	480b      	ldr	r0, [pc, #44]	; (8001538 <MX_GPIO_Init+0xfc>)
 800150a:	f001 f867 	bl	80025dc <HAL_GPIO_Init>

  /*Configure GPIO pins : AD_BUSY_Pin AD_FRST_Pin */
  GPIO_InitStruct.Pin = AD_BUSY_Pin|AD_FRST_Pin;
 800150e:	2330      	movs	r3, #48	; 0x30
 8001510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001512:	2300      	movs	r3, #0
 8001514:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800151a:	f107 0314 	add.w	r3, r7, #20
 800151e:	4619      	mov	r1, r3
 8001520:	4804      	ldr	r0, [pc, #16]	; (8001534 <MX_GPIO_Init+0xf8>)
 8001522:	f001 f85b 	bl	80025dc <HAL_GPIO_Init>

}
 8001526:	bf00      	nop
 8001528:	3728      	adds	r7, #40	; 0x28
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40023800 	.word	0x40023800
 8001534:	40020800 	.word	0x40020800
 8001538:	40020000 	.word	0x40020000

0800153c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001540:	b672      	cpsid	i
}
 8001542:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001544:	e7fe      	b.n	8001544 <Error_Handler+0x8>
	...

08001548 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	607b      	str	r3, [r7, #4]
 8001552:	4b10      	ldr	r3, [pc, #64]	; (8001594 <HAL_MspInit+0x4c>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001556:	4a0f      	ldr	r2, [pc, #60]	; (8001594 <HAL_MspInit+0x4c>)
 8001558:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800155c:	6453      	str	r3, [r2, #68]	; 0x44
 800155e:	4b0d      	ldr	r3, [pc, #52]	; (8001594 <HAL_MspInit+0x4c>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001566:	607b      	str	r3, [r7, #4]
 8001568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	603b      	str	r3, [r7, #0]
 800156e:	4b09      	ldr	r3, [pc, #36]	; (8001594 <HAL_MspInit+0x4c>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	4a08      	ldr	r2, [pc, #32]	; (8001594 <HAL_MspInit+0x4c>)
 8001574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001578:	6413      	str	r3, [r2, #64]	; 0x40
 800157a:	4b06      	ldr	r3, [pc, #24]	; (8001594 <HAL_MspInit+0x4c>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001582:	603b      	str	r3, [r7, #0]
 8001584:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	40023800 	.word	0x40023800

08001598 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	; 0x28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a39      	ldr	r2, [pc, #228]	; (800169c <HAL_SPI_MspInit+0x104>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d16b      	bne.n	8001692 <HAL_SPI_MspInit+0xfa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	613b      	str	r3, [r7, #16]
 80015be:	4b38      	ldr	r3, [pc, #224]	; (80016a0 <HAL_SPI_MspInit+0x108>)
 80015c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c2:	4a37      	ldr	r2, [pc, #220]	; (80016a0 <HAL_SPI_MspInit+0x108>)
 80015c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015c8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ca:	4b35      	ldr	r3, [pc, #212]	; (80016a0 <HAL_SPI_MspInit+0x108>)
 80015cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	4b31      	ldr	r3, [pc, #196]	; (80016a0 <HAL_SPI_MspInit+0x108>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	4a30      	ldr	r2, [pc, #192]	; (80016a0 <HAL_SPI_MspInit+0x108>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	6313      	str	r3, [r2, #48]	; 0x30
 80015e6:	4b2e      	ldr	r3, [pc, #184]	; (80016a0 <HAL_SPI_MspInit+0x108>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = AD_CS_Pin|AD_SCK_Pin|AD_DOU_A_Pin;
 80015f2:	2370      	movs	r3, #112	; 0x70
 80015f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f6:	2302      	movs	r3, #2
 80015f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80015fe:	2301      	movs	r3, #1
 8001600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001602:	2305      	movs	r3, #5
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	4619      	mov	r1, r3
 800160c:	4825      	ldr	r0, [pc, #148]	; (80016a4 <HAL_SPI_MspInit+0x10c>)
 800160e:	f000 ffe5 	bl	80025dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001612:	2380      	movs	r3, #128	; 0x80
 8001614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001616:	2302      	movs	r3, #2
 8001618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161e:	2303      	movs	r3, #3
 8001620:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001622:	2305      	movs	r3, #5
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001626:	f107 0314 	add.w	r3, r7, #20
 800162a:	4619      	mov	r1, r3
 800162c:	481d      	ldr	r0, [pc, #116]	; (80016a4 <HAL_SPI_MspInit+0x10c>)
 800162e:	f000 ffd5 	bl	80025dc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001632:	4b1d      	ldr	r3, [pc, #116]	; (80016a8 <HAL_SPI_MspInit+0x110>)
 8001634:	4a1d      	ldr	r2, [pc, #116]	; (80016ac <HAL_SPI_MspInit+0x114>)
 8001636:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001638:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <HAL_SPI_MspInit+0x110>)
 800163a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800163e:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001640:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <HAL_SPI_MspInit+0x110>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001646:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <HAL_SPI_MspInit+0x110>)
 8001648:	2200      	movs	r2, #0
 800164a:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800164c:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <HAL_SPI_MspInit+0x110>)
 800164e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001652:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001654:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <HAL_SPI_MspInit+0x110>)
 8001656:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800165a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800165c:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <HAL_SPI_MspInit+0x110>)
 800165e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001662:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001664:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <HAL_SPI_MspInit+0x110>)
 8001666:	2200      	movs	r2, #0
 8001668:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800166a:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <HAL_SPI_MspInit+0x110>)
 800166c:	2200      	movs	r2, #0
 800166e:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001670:	4b0d      	ldr	r3, [pc, #52]	; (80016a8 <HAL_SPI_MspInit+0x110>)
 8001672:	2200      	movs	r2, #0
 8001674:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001676:	480c      	ldr	r0, [pc, #48]	; (80016a8 <HAL_SPI_MspInit+0x110>)
 8001678:	f000 fbd6 	bl	8001e28 <HAL_DMA_Init>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <HAL_SPI_MspInit+0xee>
    {
      Error_Handler();
 8001682:	f7ff ff5b 	bl	800153c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a07      	ldr	r2, [pc, #28]	; (80016a8 <HAL_SPI_MspInit+0x110>)
 800168a:	64da      	str	r2, [r3, #76]	; 0x4c
 800168c:	4a06      	ldr	r2, [pc, #24]	; (80016a8 <HAL_SPI_MspInit+0x110>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001692:	bf00      	nop
 8001694:	3728      	adds	r7, #40	; 0x28
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40013000 	.word	0x40013000
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40020000 	.word	0x40020000
 80016a8:	20000364 	.word	0x20000364
 80016ac:	40026410 	.word	0x40026410

080016b0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a0a      	ldr	r2, [pc, #40]	; (80016e8 <HAL_SPI_MspDeInit+0x38>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d10e      	bne.n	80016e0 <HAL_SPI_MspDeInit+0x30>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 80016c2:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <HAL_SPI_MspDeInit+0x3c>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	4a09      	ldr	r2, [pc, #36]	; (80016ec <HAL_SPI_MspDeInit+0x3c>)
 80016c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016cc:	6453      	str	r3, [r2, #68]	; 0x44
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, AD_CS_Pin|AD_SCK_Pin|AD_DOU_A_Pin|GPIO_PIN_7);
 80016ce:	21f0      	movs	r1, #240	; 0xf0
 80016d0:	4807      	ldr	r0, [pc, #28]	; (80016f0 <HAL_SPI_MspDeInit+0x40>)
 80016d2:	f001 f917 	bl	8002904 <HAL_GPIO_DeInit>

    /* SPI1 DMA DeInit */
    HAL_DMA_DeInit(hspi->hdmarx);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016da:	4618      	mov	r0, r3
 80016dc:	f000 fc52 	bl	8001f84 <HAL_DMA_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 80016e0:	bf00      	nop
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40013000 	.word	0x40013000
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40020000 	.word	0x40020000

080016f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001704:	d10d      	bne.n	8001722 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	4b09      	ldr	r3, [pc, #36]	; (8001730 <HAL_TIM_Base_MspInit+0x3c>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	4a08      	ldr	r2, [pc, #32]	; (8001730 <HAL_TIM_Base_MspInit+0x3c>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	6413      	str	r3, [r2, #64]	; 0x40
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_TIM_Base_MspInit+0x3c>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001722:	bf00      	nop
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	40023800 	.word	0x40023800

08001734 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b088      	sub	sp, #32
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173c:	f107 030c 	add.w	r3, r7, #12
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001754:	d11d      	bne.n	8001792 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	4b10      	ldr	r3, [pc, #64]	; (800179c <HAL_TIM_MspPostInit+0x68>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	4a0f      	ldr	r2, [pc, #60]	; (800179c <HAL_TIM_MspPostInit+0x68>)
 8001760:	f043 0302 	orr.w	r3, r3, #2
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
 8001766:	4b0d      	ldr	r3, [pc, #52]	; (800179c <HAL_TIM_MspPostInit+0x68>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = AD_CO_A_Pin;
 8001772:	2308      	movs	r3, #8
 8001774:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001776:	2302      	movs	r3, #2
 8001778:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800177e:	2301      	movs	r3, #1
 8001780:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001782:	2301      	movs	r3, #1
 8001784:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AD_CO_A_GPIO_Port, &GPIO_InitStruct);
 8001786:	f107 030c 	add.w	r3, r7, #12
 800178a:	4619      	mov	r1, r3
 800178c:	4804      	ldr	r0, [pc, #16]	; (80017a0 <HAL_TIM_MspPostInit+0x6c>)
 800178e:	f000 ff25 	bl	80025dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001792:	bf00      	nop
 8001794:	3720      	adds	r7, #32
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40023800 	.word	0x40023800
 80017a0:	40020400 	.word	0x40020400

080017a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08a      	sub	sp, #40	; 0x28
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a1d      	ldr	r2, [pc, #116]	; (8001838 <HAL_UART_MspInit+0x94>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d133      	bne.n	800182e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	613b      	str	r3, [r7, #16]
 80017ca:	4b1c      	ldr	r3, [pc, #112]	; (800183c <HAL_UART_MspInit+0x98>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	4a1b      	ldr	r2, [pc, #108]	; (800183c <HAL_UART_MspInit+0x98>)
 80017d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d4:	6413      	str	r3, [r2, #64]	; 0x40
 80017d6:	4b19      	ldr	r3, [pc, #100]	; (800183c <HAL_UART_MspInit+0x98>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017de:	613b      	str	r3, [r7, #16]
 80017e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <HAL_UART_MspInit+0x98>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a14      	ldr	r2, [pc, #80]	; (800183c <HAL_UART_MspInit+0x98>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b12      	ldr	r3, [pc, #72]	; (800183c <HAL_UART_MspInit+0x98>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017fe:	230c      	movs	r3, #12
 8001800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001802:	2302      	movs	r3, #2
 8001804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180a:	2303      	movs	r3, #3
 800180c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800180e:	2307      	movs	r3, #7
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001812:	f107 0314 	add.w	r3, r7, #20
 8001816:	4619      	mov	r1, r3
 8001818:	4809      	ldr	r0, [pc, #36]	; (8001840 <HAL_UART_MspInit+0x9c>)
 800181a:	f000 fedf 	bl	80025dc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800181e:	2200      	movs	r2, #0
 8001820:	2100      	movs	r1, #0
 8001822:	2026      	movs	r0, #38	; 0x26
 8001824:	f000 fac9 	bl	8001dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001828:	2026      	movs	r0, #38	; 0x26
 800182a:	f000 fae2 	bl	8001df2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800182e:	bf00      	nop
 8001830:	3728      	adds	r7, #40	; 0x28
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40004400 	.word	0x40004400
 800183c:	40023800 	.word	0x40023800
 8001840:	40020000 	.word	0x40020000

08001844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001848:	e7fe      	b.n	8001848 <NMI_Handler+0x4>

0800184a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800184e:	e7fe      	b.n	800184e <HardFault_Handler+0x4>

08001850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001854:	e7fe      	b.n	8001854 <MemManage_Handler+0x4>

08001856 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800185a:	e7fe      	b.n	800185a <BusFault_Handler+0x4>

0800185c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001860:	e7fe      	b.n	8001860 <UsageFault_Handler+0x4>

08001862 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001890:	f000 f974 	bl	8001b7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}

08001898 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800189c:	4802      	ldr	r0, [pc, #8]	; (80018a8 <USART2_IRQHandler+0x10>)
 800189e:	f005 f899 	bl	80069d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	2000040c 	.word	0x2000040c

080018ac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80018b0:	4802      	ldr	r0, [pc, #8]	; (80018bc <DMA2_Stream0_IRQHandler+0x10>)
 80018b2:	f000 fc57 	bl	8002164 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000364 	.word	0x20000364

080018c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80018c4:	4802      	ldr	r0, [pc, #8]	; (80018d0 <OTG_FS_IRQHandler+0x10>)
 80018c6:	f001 fa99 	bl	8002dfc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20001958 	.word	0x20001958

080018d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
	return 1;
 80018d8:	2301      	movs	r3, #1
}
 80018da:	4618      	mov	r0, r3
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <_kill>:

int _kill(int pid, int sig)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018ee:	f00a f895 	bl	800ba1c <__errno>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2216      	movs	r2, #22
 80018f6:	601a      	str	r2, [r3, #0]
	return -1;
 80018f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <_exit>:

void _exit (int status)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800190c:	f04f 31ff 	mov.w	r1, #4294967295
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff ffe7 	bl	80018e4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001916:	e7fe      	b.n	8001916 <_exit+0x12>

08001918 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	e00a      	b.n	8001940 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800192a:	f3af 8000 	nop.w
 800192e:	4601      	mov	r1, r0
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	1c5a      	adds	r2, r3, #1
 8001934:	60ba      	str	r2, [r7, #8]
 8001936:	b2ca      	uxtb	r2, r1
 8001938:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	3301      	adds	r3, #1
 800193e:	617b      	str	r3, [r7, #20]
 8001940:	697a      	ldr	r2, [r7, #20]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	429a      	cmp	r2, r3
 8001946:	dbf0      	blt.n	800192a <_read+0x12>
	}

return len;
 8001948:	687b      	ldr	r3, [r7, #4]
}
 800194a:	4618      	mov	r0, r3
 800194c:	3718      	adds	r7, #24
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b086      	sub	sp, #24
 8001956:	af00      	add	r7, sp, #0
 8001958:	60f8      	str	r0, [r7, #12]
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800195e:	2300      	movs	r3, #0
 8001960:	617b      	str	r3, [r7, #20]
 8001962:	e009      	b.n	8001978 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	1c5a      	adds	r2, r3, #1
 8001968:	60ba      	str	r2, [r7, #8]
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	3301      	adds	r3, #1
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	429a      	cmp	r2, r3
 800197e:	dbf1      	blt.n	8001964 <_write+0x12>
	}
	return len;
 8001980:	687b      	ldr	r3, [r7, #4]
}
 8001982:	4618      	mov	r0, r3
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <_close>:

int _close(int file)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
	return -1;
 8001992:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001996:	4618      	mov	r0, r3
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
 80019aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019b2:	605a      	str	r2, [r3, #4]
	return 0;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <_isatty>:

int _isatty(int file)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
	return 1;
 80019ca:	2301      	movs	r3, #1
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
	return 0;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3714      	adds	r7, #20
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
	...

080019f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019fc:	4a14      	ldr	r2, [pc, #80]	; (8001a50 <_sbrk+0x5c>)
 80019fe:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <_sbrk+0x60>)
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a08:	4b13      	ldr	r3, [pc, #76]	; (8001a58 <_sbrk+0x64>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d102      	bne.n	8001a16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a10:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <_sbrk+0x64>)
 8001a12:	4a12      	ldr	r2, [pc, #72]	; (8001a5c <_sbrk+0x68>)
 8001a14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a16:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <_sbrk+0x64>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d207      	bcs.n	8001a34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a24:	f009 fffa 	bl	800ba1c <__errno>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	220c      	movs	r2, #12
 8001a2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a32:	e009      	b.n	8001a48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a34:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <_sbrk+0x64>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a3a:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <_sbrk+0x64>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4413      	add	r3, r2
 8001a42:	4a05      	ldr	r2, [pc, #20]	; (8001a58 <_sbrk+0x64>)
 8001a44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a46:	68fb      	ldr	r3, [r7, #12]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3718      	adds	r7, #24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20020000 	.word	0x20020000
 8001a54:	00000400 	.word	0x00000400
 8001a58:	20000470 	.word	0x20000470
 8001a5c:	20002098 	.word	0x20002098

08001a60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a64:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <SystemInit+0x20>)
 8001a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a6a:	4a05      	ldr	r2, [pc, #20]	; (8001a80 <SystemInit+0x20>)
 8001a6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001abc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a88:	480d      	ldr	r0, [pc, #52]	; (8001ac0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a8a:	490e      	ldr	r1, [pc, #56]	; (8001ac4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a8c:	4a0e      	ldr	r2, [pc, #56]	; (8001ac8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a90:	e002      	b.n	8001a98 <LoopCopyDataInit>

08001a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a96:	3304      	adds	r3, #4

08001a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a9c:	d3f9      	bcc.n	8001a92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a9e:	4a0b      	ldr	r2, [pc, #44]	; (8001acc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001aa0:	4c0b      	ldr	r4, [pc, #44]	; (8001ad0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa4:	e001      	b.n	8001aaa <LoopFillZerobss>

08001aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aa8:	3204      	adds	r2, #4

08001aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aac:	d3fb      	bcc.n	8001aa6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001aae:	f7ff ffd7 	bl	8001a60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ab2:	f009 ffb9 	bl	800ba28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ab6:	f7ff fb2d 	bl	8001114 <main>
  bx  lr    
 8001aba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001abc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ac4:	200002f0 	.word	0x200002f0
  ldr r2, =_sidata
 8001ac8:	08010894 	.word	0x08010894
  ldr r2, =_sbss
 8001acc:	200002f0 	.word	0x200002f0
  ldr r4, =_ebss
 8001ad0:	20002094 	.word	0x20002094

08001ad4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ad4:	e7fe      	b.n	8001ad4 <ADC_IRQHandler>
	...

08001ad8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001adc:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <HAL_Init+0x40>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a0d      	ldr	r2, [pc, #52]	; (8001b18 <HAL_Init+0x40>)
 8001ae2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ae6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ae8:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <HAL_Init+0x40>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a0a      	ldr	r2, [pc, #40]	; (8001b18 <HAL_Init+0x40>)
 8001aee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001af2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001af4:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <HAL_Init+0x40>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a07      	ldr	r2, [pc, #28]	; (8001b18 <HAL_Init+0x40>)
 8001afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001afe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b00:	2003      	movs	r0, #3
 8001b02:	f000 f94f 	bl	8001da4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b06:	200f      	movs	r0, #15
 8001b08:	f000 f808 	bl	8001b1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b0c:	f7ff fd1c 	bl	8001548 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40023c00 	.word	0x40023c00

08001b1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b24:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <HAL_InitTick+0x54>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <HAL_InitTick+0x58>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 f967 	bl	8001e0e <HAL_SYSTICK_Config>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e00e      	b.n	8001b68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2b0f      	cmp	r3, #15
 8001b4e:	d80a      	bhi.n	8001b66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b50:	2200      	movs	r2, #0
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	f04f 30ff 	mov.w	r0, #4294967295
 8001b58:	f000 f92f 	bl	8001dba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b5c:	4a06      	ldr	r2, [pc, #24]	; (8001b78 <HAL_InitTick+0x5c>)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
 8001b64:	e000      	b.n	8001b68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20000010 	.word	0x20000010
 8001b74:	20000018 	.word	0x20000018
 8001b78:	20000014 	.word	0x20000014

08001b7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <HAL_IncTick+0x20>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	461a      	mov	r2, r3
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <HAL_IncTick+0x24>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	4a04      	ldr	r2, [pc, #16]	; (8001ba0 <HAL_IncTick+0x24>)
 8001b8e:	6013      	str	r3, [r2, #0]
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	20000018 	.word	0x20000018
 8001ba0:	20000474 	.word	0x20000474

08001ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ba8:	4b03      	ldr	r3, [pc, #12]	; (8001bb8 <HAL_GetTick+0x14>)
 8001baa:	681b      	ldr	r3, [r3, #0]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	20000474 	.word	0x20000474

08001bbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bc4:	f7ff ffee 	bl	8001ba4 <HAL_GetTick>
 8001bc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd4:	d005      	beq.n	8001be2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bd6:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <HAL_Delay+0x44>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	461a      	mov	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4413      	add	r3, r2
 8001be0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001be2:	bf00      	nop
 8001be4:	f7ff ffde 	bl	8001ba4 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d8f7      	bhi.n	8001be4 <HAL_Delay+0x28>
  {
  }
}
 8001bf4:	bf00      	nop
 8001bf6:	bf00      	nop
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000018 	.word	0x20000018

08001c04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c14:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <__NVIC_SetPriorityGrouping+0x44>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c1a:	68ba      	ldr	r2, [r7, #8]
 8001c1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c20:	4013      	ands	r3, r2
 8001c22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c36:	4a04      	ldr	r2, [pc, #16]	; (8001c48 <__NVIC_SetPriorityGrouping+0x44>)
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	60d3      	str	r3, [r2, #12]
}
 8001c3c:	bf00      	nop
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c50:	4b04      	ldr	r3, [pc, #16]	; (8001c64 <__NVIC_GetPriorityGrouping+0x18>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	0a1b      	lsrs	r3, r3, #8
 8001c56:	f003 0307 	and.w	r3, r3, #7
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	db0b      	blt.n	8001c92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	f003 021f 	and.w	r2, r3, #31
 8001c80:	4907      	ldr	r1, [pc, #28]	; (8001ca0 <__NVIC_EnableIRQ+0x38>)
 8001c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c86:	095b      	lsrs	r3, r3, #5
 8001c88:	2001      	movs	r0, #1
 8001c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	e000e100 	.word	0xe000e100

08001ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	6039      	str	r1, [r7, #0]
 8001cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	db0a      	blt.n	8001cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	490c      	ldr	r1, [pc, #48]	; (8001cf0 <__NVIC_SetPriority+0x4c>)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	0112      	lsls	r2, r2, #4
 8001cc4:	b2d2      	uxtb	r2, r2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ccc:	e00a      	b.n	8001ce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	4908      	ldr	r1, [pc, #32]	; (8001cf4 <__NVIC_SetPriority+0x50>)
 8001cd4:	79fb      	ldrb	r3, [r7, #7]
 8001cd6:	f003 030f 	and.w	r3, r3, #15
 8001cda:	3b04      	subs	r3, #4
 8001cdc:	0112      	lsls	r2, r2, #4
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	440b      	add	r3, r1
 8001ce2:	761a      	strb	r2, [r3, #24]
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	e000e100 	.word	0xe000e100
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b089      	sub	sp, #36	; 0x24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	f1c3 0307 	rsb	r3, r3, #7
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	bf28      	it	cs
 8001d16:	2304      	movcs	r3, #4
 8001d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	3304      	adds	r3, #4
 8001d1e:	2b06      	cmp	r3, #6
 8001d20:	d902      	bls.n	8001d28 <NVIC_EncodePriority+0x30>
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	3b03      	subs	r3, #3
 8001d26:	e000      	b.n	8001d2a <NVIC_EncodePriority+0x32>
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43da      	mvns	r2, r3
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	401a      	ands	r2, r3
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d40:	f04f 31ff 	mov.w	r1, #4294967295
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4a:	43d9      	mvns	r1, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d50:	4313      	orrs	r3, r2
         );
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3724      	adds	r7, #36	; 0x24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
	...

08001d60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d70:	d301      	bcc.n	8001d76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d72:	2301      	movs	r3, #1
 8001d74:	e00f      	b.n	8001d96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d76:	4a0a      	ldr	r2, [pc, #40]	; (8001da0 <SysTick_Config+0x40>)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d7e:	210f      	movs	r1, #15
 8001d80:	f04f 30ff 	mov.w	r0, #4294967295
 8001d84:	f7ff ff8e 	bl	8001ca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d88:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <SysTick_Config+0x40>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d8e:	4b04      	ldr	r3, [pc, #16]	; (8001da0 <SysTick_Config+0x40>)
 8001d90:	2207      	movs	r2, #7
 8001d92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	e000e010 	.word	0xe000e010

08001da4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7ff ff29 	bl	8001c04 <__NVIC_SetPriorityGrouping>
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b086      	sub	sp, #24
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	60b9      	str	r1, [r7, #8]
 8001dc4:	607a      	str	r2, [r7, #4]
 8001dc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dcc:	f7ff ff3e 	bl	8001c4c <__NVIC_GetPriorityGrouping>
 8001dd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	68b9      	ldr	r1, [r7, #8]
 8001dd6:	6978      	ldr	r0, [r7, #20]
 8001dd8:	f7ff ff8e 	bl	8001cf8 <NVIC_EncodePriority>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001de2:	4611      	mov	r1, r2
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff ff5d 	bl	8001ca4 <__NVIC_SetPriority>
}
 8001dea:	bf00      	nop
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	4603      	mov	r3, r0
 8001dfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff ff31 	bl	8001c68 <__NVIC_EnableIRQ>
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b082      	sub	sp, #8
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7ff ffa2 	bl	8001d60 <SysTick_Config>
 8001e1c:	4603      	mov	r3, r0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
	...

08001e28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e34:	f7ff feb6 	bl	8001ba4 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d101      	bne.n	8001e44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e099      	b.n	8001f78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2202      	movs	r2, #2
 8001e48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 0201 	bic.w	r2, r2, #1
 8001e62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e64:	e00f      	b.n	8001e86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e66:	f7ff fe9d 	bl	8001ba4 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b05      	cmp	r3, #5
 8001e72:	d908      	bls.n	8001e86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2220      	movs	r2, #32
 8001e78:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2203      	movs	r2, #3
 8001e7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e078      	b.n	8001f78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1e8      	bne.n	8001e66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e9c:	697a      	ldr	r2, [r7, #20]
 8001e9e:	4b38      	ldr	r3, [pc, #224]	; (8001f80 <HAL_DMA_Init+0x158>)
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ebe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001edc:	2b04      	cmp	r3, #4
 8001ede:	d107      	bne.n	8001ef0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	697a      	ldr	r2, [r7, #20]
 8001ef6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	f023 0307 	bic.w	r3, r3, #7
 8001f06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0c:	697a      	ldr	r2, [r7, #20]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f16:	2b04      	cmp	r3, #4
 8001f18:	d117      	bne.n	8001f4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d00e      	beq.n	8001f4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 fad9 	bl	80024e4 <DMA_CheckFifoParam>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d008      	beq.n	8001f4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2240      	movs	r2, #64	; 0x40
 8001f3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f46:	2301      	movs	r3, #1
 8001f48:	e016      	b.n	8001f78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 fa90 	bl	8002478 <DMA_CalcBaseAndBitshift>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f60:	223f      	movs	r2, #63	; 0x3f
 8001f62:	409a      	lsls	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	f010803f 	.word	0xf010803f

08001f84 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e050      	b.n	8002038 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d101      	bne.n	8001fa6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	e048      	b.n	8002038 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 0201 	bic.w	r2, r2, #1
 8001fb4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2221      	movs	r2, #33	; 0x21
 8001fe4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 fa46 	bl	8002478 <DMA_CalcBaseAndBitshift>
 8001fec:	4603      	mov	r3, r0
 8001fee:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002018:	223f      	movs	r2, #63	; 0x3f
 800201a:	409a      	lsls	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800204e:	f7ff fda9 	bl	8001ba4 <HAL_GetTick>
 8002052:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d008      	beq.n	8002072 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2280      	movs	r2, #128	; 0x80
 8002064:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e052      	b.n	8002118 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 0216 	bic.w	r2, r2, #22
 8002080:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	695a      	ldr	r2, [r3, #20]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002090:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	2b00      	cmp	r3, #0
 8002098:	d103      	bne.n	80020a2 <HAL_DMA_Abort+0x62>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d007      	beq.n	80020b2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 0208 	bic.w	r2, r2, #8
 80020b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 0201 	bic.w	r2, r2, #1
 80020c0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020c2:	e013      	b.n	80020ec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020c4:	f7ff fd6e 	bl	8001ba4 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b05      	cmp	r3, #5
 80020d0:	d90c      	bls.n	80020ec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2220      	movs	r2, #32
 80020d6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2203      	movs	r2, #3
 80020dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e015      	b.n	8002118 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1e4      	bne.n	80020c4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020fe:	223f      	movs	r2, #63	; 0x3f
 8002100:	409a      	lsls	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d004      	beq.n	800213e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2280      	movs	r2, #128	; 0x80
 8002138:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e00c      	b.n	8002158 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2205      	movs	r2, #5
 8002142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 0201 	bic.w	r2, r2, #1
 8002154:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800216c:	2300      	movs	r3, #0
 800216e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002170:	4b8e      	ldr	r3, [pc, #568]	; (80023ac <HAL_DMA_IRQHandler+0x248>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a8e      	ldr	r2, [pc, #568]	; (80023b0 <HAL_DMA_IRQHandler+0x24c>)
 8002176:	fba2 2303 	umull	r2, r3, r2, r3
 800217a:	0a9b      	lsrs	r3, r3, #10
 800217c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002182:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800218e:	2208      	movs	r2, #8
 8002190:	409a      	lsls	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	4013      	ands	r3, r2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d01a      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d013      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 0204 	bic.w	r2, r2, #4
 80021b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021bc:	2208      	movs	r2, #8
 80021be:	409a      	lsls	r2, r3
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c8:	f043 0201 	orr.w	r2, r3, #1
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d4:	2201      	movs	r2, #1
 80021d6:	409a      	lsls	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4013      	ands	r3, r2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d012      	beq.n	8002206 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00b      	beq.n	8002206 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f2:	2201      	movs	r2, #1
 80021f4:	409a      	lsls	r2, r3
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021fe:	f043 0202 	orr.w	r2, r3, #2
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220a:	2204      	movs	r2, #4
 800220c:	409a      	lsls	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	4013      	ands	r3, r2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d012      	beq.n	800223c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00b      	beq.n	800223c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002228:	2204      	movs	r2, #4
 800222a:	409a      	lsls	r2, r3
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002234:	f043 0204 	orr.w	r2, r3, #4
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002240:	2210      	movs	r2, #16
 8002242:	409a      	lsls	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	4013      	ands	r3, r2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d043      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0308 	and.w	r3, r3, #8
 8002256:	2b00      	cmp	r3, #0
 8002258:	d03c      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800225e:	2210      	movs	r2, #16
 8002260:	409a      	lsls	r2, r3
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d018      	beq.n	80022a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d108      	bne.n	8002294 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	2b00      	cmp	r3, #0
 8002288:	d024      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	4798      	blx	r3
 8002292:	e01f      	b.n	80022d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002298:	2b00      	cmp	r3, #0
 800229a:	d01b      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	4798      	blx	r3
 80022a4:	e016      	b.n	80022d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d107      	bne.n	80022c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f022 0208 	bic.w	r2, r2, #8
 80022c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d003      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d8:	2220      	movs	r2, #32
 80022da:	409a      	lsls	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	4013      	ands	r3, r2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 808f 	beq.w	8002404 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0310 	and.w	r3, r3, #16
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 8087 	beq.w	8002404 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fa:	2220      	movs	r2, #32
 80022fc:	409a      	lsls	r2, r3
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b05      	cmp	r3, #5
 800230c:	d136      	bne.n	800237c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 0216 	bic.w	r2, r2, #22
 800231c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	695a      	ldr	r2, [r3, #20]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800232c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	2b00      	cmp	r3, #0
 8002334:	d103      	bne.n	800233e <HAL_DMA_IRQHandler+0x1da>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800233a:	2b00      	cmp	r3, #0
 800233c:	d007      	beq.n	800234e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f022 0208 	bic.w	r2, r2, #8
 800234c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002352:	223f      	movs	r2, #63	; 0x3f
 8002354:	409a      	lsls	r2, r3
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800236e:	2b00      	cmp	r3, #0
 8002370:	d07e      	beq.n	8002470 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	4798      	blx	r3
        }
        return;
 800237a:	e079      	b.n	8002470 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d01d      	beq.n	80023c6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d10d      	bne.n	80023b4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239c:	2b00      	cmp	r3, #0
 800239e:	d031      	beq.n	8002404 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	4798      	blx	r3
 80023a8:	e02c      	b.n	8002404 <HAL_DMA_IRQHandler+0x2a0>
 80023aa:	bf00      	nop
 80023ac:	20000010 	.word	0x20000010
 80023b0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d023      	beq.n	8002404 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	4798      	blx	r3
 80023c4:	e01e      	b.n	8002404 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10f      	bne.n	80023f4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 0210 	bic.w	r2, r2, #16
 80023e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d003      	beq.n	8002404 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002408:	2b00      	cmp	r3, #0
 800240a:	d032      	beq.n	8002472 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	2b00      	cmp	r3, #0
 8002416:	d022      	beq.n	800245e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2205      	movs	r2, #5
 800241c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 0201 	bic.w	r2, r2, #1
 800242e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	3301      	adds	r3, #1
 8002434:	60bb      	str	r3, [r7, #8]
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	429a      	cmp	r2, r3
 800243a:	d307      	bcc.n	800244c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1f2      	bne.n	8002430 <HAL_DMA_IRQHandler+0x2cc>
 800244a:	e000      	b.n	800244e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800244c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002462:	2b00      	cmp	r3, #0
 8002464:	d005      	beq.n	8002472 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	4798      	blx	r3
 800246e:	e000      	b.n	8002472 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002470:	bf00      	nop
    }
  }
}
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	b2db      	uxtb	r3, r3
 8002486:	3b10      	subs	r3, #16
 8002488:	4a14      	ldr	r2, [pc, #80]	; (80024dc <DMA_CalcBaseAndBitshift+0x64>)
 800248a:	fba2 2303 	umull	r2, r3, r2, r3
 800248e:	091b      	lsrs	r3, r3, #4
 8002490:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002492:	4a13      	ldr	r2, [pc, #76]	; (80024e0 <DMA_CalcBaseAndBitshift+0x68>)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	4413      	add	r3, r2
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	461a      	mov	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2b03      	cmp	r3, #3
 80024a4:	d909      	bls.n	80024ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024ae:	f023 0303 	bic.w	r3, r3, #3
 80024b2:	1d1a      	adds	r2, r3, #4
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	659a      	str	r2, [r3, #88]	; 0x58
 80024b8:	e007      	b.n	80024ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024c2:	f023 0303 	bic.w	r3, r3, #3
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3714      	adds	r7, #20
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	aaaaaaab 	.word	0xaaaaaaab
 80024e0:	080103d8 	.word	0x080103d8

080024e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024ec:	2300      	movs	r3, #0
 80024ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d11f      	bne.n	800253e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	2b03      	cmp	r3, #3
 8002502:	d856      	bhi.n	80025b2 <DMA_CheckFifoParam+0xce>
 8002504:	a201      	add	r2, pc, #4	; (adr r2, 800250c <DMA_CheckFifoParam+0x28>)
 8002506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800250a:	bf00      	nop
 800250c:	0800251d 	.word	0x0800251d
 8002510:	0800252f 	.word	0x0800252f
 8002514:	0800251d 	.word	0x0800251d
 8002518:	080025b3 	.word	0x080025b3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002520:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d046      	beq.n	80025b6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800252c:	e043      	b.n	80025b6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002532:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002536:	d140      	bne.n	80025ba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800253c:	e03d      	b.n	80025ba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002546:	d121      	bne.n	800258c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	2b03      	cmp	r3, #3
 800254c:	d837      	bhi.n	80025be <DMA_CheckFifoParam+0xda>
 800254e:	a201      	add	r2, pc, #4	; (adr r2, 8002554 <DMA_CheckFifoParam+0x70>)
 8002550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002554:	08002565 	.word	0x08002565
 8002558:	0800256b 	.word	0x0800256b
 800255c:	08002565 	.word	0x08002565
 8002560:	0800257d 	.word	0x0800257d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	73fb      	strb	r3, [r7, #15]
      break;
 8002568:	e030      	b.n	80025cc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d025      	beq.n	80025c2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800257a:	e022      	b.n	80025c2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002580:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002584:	d11f      	bne.n	80025c6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800258a:	e01c      	b.n	80025c6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	2b02      	cmp	r3, #2
 8002590:	d903      	bls.n	800259a <DMA_CheckFifoParam+0xb6>
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	2b03      	cmp	r3, #3
 8002596:	d003      	beq.n	80025a0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002598:	e018      	b.n	80025cc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	73fb      	strb	r3, [r7, #15]
      break;
 800259e:	e015      	b.n	80025cc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00e      	beq.n	80025ca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	73fb      	strb	r3, [r7, #15]
      break;
 80025b0:	e00b      	b.n	80025ca <DMA_CheckFifoParam+0xe6>
      break;
 80025b2:	bf00      	nop
 80025b4:	e00a      	b.n	80025cc <DMA_CheckFifoParam+0xe8>
      break;
 80025b6:	bf00      	nop
 80025b8:	e008      	b.n	80025cc <DMA_CheckFifoParam+0xe8>
      break;
 80025ba:	bf00      	nop
 80025bc:	e006      	b.n	80025cc <DMA_CheckFifoParam+0xe8>
      break;
 80025be:	bf00      	nop
 80025c0:	e004      	b.n	80025cc <DMA_CheckFifoParam+0xe8>
      break;
 80025c2:	bf00      	nop
 80025c4:	e002      	b.n	80025cc <DMA_CheckFifoParam+0xe8>
      break;   
 80025c6:	bf00      	nop
 80025c8:	e000      	b.n	80025cc <DMA_CheckFifoParam+0xe8>
      break;
 80025ca:	bf00      	nop
    }
  } 
  
  return status; 
 80025cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop

080025dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025dc:	b480      	push	{r7}
 80025de:	b089      	sub	sp, #36	; 0x24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025e6:	2300      	movs	r3, #0
 80025e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025ea:	2300      	movs	r3, #0
 80025ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025f2:	2300      	movs	r3, #0
 80025f4:	61fb      	str	r3, [r7, #28]
 80025f6:	e165      	b.n	80028c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025f8:	2201      	movs	r2, #1
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	4013      	ands	r3, r2
 800260a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	429a      	cmp	r2, r3
 8002612:	f040 8154 	bne.w	80028be <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f003 0303 	and.w	r3, r3, #3
 800261e:	2b01      	cmp	r3, #1
 8002620:	d005      	beq.n	800262e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800262a:	2b02      	cmp	r3, #2
 800262c:	d130      	bne.n	8002690 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	2203      	movs	r2, #3
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	43db      	mvns	r3, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4013      	ands	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	68da      	ldr	r2, [r3, #12]
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4313      	orrs	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002664:	2201      	movs	r2, #1
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	43db      	mvns	r3, r3
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4013      	ands	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	091b      	lsrs	r3, r3, #4
 800267a:	f003 0201 	and.w	r2, r3, #1
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4313      	orrs	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f003 0303 	and.w	r3, r3, #3
 8002698:	2b03      	cmp	r3, #3
 800269a:	d017      	beq.n	80026cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	2203      	movs	r2, #3
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	43db      	mvns	r3, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4013      	ands	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f003 0303 	and.w	r3, r3, #3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d123      	bne.n	8002720 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	08da      	lsrs	r2, r3, #3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3208      	adds	r2, #8
 80026e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	220f      	movs	r2, #15
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	43db      	mvns	r3, r3
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	4013      	ands	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	691a      	ldr	r2, [r3, #16]
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4313      	orrs	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	08da      	lsrs	r2, r3, #3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	3208      	adds	r2, #8
 800271a:	69b9      	ldr	r1, [r7, #24]
 800271c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	2203      	movs	r2, #3
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	43db      	mvns	r3, r3
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4013      	ands	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f003 0203 	and.w	r2, r3, #3
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4313      	orrs	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800275c:	2b00      	cmp	r3, #0
 800275e:	f000 80ae 	beq.w	80028be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	4b5d      	ldr	r3, [pc, #372]	; (80028dc <HAL_GPIO_Init+0x300>)
 8002768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276a:	4a5c      	ldr	r2, [pc, #368]	; (80028dc <HAL_GPIO_Init+0x300>)
 800276c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002770:	6453      	str	r3, [r2, #68]	; 0x44
 8002772:	4b5a      	ldr	r3, [pc, #360]	; (80028dc <HAL_GPIO_Init+0x300>)
 8002774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800277e:	4a58      	ldr	r2, [pc, #352]	; (80028e0 <HAL_GPIO_Init+0x304>)
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	089b      	lsrs	r3, r3, #2
 8002784:	3302      	adds	r3, #2
 8002786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800278a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	f003 0303 	and.w	r3, r3, #3
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	220f      	movs	r2, #15
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	43db      	mvns	r3, r3
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	4013      	ands	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a4f      	ldr	r2, [pc, #316]	; (80028e4 <HAL_GPIO_Init+0x308>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d025      	beq.n	80027f6 <HAL_GPIO_Init+0x21a>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a4e      	ldr	r2, [pc, #312]	; (80028e8 <HAL_GPIO_Init+0x30c>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d01f      	beq.n	80027f2 <HAL_GPIO_Init+0x216>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a4d      	ldr	r2, [pc, #308]	; (80028ec <HAL_GPIO_Init+0x310>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d019      	beq.n	80027ee <HAL_GPIO_Init+0x212>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a4c      	ldr	r2, [pc, #304]	; (80028f0 <HAL_GPIO_Init+0x314>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d013      	beq.n	80027ea <HAL_GPIO_Init+0x20e>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a4b      	ldr	r2, [pc, #300]	; (80028f4 <HAL_GPIO_Init+0x318>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d00d      	beq.n	80027e6 <HAL_GPIO_Init+0x20a>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a4a      	ldr	r2, [pc, #296]	; (80028f8 <HAL_GPIO_Init+0x31c>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d007      	beq.n	80027e2 <HAL_GPIO_Init+0x206>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a49      	ldr	r2, [pc, #292]	; (80028fc <HAL_GPIO_Init+0x320>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d101      	bne.n	80027de <HAL_GPIO_Init+0x202>
 80027da:	2306      	movs	r3, #6
 80027dc:	e00c      	b.n	80027f8 <HAL_GPIO_Init+0x21c>
 80027de:	2307      	movs	r3, #7
 80027e0:	e00a      	b.n	80027f8 <HAL_GPIO_Init+0x21c>
 80027e2:	2305      	movs	r3, #5
 80027e4:	e008      	b.n	80027f8 <HAL_GPIO_Init+0x21c>
 80027e6:	2304      	movs	r3, #4
 80027e8:	e006      	b.n	80027f8 <HAL_GPIO_Init+0x21c>
 80027ea:	2303      	movs	r3, #3
 80027ec:	e004      	b.n	80027f8 <HAL_GPIO_Init+0x21c>
 80027ee:	2302      	movs	r3, #2
 80027f0:	e002      	b.n	80027f8 <HAL_GPIO_Init+0x21c>
 80027f2:	2301      	movs	r3, #1
 80027f4:	e000      	b.n	80027f8 <HAL_GPIO_Init+0x21c>
 80027f6:	2300      	movs	r3, #0
 80027f8:	69fa      	ldr	r2, [r7, #28]
 80027fa:	f002 0203 	and.w	r2, r2, #3
 80027fe:	0092      	lsls	r2, r2, #2
 8002800:	4093      	lsls	r3, r2
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4313      	orrs	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002808:	4935      	ldr	r1, [pc, #212]	; (80028e0 <HAL_GPIO_Init+0x304>)
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	089b      	lsrs	r3, r3, #2
 800280e:	3302      	adds	r3, #2
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002816:	4b3a      	ldr	r3, [pc, #232]	; (8002900 <HAL_GPIO_Init+0x324>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	43db      	mvns	r3, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4013      	ands	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	4313      	orrs	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800283a:	4a31      	ldr	r2, [pc, #196]	; (8002900 <HAL_GPIO_Init+0x324>)
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002840:	4b2f      	ldr	r3, [pc, #188]	; (8002900 <HAL_GPIO_Init+0x324>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	43db      	mvns	r3, r3
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4013      	ands	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	4313      	orrs	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002864:	4a26      	ldr	r2, [pc, #152]	; (8002900 <HAL_GPIO_Init+0x324>)
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800286a:	4b25      	ldr	r3, [pc, #148]	; (8002900 <HAL_GPIO_Init+0x324>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	43db      	mvns	r3, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4013      	ands	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	4313      	orrs	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800288e:	4a1c      	ldr	r2, [pc, #112]	; (8002900 <HAL_GPIO_Init+0x324>)
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002894:	4b1a      	ldr	r3, [pc, #104]	; (8002900 <HAL_GPIO_Init+0x324>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	43db      	mvns	r3, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4013      	ands	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d003      	beq.n	80028b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028b8:	4a11      	ldr	r2, [pc, #68]	; (8002900 <HAL_GPIO_Init+0x324>)
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	3301      	adds	r3, #1
 80028c2:	61fb      	str	r3, [r7, #28]
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	2b0f      	cmp	r3, #15
 80028c8:	f67f ae96 	bls.w	80025f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028cc:	bf00      	nop
 80028ce:	bf00      	nop
 80028d0:	3724      	adds	r7, #36	; 0x24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	40023800 	.word	0x40023800
 80028e0:	40013800 	.word	0x40013800
 80028e4:	40020000 	.word	0x40020000
 80028e8:	40020400 	.word	0x40020400
 80028ec:	40020800 	.word	0x40020800
 80028f0:	40020c00 	.word	0x40020c00
 80028f4:	40021000 	.word	0x40021000
 80028f8:	40021400 	.word	0x40021400
 80028fc:	40021800 	.word	0x40021800
 8002900:	40013c00 	.word	0x40013c00

08002904 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002904:	b480      	push	{r7}
 8002906:	b087      	sub	sp, #28
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800290e:	2300      	movs	r3, #0
 8002910:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002912:	2300      	movs	r3, #0
 8002914:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002916:	2300      	movs	r3, #0
 8002918:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800291a:	2300      	movs	r3, #0
 800291c:	617b      	str	r3, [r7, #20]
 800291e:	e0c7      	b.n	8002ab0 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002920:	2201      	movs	r2, #1
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	4013      	ands	r3, r2
 8002930:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	429a      	cmp	r2, r3
 8002938:	f040 80b7 	bne.w	8002aaa <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800293c:	4a62      	ldr	r2, [pc, #392]	; (8002ac8 <HAL_GPIO_DeInit+0x1c4>)
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	089b      	lsrs	r3, r3, #2
 8002942:	3302      	adds	r3, #2
 8002944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002948:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f003 0303 	and.w	r3, r3, #3
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	220f      	movs	r2, #15
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	68ba      	ldr	r2, [r7, #8]
 800295a:	4013      	ands	r3, r2
 800295c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a5a      	ldr	r2, [pc, #360]	; (8002acc <HAL_GPIO_DeInit+0x1c8>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d025      	beq.n	80029b2 <HAL_GPIO_DeInit+0xae>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a59      	ldr	r2, [pc, #356]	; (8002ad0 <HAL_GPIO_DeInit+0x1cc>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d01f      	beq.n	80029ae <HAL_GPIO_DeInit+0xaa>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a58      	ldr	r2, [pc, #352]	; (8002ad4 <HAL_GPIO_DeInit+0x1d0>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d019      	beq.n	80029aa <HAL_GPIO_DeInit+0xa6>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a57      	ldr	r2, [pc, #348]	; (8002ad8 <HAL_GPIO_DeInit+0x1d4>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d013      	beq.n	80029a6 <HAL_GPIO_DeInit+0xa2>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a56      	ldr	r2, [pc, #344]	; (8002adc <HAL_GPIO_DeInit+0x1d8>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d00d      	beq.n	80029a2 <HAL_GPIO_DeInit+0x9e>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a55      	ldr	r2, [pc, #340]	; (8002ae0 <HAL_GPIO_DeInit+0x1dc>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d007      	beq.n	800299e <HAL_GPIO_DeInit+0x9a>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a54      	ldr	r2, [pc, #336]	; (8002ae4 <HAL_GPIO_DeInit+0x1e0>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d101      	bne.n	800299a <HAL_GPIO_DeInit+0x96>
 8002996:	2306      	movs	r3, #6
 8002998:	e00c      	b.n	80029b4 <HAL_GPIO_DeInit+0xb0>
 800299a:	2307      	movs	r3, #7
 800299c:	e00a      	b.n	80029b4 <HAL_GPIO_DeInit+0xb0>
 800299e:	2305      	movs	r3, #5
 80029a0:	e008      	b.n	80029b4 <HAL_GPIO_DeInit+0xb0>
 80029a2:	2304      	movs	r3, #4
 80029a4:	e006      	b.n	80029b4 <HAL_GPIO_DeInit+0xb0>
 80029a6:	2303      	movs	r3, #3
 80029a8:	e004      	b.n	80029b4 <HAL_GPIO_DeInit+0xb0>
 80029aa:	2302      	movs	r3, #2
 80029ac:	e002      	b.n	80029b4 <HAL_GPIO_DeInit+0xb0>
 80029ae:	2301      	movs	r3, #1
 80029b0:	e000      	b.n	80029b4 <HAL_GPIO_DeInit+0xb0>
 80029b2:	2300      	movs	r3, #0
 80029b4:	697a      	ldr	r2, [r7, #20]
 80029b6:	f002 0203 	and.w	r2, r2, #3
 80029ba:	0092      	lsls	r2, r2, #2
 80029bc:	4093      	lsls	r3, r2
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d132      	bne.n	8002a2a <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80029c4:	4b48      	ldr	r3, [pc, #288]	; (8002ae8 <HAL_GPIO_DeInit+0x1e4>)
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	43db      	mvns	r3, r3
 80029cc:	4946      	ldr	r1, [pc, #280]	; (8002ae8 <HAL_GPIO_DeInit+0x1e4>)
 80029ce:	4013      	ands	r3, r2
 80029d0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80029d2:	4b45      	ldr	r3, [pc, #276]	; (8002ae8 <HAL_GPIO_DeInit+0x1e4>)
 80029d4:	685a      	ldr	r2, [r3, #4]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	43db      	mvns	r3, r3
 80029da:	4943      	ldr	r1, [pc, #268]	; (8002ae8 <HAL_GPIO_DeInit+0x1e4>)
 80029dc:	4013      	ands	r3, r2
 80029de:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80029e0:	4b41      	ldr	r3, [pc, #260]	; (8002ae8 <HAL_GPIO_DeInit+0x1e4>)
 80029e2:	68da      	ldr	r2, [r3, #12]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	43db      	mvns	r3, r3
 80029e8:	493f      	ldr	r1, [pc, #252]	; (8002ae8 <HAL_GPIO_DeInit+0x1e4>)
 80029ea:	4013      	ands	r3, r2
 80029ec:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80029ee:	4b3e      	ldr	r3, [pc, #248]	; (8002ae8 <HAL_GPIO_DeInit+0x1e4>)
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	43db      	mvns	r3, r3
 80029f6:	493c      	ldr	r1, [pc, #240]	; (8002ae8 <HAL_GPIO_DeInit+0x1e4>)
 80029f8:	4013      	ands	r3, r2
 80029fa:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	f003 0303 	and.w	r3, r3, #3
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	220f      	movs	r2, #15
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002a0c:	4a2e      	ldr	r2, [pc, #184]	; (8002ac8 <HAL_GPIO_DeInit+0x1c4>)
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	089b      	lsrs	r3, r3, #2
 8002a12:	3302      	adds	r3, #2
 8002a14:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	43da      	mvns	r2, r3
 8002a1c:	482a      	ldr	r0, [pc, #168]	; (8002ac8 <HAL_GPIO_DeInit+0x1c4>)
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	089b      	lsrs	r3, r3, #2
 8002a22:	400a      	ands	r2, r1
 8002a24:	3302      	adds	r3, #2
 8002a26:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	2103      	movs	r1, #3
 8002a34:	fa01 f303 	lsl.w	r3, r1, r3
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	401a      	ands	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	08da      	lsrs	r2, r3, #3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3208      	adds	r2, #8
 8002a48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	f003 0307 	and.w	r3, r3, #7
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	220f      	movs	r2, #15
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	08d2      	lsrs	r2, r2, #3
 8002a60:	4019      	ands	r1, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	3208      	adds	r2, #8
 8002a66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	68da      	ldr	r2, [r3, #12]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	2103      	movs	r1, #3
 8002a74:	fa01 f303 	lsl.w	r3, r1, r3
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	401a      	ands	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	2101      	movs	r1, #1
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	401a      	ands	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	2103      	movs	r1, #3
 8002a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	401a      	ands	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	3301      	adds	r3, #1
 8002aae:	617b      	str	r3, [r7, #20]
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	2b0f      	cmp	r3, #15
 8002ab4:	f67f af34 	bls.w	8002920 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002ab8:	bf00      	nop
 8002aba:	bf00      	nop
 8002abc:	371c      	adds	r7, #28
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	40013800 	.word	0x40013800
 8002acc:	40020000 	.word	0x40020000
 8002ad0:	40020400 	.word	0x40020400
 8002ad4:	40020800 	.word	0x40020800
 8002ad8:	40020c00 	.word	0x40020c00
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	40021400 	.word	0x40021400
 8002ae4:	40021800 	.word	0x40021800
 8002ae8:	40013c00 	.word	0x40013c00

08002aec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	460b      	mov	r3, r1
 8002af6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	691a      	ldr	r2, [r3, #16]
 8002afc:	887b      	ldrh	r3, [r7, #2]
 8002afe:	4013      	ands	r3, r2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d002      	beq.n	8002b0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b04:	2301      	movs	r3, #1
 8002b06:	73fb      	strb	r3, [r7, #15]
 8002b08:	e001      	b.n	8002b0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3714      	adds	r7, #20
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	460b      	mov	r3, r1
 8002b26:	807b      	strh	r3, [r7, #2]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b2c:	787b      	ldrb	r3, [r7, #1]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b32:	887a      	ldrh	r2, [r7, #2]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b38:	e003      	b.n	8002b42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b3a:	887b      	ldrh	r3, [r7, #2]
 8002b3c:	041a      	lsls	r2, r3, #16
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	619a      	str	r2, [r3, #24]
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b50:	b08f      	sub	sp, #60	; 0x3c
 8002b52:	af0a      	add	r7, sp, #40	; 0x28
 8002b54:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d101      	bne.n	8002b60 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e116      	b.n	8002d8e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d106      	bne.n	8002b80 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f008 fbd6 	bl	800b32c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2203      	movs	r2, #3
 8002b84:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d102      	bne.n	8002b9a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f004 fef3 	bl	800798a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	603b      	str	r3, [r7, #0]
 8002baa:	687e      	ldr	r6, [r7, #4]
 8002bac:	466d      	mov	r5, sp
 8002bae:	f106 0410 	add.w	r4, r6, #16
 8002bb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bba:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bbe:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bc2:	1d33      	adds	r3, r6, #4
 8002bc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bc6:	6838      	ldr	r0, [r7, #0]
 8002bc8:	f004 fdca 	bl	8007760 <USB_CoreInit>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d005      	beq.n	8002bde <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e0d7      	b.n	8002d8e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2100      	movs	r1, #0
 8002be4:	4618      	mov	r0, r3
 8002be6:	f004 fee1 	bl	80079ac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bea:	2300      	movs	r3, #0
 8002bec:	73fb      	strb	r3, [r7, #15]
 8002bee:	e04a      	b.n	8002c86 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002bf0:	7bfa      	ldrb	r2, [r7, #15]
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	4413      	add	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	333d      	adds	r3, #61	; 0x3d
 8002c00:	2201      	movs	r2, #1
 8002c02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c04:	7bfa      	ldrb	r2, [r7, #15]
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	4413      	add	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	333c      	adds	r3, #60	; 0x3c
 8002c14:	7bfa      	ldrb	r2, [r7, #15]
 8002c16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c18:	7bfa      	ldrb	r2, [r7, #15]
 8002c1a:	7bfb      	ldrb	r3, [r7, #15]
 8002c1c:	b298      	uxth	r0, r3
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	4613      	mov	r3, r2
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	4413      	add	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	3344      	adds	r3, #68	; 0x44
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c30:	7bfa      	ldrb	r2, [r7, #15]
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	4613      	mov	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	4413      	add	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	3340      	adds	r3, #64	; 0x40
 8002c40:	2200      	movs	r2, #0
 8002c42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c44:	7bfa      	ldrb	r2, [r7, #15]
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	4413      	add	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	440b      	add	r3, r1
 8002c52:	3348      	adds	r3, #72	; 0x48
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c58:	7bfa      	ldrb	r2, [r7, #15]
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	4413      	add	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	334c      	adds	r3, #76	; 0x4c
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c6c:	7bfa      	ldrb	r2, [r7, #15]
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	4613      	mov	r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	4413      	add	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	440b      	add	r3, r1
 8002c7a:	3354      	adds	r3, #84	; 0x54
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c80:	7bfb      	ldrb	r3, [r7, #15]
 8002c82:	3301      	adds	r3, #1
 8002c84:	73fb      	strb	r3, [r7, #15]
 8002c86:	7bfa      	ldrb	r2, [r7, #15]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d3af      	bcc.n	8002bf0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c90:	2300      	movs	r3, #0
 8002c92:	73fb      	strb	r3, [r7, #15]
 8002c94:	e044      	b.n	8002d20 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c96:	7bfa      	ldrb	r2, [r7, #15]
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002ca8:	2200      	movs	r2, #0
 8002caa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002cac:	7bfa      	ldrb	r2, [r7, #15]
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	4413      	add	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	440b      	add	r3, r1
 8002cba:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002cbe:	7bfa      	ldrb	r2, [r7, #15]
 8002cc0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002cc2:	7bfa      	ldrb	r2, [r7, #15]
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	00db      	lsls	r3, r3, #3
 8002cca:	4413      	add	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	440b      	add	r3, r1
 8002cd0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002cd8:	7bfa      	ldrb	r2, [r7, #15]
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002cea:	2200      	movs	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002cee:	7bfa      	ldrb	r2, [r7, #15]
 8002cf0:	6879      	ldr	r1, [r7, #4]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	4413      	add	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	440b      	add	r3, r1
 8002cfc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d04:	7bfa      	ldrb	r2, [r7, #15]
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	4413      	add	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	440b      	add	r3, r1
 8002d12:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002d16:	2200      	movs	r2, #0
 8002d18:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d1a:	7bfb      	ldrb	r3, [r7, #15]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	73fb      	strb	r3, [r7, #15]
 8002d20:	7bfa      	ldrb	r2, [r7, #15]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d3b5      	bcc.n	8002c96 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	603b      	str	r3, [r7, #0]
 8002d30:	687e      	ldr	r6, [r7, #4]
 8002d32:	466d      	mov	r5, sp
 8002d34:	f106 0410 	add.w	r4, r6, #16
 8002d38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d40:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d44:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d48:	1d33      	adds	r3, r6, #4
 8002d4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d4c:	6838      	ldr	r0, [r7, #0]
 8002d4e:	f004 fe79 	bl	8007a44 <USB_DevInit>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d005      	beq.n	8002d64 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e014      	b.n	8002d8e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d102      	bne.n	8002d82 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f001 f98b 	bl	8004098 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f005 ffbb 	bl	8008d02 <USB_DevDisconnect>

  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d96 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b084      	sub	sp, #16
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d101      	bne.n	8002db2 <HAL_PCD_Start+0x1c>
 8002dae:	2302      	movs	r3, #2
 8002db0:	e020      	b.n	8002df4 <HAL_PCD_Start+0x5e>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d109      	bne.n	8002dd6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d005      	beq.n	8002dd6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f004 fdc4 	bl	8007968 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f005 ff6b 	bl	8008cc0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002dfc:	b590      	push	{r4, r7, lr}
 8002dfe:	b08d      	sub	sp, #52	; 0x34
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e0a:	6a3b      	ldr	r3, [r7, #32]
 8002e0c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f006 f829 	bl	8008e6a <USB_GetMode>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f040 84b7 	bne.w	800378e <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f005 ff8d 	bl	8008d44 <USB_ReadInterrupts>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f000 84ad 	beq.w	800378c <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	0a1b      	lsrs	r3, r3, #8
 8002e3c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f005 ff7a 	bl	8008d44 <USB_ReadInterrupts>
 8002e50:	4603      	mov	r3, r0
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d107      	bne.n	8002e6a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	695a      	ldr	r2, [r3, #20]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f002 0202 	and.w	r2, r2, #2
 8002e68:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f005 ff68 	bl	8008d44 <USB_ReadInterrupts>
 8002e74:	4603      	mov	r3, r0
 8002e76:	f003 0310 	and.w	r3, r3, #16
 8002e7a:	2b10      	cmp	r3, #16
 8002e7c:	d161      	bne.n	8002f42 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	699a      	ldr	r2, [r3, #24]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 0210 	bic.w	r2, r2, #16
 8002e8c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002e8e:	6a3b      	ldr	r3, [r7, #32]
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	f003 020f 	and.w	r2, r3, #15
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	4413      	add	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	3304      	adds	r3, #4
 8002eac:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	0c5b      	lsrs	r3, r3, #17
 8002eb2:	f003 030f 	and.w	r3, r3, #15
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d124      	bne.n	8002f04 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d035      	beq.n	8002f32 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	091b      	lsrs	r3, r3, #4
 8002ece:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ed0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	6a38      	ldr	r0, [r7, #32]
 8002eda:	f005 fd9f 	bl	8008a1c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	691a      	ldr	r2, [r3, #16]
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	091b      	lsrs	r3, r3, #4
 8002ee6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002eea:	441a      	add	r2, r3
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	6a1a      	ldr	r2, [r3, #32]
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	091b      	lsrs	r3, r3, #4
 8002ef8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002efc:	441a      	add	r2, r3
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	621a      	str	r2, [r3, #32]
 8002f02:	e016      	b.n	8002f32 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	0c5b      	lsrs	r3, r3, #17
 8002f08:	f003 030f 	and.w	r3, r3, #15
 8002f0c:	2b06      	cmp	r3, #6
 8002f0e:	d110      	bne.n	8002f32 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f16:	2208      	movs	r2, #8
 8002f18:	4619      	mov	r1, r3
 8002f1a:	6a38      	ldr	r0, [r7, #32]
 8002f1c:	f005 fd7e 	bl	8008a1c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	6a1a      	ldr	r2, [r3, #32]
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	091b      	lsrs	r3, r3, #4
 8002f28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f2c:	441a      	add	r2, r3
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	699a      	ldr	r2, [r3, #24]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f042 0210 	orr.w	r2, r2, #16
 8002f40:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f005 fefc 	bl	8008d44 <USB_ReadInterrupts>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f52:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f56:	f040 80a7 	bne.w	80030a8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f005 ff01 	bl	8008d6a <USB_ReadDevAllOutEpInterrupt>
 8002f68:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002f6a:	e099      	b.n	80030a0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f000 808e 	beq.w	8003094 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f7e:	b2d2      	uxtb	r2, r2
 8002f80:	4611      	mov	r1, r2
 8002f82:	4618      	mov	r0, r3
 8002f84:	f005 ff25 	bl	8008dd2 <USB_ReadDevOutEPInterrupt>
 8002f88:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00c      	beq.n	8002fae <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f96:	015a      	lsls	r2, r3, #5
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002fa6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 feef 	bl	8003d8c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	f003 0308 	and.w	r3, r3, #8
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00c      	beq.n	8002fd2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fba:	015a      	lsls	r2, r3, #5
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	2308      	movs	r3, #8
 8002fc8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002fca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 ffc5 	bl	8003f5c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	f003 0310 	and.w	r3, r3, #16
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d008      	beq.n	8002fee <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fde:	015a      	lsls	r2, r3, #5
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fe8:	461a      	mov	r2, r3
 8002fea:	2310      	movs	r3, #16
 8002fec:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d030      	beq.n	800305a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002ff8:	6a3b      	ldr	r3, [r7, #32]
 8002ffa:	695b      	ldr	r3, [r3, #20]
 8002ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003000:	2b80      	cmp	r3, #128	; 0x80
 8003002:	d109      	bne.n	8003018 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	69fa      	ldr	r2, [r7, #28]
 800300e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003012:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003016:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800301a:	4613      	mov	r3, r2
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	4413      	add	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	4413      	add	r3, r2
 800302a:	3304      	adds	r3, #4
 800302c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	78db      	ldrb	r3, [r3, #3]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d108      	bne.n	8003048 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	2200      	movs	r2, #0
 800303a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800303c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303e:	b2db      	uxtb	r3, r3
 8003040:	4619      	mov	r1, r3
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f008 fa8e 	bl	800b564 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304a:	015a      	lsls	r2, r3, #5
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	4413      	add	r3, r2
 8003050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003054:	461a      	mov	r2, r3
 8003056:	2302      	movs	r3, #2
 8003058:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	f003 0320 	and.w	r3, r3, #32
 8003060:	2b00      	cmp	r3, #0
 8003062:	d008      	beq.n	8003076 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003066:	015a      	lsls	r2, r3, #5
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	4413      	add	r3, r2
 800306c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003070:	461a      	mov	r2, r3
 8003072:	2320      	movs	r3, #32
 8003074:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d009      	beq.n	8003094 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003082:	015a      	lsls	r2, r3, #5
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	4413      	add	r3, r2
 8003088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800308c:	461a      	mov	r2, r3
 800308e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003092:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003096:	3301      	adds	r3, #1
 8003098:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800309a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309c:	085b      	lsrs	r3, r3, #1
 800309e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80030a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f47f af62 	bne.w	8002f6c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f005 fe49 	bl	8008d44 <USB_ReadInterrupts>
 80030b2:	4603      	mov	r3, r0
 80030b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030bc:	f040 80db 	bne.w	8003276 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f005 fe6a 	bl	8008d9e <USB_ReadDevAllInEpInterrupt>
 80030ca:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80030cc:	2300      	movs	r3, #0
 80030ce:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80030d0:	e0cd      	b.n	800326e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80030d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 80c2 	beq.w	8003262 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e4:	b2d2      	uxtb	r2, r2
 80030e6:	4611      	mov	r1, r2
 80030e8:	4618      	mov	r0, r3
 80030ea:	f005 fe90 	bl	8008e0e <USB_ReadDevInEPInterrupt>
 80030ee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d057      	beq.n	80031aa <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	f003 030f 	and.w	r3, r3, #15
 8003100:	2201      	movs	r2, #1
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800310e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	43db      	mvns	r3, r3
 8003114:	69f9      	ldr	r1, [r7, #28]
 8003116:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800311a:	4013      	ands	r3, r2
 800311c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	015a      	lsls	r2, r3, #5
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	4413      	add	r3, r2
 8003126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800312a:	461a      	mov	r2, r3
 800312c:	2301      	movs	r3, #1
 800312e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d132      	bne.n	800319e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003138:	6879      	ldr	r1, [r7, #4]
 800313a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800313c:	4613      	mov	r3, r2
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	4413      	add	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	334c      	adds	r3, #76	; 0x4c
 8003148:	6819      	ldr	r1, [r3, #0]
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800314e:	4613      	mov	r3, r2
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	4413      	add	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4403      	add	r3, r0
 8003158:	3348      	adds	r3, #72	; 0x48
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4419      	add	r1, r3
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003162:	4613      	mov	r3, r2
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	4413      	add	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4403      	add	r3, r0
 800316c:	334c      	adds	r3, #76	; 0x4c
 800316e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003172:	2b00      	cmp	r3, #0
 8003174:	d113      	bne.n	800319e <HAL_PCD_IRQHandler+0x3a2>
 8003176:	6879      	ldr	r1, [r7, #4]
 8003178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800317a:	4613      	mov	r3, r2
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	4413      	add	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	440b      	add	r3, r1
 8003184:	3354      	adds	r3, #84	; 0x54
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d108      	bne.n	800319e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6818      	ldr	r0, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003196:	461a      	mov	r2, r3
 8003198:	2101      	movs	r1, #1
 800319a:	f005 fe97 	bl	8008ecc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800319e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	4619      	mov	r1, r3
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f008 f958 	bl	800b45a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	f003 0308 	and.w	r3, r3, #8
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d008      	beq.n	80031c6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80031b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b6:	015a      	lsls	r2, r3, #5
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	4413      	add	r3, r2
 80031bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031c0:	461a      	mov	r2, r3
 80031c2:	2308      	movs	r3, #8
 80031c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	f003 0310 	and.w	r3, r3, #16
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d008      	beq.n	80031e2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d2:	015a      	lsls	r2, r3, #5
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	4413      	add	r3, r2
 80031d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031dc:	461a      	mov	r2, r3
 80031de:	2310      	movs	r3, #16
 80031e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d008      	beq.n	80031fe <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ee:	015a      	lsls	r2, r3, #5
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	4413      	add	r3, r2
 80031f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031f8:	461a      	mov	r2, r3
 80031fa:	2340      	movs	r3, #64	; 0x40
 80031fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d023      	beq.n	8003250 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003208:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800320a:	6a38      	ldr	r0, [r7, #32]
 800320c:	f004 fd78 	bl	8007d00 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003212:	4613      	mov	r3, r2
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	4413      	add	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	3338      	adds	r3, #56	; 0x38
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	4413      	add	r3, r2
 8003220:	3304      	adds	r3, #4
 8003222:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	78db      	ldrb	r3, [r3, #3]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d108      	bne.n	800323e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	2200      	movs	r2, #0
 8003230:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	b2db      	uxtb	r3, r3
 8003236:	4619      	mov	r1, r3
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f008 f9a5 	bl	800b588 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800323e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003240:	015a      	lsls	r2, r3, #5
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	4413      	add	r3, r2
 8003246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800324a:	461a      	mov	r2, r3
 800324c:	2302      	movs	r3, #2
 800324e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800325a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 fd08 	bl	8003c72 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003264:	3301      	adds	r3, #1
 8003266:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326a:	085b      	lsrs	r3, r3, #1
 800326c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800326e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003270:	2b00      	cmp	r3, #0
 8003272:	f47f af2e 	bne.w	80030d2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4618      	mov	r0, r3
 800327c:	f005 fd62 	bl	8008d44 <USB_ReadInterrupts>
 8003280:	4603      	mov	r3, r0
 8003282:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003286:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800328a:	d122      	bne.n	80032d2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	69fa      	ldr	r2, [r7, #28]
 8003296:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800329a:	f023 0301 	bic.w	r3, r3, #1
 800329e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d108      	bne.n	80032bc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80032b2:	2100      	movs	r1, #0
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f008 fb1f 	bl	800b8f8 <HAL_PCDEx_LPM_Callback>
 80032ba:	e002      	b.n	80032c2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f008 f943 	bl	800b548 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	695a      	ldr	r2, [r3, #20]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80032d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f005 fd34 	bl	8008d44 <USB_ReadInterrupts>
 80032dc:	4603      	mov	r3, r0
 80032de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032e6:	d112      	bne.n	800330e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d102      	bne.n	80032fe <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f008 f8ff 	bl	800b4fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	695a      	ldr	r2, [r3, #20]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800330c:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4618      	mov	r0, r3
 8003314:	f005 fd16 	bl	8008d44 <USB_ReadInterrupts>
 8003318:	4603      	mov	r3, r0
 800331a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800331e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003322:	d121      	bne.n	8003368 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	695a      	ldr	r2, [r3, #20]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003332:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800333a:	2b00      	cmp	r3, #0
 800333c:	d111      	bne.n	8003362 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800334c:	089b      	lsrs	r3, r3, #2
 800334e:	f003 020f 	and.w	r2, r3, #15
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003358:	2101      	movs	r1, #1
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f008 facc 	bl	800b8f8 <HAL_PCDEx_LPM_Callback>
 8003360:	e002      	b.n	8003368 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f008 f8ca 	bl	800b4fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4618      	mov	r0, r3
 800336e:	f005 fce9 	bl	8008d44 <USB_ReadInterrupts>
 8003372:	4603      	mov	r3, r0
 8003374:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800337c:	f040 80b7 	bne.w	80034ee <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	69fa      	ldr	r2, [r7, #28]
 800338a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800338e:	f023 0301 	bic.w	r3, r3, #1
 8003392:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2110      	movs	r1, #16
 800339a:	4618      	mov	r0, r3
 800339c:	f004 fcb0 	bl	8007d00 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033a0:	2300      	movs	r3, #0
 80033a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033a4:	e046      	b.n	8003434 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80033a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a8:	015a      	lsls	r2, r3, #5
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	4413      	add	r3, r2
 80033ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033b2:	461a      	mov	r2, r3
 80033b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80033b8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80033ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033bc:	015a      	lsls	r2, r3, #5
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	4413      	add	r3, r2
 80033c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033ca:	0151      	lsls	r1, r2, #5
 80033cc:	69fa      	ldr	r2, [r7, #28]
 80033ce:	440a      	add	r2, r1
 80033d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80033d8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80033da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033dc:	015a      	lsls	r2, r3, #5
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	4413      	add	r3, r2
 80033e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033e6:	461a      	mov	r2, r3
 80033e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80033ec:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80033ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f0:	015a      	lsls	r2, r3, #5
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	4413      	add	r3, r2
 80033f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033fe:	0151      	lsls	r1, r2, #5
 8003400:	69fa      	ldr	r2, [r7, #28]
 8003402:	440a      	add	r2, r1
 8003404:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003408:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800340c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800340e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003410:	015a      	lsls	r2, r3, #5
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	4413      	add	r3, r2
 8003416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800341e:	0151      	lsls	r1, r2, #5
 8003420:	69fa      	ldr	r2, [r7, #28]
 8003422:	440a      	add	r2, r1
 8003424:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003428:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800342c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800342e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003430:	3301      	adds	r3, #1
 8003432:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800343a:	429a      	cmp	r2, r3
 800343c:	d3b3      	bcc.n	80033a6 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	69fa      	ldr	r2, [r7, #28]
 8003448:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800344c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003450:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003456:	2b00      	cmp	r3, #0
 8003458:	d016      	beq.n	8003488 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003460:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003464:	69fa      	ldr	r2, [r7, #28]
 8003466:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800346a:	f043 030b 	orr.w	r3, r3, #11
 800346e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347a:	69fa      	ldr	r2, [r7, #28]
 800347c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003480:	f043 030b 	orr.w	r3, r3, #11
 8003484:	6453      	str	r3, [r2, #68]	; 0x44
 8003486:	e015      	b.n	80034b4 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	69fa      	ldr	r2, [r7, #28]
 8003492:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003496:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800349a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800349e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	69fa      	ldr	r2, [r7, #28]
 80034aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034ae:	f043 030b 	orr.w	r3, r3, #11
 80034b2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	69fa      	ldr	r2, [r7, #28]
 80034be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034c2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80034c6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6818      	ldr	r0, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80034d8:	461a      	mov	r2, r3
 80034da:	f005 fcf7 	bl	8008ecc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	695a      	ldr	r2, [r3, #20]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80034ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f005 fc26 	bl	8008d44 <USB_ReadInterrupts>
 80034f8:	4603      	mov	r3, r0
 80034fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003502:	d124      	bne.n	800354e <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4618      	mov	r0, r3
 800350a:	f005 fcbc 	bl	8008e86 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4618      	mov	r0, r3
 8003514:	f004 fc71 	bl	8007dfa <USB_GetDevSpeed>
 8003518:	4603      	mov	r3, r0
 800351a:	461a      	mov	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681c      	ldr	r4, [r3, #0]
 8003524:	f000 fec2 	bl	80042ac <HAL_RCC_GetHCLKFreq>
 8003528:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800352e:	b2db      	uxtb	r3, r3
 8003530:	461a      	mov	r2, r3
 8003532:	4620      	mov	r0, r4
 8003534:	f004 f976 	bl	8007824 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f007 ffb6 	bl	800b4aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	695a      	ldr	r2, [r3, #20]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800354c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4618      	mov	r0, r3
 8003554:	f005 fbf6 	bl	8008d44 <USB_ReadInterrupts>
 8003558:	4603      	mov	r3, r0
 800355a:	f003 0308 	and.w	r3, r3, #8
 800355e:	2b08      	cmp	r3, #8
 8003560:	d10a      	bne.n	8003578 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f007 ff93 	bl	800b48e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	695a      	ldr	r2, [r3, #20]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f002 0208 	and.w	r2, r2, #8
 8003576:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	f005 fbe1 	bl	8008d44 <USB_ReadInterrupts>
 8003582:	4603      	mov	r3, r0
 8003584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003588:	2b80      	cmp	r3, #128	; 0x80
 800358a:	d122      	bne.n	80035d2 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800358c:	6a3b      	ldr	r3, [r7, #32]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003594:	6a3b      	ldr	r3, [r7, #32]
 8003596:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003598:	2301      	movs	r3, #1
 800359a:	627b      	str	r3, [r7, #36]	; 0x24
 800359c:	e014      	b.n	80035c8 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035a2:	4613      	mov	r3, r2
 80035a4:	00db      	lsls	r3, r3, #3
 80035a6:	4413      	add	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	440b      	add	r3, r1
 80035ac:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d105      	bne.n	80035c2 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80035b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	4619      	mov	r1, r3
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 fb27 	bl	8003c10 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	3301      	adds	r3, #1
 80035c6:	627b      	str	r3, [r7, #36]	; 0x24
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d3e5      	bcc.n	800359e <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f005 fbb4 	bl	8008d44 <USB_ReadInterrupts>
 80035dc:	4603      	mov	r3, r0
 80035de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035e6:	d13b      	bne.n	8003660 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035e8:	2301      	movs	r3, #1
 80035ea:	627b      	str	r3, [r7, #36]	; 0x24
 80035ec:	e02b      	b.n	8003646 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	015a      	lsls	r2, r3, #5
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	4413      	add	r3, r2
 80035f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80035fe:	6879      	ldr	r1, [r7, #4]
 8003600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003602:	4613      	mov	r3, r2
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	4413      	add	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	440b      	add	r3, r1
 800360c:	3340      	adds	r3, #64	; 0x40
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d115      	bne.n	8003640 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003614:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003616:	2b00      	cmp	r3, #0
 8003618:	da12      	bge.n	8003640 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800361e:	4613      	mov	r3, r2
 8003620:	00db      	lsls	r3, r3, #3
 8003622:	4413      	add	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	440b      	add	r3, r1
 8003628:	333f      	adds	r3, #63	; 0x3f
 800362a:	2201      	movs	r2, #1
 800362c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800362e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003630:	b2db      	uxtb	r3, r3
 8003632:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003636:	b2db      	uxtb	r3, r3
 8003638:	4619      	mov	r1, r3
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 fae8 	bl	8003c10 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	3301      	adds	r3, #1
 8003644:	627b      	str	r3, [r7, #36]	; 0x24
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800364c:	429a      	cmp	r2, r3
 800364e:	d3ce      	bcc.n	80035ee <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	695a      	ldr	r2, [r3, #20]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800365e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4618      	mov	r0, r3
 8003666:	f005 fb6d 	bl	8008d44 <USB_ReadInterrupts>
 800366a:	4603      	mov	r3, r0
 800366c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003670:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003674:	d155      	bne.n	8003722 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003676:	2301      	movs	r3, #1
 8003678:	627b      	str	r3, [r7, #36]	; 0x24
 800367a:	e045      	b.n	8003708 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367e:	015a      	lsls	r2, r3, #5
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	4413      	add	r3, r2
 8003684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800368c:	6879      	ldr	r1, [r7, #4]
 800368e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003690:	4613      	mov	r3, r2
 8003692:	00db      	lsls	r3, r3, #3
 8003694:	4413      	add	r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	440b      	add	r3, r1
 800369a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d12e      	bne.n	8003702 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80036a4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	da2b      	bge.n	8003702 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80036b6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d121      	bne.n	8003702 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80036be:	6879      	ldr	r1, [r7, #4]
 80036c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036c2:	4613      	mov	r3, r2
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	4413      	add	r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	440b      	add	r3, r1
 80036cc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80036d0:	2201      	movs	r2, #1
 80036d2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80036dc:	6a3b      	ldr	r3, [r7, #32]
 80036de:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80036e0:	6a3b      	ldr	r3, [r7, #32]
 80036e2:	695b      	ldr	r3, [r3, #20]
 80036e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d10a      	bne.n	8003702 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	69fa      	ldr	r2, [r7, #28]
 80036f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036fe:	6053      	str	r3, [r2, #4]
            break;
 8003700:	e007      	b.n	8003712 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003704:	3301      	adds	r3, #1
 8003706:	627b      	str	r3, [r7, #36]	; 0x24
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800370e:	429a      	cmp	r2, r3
 8003710:	d3b4      	bcc.n	800367c <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	695a      	ldr	r2, [r3, #20]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003720:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f005 fb0c 	bl	8008d44 <USB_ReadInterrupts>
 800372c:	4603      	mov	r3, r0
 800372e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003736:	d10a      	bne.n	800374e <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f007 ff37 	bl	800b5ac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	695a      	ldr	r2, [r3, #20]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800374c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4618      	mov	r0, r3
 8003754:	f005 faf6 	bl	8008d44 <USB_ReadInterrupts>
 8003758:	4603      	mov	r3, r0
 800375a:	f003 0304 	and.w	r3, r3, #4
 800375e:	2b04      	cmp	r3, #4
 8003760:	d115      	bne.n	800378e <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	2b00      	cmp	r3, #0
 8003772:	d002      	beq.n	800377a <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f007 ff27 	bl	800b5c8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6859      	ldr	r1, [r3, #4]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	430a      	orrs	r2, r1
 8003788:	605a      	str	r2, [r3, #4]
 800378a:	e000      	b.n	800378e <HAL_PCD_IRQHandler+0x992>
      return;
 800378c:	bf00      	nop
    }
  }
}
 800378e:	3734      	adds	r7, #52	; 0x34
 8003790:	46bd      	mov	sp, r7
 8003792:	bd90      	pop	{r4, r7, pc}

08003794 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	460b      	mov	r3, r1
 800379e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d101      	bne.n	80037ae <HAL_PCD_SetAddress+0x1a>
 80037aa:	2302      	movs	r3, #2
 80037ac:	e013      	b.n	80037d6 <HAL_PCD_SetAddress+0x42>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	78fa      	ldrb	r2, [r7, #3]
 80037ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	78fa      	ldrb	r2, [r7, #3]
 80037c4:	4611      	mov	r1, r2
 80037c6:	4618      	mov	r0, r3
 80037c8:	f005 fa54 	bl	8008c74 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b084      	sub	sp, #16
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
 80037e6:	4608      	mov	r0, r1
 80037e8:	4611      	mov	r1, r2
 80037ea:	461a      	mov	r2, r3
 80037ec:	4603      	mov	r3, r0
 80037ee:	70fb      	strb	r3, [r7, #3]
 80037f0:	460b      	mov	r3, r1
 80037f2:	803b      	strh	r3, [r7, #0]
 80037f4:	4613      	mov	r3, r2
 80037f6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80037f8:	2300      	movs	r3, #0
 80037fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003800:	2b00      	cmp	r3, #0
 8003802:	da0f      	bge.n	8003824 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003804:	78fb      	ldrb	r3, [r7, #3]
 8003806:	f003 020f 	and.w	r2, r3, #15
 800380a:	4613      	mov	r3, r2
 800380c:	00db      	lsls	r3, r3, #3
 800380e:	4413      	add	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	3338      	adds	r3, #56	; 0x38
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	4413      	add	r3, r2
 8003818:	3304      	adds	r3, #4
 800381a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2201      	movs	r2, #1
 8003820:	705a      	strb	r2, [r3, #1]
 8003822:	e00f      	b.n	8003844 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003824:	78fb      	ldrb	r3, [r7, #3]
 8003826:	f003 020f 	and.w	r2, r3, #15
 800382a:	4613      	mov	r3, r2
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	4413      	add	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	4413      	add	r3, r2
 800383a:	3304      	adds	r3, #4
 800383c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003844:	78fb      	ldrb	r3, [r7, #3]
 8003846:	f003 030f 	and.w	r3, r3, #15
 800384a:	b2da      	uxtb	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003850:	883a      	ldrh	r2, [r7, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	78ba      	ldrb	r2, [r7, #2]
 800385a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	785b      	ldrb	r3, [r3, #1]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d004      	beq.n	800386e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	b29a      	uxth	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800386e:	78bb      	ldrb	r3, [r7, #2]
 8003870:	2b02      	cmp	r3, #2
 8003872:	d102      	bne.n	800387a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003880:	2b01      	cmp	r3, #1
 8003882:	d101      	bne.n	8003888 <HAL_PCD_EP_Open+0xaa>
 8003884:	2302      	movs	r3, #2
 8003886:	e00e      	b.n	80038a6 <HAL_PCD_EP_Open+0xc8>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68f9      	ldr	r1, [r7, #12]
 8003896:	4618      	mov	r0, r3
 8003898:	f004 fad4 	bl	8007e44 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80038a4:	7afb      	ldrb	r3, [r7, #11]
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b084      	sub	sp, #16
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
 80038b6:	460b      	mov	r3, r1
 80038b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80038ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	da0f      	bge.n	80038e2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038c2:	78fb      	ldrb	r3, [r7, #3]
 80038c4:	f003 020f 	and.w	r2, r3, #15
 80038c8:	4613      	mov	r3, r2
 80038ca:	00db      	lsls	r3, r3, #3
 80038cc:	4413      	add	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	3338      	adds	r3, #56	; 0x38
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	4413      	add	r3, r2
 80038d6:	3304      	adds	r3, #4
 80038d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2201      	movs	r2, #1
 80038de:	705a      	strb	r2, [r3, #1]
 80038e0:	e00f      	b.n	8003902 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038e2:	78fb      	ldrb	r3, [r7, #3]
 80038e4:	f003 020f 	and.w	r2, r3, #15
 80038e8:	4613      	mov	r3, r2
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	4413      	add	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	4413      	add	r3, r2
 80038f8:	3304      	adds	r3, #4
 80038fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003902:	78fb      	ldrb	r3, [r7, #3]
 8003904:	f003 030f 	and.w	r3, r3, #15
 8003908:	b2da      	uxtb	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003914:	2b01      	cmp	r3, #1
 8003916:	d101      	bne.n	800391c <HAL_PCD_EP_Close+0x6e>
 8003918:	2302      	movs	r3, #2
 800391a:	e00e      	b.n	800393a <HAL_PCD_EP_Close+0x8c>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68f9      	ldr	r1, [r7, #12]
 800392a:	4618      	mov	r0, r3
 800392c:	f004 fb12 	bl	8007f54 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b086      	sub	sp, #24
 8003946:	af00      	add	r7, sp, #0
 8003948:	60f8      	str	r0, [r7, #12]
 800394a:	607a      	str	r2, [r7, #4]
 800394c:	603b      	str	r3, [r7, #0]
 800394e:	460b      	mov	r3, r1
 8003950:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003952:	7afb      	ldrb	r3, [r7, #11]
 8003954:	f003 020f 	and.w	r2, r3, #15
 8003958:	4613      	mov	r3, r2
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	4413      	add	r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	4413      	add	r3, r2
 8003968:	3304      	adds	r3, #4
 800396a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	683a      	ldr	r2, [r7, #0]
 8003976:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	2200      	movs	r2, #0
 800397c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	2200      	movs	r2, #0
 8003982:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003984:	7afb      	ldrb	r3, [r7, #11]
 8003986:	f003 030f 	and.w	r3, r3, #15
 800398a:	b2da      	uxtb	r2, r3
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d102      	bne.n	800399e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800399e:	7afb      	ldrb	r3, [r7, #11]
 80039a0:	f003 030f 	and.w	r3, r3, #15
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d109      	bne.n	80039bc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6818      	ldr	r0, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	461a      	mov	r2, r3
 80039b4:	6979      	ldr	r1, [r7, #20]
 80039b6:	f004 fdf1 	bl	800859c <USB_EP0StartXfer>
 80039ba:	e008      	b.n	80039ce <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6818      	ldr	r0, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	461a      	mov	r2, r3
 80039c8:	6979      	ldr	r1, [r7, #20]
 80039ca:	f004 fb9f 	bl	800810c <USB_EPStartXfer>
  }

  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3718      	adds	r7, #24
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	460b      	mov	r3, r1
 80039e2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80039e4:	78fb      	ldrb	r3, [r7, #3]
 80039e6:	f003 020f 	and.w	r2, r3, #15
 80039ea:	6879      	ldr	r1, [r7, #4]
 80039ec:	4613      	mov	r3, r2
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	4413      	add	r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80039fa:	681b      	ldr	r3, [r3, #0]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	607a      	str	r2, [r7, #4]
 8003a12:	603b      	str	r3, [r7, #0]
 8003a14:	460b      	mov	r3, r1
 8003a16:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a18:	7afb      	ldrb	r3, [r7, #11]
 8003a1a:	f003 020f 	and.w	r2, r3, #15
 8003a1e:	4613      	mov	r3, r2
 8003a20:	00db      	lsls	r3, r3, #3
 8003a22:	4413      	add	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	3338      	adds	r3, #56	; 0x38
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	3304      	adds	r3, #4
 8003a2e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	2201      	movs	r2, #1
 8003a46:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a48:	7afb      	ldrb	r3, [r7, #11]
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	b2da      	uxtb	r2, r3
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d102      	bne.n	8003a62 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a62:	7afb      	ldrb	r3, [r7, #11]
 8003a64:	f003 030f 	and.w	r3, r3, #15
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d109      	bne.n	8003a80 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6818      	ldr	r0, [r3, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	461a      	mov	r2, r3
 8003a78:	6979      	ldr	r1, [r7, #20]
 8003a7a:	f004 fd8f 	bl	800859c <USB_EP0StartXfer>
 8003a7e:	e008      	b.n	8003a92 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6818      	ldr	r0, [r3, #0]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	6979      	ldr	r1, [r7, #20]
 8003a8e:	f004 fb3d 	bl	800810c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3718      	adds	r7, #24
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003aa8:	78fb      	ldrb	r3, [r7, #3]
 8003aaa:	f003 020f 	and.w	r2, r3, #15
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d901      	bls.n	8003aba <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e050      	b.n	8003b5c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003aba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	da0f      	bge.n	8003ae2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ac2:	78fb      	ldrb	r3, [r7, #3]
 8003ac4:	f003 020f 	and.w	r2, r3, #15
 8003ac8:	4613      	mov	r3, r2
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	4413      	add	r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	3338      	adds	r3, #56	; 0x38
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	3304      	adds	r3, #4
 8003ad8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2201      	movs	r2, #1
 8003ade:	705a      	strb	r2, [r3, #1]
 8003ae0:	e00d      	b.n	8003afe <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003ae2:	78fa      	ldrb	r2, [r7, #3]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	4413      	add	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	4413      	add	r3, r2
 8003af4:	3304      	adds	r3, #4
 8003af6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2201      	movs	r2, #1
 8003b02:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b04:	78fb      	ldrb	r3, [r7, #3]
 8003b06:	f003 030f 	and.w	r3, r3, #15
 8003b0a:	b2da      	uxtb	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d101      	bne.n	8003b1e <HAL_PCD_EP_SetStall+0x82>
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	e01e      	b.n	8003b5c <HAL_PCD_EP_SetStall+0xc0>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68f9      	ldr	r1, [r7, #12]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f004 ffcd 	bl	8008acc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b32:	78fb      	ldrb	r3, [r7, #3]
 8003b34:	f003 030f 	and.w	r3, r3, #15
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10a      	bne.n	8003b52 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6818      	ldr	r0, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	b2d9      	uxtb	r1, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	f005 f9bd 	bl	8008ecc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003b70:	78fb      	ldrb	r3, [r7, #3]
 8003b72:	f003 020f 	and.w	r2, r3, #15
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d901      	bls.n	8003b82 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e042      	b.n	8003c08 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	da0f      	bge.n	8003baa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b8a:	78fb      	ldrb	r3, [r7, #3]
 8003b8c:	f003 020f 	and.w	r2, r3, #15
 8003b90:	4613      	mov	r3, r2
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	4413      	add	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	3338      	adds	r3, #56	; 0x38
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	3304      	adds	r3, #4
 8003ba0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	705a      	strb	r2, [r3, #1]
 8003ba8:	e00f      	b.n	8003bca <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003baa:	78fb      	ldrb	r3, [r7, #3]
 8003bac:	f003 020f 	and.w	r2, r3, #15
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	4413      	add	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	3304      	adds	r3, #4
 8003bc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bd0:	78fb      	ldrb	r3, [r7, #3]
 8003bd2:	f003 030f 	and.w	r3, r3, #15
 8003bd6:	b2da      	uxtb	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d101      	bne.n	8003bea <HAL_PCD_EP_ClrStall+0x86>
 8003be6:	2302      	movs	r3, #2
 8003be8:	e00e      	b.n	8003c08 <HAL_PCD_EP_ClrStall+0xa4>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68f9      	ldr	r1, [r7, #12]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f004 ffd5 	bl	8008ba8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	460b      	mov	r3, r1
 8003c1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003c1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	da0c      	bge.n	8003c3e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c24:	78fb      	ldrb	r3, [r7, #3]
 8003c26:	f003 020f 	and.w	r2, r3, #15
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	4413      	add	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	3338      	adds	r3, #56	; 0x38
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	4413      	add	r3, r2
 8003c38:	3304      	adds	r3, #4
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	e00c      	b.n	8003c58 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c3e:	78fb      	ldrb	r3, [r7, #3]
 8003c40:	f003 020f 	and.w	r2, r3, #15
 8003c44:	4613      	mov	r3, r2
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	4413      	add	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	4413      	add	r3, r2
 8003c54:	3304      	adds	r3, #4
 8003c56:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68f9      	ldr	r1, [r7, #12]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f004 fdf4 	bl	800884c <USB_EPStopXfer>
 8003c64:	4603      	mov	r3, r0
 8003c66:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003c68:	7afb      	ldrb	r3, [r7, #11]
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b08a      	sub	sp, #40	; 0x28
 8003c76:	af02      	add	r7, sp, #8
 8003c78:	6078      	str	r0, [r7, #4]
 8003c7a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003c86:	683a      	ldr	r2, [r7, #0]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	4413      	add	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	3338      	adds	r3, #56	; 0x38
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	4413      	add	r3, r2
 8003c96:	3304      	adds	r3, #4
 8003c98:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6a1a      	ldr	r2, [r3, #32]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d901      	bls.n	8003caa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e06c      	b.n	8003d84 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	699a      	ldr	r2, [r3, #24]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	69fa      	ldr	r2, [r7, #28]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d902      	bls.n	8003cc6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	3303      	adds	r3, #3
 8003cca:	089b      	lsrs	r3, r3, #2
 8003ccc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003cce:	e02b      	b.n	8003d28 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	699a      	ldr	r2, [r3, #24]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	69fa      	ldr	r2, [r7, #28]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d902      	bls.n	8003cec <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	3303      	adds	r3, #3
 8003cf0:	089b      	lsrs	r3, r3, #2
 8003cf2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6919      	ldr	r1, [r3, #16]
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	b2da      	uxtb	r2, r3
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	9300      	str	r3, [sp, #0]
 8003d08:	4603      	mov	r3, r0
 8003d0a:	6978      	ldr	r0, [r7, #20]
 8003d0c:	f004 fe48 	bl	80089a0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	691a      	ldr	r2, [r3, #16]
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	441a      	add	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6a1a      	ldr	r2, [r3, #32]
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	441a      	add	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	015a      	lsls	r2, r3, #5
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	4413      	add	r3, r2
 8003d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d809      	bhi.n	8003d52 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6a1a      	ldr	r2, [r3, #32]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d203      	bcs.n	8003d52 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1be      	bne.n	8003cd0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	699a      	ldr	r2, [r3, #24]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d811      	bhi.n	8003d82 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	f003 030f 	and.w	r3, r3, #15
 8003d64:	2201      	movs	r2, #1
 8003d66:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	43db      	mvns	r3, r3
 8003d78:	6939      	ldr	r1, [r7, #16]
 8003d7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d7e:	4013      	ands	r3, r2
 8003d80:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3720      	adds	r7, #32
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b088      	sub	sp, #32
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	333c      	adds	r3, #60	; 0x3c
 8003da4:	3304      	adds	r3, #4
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	015a      	lsls	r2, r3, #5
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	4413      	add	r3, r2
 8003db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d17b      	bne.n	8003eba <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	f003 0308 	and.w	r3, r3, #8
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d015      	beq.n	8003df8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	4a61      	ldr	r2, [pc, #388]	; (8003f54 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	f240 80b9 	bls.w	8003f48 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 80b3 	beq.w	8003f48 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	015a      	lsls	r2, r3, #5
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	4413      	add	r3, r2
 8003dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dee:	461a      	mov	r2, r3
 8003df0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003df4:	6093      	str	r3, [r2, #8]
 8003df6:	e0a7      	b.n	8003f48 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	f003 0320 	and.w	r3, r3, #32
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d009      	beq.n	8003e16 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	015a      	lsls	r2, r3, #5
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	4413      	add	r3, r2
 8003e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e0e:	461a      	mov	r2, r3
 8003e10:	2320      	movs	r3, #32
 8003e12:	6093      	str	r3, [r2, #8]
 8003e14:	e098      	b.n	8003f48 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f040 8093 	bne.w	8003f48 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	4a4b      	ldr	r2, [pc, #300]	; (8003f54 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d90f      	bls.n	8003e4a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00a      	beq.n	8003e4a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	015a      	lsls	r2, r3, #5
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e40:	461a      	mov	r2, r3
 8003e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e46:	6093      	str	r3, [r2, #8]
 8003e48:	e07e      	b.n	8003f48 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003e4a:	683a      	ldr	r2, [r7, #0]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	4413      	add	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	69da      	ldr	r2, [r3, #28]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	0159      	lsls	r1, r3, #5
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	440b      	add	r3, r1
 8003e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e76:	1ad2      	subs	r2, r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d114      	bne.n	8003eac <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d109      	bne.n	8003e9e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6818      	ldr	r0, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e94:	461a      	mov	r2, r3
 8003e96:	2101      	movs	r1, #1
 8003e98:	f005 f818 	bl	8008ecc <USB_EP0_OutStart>
 8003e9c:	e006      	b.n	8003eac <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	691a      	ldr	r2, [r3, #16]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	441a      	add	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f007 fab6 	bl	800b424 <HAL_PCD_DataOutStageCallback>
 8003eb8:	e046      	b.n	8003f48 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	4a26      	ldr	r2, [pc, #152]	; (8003f58 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d124      	bne.n	8003f0c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00a      	beq.n	8003ee2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	015a      	lsls	r2, r3, #5
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ed8:	461a      	mov	r2, r3
 8003eda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ede:	6093      	str	r3, [r2, #8]
 8003ee0:	e032      	b.n	8003f48 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	f003 0320 	and.w	r3, r3, #32
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d008      	beq.n	8003efe <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	015a      	lsls	r2, r3, #5
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef8:	461a      	mov	r2, r3
 8003efa:	2320      	movs	r3, #32
 8003efc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	4619      	mov	r1, r3
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f007 fa8d 	bl	800b424 <HAL_PCD_DataOutStageCallback>
 8003f0a:	e01d      	b.n	8003f48 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d114      	bne.n	8003f3c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003f12:	6879      	ldr	r1, [r7, #4]
 8003f14:	683a      	ldr	r2, [r7, #0]
 8003f16:	4613      	mov	r3, r2
 8003f18:	00db      	lsls	r3, r3, #3
 8003f1a:	4413      	add	r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	440b      	add	r3, r1
 8003f20:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d108      	bne.n	8003f3c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6818      	ldr	r0, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003f34:	461a      	mov	r2, r3
 8003f36:	2100      	movs	r1, #0
 8003f38:	f004 ffc8 	bl	8008ecc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	4619      	mov	r1, r3
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f007 fa6e 	bl	800b424 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3720      	adds	r7, #32
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	4f54300a 	.word	0x4f54300a
 8003f58:	4f54310a 	.word	0x4f54310a

08003f5c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	333c      	adds	r3, #60	; 0x3c
 8003f74:	3304      	adds	r3, #4
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	015a      	lsls	r2, r3, #5
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	4413      	add	r3, r2
 8003f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	4a15      	ldr	r2, [pc, #84]	; (8003fe4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d90e      	bls.n	8003fb0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d009      	beq.n	8003fb0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	015a      	lsls	r2, r3, #5
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fa8:	461a      	mov	r2, r3
 8003faa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f007 fa25 	bl	800b400 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	4a0a      	ldr	r2, [pc, #40]	; (8003fe4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d90c      	bls.n	8003fd8 <PCD_EP_OutSetupPacket_int+0x7c>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d108      	bne.n	8003fd8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6818      	ldr	r0, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	f004 ff7a 	bl	8008ecc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3718      	adds	r7, #24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	4f54300a 	.word	0x4f54300a

08003fe8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	70fb      	strb	r3, [r7, #3]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004000:	78fb      	ldrb	r3, [r7, #3]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d107      	bne.n	8004016 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004006:	883b      	ldrh	r3, [r7, #0]
 8004008:	0419      	lsls	r1, r3, #16
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	430a      	orrs	r2, r1
 8004012:	629a      	str	r2, [r3, #40]	; 0x28
 8004014:	e028      	b.n	8004068 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401c:	0c1b      	lsrs	r3, r3, #16
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	4413      	add	r3, r2
 8004022:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004024:	2300      	movs	r3, #0
 8004026:	73fb      	strb	r3, [r7, #15]
 8004028:	e00d      	b.n	8004046 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	7bfb      	ldrb	r3, [r7, #15]
 8004030:	3340      	adds	r3, #64	; 0x40
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4413      	add	r3, r2
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	0c1b      	lsrs	r3, r3, #16
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	4413      	add	r3, r2
 800403e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004040:	7bfb      	ldrb	r3, [r7, #15]
 8004042:	3301      	adds	r3, #1
 8004044:	73fb      	strb	r3, [r7, #15]
 8004046:	7bfa      	ldrb	r2, [r7, #15]
 8004048:	78fb      	ldrb	r3, [r7, #3]
 800404a:	3b01      	subs	r3, #1
 800404c:	429a      	cmp	r2, r3
 800404e:	d3ec      	bcc.n	800402a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004050:	883b      	ldrh	r3, [r7, #0]
 8004052:	0418      	lsls	r0, r3, #16
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6819      	ldr	r1, [r3, #0]
 8004058:	78fb      	ldrb	r3, [r7, #3]
 800405a:	3b01      	subs	r3, #1
 800405c:	68ba      	ldr	r2, [r7, #8]
 800405e:	4302      	orrs	r2, r0
 8004060:	3340      	adds	r3, #64	; 0x40
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	440b      	add	r3, r1
 8004066:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3714      	adds	r7, #20
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr

08004076 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004076:	b480      	push	{r7}
 8004078:	b083      	sub	sp, #12
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
 800407e:	460b      	mov	r3, r1
 8004080:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	887a      	ldrh	r2, [r7, #2]
 8004088:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ca:	f043 0303 	orr.w	r3, r3, #3
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3714      	adds	r7, #20
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d101      	bne.n	80040f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e0cc      	b.n	800428e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040f4:	4b68      	ldr	r3, [pc, #416]	; (8004298 <HAL_RCC_ClockConfig+0x1b8>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 030f 	and.w	r3, r3, #15
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d90c      	bls.n	800411c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004102:	4b65      	ldr	r3, [pc, #404]	; (8004298 <HAL_RCC_ClockConfig+0x1b8>)
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	b2d2      	uxtb	r2, r2
 8004108:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800410a:	4b63      	ldr	r3, [pc, #396]	; (8004298 <HAL_RCC_ClockConfig+0x1b8>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 030f 	and.w	r3, r3, #15
 8004112:	683a      	ldr	r2, [r7, #0]
 8004114:	429a      	cmp	r2, r3
 8004116:	d001      	beq.n	800411c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e0b8      	b.n	800428e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0302 	and.w	r3, r3, #2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d020      	beq.n	800416a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0304 	and.w	r3, r3, #4
 8004130:	2b00      	cmp	r3, #0
 8004132:	d005      	beq.n	8004140 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004134:	4b59      	ldr	r3, [pc, #356]	; (800429c <HAL_RCC_ClockConfig+0x1bc>)
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	4a58      	ldr	r2, [pc, #352]	; (800429c <HAL_RCC_ClockConfig+0x1bc>)
 800413a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800413e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0308 	and.w	r3, r3, #8
 8004148:	2b00      	cmp	r3, #0
 800414a:	d005      	beq.n	8004158 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800414c:	4b53      	ldr	r3, [pc, #332]	; (800429c <HAL_RCC_ClockConfig+0x1bc>)
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	4a52      	ldr	r2, [pc, #328]	; (800429c <HAL_RCC_ClockConfig+0x1bc>)
 8004152:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004156:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004158:	4b50      	ldr	r3, [pc, #320]	; (800429c <HAL_RCC_ClockConfig+0x1bc>)
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	494d      	ldr	r1, [pc, #308]	; (800429c <HAL_RCC_ClockConfig+0x1bc>)
 8004166:	4313      	orrs	r3, r2
 8004168:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	2b00      	cmp	r3, #0
 8004174:	d044      	beq.n	8004200 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d107      	bne.n	800418e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800417e:	4b47      	ldr	r3, [pc, #284]	; (800429c <HAL_RCC_ClockConfig+0x1bc>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d119      	bne.n	80041be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e07f      	b.n	800428e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	2b02      	cmp	r3, #2
 8004194:	d003      	beq.n	800419e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800419a:	2b03      	cmp	r3, #3
 800419c:	d107      	bne.n	80041ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800419e:	4b3f      	ldr	r3, [pc, #252]	; (800429c <HAL_RCC_ClockConfig+0x1bc>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d109      	bne.n	80041be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e06f      	b.n	800428e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ae:	4b3b      	ldr	r3, [pc, #236]	; (800429c <HAL_RCC_ClockConfig+0x1bc>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e067      	b.n	800428e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041be:	4b37      	ldr	r3, [pc, #220]	; (800429c <HAL_RCC_ClockConfig+0x1bc>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f023 0203 	bic.w	r2, r3, #3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	4934      	ldr	r1, [pc, #208]	; (800429c <HAL_RCC_ClockConfig+0x1bc>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041d0:	f7fd fce8 	bl	8001ba4 <HAL_GetTick>
 80041d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041d6:	e00a      	b.n	80041ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041d8:	f7fd fce4 	bl	8001ba4 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e04f      	b.n	800428e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ee:	4b2b      	ldr	r3, [pc, #172]	; (800429c <HAL_RCC_ClockConfig+0x1bc>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f003 020c 	and.w	r2, r3, #12
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d1eb      	bne.n	80041d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004200:	4b25      	ldr	r3, [pc, #148]	; (8004298 <HAL_RCC_ClockConfig+0x1b8>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 030f 	and.w	r3, r3, #15
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	429a      	cmp	r2, r3
 800420c:	d20c      	bcs.n	8004228 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800420e:	4b22      	ldr	r3, [pc, #136]	; (8004298 <HAL_RCC_ClockConfig+0x1b8>)
 8004210:	683a      	ldr	r2, [r7, #0]
 8004212:	b2d2      	uxtb	r2, r2
 8004214:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004216:	4b20      	ldr	r3, [pc, #128]	; (8004298 <HAL_RCC_ClockConfig+0x1b8>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 030f 	and.w	r3, r3, #15
 800421e:	683a      	ldr	r2, [r7, #0]
 8004220:	429a      	cmp	r2, r3
 8004222:	d001      	beq.n	8004228 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e032      	b.n	800428e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0304 	and.w	r3, r3, #4
 8004230:	2b00      	cmp	r3, #0
 8004232:	d008      	beq.n	8004246 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004234:	4b19      	ldr	r3, [pc, #100]	; (800429c <HAL_RCC_ClockConfig+0x1bc>)
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	4916      	ldr	r1, [pc, #88]	; (800429c <HAL_RCC_ClockConfig+0x1bc>)
 8004242:	4313      	orrs	r3, r2
 8004244:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0308 	and.w	r3, r3, #8
 800424e:	2b00      	cmp	r3, #0
 8004250:	d009      	beq.n	8004266 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004252:	4b12      	ldr	r3, [pc, #72]	; (800429c <HAL_RCC_ClockConfig+0x1bc>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	00db      	lsls	r3, r3, #3
 8004260:	490e      	ldr	r1, [pc, #56]	; (800429c <HAL_RCC_ClockConfig+0x1bc>)
 8004262:	4313      	orrs	r3, r2
 8004264:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004266:	f000 fb7f 	bl	8004968 <HAL_RCC_GetSysClockFreq>
 800426a:	4602      	mov	r2, r0
 800426c:	4b0b      	ldr	r3, [pc, #44]	; (800429c <HAL_RCC_ClockConfig+0x1bc>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	091b      	lsrs	r3, r3, #4
 8004272:	f003 030f 	and.w	r3, r3, #15
 8004276:	490a      	ldr	r1, [pc, #40]	; (80042a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004278:	5ccb      	ldrb	r3, [r1, r3]
 800427a:	fa22 f303 	lsr.w	r3, r2, r3
 800427e:	4a09      	ldr	r2, [pc, #36]	; (80042a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004280:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004282:	4b09      	ldr	r3, [pc, #36]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4618      	mov	r0, r3
 8004288:	f7fd fc48 	bl	8001b1c <HAL_InitTick>

  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	40023c00 	.word	0x40023c00
 800429c:	40023800 	.word	0x40023800
 80042a0:	080103c0 	.word	0x080103c0
 80042a4:	20000010 	.word	0x20000010
 80042a8:	20000014 	.word	0x20000014

080042ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042b0:	4b03      	ldr	r3, [pc, #12]	; (80042c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80042b2:	681b      	ldr	r3, [r3, #0]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	20000010 	.word	0x20000010

080042c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042c8:	f7ff fff0 	bl	80042ac <HAL_RCC_GetHCLKFreq>
 80042cc:	4602      	mov	r2, r0
 80042ce:	4b05      	ldr	r3, [pc, #20]	; (80042e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	0a9b      	lsrs	r3, r3, #10
 80042d4:	f003 0307 	and.w	r3, r3, #7
 80042d8:	4903      	ldr	r1, [pc, #12]	; (80042e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042da:	5ccb      	ldrb	r3, [r1, r3]
 80042dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	40023800 	.word	0x40023800
 80042e8:	080103d0 	.word	0x080103d0

080042ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80042f0:	f7ff ffdc 	bl	80042ac <HAL_RCC_GetHCLKFreq>
 80042f4:	4602      	mov	r2, r0
 80042f6:	4b05      	ldr	r3, [pc, #20]	; (800430c <HAL_RCC_GetPCLK2Freq+0x20>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	0b5b      	lsrs	r3, r3, #13
 80042fc:	f003 0307 	and.w	r3, r3, #7
 8004300:	4903      	ldr	r1, [pc, #12]	; (8004310 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004302:	5ccb      	ldrb	r3, [r1, r3]
 8004304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004308:	4618      	mov	r0, r3
 800430a:	bd80      	pop	{r7, pc}
 800430c:	40023800 	.word	0x40023800
 8004310:	080103d0 	.word	0x080103d0

08004314 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b08c      	sub	sp, #48	; 0x30
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800431c:	2300      	movs	r3, #0
 800431e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8004320:	2300      	movs	r3, #0
 8004322:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8004324:	2300      	movs	r3, #0
 8004326:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8004328:	2300      	movs	r3, #0
 800432a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800432c:	2300      	movs	r3, #0
 800432e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8004330:	2300      	movs	r3, #0
 8004332:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8004334:	2300      	movs	r3, #0
 8004336:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8004338:	2300      	movs	r3, #0
 800433a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800433c:	2300      	movs	r3, #0
 800433e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	2b00      	cmp	r3, #0
 800434a:	d010      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800434c:	4b6f      	ldr	r3, [pc, #444]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800434e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004352:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435a:	496c      	ldr	r1, [pc, #432]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800435c:	4313      	orrs	r3, r2
 800435e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800436a:	2301      	movs	r3, #1
 800436c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d010      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800437a:	4b64      	ldr	r3, [pc, #400]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800437c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004380:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004388:	4960      	ldr	r1, [pc, #384]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800438a:	4313      	orrs	r3, r2
 800438c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8004398:	2301      	movs	r3, #1
 800439a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0304 	and.w	r3, r3, #4
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d017      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043a8:	4b58      	ldr	r3, [pc, #352]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80043aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b6:	4955      	ldr	r1, [pc, #340]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043c6:	d101      	bne.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80043c8:	2301      	movs	r3, #1
 80043ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d101      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80043d4:	2301      	movs	r3, #1
 80043d6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0308 	and.w	r3, r3, #8
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d017      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80043e4:	4b49      	ldr	r3, [pc, #292]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80043e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f2:	4946      	ldr	r1, [pc, #280]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004402:	d101      	bne.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004404:	2301      	movs	r3, #1
 8004406:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800440c:	2b00      	cmp	r3, #0
 800440e:	d101      	bne.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8004410:	2301      	movs	r3, #1
 8004412:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0320 	and.w	r3, r3, #32
 800441c:	2b00      	cmp	r3, #0
 800441e:	f000 808a 	beq.w	8004536 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004422:	2300      	movs	r3, #0
 8004424:	60bb      	str	r3, [r7, #8]
 8004426:	4b39      	ldr	r3, [pc, #228]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	4a38      	ldr	r2, [pc, #224]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800442c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004430:	6413      	str	r3, [r2, #64]	; 0x40
 8004432:	4b36      	ldr	r3, [pc, #216]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800443a:	60bb      	str	r3, [r7, #8]
 800443c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800443e:	4b34      	ldr	r3, [pc, #208]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a33      	ldr	r2, [pc, #204]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004448:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800444a:	f7fd fbab 	bl	8001ba4 <HAL_GetTick>
 800444e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004450:	e008      	b.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004452:	f7fd fba7 	bl	8001ba4 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	2b02      	cmp	r3, #2
 800445e:	d901      	bls.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e278      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004464:	4b2a      	ldr	r3, [pc, #168]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446c:	2b00      	cmp	r3, #0
 800446e:	d0f0      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004470:	4b26      	ldr	r3, [pc, #152]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004474:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004478:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800447a:	6a3b      	ldr	r3, [r7, #32]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d02f      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004484:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004488:	6a3a      	ldr	r2, [r7, #32]
 800448a:	429a      	cmp	r2, r3
 800448c:	d028      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800448e:	4b1f      	ldr	r3, [pc, #124]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004496:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004498:	4b1e      	ldr	r3, [pc, #120]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800449a:	2201      	movs	r2, #1
 800449c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800449e:	4b1d      	ldr	r3, [pc, #116]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80044a4:	4a19      	ldr	r2, [pc, #100]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80044a6:	6a3b      	ldr	r3, [r7, #32]
 80044a8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80044aa:	4b18      	ldr	r3, [pc, #96]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80044ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d114      	bne.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80044b6:	f7fd fb75 	bl	8001ba4 <HAL_GetTick>
 80044ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044bc:	e00a      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044be:	f7fd fb71 	bl	8001ba4 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e240      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044d4:	4b0d      	ldr	r3, [pc, #52]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80044d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0ee      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044ec:	d114      	bne.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80044ee:	4b07      	ldr	r3, [pc, #28]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80044fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004502:	4902      	ldr	r1, [pc, #8]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004504:	4313      	orrs	r3, r2
 8004506:	608b      	str	r3, [r1, #8]
 8004508:	e00c      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800450a:	bf00      	nop
 800450c:	40023800 	.word	0x40023800
 8004510:	40007000 	.word	0x40007000
 8004514:	42470e40 	.word	0x42470e40
 8004518:	4b4a      	ldr	r3, [pc, #296]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	4a49      	ldr	r2, [pc, #292]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800451e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004522:	6093      	str	r3, [r2, #8]
 8004524:	4b47      	ldr	r3, [pc, #284]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004526:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004530:	4944      	ldr	r1, [pc, #272]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004532:	4313      	orrs	r3, r2
 8004534:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0310 	and.w	r3, r3, #16
 800453e:	2b00      	cmp	r3, #0
 8004540:	d004      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8004548:	4b3f      	ldr	r3, [pc, #252]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800454a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00a      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004558:	4b3a      	ldr	r3, [pc, #232]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800455a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800455e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004566:	4937      	ldr	r1, [pc, #220]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004568:	4313      	orrs	r3, r2
 800456a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00a      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800457a:	4b32      	ldr	r3, [pc, #200]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800457c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004580:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004588:	492e      	ldr	r1, [pc, #184]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800458a:	4313      	orrs	r3, r2
 800458c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004598:	2b00      	cmp	r3, #0
 800459a:	d011      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800459c:	4b29      	ldr	r3, [pc, #164]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800459e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045a2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045aa:	4926      	ldr	r1, [pc, #152]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045ba:	d101      	bne.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80045bc:	2301      	movs	r3, #1
 80045be:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00a      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80045cc:	4b1d      	ldr	r3, [pc, #116]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80045ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045d2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045da:	491a      	ldr	r1, [pc, #104]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d011      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80045ee:	4b15      	ldr	r3, [pc, #84]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80045f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045f4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045fc:	4911      	ldr	r1, [pc, #68]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004608:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800460c:	d101      	bne.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800460e:	2301      	movs	r3, #1
 8004610:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004614:	2b01      	cmp	r3, #1
 8004616:	d005      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004620:	f040 80ff 	bne.w	8004822 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004624:	4b09      	ldr	r3, [pc, #36]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004626:	2200      	movs	r2, #0
 8004628:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800462a:	f7fd fabb 	bl	8001ba4 <HAL_GetTick>
 800462e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004630:	e00e      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004632:	f7fd fab7 	bl	8001ba4 <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	2b02      	cmp	r3, #2
 800463e:	d907      	bls.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e188      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004644:	40023800 	.word	0x40023800
 8004648:	424711e0 	.word	0x424711e0
 800464c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004650:	4b7e      	ldr	r3, [pc, #504]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1ea      	bne.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	2b00      	cmp	r3, #0
 8004666:	d003      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466c:	2b00      	cmp	r3, #0
 800466e:	d009      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004678:	2b00      	cmp	r3, #0
 800467a:	d028      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004680:	2b00      	cmp	r3, #0
 8004682:	d124      	bne.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004684:	4b71      	ldr	r3, [pc, #452]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004686:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800468a:	0c1b      	lsrs	r3, r3, #16
 800468c:	f003 0303 	and.w	r3, r3, #3
 8004690:	3301      	adds	r3, #1
 8004692:	005b      	lsls	r3, r3, #1
 8004694:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004696:	4b6d      	ldr	r3, [pc, #436]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004698:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800469c:	0e1b      	lsrs	r3, r3, #24
 800469e:	f003 030f 	and.w	r3, r3, #15
 80046a2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	019b      	lsls	r3, r3, #6
 80046ae:	431a      	orrs	r2, r3
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	085b      	lsrs	r3, r3, #1
 80046b4:	3b01      	subs	r3, #1
 80046b6:	041b      	lsls	r3, r3, #16
 80046b8:	431a      	orrs	r2, r3
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	061b      	lsls	r3, r3, #24
 80046be:	431a      	orrs	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	695b      	ldr	r3, [r3, #20]
 80046c4:	071b      	lsls	r3, r3, #28
 80046c6:	4961      	ldr	r1, [pc, #388]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0304 	and.w	r3, r3, #4
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d004      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046e2:	d00a      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d035      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046f8:	d130      	bne.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80046fa:	4b54      	ldr	r3, [pc, #336]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80046fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004700:	0c1b      	lsrs	r3, r3, #16
 8004702:	f003 0303 	and.w	r3, r3, #3
 8004706:	3301      	adds	r3, #1
 8004708:	005b      	lsls	r3, r3, #1
 800470a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800470c:	4b4f      	ldr	r3, [pc, #316]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800470e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004712:	0f1b      	lsrs	r3, r3, #28
 8004714:	f003 0307 	and.w	r3, r3, #7
 8004718:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685a      	ldr	r2, [r3, #4]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	019b      	lsls	r3, r3, #6
 8004724:	431a      	orrs	r2, r3
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	085b      	lsrs	r3, r3, #1
 800472a:	3b01      	subs	r3, #1
 800472c:	041b      	lsls	r3, r3, #16
 800472e:	431a      	orrs	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	061b      	lsls	r3, r3, #24
 8004736:	431a      	orrs	r2, r3
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	071b      	lsls	r3, r3, #28
 800473c:	4943      	ldr	r1, [pc, #268]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800473e:	4313      	orrs	r3, r2
 8004740:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004744:	4b41      	ldr	r3, [pc, #260]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004746:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800474a:	f023 021f 	bic.w	r2, r3, #31
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004752:	3b01      	subs	r3, #1
 8004754:	493d      	ldr	r1, [pc, #244]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004756:	4313      	orrs	r3, r2
 8004758:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004764:	2b00      	cmp	r3, #0
 8004766:	d029      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800476c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004770:	d124      	bne.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004772:	4b36      	ldr	r3, [pc, #216]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004774:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004778:	0c1b      	lsrs	r3, r3, #16
 800477a:	f003 0303 	and.w	r3, r3, #3
 800477e:	3301      	adds	r3, #1
 8004780:	005b      	lsls	r3, r3, #1
 8004782:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004784:	4b31      	ldr	r3, [pc, #196]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004786:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800478a:	0f1b      	lsrs	r3, r3, #28
 800478c:	f003 0307 	and.w	r3, r3, #7
 8004790:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	019b      	lsls	r3, r3, #6
 800479c:	431a      	orrs	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	085b      	lsrs	r3, r3, #1
 80047a4:	3b01      	subs	r3, #1
 80047a6:	041b      	lsls	r3, r3, #16
 80047a8:	431a      	orrs	r2, r3
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	061b      	lsls	r3, r3, #24
 80047ae:	431a      	orrs	r2, r3
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	071b      	lsls	r3, r3, #28
 80047b4:	4925      	ldr	r1, [pc, #148]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d016      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685a      	ldr	r2, [r3, #4]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	019b      	lsls	r3, r3, #6
 80047d2:	431a      	orrs	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	085b      	lsrs	r3, r3, #1
 80047da:	3b01      	subs	r3, #1
 80047dc:	041b      	lsls	r3, r3, #16
 80047de:	431a      	orrs	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	061b      	lsls	r3, r3, #24
 80047e6:	431a      	orrs	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	695b      	ldr	r3, [r3, #20]
 80047ec:	071b      	lsls	r3, r3, #28
 80047ee:	4917      	ldr	r1, [pc, #92]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80047f6:	4b16      	ldr	r3, [pc, #88]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80047f8:	2201      	movs	r2, #1
 80047fa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80047fc:	f7fd f9d2 	bl	8001ba4 <HAL_GetTick>
 8004800:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004802:	e008      	b.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004804:	f7fd f9ce 	bl	8001ba4 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b02      	cmp	r3, #2
 8004810:	d901      	bls.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e09f      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004816:	4b0d      	ldr	r3, [pc, #52]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d0f0      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8004822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004824:	2b01      	cmp	r3, #1
 8004826:	f040 8095 	bne.w	8004954 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800482a:	4b0a      	ldr	r3, [pc, #40]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800482c:	2200      	movs	r2, #0
 800482e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004830:	f7fd f9b8 	bl	8001ba4 <HAL_GetTick>
 8004834:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004836:	e00f      	b.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004838:	f7fd f9b4 	bl	8001ba4 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b02      	cmp	r3, #2
 8004844:	d908      	bls.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e085      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800484a:	bf00      	nop
 800484c:	40023800 	.word	0x40023800
 8004850:	42470068 	.word	0x42470068
 8004854:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004858:	4b41      	ldr	r3, [pc, #260]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004860:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004864:	d0e8      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0304 	and.w	r3, r3, #4
 800486e:	2b00      	cmp	r3, #0
 8004870:	d003      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004876:	2b00      	cmp	r3, #0
 8004878:	d009      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004882:	2b00      	cmp	r3, #0
 8004884:	d02b      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800488a:	2b00      	cmp	r3, #0
 800488c:	d127      	bne.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800488e:	4b34      	ldr	r3, [pc, #208]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004894:	0c1b      	lsrs	r3, r3, #16
 8004896:	f003 0303 	and.w	r3, r3, #3
 800489a:	3301      	adds	r3, #1
 800489c:	005b      	lsls	r3, r3, #1
 800489e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	699a      	ldr	r2, [r3, #24]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	69db      	ldr	r3, [r3, #28]
 80048a8:	019b      	lsls	r3, r3, #6
 80048aa:	431a      	orrs	r2, r3
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	085b      	lsrs	r3, r3, #1
 80048b0:	3b01      	subs	r3, #1
 80048b2:	041b      	lsls	r3, r3, #16
 80048b4:	431a      	orrs	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ba:	061b      	lsls	r3, r3, #24
 80048bc:	4928      	ldr	r1, [pc, #160]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80048c4:	4b26      	ldr	r3, [pc, #152]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80048c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048ca:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d2:	3b01      	subs	r3, #1
 80048d4:	021b      	lsls	r3, r3, #8
 80048d6:	4922      	ldr	r1, [pc, #136]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d01d      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048f2:	d118      	bne.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80048f4:	4b1a      	ldr	r3, [pc, #104]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80048f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048fa:	0e1b      	lsrs	r3, r3, #24
 80048fc:	f003 030f 	and.w	r3, r3, #15
 8004900:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	699a      	ldr	r2, [r3, #24]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	69db      	ldr	r3, [r3, #28]
 800490a:	019b      	lsls	r3, r3, #6
 800490c:	431a      	orrs	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	085b      	lsrs	r3, r3, #1
 8004914:	3b01      	subs	r3, #1
 8004916:	041b      	lsls	r3, r3, #16
 8004918:	431a      	orrs	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	061b      	lsls	r3, r3, #24
 800491e:	4910      	ldr	r1, [pc, #64]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004920:	4313      	orrs	r3, r2
 8004922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004926:	4b0f      	ldr	r3, [pc, #60]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004928:	2201      	movs	r2, #1
 800492a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800492c:	f7fd f93a 	bl	8001ba4 <HAL_GetTick>
 8004930:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004932:	e008      	b.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004934:	f7fd f936 	bl	8001ba4 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b02      	cmp	r3, #2
 8004940:	d901      	bls.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e007      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004946:	4b06      	ldr	r3, [pc, #24]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800494e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004952:	d1ef      	bne.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3730      	adds	r7, #48	; 0x30
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	40023800 	.word	0x40023800
 8004964:	42470070 	.word	0x42470070

08004968 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800496c:	b0ae      	sub	sp, #184	; 0xb8
 800496e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004970:	2300      	movs	r3, #0
 8004972:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004976:	2300      	movs	r3, #0
 8004978:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800497c:	2300      	movs	r3, #0
 800497e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004982:	2300      	movs	r3, #0
 8004984:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004988:	2300      	movs	r3, #0
 800498a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800498e:	4bcb      	ldr	r3, [pc, #812]	; (8004cbc <HAL_RCC_GetSysClockFreq+0x354>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f003 030c 	and.w	r3, r3, #12
 8004996:	2b0c      	cmp	r3, #12
 8004998:	f200 8206 	bhi.w	8004da8 <HAL_RCC_GetSysClockFreq+0x440>
 800499c:	a201      	add	r2, pc, #4	; (adr r2, 80049a4 <HAL_RCC_GetSysClockFreq+0x3c>)
 800499e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a2:	bf00      	nop
 80049a4:	080049d9 	.word	0x080049d9
 80049a8:	08004da9 	.word	0x08004da9
 80049ac:	08004da9 	.word	0x08004da9
 80049b0:	08004da9 	.word	0x08004da9
 80049b4:	080049e1 	.word	0x080049e1
 80049b8:	08004da9 	.word	0x08004da9
 80049bc:	08004da9 	.word	0x08004da9
 80049c0:	08004da9 	.word	0x08004da9
 80049c4:	080049e9 	.word	0x080049e9
 80049c8:	08004da9 	.word	0x08004da9
 80049cc:	08004da9 	.word	0x08004da9
 80049d0:	08004da9 	.word	0x08004da9
 80049d4:	08004bd9 	.word	0x08004bd9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049d8:	4bb9      	ldr	r3, [pc, #740]	; (8004cc0 <HAL_RCC_GetSysClockFreq+0x358>)
 80049da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80049de:	e1e7      	b.n	8004db0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049e0:	4bb8      	ldr	r3, [pc, #736]	; (8004cc4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80049e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80049e6:	e1e3      	b.n	8004db0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049e8:	4bb4      	ldr	r3, [pc, #720]	; (8004cbc <HAL_RCC_GetSysClockFreq+0x354>)
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049f4:	4bb1      	ldr	r3, [pc, #708]	; (8004cbc <HAL_RCC_GetSysClockFreq+0x354>)
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d071      	beq.n	8004ae4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a00:	4bae      	ldr	r3, [pc, #696]	; (8004cbc <HAL_RCC_GetSysClockFreq+0x354>)
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	099b      	lsrs	r3, r3, #6
 8004a06:	2200      	movs	r2, #0
 8004a08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a0c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004a10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a18:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004a22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a26:	4622      	mov	r2, r4
 8004a28:	462b      	mov	r3, r5
 8004a2a:	f04f 0000 	mov.w	r0, #0
 8004a2e:	f04f 0100 	mov.w	r1, #0
 8004a32:	0159      	lsls	r1, r3, #5
 8004a34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a38:	0150      	lsls	r0, r2, #5
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	4621      	mov	r1, r4
 8004a40:	1a51      	subs	r1, r2, r1
 8004a42:	6439      	str	r1, [r7, #64]	; 0x40
 8004a44:	4629      	mov	r1, r5
 8004a46:	eb63 0301 	sbc.w	r3, r3, r1
 8004a4a:	647b      	str	r3, [r7, #68]	; 0x44
 8004a4c:	f04f 0200 	mov.w	r2, #0
 8004a50:	f04f 0300 	mov.w	r3, #0
 8004a54:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004a58:	4649      	mov	r1, r9
 8004a5a:	018b      	lsls	r3, r1, #6
 8004a5c:	4641      	mov	r1, r8
 8004a5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a62:	4641      	mov	r1, r8
 8004a64:	018a      	lsls	r2, r1, #6
 8004a66:	4641      	mov	r1, r8
 8004a68:	1a51      	subs	r1, r2, r1
 8004a6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a6c:	4649      	mov	r1, r9
 8004a6e:	eb63 0301 	sbc.w	r3, r3, r1
 8004a72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a74:	f04f 0200 	mov.w	r2, #0
 8004a78:	f04f 0300 	mov.w	r3, #0
 8004a7c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004a80:	4649      	mov	r1, r9
 8004a82:	00cb      	lsls	r3, r1, #3
 8004a84:	4641      	mov	r1, r8
 8004a86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a8a:	4641      	mov	r1, r8
 8004a8c:	00ca      	lsls	r2, r1, #3
 8004a8e:	4610      	mov	r0, r2
 8004a90:	4619      	mov	r1, r3
 8004a92:	4603      	mov	r3, r0
 8004a94:	4622      	mov	r2, r4
 8004a96:	189b      	adds	r3, r3, r2
 8004a98:	633b      	str	r3, [r7, #48]	; 0x30
 8004a9a:	462b      	mov	r3, r5
 8004a9c:	460a      	mov	r2, r1
 8004a9e:	eb42 0303 	adc.w	r3, r2, r3
 8004aa2:	637b      	str	r3, [r7, #52]	; 0x34
 8004aa4:	f04f 0200 	mov.w	r2, #0
 8004aa8:	f04f 0300 	mov.w	r3, #0
 8004aac:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004ab0:	4629      	mov	r1, r5
 8004ab2:	024b      	lsls	r3, r1, #9
 8004ab4:	4621      	mov	r1, r4
 8004ab6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004aba:	4621      	mov	r1, r4
 8004abc:	024a      	lsls	r2, r1, #9
 8004abe:	4610      	mov	r0, r2
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004acc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004ad0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004ad4:	f7fc f8f8 	bl	8000cc8 <__aeabi_uldivmod>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	460b      	mov	r3, r1
 8004adc:	4613      	mov	r3, r2
 8004ade:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ae2:	e067      	b.n	8004bb4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ae4:	4b75      	ldr	r3, [pc, #468]	; (8004cbc <HAL_RCC_GetSysClockFreq+0x354>)
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	099b      	lsrs	r3, r3, #6
 8004aea:	2200      	movs	r2, #0
 8004aec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004af0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004af4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004af8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004afc:	67bb      	str	r3, [r7, #120]	; 0x78
 8004afe:	2300      	movs	r3, #0
 8004b00:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004b02:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004b06:	4622      	mov	r2, r4
 8004b08:	462b      	mov	r3, r5
 8004b0a:	f04f 0000 	mov.w	r0, #0
 8004b0e:	f04f 0100 	mov.w	r1, #0
 8004b12:	0159      	lsls	r1, r3, #5
 8004b14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b18:	0150      	lsls	r0, r2, #5
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	4621      	mov	r1, r4
 8004b20:	1a51      	subs	r1, r2, r1
 8004b22:	62b9      	str	r1, [r7, #40]	; 0x28
 8004b24:	4629      	mov	r1, r5
 8004b26:	eb63 0301 	sbc.w	r3, r3, r1
 8004b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b2c:	f04f 0200 	mov.w	r2, #0
 8004b30:	f04f 0300 	mov.w	r3, #0
 8004b34:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004b38:	4649      	mov	r1, r9
 8004b3a:	018b      	lsls	r3, r1, #6
 8004b3c:	4641      	mov	r1, r8
 8004b3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b42:	4641      	mov	r1, r8
 8004b44:	018a      	lsls	r2, r1, #6
 8004b46:	4641      	mov	r1, r8
 8004b48:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b4c:	4649      	mov	r1, r9
 8004b4e:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b52:	f04f 0200 	mov.w	r2, #0
 8004b56:	f04f 0300 	mov.w	r3, #0
 8004b5a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b5e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b62:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b66:	4692      	mov	sl, r2
 8004b68:	469b      	mov	fp, r3
 8004b6a:	4623      	mov	r3, r4
 8004b6c:	eb1a 0303 	adds.w	r3, sl, r3
 8004b70:	623b      	str	r3, [r7, #32]
 8004b72:	462b      	mov	r3, r5
 8004b74:	eb4b 0303 	adc.w	r3, fp, r3
 8004b78:	627b      	str	r3, [r7, #36]	; 0x24
 8004b7a:	f04f 0200 	mov.w	r2, #0
 8004b7e:	f04f 0300 	mov.w	r3, #0
 8004b82:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004b86:	4629      	mov	r1, r5
 8004b88:	028b      	lsls	r3, r1, #10
 8004b8a:	4621      	mov	r1, r4
 8004b8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b90:	4621      	mov	r1, r4
 8004b92:	028a      	lsls	r2, r1, #10
 8004b94:	4610      	mov	r0, r2
 8004b96:	4619      	mov	r1, r3
 8004b98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	673b      	str	r3, [r7, #112]	; 0x70
 8004ba0:	677a      	str	r2, [r7, #116]	; 0x74
 8004ba2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004ba6:	f7fc f88f 	bl	8000cc8 <__aeabi_uldivmod>
 8004baa:	4602      	mov	r2, r0
 8004bac:	460b      	mov	r3, r1
 8004bae:	4613      	mov	r3, r2
 8004bb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004bb4:	4b41      	ldr	r3, [pc, #260]	; (8004cbc <HAL_RCC_GetSysClockFreq+0x354>)
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	0c1b      	lsrs	r3, r3, #16
 8004bba:	f003 0303 	and.w	r3, r3, #3
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	005b      	lsls	r3, r3, #1
 8004bc2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004bc6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004bca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004bd6:	e0eb      	b.n	8004db0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bd8:	4b38      	ldr	r3, [pc, #224]	; (8004cbc <HAL_RCC_GetSysClockFreq+0x354>)
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004be0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004be4:	4b35      	ldr	r3, [pc, #212]	; (8004cbc <HAL_RCC_GetSysClockFreq+0x354>)
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d06b      	beq.n	8004cc8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bf0:	4b32      	ldr	r3, [pc, #200]	; (8004cbc <HAL_RCC_GetSysClockFreq+0x354>)
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	099b      	lsrs	r3, r3, #6
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bfa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004bfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c02:	663b      	str	r3, [r7, #96]	; 0x60
 8004c04:	2300      	movs	r3, #0
 8004c06:	667b      	str	r3, [r7, #100]	; 0x64
 8004c08:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004c0c:	4622      	mov	r2, r4
 8004c0e:	462b      	mov	r3, r5
 8004c10:	f04f 0000 	mov.w	r0, #0
 8004c14:	f04f 0100 	mov.w	r1, #0
 8004c18:	0159      	lsls	r1, r3, #5
 8004c1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c1e:	0150      	lsls	r0, r2, #5
 8004c20:	4602      	mov	r2, r0
 8004c22:	460b      	mov	r3, r1
 8004c24:	4621      	mov	r1, r4
 8004c26:	1a51      	subs	r1, r2, r1
 8004c28:	61b9      	str	r1, [r7, #24]
 8004c2a:	4629      	mov	r1, r5
 8004c2c:	eb63 0301 	sbc.w	r3, r3, r1
 8004c30:	61fb      	str	r3, [r7, #28]
 8004c32:	f04f 0200 	mov.w	r2, #0
 8004c36:	f04f 0300 	mov.w	r3, #0
 8004c3a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004c3e:	4659      	mov	r1, fp
 8004c40:	018b      	lsls	r3, r1, #6
 8004c42:	4651      	mov	r1, sl
 8004c44:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c48:	4651      	mov	r1, sl
 8004c4a:	018a      	lsls	r2, r1, #6
 8004c4c:	4651      	mov	r1, sl
 8004c4e:	ebb2 0801 	subs.w	r8, r2, r1
 8004c52:	4659      	mov	r1, fp
 8004c54:	eb63 0901 	sbc.w	r9, r3, r1
 8004c58:	f04f 0200 	mov.w	r2, #0
 8004c5c:	f04f 0300 	mov.w	r3, #0
 8004c60:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c64:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c68:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c6c:	4690      	mov	r8, r2
 8004c6e:	4699      	mov	r9, r3
 8004c70:	4623      	mov	r3, r4
 8004c72:	eb18 0303 	adds.w	r3, r8, r3
 8004c76:	613b      	str	r3, [r7, #16]
 8004c78:	462b      	mov	r3, r5
 8004c7a:	eb49 0303 	adc.w	r3, r9, r3
 8004c7e:	617b      	str	r3, [r7, #20]
 8004c80:	f04f 0200 	mov.w	r2, #0
 8004c84:	f04f 0300 	mov.w	r3, #0
 8004c88:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004c8c:	4629      	mov	r1, r5
 8004c8e:	024b      	lsls	r3, r1, #9
 8004c90:	4621      	mov	r1, r4
 8004c92:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c96:	4621      	mov	r1, r4
 8004c98:	024a      	lsls	r2, r1, #9
 8004c9a:	4610      	mov	r0, r2
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ca6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004ca8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004cac:	f7fc f80c 	bl	8000cc8 <__aeabi_uldivmod>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004cba:	e065      	b.n	8004d88 <HAL_RCC_GetSysClockFreq+0x420>
 8004cbc:	40023800 	.word	0x40023800
 8004cc0:	00f42400 	.word	0x00f42400
 8004cc4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cc8:	4b3d      	ldr	r3, [pc, #244]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x458>)
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	099b      	lsrs	r3, r3, #6
 8004cce:	2200      	movs	r2, #0
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	4611      	mov	r1, r2
 8004cd4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004cd8:	653b      	str	r3, [r7, #80]	; 0x50
 8004cda:	2300      	movs	r3, #0
 8004cdc:	657b      	str	r3, [r7, #84]	; 0x54
 8004cde:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004ce2:	4642      	mov	r2, r8
 8004ce4:	464b      	mov	r3, r9
 8004ce6:	f04f 0000 	mov.w	r0, #0
 8004cea:	f04f 0100 	mov.w	r1, #0
 8004cee:	0159      	lsls	r1, r3, #5
 8004cf0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cf4:	0150      	lsls	r0, r2, #5
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	4641      	mov	r1, r8
 8004cfc:	1a51      	subs	r1, r2, r1
 8004cfe:	60b9      	str	r1, [r7, #8]
 8004d00:	4649      	mov	r1, r9
 8004d02:	eb63 0301 	sbc.w	r3, r3, r1
 8004d06:	60fb      	str	r3, [r7, #12]
 8004d08:	f04f 0200 	mov.w	r2, #0
 8004d0c:	f04f 0300 	mov.w	r3, #0
 8004d10:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004d14:	4659      	mov	r1, fp
 8004d16:	018b      	lsls	r3, r1, #6
 8004d18:	4651      	mov	r1, sl
 8004d1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d1e:	4651      	mov	r1, sl
 8004d20:	018a      	lsls	r2, r1, #6
 8004d22:	4651      	mov	r1, sl
 8004d24:	1a54      	subs	r4, r2, r1
 8004d26:	4659      	mov	r1, fp
 8004d28:	eb63 0501 	sbc.w	r5, r3, r1
 8004d2c:	f04f 0200 	mov.w	r2, #0
 8004d30:	f04f 0300 	mov.w	r3, #0
 8004d34:	00eb      	lsls	r3, r5, #3
 8004d36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d3a:	00e2      	lsls	r2, r4, #3
 8004d3c:	4614      	mov	r4, r2
 8004d3e:	461d      	mov	r5, r3
 8004d40:	4643      	mov	r3, r8
 8004d42:	18e3      	adds	r3, r4, r3
 8004d44:	603b      	str	r3, [r7, #0]
 8004d46:	464b      	mov	r3, r9
 8004d48:	eb45 0303 	adc.w	r3, r5, r3
 8004d4c:	607b      	str	r3, [r7, #4]
 8004d4e:	f04f 0200 	mov.w	r2, #0
 8004d52:	f04f 0300 	mov.w	r3, #0
 8004d56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d5a:	4629      	mov	r1, r5
 8004d5c:	028b      	lsls	r3, r1, #10
 8004d5e:	4621      	mov	r1, r4
 8004d60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d64:	4621      	mov	r1, r4
 8004d66:	028a      	lsls	r2, r1, #10
 8004d68:	4610      	mov	r0, r2
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d70:	2200      	movs	r2, #0
 8004d72:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d74:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004d76:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004d7a:	f7fb ffa5 	bl	8000cc8 <__aeabi_uldivmod>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	460b      	mov	r3, r1
 8004d82:	4613      	mov	r3, r2
 8004d84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004d88:	4b0d      	ldr	r3, [pc, #52]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x458>)
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	0f1b      	lsrs	r3, r3, #28
 8004d8e:	f003 0307 	and.w	r3, r3, #7
 8004d92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004d96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004da6:	e003      	b.n	8004db0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004da8:	4b06      	ldr	r3, [pc, #24]	; (8004dc4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004daa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004dae:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004db0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	37b8      	adds	r7, #184	; 0xb8
 8004db8:	46bd      	mov	sp, r7
 8004dba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dbe:	bf00      	nop
 8004dc0:	40023800 	.word	0x40023800
 8004dc4:	00f42400 	.word	0x00f42400

08004dc8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b086      	sub	sp, #24
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e28d      	b.n	80052f6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	f000 8083 	beq.w	8004eee <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004de8:	4b94      	ldr	r3, [pc, #592]	; (800503c <HAL_RCC_OscConfig+0x274>)
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f003 030c 	and.w	r3, r3, #12
 8004df0:	2b04      	cmp	r3, #4
 8004df2:	d019      	beq.n	8004e28 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004df4:	4b91      	ldr	r3, [pc, #580]	; (800503c <HAL_RCC_OscConfig+0x274>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004dfc:	2b08      	cmp	r3, #8
 8004dfe:	d106      	bne.n	8004e0e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004e00:	4b8e      	ldr	r3, [pc, #568]	; (800503c <HAL_RCC_OscConfig+0x274>)
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e0c:	d00c      	beq.n	8004e28 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e0e:	4b8b      	ldr	r3, [pc, #556]	; (800503c <HAL_RCC_OscConfig+0x274>)
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004e16:	2b0c      	cmp	r3, #12
 8004e18:	d112      	bne.n	8004e40 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e1a:	4b88      	ldr	r3, [pc, #544]	; (800503c <HAL_RCC_OscConfig+0x274>)
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e26:	d10b      	bne.n	8004e40 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e28:	4b84      	ldr	r3, [pc, #528]	; (800503c <HAL_RCC_OscConfig+0x274>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d05b      	beq.n	8004eec <HAL_RCC_OscConfig+0x124>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d157      	bne.n	8004eec <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e25a      	b.n	80052f6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e48:	d106      	bne.n	8004e58 <HAL_RCC_OscConfig+0x90>
 8004e4a:	4b7c      	ldr	r3, [pc, #496]	; (800503c <HAL_RCC_OscConfig+0x274>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a7b      	ldr	r2, [pc, #492]	; (800503c <HAL_RCC_OscConfig+0x274>)
 8004e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e54:	6013      	str	r3, [r2, #0]
 8004e56:	e01d      	b.n	8004e94 <HAL_RCC_OscConfig+0xcc>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e60:	d10c      	bne.n	8004e7c <HAL_RCC_OscConfig+0xb4>
 8004e62:	4b76      	ldr	r3, [pc, #472]	; (800503c <HAL_RCC_OscConfig+0x274>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a75      	ldr	r2, [pc, #468]	; (800503c <HAL_RCC_OscConfig+0x274>)
 8004e68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e6c:	6013      	str	r3, [r2, #0]
 8004e6e:	4b73      	ldr	r3, [pc, #460]	; (800503c <HAL_RCC_OscConfig+0x274>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a72      	ldr	r2, [pc, #456]	; (800503c <HAL_RCC_OscConfig+0x274>)
 8004e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e78:	6013      	str	r3, [r2, #0]
 8004e7a:	e00b      	b.n	8004e94 <HAL_RCC_OscConfig+0xcc>
 8004e7c:	4b6f      	ldr	r3, [pc, #444]	; (800503c <HAL_RCC_OscConfig+0x274>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a6e      	ldr	r2, [pc, #440]	; (800503c <HAL_RCC_OscConfig+0x274>)
 8004e82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e86:	6013      	str	r3, [r2, #0]
 8004e88:	4b6c      	ldr	r3, [pc, #432]	; (800503c <HAL_RCC_OscConfig+0x274>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a6b      	ldr	r2, [pc, #428]	; (800503c <HAL_RCC_OscConfig+0x274>)
 8004e8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d013      	beq.n	8004ec4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e9c:	f7fc fe82 	bl	8001ba4 <HAL_GetTick>
 8004ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ea2:	e008      	b.n	8004eb6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ea4:	f7fc fe7e 	bl	8001ba4 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b64      	cmp	r3, #100	; 0x64
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e21f      	b.n	80052f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eb6:	4b61      	ldr	r3, [pc, #388]	; (800503c <HAL_RCC_OscConfig+0x274>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d0f0      	beq.n	8004ea4 <HAL_RCC_OscConfig+0xdc>
 8004ec2:	e014      	b.n	8004eee <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec4:	f7fc fe6e 	bl	8001ba4 <HAL_GetTick>
 8004ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eca:	e008      	b.n	8004ede <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ecc:	f7fc fe6a 	bl	8001ba4 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b64      	cmp	r3, #100	; 0x64
 8004ed8:	d901      	bls.n	8004ede <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e20b      	b.n	80052f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ede:	4b57      	ldr	r3, [pc, #348]	; (800503c <HAL_RCC_OscConfig+0x274>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1f0      	bne.n	8004ecc <HAL_RCC_OscConfig+0x104>
 8004eea:	e000      	b.n	8004eee <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d06f      	beq.n	8004fda <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004efa:	4b50      	ldr	r3, [pc, #320]	; (800503c <HAL_RCC_OscConfig+0x274>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f003 030c 	and.w	r3, r3, #12
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d017      	beq.n	8004f36 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004f06:	4b4d      	ldr	r3, [pc, #308]	; (800503c <HAL_RCC_OscConfig+0x274>)
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004f0e:	2b08      	cmp	r3, #8
 8004f10:	d105      	bne.n	8004f1e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004f12:	4b4a      	ldr	r3, [pc, #296]	; (800503c <HAL_RCC_OscConfig+0x274>)
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00b      	beq.n	8004f36 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f1e:	4b47      	ldr	r3, [pc, #284]	; (800503c <HAL_RCC_OscConfig+0x274>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004f26:	2b0c      	cmp	r3, #12
 8004f28:	d11c      	bne.n	8004f64 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f2a:	4b44      	ldr	r3, [pc, #272]	; (800503c <HAL_RCC_OscConfig+0x274>)
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d116      	bne.n	8004f64 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f36:	4b41      	ldr	r3, [pc, #260]	; (800503c <HAL_RCC_OscConfig+0x274>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d005      	beq.n	8004f4e <HAL_RCC_OscConfig+0x186>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d001      	beq.n	8004f4e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e1d3      	b.n	80052f6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f4e:	4b3b      	ldr	r3, [pc, #236]	; (800503c <HAL_RCC_OscConfig+0x274>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	00db      	lsls	r3, r3, #3
 8004f5c:	4937      	ldr	r1, [pc, #220]	; (800503c <HAL_RCC_OscConfig+0x274>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f62:	e03a      	b.n	8004fda <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d020      	beq.n	8004fae <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f6c:	4b34      	ldr	r3, [pc, #208]	; (8005040 <HAL_RCC_OscConfig+0x278>)
 8004f6e:	2201      	movs	r2, #1
 8004f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f72:	f7fc fe17 	bl	8001ba4 <HAL_GetTick>
 8004f76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f78:	e008      	b.n	8004f8c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f7a:	f7fc fe13 	bl	8001ba4 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d901      	bls.n	8004f8c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e1b4      	b.n	80052f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f8c:	4b2b      	ldr	r3, [pc, #172]	; (800503c <HAL_RCC_OscConfig+0x274>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0302 	and.w	r3, r3, #2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d0f0      	beq.n	8004f7a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f98:	4b28      	ldr	r3, [pc, #160]	; (800503c <HAL_RCC_OscConfig+0x274>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	00db      	lsls	r3, r3, #3
 8004fa6:	4925      	ldr	r1, [pc, #148]	; (800503c <HAL_RCC_OscConfig+0x274>)
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	600b      	str	r3, [r1, #0]
 8004fac:	e015      	b.n	8004fda <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fae:	4b24      	ldr	r3, [pc, #144]	; (8005040 <HAL_RCC_OscConfig+0x278>)
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb4:	f7fc fdf6 	bl	8001ba4 <HAL_GetTick>
 8004fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fba:	e008      	b.n	8004fce <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fbc:	f7fc fdf2 	bl	8001ba4 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d901      	bls.n	8004fce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e193      	b.n	80052f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fce:	4b1b      	ldr	r3, [pc, #108]	; (800503c <HAL_RCC_OscConfig+0x274>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d1f0      	bne.n	8004fbc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0308 	and.w	r3, r3, #8
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d036      	beq.n	8005054 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d016      	beq.n	800501c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fee:	4b15      	ldr	r3, [pc, #84]	; (8005044 <HAL_RCC_OscConfig+0x27c>)
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ff4:	f7fc fdd6 	bl	8001ba4 <HAL_GetTick>
 8004ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ffa:	e008      	b.n	800500e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ffc:	f7fc fdd2 	bl	8001ba4 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	2b02      	cmp	r3, #2
 8005008:	d901      	bls.n	800500e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e173      	b.n	80052f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800500e:	4b0b      	ldr	r3, [pc, #44]	; (800503c <HAL_RCC_OscConfig+0x274>)
 8005010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b00      	cmp	r3, #0
 8005018:	d0f0      	beq.n	8004ffc <HAL_RCC_OscConfig+0x234>
 800501a:	e01b      	b.n	8005054 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800501c:	4b09      	ldr	r3, [pc, #36]	; (8005044 <HAL_RCC_OscConfig+0x27c>)
 800501e:	2200      	movs	r2, #0
 8005020:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005022:	f7fc fdbf 	bl	8001ba4 <HAL_GetTick>
 8005026:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005028:	e00e      	b.n	8005048 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800502a:	f7fc fdbb 	bl	8001ba4 <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	2b02      	cmp	r3, #2
 8005036:	d907      	bls.n	8005048 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e15c      	b.n	80052f6 <HAL_RCC_OscConfig+0x52e>
 800503c:	40023800 	.word	0x40023800
 8005040:	42470000 	.word	0x42470000
 8005044:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005048:	4b8a      	ldr	r3, [pc, #552]	; (8005274 <HAL_RCC_OscConfig+0x4ac>)
 800504a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1ea      	bne.n	800502a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0304 	and.w	r3, r3, #4
 800505c:	2b00      	cmp	r3, #0
 800505e:	f000 8097 	beq.w	8005190 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005062:	2300      	movs	r3, #0
 8005064:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005066:	4b83      	ldr	r3, [pc, #524]	; (8005274 <HAL_RCC_OscConfig+0x4ac>)
 8005068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d10f      	bne.n	8005092 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005072:	2300      	movs	r3, #0
 8005074:	60bb      	str	r3, [r7, #8]
 8005076:	4b7f      	ldr	r3, [pc, #508]	; (8005274 <HAL_RCC_OscConfig+0x4ac>)
 8005078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507a:	4a7e      	ldr	r2, [pc, #504]	; (8005274 <HAL_RCC_OscConfig+0x4ac>)
 800507c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005080:	6413      	str	r3, [r2, #64]	; 0x40
 8005082:	4b7c      	ldr	r3, [pc, #496]	; (8005274 <HAL_RCC_OscConfig+0x4ac>)
 8005084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800508a:	60bb      	str	r3, [r7, #8]
 800508c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800508e:	2301      	movs	r3, #1
 8005090:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005092:	4b79      	ldr	r3, [pc, #484]	; (8005278 <HAL_RCC_OscConfig+0x4b0>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800509a:	2b00      	cmp	r3, #0
 800509c:	d118      	bne.n	80050d0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800509e:	4b76      	ldr	r3, [pc, #472]	; (8005278 <HAL_RCC_OscConfig+0x4b0>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a75      	ldr	r2, [pc, #468]	; (8005278 <HAL_RCC_OscConfig+0x4b0>)
 80050a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050aa:	f7fc fd7b 	bl	8001ba4 <HAL_GetTick>
 80050ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050b0:	e008      	b.n	80050c4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050b2:	f7fc fd77 	bl	8001ba4 <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d901      	bls.n	80050c4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e118      	b.n	80052f6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050c4:	4b6c      	ldr	r3, [pc, #432]	; (8005278 <HAL_RCC_OscConfig+0x4b0>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d0f0      	beq.n	80050b2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d106      	bne.n	80050e6 <HAL_RCC_OscConfig+0x31e>
 80050d8:	4b66      	ldr	r3, [pc, #408]	; (8005274 <HAL_RCC_OscConfig+0x4ac>)
 80050da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050dc:	4a65      	ldr	r2, [pc, #404]	; (8005274 <HAL_RCC_OscConfig+0x4ac>)
 80050de:	f043 0301 	orr.w	r3, r3, #1
 80050e2:	6713      	str	r3, [r2, #112]	; 0x70
 80050e4:	e01c      	b.n	8005120 <HAL_RCC_OscConfig+0x358>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	2b05      	cmp	r3, #5
 80050ec:	d10c      	bne.n	8005108 <HAL_RCC_OscConfig+0x340>
 80050ee:	4b61      	ldr	r3, [pc, #388]	; (8005274 <HAL_RCC_OscConfig+0x4ac>)
 80050f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f2:	4a60      	ldr	r2, [pc, #384]	; (8005274 <HAL_RCC_OscConfig+0x4ac>)
 80050f4:	f043 0304 	orr.w	r3, r3, #4
 80050f8:	6713      	str	r3, [r2, #112]	; 0x70
 80050fa:	4b5e      	ldr	r3, [pc, #376]	; (8005274 <HAL_RCC_OscConfig+0x4ac>)
 80050fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fe:	4a5d      	ldr	r2, [pc, #372]	; (8005274 <HAL_RCC_OscConfig+0x4ac>)
 8005100:	f043 0301 	orr.w	r3, r3, #1
 8005104:	6713      	str	r3, [r2, #112]	; 0x70
 8005106:	e00b      	b.n	8005120 <HAL_RCC_OscConfig+0x358>
 8005108:	4b5a      	ldr	r3, [pc, #360]	; (8005274 <HAL_RCC_OscConfig+0x4ac>)
 800510a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800510c:	4a59      	ldr	r2, [pc, #356]	; (8005274 <HAL_RCC_OscConfig+0x4ac>)
 800510e:	f023 0301 	bic.w	r3, r3, #1
 8005112:	6713      	str	r3, [r2, #112]	; 0x70
 8005114:	4b57      	ldr	r3, [pc, #348]	; (8005274 <HAL_RCC_OscConfig+0x4ac>)
 8005116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005118:	4a56      	ldr	r2, [pc, #344]	; (8005274 <HAL_RCC_OscConfig+0x4ac>)
 800511a:	f023 0304 	bic.w	r3, r3, #4
 800511e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d015      	beq.n	8005154 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005128:	f7fc fd3c 	bl	8001ba4 <HAL_GetTick>
 800512c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800512e:	e00a      	b.n	8005146 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005130:	f7fc fd38 	bl	8001ba4 <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	f241 3288 	movw	r2, #5000	; 0x1388
 800513e:	4293      	cmp	r3, r2
 8005140:	d901      	bls.n	8005146 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e0d7      	b.n	80052f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005146:	4b4b      	ldr	r3, [pc, #300]	; (8005274 <HAL_RCC_OscConfig+0x4ac>)
 8005148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	2b00      	cmp	r3, #0
 8005150:	d0ee      	beq.n	8005130 <HAL_RCC_OscConfig+0x368>
 8005152:	e014      	b.n	800517e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005154:	f7fc fd26 	bl	8001ba4 <HAL_GetTick>
 8005158:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800515a:	e00a      	b.n	8005172 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800515c:	f7fc fd22 	bl	8001ba4 <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	f241 3288 	movw	r2, #5000	; 0x1388
 800516a:	4293      	cmp	r3, r2
 800516c:	d901      	bls.n	8005172 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e0c1      	b.n	80052f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005172:	4b40      	ldr	r3, [pc, #256]	; (8005274 <HAL_RCC_OscConfig+0x4ac>)
 8005174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005176:	f003 0302 	and.w	r3, r3, #2
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1ee      	bne.n	800515c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800517e:	7dfb      	ldrb	r3, [r7, #23]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d105      	bne.n	8005190 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005184:	4b3b      	ldr	r3, [pc, #236]	; (8005274 <HAL_RCC_OscConfig+0x4ac>)
 8005186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005188:	4a3a      	ldr	r2, [pc, #232]	; (8005274 <HAL_RCC_OscConfig+0x4ac>)
 800518a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800518e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	2b00      	cmp	r3, #0
 8005196:	f000 80ad 	beq.w	80052f4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800519a:	4b36      	ldr	r3, [pc, #216]	; (8005274 <HAL_RCC_OscConfig+0x4ac>)
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f003 030c 	and.w	r3, r3, #12
 80051a2:	2b08      	cmp	r3, #8
 80051a4:	d060      	beq.n	8005268 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d145      	bne.n	800523a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051ae:	4b33      	ldr	r3, [pc, #204]	; (800527c <HAL_RCC_OscConfig+0x4b4>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b4:	f7fc fcf6 	bl	8001ba4 <HAL_GetTick>
 80051b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ba:	e008      	b.n	80051ce <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051bc:	f7fc fcf2 	bl	8001ba4 <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d901      	bls.n	80051ce <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e093      	b.n	80052f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ce:	4b29      	ldr	r3, [pc, #164]	; (8005274 <HAL_RCC_OscConfig+0x4ac>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1f0      	bne.n	80051bc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	69da      	ldr	r2, [r3, #28]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	431a      	orrs	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e8:	019b      	lsls	r3, r3, #6
 80051ea:	431a      	orrs	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f0:	085b      	lsrs	r3, r3, #1
 80051f2:	3b01      	subs	r3, #1
 80051f4:	041b      	lsls	r3, r3, #16
 80051f6:	431a      	orrs	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fc:	061b      	lsls	r3, r3, #24
 80051fe:	431a      	orrs	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005204:	071b      	lsls	r3, r3, #28
 8005206:	491b      	ldr	r1, [pc, #108]	; (8005274 <HAL_RCC_OscConfig+0x4ac>)
 8005208:	4313      	orrs	r3, r2
 800520a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800520c:	4b1b      	ldr	r3, [pc, #108]	; (800527c <HAL_RCC_OscConfig+0x4b4>)
 800520e:	2201      	movs	r2, #1
 8005210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005212:	f7fc fcc7 	bl	8001ba4 <HAL_GetTick>
 8005216:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005218:	e008      	b.n	800522c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800521a:	f7fc fcc3 	bl	8001ba4 <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	2b02      	cmp	r3, #2
 8005226:	d901      	bls.n	800522c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e064      	b.n	80052f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800522c:	4b11      	ldr	r3, [pc, #68]	; (8005274 <HAL_RCC_OscConfig+0x4ac>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d0f0      	beq.n	800521a <HAL_RCC_OscConfig+0x452>
 8005238:	e05c      	b.n	80052f4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800523a:	4b10      	ldr	r3, [pc, #64]	; (800527c <HAL_RCC_OscConfig+0x4b4>)
 800523c:	2200      	movs	r2, #0
 800523e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005240:	f7fc fcb0 	bl	8001ba4 <HAL_GetTick>
 8005244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005246:	e008      	b.n	800525a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005248:	f7fc fcac 	bl	8001ba4 <HAL_GetTick>
 800524c:	4602      	mov	r2, r0
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	2b02      	cmp	r3, #2
 8005254:	d901      	bls.n	800525a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e04d      	b.n	80052f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800525a:	4b06      	ldr	r3, [pc, #24]	; (8005274 <HAL_RCC_OscConfig+0x4ac>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1f0      	bne.n	8005248 <HAL_RCC_OscConfig+0x480>
 8005266:	e045      	b.n	80052f4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d107      	bne.n	8005280 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e040      	b.n	80052f6 <HAL_RCC_OscConfig+0x52e>
 8005274:	40023800 	.word	0x40023800
 8005278:	40007000 	.word	0x40007000
 800527c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005280:	4b1f      	ldr	r3, [pc, #124]	; (8005300 <HAL_RCC_OscConfig+0x538>)
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	2b01      	cmp	r3, #1
 800528c:	d030      	beq.n	80052f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005298:	429a      	cmp	r2, r3
 800529a:	d129      	bne.n	80052f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d122      	bne.n	80052f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80052b0:	4013      	ands	r3, r2
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d119      	bne.n	80052f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c6:	085b      	lsrs	r3, r3, #1
 80052c8:	3b01      	subs	r3, #1
 80052ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d10f      	bne.n	80052f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052dc:	429a      	cmp	r2, r3
 80052de:	d107      	bne.n	80052f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ea:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d001      	beq.n	80052f4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e000      	b.n	80052f6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3718      	adds	r7, #24
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	40023800 	.word	0x40023800

08005304 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d101      	bne.n	8005316 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e07b      	b.n	800540e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531a:	2b00      	cmp	r3, #0
 800531c:	d108      	bne.n	8005330 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005326:	d009      	beq.n	800533c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	61da      	str	r2, [r3, #28]
 800532e:	e005      	b.n	800533c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005348:	b2db      	uxtb	r3, r3
 800534a:	2b00      	cmp	r3, #0
 800534c:	d106      	bne.n	800535c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f7fc f91e 	bl	8001598 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2202      	movs	r2, #2
 8005360:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005372:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005384:	431a      	orrs	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800538e:	431a      	orrs	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	f003 0302 	and.w	r3, r3, #2
 8005398:	431a      	orrs	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	f003 0301 	and.w	r3, r3, #1
 80053a2:	431a      	orrs	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053ac:	431a      	orrs	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	69db      	ldr	r3, [r3, #28]
 80053b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053b6:	431a      	orrs	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a1b      	ldr	r3, [r3, #32]
 80053bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053c0:	ea42 0103 	orr.w	r1, r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	430a      	orrs	r2, r1
 80053d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	0c1b      	lsrs	r3, r3, #16
 80053da:	f003 0104 	and.w	r1, r3, #4
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e2:	f003 0210 	and.w	r2, r3, #16
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	430a      	orrs	r2, r1
 80053ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	69da      	ldr	r2, [r3, #28]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3708      	adds	r7, #8
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005416:	b580      	push	{r7, lr}
 8005418:	b082      	sub	sp, #8
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d101      	bne.n	8005428 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e01a      	b.n	800545e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2202      	movs	r2, #2
 800542c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800543e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f7fc f935 	bl	80016b0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	3708      	adds	r7, #8
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005466:	b580      	push	{r7, lr}
 8005468:	b088      	sub	sp, #32
 800546a:	af02      	add	r7, sp, #8
 800546c:	60f8      	str	r0, [r7, #12]
 800546e:	60b9      	str	r1, [r7, #8]
 8005470:	603b      	str	r3, [r7, #0]
 8005472:	4613      	mov	r3, r2
 8005474:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005476:	2300      	movs	r3, #0
 8005478:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005482:	d112      	bne.n	80054aa <HAL_SPI_Receive+0x44>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d10e      	bne.n	80054aa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2204      	movs	r2, #4
 8005490:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005494:	88fa      	ldrh	r2, [r7, #6]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	9300      	str	r3, [sp, #0]
 800549a:	4613      	mov	r3, r2
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	68b9      	ldr	r1, [r7, #8]
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	f000 f8f1 	bl	8005688 <HAL_SPI_TransmitReceive>
 80054a6:	4603      	mov	r3, r0
 80054a8:	e0ea      	b.n	8005680 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d101      	bne.n	80054b8 <HAL_SPI_Receive+0x52>
 80054b4:	2302      	movs	r3, #2
 80054b6:	e0e3      	b.n	8005680 <HAL_SPI_Receive+0x21a>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054c0:	f7fc fb70 	bl	8001ba4 <HAL_GetTick>
 80054c4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d002      	beq.n	80054d8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80054d2:	2302      	movs	r3, #2
 80054d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80054d6:	e0ca      	b.n	800566e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d002      	beq.n	80054e4 <HAL_SPI_Receive+0x7e>
 80054de:	88fb      	ldrh	r3, [r7, #6]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d102      	bne.n	80054ea <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80054e8:	e0c1      	b.n	800566e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2204      	movs	r2, #4
 80054ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2200      	movs	r2, #0
 80054f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	88fa      	ldrh	r2, [r7, #6]
 8005502:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	88fa      	ldrh	r2, [r7, #6]
 8005508:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005530:	d10f      	bne.n	8005552 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005540:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005550:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800555c:	2b40      	cmp	r3, #64	; 0x40
 800555e:	d007      	beq.n	8005570 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800556e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d162      	bne.n	800563e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005578:	e02e      	b.n	80055d8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	f003 0301 	and.w	r3, r3, #1
 8005584:	2b01      	cmp	r3, #1
 8005586:	d115      	bne.n	80055b4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f103 020c 	add.w	r2, r3, #12
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005594:	7812      	ldrb	r2, [r2, #0]
 8005596:	b2d2      	uxtb	r2, r2
 8005598:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559e:	1c5a      	adds	r2, r3, #1
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	3b01      	subs	r3, #1
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055b2:	e011      	b.n	80055d8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055b4:	f7fc faf6 	bl	8001ba4 <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	683a      	ldr	r2, [r7, #0]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d803      	bhi.n	80055cc <HAL_SPI_Receive+0x166>
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ca:	d102      	bne.n	80055d2 <HAL_SPI_Receive+0x16c>
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d102      	bne.n	80055d8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80055d6:	e04a      	b.n	800566e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055dc:	b29b      	uxth	r3, r3
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1cb      	bne.n	800557a <HAL_SPI_Receive+0x114>
 80055e2:	e031      	b.n	8005648 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f003 0301 	and.w	r3, r3, #1
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d113      	bne.n	800561a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68da      	ldr	r2, [r3, #12]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fc:	b292      	uxth	r2, r2
 80055fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005604:	1c9a      	adds	r2, r3, #2
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800560e:	b29b      	uxth	r3, r3
 8005610:	3b01      	subs	r3, #1
 8005612:	b29a      	uxth	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005618:	e011      	b.n	800563e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800561a:	f7fc fac3 	bl	8001ba4 <HAL_GetTick>
 800561e:	4602      	mov	r2, r0
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	683a      	ldr	r2, [r7, #0]
 8005626:	429a      	cmp	r2, r3
 8005628:	d803      	bhi.n	8005632 <HAL_SPI_Receive+0x1cc>
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005630:	d102      	bne.n	8005638 <HAL_SPI_Receive+0x1d2>
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d102      	bne.n	800563e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800563c:	e017      	b.n	800566e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005642:	b29b      	uxth	r3, r3
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1cd      	bne.n	80055e4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	6839      	ldr	r1, [r7, #0]
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f000 fa45 	bl	8005adc <SPI_EndRxTransaction>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d002      	beq.n	800565e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2220      	movs	r2, #32
 800565c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005662:	2b00      	cmp	r3, #0
 8005664:	d002      	beq.n	800566c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	75fb      	strb	r3, [r7, #23]
 800566a:	e000      	b.n	800566e <HAL_SPI_Receive+0x208>
  }

error :
 800566c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2201      	movs	r2, #1
 8005672:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800567e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005680:	4618      	mov	r0, r3
 8005682:	3718      	adds	r7, #24
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b08c      	sub	sp, #48	; 0x30
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
 8005694:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005696:	2301      	movs	r3, #1
 8005698:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800569a:	2300      	movs	r3, #0
 800569c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d101      	bne.n	80056ae <HAL_SPI_TransmitReceive+0x26>
 80056aa:	2302      	movs	r3, #2
 80056ac:	e18a      	b.n	80059c4 <HAL_SPI_TransmitReceive+0x33c>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056b6:	f7fc fa75 	bl	8001ba4 <HAL_GetTick>
 80056ba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80056cc:	887b      	ldrh	r3, [r7, #2]
 80056ce:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80056d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d00f      	beq.n	80056f8 <HAL_SPI_TransmitReceive+0x70>
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056de:	d107      	bne.n	80056f0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d103      	bne.n	80056f0 <HAL_SPI_TransmitReceive+0x68>
 80056e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056ec:	2b04      	cmp	r3, #4
 80056ee:	d003      	beq.n	80056f8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80056f0:	2302      	movs	r3, #2
 80056f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80056f6:	e15b      	b.n	80059b0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d005      	beq.n	800570a <HAL_SPI_TransmitReceive+0x82>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d002      	beq.n	800570a <HAL_SPI_TransmitReceive+0x82>
 8005704:	887b      	ldrh	r3, [r7, #2]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d103      	bne.n	8005712 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005710:	e14e      	b.n	80059b0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005718:	b2db      	uxtb	r3, r3
 800571a:	2b04      	cmp	r3, #4
 800571c:	d003      	beq.n	8005726 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2205      	movs	r2, #5
 8005722:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	887a      	ldrh	r2, [r7, #2]
 8005736:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	887a      	ldrh	r2, [r7, #2]
 800573c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	68ba      	ldr	r2, [r7, #8]
 8005742:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	887a      	ldrh	r2, [r7, #2]
 8005748:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	887a      	ldrh	r2, [r7, #2]
 800574e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005766:	2b40      	cmp	r3, #64	; 0x40
 8005768:	d007      	beq.n	800577a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005778:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005782:	d178      	bne.n	8005876 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d002      	beq.n	8005792 <HAL_SPI_TransmitReceive+0x10a>
 800578c:	8b7b      	ldrh	r3, [r7, #26]
 800578e:	2b01      	cmp	r3, #1
 8005790:	d166      	bne.n	8005860 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005796:	881a      	ldrh	r2, [r3, #0]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a2:	1c9a      	adds	r2, r3, #2
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	3b01      	subs	r3, #1
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057b6:	e053      	b.n	8005860 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f003 0302 	and.w	r3, r3, #2
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d11b      	bne.n	80057fe <HAL_SPI_TransmitReceive+0x176>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d016      	beq.n	80057fe <HAL_SPI_TransmitReceive+0x176>
 80057d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d113      	bne.n	80057fe <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057da:	881a      	ldrh	r2, [r3, #0]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e6:	1c9a      	adds	r2, r3, #2
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	3b01      	subs	r3, #1
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80057fa:	2300      	movs	r3, #0
 80057fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	f003 0301 	and.w	r3, r3, #1
 8005808:	2b01      	cmp	r3, #1
 800580a:	d119      	bne.n	8005840 <HAL_SPI_TransmitReceive+0x1b8>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005810:	b29b      	uxth	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d014      	beq.n	8005840 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68da      	ldr	r2, [r3, #12]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005820:	b292      	uxth	r2, r2
 8005822:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005828:	1c9a      	adds	r2, r3, #2
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005832:	b29b      	uxth	r3, r3
 8005834:	3b01      	subs	r3, #1
 8005836:	b29a      	uxth	r2, r3
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800583c:	2301      	movs	r3, #1
 800583e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005840:	f7fc f9b0 	bl	8001ba4 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800584c:	429a      	cmp	r2, r3
 800584e:	d807      	bhi.n	8005860 <HAL_SPI_TransmitReceive+0x1d8>
 8005850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005856:	d003      	beq.n	8005860 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800585e:	e0a7      	b.n	80059b0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005864:	b29b      	uxth	r3, r3
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1a6      	bne.n	80057b8 <HAL_SPI_TransmitReceive+0x130>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800586e:	b29b      	uxth	r3, r3
 8005870:	2b00      	cmp	r3, #0
 8005872:	d1a1      	bne.n	80057b8 <HAL_SPI_TransmitReceive+0x130>
 8005874:	e07c      	b.n	8005970 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d002      	beq.n	8005884 <HAL_SPI_TransmitReceive+0x1fc>
 800587e:	8b7b      	ldrh	r3, [r7, #26]
 8005880:	2b01      	cmp	r3, #1
 8005882:	d16b      	bne.n	800595c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	330c      	adds	r3, #12
 800588e:	7812      	ldrb	r2, [r2, #0]
 8005890:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005896:	1c5a      	adds	r2, r3, #1
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	3b01      	subs	r3, #1
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058aa:	e057      	b.n	800595c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f003 0302 	and.w	r3, r3, #2
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d11c      	bne.n	80058f4 <HAL_SPI_TransmitReceive+0x26c>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058be:	b29b      	uxth	r3, r3
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d017      	beq.n	80058f4 <HAL_SPI_TransmitReceive+0x26c>
 80058c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d114      	bne.n	80058f4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	330c      	adds	r3, #12
 80058d4:	7812      	ldrb	r2, [r2, #0]
 80058d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058dc:	1c5a      	adds	r2, r3, #1
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	3b01      	subs	r3, #1
 80058ea:	b29a      	uxth	r2, r3
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80058f0:	2300      	movs	r3, #0
 80058f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d119      	bne.n	8005936 <HAL_SPI_TransmitReceive+0x2ae>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005906:	b29b      	uxth	r3, r3
 8005908:	2b00      	cmp	r3, #0
 800590a:	d014      	beq.n	8005936 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68da      	ldr	r2, [r3, #12]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005916:	b2d2      	uxtb	r2, r2
 8005918:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591e:	1c5a      	adds	r2, r3, #1
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005928:	b29b      	uxth	r3, r3
 800592a:	3b01      	subs	r3, #1
 800592c:	b29a      	uxth	r2, r3
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005932:	2301      	movs	r3, #1
 8005934:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005936:	f7fc f935 	bl	8001ba4 <HAL_GetTick>
 800593a:	4602      	mov	r2, r0
 800593c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005942:	429a      	cmp	r2, r3
 8005944:	d803      	bhi.n	800594e <HAL_SPI_TransmitReceive+0x2c6>
 8005946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800594c:	d102      	bne.n	8005954 <HAL_SPI_TransmitReceive+0x2cc>
 800594e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005950:	2b00      	cmp	r3, #0
 8005952:	d103      	bne.n	800595c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800595a:	e029      	b.n	80059b0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005960:	b29b      	uxth	r3, r3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1a2      	bne.n	80058ac <HAL_SPI_TransmitReceive+0x224>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800596a:	b29b      	uxth	r3, r3
 800596c:	2b00      	cmp	r3, #0
 800596e:	d19d      	bne.n	80058ac <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005972:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	f000 f917 	bl	8005ba8 <SPI_EndRxTxTransaction>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d006      	beq.n	800598e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2220      	movs	r2, #32
 800598a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800598c:	e010      	b.n	80059b0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d10b      	bne.n	80059ae <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005996:	2300      	movs	r3, #0
 8005998:	617b      	str	r3, [r7, #20]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	617b      	str	r3, [r7, #20]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	617b      	str	r3, [r7, #20]
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	e000      	b.n	80059b0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80059ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80059c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3730      	adds	r7, #48	; 0x30
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b088      	sub	sp, #32
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	603b      	str	r3, [r7, #0]
 80059d8:	4613      	mov	r3, r2
 80059da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80059dc:	f7fc f8e2 	bl	8001ba4 <HAL_GetTick>
 80059e0:	4602      	mov	r2, r0
 80059e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e4:	1a9b      	subs	r3, r3, r2
 80059e6:	683a      	ldr	r2, [r7, #0]
 80059e8:	4413      	add	r3, r2
 80059ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80059ec:	f7fc f8da 	bl	8001ba4 <HAL_GetTick>
 80059f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80059f2:	4b39      	ldr	r3, [pc, #228]	; (8005ad8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	015b      	lsls	r3, r3, #5
 80059f8:	0d1b      	lsrs	r3, r3, #20
 80059fa:	69fa      	ldr	r2, [r7, #28]
 80059fc:	fb02 f303 	mul.w	r3, r2, r3
 8005a00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a02:	e054      	b.n	8005aae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a0a:	d050      	beq.n	8005aae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a0c:	f7fc f8ca 	bl	8001ba4 <HAL_GetTick>
 8005a10:	4602      	mov	r2, r0
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	69fa      	ldr	r2, [r7, #28]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d902      	bls.n	8005a22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d13d      	bne.n	8005a9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	685a      	ldr	r2, [r3, #4]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a3a:	d111      	bne.n	8005a60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a44:	d004      	beq.n	8005a50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a4e:	d107      	bne.n	8005a60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a68:	d10f      	bne.n	8005a8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a78:	601a      	str	r2, [r3, #0]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e017      	b.n	8005ace <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d101      	bne.n	8005aa8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	689a      	ldr	r2, [r3, #8]
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	68ba      	ldr	r2, [r7, #8]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	bf0c      	ite	eq
 8005abe:	2301      	moveq	r3, #1
 8005ac0:	2300      	movne	r3, #0
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	79fb      	ldrb	r3, [r7, #7]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d19b      	bne.n	8005a04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3720      	adds	r7, #32
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	20000010 	.word	0x20000010

08005adc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af02      	add	r7, sp, #8
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005af0:	d111      	bne.n	8005b16 <SPI_EndRxTransaction+0x3a>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005afa:	d004      	beq.n	8005b06 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b04:	d107      	bne.n	8005b16 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b14:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b1e:	d12a      	bne.n	8005b76 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b28:	d012      	beq.n	8005b50 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	9300      	str	r3, [sp, #0]
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	2200      	movs	r2, #0
 8005b32:	2180      	movs	r1, #128	; 0x80
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f7ff ff49 	bl	80059cc <SPI_WaitFlagStateUntilTimeout>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d02d      	beq.n	8005b9c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b44:	f043 0220 	orr.w	r2, r3, #32
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e026      	b.n	8005b9e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	9300      	str	r3, [sp, #0]
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	2200      	movs	r2, #0
 8005b58:	2101      	movs	r1, #1
 8005b5a:	68f8      	ldr	r0, [r7, #12]
 8005b5c:	f7ff ff36 	bl	80059cc <SPI_WaitFlagStateUntilTimeout>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d01a      	beq.n	8005b9c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b6a:	f043 0220 	orr.w	r2, r3, #32
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e013      	b.n	8005b9e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	9300      	str	r3, [sp, #0]
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	2101      	movs	r1, #1
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f7ff ff23 	bl	80059cc <SPI_WaitFlagStateUntilTimeout>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d007      	beq.n	8005b9c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b90:	f043 0220 	orr.w	r2, r3, #32
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e000      	b.n	8005b9e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3710      	adds	r7, #16
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
	...

08005ba8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b088      	sub	sp, #32
 8005bac:	af02      	add	r7, sp, #8
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005bb4:	4b1b      	ldr	r3, [pc, #108]	; (8005c24 <SPI_EndRxTxTransaction+0x7c>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a1b      	ldr	r2, [pc, #108]	; (8005c28 <SPI_EndRxTxTransaction+0x80>)
 8005bba:	fba2 2303 	umull	r2, r3, r2, r3
 8005bbe:	0d5b      	lsrs	r3, r3, #21
 8005bc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005bc4:	fb02 f303 	mul.w	r3, r2, r3
 8005bc8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bd2:	d112      	bne.n	8005bfa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	9300      	str	r3, [sp, #0]
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	2180      	movs	r1, #128	; 0x80
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f7ff fef4 	bl	80059cc <SPI_WaitFlagStateUntilTimeout>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d016      	beq.n	8005c18 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bee:	f043 0220 	orr.w	r2, r3, #32
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e00f      	b.n	8005c1a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00a      	beq.n	8005c16 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	3b01      	subs	r3, #1
 8005c04:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c10:	2b80      	cmp	r3, #128	; 0x80
 8005c12:	d0f2      	beq.n	8005bfa <SPI_EndRxTxTransaction+0x52>
 8005c14:	e000      	b.n	8005c18 <SPI_EndRxTxTransaction+0x70>
        break;
 8005c16:	bf00      	nop
  }

  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3718      	adds	r7, #24
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	20000010 	.word	0x20000010
 8005c28:	165e9f81 	.word	0x165e9f81

08005c2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d101      	bne.n	8005c3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e041      	b.n	8005cc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d106      	bne.n	8005c58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f7fb fd4e 	bl	80016f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2202      	movs	r2, #2
 8005c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	3304      	adds	r3, #4
 8005c68:	4619      	mov	r1, r3
 8005c6a:	4610      	mov	r0, r2
 8005c6c:	f000 fad8 	bl	8006220 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3708      	adds	r7, #8
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b082      	sub	sp, #8
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d101      	bne.n	8005cdc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e041      	b.n	8005d60 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d106      	bne.n	8005cf6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 f839 	bl	8005d68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2202      	movs	r2, #2
 8005cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	3304      	adds	r3, #4
 8005d06:	4619      	mov	r1, r3
 8005d08:	4610      	mov	r0, r2
 8005d0a:	f000 fa89 	bl	8006220 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2201      	movs	r2, #1
 8005d42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2201      	movs	r2, #1
 8005d52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3708      	adds	r7, #8
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d70:	bf00      	nop
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d109      	bne.n	8005da0 <HAL_TIM_PWM_Start+0x24>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	bf14      	ite	ne
 8005d98:	2301      	movne	r3, #1
 8005d9a:	2300      	moveq	r3, #0
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	e022      	b.n	8005de6 <HAL_TIM_PWM_Start+0x6a>
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	2b04      	cmp	r3, #4
 8005da4:	d109      	bne.n	8005dba <HAL_TIM_PWM_Start+0x3e>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	bf14      	ite	ne
 8005db2:	2301      	movne	r3, #1
 8005db4:	2300      	moveq	r3, #0
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	e015      	b.n	8005de6 <HAL_TIM_PWM_Start+0x6a>
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	2b08      	cmp	r3, #8
 8005dbe:	d109      	bne.n	8005dd4 <HAL_TIM_PWM_Start+0x58>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	bf14      	ite	ne
 8005dcc:	2301      	movne	r3, #1
 8005dce:	2300      	moveq	r3, #0
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	e008      	b.n	8005de6 <HAL_TIM_PWM_Start+0x6a>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	bf14      	ite	ne
 8005de0:	2301      	movne	r3, #1
 8005de2:	2300      	moveq	r3, #0
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d001      	beq.n	8005dee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e07c      	b.n	8005ee8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d104      	bne.n	8005dfe <HAL_TIM_PWM_Start+0x82>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2202      	movs	r2, #2
 8005df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dfc:	e013      	b.n	8005e26 <HAL_TIM_PWM_Start+0xaa>
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	2b04      	cmp	r3, #4
 8005e02:	d104      	bne.n	8005e0e <HAL_TIM_PWM_Start+0x92>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2202      	movs	r2, #2
 8005e08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e0c:	e00b      	b.n	8005e26 <HAL_TIM_PWM_Start+0xaa>
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	2b08      	cmp	r3, #8
 8005e12:	d104      	bne.n	8005e1e <HAL_TIM_PWM_Start+0xa2>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2202      	movs	r2, #2
 8005e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e1c:	e003      	b.n	8005e26 <HAL_TIM_PWM_Start+0xaa>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2202      	movs	r2, #2
 8005e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	6839      	ldr	r1, [r7, #0]
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f000 fce0 	bl	80067f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a2d      	ldr	r2, [pc, #180]	; (8005ef0 <HAL_TIM_PWM_Start+0x174>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d004      	beq.n	8005e48 <HAL_TIM_PWM_Start+0xcc>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a2c      	ldr	r2, [pc, #176]	; (8005ef4 <HAL_TIM_PWM_Start+0x178>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d101      	bne.n	8005e4c <HAL_TIM_PWM_Start+0xd0>
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e000      	b.n	8005e4e <HAL_TIM_PWM_Start+0xd2>
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d007      	beq.n	8005e62 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a22      	ldr	r2, [pc, #136]	; (8005ef0 <HAL_TIM_PWM_Start+0x174>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d022      	beq.n	8005eb2 <HAL_TIM_PWM_Start+0x136>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e74:	d01d      	beq.n	8005eb2 <HAL_TIM_PWM_Start+0x136>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a1f      	ldr	r2, [pc, #124]	; (8005ef8 <HAL_TIM_PWM_Start+0x17c>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d018      	beq.n	8005eb2 <HAL_TIM_PWM_Start+0x136>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a1d      	ldr	r2, [pc, #116]	; (8005efc <HAL_TIM_PWM_Start+0x180>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d013      	beq.n	8005eb2 <HAL_TIM_PWM_Start+0x136>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a1c      	ldr	r2, [pc, #112]	; (8005f00 <HAL_TIM_PWM_Start+0x184>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d00e      	beq.n	8005eb2 <HAL_TIM_PWM_Start+0x136>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a16      	ldr	r2, [pc, #88]	; (8005ef4 <HAL_TIM_PWM_Start+0x178>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d009      	beq.n	8005eb2 <HAL_TIM_PWM_Start+0x136>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a18      	ldr	r2, [pc, #96]	; (8005f04 <HAL_TIM_PWM_Start+0x188>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d004      	beq.n	8005eb2 <HAL_TIM_PWM_Start+0x136>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a16      	ldr	r2, [pc, #88]	; (8005f08 <HAL_TIM_PWM_Start+0x18c>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d111      	bne.n	8005ed6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f003 0307 	and.w	r3, r3, #7
 8005ebc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2b06      	cmp	r3, #6
 8005ec2:	d010      	beq.n	8005ee6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f042 0201 	orr.w	r2, r2, #1
 8005ed2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ed4:	e007      	b.n	8005ee6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f042 0201 	orr.w	r2, r2, #1
 8005ee4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	40010000 	.word	0x40010000
 8005ef4:	40010400 	.word	0x40010400
 8005ef8:	40000400 	.word	0x40000400
 8005efc:	40000800 	.word	0x40000800
 8005f00:	40000c00 	.word	0x40000c00
 8005f04:	40014000 	.word	0x40014000
 8005f08:	40001800 	.word	0x40001800

08005f0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b086      	sub	sp, #24
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d101      	bne.n	8005f2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f26:	2302      	movs	r3, #2
 8005f28:	e0ae      	b.n	8006088 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2b0c      	cmp	r3, #12
 8005f36:	f200 809f 	bhi.w	8006078 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005f3a:	a201      	add	r2, pc, #4	; (adr r2, 8005f40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f40:	08005f75 	.word	0x08005f75
 8005f44:	08006079 	.word	0x08006079
 8005f48:	08006079 	.word	0x08006079
 8005f4c:	08006079 	.word	0x08006079
 8005f50:	08005fb5 	.word	0x08005fb5
 8005f54:	08006079 	.word	0x08006079
 8005f58:	08006079 	.word	0x08006079
 8005f5c:	08006079 	.word	0x08006079
 8005f60:	08005ff7 	.word	0x08005ff7
 8005f64:	08006079 	.word	0x08006079
 8005f68:	08006079 	.word	0x08006079
 8005f6c:	08006079 	.word	0x08006079
 8005f70:	08006037 	.word	0x08006037
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	68b9      	ldr	r1, [r7, #8]
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f000 f9f0 	bl	8006360 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	699a      	ldr	r2, [r3, #24]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f042 0208 	orr.w	r2, r2, #8
 8005f8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	699a      	ldr	r2, [r3, #24]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f022 0204 	bic.w	r2, r2, #4
 8005f9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	6999      	ldr	r1, [r3, #24]
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	691a      	ldr	r2, [r3, #16]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	430a      	orrs	r2, r1
 8005fb0:	619a      	str	r2, [r3, #24]
      break;
 8005fb2:	e064      	b.n	800607e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68b9      	ldr	r1, [r7, #8]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f000 fa40 	bl	8006440 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	699a      	ldr	r2, [r3, #24]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	699a      	ldr	r2, [r3, #24]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	6999      	ldr	r1, [r3, #24]
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	021a      	lsls	r2, r3, #8
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	430a      	orrs	r2, r1
 8005ff2:	619a      	str	r2, [r3, #24]
      break;
 8005ff4:	e043      	b.n	800607e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68b9      	ldr	r1, [r7, #8]
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f000 fa95 	bl	800652c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	69da      	ldr	r2, [r3, #28]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f042 0208 	orr.w	r2, r2, #8
 8006010:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	69da      	ldr	r2, [r3, #28]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f022 0204 	bic.w	r2, r2, #4
 8006020:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	69d9      	ldr	r1, [r3, #28]
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	691a      	ldr	r2, [r3, #16]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	430a      	orrs	r2, r1
 8006032:	61da      	str	r2, [r3, #28]
      break;
 8006034:	e023      	b.n	800607e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68b9      	ldr	r1, [r7, #8]
 800603c:	4618      	mov	r0, r3
 800603e:	f000 fae9 	bl	8006614 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	69da      	ldr	r2, [r3, #28]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006050:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	69da      	ldr	r2, [r3, #28]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006060:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	69d9      	ldr	r1, [r3, #28]
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	021a      	lsls	r2, r3, #8
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	430a      	orrs	r2, r1
 8006074:	61da      	str	r2, [r3, #28]
      break;
 8006076:	e002      	b.n	800607e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	75fb      	strb	r3, [r7, #23]
      break;
 800607c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006086:	7dfb      	ldrb	r3, [r7, #23]
}
 8006088:	4618      	mov	r0, r3
 800608a:	3718      	adds	r7, #24
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800609a:	2300      	movs	r3, #0
 800609c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d101      	bne.n	80060ac <HAL_TIM_ConfigClockSource+0x1c>
 80060a8:	2302      	movs	r3, #2
 80060aa:	e0b4      	b.n	8006216 <HAL_TIM_ConfigClockSource+0x186>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2202      	movs	r2, #2
 80060b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80060ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68ba      	ldr	r2, [r7, #8]
 80060da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060e4:	d03e      	beq.n	8006164 <HAL_TIM_ConfigClockSource+0xd4>
 80060e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060ea:	f200 8087 	bhi.w	80061fc <HAL_TIM_ConfigClockSource+0x16c>
 80060ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060f2:	f000 8086 	beq.w	8006202 <HAL_TIM_ConfigClockSource+0x172>
 80060f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060fa:	d87f      	bhi.n	80061fc <HAL_TIM_ConfigClockSource+0x16c>
 80060fc:	2b70      	cmp	r3, #112	; 0x70
 80060fe:	d01a      	beq.n	8006136 <HAL_TIM_ConfigClockSource+0xa6>
 8006100:	2b70      	cmp	r3, #112	; 0x70
 8006102:	d87b      	bhi.n	80061fc <HAL_TIM_ConfigClockSource+0x16c>
 8006104:	2b60      	cmp	r3, #96	; 0x60
 8006106:	d050      	beq.n	80061aa <HAL_TIM_ConfigClockSource+0x11a>
 8006108:	2b60      	cmp	r3, #96	; 0x60
 800610a:	d877      	bhi.n	80061fc <HAL_TIM_ConfigClockSource+0x16c>
 800610c:	2b50      	cmp	r3, #80	; 0x50
 800610e:	d03c      	beq.n	800618a <HAL_TIM_ConfigClockSource+0xfa>
 8006110:	2b50      	cmp	r3, #80	; 0x50
 8006112:	d873      	bhi.n	80061fc <HAL_TIM_ConfigClockSource+0x16c>
 8006114:	2b40      	cmp	r3, #64	; 0x40
 8006116:	d058      	beq.n	80061ca <HAL_TIM_ConfigClockSource+0x13a>
 8006118:	2b40      	cmp	r3, #64	; 0x40
 800611a:	d86f      	bhi.n	80061fc <HAL_TIM_ConfigClockSource+0x16c>
 800611c:	2b30      	cmp	r3, #48	; 0x30
 800611e:	d064      	beq.n	80061ea <HAL_TIM_ConfigClockSource+0x15a>
 8006120:	2b30      	cmp	r3, #48	; 0x30
 8006122:	d86b      	bhi.n	80061fc <HAL_TIM_ConfigClockSource+0x16c>
 8006124:	2b20      	cmp	r3, #32
 8006126:	d060      	beq.n	80061ea <HAL_TIM_ConfigClockSource+0x15a>
 8006128:	2b20      	cmp	r3, #32
 800612a:	d867      	bhi.n	80061fc <HAL_TIM_ConfigClockSource+0x16c>
 800612c:	2b00      	cmp	r3, #0
 800612e:	d05c      	beq.n	80061ea <HAL_TIM_ConfigClockSource+0x15a>
 8006130:	2b10      	cmp	r3, #16
 8006132:	d05a      	beq.n	80061ea <HAL_TIM_ConfigClockSource+0x15a>
 8006134:	e062      	b.n	80061fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6818      	ldr	r0, [r3, #0]
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	6899      	ldr	r1, [r3, #8]
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	685a      	ldr	r2, [r3, #4]
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	f000 fb35 	bl	80067b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006158:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68ba      	ldr	r2, [r7, #8]
 8006160:	609a      	str	r2, [r3, #8]
      break;
 8006162:	e04f      	b.n	8006204 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6818      	ldr	r0, [r3, #0]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	6899      	ldr	r1, [r3, #8]
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	685a      	ldr	r2, [r3, #4]
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	f000 fb1e 	bl	80067b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	689a      	ldr	r2, [r3, #8]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006186:	609a      	str	r2, [r3, #8]
      break;
 8006188:	e03c      	b.n	8006204 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6818      	ldr	r0, [r3, #0]
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	6859      	ldr	r1, [r3, #4]
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	461a      	mov	r2, r3
 8006198:	f000 fa92 	bl	80066c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2150      	movs	r1, #80	; 0x50
 80061a2:	4618      	mov	r0, r3
 80061a4:	f000 faeb 	bl	800677e <TIM_ITRx_SetConfig>
      break;
 80061a8:	e02c      	b.n	8006204 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6818      	ldr	r0, [r3, #0]
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	6859      	ldr	r1, [r3, #4]
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	461a      	mov	r2, r3
 80061b8:	f000 fab1 	bl	800671e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2160      	movs	r1, #96	; 0x60
 80061c2:	4618      	mov	r0, r3
 80061c4:	f000 fadb 	bl	800677e <TIM_ITRx_SetConfig>
      break;
 80061c8:	e01c      	b.n	8006204 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6818      	ldr	r0, [r3, #0]
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	6859      	ldr	r1, [r3, #4]
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	461a      	mov	r2, r3
 80061d8:	f000 fa72 	bl	80066c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2140      	movs	r1, #64	; 0x40
 80061e2:	4618      	mov	r0, r3
 80061e4:	f000 facb 	bl	800677e <TIM_ITRx_SetConfig>
      break;
 80061e8:	e00c      	b.n	8006204 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4619      	mov	r1, r3
 80061f4:	4610      	mov	r0, r2
 80061f6:	f000 fac2 	bl	800677e <TIM_ITRx_SetConfig>
      break;
 80061fa:	e003      	b.n	8006204 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006200:	e000      	b.n	8006204 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006202:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006214:	7bfb      	ldrb	r3, [r7, #15]
}
 8006216:	4618      	mov	r0, r3
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
	...

08006220 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a40      	ldr	r2, [pc, #256]	; (8006334 <TIM_Base_SetConfig+0x114>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d013      	beq.n	8006260 <TIM_Base_SetConfig+0x40>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800623e:	d00f      	beq.n	8006260 <TIM_Base_SetConfig+0x40>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a3d      	ldr	r2, [pc, #244]	; (8006338 <TIM_Base_SetConfig+0x118>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d00b      	beq.n	8006260 <TIM_Base_SetConfig+0x40>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a3c      	ldr	r2, [pc, #240]	; (800633c <TIM_Base_SetConfig+0x11c>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d007      	beq.n	8006260 <TIM_Base_SetConfig+0x40>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a3b      	ldr	r2, [pc, #236]	; (8006340 <TIM_Base_SetConfig+0x120>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d003      	beq.n	8006260 <TIM_Base_SetConfig+0x40>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a3a      	ldr	r2, [pc, #232]	; (8006344 <TIM_Base_SetConfig+0x124>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d108      	bne.n	8006272 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006266:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	4313      	orrs	r3, r2
 8006270:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a2f      	ldr	r2, [pc, #188]	; (8006334 <TIM_Base_SetConfig+0x114>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d02b      	beq.n	80062d2 <TIM_Base_SetConfig+0xb2>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006280:	d027      	beq.n	80062d2 <TIM_Base_SetConfig+0xb2>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a2c      	ldr	r2, [pc, #176]	; (8006338 <TIM_Base_SetConfig+0x118>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d023      	beq.n	80062d2 <TIM_Base_SetConfig+0xb2>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a2b      	ldr	r2, [pc, #172]	; (800633c <TIM_Base_SetConfig+0x11c>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d01f      	beq.n	80062d2 <TIM_Base_SetConfig+0xb2>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a2a      	ldr	r2, [pc, #168]	; (8006340 <TIM_Base_SetConfig+0x120>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d01b      	beq.n	80062d2 <TIM_Base_SetConfig+0xb2>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a29      	ldr	r2, [pc, #164]	; (8006344 <TIM_Base_SetConfig+0x124>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d017      	beq.n	80062d2 <TIM_Base_SetConfig+0xb2>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a28      	ldr	r2, [pc, #160]	; (8006348 <TIM_Base_SetConfig+0x128>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d013      	beq.n	80062d2 <TIM_Base_SetConfig+0xb2>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a27      	ldr	r2, [pc, #156]	; (800634c <TIM_Base_SetConfig+0x12c>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d00f      	beq.n	80062d2 <TIM_Base_SetConfig+0xb2>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a26      	ldr	r2, [pc, #152]	; (8006350 <TIM_Base_SetConfig+0x130>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d00b      	beq.n	80062d2 <TIM_Base_SetConfig+0xb2>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a25      	ldr	r2, [pc, #148]	; (8006354 <TIM_Base_SetConfig+0x134>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d007      	beq.n	80062d2 <TIM_Base_SetConfig+0xb2>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a24      	ldr	r2, [pc, #144]	; (8006358 <TIM_Base_SetConfig+0x138>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d003      	beq.n	80062d2 <TIM_Base_SetConfig+0xb2>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a23      	ldr	r2, [pc, #140]	; (800635c <TIM_Base_SetConfig+0x13c>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d108      	bne.n	80062e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	695b      	ldr	r3, [r3, #20]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	689a      	ldr	r2, [r3, #8]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a0a      	ldr	r2, [pc, #40]	; (8006334 <TIM_Base_SetConfig+0x114>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d003      	beq.n	8006318 <TIM_Base_SetConfig+0xf8>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a0c      	ldr	r2, [pc, #48]	; (8006344 <TIM_Base_SetConfig+0x124>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d103      	bne.n	8006320 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	691a      	ldr	r2, [r3, #16]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	615a      	str	r2, [r3, #20]
}
 8006326:	bf00      	nop
 8006328:	3714      	adds	r7, #20
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop
 8006334:	40010000 	.word	0x40010000
 8006338:	40000400 	.word	0x40000400
 800633c:	40000800 	.word	0x40000800
 8006340:	40000c00 	.word	0x40000c00
 8006344:	40010400 	.word	0x40010400
 8006348:	40014000 	.word	0x40014000
 800634c:	40014400 	.word	0x40014400
 8006350:	40014800 	.word	0x40014800
 8006354:	40001800 	.word	0x40001800
 8006358:	40001c00 	.word	0x40001c00
 800635c:	40002000 	.word	0x40002000

08006360 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006360:	b480      	push	{r7}
 8006362:	b087      	sub	sp, #28
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	f023 0201 	bic.w	r2, r3, #1
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a1b      	ldr	r3, [r3, #32]
 800637a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800638e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f023 0303 	bic.w	r3, r3, #3
 8006396:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	4313      	orrs	r3, r2
 80063a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	f023 0302 	bic.w	r3, r3, #2
 80063a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	697a      	ldr	r2, [r7, #20]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a20      	ldr	r2, [pc, #128]	; (8006438 <TIM_OC1_SetConfig+0xd8>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d003      	beq.n	80063c4 <TIM_OC1_SetConfig+0x64>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a1f      	ldr	r2, [pc, #124]	; (800643c <TIM_OC1_SetConfig+0xdc>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d10c      	bne.n	80063de <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	f023 0308 	bic.w	r3, r3, #8
 80063ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	f023 0304 	bic.w	r3, r3, #4
 80063dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a15      	ldr	r2, [pc, #84]	; (8006438 <TIM_OC1_SetConfig+0xd8>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d003      	beq.n	80063ee <TIM_OC1_SetConfig+0x8e>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a14      	ldr	r2, [pc, #80]	; (800643c <TIM_OC1_SetConfig+0xdc>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d111      	bne.n	8006412 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	695b      	ldr	r3, [r3, #20]
 8006402:	693a      	ldr	r2, [r7, #16]
 8006404:	4313      	orrs	r3, r2
 8006406:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	699b      	ldr	r3, [r3, #24]
 800640c:	693a      	ldr	r2, [r7, #16]
 800640e:	4313      	orrs	r3, r2
 8006410:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	685a      	ldr	r2, [r3, #4]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	621a      	str	r2, [r3, #32]
}
 800642c:	bf00      	nop
 800642e:	371c      	adds	r7, #28
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr
 8006438:	40010000 	.word	0x40010000
 800643c:	40010400 	.word	0x40010400

08006440 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006440:	b480      	push	{r7}
 8006442:	b087      	sub	sp, #28
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a1b      	ldr	r3, [r3, #32]
 800644e:	f023 0210 	bic.w	r2, r3, #16
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a1b      	ldr	r3, [r3, #32]
 800645a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800646e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006476:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	021b      	lsls	r3, r3, #8
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	4313      	orrs	r3, r2
 8006482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	f023 0320 	bic.w	r3, r3, #32
 800648a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	011b      	lsls	r3, r3, #4
 8006492:	697a      	ldr	r2, [r7, #20]
 8006494:	4313      	orrs	r3, r2
 8006496:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a22      	ldr	r2, [pc, #136]	; (8006524 <TIM_OC2_SetConfig+0xe4>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d003      	beq.n	80064a8 <TIM_OC2_SetConfig+0x68>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a21      	ldr	r2, [pc, #132]	; (8006528 <TIM_OC2_SetConfig+0xe8>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d10d      	bne.n	80064c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	011b      	lsls	r3, r3, #4
 80064b6:	697a      	ldr	r2, [r7, #20]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a17      	ldr	r2, [pc, #92]	; (8006524 <TIM_OC2_SetConfig+0xe4>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d003      	beq.n	80064d4 <TIM_OC2_SetConfig+0x94>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a16      	ldr	r2, [pc, #88]	; (8006528 <TIM_OC2_SetConfig+0xe8>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d113      	bne.n	80064fc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	695b      	ldr	r3, [r3, #20]
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	693a      	ldr	r2, [r7, #16]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	699b      	ldr	r3, [r3, #24]
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	693a      	ldr	r2, [r7, #16]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	693a      	ldr	r2, [r7, #16]
 8006500:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	685a      	ldr	r2, [r3, #4]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	621a      	str	r2, [r3, #32]
}
 8006516:	bf00      	nop
 8006518:	371c      	adds	r7, #28
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	40010000 	.word	0x40010000
 8006528:	40010400 	.word	0x40010400

0800652c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800652c:	b480      	push	{r7}
 800652e:	b087      	sub	sp, #28
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a1b      	ldr	r3, [r3, #32]
 800653a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a1b      	ldr	r3, [r3, #32]
 8006546:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	69db      	ldr	r3, [r3, #28]
 8006552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800655a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f023 0303 	bic.w	r3, r3, #3
 8006562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	4313      	orrs	r3, r2
 800656c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006574:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	021b      	lsls	r3, r3, #8
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	4313      	orrs	r3, r2
 8006580:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a21      	ldr	r2, [pc, #132]	; (800660c <TIM_OC3_SetConfig+0xe0>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d003      	beq.n	8006592 <TIM_OC3_SetConfig+0x66>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a20      	ldr	r2, [pc, #128]	; (8006610 <TIM_OC3_SetConfig+0xe4>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d10d      	bne.n	80065ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006598:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	021b      	lsls	r3, r3, #8
 80065a0:	697a      	ldr	r2, [r7, #20]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a16      	ldr	r2, [pc, #88]	; (800660c <TIM_OC3_SetConfig+0xe0>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d003      	beq.n	80065be <TIM_OC3_SetConfig+0x92>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a15      	ldr	r2, [pc, #84]	; (8006610 <TIM_OC3_SetConfig+0xe4>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d113      	bne.n	80065e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	695b      	ldr	r3, [r3, #20]
 80065d2:	011b      	lsls	r3, r3, #4
 80065d4:	693a      	ldr	r2, [r7, #16]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	699b      	ldr	r3, [r3, #24]
 80065de:	011b      	lsls	r3, r3, #4
 80065e0:	693a      	ldr	r2, [r7, #16]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	693a      	ldr	r2, [r7, #16]
 80065ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	685a      	ldr	r2, [r3, #4]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	697a      	ldr	r2, [r7, #20]
 80065fe:	621a      	str	r2, [r3, #32]
}
 8006600:	bf00      	nop
 8006602:	371c      	adds	r7, #28
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr
 800660c:	40010000 	.word	0x40010000
 8006610:	40010400 	.word	0x40010400

08006614 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006614:	b480      	push	{r7}
 8006616:	b087      	sub	sp, #28
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a1b      	ldr	r3, [r3, #32]
 8006622:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a1b      	ldr	r3, [r3, #32]
 800662e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	69db      	ldr	r3, [r3, #28]
 800663a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800664a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	021b      	lsls	r3, r3, #8
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	4313      	orrs	r3, r2
 8006656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800665e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	031b      	lsls	r3, r3, #12
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	4313      	orrs	r3, r2
 800666a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a12      	ldr	r2, [pc, #72]	; (80066b8 <TIM_OC4_SetConfig+0xa4>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d003      	beq.n	800667c <TIM_OC4_SetConfig+0x68>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a11      	ldr	r2, [pc, #68]	; (80066bc <TIM_OC4_SetConfig+0xa8>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d109      	bne.n	8006690 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006682:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	695b      	ldr	r3, [r3, #20]
 8006688:	019b      	lsls	r3, r3, #6
 800668a:	697a      	ldr	r2, [r7, #20]
 800668c:	4313      	orrs	r3, r2
 800668e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	697a      	ldr	r2, [r7, #20]
 8006694:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	685a      	ldr	r2, [r3, #4]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	693a      	ldr	r2, [r7, #16]
 80066a8:	621a      	str	r2, [r3, #32]
}
 80066aa:	bf00      	nop
 80066ac:	371c      	adds	r7, #28
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	40010000 	.word	0x40010000
 80066bc:	40010400 	.word	0x40010400

080066c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b087      	sub	sp, #28
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6a1b      	ldr	r3, [r3, #32]
 80066d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6a1b      	ldr	r3, [r3, #32]
 80066d6:	f023 0201 	bic.w	r2, r3, #1
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	011b      	lsls	r3, r3, #4
 80066f0:	693a      	ldr	r2, [r7, #16]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	f023 030a 	bic.w	r3, r3, #10
 80066fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066fe:	697a      	ldr	r2, [r7, #20]
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	4313      	orrs	r3, r2
 8006704:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	693a      	ldr	r2, [r7, #16]
 800670a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	621a      	str	r2, [r3, #32]
}
 8006712:	bf00      	nop
 8006714:	371c      	adds	r7, #28
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr

0800671e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800671e:	b480      	push	{r7}
 8006720:	b087      	sub	sp, #28
 8006722:	af00      	add	r7, sp, #0
 8006724:	60f8      	str	r0, [r7, #12]
 8006726:	60b9      	str	r1, [r7, #8]
 8006728:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6a1b      	ldr	r3, [r3, #32]
 800672e:	f023 0210 	bic.w	r2, r3, #16
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6a1b      	ldr	r3, [r3, #32]
 8006740:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006748:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	031b      	lsls	r3, r3, #12
 800674e:	697a      	ldr	r2, [r7, #20]
 8006750:	4313      	orrs	r3, r2
 8006752:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800675a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	011b      	lsls	r3, r3, #4
 8006760:	693a      	ldr	r2, [r7, #16]
 8006762:	4313      	orrs	r3, r2
 8006764:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	697a      	ldr	r2, [r7, #20]
 800676a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	693a      	ldr	r2, [r7, #16]
 8006770:	621a      	str	r2, [r3, #32]
}
 8006772:	bf00      	nop
 8006774:	371c      	adds	r7, #28
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr

0800677e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800677e:	b480      	push	{r7}
 8006780:	b085      	sub	sp, #20
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
 8006786:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006794:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006796:	683a      	ldr	r2, [r7, #0]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	4313      	orrs	r3, r2
 800679c:	f043 0307 	orr.w	r3, r3, #7
 80067a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	609a      	str	r2, [r3, #8]
}
 80067a8:	bf00      	nop
 80067aa:	3714      	adds	r7, #20
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b087      	sub	sp, #28
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	607a      	str	r2, [r7, #4]
 80067c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	021a      	lsls	r2, r3, #8
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	431a      	orrs	r2, r3
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	4313      	orrs	r3, r2
 80067dc:	697a      	ldr	r2, [r7, #20]
 80067de:	4313      	orrs	r3, r2
 80067e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	697a      	ldr	r2, [r7, #20]
 80067e6:	609a      	str	r2, [r3, #8]
}
 80067e8:	bf00      	nop
 80067ea:	371c      	adds	r7, #28
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b087      	sub	sp, #28
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	f003 031f 	and.w	r3, r3, #31
 8006806:	2201      	movs	r2, #1
 8006808:	fa02 f303 	lsl.w	r3, r2, r3
 800680c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6a1a      	ldr	r2, [r3, #32]
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	43db      	mvns	r3, r3
 8006816:	401a      	ands	r2, r3
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6a1a      	ldr	r2, [r3, #32]
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	f003 031f 	and.w	r3, r3, #31
 8006826:	6879      	ldr	r1, [r7, #4]
 8006828:	fa01 f303 	lsl.w	r3, r1, r3
 800682c:	431a      	orrs	r2, r3
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	621a      	str	r2, [r3, #32]
}
 8006832:	bf00      	nop
 8006834:	371c      	adds	r7, #28
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
	...

08006840 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006850:	2b01      	cmp	r3, #1
 8006852:	d101      	bne.n	8006858 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006854:	2302      	movs	r3, #2
 8006856:	e05a      	b.n	800690e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2202      	movs	r2, #2
 8006864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800687e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	4313      	orrs	r3, r2
 8006888:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a21      	ldr	r2, [pc, #132]	; (800691c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d022      	beq.n	80068e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068a4:	d01d      	beq.n	80068e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a1d      	ldr	r2, [pc, #116]	; (8006920 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d018      	beq.n	80068e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a1b      	ldr	r2, [pc, #108]	; (8006924 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d013      	beq.n	80068e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a1a      	ldr	r2, [pc, #104]	; (8006928 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d00e      	beq.n	80068e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a18      	ldr	r2, [pc, #96]	; (800692c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d009      	beq.n	80068e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a17      	ldr	r2, [pc, #92]	; (8006930 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d004      	beq.n	80068e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a15      	ldr	r2, [pc, #84]	; (8006934 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d10c      	bne.n	80068fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	68ba      	ldr	r2, [r7, #8]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68ba      	ldr	r2, [r7, #8]
 80068fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	3714      	adds	r7, #20
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr
 800691a:	bf00      	nop
 800691c:	40010000 	.word	0x40010000
 8006920:	40000400 	.word	0x40000400
 8006924:	40000800 	.word	0x40000800
 8006928:	40000c00 	.word	0x40000c00
 800692c:	40010400 	.word	0x40010400
 8006930:	40014000 	.word	0x40014000
 8006934:	40001800 	.word	0x40001800

08006938 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d101      	bne.n	800694a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e03f      	b.n	80069ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006950:	b2db      	uxtb	r3, r3
 8006952:	2b00      	cmp	r3, #0
 8006954:	d106      	bne.n	8006964 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f7fa ff20 	bl	80017a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2224      	movs	r2, #36	; 0x24
 8006968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68da      	ldr	r2, [r3, #12]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800697a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 fc7b 	bl	8007278 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	691a      	ldr	r2, [r3, #16]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006990:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	695a      	ldr	r2, [r3, #20]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80069a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68da      	ldr	r2, [r3, #12]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80069b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2220      	movs	r2, #32
 80069bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2220      	movs	r2, #32
 80069c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3708      	adds	r7, #8
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
	...

080069d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b0ba      	sub	sp, #232	; 0xe8
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	695b      	ldr	r3, [r3, #20]
 80069f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80069fa:	2300      	movs	r3, #0
 80069fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006a00:	2300      	movs	r3, #0
 8006a02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a0a:	f003 030f 	and.w	r3, r3, #15
 8006a0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006a12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d10f      	bne.n	8006a3a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a1e:	f003 0320 	and.w	r3, r3, #32
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d009      	beq.n	8006a3a <HAL_UART_IRQHandler+0x66>
 8006a26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a2a:	f003 0320 	and.w	r3, r3, #32
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d003      	beq.n	8006a3a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 fb65 	bl	8007102 <UART_Receive_IT>
      return;
 8006a38:	e256      	b.n	8006ee8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006a3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	f000 80de 	beq.w	8006c00 <HAL_UART_IRQHandler+0x22c>
 8006a44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a48:	f003 0301 	and.w	r3, r3, #1
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d106      	bne.n	8006a5e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a54:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f000 80d1 	beq.w	8006c00 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a62:	f003 0301 	and.w	r3, r3, #1
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00b      	beq.n	8006a82 <HAL_UART_IRQHandler+0xae>
 8006a6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d005      	beq.n	8006a82 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7a:	f043 0201 	orr.w	r2, r3, #1
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a86:	f003 0304 	and.w	r3, r3, #4
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00b      	beq.n	8006aa6 <HAL_UART_IRQHandler+0xd2>
 8006a8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a92:	f003 0301 	and.w	r3, r3, #1
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d005      	beq.n	8006aa6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9e:	f043 0202 	orr.w	r2, r3, #2
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aaa:	f003 0302 	and.w	r3, r3, #2
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d00b      	beq.n	8006aca <HAL_UART_IRQHandler+0xf6>
 8006ab2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ab6:	f003 0301 	and.w	r3, r3, #1
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d005      	beq.n	8006aca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac2:	f043 0204 	orr.w	r2, r3, #4
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ace:	f003 0308 	and.w	r3, r3, #8
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d011      	beq.n	8006afa <HAL_UART_IRQHandler+0x126>
 8006ad6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ada:	f003 0320 	and.w	r3, r3, #32
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d105      	bne.n	8006aee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006ae2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ae6:	f003 0301 	and.w	r3, r3, #1
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d005      	beq.n	8006afa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af2:	f043 0208 	orr.w	r2, r3, #8
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	f000 81ed 	beq.w	8006ede <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b08:	f003 0320 	and.w	r3, r3, #32
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d008      	beq.n	8006b22 <HAL_UART_IRQHandler+0x14e>
 8006b10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b14:	f003 0320 	and.w	r3, r3, #32
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d002      	beq.n	8006b22 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 faf0 	bl	8007102 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	695b      	ldr	r3, [r3, #20]
 8006b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b2c:	2b40      	cmp	r3, #64	; 0x40
 8006b2e:	bf0c      	ite	eq
 8006b30:	2301      	moveq	r3, #1
 8006b32:	2300      	movne	r3, #0
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3e:	f003 0308 	and.w	r3, r3, #8
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d103      	bne.n	8006b4e <HAL_UART_IRQHandler+0x17a>
 8006b46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d04f      	beq.n	8006bee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 f9f8 	bl	8006f44 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	695b      	ldr	r3, [r3, #20]
 8006b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b5e:	2b40      	cmp	r3, #64	; 0x40
 8006b60:	d141      	bne.n	8006be6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	3314      	adds	r3, #20
 8006b68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b70:	e853 3f00 	ldrex	r3, [r3]
 8006b74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006b78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	3314      	adds	r3, #20
 8006b8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006b8e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006b92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006b9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006b9e:	e841 2300 	strex	r3, r2, [r1]
 8006ba2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006ba6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d1d9      	bne.n	8006b62 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d013      	beq.n	8006bde <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bba:	4a7d      	ldr	r2, [pc, #500]	; (8006db0 <HAL_UART_IRQHandler+0x3dc>)
 8006bbc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7fb faac 	bl	8002120 <HAL_DMA_Abort_IT>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d016      	beq.n	8006bfc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006bd8:	4610      	mov	r0, r2
 8006bda:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bdc:	e00e      	b.n	8006bfc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 f99a 	bl	8006f18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006be4:	e00a      	b.n	8006bfc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 f996 	bl	8006f18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bec:	e006      	b.n	8006bfc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 f992 	bl	8006f18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006bfa:	e170      	b.n	8006ede <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bfc:	bf00      	nop
    return;
 8006bfe:	e16e      	b.n	8006ede <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	f040 814a 	bne.w	8006e9e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c0e:	f003 0310 	and.w	r3, r3, #16
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	f000 8143 	beq.w	8006e9e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006c18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c1c:	f003 0310 	and.w	r3, r3, #16
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	f000 813c 	beq.w	8006e9e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c26:	2300      	movs	r3, #0
 8006c28:	60bb      	str	r3, [r7, #8]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	60bb      	str	r3, [r7, #8]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	60bb      	str	r3, [r7, #8]
 8006c3a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	695b      	ldr	r3, [r3, #20]
 8006c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c46:	2b40      	cmp	r3, #64	; 0x40
 8006c48:	f040 80b4 	bne.w	8006db4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006c58:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	f000 8140 	beq.w	8006ee2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	f080 8139 	bcs.w	8006ee2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c76:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7c:	69db      	ldr	r3, [r3, #28]
 8006c7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c82:	f000 8088 	beq.w	8006d96 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	330c      	adds	r3, #12
 8006c8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c94:	e853 3f00 	ldrex	r3, [r3]
 8006c98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006c9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ca0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ca4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	330c      	adds	r3, #12
 8006cae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006cb2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006cb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006cbe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006cc2:	e841 2300 	strex	r3, r2, [r1]
 8006cc6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006cca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d1d9      	bne.n	8006c86 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	3314      	adds	r3, #20
 8006cd8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cdc:	e853 3f00 	ldrex	r3, [r3]
 8006ce0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006ce2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ce4:	f023 0301 	bic.w	r3, r3, #1
 8006ce8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	3314      	adds	r3, #20
 8006cf2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006cf6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006cfa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006cfe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006d02:	e841 2300 	strex	r3, r2, [r1]
 8006d06:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006d08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1e1      	bne.n	8006cd2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	3314      	adds	r3, #20
 8006d14:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d18:	e853 3f00 	ldrex	r3, [r3]
 8006d1c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006d1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	3314      	adds	r3, #20
 8006d2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006d32:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006d34:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d36:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006d38:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006d3a:	e841 2300 	strex	r3, r2, [r1]
 8006d3e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006d40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d1e3      	bne.n	8006d0e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2220      	movs	r2, #32
 8006d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	330c      	adds	r3, #12
 8006d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d5e:	e853 3f00 	ldrex	r3, [r3]
 8006d62:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006d64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d66:	f023 0310 	bic.w	r3, r3, #16
 8006d6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	330c      	adds	r3, #12
 8006d74:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006d78:	65ba      	str	r2, [r7, #88]	; 0x58
 8006d7a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006d7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d80:	e841 2300 	strex	r3, r2, [r1]
 8006d84:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006d86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d1e3      	bne.n	8006d54 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d90:	4618      	mov	r0, r3
 8006d92:	f7fb f955 	bl	8002040 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	4619      	mov	r1, r3
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 f8c0 	bl	8006f2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006dac:	e099      	b.n	8006ee2 <HAL_UART_IRQHandler+0x50e>
 8006dae:	bf00      	nop
 8006db0:	0800700b 	.word	0x0800700b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	1ad3      	subs	r3, r2, r3
 8006dc0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	f000 808b 	beq.w	8006ee6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006dd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	f000 8086 	beq.w	8006ee6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	330c      	adds	r3, #12
 8006de0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de4:	e853 3f00 	ldrex	r3, [r3]
 8006de8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006df0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	330c      	adds	r3, #12
 8006dfa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006dfe:	647a      	str	r2, [r7, #68]	; 0x44
 8006e00:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e06:	e841 2300 	strex	r3, r2, [r1]
 8006e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1e3      	bne.n	8006dda <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	3314      	adds	r3, #20
 8006e18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1c:	e853 3f00 	ldrex	r3, [r3]
 8006e20:	623b      	str	r3, [r7, #32]
   return(result);
 8006e22:	6a3b      	ldr	r3, [r7, #32]
 8006e24:	f023 0301 	bic.w	r3, r3, #1
 8006e28:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	3314      	adds	r3, #20
 8006e32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006e36:	633a      	str	r2, [r7, #48]	; 0x30
 8006e38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e3e:	e841 2300 	strex	r3, r2, [r1]
 8006e42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d1e3      	bne.n	8006e12 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2220      	movs	r2, #32
 8006e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	330c      	adds	r3, #12
 8006e5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	e853 3f00 	ldrex	r3, [r3]
 8006e66:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f023 0310 	bic.w	r3, r3, #16
 8006e6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	330c      	adds	r3, #12
 8006e78:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006e7c:	61fa      	str	r2, [r7, #28]
 8006e7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e80:	69b9      	ldr	r1, [r7, #24]
 8006e82:	69fa      	ldr	r2, [r7, #28]
 8006e84:	e841 2300 	strex	r3, r2, [r1]
 8006e88:	617b      	str	r3, [r7, #20]
   return(result);
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d1e3      	bne.n	8006e58 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e94:	4619      	mov	r1, r3
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 f848 	bl	8006f2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e9c:	e023      	b.n	8006ee6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d009      	beq.n	8006ebe <HAL_UART_IRQHandler+0x4ea>
 8006eaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d003      	beq.n	8006ebe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 f8bb 	bl	8007032 <UART_Transmit_IT>
    return;
 8006ebc:	e014      	b.n	8006ee8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d00e      	beq.n	8006ee8 <HAL_UART_IRQHandler+0x514>
 8006eca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d008      	beq.n	8006ee8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 f8fb 	bl	80070d2 <UART_EndTransmit_IT>
    return;
 8006edc:	e004      	b.n	8006ee8 <HAL_UART_IRQHandler+0x514>
    return;
 8006ede:	bf00      	nop
 8006ee0:	e002      	b.n	8006ee8 <HAL_UART_IRQHandler+0x514>
      return;
 8006ee2:	bf00      	nop
 8006ee4:	e000      	b.n	8006ee8 <HAL_UART_IRQHandler+0x514>
      return;
 8006ee6:	bf00      	nop
  }
}
 8006ee8:	37e8      	adds	r7, #232	; 0xe8
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop

08006ef0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006ef8:	bf00      	nop
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006f0c:	bf00      	nop
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006f20:	bf00      	nop
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	460b      	mov	r3, r1
 8006f36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f38:	bf00      	nop
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b095      	sub	sp, #84	; 0x54
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	330c      	adds	r3, #12
 8006f52:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f56:	e853 3f00 	ldrex	r3, [r3]
 8006f5a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	330c      	adds	r3, #12
 8006f6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f6c:	643a      	str	r2, [r7, #64]	; 0x40
 8006f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f74:	e841 2300 	strex	r3, r2, [r1]
 8006f78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d1e5      	bne.n	8006f4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	3314      	adds	r3, #20
 8006f86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f88:	6a3b      	ldr	r3, [r7, #32]
 8006f8a:	e853 3f00 	ldrex	r3, [r3]
 8006f8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	f023 0301 	bic.w	r3, r3, #1
 8006f96:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	3314      	adds	r3, #20
 8006f9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fa0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006fa2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fa8:	e841 2300 	strex	r3, r2, [r1]
 8006fac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d1e5      	bne.n	8006f80 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d119      	bne.n	8006ff0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	330c      	adds	r3, #12
 8006fc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	e853 3f00 	ldrex	r3, [r3]
 8006fca:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	f023 0310 	bic.w	r3, r3, #16
 8006fd2:	647b      	str	r3, [r7, #68]	; 0x44
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	330c      	adds	r3, #12
 8006fda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fdc:	61ba      	str	r2, [r7, #24]
 8006fde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe0:	6979      	ldr	r1, [r7, #20]
 8006fe2:	69ba      	ldr	r2, [r7, #24]
 8006fe4:	e841 2300 	strex	r3, r2, [r1]
 8006fe8:	613b      	str	r3, [r7, #16]
   return(result);
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d1e5      	bne.n	8006fbc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2220      	movs	r2, #32
 8006ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006ffe:	bf00      	nop
 8007000:	3754      	adds	r7, #84	; 0x54
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr

0800700a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800700a:	b580      	push	{r7, lr}
 800700c:	b084      	sub	sp, #16
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007016:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2200      	movs	r2, #0
 8007022:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007024:	68f8      	ldr	r0, [r7, #12]
 8007026:	f7ff ff77 	bl	8006f18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800702a:	bf00      	nop
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}

08007032 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007032:	b480      	push	{r7}
 8007034:	b085      	sub	sp, #20
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007040:	b2db      	uxtb	r3, r3
 8007042:	2b21      	cmp	r3, #33	; 0x21
 8007044:	d13e      	bne.n	80070c4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800704e:	d114      	bne.n	800707a <UART_Transmit_IT+0x48>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	691b      	ldr	r3, [r3, #16]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d110      	bne.n	800707a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6a1b      	ldr	r3, [r3, #32]
 800705c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	881b      	ldrh	r3, [r3, #0]
 8007062:	461a      	mov	r2, r3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800706c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a1b      	ldr	r3, [r3, #32]
 8007072:	1c9a      	adds	r2, r3, #2
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	621a      	str	r2, [r3, #32]
 8007078:	e008      	b.n	800708c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a1b      	ldr	r3, [r3, #32]
 800707e:	1c59      	adds	r1, r3, #1
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	6211      	str	r1, [r2, #32]
 8007084:	781a      	ldrb	r2, [r3, #0]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007090:	b29b      	uxth	r3, r3
 8007092:	3b01      	subs	r3, #1
 8007094:	b29b      	uxth	r3, r3
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	4619      	mov	r1, r3
 800709a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800709c:	2b00      	cmp	r3, #0
 800709e:	d10f      	bne.n	80070c0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	68da      	ldr	r2, [r3, #12]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070ae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	68da      	ldr	r2, [r3, #12]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070be:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80070c0:	2300      	movs	r3, #0
 80070c2:	e000      	b.n	80070c6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80070c4:	2302      	movs	r3, #2
  }
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3714      	adds	r7, #20
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr

080070d2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b082      	sub	sp, #8
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68da      	ldr	r2, [r3, #12]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070e8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2220      	movs	r2, #32
 80070ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f7ff fefc 	bl	8006ef0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3708      	adds	r7, #8
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}

08007102 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007102:	b580      	push	{r7, lr}
 8007104:	b08c      	sub	sp, #48	; 0x30
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007110:	b2db      	uxtb	r3, r3
 8007112:	2b22      	cmp	r3, #34	; 0x22
 8007114:	f040 80ab 	bne.w	800726e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007120:	d117      	bne.n	8007152 <UART_Receive_IT+0x50>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d113      	bne.n	8007152 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800712a:	2300      	movs	r3, #0
 800712c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007132:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	b29b      	uxth	r3, r3
 800713c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007140:	b29a      	uxth	r2, r3
 8007142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007144:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800714a:	1c9a      	adds	r2, r3, #2
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	629a      	str	r2, [r3, #40]	; 0x28
 8007150:	e026      	b.n	80071a0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007156:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007158:	2300      	movs	r3, #0
 800715a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007164:	d007      	beq.n	8007176 <UART_Receive_IT+0x74>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d10a      	bne.n	8007184 <UART_Receive_IT+0x82>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d106      	bne.n	8007184 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	b2da      	uxtb	r2, r3
 800717e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007180:	701a      	strb	r2, [r3, #0]
 8007182:	e008      	b.n	8007196 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	b2db      	uxtb	r3, r3
 800718c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007190:	b2da      	uxtb	r2, r3
 8007192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007194:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800719a:	1c5a      	adds	r2, r3, #1
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	3b01      	subs	r3, #1
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	4619      	mov	r1, r3
 80071ae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d15a      	bne.n	800726a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	68da      	ldr	r2, [r3, #12]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f022 0220 	bic.w	r2, r2, #32
 80071c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68da      	ldr	r2, [r3, #12]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80071d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	695a      	ldr	r2, [r3, #20]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f022 0201 	bic.w	r2, r2, #1
 80071e2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2220      	movs	r2, #32
 80071e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d135      	bne.n	8007260 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	330c      	adds	r3, #12
 8007200:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	e853 3f00 	ldrex	r3, [r3]
 8007208:	613b      	str	r3, [r7, #16]
   return(result);
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	f023 0310 	bic.w	r3, r3, #16
 8007210:	627b      	str	r3, [r7, #36]	; 0x24
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	330c      	adds	r3, #12
 8007218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800721a:	623a      	str	r2, [r7, #32]
 800721c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721e:	69f9      	ldr	r1, [r7, #28]
 8007220:	6a3a      	ldr	r2, [r7, #32]
 8007222:	e841 2300 	strex	r3, r2, [r1]
 8007226:	61bb      	str	r3, [r7, #24]
   return(result);
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d1e5      	bne.n	80071fa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 0310 	and.w	r3, r3, #16
 8007238:	2b10      	cmp	r3, #16
 800723a:	d10a      	bne.n	8007252 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800723c:	2300      	movs	r3, #0
 800723e:	60fb      	str	r3, [r7, #12]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	60fb      	str	r3, [r7, #12]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	60fb      	str	r3, [r7, #12]
 8007250:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007256:	4619      	mov	r1, r3
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f7ff fe67 	bl	8006f2c <HAL_UARTEx_RxEventCallback>
 800725e:	e002      	b.n	8007266 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f7ff fe4f 	bl	8006f04 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007266:	2300      	movs	r3, #0
 8007268:	e002      	b.n	8007270 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800726a:	2300      	movs	r3, #0
 800726c:	e000      	b.n	8007270 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800726e:	2302      	movs	r3, #2
  }
}
 8007270:	4618      	mov	r0, r3
 8007272:	3730      	adds	r7, #48	; 0x30
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007278:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800727c:	b0c0      	sub	sp, #256	; 0x100
 800727e:	af00      	add	r7, sp, #0
 8007280:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007294:	68d9      	ldr	r1, [r3, #12]
 8007296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	ea40 0301 	orr.w	r3, r0, r1
 80072a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80072a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072a6:	689a      	ldr	r2, [r3, #8]
 80072a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072ac:	691b      	ldr	r3, [r3, #16]
 80072ae:	431a      	orrs	r2, r3
 80072b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072b4:	695b      	ldr	r3, [r3, #20]
 80072b6:	431a      	orrs	r2, r3
 80072b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072bc:	69db      	ldr	r3, [r3, #28]
 80072be:	4313      	orrs	r3, r2
 80072c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80072c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80072d0:	f021 010c 	bic.w	r1, r1, #12
 80072d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80072de:	430b      	orrs	r3, r1
 80072e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80072e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	695b      	ldr	r3, [r3, #20]
 80072ea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80072ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072f2:	6999      	ldr	r1, [r3, #24]
 80072f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	ea40 0301 	orr.w	r3, r0, r1
 80072fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	4b8f      	ldr	r3, [pc, #572]	; (8007544 <UART_SetConfig+0x2cc>)
 8007308:	429a      	cmp	r2, r3
 800730a:	d005      	beq.n	8007318 <UART_SetConfig+0xa0>
 800730c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	4b8d      	ldr	r3, [pc, #564]	; (8007548 <UART_SetConfig+0x2d0>)
 8007314:	429a      	cmp	r2, r3
 8007316:	d104      	bne.n	8007322 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007318:	f7fc ffe8 	bl	80042ec <HAL_RCC_GetPCLK2Freq>
 800731c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007320:	e003      	b.n	800732a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007322:	f7fc ffcf 	bl	80042c4 <HAL_RCC_GetPCLK1Freq>
 8007326:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800732a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800732e:	69db      	ldr	r3, [r3, #28]
 8007330:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007334:	f040 810c 	bne.w	8007550 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007338:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800733c:	2200      	movs	r2, #0
 800733e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007342:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007346:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800734a:	4622      	mov	r2, r4
 800734c:	462b      	mov	r3, r5
 800734e:	1891      	adds	r1, r2, r2
 8007350:	65b9      	str	r1, [r7, #88]	; 0x58
 8007352:	415b      	adcs	r3, r3
 8007354:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007356:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800735a:	4621      	mov	r1, r4
 800735c:	eb12 0801 	adds.w	r8, r2, r1
 8007360:	4629      	mov	r1, r5
 8007362:	eb43 0901 	adc.w	r9, r3, r1
 8007366:	f04f 0200 	mov.w	r2, #0
 800736a:	f04f 0300 	mov.w	r3, #0
 800736e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007372:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007376:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800737a:	4690      	mov	r8, r2
 800737c:	4699      	mov	r9, r3
 800737e:	4623      	mov	r3, r4
 8007380:	eb18 0303 	adds.w	r3, r8, r3
 8007384:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007388:	462b      	mov	r3, r5
 800738a:	eb49 0303 	adc.w	r3, r9, r3
 800738e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800739e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80073a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80073a6:	460b      	mov	r3, r1
 80073a8:	18db      	adds	r3, r3, r3
 80073aa:	653b      	str	r3, [r7, #80]	; 0x50
 80073ac:	4613      	mov	r3, r2
 80073ae:	eb42 0303 	adc.w	r3, r2, r3
 80073b2:	657b      	str	r3, [r7, #84]	; 0x54
 80073b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80073b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80073bc:	f7f9 fc84 	bl	8000cc8 <__aeabi_uldivmod>
 80073c0:	4602      	mov	r2, r0
 80073c2:	460b      	mov	r3, r1
 80073c4:	4b61      	ldr	r3, [pc, #388]	; (800754c <UART_SetConfig+0x2d4>)
 80073c6:	fba3 2302 	umull	r2, r3, r3, r2
 80073ca:	095b      	lsrs	r3, r3, #5
 80073cc:	011c      	lsls	r4, r3, #4
 80073ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073d2:	2200      	movs	r2, #0
 80073d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80073d8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80073dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80073e0:	4642      	mov	r2, r8
 80073e2:	464b      	mov	r3, r9
 80073e4:	1891      	adds	r1, r2, r2
 80073e6:	64b9      	str	r1, [r7, #72]	; 0x48
 80073e8:	415b      	adcs	r3, r3
 80073ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80073f0:	4641      	mov	r1, r8
 80073f2:	eb12 0a01 	adds.w	sl, r2, r1
 80073f6:	4649      	mov	r1, r9
 80073f8:	eb43 0b01 	adc.w	fp, r3, r1
 80073fc:	f04f 0200 	mov.w	r2, #0
 8007400:	f04f 0300 	mov.w	r3, #0
 8007404:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007408:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800740c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007410:	4692      	mov	sl, r2
 8007412:	469b      	mov	fp, r3
 8007414:	4643      	mov	r3, r8
 8007416:	eb1a 0303 	adds.w	r3, sl, r3
 800741a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800741e:	464b      	mov	r3, r9
 8007420:	eb4b 0303 	adc.w	r3, fp, r3
 8007424:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007434:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007438:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800743c:	460b      	mov	r3, r1
 800743e:	18db      	adds	r3, r3, r3
 8007440:	643b      	str	r3, [r7, #64]	; 0x40
 8007442:	4613      	mov	r3, r2
 8007444:	eb42 0303 	adc.w	r3, r2, r3
 8007448:	647b      	str	r3, [r7, #68]	; 0x44
 800744a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800744e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007452:	f7f9 fc39 	bl	8000cc8 <__aeabi_uldivmod>
 8007456:	4602      	mov	r2, r0
 8007458:	460b      	mov	r3, r1
 800745a:	4611      	mov	r1, r2
 800745c:	4b3b      	ldr	r3, [pc, #236]	; (800754c <UART_SetConfig+0x2d4>)
 800745e:	fba3 2301 	umull	r2, r3, r3, r1
 8007462:	095b      	lsrs	r3, r3, #5
 8007464:	2264      	movs	r2, #100	; 0x64
 8007466:	fb02 f303 	mul.w	r3, r2, r3
 800746a:	1acb      	subs	r3, r1, r3
 800746c:	00db      	lsls	r3, r3, #3
 800746e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007472:	4b36      	ldr	r3, [pc, #216]	; (800754c <UART_SetConfig+0x2d4>)
 8007474:	fba3 2302 	umull	r2, r3, r3, r2
 8007478:	095b      	lsrs	r3, r3, #5
 800747a:	005b      	lsls	r3, r3, #1
 800747c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007480:	441c      	add	r4, r3
 8007482:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007486:	2200      	movs	r2, #0
 8007488:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800748c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007490:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007494:	4642      	mov	r2, r8
 8007496:	464b      	mov	r3, r9
 8007498:	1891      	adds	r1, r2, r2
 800749a:	63b9      	str	r1, [r7, #56]	; 0x38
 800749c:	415b      	adcs	r3, r3
 800749e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80074a4:	4641      	mov	r1, r8
 80074a6:	1851      	adds	r1, r2, r1
 80074a8:	6339      	str	r1, [r7, #48]	; 0x30
 80074aa:	4649      	mov	r1, r9
 80074ac:	414b      	adcs	r3, r1
 80074ae:	637b      	str	r3, [r7, #52]	; 0x34
 80074b0:	f04f 0200 	mov.w	r2, #0
 80074b4:	f04f 0300 	mov.w	r3, #0
 80074b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80074bc:	4659      	mov	r1, fp
 80074be:	00cb      	lsls	r3, r1, #3
 80074c0:	4651      	mov	r1, sl
 80074c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074c6:	4651      	mov	r1, sl
 80074c8:	00ca      	lsls	r2, r1, #3
 80074ca:	4610      	mov	r0, r2
 80074cc:	4619      	mov	r1, r3
 80074ce:	4603      	mov	r3, r0
 80074d0:	4642      	mov	r2, r8
 80074d2:	189b      	adds	r3, r3, r2
 80074d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80074d8:	464b      	mov	r3, r9
 80074da:	460a      	mov	r2, r1
 80074dc:	eb42 0303 	adc.w	r3, r2, r3
 80074e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80074e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80074f0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80074f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80074f8:	460b      	mov	r3, r1
 80074fa:	18db      	adds	r3, r3, r3
 80074fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80074fe:	4613      	mov	r3, r2
 8007500:	eb42 0303 	adc.w	r3, r2, r3
 8007504:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007506:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800750a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800750e:	f7f9 fbdb 	bl	8000cc8 <__aeabi_uldivmod>
 8007512:	4602      	mov	r2, r0
 8007514:	460b      	mov	r3, r1
 8007516:	4b0d      	ldr	r3, [pc, #52]	; (800754c <UART_SetConfig+0x2d4>)
 8007518:	fba3 1302 	umull	r1, r3, r3, r2
 800751c:	095b      	lsrs	r3, r3, #5
 800751e:	2164      	movs	r1, #100	; 0x64
 8007520:	fb01 f303 	mul.w	r3, r1, r3
 8007524:	1ad3      	subs	r3, r2, r3
 8007526:	00db      	lsls	r3, r3, #3
 8007528:	3332      	adds	r3, #50	; 0x32
 800752a:	4a08      	ldr	r2, [pc, #32]	; (800754c <UART_SetConfig+0x2d4>)
 800752c:	fba2 2303 	umull	r2, r3, r2, r3
 8007530:	095b      	lsrs	r3, r3, #5
 8007532:	f003 0207 	and.w	r2, r3, #7
 8007536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4422      	add	r2, r4
 800753e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007540:	e105      	b.n	800774e <UART_SetConfig+0x4d6>
 8007542:	bf00      	nop
 8007544:	40011000 	.word	0x40011000
 8007548:	40011400 	.word	0x40011400
 800754c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007550:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007554:	2200      	movs	r2, #0
 8007556:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800755a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800755e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007562:	4642      	mov	r2, r8
 8007564:	464b      	mov	r3, r9
 8007566:	1891      	adds	r1, r2, r2
 8007568:	6239      	str	r1, [r7, #32]
 800756a:	415b      	adcs	r3, r3
 800756c:	627b      	str	r3, [r7, #36]	; 0x24
 800756e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007572:	4641      	mov	r1, r8
 8007574:	1854      	adds	r4, r2, r1
 8007576:	4649      	mov	r1, r9
 8007578:	eb43 0501 	adc.w	r5, r3, r1
 800757c:	f04f 0200 	mov.w	r2, #0
 8007580:	f04f 0300 	mov.w	r3, #0
 8007584:	00eb      	lsls	r3, r5, #3
 8007586:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800758a:	00e2      	lsls	r2, r4, #3
 800758c:	4614      	mov	r4, r2
 800758e:	461d      	mov	r5, r3
 8007590:	4643      	mov	r3, r8
 8007592:	18e3      	adds	r3, r4, r3
 8007594:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007598:	464b      	mov	r3, r9
 800759a:	eb45 0303 	adc.w	r3, r5, r3
 800759e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80075a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80075ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80075b2:	f04f 0200 	mov.w	r2, #0
 80075b6:	f04f 0300 	mov.w	r3, #0
 80075ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80075be:	4629      	mov	r1, r5
 80075c0:	008b      	lsls	r3, r1, #2
 80075c2:	4621      	mov	r1, r4
 80075c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075c8:	4621      	mov	r1, r4
 80075ca:	008a      	lsls	r2, r1, #2
 80075cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80075d0:	f7f9 fb7a 	bl	8000cc8 <__aeabi_uldivmod>
 80075d4:	4602      	mov	r2, r0
 80075d6:	460b      	mov	r3, r1
 80075d8:	4b60      	ldr	r3, [pc, #384]	; (800775c <UART_SetConfig+0x4e4>)
 80075da:	fba3 2302 	umull	r2, r3, r3, r2
 80075de:	095b      	lsrs	r3, r3, #5
 80075e0:	011c      	lsls	r4, r3, #4
 80075e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075e6:	2200      	movs	r2, #0
 80075e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80075ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80075f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80075f4:	4642      	mov	r2, r8
 80075f6:	464b      	mov	r3, r9
 80075f8:	1891      	adds	r1, r2, r2
 80075fa:	61b9      	str	r1, [r7, #24]
 80075fc:	415b      	adcs	r3, r3
 80075fe:	61fb      	str	r3, [r7, #28]
 8007600:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007604:	4641      	mov	r1, r8
 8007606:	1851      	adds	r1, r2, r1
 8007608:	6139      	str	r1, [r7, #16]
 800760a:	4649      	mov	r1, r9
 800760c:	414b      	adcs	r3, r1
 800760e:	617b      	str	r3, [r7, #20]
 8007610:	f04f 0200 	mov.w	r2, #0
 8007614:	f04f 0300 	mov.w	r3, #0
 8007618:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800761c:	4659      	mov	r1, fp
 800761e:	00cb      	lsls	r3, r1, #3
 8007620:	4651      	mov	r1, sl
 8007622:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007626:	4651      	mov	r1, sl
 8007628:	00ca      	lsls	r2, r1, #3
 800762a:	4610      	mov	r0, r2
 800762c:	4619      	mov	r1, r3
 800762e:	4603      	mov	r3, r0
 8007630:	4642      	mov	r2, r8
 8007632:	189b      	adds	r3, r3, r2
 8007634:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007638:	464b      	mov	r3, r9
 800763a:	460a      	mov	r2, r1
 800763c:	eb42 0303 	adc.w	r3, r2, r3
 8007640:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	67bb      	str	r3, [r7, #120]	; 0x78
 800764e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007650:	f04f 0200 	mov.w	r2, #0
 8007654:	f04f 0300 	mov.w	r3, #0
 8007658:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800765c:	4649      	mov	r1, r9
 800765e:	008b      	lsls	r3, r1, #2
 8007660:	4641      	mov	r1, r8
 8007662:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007666:	4641      	mov	r1, r8
 8007668:	008a      	lsls	r2, r1, #2
 800766a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800766e:	f7f9 fb2b 	bl	8000cc8 <__aeabi_uldivmod>
 8007672:	4602      	mov	r2, r0
 8007674:	460b      	mov	r3, r1
 8007676:	4b39      	ldr	r3, [pc, #228]	; (800775c <UART_SetConfig+0x4e4>)
 8007678:	fba3 1302 	umull	r1, r3, r3, r2
 800767c:	095b      	lsrs	r3, r3, #5
 800767e:	2164      	movs	r1, #100	; 0x64
 8007680:	fb01 f303 	mul.w	r3, r1, r3
 8007684:	1ad3      	subs	r3, r2, r3
 8007686:	011b      	lsls	r3, r3, #4
 8007688:	3332      	adds	r3, #50	; 0x32
 800768a:	4a34      	ldr	r2, [pc, #208]	; (800775c <UART_SetConfig+0x4e4>)
 800768c:	fba2 2303 	umull	r2, r3, r2, r3
 8007690:	095b      	lsrs	r3, r3, #5
 8007692:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007696:	441c      	add	r4, r3
 8007698:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800769c:	2200      	movs	r2, #0
 800769e:	673b      	str	r3, [r7, #112]	; 0x70
 80076a0:	677a      	str	r2, [r7, #116]	; 0x74
 80076a2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80076a6:	4642      	mov	r2, r8
 80076a8:	464b      	mov	r3, r9
 80076aa:	1891      	adds	r1, r2, r2
 80076ac:	60b9      	str	r1, [r7, #8]
 80076ae:	415b      	adcs	r3, r3
 80076b0:	60fb      	str	r3, [r7, #12]
 80076b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80076b6:	4641      	mov	r1, r8
 80076b8:	1851      	adds	r1, r2, r1
 80076ba:	6039      	str	r1, [r7, #0]
 80076bc:	4649      	mov	r1, r9
 80076be:	414b      	adcs	r3, r1
 80076c0:	607b      	str	r3, [r7, #4]
 80076c2:	f04f 0200 	mov.w	r2, #0
 80076c6:	f04f 0300 	mov.w	r3, #0
 80076ca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80076ce:	4659      	mov	r1, fp
 80076d0:	00cb      	lsls	r3, r1, #3
 80076d2:	4651      	mov	r1, sl
 80076d4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076d8:	4651      	mov	r1, sl
 80076da:	00ca      	lsls	r2, r1, #3
 80076dc:	4610      	mov	r0, r2
 80076de:	4619      	mov	r1, r3
 80076e0:	4603      	mov	r3, r0
 80076e2:	4642      	mov	r2, r8
 80076e4:	189b      	adds	r3, r3, r2
 80076e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80076e8:	464b      	mov	r3, r9
 80076ea:	460a      	mov	r2, r1
 80076ec:	eb42 0303 	adc.w	r3, r2, r3
 80076f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80076f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	663b      	str	r3, [r7, #96]	; 0x60
 80076fc:	667a      	str	r2, [r7, #100]	; 0x64
 80076fe:	f04f 0200 	mov.w	r2, #0
 8007702:	f04f 0300 	mov.w	r3, #0
 8007706:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800770a:	4649      	mov	r1, r9
 800770c:	008b      	lsls	r3, r1, #2
 800770e:	4641      	mov	r1, r8
 8007710:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007714:	4641      	mov	r1, r8
 8007716:	008a      	lsls	r2, r1, #2
 8007718:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800771c:	f7f9 fad4 	bl	8000cc8 <__aeabi_uldivmod>
 8007720:	4602      	mov	r2, r0
 8007722:	460b      	mov	r3, r1
 8007724:	4b0d      	ldr	r3, [pc, #52]	; (800775c <UART_SetConfig+0x4e4>)
 8007726:	fba3 1302 	umull	r1, r3, r3, r2
 800772a:	095b      	lsrs	r3, r3, #5
 800772c:	2164      	movs	r1, #100	; 0x64
 800772e:	fb01 f303 	mul.w	r3, r1, r3
 8007732:	1ad3      	subs	r3, r2, r3
 8007734:	011b      	lsls	r3, r3, #4
 8007736:	3332      	adds	r3, #50	; 0x32
 8007738:	4a08      	ldr	r2, [pc, #32]	; (800775c <UART_SetConfig+0x4e4>)
 800773a:	fba2 2303 	umull	r2, r3, r2, r3
 800773e:	095b      	lsrs	r3, r3, #5
 8007740:	f003 020f 	and.w	r2, r3, #15
 8007744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4422      	add	r2, r4
 800774c:	609a      	str	r2, [r3, #8]
}
 800774e:	bf00      	nop
 8007750:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007754:	46bd      	mov	sp, r7
 8007756:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800775a:	bf00      	nop
 800775c:	51eb851f 	.word	0x51eb851f

08007760 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007760:	b084      	sub	sp, #16
 8007762:	b580      	push	{r7, lr}
 8007764:	b084      	sub	sp, #16
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
 800776a:	f107 001c 	add.w	r0, r7, #28
 800776e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007774:	2b01      	cmp	r3, #1
 8007776:	d122      	bne.n	80077be <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800777c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800778c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80077a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d105      	bne.n	80077b2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f001 fbe8 	bl	8008f88 <USB_CoreReset>
 80077b8:	4603      	mov	r3, r0
 80077ba:	73fb      	strb	r3, [r7, #15]
 80077bc:	e01a      	b.n	80077f4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f001 fbdc 	bl	8008f88 <USB_CoreReset>
 80077d0:	4603      	mov	r3, r0
 80077d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80077d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d106      	bne.n	80077e8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	639a      	str	r2, [r3, #56]	; 0x38
 80077e6:	e005      	b.n	80077f4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80077f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d10b      	bne.n	8007812 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	f043 0206 	orr.w	r2, r3, #6
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	f043 0220 	orr.w	r2, r3, #32
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007812:	7bfb      	ldrb	r3, [r7, #15]
}
 8007814:	4618      	mov	r0, r3
 8007816:	3710      	adds	r7, #16
 8007818:	46bd      	mov	sp, r7
 800781a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800781e:	b004      	add	sp, #16
 8007820:	4770      	bx	lr
	...

08007824 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007824:	b480      	push	{r7}
 8007826:	b087      	sub	sp, #28
 8007828:	af00      	add	r7, sp, #0
 800782a:	60f8      	str	r0, [r7, #12]
 800782c:	60b9      	str	r1, [r7, #8]
 800782e:	4613      	mov	r3, r2
 8007830:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007832:	79fb      	ldrb	r3, [r7, #7]
 8007834:	2b02      	cmp	r3, #2
 8007836:	d165      	bne.n	8007904 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	4a41      	ldr	r2, [pc, #260]	; (8007940 <USB_SetTurnaroundTime+0x11c>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d906      	bls.n	800784e <USB_SetTurnaroundTime+0x2a>
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	4a40      	ldr	r2, [pc, #256]	; (8007944 <USB_SetTurnaroundTime+0x120>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d202      	bcs.n	800784e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007848:	230f      	movs	r3, #15
 800784a:	617b      	str	r3, [r7, #20]
 800784c:	e062      	b.n	8007914 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	4a3c      	ldr	r2, [pc, #240]	; (8007944 <USB_SetTurnaroundTime+0x120>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d306      	bcc.n	8007864 <USB_SetTurnaroundTime+0x40>
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	4a3b      	ldr	r2, [pc, #236]	; (8007948 <USB_SetTurnaroundTime+0x124>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d202      	bcs.n	8007864 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800785e:	230e      	movs	r3, #14
 8007860:	617b      	str	r3, [r7, #20]
 8007862:	e057      	b.n	8007914 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	4a38      	ldr	r2, [pc, #224]	; (8007948 <USB_SetTurnaroundTime+0x124>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d306      	bcc.n	800787a <USB_SetTurnaroundTime+0x56>
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	4a37      	ldr	r2, [pc, #220]	; (800794c <USB_SetTurnaroundTime+0x128>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d202      	bcs.n	800787a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007874:	230d      	movs	r3, #13
 8007876:	617b      	str	r3, [r7, #20]
 8007878:	e04c      	b.n	8007914 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	4a33      	ldr	r2, [pc, #204]	; (800794c <USB_SetTurnaroundTime+0x128>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d306      	bcc.n	8007890 <USB_SetTurnaroundTime+0x6c>
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	4a32      	ldr	r2, [pc, #200]	; (8007950 <USB_SetTurnaroundTime+0x12c>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d802      	bhi.n	8007890 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800788a:	230c      	movs	r3, #12
 800788c:	617b      	str	r3, [r7, #20]
 800788e:	e041      	b.n	8007914 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	4a2f      	ldr	r2, [pc, #188]	; (8007950 <USB_SetTurnaroundTime+0x12c>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d906      	bls.n	80078a6 <USB_SetTurnaroundTime+0x82>
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	4a2e      	ldr	r2, [pc, #184]	; (8007954 <USB_SetTurnaroundTime+0x130>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d802      	bhi.n	80078a6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80078a0:	230b      	movs	r3, #11
 80078a2:	617b      	str	r3, [r7, #20]
 80078a4:	e036      	b.n	8007914 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	4a2a      	ldr	r2, [pc, #168]	; (8007954 <USB_SetTurnaroundTime+0x130>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d906      	bls.n	80078bc <USB_SetTurnaroundTime+0x98>
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	4a29      	ldr	r2, [pc, #164]	; (8007958 <USB_SetTurnaroundTime+0x134>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d802      	bhi.n	80078bc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80078b6:	230a      	movs	r3, #10
 80078b8:	617b      	str	r3, [r7, #20]
 80078ba:	e02b      	b.n	8007914 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	4a26      	ldr	r2, [pc, #152]	; (8007958 <USB_SetTurnaroundTime+0x134>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d906      	bls.n	80078d2 <USB_SetTurnaroundTime+0xae>
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	4a25      	ldr	r2, [pc, #148]	; (800795c <USB_SetTurnaroundTime+0x138>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d202      	bcs.n	80078d2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80078cc:	2309      	movs	r3, #9
 80078ce:	617b      	str	r3, [r7, #20]
 80078d0:	e020      	b.n	8007914 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	4a21      	ldr	r2, [pc, #132]	; (800795c <USB_SetTurnaroundTime+0x138>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d306      	bcc.n	80078e8 <USB_SetTurnaroundTime+0xc4>
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	4a20      	ldr	r2, [pc, #128]	; (8007960 <USB_SetTurnaroundTime+0x13c>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d802      	bhi.n	80078e8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80078e2:	2308      	movs	r3, #8
 80078e4:	617b      	str	r3, [r7, #20]
 80078e6:	e015      	b.n	8007914 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	4a1d      	ldr	r2, [pc, #116]	; (8007960 <USB_SetTurnaroundTime+0x13c>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d906      	bls.n	80078fe <USB_SetTurnaroundTime+0xda>
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	4a1c      	ldr	r2, [pc, #112]	; (8007964 <USB_SetTurnaroundTime+0x140>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d202      	bcs.n	80078fe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80078f8:	2307      	movs	r3, #7
 80078fa:	617b      	str	r3, [r7, #20]
 80078fc:	e00a      	b.n	8007914 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80078fe:	2306      	movs	r3, #6
 8007900:	617b      	str	r3, [r7, #20]
 8007902:	e007      	b.n	8007914 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007904:	79fb      	ldrb	r3, [r7, #7]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d102      	bne.n	8007910 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800790a:	2309      	movs	r3, #9
 800790c:	617b      	str	r3, [r7, #20]
 800790e:	e001      	b.n	8007914 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007910:	2309      	movs	r3, #9
 8007912:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	68da      	ldr	r2, [r3, #12]
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	029b      	lsls	r3, r3, #10
 8007928:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800792c:	431a      	orrs	r2, r3
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007932:	2300      	movs	r3, #0
}
 8007934:	4618      	mov	r0, r3
 8007936:	371c      	adds	r7, #28
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr
 8007940:	00d8acbf 	.word	0x00d8acbf
 8007944:	00e4e1c0 	.word	0x00e4e1c0
 8007948:	00f42400 	.word	0x00f42400
 800794c:	01067380 	.word	0x01067380
 8007950:	011a499f 	.word	0x011a499f
 8007954:	01312cff 	.word	0x01312cff
 8007958:	014ca43f 	.word	0x014ca43f
 800795c:	016e3600 	.word	0x016e3600
 8007960:	01a6ab1f 	.word	0x01a6ab1f
 8007964:	01e84800 	.word	0x01e84800

08007968 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007968:	b480      	push	{r7}
 800796a:	b083      	sub	sp, #12
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	f043 0201 	orr.w	r2, r3, #1
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	370c      	adds	r7, #12
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr

0800798a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800798a:	b480      	push	{r7}
 800798c:	b083      	sub	sp, #12
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	f023 0201 	bic.w	r2, r3, #1
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800799e:	2300      	movs	r3, #0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	370c      	adds	r7, #12
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	460b      	mov	r3, r1
 80079b6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80079b8:	2300      	movs	r3, #0
 80079ba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80079c8:	78fb      	ldrb	r3, [r7, #3]
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d115      	bne.n	80079fa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80079da:	2001      	movs	r0, #1
 80079dc:	f7fa f8ee 	bl	8001bbc <HAL_Delay>
      ms++;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	3301      	adds	r3, #1
 80079e4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f001 fa3f 	bl	8008e6a <USB_GetMode>
 80079ec:	4603      	mov	r3, r0
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d01e      	beq.n	8007a30 <USB_SetCurrentMode+0x84>
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2b31      	cmp	r3, #49	; 0x31
 80079f6:	d9f0      	bls.n	80079da <USB_SetCurrentMode+0x2e>
 80079f8:	e01a      	b.n	8007a30 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80079fa:	78fb      	ldrb	r3, [r7, #3]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d115      	bne.n	8007a2c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007a0c:	2001      	movs	r0, #1
 8007a0e:	f7fa f8d5 	bl	8001bbc <HAL_Delay>
      ms++;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	3301      	adds	r3, #1
 8007a16:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f001 fa26 	bl	8008e6a <USB_GetMode>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d005      	beq.n	8007a30 <USB_SetCurrentMode+0x84>
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2b31      	cmp	r3, #49	; 0x31
 8007a28:	d9f0      	bls.n	8007a0c <USB_SetCurrentMode+0x60>
 8007a2a:	e001      	b.n	8007a30 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	e005      	b.n	8007a3c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2b32      	cmp	r3, #50	; 0x32
 8007a34:	d101      	bne.n	8007a3a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	e000      	b.n	8007a3c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3710      	adds	r7, #16
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a44:	b084      	sub	sp, #16
 8007a46:	b580      	push	{r7, lr}
 8007a48:	b086      	sub	sp, #24
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
 8007a4e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007a52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007a56:	2300      	movs	r3, #0
 8007a58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007a5e:	2300      	movs	r3, #0
 8007a60:	613b      	str	r3, [r7, #16]
 8007a62:	e009      	b.n	8007a78 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	3340      	adds	r3, #64	; 0x40
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	4413      	add	r3, r2
 8007a6e:	2200      	movs	r2, #0
 8007a70:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	3301      	adds	r3, #1
 8007a76:	613b      	str	r3, [r7, #16]
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	2b0e      	cmp	r3, #14
 8007a7c:	d9f2      	bls.n	8007a64 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007a7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d11c      	bne.n	8007abe <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a92:	f043 0302 	orr.w	r3, r3, #2
 8007a96:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a9c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	601a      	str	r2, [r3, #0]
 8007abc:	e005      	b.n	8007aca <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007adc:	4619      	mov	r1, r3
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	680b      	ldr	r3, [r1, #0]
 8007ae8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d10c      	bne.n	8007b0a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d104      	bne.n	8007b00 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007af6:	2100      	movs	r1, #0
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 f965 	bl	8007dc8 <USB_SetDevSpeed>
 8007afe:	e008      	b.n	8007b12 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007b00:	2101      	movs	r1, #1
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 f960 	bl	8007dc8 <USB_SetDevSpeed>
 8007b08:	e003      	b.n	8007b12 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007b0a:	2103      	movs	r1, #3
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 f95b 	bl	8007dc8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007b12:	2110      	movs	r1, #16
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 f8f3 	bl	8007d00 <USB_FlushTxFifo>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d001      	beq.n	8007b24 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007b20:	2301      	movs	r3, #1
 8007b22:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 f91f 	bl	8007d68 <USB_FlushRxFifo>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d001      	beq.n	8007b34 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b46:	461a      	mov	r2, r3
 8007b48:	2300      	movs	r3, #0
 8007b4a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b52:	461a      	mov	r2, r3
 8007b54:	2300      	movs	r3, #0
 8007b56:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b58:	2300      	movs	r3, #0
 8007b5a:	613b      	str	r3, [r7, #16]
 8007b5c:	e043      	b.n	8007be6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	015a      	lsls	r2, r3, #5
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	4413      	add	r3, r2
 8007b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b74:	d118      	bne.n	8007ba8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d10a      	bne.n	8007b92 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	015a      	lsls	r2, r3, #5
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	4413      	add	r3, r2
 8007b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b88:	461a      	mov	r2, r3
 8007b8a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007b8e:	6013      	str	r3, [r2, #0]
 8007b90:	e013      	b.n	8007bba <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	015a      	lsls	r2, r3, #5
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	4413      	add	r3, r2
 8007b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007ba4:	6013      	str	r3, [r2, #0]
 8007ba6:	e008      	b.n	8007bba <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	015a      	lsls	r2, r3, #5
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	4413      	add	r3, r2
 8007bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	015a      	lsls	r2, r3, #5
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	2300      	movs	r3, #0
 8007bca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	015a      	lsls	r2, r3, #5
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	4413      	add	r3, r2
 8007bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bd8:	461a      	mov	r2, r3
 8007bda:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007bde:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	3301      	adds	r3, #1
 8007be4:	613b      	str	r3, [r7, #16]
 8007be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be8:	693a      	ldr	r2, [r7, #16]
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d3b7      	bcc.n	8007b5e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007bee:	2300      	movs	r3, #0
 8007bf0:	613b      	str	r3, [r7, #16]
 8007bf2:	e043      	b.n	8007c7c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	015a      	lsls	r2, r3, #5
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c0a:	d118      	bne.n	8007c3e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d10a      	bne.n	8007c28 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	015a      	lsls	r2, r3, #5
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	4413      	add	r3, r2
 8007c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c1e:	461a      	mov	r2, r3
 8007c20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007c24:	6013      	str	r3, [r2, #0]
 8007c26:	e013      	b.n	8007c50 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	015a      	lsls	r2, r3, #5
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	4413      	add	r3, r2
 8007c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c34:	461a      	mov	r2, r3
 8007c36:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007c3a:	6013      	str	r3, [r2, #0]
 8007c3c:	e008      	b.n	8007c50 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	015a      	lsls	r2, r3, #5
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	4413      	add	r3, r2
 8007c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	015a      	lsls	r2, r3, #5
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	4413      	add	r3, r2
 8007c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	2300      	movs	r3, #0
 8007c60:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	015a      	lsls	r2, r3, #5
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	4413      	add	r3, r2
 8007c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c6e:	461a      	mov	r2, r3
 8007c70:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007c74:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	3301      	adds	r3, #1
 8007c7a:	613b      	str	r3, [r7, #16]
 8007c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7e:	693a      	ldr	r2, [r7, #16]
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d3b7      	bcc.n	8007bf4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c8a:	691b      	ldr	r3, [r3, #16]
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c96:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007ca4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d105      	bne.n	8007cb8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	699b      	ldr	r3, [r3, #24]
 8007cb0:	f043 0210 	orr.w	r2, r3, #16
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	699a      	ldr	r2, [r3, #24]
 8007cbc:	4b0f      	ldr	r3, [pc, #60]	; (8007cfc <USB_DevInit+0x2b8>)
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d005      	beq.n	8007cd6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	699b      	ldr	r3, [r3, #24]
 8007cce:	f043 0208 	orr.w	r2, r3, #8
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007cd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d107      	bne.n	8007cec <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	699b      	ldr	r3, [r3, #24]
 8007ce0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ce4:	f043 0304 	orr.w	r3, r3, #4
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007cec:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3718      	adds	r7, #24
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007cf8:	b004      	add	sp, #16
 8007cfa:	4770      	bx	lr
 8007cfc:	803c3800 	.word	0x803c3800

08007d00 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b085      	sub	sp, #20
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	3301      	adds	r3, #1
 8007d12:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	4a13      	ldr	r2, [pc, #76]	; (8007d64 <USB_FlushTxFifo+0x64>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d901      	bls.n	8007d20 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007d1c:	2303      	movs	r3, #3
 8007d1e:	e01b      	b.n	8007d58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	691b      	ldr	r3, [r3, #16]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	daf2      	bge.n	8007d0e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	019b      	lsls	r3, r3, #6
 8007d30:	f043 0220 	orr.w	r2, r3, #32
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	4a08      	ldr	r2, [pc, #32]	; (8007d64 <USB_FlushTxFifo+0x64>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d901      	bls.n	8007d4a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007d46:	2303      	movs	r3, #3
 8007d48:	e006      	b.n	8007d58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	691b      	ldr	r3, [r3, #16]
 8007d4e:	f003 0320 	and.w	r3, r3, #32
 8007d52:	2b20      	cmp	r3, #32
 8007d54:	d0f0      	beq.n	8007d38 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3714      	adds	r7, #20
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr
 8007d64:	00030d40 	.word	0x00030d40

08007d68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b085      	sub	sp, #20
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d70:	2300      	movs	r3, #0
 8007d72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	3301      	adds	r3, #1
 8007d78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	4a11      	ldr	r2, [pc, #68]	; (8007dc4 <USB_FlushRxFifo+0x5c>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d901      	bls.n	8007d86 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007d82:	2303      	movs	r3, #3
 8007d84:	e018      	b.n	8007db8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	691b      	ldr	r3, [r3, #16]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	daf2      	bge.n	8007d74 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2210      	movs	r2, #16
 8007d96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	4a08      	ldr	r2, [pc, #32]	; (8007dc4 <USB_FlushRxFifo+0x5c>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d901      	bls.n	8007daa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007da6:	2303      	movs	r3, #3
 8007da8:	e006      	b.n	8007db8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	691b      	ldr	r3, [r3, #16]
 8007dae:	f003 0310 	and.w	r3, r3, #16
 8007db2:	2b10      	cmp	r3, #16
 8007db4:	d0f0      	beq.n	8007d98 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3714      	adds	r7, #20
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr
 8007dc4:	00030d40 	.word	0x00030d40

08007dc8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b085      	sub	sp, #20
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	78fb      	ldrb	r3, [r7, #3]
 8007de2:	68f9      	ldr	r1, [r7, #12]
 8007de4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007de8:	4313      	orrs	r3, r2
 8007dea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3714      	adds	r7, #20
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr

08007dfa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007dfa:	b480      	push	{r7}
 8007dfc:	b087      	sub	sp, #28
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	f003 0306 	and.w	r3, r3, #6
 8007e12:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d102      	bne.n	8007e20 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	75fb      	strb	r3, [r7, #23]
 8007e1e:	e00a      	b.n	8007e36 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2b02      	cmp	r3, #2
 8007e24:	d002      	beq.n	8007e2c <USB_GetDevSpeed+0x32>
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2b06      	cmp	r3, #6
 8007e2a:	d102      	bne.n	8007e32 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007e2c:	2302      	movs	r3, #2
 8007e2e:	75fb      	strb	r3, [r7, #23]
 8007e30:	e001      	b.n	8007e36 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007e32:	230f      	movs	r3, #15
 8007e34:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007e36:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	371c      	adds	r7, #28
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr

08007e44 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b085      	sub	sp, #20
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	785b      	ldrb	r3, [r3, #1]
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d13a      	bne.n	8007ed6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e66:	69da      	ldr	r2, [r3, #28]
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	f003 030f 	and.w	r3, r3, #15
 8007e70:	2101      	movs	r1, #1
 8007e72:	fa01 f303 	lsl.w	r3, r1, r3
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	68f9      	ldr	r1, [r7, #12]
 8007e7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	015a      	lsls	r2, r3, #5
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	4413      	add	r3, r2
 8007e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d155      	bne.n	8007f44 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	015a      	lsls	r2, r3, #5
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	4413      	add	r3, r2
 8007ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	68db      	ldr	r3, [r3, #12]
 8007eaa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	791b      	ldrb	r3, [r3, #4]
 8007eb2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007eb4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	059b      	lsls	r3, r3, #22
 8007eba:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	68ba      	ldr	r2, [r7, #8]
 8007ec0:	0151      	lsls	r1, r2, #5
 8007ec2:	68fa      	ldr	r2, [r7, #12]
 8007ec4:	440a      	add	r2, r1
 8007ec6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007eca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ece:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ed2:	6013      	str	r3, [r2, #0]
 8007ed4:	e036      	b.n	8007f44 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007edc:	69da      	ldr	r2, [r3, #28]
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	f003 030f 	and.w	r3, r3, #15
 8007ee6:	2101      	movs	r1, #1
 8007ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8007eec:	041b      	lsls	r3, r3, #16
 8007eee:	68f9      	ldr	r1, [r7, #12]
 8007ef0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	015a      	lsls	r2, r3, #5
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	4413      	add	r3, r2
 8007f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d11a      	bne.n	8007f44 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	015a      	lsls	r2, r3, #5
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	4413      	add	r3, r2
 8007f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	68db      	ldr	r3, [r3, #12]
 8007f20:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	791b      	ldrb	r3, [r3, #4]
 8007f28:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007f2a:	430b      	orrs	r3, r1
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	68ba      	ldr	r2, [r7, #8]
 8007f30:	0151      	lsls	r1, r2, #5
 8007f32:	68fa      	ldr	r2, [r7, #12]
 8007f34:	440a      	add	r2, r1
 8007f36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f42:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007f44:	2300      	movs	r3, #0
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3714      	adds	r7, #20
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr
	...

08007f54 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b085      	sub	sp, #20
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	785b      	ldrb	r3, [r3, #1]
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d161      	bne.n	8008034 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	015a      	lsls	r2, r3, #5
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	4413      	add	r3, r2
 8007f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f86:	d11f      	bne.n	8007fc8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	015a      	lsls	r2, r3, #5
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	4413      	add	r3, r2
 8007f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	68ba      	ldr	r2, [r7, #8]
 8007f98:	0151      	lsls	r1, r2, #5
 8007f9a:	68fa      	ldr	r2, [r7, #12]
 8007f9c:	440a      	add	r2, r1
 8007f9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fa2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007fa6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	015a      	lsls	r2, r3, #5
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	4413      	add	r3, r2
 8007fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	68ba      	ldr	r2, [r7, #8]
 8007fb8:	0151      	lsls	r1, r2, #5
 8007fba:	68fa      	ldr	r2, [r7, #12]
 8007fbc:	440a      	add	r2, r1
 8007fbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fc2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007fc6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	f003 030f 	and.w	r3, r3, #15
 8007fd8:	2101      	movs	r1, #1
 8007fda:	fa01 f303 	lsl.w	r3, r1, r3
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	43db      	mvns	r3, r3
 8007fe2:	68f9      	ldr	r1, [r7, #12]
 8007fe4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007fe8:	4013      	ands	r3, r2
 8007fea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ff2:	69da      	ldr	r2, [r3, #28]
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	781b      	ldrb	r3, [r3, #0]
 8007ff8:	f003 030f 	and.w	r3, r3, #15
 8007ffc:	2101      	movs	r1, #1
 8007ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8008002:	b29b      	uxth	r3, r3
 8008004:	43db      	mvns	r3, r3
 8008006:	68f9      	ldr	r1, [r7, #12]
 8008008:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800800c:	4013      	ands	r3, r2
 800800e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	015a      	lsls	r2, r3, #5
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	4413      	add	r3, r2
 8008018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	0159      	lsls	r1, r3, #5
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	440b      	add	r3, r1
 8008026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800802a:	4619      	mov	r1, r3
 800802c:	4b35      	ldr	r3, [pc, #212]	; (8008104 <USB_DeactivateEndpoint+0x1b0>)
 800802e:	4013      	ands	r3, r2
 8008030:	600b      	str	r3, [r1, #0]
 8008032:	e060      	b.n	80080f6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	015a      	lsls	r2, r3, #5
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	4413      	add	r3, r2
 800803c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008046:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800804a:	d11f      	bne.n	800808c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	015a      	lsls	r2, r3, #5
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	4413      	add	r3, r2
 8008054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	68ba      	ldr	r2, [r7, #8]
 800805c:	0151      	lsls	r1, r2, #5
 800805e:	68fa      	ldr	r2, [r7, #12]
 8008060:	440a      	add	r2, r1
 8008062:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008066:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800806a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	015a      	lsls	r2, r3, #5
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	4413      	add	r3, r2
 8008074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	68ba      	ldr	r2, [r7, #8]
 800807c:	0151      	lsls	r1, r2, #5
 800807e:	68fa      	ldr	r2, [r7, #12]
 8008080:	440a      	add	r2, r1
 8008082:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008086:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800808a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008092:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	f003 030f 	and.w	r3, r3, #15
 800809c:	2101      	movs	r1, #1
 800809e:	fa01 f303 	lsl.w	r3, r1, r3
 80080a2:	041b      	lsls	r3, r3, #16
 80080a4:	43db      	mvns	r3, r3
 80080a6:	68f9      	ldr	r1, [r7, #12]
 80080a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80080ac:	4013      	ands	r3, r2
 80080ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080b6:	69da      	ldr	r2, [r3, #28]
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	f003 030f 	and.w	r3, r3, #15
 80080c0:	2101      	movs	r1, #1
 80080c2:	fa01 f303 	lsl.w	r3, r1, r3
 80080c6:	041b      	lsls	r3, r3, #16
 80080c8:	43db      	mvns	r3, r3
 80080ca:	68f9      	ldr	r1, [r7, #12]
 80080cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80080d0:	4013      	ands	r3, r2
 80080d2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	015a      	lsls	r2, r3, #5
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	4413      	add	r3, r2
 80080dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	0159      	lsls	r1, r3, #5
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	440b      	add	r3, r1
 80080ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080ee:	4619      	mov	r1, r3
 80080f0:	4b05      	ldr	r3, [pc, #20]	; (8008108 <USB_DeactivateEndpoint+0x1b4>)
 80080f2:	4013      	ands	r3, r2
 80080f4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80080f6:	2300      	movs	r3, #0
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3714      	adds	r7, #20
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr
 8008104:	ec337800 	.word	0xec337800
 8008108:	eff37800 	.word	0xeff37800

0800810c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b08a      	sub	sp, #40	; 0x28
 8008110:	af02      	add	r7, sp, #8
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	60b9      	str	r1, [r7, #8]
 8008116:	4613      	mov	r3, r2
 8008118:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	785b      	ldrb	r3, [r3, #1]
 8008128:	2b01      	cmp	r3, #1
 800812a:	f040 815c 	bne.w	80083e6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	699b      	ldr	r3, [r3, #24]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d132      	bne.n	800819c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008136:	69bb      	ldr	r3, [r7, #24]
 8008138:	015a      	lsls	r2, r3, #5
 800813a:	69fb      	ldr	r3, [r7, #28]
 800813c:	4413      	add	r3, r2
 800813e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008142:	691b      	ldr	r3, [r3, #16]
 8008144:	69ba      	ldr	r2, [r7, #24]
 8008146:	0151      	lsls	r1, r2, #5
 8008148:	69fa      	ldr	r2, [r7, #28]
 800814a:	440a      	add	r2, r1
 800814c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008150:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008154:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008158:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800815a:	69bb      	ldr	r3, [r7, #24]
 800815c:	015a      	lsls	r2, r3, #5
 800815e:	69fb      	ldr	r3, [r7, #28]
 8008160:	4413      	add	r3, r2
 8008162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008166:	691b      	ldr	r3, [r3, #16]
 8008168:	69ba      	ldr	r2, [r7, #24]
 800816a:	0151      	lsls	r1, r2, #5
 800816c:	69fa      	ldr	r2, [r7, #28]
 800816e:	440a      	add	r2, r1
 8008170:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008174:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008178:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800817a:	69bb      	ldr	r3, [r7, #24]
 800817c:	015a      	lsls	r2, r3, #5
 800817e:	69fb      	ldr	r3, [r7, #28]
 8008180:	4413      	add	r3, r2
 8008182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008186:	691b      	ldr	r3, [r3, #16]
 8008188:	69ba      	ldr	r2, [r7, #24]
 800818a:	0151      	lsls	r1, r2, #5
 800818c:	69fa      	ldr	r2, [r7, #28]
 800818e:	440a      	add	r2, r1
 8008190:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008194:	0cdb      	lsrs	r3, r3, #19
 8008196:	04db      	lsls	r3, r3, #19
 8008198:	6113      	str	r3, [r2, #16]
 800819a:	e074      	b.n	8008286 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800819c:	69bb      	ldr	r3, [r7, #24]
 800819e:	015a      	lsls	r2, r3, #5
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	4413      	add	r3, r2
 80081a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081a8:	691b      	ldr	r3, [r3, #16]
 80081aa:	69ba      	ldr	r2, [r7, #24]
 80081ac:	0151      	lsls	r1, r2, #5
 80081ae:	69fa      	ldr	r2, [r7, #28]
 80081b0:	440a      	add	r2, r1
 80081b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081b6:	0cdb      	lsrs	r3, r3, #19
 80081b8:	04db      	lsls	r3, r3, #19
 80081ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80081bc:	69bb      	ldr	r3, [r7, #24]
 80081be:	015a      	lsls	r2, r3, #5
 80081c0:	69fb      	ldr	r3, [r7, #28]
 80081c2:	4413      	add	r3, r2
 80081c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081c8:	691b      	ldr	r3, [r3, #16]
 80081ca:	69ba      	ldr	r2, [r7, #24]
 80081cc:	0151      	lsls	r1, r2, #5
 80081ce:	69fa      	ldr	r2, [r7, #28]
 80081d0:	440a      	add	r2, r1
 80081d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80081da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80081de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80081e0:	69bb      	ldr	r3, [r7, #24]
 80081e2:	015a      	lsls	r2, r3, #5
 80081e4:	69fb      	ldr	r3, [r7, #28]
 80081e6:	4413      	add	r3, r2
 80081e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081ec:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	6999      	ldr	r1, [r3, #24]
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	440b      	add	r3, r1
 80081f8:	1e59      	subs	r1, r3, #1
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	68db      	ldr	r3, [r3, #12]
 80081fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8008202:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008204:	4b9d      	ldr	r3, [pc, #628]	; (800847c <USB_EPStartXfer+0x370>)
 8008206:	400b      	ands	r3, r1
 8008208:	69b9      	ldr	r1, [r7, #24]
 800820a:	0148      	lsls	r0, r1, #5
 800820c:	69f9      	ldr	r1, [r7, #28]
 800820e:	4401      	add	r1, r0
 8008210:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008214:	4313      	orrs	r3, r2
 8008216:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008218:	69bb      	ldr	r3, [r7, #24]
 800821a:	015a      	lsls	r2, r3, #5
 800821c:	69fb      	ldr	r3, [r7, #28]
 800821e:	4413      	add	r3, r2
 8008220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008224:	691a      	ldr	r2, [r3, #16]
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	699b      	ldr	r3, [r3, #24]
 800822a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800822e:	69b9      	ldr	r1, [r7, #24]
 8008230:	0148      	lsls	r0, r1, #5
 8008232:	69f9      	ldr	r1, [r7, #28]
 8008234:	4401      	add	r1, r0
 8008236:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800823a:	4313      	orrs	r3, r2
 800823c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	791b      	ldrb	r3, [r3, #4]
 8008242:	2b01      	cmp	r3, #1
 8008244:	d11f      	bne.n	8008286 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008246:	69bb      	ldr	r3, [r7, #24]
 8008248:	015a      	lsls	r2, r3, #5
 800824a:	69fb      	ldr	r3, [r7, #28]
 800824c:	4413      	add	r3, r2
 800824e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008252:	691b      	ldr	r3, [r3, #16]
 8008254:	69ba      	ldr	r2, [r7, #24]
 8008256:	0151      	lsls	r1, r2, #5
 8008258:	69fa      	ldr	r2, [r7, #28]
 800825a:	440a      	add	r2, r1
 800825c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008260:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008264:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	015a      	lsls	r2, r3, #5
 800826a:	69fb      	ldr	r3, [r7, #28]
 800826c:	4413      	add	r3, r2
 800826e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008272:	691b      	ldr	r3, [r3, #16]
 8008274:	69ba      	ldr	r2, [r7, #24]
 8008276:	0151      	lsls	r1, r2, #5
 8008278:	69fa      	ldr	r2, [r7, #28]
 800827a:	440a      	add	r2, r1
 800827c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008280:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008284:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008286:	79fb      	ldrb	r3, [r7, #7]
 8008288:	2b01      	cmp	r3, #1
 800828a:	d14b      	bne.n	8008324 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	695b      	ldr	r3, [r3, #20]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d009      	beq.n	80082a8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	015a      	lsls	r2, r3, #5
 8008298:	69fb      	ldr	r3, [r7, #28]
 800829a:	4413      	add	r3, r2
 800829c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082a0:	461a      	mov	r2, r3
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	695b      	ldr	r3, [r3, #20]
 80082a6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	791b      	ldrb	r3, [r3, #4]
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d128      	bne.n	8008302 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80082b0:	69fb      	ldr	r3, [r7, #28]
 80082b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d110      	bne.n	80082e2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80082c0:	69bb      	ldr	r3, [r7, #24]
 80082c2:	015a      	lsls	r2, r3, #5
 80082c4:	69fb      	ldr	r3, [r7, #28]
 80082c6:	4413      	add	r3, r2
 80082c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	69ba      	ldr	r2, [r7, #24]
 80082d0:	0151      	lsls	r1, r2, #5
 80082d2:	69fa      	ldr	r2, [r7, #28]
 80082d4:	440a      	add	r2, r1
 80082d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80082de:	6013      	str	r3, [r2, #0]
 80082e0:	e00f      	b.n	8008302 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	015a      	lsls	r2, r3, #5
 80082e6:	69fb      	ldr	r3, [r7, #28]
 80082e8:	4413      	add	r3, r2
 80082ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	69ba      	ldr	r2, [r7, #24]
 80082f2:	0151      	lsls	r1, r2, #5
 80082f4:	69fa      	ldr	r2, [r7, #28]
 80082f6:	440a      	add	r2, r1
 80082f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008300:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	015a      	lsls	r2, r3, #5
 8008306:	69fb      	ldr	r3, [r7, #28]
 8008308:	4413      	add	r3, r2
 800830a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	69ba      	ldr	r2, [r7, #24]
 8008312:	0151      	lsls	r1, r2, #5
 8008314:	69fa      	ldr	r2, [r7, #28]
 8008316:	440a      	add	r2, r1
 8008318:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800831c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008320:	6013      	str	r3, [r2, #0]
 8008322:	e133      	b.n	800858c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008324:	69bb      	ldr	r3, [r7, #24]
 8008326:	015a      	lsls	r2, r3, #5
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	4413      	add	r3, r2
 800832c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	69ba      	ldr	r2, [r7, #24]
 8008334:	0151      	lsls	r1, r2, #5
 8008336:	69fa      	ldr	r2, [r7, #28]
 8008338:	440a      	add	r2, r1
 800833a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800833e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008342:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	791b      	ldrb	r3, [r3, #4]
 8008348:	2b01      	cmp	r3, #1
 800834a:	d015      	beq.n	8008378 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	699b      	ldr	r3, [r3, #24]
 8008350:	2b00      	cmp	r3, #0
 8008352:	f000 811b 	beq.w	800858c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008356:	69fb      	ldr	r3, [r7, #28]
 8008358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800835c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	f003 030f 	and.w	r3, r3, #15
 8008366:	2101      	movs	r1, #1
 8008368:	fa01 f303 	lsl.w	r3, r1, r3
 800836c:	69f9      	ldr	r1, [r7, #28]
 800836e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008372:	4313      	orrs	r3, r2
 8008374:	634b      	str	r3, [r1, #52]	; 0x34
 8008376:	e109      	b.n	800858c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008384:	2b00      	cmp	r3, #0
 8008386:	d110      	bne.n	80083aa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	015a      	lsls	r2, r3, #5
 800838c:	69fb      	ldr	r3, [r7, #28]
 800838e:	4413      	add	r3, r2
 8008390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	69ba      	ldr	r2, [r7, #24]
 8008398:	0151      	lsls	r1, r2, #5
 800839a:	69fa      	ldr	r2, [r7, #28]
 800839c:	440a      	add	r2, r1
 800839e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80083a6:	6013      	str	r3, [r2, #0]
 80083a8:	e00f      	b.n	80083ca <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	015a      	lsls	r2, r3, #5
 80083ae:	69fb      	ldr	r3, [r7, #28]
 80083b0:	4413      	add	r3, r2
 80083b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	69ba      	ldr	r2, [r7, #24]
 80083ba:	0151      	lsls	r1, r2, #5
 80083bc:	69fa      	ldr	r2, [r7, #28]
 80083be:	440a      	add	r2, r1
 80083c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083c8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	6919      	ldr	r1, [r3, #16]
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	781a      	ldrb	r2, [r3, #0]
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	699b      	ldr	r3, [r3, #24]
 80083d6:	b298      	uxth	r0, r3
 80083d8:	79fb      	ldrb	r3, [r7, #7]
 80083da:	9300      	str	r3, [sp, #0]
 80083dc:	4603      	mov	r3, r0
 80083de:	68f8      	ldr	r0, [r7, #12]
 80083e0:	f000 fade 	bl	80089a0 <USB_WritePacket>
 80083e4:	e0d2      	b.n	800858c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80083e6:	69bb      	ldr	r3, [r7, #24]
 80083e8:	015a      	lsls	r2, r3, #5
 80083ea:	69fb      	ldr	r3, [r7, #28]
 80083ec:	4413      	add	r3, r2
 80083ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083f2:	691b      	ldr	r3, [r3, #16]
 80083f4:	69ba      	ldr	r2, [r7, #24]
 80083f6:	0151      	lsls	r1, r2, #5
 80083f8:	69fa      	ldr	r2, [r7, #28]
 80083fa:	440a      	add	r2, r1
 80083fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008400:	0cdb      	lsrs	r3, r3, #19
 8008402:	04db      	lsls	r3, r3, #19
 8008404:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	015a      	lsls	r2, r3, #5
 800840a:	69fb      	ldr	r3, [r7, #28]
 800840c:	4413      	add	r3, r2
 800840e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008412:	691b      	ldr	r3, [r3, #16]
 8008414:	69ba      	ldr	r2, [r7, #24]
 8008416:	0151      	lsls	r1, r2, #5
 8008418:	69fa      	ldr	r2, [r7, #28]
 800841a:	440a      	add	r2, r1
 800841c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008420:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008424:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008428:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	699b      	ldr	r3, [r3, #24]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d126      	bne.n	8008480 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008432:	69bb      	ldr	r3, [r7, #24]
 8008434:	015a      	lsls	r2, r3, #5
 8008436:	69fb      	ldr	r3, [r7, #28]
 8008438:	4413      	add	r3, r2
 800843a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800843e:	691a      	ldr	r2, [r3, #16]
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008448:	69b9      	ldr	r1, [r7, #24]
 800844a:	0148      	lsls	r0, r1, #5
 800844c:	69f9      	ldr	r1, [r7, #28]
 800844e:	4401      	add	r1, r0
 8008450:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008454:	4313      	orrs	r3, r2
 8008456:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008458:	69bb      	ldr	r3, [r7, #24]
 800845a:	015a      	lsls	r2, r3, #5
 800845c:	69fb      	ldr	r3, [r7, #28]
 800845e:	4413      	add	r3, r2
 8008460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008464:	691b      	ldr	r3, [r3, #16]
 8008466:	69ba      	ldr	r2, [r7, #24]
 8008468:	0151      	lsls	r1, r2, #5
 800846a:	69fa      	ldr	r2, [r7, #28]
 800846c:	440a      	add	r2, r1
 800846e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008472:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008476:	6113      	str	r3, [r2, #16]
 8008478:	e03a      	b.n	80084f0 <USB_EPStartXfer+0x3e4>
 800847a:	bf00      	nop
 800847c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	699a      	ldr	r2, [r3, #24]
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	68db      	ldr	r3, [r3, #12]
 8008488:	4413      	add	r3, r2
 800848a:	1e5a      	subs	r2, r3, #1
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	fbb2 f3f3 	udiv	r3, r2, r3
 8008494:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	68db      	ldr	r3, [r3, #12]
 800849a:	8afa      	ldrh	r2, [r7, #22]
 800849c:	fb03 f202 	mul.w	r2, r3, r2
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80084a4:	69bb      	ldr	r3, [r7, #24]
 80084a6:	015a      	lsls	r2, r3, #5
 80084a8:	69fb      	ldr	r3, [r7, #28]
 80084aa:	4413      	add	r3, r2
 80084ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084b0:	691a      	ldr	r2, [r3, #16]
 80084b2:	8afb      	ldrh	r3, [r7, #22]
 80084b4:	04d9      	lsls	r1, r3, #19
 80084b6:	4b38      	ldr	r3, [pc, #224]	; (8008598 <USB_EPStartXfer+0x48c>)
 80084b8:	400b      	ands	r3, r1
 80084ba:	69b9      	ldr	r1, [r7, #24]
 80084bc:	0148      	lsls	r0, r1, #5
 80084be:	69f9      	ldr	r1, [r7, #28]
 80084c0:	4401      	add	r1, r0
 80084c2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80084c6:	4313      	orrs	r3, r2
 80084c8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80084ca:	69bb      	ldr	r3, [r7, #24]
 80084cc:	015a      	lsls	r2, r3, #5
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	4413      	add	r3, r2
 80084d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084d6:	691a      	ldr	r2, [r3, #16]
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	69db      	ldr	r3, [r3, #28]
 80084dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084e0:	69b9      	ldr	r1, [r7, #24]
 80084e2:	0148      	lsls	r0, r1, #5
 80084e4:	69f9      	ldr	r1, [r7, #28]
 80084e6:	4401      	add	r1, r0
 80084e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80084ec:	4313      	orrs	r3, r2
 80084ee:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80084f0:	79fb      	ldrb	r3, [r7, #7]
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d10d      	bne.n	8008512 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	691b      	ldr	r3, [r3, #16]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d009      	beq.n	8008512 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	6919      	ldr	r1, [r3, #16]
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	015a      	lsls	r2, r3, #5
 8008506:	69fb      	ldr	r3, [r7, #28]
 8008508:	4413      	add	r3, r2
 800850a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800850e:	460a      	mov	r2, r1
 8008510:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	791b      	ldrb	r3, [r3, #4]
 8008516:	2b01      	cmp	r3, #1
 8008518:	d128      	bne.n	800856c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800851a:	69fb      	ldr	r3, [r7, #28]
 800851c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008526:	2b00      	cmp	r3, #0
 8008528:	d110      	bne.n	800854c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800852a:	69bb      	ldr	r3, [r7, #24]
 800852c:	015a      	lsls	r2, r3, #5
 800852e:	69fb      	ldr	r3, [r7, #28]
 8008530:	4413      	add	r3, r2
 8008532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	69ba      	ldr	r2, [r7, #24]
 800853a:	0151      	lsls	r1, r2, #5
 800853c:	69fa      	ldr	r2, [r7, #28]
 800853e:	440a      	add	r2, r1
 8008540:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008544:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008548:	6013      	str	r3, [r2, #0]
 800854a:	e00f      	b.n	800856c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800854c:	69bb      	ldr	r3, [r7, #24]
 800854e:	015a      	lsls	r2, r3, #5
 8008550:	69fb      	ldr	r3, [r7, #28]
 8008552:	4413      	add	r3, r2
 8008554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	69ba      	ldr	r2, [r7, #24]
 800855c:	0151      	lsls	r1, r2, #5
 800855e:	69fa      	ldr	r2, [r7, #28]
 8008560:	440a      	add	r2, r1
 8008562:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800856a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800856c:	69bb      	ldr	r3, [r7, #24]
 800856e:	015a      	lsls	r2, r3, #5
 8008570:	69fb      	ldr	r3, [r7, #28]
 8008572:	4413      	add	r3, r2
 8008574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	69ba      	ldr	r2, [r7, #24]
 800857c:	0151      	lsls	r1, r2, #5
 800857e:	69fa      	ldr	r2, [r7, #28]
 8008580:	440a      	add	r2, r1
 8008582:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008586:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800858a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800858c:	2300      	movs	r3, #0
}
 800858e:	4618      	mov	r0, r3
 8008590:	3720      	adds	r7, #32
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	1ff80000 	.word	0x1ff80000

0800859c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800859c:	b480      	push	{r7}
 800859e:	b087      	sub	sp, #28
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	60b9      	str	r1, [r7, #8]
 80085a6:	4613      	mov	r3, r2
 80085a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	781b      	ldrb	r3, [r3, #0]
 80085b2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	785b      	ldrb	r3, [r3, #1]
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	f040 80ce 	bne.w	800875a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	699b      	ldr	r3, [r3, #24]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d132      	bne.n	800862c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	015a      	lsls	r2, r3, #5
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	4413      	add	r3, r2
 80085ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085d2:	691b      	ldr	r3, [r3, #16]
 80085d4:	693a      	ldr	r2, [r7, #16]
 80085d6:	0151      	lsls	r1, r2, #5
 80085d8:	697a      	ldr	r2, [r7, #20]
 80085da:	440a      	add	r2, r1
 80085dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80085e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80085e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	015a      	lsls	r2, r3, #5
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	4413      	add	r3, r2
 80085f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085f6:	691b      	ldr	r3, [r3, #16]
 80085f8:	693a      	ldr	r2, [r7, #16]
 80085fa:	0151      	lsls	r1, r2, #5
 80085fc:	697a      	ldr	r2, [r7, #20]
 80085fe:	440a      	add	r2, r1
 8008600:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008604:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008608:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	015a      	lsls	r2, r3, #5
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	4413      	add	r3, r2
 8008612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008616:	691b      	ldr	r3, [r3, #16]
 8008618:	693a      	ldr	r2, [r7, #16]
 800861a:	0151      	lsls	r1, r2, #5
 800861c:	697a      	ldr	r2, [r7, #20]
 800861e:	440a      	add	r2, r1
 8008620:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008624:	0cdb      	lsrs	r3, r3, #19
 8008626:	04db      	lsls	r3, r3, #19
 8008628:	6113      	str	r3, [r2, #16]
 800862a:	e04e      	b.n	80086ca <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	015a      	lsls	r2, r3, #5
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	4413      	add	r3, r2
 8008634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008638:	691b      	ldr	r3, [r3, #16]
 800863a:	693a      	ldr	r2, [r7, #16]
 800863c:	0151      	lsls	r1, r2, #5
 800863e:	697a      	ldr	r2, [r7, #20]
 8008640:	440a      	add	r2, r1
 8008642:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008646:	0cdb      	lsrs	r3, r3, #19
 8008648:	04db      	lsls	r3, r3, #19
 800864a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	015a      	lsls	r2, r3, #5
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	4413      	add	r3, r2
 8008654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008658:	691b      	ldr	r3, [r3, #16]
 800865a:	693a      	ldr	r2, [r7, #16]
 800865c:	0151      	lsls	r1, r2, #5
 800865e:	697a      	ldr	r2, [r7, #20]
 8008660:	440a      	add	r2, r1
 8008662:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008666:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800866a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800866e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	699a      	ldr	r2, [r3, #24]
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	68db      	ldr	r3, [r3, #12]
 8008678:	429a      	cmp	r2, r3
 800867a:	d903      	bls.n	8008684 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	68da      	ldr	r2, [r3, #12]
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	015a      	lsls	r2, r3, #5
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	4413      	add	r3, r2
 800868c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008690:	691b      	ldr	r3, [r3, #16]
 8008692:	693a      	ldr	r2, [r7, #16]
 8008694:	0151      	lsls	r1, r2, #5
 8008696:	697a      	ldr	r2, [r7, #20]
 8008698:	440a      	add	r2, r1
 800869a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800869e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80086a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	015a      	lsls	r2, r3, #5
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	4413      	add	r3, r2
 80086ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086b0:	691a      	ldr	r2, [r3, #16]
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	699b      	ldr	r3, [r3, #24]
 80086b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086ba:	6939      	ldr	r1, [r7, #16]
 80086bc:	0148      	lsls	r0, r1, #5
 80086be:	6979      	ldr	r1, [r7, #20]
 80086c0:	4401      	add	r1, r0
 80086c2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80086c6:	4313      	orrs	r3, r2
 80086c8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80086ca:	79fb      	ldrb	r3, [r7, #7]
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d11e      	bne.n	800870e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	695b      	ldr	r3, [r3, #20]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d009      	beq.n	80086ec <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	015a      	lsls	r2, r3, #5
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	4413      	add	r3, r2
 80086e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086e4:	461a      	mov	r2, r3
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	695b      	ldr	r3, [r3, #20]
 80086ea:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	015a      	lsls	r2, r3, #5
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	4413      	add	r3, r2
 80086f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	693a      	ldr	r2, [r7, #16]
 80086fc:	0151      	lsls	r1, r2, #5
 80086fe:	697a      	ldr	r2, [r7, #20]
 8008700:	440a      	add	r2, r1
 8008702:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008706:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800870a:	6013      	str	r3, [r2, #0]
 800870c:	e097      	b.n	800883e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	015a      	lsls	r2, r3, #5
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	4413      	add	r3, r2
 8008716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	693a      	ldr	r2, [r7, #16]
 800871e:	0151      	lsls	r1, r2, #5
 8008720:	697a      	ldr	r2, [r7, #20]
 8008722:	440a      	add	r2, r1
 8008724:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008728:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800872c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	699b      	ldr	r3, [r3, #24]
 8008732:	2b00      	cmp	r3, #0
 8008734:	f000 8083 	beq.w	800883e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800873e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	f003 030f 	and.w	r3, r3, #15
 8008748:	2101      	movs	r1, #1
 800874a:	fa01 f303 	lsl.w	r3, r1, r3
 800874e:	6979      	ldr	r1, [r7, #20]
 8008750:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008754:	4313      	orrs	r3, r2
 8008756:	634b      	str	r3, [r1, #52]	; 0x34
 8008758:	e071      	b.n	800883e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	015a      	lsls	r2, r3, #5
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	4413      	add	r3, r2
 8008762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008766:	691b      	ldr	r3, [r3, #16]
 8008768:	693a      	ldr	r2, [r7, #16]
 800876a:	0151      	lsls	r1, r2, #5
 800876c:	697a      	ldr	r2, [r7, #20]
 800876e:	440a      	add	r2, r1
 8008770:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008774:	0cdb      	lsrs	r3, r3, #19
 8008776:	04db      	lsls	r3, r3, #19
 8008778:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	015a      	lsls	r2, r3, #5
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	4413      	add	r3, r2
 8008782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008786:	691b      	ldr	r3, [r3, #16]
 8008788:	693a      	ldr	r2, [r7, #16]
 800878a:	0151      	lsls	r1, r2, #5
 800878c:	697a      	ldr	r2, [r7, #20]
 800878e:	440a      	add	r2, r1
 8008790:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008794:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008798:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800879c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	699b      	ldr	r3, [r3, #24]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d003      	beq.n	80087ae <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	68da      	ldr	r2, [r3, #12]
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	68da      	ldr	r2, [r3, #12]
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	015a      	lsls	r2, r3, #5
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	4413      	add	r3, r2
 80087be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087c2:	691b      	ldr	r3, [r3, #16]
 80087c4:	693a      	ldr	r2, [r7, #16]
 80087c6:	0151      	lsls	r1, r2, #5
 80087c8:	697a      	ldr	r2, [r7, #20]
 80087ca:	440a      	add	r2, r1
 80087cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80087d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	015a      	lsls	r2, r3, #5
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	4413      	add	r3, r2
 80087de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087e2:	691a      	ldr	r2, [r3, #16]
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	69db      	ldr	r3, [r3, #28]
 80087e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087ec:	6939      	ldr	r1, [r7, #16]
 80087ee:	0148      	lsls	r0, r1, #5
 80087f0:	6979      	ldr	r1, [r7, #20]
 80087f2:	4401      	add	r1, r0
 80087f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80087f8:	4313      	orrs	r3, r2
 80087fa:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80087fc:	79fb      	ldrb	r3, [r7, #7]
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d10d      	bne.n	800881e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	691b      	ldr	r3, [r3, #16]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d009      	beq.n	800881e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	6919      	ldr	r1, [r3, #16]
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	015a      	lsls	r2, r3, #5
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	4413      	add	r3, r2
 8008816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800881a:	460a      	mov	r2, r1
 800881c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	015a      	lsls	r2, r3, #5
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	4413      	add	r3, r2
 8008826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	693a      	ldr	r2, [r7, #16]
 800882e:	0151      	lsls	r1, r2, #5
 8008830:	697a      	ldr	r2, [r7, #20]
 8008832:	440a      	add	r2, r1
 8008834:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008838:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800883c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800883e:	2300      	movs	r3, #0
}
 8008840:	4618      	mov	r0, r3
 8008842:	371c      	adds	r7, #28
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800884c:	b480      	push	{r7}
 800884e:	b087      	sub	sp, #28
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008856:	2300      	movs	r3, #0
 8008858:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800885a:	2300      	movs	r3, #0
 800885c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	785b      	ldrb	r3, [r3, #1]
 8008866:	2b01      	cmp	r3, #1
 8008868:	d14a      	bne.n	8008900 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	015a      	lsls	r2, r3, #5
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	4413      	add	r3, r2
 8008874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800887e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008882:	f040 8086 	bne.w	8008992 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	015a      	lsls	r2, r3, #5
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	4413      	add	r3, r2
 8008890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	683a      	ldr	r2, [r7, #0]
 8008898:	7812      	ldrb	r2, [r2, #0]
 800889a:	0151      	lsls	r1, r2, #5
 800889c:	693a      	ldr	r2, [r7, #16]
 800889e:	440a      	add	r2, r1
 80088a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80088a8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	015a      	lsls	r2, r3, #5
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	4413      	add	r3, r2
 80088b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	683a      	ldr	r2, [r7, #0]
 80088bc:	7812      	ldrb	r2, [r2, #0]
 80088be:	0151      	lsls	r1, r2, #5
 80088c0:	693a      	ldr	r2, [r7, #16]
 80088c2:	440a      	add	r2, r1
 80088c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80088cc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	3301      	adds	r3, #1
 80088d2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f242 7210 	movw	r2, #10000	; 0x2710
 80088da:	4293      	cmp	r3, r2
 80088dc:	d902      	bls.n	80088e4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80088de:	2301      	movs	r3, #1
 80088e0:	75fb      	strb	r3, [r7, #23]
          break;
 80088e2:	e056      	b.n	8008992 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	015a      	lsls	r2, r3, #5
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	4413      	add	r3, r2
 80088ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088fc:	d0e7      	beq.n	80088ce <USB_EPStopXfer+0x82>
 80088fe:	e048      	b.n	8008992 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	015a      	lsls	r2, r3, #5
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	4413      	add	r3, r2
 800890a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008914:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008918:	d13b      	bne.n	8008992 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	015a      	lsls	r2, r3, #5
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	4413      	add	r3, r2
 8008924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	683a      	ldr	r2, [r7, #0]
 800892c:	7812      	ldrb	r2, [r2, #0]
 800892e:	0151      	lsls	r1, r2, #5
 8008930:	693a      	ldr	r2, [r7, #16]
 8008932:	440a      	add	r2, r1
 8008934:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008938:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800893c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	015a      	lsls	r2, r3, #5
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	4413      	add	r3, r2
 8008948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	683a      	ldr	r2, [r7, #0]
 8008950:	7812      	ldrb	r2, [r2, #0]
 8008952:	0151      	lsls	r1, r2, #5
 8008954:	693a      	ldr	r2, [r7, #16]
 8008956:	440a      	add	r2, r1
 8008958:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800895c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008960:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	3301      	adds	r3, #1
 8008966:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f242 7210 	movw	r2, #10000	; 0x2710
 800896e:	4293      	cmp	r3, r2
 8008970:	d902      	bls.n	8008978 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008972:	2301      	movs	r3, #1
 8008974:	75fb      	strb	r3, [r7, #23]
          break;
 8008976:	e00c      	b.n	8008992 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	015a      	lsls	r2, r3, #5
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	4413      	add	r3, r2
 8008982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800898c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008990:	d0e7      	beq.n	8008962 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008992:	7dfb      	ldrb	r3, [r7, #23]
}
 8008994:	4618      	mov	r0, r3
 8008996:	371c      	adds	r7, #28
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr

080089a0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b089      	sub	sp, #36	; 0x24
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	60f8      	str	r0, [r7, #12]
 80089a8:	60b9      	str	r1, [r7, #8]
 80089aa:	4611      	mov	r1, r2
 80089ac:	461a      	mov	r2, r3
 80089ae:	460b      	mov	r3, r1
 80089b0:	71fb      	strb	r3, [r7, #7]
 80089b2:	4613      	mov	r3, r2
 80089b4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80089be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d123      	bne.n	8008a0e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80089c6:	88bb      	ldrh	r3, [r7, #4]
 80089c8:	3303      	adds	r3, #3
 80089ca:	089b      	lsrs	r3, r3, #2
 80089cc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80089ce:	2300      	movs	r3, #0
 80089d0:	61bb      	str	r3, [r7, #24]
 80089d2:	e018      	b.n	8008a06 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80089d4:	79fb      	ldrb	r3, [r7, #7]
 80089d6:	031a      	lsls	r2, r3, #12
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	4413      	add	r3, r2
 80089dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089e0:	461a      	mov	r2, r3
 80089e2:	69fb      	ldr	r3, [r7, #28]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80089e8:	69fb      	ldr	r3, [r7, #28]
 80089ea:	3301      	adds	r3, #1
 80089ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80089ee:	69fb      	ldr	r3, [r7, #28]
 80089f0:	3301      	adds	r3, #1
 80089f2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80089f4:	69fb      	ldr	r3, [r7, #28]
 80089f6:	3301      	adds	r3, #1
 80089f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80089fa:	69fb      	ldr	r3, [r7, #28]
 80089fc:	3301      	adds	r3, #1
 80089fe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008a00:	69bb      	ldr	r3, [r7, #24]
 8008a02:	3301      	adds	r3, #1
 8008a04:	61bb      	str	r3, [r7, #24]
 8008a06:	69ba      	ldr	r2, [r7, #24]
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d3e2      	bcc.n	80089d4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008a0e:	2300      	movs	r3, #0
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3724      	adds	r7, #36	; 0x24
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b08b      	sub	sp, #44	; 0x2c
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	60f8      	str	r0, [r7, #12]
 8008a24:	60b9      	str	r1, [r7, #8]
 8008a26:	4613      	mov	r3, r2
 8008a28:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008a32:	88fb      	ldrh	r3, [r7, #6]
 8008a34:	089b      	lsrs	r3, r3, #2
 8008a36:	b29b      	uxth	r3, r3
 8008a38:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008a3a:	88fb      	ldrh	r3, [r7, #6]
 8008a3c:	f003 0303 	and.w	r3, r3, #3
 8008a40:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008a42:	2300      	movs	r3, #0
 8008a44:	623b      	str	r3, [r7, #32]
 8008a46:	e014      	b.n	8008a72 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008a48:	69bb      	ldr	r3, [r7, #24]
 8008a4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a4e:	681a      	ldr	r2, [r3, #0]
 8008a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a52:	601a      	str	r2, [r3, #0]
    pDest++;
 8008a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a56:	3301      	adds	r3, #1
 8008a58:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a62:	3301      	adds	r3, #1
 8008a64:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a68:	3301      	adds	r3, #1
 8008a6a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008a6c:	6a3b      	ldr	r3, [r7, #32]
 8008a6e:	3301      	adds	r3, #1
 8008a70:	623b      	str	r3, [r7, #32]
 8008a72:	6a3a      	ldr	r2, [r7, #32]
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d3e6      	bcc.n	8008a48 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008a7a:	8bfb      	ldrh	r3, [r7, #30]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d01e      	beq.n	8008abe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008a80:	2300      	movs	r3, #0
 8008a82:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008a84:	69bb      	ldr	r3, [r7, #24]
 8008a86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	f107 0310 	add.w	r3, r7, #16
 8008a90:	6812      	ldr	r2, [r2, #0]
 8008a92:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008a94:	693a      	ldr	r2, [r7, #16]
 8008a96:	6a3b      	ldr	r3, [r7, #32]
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	00db      	lsls	r3, r3, #3
 8008a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8008aa0:	b2da      	uxtb	r2, r3
 8008aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa4:	701a      	strb	r2, [r3, #0]
      i++;
 8008aa6:	6a3b      	ldr	r3, [r7, #32]
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	623b      	str	r3, [r7, #32]
      pDest++;
 8008aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aae:	3301      	adds	r3, #1
 8008ab0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008ab2:	8bfb      	ldrh	r3, [r7, #30]
 8008ab4:	3b01      	subs	r3, #1
 8008ab6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008ab8:	8bfb      	ldrh	r3, [r7, #30]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d1ea      	bne.n	8008a94 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	372c      	adds	r7, #44	; 0x2c
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr

08008acc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b085      	sub	sp, #20
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	785b      	ldrb	r3, [r3, #1]
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d12c      	bne.n	8008b42 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	015a      	lsls	r2, r3, #5
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	4413      	add	r3, r2
 8008af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	db12      	blt.n	8008b20 <USB_EPSetStall+0x54>
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d00f      	beq.n	8008b20 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	015a      	lsls	r2, r3, #5
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	4413      	add	r3, r2
 8008b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	68ba      	ldr	r2, [r7, #8]
 8008b10:	0151      	lsls	r1, r2, #5
 8008b12:	68fa      	ldr	r2, [r7, #12]
 8008b14:	440a      	add	r2, r1
 8008b16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b1a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008b1e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	015a      	lsls	r2, r3, #5
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	4413      	add	r3, r2
 8008b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	68ba      	ldr	r2, [r7, #8]
 8008b30:	0151      	lsls	r1, r2, #5
 8008b32:	68fa      	ldr	r2, [r7, #12]
 8008b34:	440a      	add	r2, r1
 8008b36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008b3e:	6013      	str	r3, [r2, #0]
 8008b40:	e02b      	b.n	8008b9a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	015a      	lsls	r2, r3, #5
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	4413      	add	r3, r2
 8008b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	db12      	blt.n	8008b7a <USB_EPSetStall+0xae>
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d00f      	beq.n	8008b7a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	015a      	lsls	r2, r3, #5
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	4413      	add	r3, r2
 8008b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	68ba      	ldr	r2, [r7, #8]
 8008b6a:	0151      	lsls	r1, r2, #5
 8008b6c:	68fa      	ldr	r2, [r7, #12]
 8008b6e:	440a      	add	r2, r1
 8008b70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008b78:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	015a      	lsls	r2, r3, #5
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	4413      	add	r3, r2
 8008b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	68ba      	ldr	r2, [r7, #8]
 8008b8a:	0151      	lsls	r1, r2, #5
 8008b8c:	68fa      	ldr	r2, [r7, #12]
 8008b8e:	440a      	add	r2, r1
 8008b90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008b98:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008b9a:	2300      	movs	r3, #0
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3714      	adds	r7, #20
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr

08008ba8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b085      	sub	sp, #20
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	785b      	ldrb	r3, [r3, #1]
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d128      	bne.n	8008c16 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	015a      	lsls	r2, r3, #5
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	4413      	add	r3, r2
 8008bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	68ba      	ldr	r2, [r7, #8]
 8008bd4:	0151      	lsls	r1, r2, #5
 8008bd6:	68fa      	ldr	r2, [r7, #12]
 8008bd8:	440a      	add	r2, r1
 8008bda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bde:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008be2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	791b      	ldrb	r3, [r3, #4]
 8008be8:	2b03      	cmp	r3, #3
 8008bea:	d003      	beq.n	8008bf4 <USB_EPClearStall+0x4c>
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	791b      	ldrb	r3, [r3, #4]
 8008bf0:	2b02      	cmp	r3, #2
 8008bf2:	d138      	bne.n	8008c66 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	015a      	lsls	r2, r3, #5
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	4413      	add	r3, r2
 8008bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	68ba      	ldr	r2, [r7, #8]
 8008c04:	0151      	lsls	r1, r2, #5
 8008c06:	68fa      	ldr	r2, [r7, #12]
 8008c08:	440a      	add	r2, r1
 8008c0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c12:	6013      	str	r3, [r2, #0]
 8008c14:	e027      	b.n	8008c66 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	015a      	lsls	r2, r3, #5
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	4413      	add	r3, r2
 8008c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	68ba      	ldr	r2, [r7, #8]
 8008c26:	0151      	lsls	r1, r2, #5
 8008c28:	68fa      	ldr	r2, [r7, #12]
 8008c2a:	440a      	add	r2, r1
 8008c2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c30:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008c34:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	791b      	ldrb	r3, [r3, #4]
 8008c3a:	2b03      	cmp	r3, #3
 8008c3c:	d003      	beq.n	8008c46 <USB_EPClearStall+0x9e>
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	791b      	ldrb	r3, [r3, #4]
 8008c42:	2b02      	cmp	r3, #2
 8008c44:	d10f      	bne.n	8008c66 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	015a      	lsls	r2, r3, #5
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	4413      	add	r3, r2
 8008c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	68ba      	ldr	r2, [r7, #8]
 8008c56:	0151      	lsls	r1, r2, #5
 8008c58:	68fa      	ldr	r2, [r7, #12]
 8008c5a:	440a      	add	r2, r1
 8008c5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c64:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008c66:	2300      	movs	r3, #0
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3714      	adds	r7, #20
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b085      	sub	sp, #20
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	460b      	mov	r3, r1
 8008c7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	68fa      	ldr	r2, [r7, #12]
 8008c8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c92:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008c96:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	78fb      	ldrb	r3, [r7, #3]
 8008ca2:	011b      	lsls	r3, r3, #4
 8008ca4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008ca8:	68f9      	ldr	r1, [r7, #12]
 8008caa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008cb2:	2300      	movs	r3, #0
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3714      	adds	r7, #20
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b085      	sub	sp, #20
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	68fa      	ldr	r2, [r7, #12]
 8008cd6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008cda:	f023 0303 	bic.w	r3, r3, #3
 8008cde:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	68fa      	ldr	r2, [r7, #12]
 8008cea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008cee:	f023 0302 	bic.w	r3, r3, #2
 8008cf2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008cf4:	2300      	movs	r3, #0
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3714      	adds	r7, #20
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr

08008d02 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008d02:	b480      	push	{r7}
 8008d04:	b085      	sub	sp, #20
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	68fa      	ldr	r2, [r7, #12]
 8008d18:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008d1c:	f023 0303 	bic.w	r3, r3, #3
 8008d20:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	68fa      	ldr	r2, [r7, #12]
 8008d2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d30:	f043 0302 	orr.w	r3, r3, #2
 8008d34:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008d36:	2300      	movs	r3, #0
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3714      	adds	r7, #20
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b085      	sub	sp, #20
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	695b      	ldr	r3, [r3, #20]
 8008d50:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	699b      	ldr	r3, [r3, #24]
 8008d56:	68fa      	ldr	r2, [r7, #12]
 8008d58:	4013      	ands	r3, r2
 8008d5a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3714      	adds	r7, #20
 8008d62:	46bd      	mov	sp, r7
 8008d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d68:	4770      	bx	lr

08008d6a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d6a:	b480      	push	{r7}
 8008d6c:	b085      	sub	sp, #20
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d7c:	699b      	ldr	r3, [r3, #24]
 8008d7e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d86:	69db      	ldr	r3, [r3, #28]
 8008d88:	68ba      	ldr	r2, [r7, #8]
 8008d8a:	4013      	ands	r3, r2
 8008d8c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	0c1b      	lsrs	r3, r3, #16
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3714      	adds	r7, #20
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr

08008d9e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d9e:	b480      	push	{r7}
 8008da0:	b085      	sub	sp, #20
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008db0:	699b      	ldr	r3, [r3, #24]
 8008db2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dba:	69db      	ldr	r3, [r3, #28]
 8008dbc:	68ba      	ldr	r2, [r7, #8]
 8008dbe:	4013      	ands	r3, r2
 8008dc0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	b29b      	uxth	r3, r3
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3714      	adds	r7, #20
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr

08008dd2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008dd2:	b480      	push	{r7}
 8008dd4:	b085      	sub	sp, #20
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
 8008dda:	460b      	mov	r3, r1
 8008ddc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008de2:	78fb      	ldrb	r3, [r7, #3]
 8008de4:	015a      	lsls	r2, r3, #5
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	4413      	add	r3, r2
 8008dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dee:	689b      	ldr	r3, [r3, #8]
 8008df0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008df8:	695b      	ldr	r3, [r3, #20]
 8008dfa:	68ba      	ldr	r2, [r7, #8]
 8008dfc:	4013      	ands	r3, r2
 8008dfe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008e00:	68bb      	ldr	r3, [r7, #8]
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3714      	adds	r7, #20
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr

08008e0e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008e0e:	b480      	push	{r7}
 8008e10:	b087      	sub	sp, #28
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	6078      	str	r0, [r7, #4]
 8008e16:	460b      	mov	r3, r1
 8008e18:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e24:	691b      	ldr	r3, [r3, #16]
 8008e26:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e30:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008e32:	78fb      	ldrb	r3, [r7, #3]
 8008e34:	f003 030f 	and.w	r3, r3, #15
 8008e38:	68fa      	ldr	r2, [r7, #12]
 8008e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8008e3e:	01db      	lsls	r3, r3, #7
 8008e40:	b2db      	uxtb	r3, r3
 8008e42:	693a      	ldr	r2, [r7, #16]
 8008e44:	4313      	orrs	r3, r2
 8008e46:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008e48:	78fb      	ldrb	r3, [r7, #3]
 8008e4a:	015a      	lsls	r2, r3, #5
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	4413      	add	r3, r2
 8008e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e54:	689b      	ldr	r3, [r3, #8]
 8008e56:	693a      	ldr	r2, [r7, #16]
 8008e58:	4013      	ands	r3, r2
 8008e5a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008e5c:	68bb      	ldr	r3, [r7, #8]
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	371c      	adds	r7, #28
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr

08008e6a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008e6a:	b480      	push	{r7}
 8008e6c:	b083      	sub	sp, #12
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	695b      	ldr	r3, [r3, #20]
 8008e76:	f003 0301 	and.w	r3, r3, #1
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	370c      	adds	r7, #12
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr

08008e86 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008e86:	b480      	push	{r7}
 8008e88:	b085      	sub	sp, #20
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	68fa      	ldr	r2, [r7, #12]
 8008e9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ea0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008ea4:	f023 0307 	bic.w	r3, r3, #7
 8008ea8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	68fa      	ldr	r2, [r7, #12]
 8008eb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ebc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008ebe:	2300      	movs	r3, #0
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3714      	adds	r7, #20
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b087      	sub	sp, #28
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	60f8      	str	r0, [r7, #12]
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	607a      	str	r2, [r7, #4]
 8008ed8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	333c      	adds	r3, #60	; 0x3c
 8008ee2:	3304      	adds	r3, #4
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	4a26      	ldr	r2, [pc, #152]	; (8008f84 <USB_EP0_OutStart+0xb8>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d90a      	bls.n	8008f06 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008efc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f00:	d101      	bne.n	8008f06 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008f02:	2300      	movs	r3, #0
 8008f04:	e037      	b.n	8008f76 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	2300      	movs	r3, #0
 8008f10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f18:	691b      	ldr	r3, [r3, #16]
 8008f1a:	697a      	ldr	r2, [r7, #20]
 8008f1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f2c:	691b      	ldr	r3, [r3, #16]
 8008f2e:	697a      	ldr	r2, [r7, #20]
 8008f30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f34:	f043 0318 	orr.w	r3, r3, #24
 8008f38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f40:	691b      	ldr	r3, [r3, #16]
 8008f42:	697a      	ldr	r2, [r7, #20]
 8008f44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f48:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008f4c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008f4e:	7afb      	ldrb	r3, [r7, #11]
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d10f      	bne.n	8008f74 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	697a      	ldr	r2, [r7, #20]
 8008f6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f6e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008f72:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008f74:	2300      	movs	r3, #0
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	371c      	adds	r7, #28
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr
 8008f82:	bf00      	nop
 8008f84:	4f54300a 	.word	0x4f54300a

08008f88 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b085      	sub	sp, #20
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f90:	2300      	movs	r3, #0
 8008f92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	3301      	adds	r3, #1
 8008f98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	4a13      	ldr	r2, [pc, #76]	; (8008fec <USB_CoreReset+0x64>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d901      	bls.n	8008fa6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008fa2:	2303      	movs	r3, #3
 8008fa4:	e01b      	b.n	8008fde <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	691b      	ldr	r3, [r3, #16]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	daf2      	bge.n	8008f94 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	691b      	ldr	r3, [r3, #16]
 8008fb6:	f043 0201 	orr.w	r2, r3, #1
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	4a09      	ldr	r2, [pc, #36]	; (8008fec <USB_CoreReset+0x64>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d901      	bls.n	8008fd0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008fcc:	2303      	movs	r3, #3
 8008fce:	e006      	b.n	8008fde <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	691b      	ldr	r3, [r3, #16]
 8008fd4:	f003 0301 	and.w	r3, r3, #1
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d0f0      	beq.n	8008fbe <USB_CoreReset+0x36>

  return HAL_OK;
 8008fdc:	2300      	movs	r3, #0
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3714      	adds	r7, #20
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr
 8008fea:	bf00      	nop
 8008fec:	00030d40 	.word	0x00030d40

08008ff0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008ffc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009000:	f002 fcc8 	bl	800b994 <USBD_static_malloc>
 8009004:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d109      	bne.n	8009020 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	32b0      	adds	r2, #176	; 0xb0
 8009016:	2100      	movs	r1, #0
 8009018:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800901c:	2302      	movs	r3, #2
 800901e:	e0d4      	b.n	80091ca <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009020:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009024:	2100      	movs	r1, #0
 8009026:	68f8      	ldr	r0, [r7, #12]
 8009028:	f002 fd22 	bl	800ba70 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	32b0      	adds	r2, #176	; 0xb0
 8009036:	68f9      	ldr	r1, [r7, #12]
 8009038:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	32b0      	adds	r2, #176	; 0xb0
 8009046:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	7c1b      	ldrb	r3, [r3, #16]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d138      	bne.n	80090ca <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009058:	4b5e      	ldr	r3, [pc, #376]	; (80091d4 <USBD_CDC_Init+0x1e4>)
 800905a:	7819      	ldrb	r1, [r3, #0]
 800905c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009060:	2202      	movs	r2, #2
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f002 fb25 	bl	800b6b2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009068:	4b5a      	ldr	r3, [pc, #360]	; (80091d4 <USBD_CDC_Init+0x1e4>)
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	f003 020f 	and.w	r2, r3, #15
 8009070:	6879      	ldr	r1, [r7, #4]
 8009072:	4613      	mov	r3, r2
 8009074:	009b      	lsls	r3, r3, #2
 8009076:	4413      	add	r3, r2
 8009078:	009b      	lsls	r3, r3, #2
 800907a:	440b      	add	r3, r1
 800907c:	3324      	adds	r3, #36	; 0x24
 800907e:	2201      	movs	r2, #1
 8009080:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009082:	4b55      	ldr	r3, [pc, #340]	; (80091d8 <USBD_CDC_Init+0x1e8>)
 8009084:	7819      	ldrb	r1, [r3, #0]
 8009086:	f44f 7300 	mov.w	r3, #512	; 0x200
 800908a:	2202      	movs	r2, #2
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f002 fb10 	bl	800b6b2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009092:	4b51      	ldr	r3, [pc, #324]	; (80091d8 <USBD_CDC_Init+0x1e8>)
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	f003 020f 	and.w	r2, r3, #15
 800909a:	6879      	ldr	r1, [r7, #4]
 800909c:	4613      	mov	r3, r2
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	4413      	add	r3, r2
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	440b      	add	r3, r1
 80090a6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80090aa:	2201      	movs	r2, #1
 80090ac:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80090ae:	4b4b      	ldr	r3, [pc, #300]	; (80091dc <USBD_CDC_Init+0x1ec>)
 80090b0:	781b      	ldrb	r3, [r3, #0]
 80090b2:	f003 020f 	and.w	r2, r3, #15
 80090b6:	6879      	ldr	r1, [r7, #4]
 80090b8:	4613      	mov	r3, r2
 80090ba:	009b      	lsls	r3, r3, #2
 80090bc:	4413      	add	r3, r2
 80090be:	009b      	lsls	r3, r3, #2
 80090c0:	440b      	add	r3, r1
 80090c2:	3326      	adds	r3, #38	; 0x26
 80090c4:	2210      	movs	r2, #16
 80090c6:	801a      	strh	r2, [r3, #0]
 80090c8:	e035      	b.n	8009136 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80090ca:	4b42      	ldr	r3, [pc, #264]	; (80091d4 <USBD_CDC_Init+0x1e4>)
 80090cc:	7819      	ldrb	r1, [r3, #0]
 80090ce:	2340      	movs	r3, #64	; 0x40
 80090d0:	2202      	movs	r2, #2
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f002 faed 	bl	800b6b2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80090d8:	4b3e      	ldr	r3, [pc, #248]	; (80091d4 <USBD_CDC_Init+0x1e4>)
 80090da:	781b      	ldrb	r3, [r3, #0]
 80090dc:	f003 020f 	and.w	r2, r3, #15
 80090e0:	6879      	ldr	r1, [r7, #4]
 80090e2:	4613      	mov	r3, r2
 80090e4:	009b      	lsls	r3, r3, #2
 80090e6:	4413      	add	r3, r2
 80090e8:	009b      	lsls	r3, r3, #2
 80090ea:	440b      	add	r3, r1
 80090ec:	3324      	adds	r3, #36	; 0x24
 80090ee:	2201      	movs	r2, #1
 80090f0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80090f2:	4b39      	ldr	r3, [pc, #228]	; (80091d8 <USBD_CDC_Init+0x1e8>)
 80090f4:	7819      	ldrb	r1, [r3, #0]
 80090f6:	2340      	movs	r3, #64	; 0x40
 80090f8:	2202      	movs	r2, #2
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f002 fad9 	bl	800b6b2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009100:	4b35      	ldr	r3, [pc, #212]	; (80091d8 <USBD_CDC_Init+0x1e8>)
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	f003 020f 	and.w	r2, r3, #15
 8009108:	6879      	ldr	r1, [r7, #4]
 800910a:	4613      	mov	r3, r2
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	4413      	add	r3, r2
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	440b      	add	r3, r1
 8009114:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009118:	2201      	movs	r2, #1
 800911a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800911c:	4b2f      	ldr	r3, [pc, #188]	; (80091dc <USBD_CDC_Init+0x1ec>)
 800911e:	781b      	ldrb	r3, [r3, #0]
 8009120:	f003 020f 	and.w	r2, r3, #15
 8009124:	6879      	ldr	r1, [r7, #4]
 8009126:	4613      	mov	r3, r2
 8009128:	009b      	lsls	r3, r3, #2
 800912a:	4413      	add	r3, r2
 800912c:	009b      	lsls	r3, r3, #2
 800912e:	440b      	add	r3, r1
 8009130:	3326      	adds	r3, #38	; 0x26
 8009132:	2210      	movs	r2, #16
 8009134:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009136:	4b29      	ldr	r3, [pc, #164]	; (80091dc <USBD_CDC_Init+0x1ec>)
 8009138:	7819      	ldrb	r1, [r3, #0]
 800913a:	2308      	movs	r3, #8
 800913c:	2203      	movs	r2, #3
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f002 fab7 	bl	800b6b2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009144:	4b25      	ldr	r3, [pc, #148]	; (80091dc <USBD_CDC_Init+0x1ec>)
 8009146:	781b      	ldrb	r3, [r3, #0]
 8009148:	f003 020f 	and.w	r2, r3, #15
 800914c:	6879      	ldr	r1, [r7, #4]
 800914e:	4613      	mov	r3, r2
 8009150:	009b      	lsls	r3, r3, #2
 8009152:	4413      	add	r3, r2
 8009154:	009b      	lsls	r3, r3, #2
 8009156:	440b      	add	r3, r1
 8009158:	3324      	adds	r3, #36	; 0x24
 800915a:	2201      	movs	r2, #1
 800915c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2200      	movs	r2, #0
 8009162:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800916c:	687a      	ldr	r2, [r7, #4]
 800916e:	33b0      	adds	r3, #176	; 0xb0
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	4413      	add	r3, r2
 8009174:	685b      	ldr	r3, [r3, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2200      	movs	r2, #0
 800917e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2200      	movs	r2, #0
 8009186:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009190:	2b00      	cmp	r3, #0
 8009192:	d101      	bne.n	8009198 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009194:	2302      	movs	r3, #2
 8009196:	e018      	b.n	80091ca <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	7c1b      	ldrb	r3, [r3, #16]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d10a      	bne.n	80091b6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80091a0:	4b0d      	ldr	r3, [pc, #52]	; (80091d8 <USBD_CDC_Init+0x1e8>)
 80091a2:	7819      	ldrb	r1, [r3, #0]
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80091aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f002 fb6e 	bl	800b890 <USBD_LL_PrepareReceive>
 80091b4:	e008      	b.n	80091c8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80091b6:	4b08      	ldr	r3, [pc, #32]	; (80091d8 <USBD_CDC_Init+0x1e8>)
 80091b8:	7819      	ldrb	r1, [r3, #0]
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80091c0:	2340      	movs	r3, #64	; 0x40
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f002 fb64 	bl	800b890 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80091c8:	2300      	movs	r3, #0
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3710      	adds	r7, #16
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
 80091d2:	bf00      	nop
 80091d4:	200000a3 	.word	0x200000a3
 80091d8:	200000a4 	.word	0x200000a4
 80091dc:	200000a5 	.word	0x200000a5

080091e0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b082      	sub	sp, #8
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	460b      	mov	r3, r1
 80091ea:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80091ec:	4b3a      	ldr	r3, [pc, #232]	; (80092d8 <USBD_CDC_DeInit+0xf8>)
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	4619      	mov	r1, r3
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f002 fa83 	bl	800b6fe <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80091f8:	4b37      	ldr	r3, [pc, #220]	; (80092d8 <USBD_CDC_DeInit+0xf8>)
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	f003 020f 	and.w	r2, r3, #15
 8009200:	6879      	ldr	r1, [r7, #4]
 8009202:	4613      	mov	r3, r2
 8009204:	009b      	lsls	r3, r3, #2
 8009206:	4413      	add	r3, r2
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	440b      	add	r3, r1
 800920c:	3324      	adds	r3, #36	; 0x24
 800920e:	2200      	movs	r2, #0
 8009210:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009212:	4b32      	ldr	r3, [pc, #200]	; (80092dc <USBD_CDC_DeInit+0xfc>)
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	4619      	mov	r1, r3
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f002 fa70 	bl	800b6fe <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800921e:	4b2f      	ldr	r3, [pc, #188]	; (80092dc <USBD_CDC_DeInit+0xfc>)
 8009220:	781b      	ldrb	r3, [r3, #0]
 8009222:	f003 020f 	and.w	r2, r3, #15
 8009226:	6879      	ldr	r1, [r7, #4]
 8009228:	4613      	mov	r3, r2
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	4413      	add	r3, r2
 800922e:	009b      	lsls	r3, r3, #2
 8009230:	440b      	add	r3, r1
 8009232:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009236:	2200      	movs	r2, #0
 8009238:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800923a:	4b29      	ldr	r3, [pc, #164]	; (80092e0 <USBD_CDC_DeInit+0x100>)
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	4619      	mov	r1, r3
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f002 fa5c 	bl	800b6fe <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009246:	4b26      	ldr	r3, [pc, #152]	; (80092e0 <USBD_CDC_DeInit+0x100>)
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	f003 020f 	and.w	r2, r3, #15
 800924e:	6879      	ldr	r1, [r7, #4]
 8009250:	4613      	mov	r3, r2
 8009252:	009b      	lsls	r3, r3, #2
 8009254:	4413      	add	r3, r2
 8009256:	009b      	lsls	r3, r3, #2
 8009258:	440b      	add	r3, r1
 800925a:	3324      	adds	r3, #36	; 0x24
 800925c:	2200      	movs	r2, #0
 800925e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009260:	4b1f      	ldr	r3, [pc, #124]	; (80092e0 <USBD_CDC_DeInit+0x100>)
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	f003 020f 	and.w	r2, r3, #15
 8009268:	6879      	ldr	r1, [r7, #4]
 800926a:	4613      	mov	r3, r2
 800926c:	009b      	lsls	r3, r3, #2
 800926e:	4413      	add	r3, r2
 8009270:	009b      	lsls	r3, r3, #2
 8009272:	440b      	add	r3, r1
 8009274:	3326      	adds	r3, #38	; 0x26
 8009276:	2200      	movs	r2, #0
 8009278:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	32b0      	adds	r2, #176	; 0xb0
 8009284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d01f      	beq.n	80092cc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009292:	687a      	ldr	r2, [r7, #4]
 8009294:	33b0      	adds	r3, #176	; 0xb0
 8009296:	009b      	lsls	r3, r3, #2
 8009298:	4413      	add	r3, r2
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	32b0      	adds	r2, #176	; 0xb0
 80092aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092ae:	4618      	mov	r0, r3
 80092b0:	f002 fb7e 	bl	800b9b0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	32b0      	adds	r2, #176	; 0xb0
 80092be:	2100      	movs	r1, #0
 80092c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2200      	movs	r2, #0
 80092c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80092cc:	2300      	movs	r3, #0
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3708      	adds	r7, #8
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	bf00      	nop
 80092d8:	200000a3 	.word	0x200000a3
 80092dc:	200000a4 	.word	0x200000a4
 80092e0:	200000a5 	.word	0x200000a5

080092e4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b086      	sub	sp, #24
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	32b0      	adds	r2, #176	; 0xb0
 80092f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092fc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80092fe:	2300      	movs	r3, #0
 8009300:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009302:	2300      	movs	r3, #0
 8009304:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009306:	2300      	movs	r3, #0
 8009308:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d101      	bne.n	8009314 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009310:	2303      	movs	r3, #3
 8009312:	e0bf      	b.n	8009494 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800931c:	2b00      	cmp	r3, #0
 800931e:	d050      	beq.n	80093c2 <USBD_CDC_Setup+0xde>
 8009320:	2b20      	cmp	r3, #32
 8009322:	f040 80af 	bne.w	8009484 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	88db      	ldrh	r3, [r3, #6]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d03a      	beq.n	80093a4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	b25b      	sxtb	r3, r3
 8009334:	2b00      	cmp	r3, #0
 8009336:	da1b      	bge.n	8009370 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	33b0      	adds	r3, #176	; 0xb0
 8009342:	009b      	lsls	r3, r3, #2
 8009344:	4413      	add	r3, r2
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	689b      	ldr	r3, [r3, #8]
 800934a:	683a      	ldr	r2, [r7, #0]
 800934c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800934e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009350:	683a      	ldr	r2, [r7, #0]
 8009352:	88d2      	ldrh	r2, [r2, #6]
 8009354:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	88db      	ldrh	r3, [r3, #6]
 800935a:	2b07      	cmp	r3, #7
 800935c:	bf28      	it	cs
 800935e:	2307      	movcs	r3, #7
 8009360:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	89fa      	ldrh	r2, [r7, #14]
 8009366:	4619      	mov	r1, r3
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f001 fd6d 	bl	800ae48 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800936e:	e090      	b.n	8009492 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	785a      	ldrb	r2, [r3, #1]
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	88db      	ldrh	r3, [r3, #6]
 800937e:	2b3f      	cmp	r3, #63	; 0x3f
 8009380:	d803      	bhi.n	800938a <USBD_CDC_Setup+0xa6>
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	88db      	ldrh	r3, [r3, #6]
 8009386:	b2da      	uxtb	r2, r3
 8009388:	e000      	b.n	800938c <USBD_CDC_Setup+0xa8>
 800938a:	2240      	movs	r2, #64	; 0x40
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009392:	6939      	ldr	r1, [r7, #16]
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800939a:	461a      	mov	r2, r3
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f001 fd7f 	bl	800aea0 <USBD_CtlPrepareRx>
      break;
 80093a2:	e076      	b.n	8009492 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80093aa:	687a      	ldr	r2, [r7, #4]
 80093ac:	33b0      	adds	r3, #176	; 0xb0
 80093ae:	009b      	lsls	r3, r3, #2
 80093b0:	4413      	add	r3, r2
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	689b      	ldr	r3, [r3, #8]
 80093b6:	683a      	ldr	r2, [r7, #0]
 80093b8:	7850      	ldrb	r0, [r2, #1]
 80093ba:	2200      	movs	r2, #0
 80093bc:	6839      	ldr	r1, [r7, #0]
 80093be:	4798      	blx	r3
      break;
 80093c0:	e067      	b.n	8009492 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	785b      	ldrb	r3, [r3, #1]
 80093c6:	2b0b      	cmp	r3, #11
 80093c8:	d851      	bhi.n	800946e <USBD_CDC_Setup+0x18a>
 80093ca:	a201      	add	r2, pc, #4	; (adr r2, 80093d0 <USBD_CDC_Setup+0xec>)
 80093cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093d0:	08009401 	.word	0x08009401
 80093d4:	0800947d 	.word	0x0800947d
 80093d8:	0800946f 	.word	0x0800946f
 80093dc:	0800946f 	.word	0x0800946f
 80093e0:	0800946f 	.word	0x0800946f
 80093e4:	0800946f 	.word	0x0800946f
 80093e8:	0800946f 	.word	0x0800946f
 80093ec:	0800946f 	.word	0x0800946f
 80093f0:	0800946f 	.word	0x0800946f
 80093f4:	0800946f 	.word	0x0800946f
 80093f8:	0800942b 	.word	0x0800942b
 80093fc:	08009455 	.word	0x08009455
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009406:	b2db      	uxtb	r3, r3
 8009408:	2b03      	cmp	r3, #3
 800940a:	d107      	bne.n	800941c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800940c:	f107 030a 	add.w	r3, r7, #10
 8009410:	2202      	movs	r2, #2
 8009412:	4619      	mov	r1, r3
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f001 fd17 	bl	800ae48 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800941a:	e032      	b.n	8009482 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800941c:	6839      	ldr	r1, [r7, #0]
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f001 fca1 	bl	800ad66 <USBD_CtlError>
            ret = USBD_FAIL;
 8009424:	2303      	movs	r3, #3
 8009426:	75fb      	strb	r3, [r7, #23]
          break;
 8009428:	e02b      	b.n	8009482 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009430:	b2db      	uxtb	r3, r3
 8009432:	2b03      	cmp	r3, #3
 8009434:	d107      	bne.n	8009446 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009436:	f107 030d 	add.w	r3, r7, #13
 800943a:	2201      	movs	r2, #1
 800943c:	4619      	mov	r1, r3
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f001 fd02 	bl	800ae48 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009444:	e01d      	b.n	8009482 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009446:	6839      	ldr	r1, [r7, #0]
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f001 fc8c 	bl	800ad66 <USBD_CtlError>
            ret = USBD_FAIL;
 800944e:	2303      	movs	r3, #3
 8009450:	75fb      	strb	r3, [r7, #23]
          break;
 8009452:	e016      	b.n	8009482 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800945a:	b2db      	uxtb	r3, r3
 800945c:	2b03      	cmp	r3, #3
 800945e:	d00f      	beq.n	8009480 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009460:	6839      	ldr	r1, [r7, #0]
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f001 fc7f 	bl	800ad66 <USBD_CtlError>
            ret = USBD_FAIL;
 8009468:	2303      	movs	r3, #3
 800946a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800946c:	e008      	b.n	8009480 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800946e:	6839      	ldr	r1, [r7, #0]
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f001 fc78 	bl	800ad66 <USBD_CtlError>
          ret = USBD_FAIL;
 8009476:	2303      	movs	r3, #3
 8009478:	75fb      	strb	r3, [r7, #23]
          break;
 800947a:	e002      	b.n	8009482 <USBD_CDC_Setup+0x19e>
          break;
 800947c:	bf00      	nop
 800947e:	e008      	b.n	8009492 <USBD_CDC_Setup+0x1ae>
          break;
 8009480:	bf00      	nop
      }
      break;
 8009482:	e006      	b.n	8009492 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009484:	6839      	ldr	r1, [r7, #0]
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f001 fc6d 	bl	800ad66 <USBD_CtlError>
      ret = USBD_FAIL;
 800948c:	2303      	movs	r3, #3
 800948e:	75fb      	strb	r3, [r7, #23]
      break;
 8009490:	bf00      	nop
  }

  return (uint8_t)ret;
 8009492:	7dfb      	ldrb	r3, [r7, #23]
}
 8009494:	4618      	mov	r0, r3
 8009496:	3718      	adds	r7, #24
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	460b      	mov	r3, r1
 80094a6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80094ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	32b0      	adds	r2, #176	; 0xb0
 80094ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d101      	bne.n	80094c6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80094c2:	2303      	movs	r3, #3
 80094c4:	e065      	b.n	8009592 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	32b0      	adds	r2, #176	; 0xb0
 80094d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094d4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80094d6:	78fb      	ldrb	r3, [r7, #3]
 80094d8:	f003 020f 	and.w	r2, r3, #15
 80094dc:	6879      	ldr	r1, [r7, #4]
 80094de:	4613      	mov	r3, r2
 80094e0:	009b      	lsls	r3, r3, #2
 80094e2:	4413      	add	r3, r2
 80094e4:	009b      	lsls	r3, r3, #2
 80094e6:	440b      	add	r3, r1
 80094e8:	3318      	adds	r3, #24
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d02f      	beq.n	8009550 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80094f0:	78fb      	ldrb	r3, [r7, #3]
 80094f2:	f003 020f 	and.w	r2, r3, #15
 80094f6:	6879      	ldr	r1, [r7, #4]
 80094f8:	4613      	mov	r3, r2
 80094fa:	009b      	lsls	r3, r3, #2
 80094fc:	4413      	add	r3, r2
 80094fe:	009b      	lsls	r3, r3, #2
 8009500:	440b      	add	r3, r1
 8009502:	3318      	adds	r3, #24
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	78fb      	ldrb	r3, [r7, #3]
 8009508:	f003 010f 	and.w	r1, r3, #15
 800950c:	68f8      	ldr	r0, [r7, #12]
 800950e:	460b      	mov	r3, r1
 8009510:	00db      	lsls	r3, r3, #3
 8009512:	440b      	add	r3, r1
 8009514:	009b      	lsls	r3, r3, #2
 8009516:	4403      	add	r3, r0
 8009518:	3348      	adds	r3, #72	; 0x48
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	fbb2 f1f3 	udiv	r1, r2, r3
 8009520:	fb01 f303 	mul.w	r3, r1, r3
 8009524:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009526:	2b00      	cmp	r3, #0
 8009528:	d112      	bne.n	8009550 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800952a:	78fb      	ldrb	r3, [r7, #3]
 800952c:	f003 020f 	and.w	r2, r3, #15
 8009530:	6879      	ldr	r1, [r7, #4]
 8009532:	4613      	mov	r3, r2
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	4413      	add	r3, r2
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	440b      	add	r3, r1
 800953c:	3318      	adds	r3, #24
 800953e:	2200      	movs	r2, #0
 8009540:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009542:	78f9      	ldrb	r1, [r7, #3]
 8009544:	2300      	movs	r3, #0
 8009546:	2200      	movs	r2, #0
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f002 f980 	bl	800b84e <USBD_LL_Transmit>
 800954e:	e01f      	b.n	8009590 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	2200      	movs	r2, #0
 8009554:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800955e:	687a      	ldr	r2, [r7, #4]
 8009560:	33b0      	adds	r3, #176	; 0xb0
 8009562:	009b      	lsls	r3, r3, #2
 8009564:	4413      	add	r3, r2
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	691b      	ldr	r3, [r3, #16]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d010      	beq.n	8009590 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	33b0      	adds	r3, #176	; 0xb0
 8009578:	009b      	lsls	r3, r3, #2
 800957a:	4413      	add	r3, r2
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	691b      	ldr	r3, [r3, #16]
 8009580:	68ba      	ldr	r2, [r7, #8]
 8009582:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009586:	68ba      	ldr	r2, [r7, #8]
 8009588:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800958c:	78fa      	ldrb	r2, [r7, #3]
 800958e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009590:	2300      	movs	r3, #0
}
 8009592:	4618      	mov	r0, r3
 8009594:	3710      	adds	r7, #16
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}

0800959a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b084      	sub	sp, #16
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
 80095a2:	460b      	mov	r3, r1
 80095a4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	32b0      	adds	r2, #176	; 0xb0
 80095b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095b4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	32b0      	adds	r2, #176	; 0xb0
 80095c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d101      	bne.n	80095cc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80095c8:	2303      	movs	r3, #3
 80095ca:	e01a      	b.n	8009602 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80095cc:	78fb      	ldrb	r3, [r7, #3]
 80095ce:	4619      	mov	r1, r3
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f002 f97e 	bl	800b8d2 <USBD_LL_GetRxDataSize>
 80095d6:	4602      	mov	r2, r0
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80095e4:	687a      	ldr	r2, [r7, #4]
 80095e6:	33b0      	adds	r3, #176	; 0xb0
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	4413      	add	r3, r2
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	68db      	ldr	r3, [r3, #12]
 80095f0:	68fa      	ldr	r2, [r7, #12]
 80095f2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80095f6:	68fa      	ldr	r2, [r7, #12]
 80095f8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80095fc:	4611      	mov	r1, r2
 80095fe:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009600:	2300      	movs	r3, #0
}
 8009602:	4618      	mov	r0, r3
 8009604:	3710      	adds	r7, #16
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}

0800960a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800960a:	b580      	push	{r7, lr}
 800960c:	b084      	sub	sp, #16
 800960e:	af00      	add	r7, sp, #0
 8009610:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	32b0      	adds	r2, #176	; 0xb0
 800961c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009620:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d101      	bne.n	800962c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009628:	2303      	movs	r3, #3
 800962a:	e025      	b.n	8009678 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009632:	687a      	ldr	r2, [r7, #4]
 8009634:	33b0      	adds	r3, #176	; 0xb0
 8009636:	009b      	lsls	r3, r3, #2
 8009638:	4413      	add	r3, r2
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d01a      	beq.n	8009676 <USBD_CDC_EP0_RxReady+0x6c>
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009646:	2bff      	cmp	r3, #255	; 0xff
 8009648:	d015      	beq.n	8009676 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	33b0      	adds	r3, #176	; 0xb0
 8009654:	009b      	lsls	r3, r3, #2
 8009656:	4413      	add	r3, r2
 8009658:	685b      	ldr	r3, [r3, #4]
 800965a:	689b      	ldr	r3, [r3, #8]
 800965c:	68fa      	ldr	r2, [r7, #12]
 800965e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009662:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009664:	68fa      	ldr	r2, [r7, #12]
 8009666:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800966a:	b292      	uxth	r2, r2
 800966c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	22ff      	movs	r2, #255	; 0xff
 8009672:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009676:	2300      	movs	r3, #0
}
 8009678:	4618      	mov	r0, r3
 800967a:	3710      	adds	r7, #16
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}

08009680 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b086      	sub	sp, #24
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009688:	2182      	movs	r1, #130	; 0x82
 800968a:	4818      	ldr	r0, [pc, #96]	; (80096ec <USBD_CDC_GetFSCfgDesc+0x6c>)
 800968c:	f000 fd09 	bl	800a0a2 <USBD_GetEpDesc>
 8009690:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009692:	2101      	movs	r1, #1
 8009694:	4815      	ldr	r0, [pc, #84]	; (80096ec <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009696:	f000 fd04 	bl	800a0a2 <USBD_GetEpDesc>
 800969a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800969c:	2181      	movs	r1, #129	; 0x81
 800969e:	4813      	ldr	r0, [pc, #76]	; (80096ec <USBD_CDC_GetFSCfgDesc+0x6c>)
 80096a0:	f000 fcff 	bl	800a0a2 <USBD_GetEpDesc>
 80096a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d002      	beq.n	80096b2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	2210      	movs	r2, #16
 80096b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d006      	beq.n	80096c6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	2200      	movs	r2, #0
 80096bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096c0:	711a      	strb	r2, [r3, #4]
 80096c2:	2200      	movs	r2, #0
 80096c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d006      	beq.n	80096da <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2200      	movs	r2, #0
 80096d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096d4:	711a      	strb	r2, [r3, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2243      	movs	r2, #67	; 0x43
 80096de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80096e0:	4b02      	ldr	r3, [pc, #8]	; (80096ec <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3718      	adds	r7, #24
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}
 80096ea:	bf00      	nop
 80096ec:	20000060 	.word	0x20000060

080096f0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b086      	sub	sp, #24
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80096f8:	2182      	movs	r1, #130	; 0x82
 80096fa:	4818      	ldr	r0, [pc, #96]	; (800975c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80096fc:	f000 fcd1 	bl	800a0a2 <USBD_GetEpDesc>
 8009700:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009702:	2101      	movs	r1, #1
 8009704:	4815      	ldr	r0, [pc, #84]	; (800975c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009706:	f000 fccc 	bl	800a0a2 <USBD_GetEpDesc>
 800970a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800970c:	2181      	movs	r1, #129	; 0x81
 800970e:	4813      	ldr	r0, [pc, #76]	; (800975c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009710:	f000 fcc7 	bl	800a0a2 <USBD_GetEpDesc>
 8009714:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d002      	beq.n	8009722 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	2210      	movs	r2, #16
 8009720:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009722:	693b      	ldr	r3, [r7, #16]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d006      	beq.n	8009736 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	2200      	movs	r2, #0
 800972c:	711a      	strb	r2, [r3, #4]
 800972e:	2200      	movs	r2, #0
 8009730:	f042 0202 	orr.w	r2, r2, #2
 8009734:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d006      	beq.n	800974a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2200      	movs	r2, #0
 8009740:	711a      	strb	r2, [r3, #4]
 8009742:	2200      	movs	r2, #0
 8009744:	f042 0202 	orr.w	r2, r2, #2
 8009748:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2243      	movs	r2, #67	; 0x43
 800974e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009750:	4b02      	ldr	r3, [pc, #8]	; (800975c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009752:	4618      	mov	r0, r3
 8009754:	3718      	adds	r7, #24
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
 800975a:	bf00      	nop
 800975c:	20000060 	.word	0x20000060

08009760 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b086      	sub	sp, #24
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009768:	2182      	movs	r1, #130	; 0x82
 800976a:	4818      	ldr	r0, [pc, #96]	; (80097cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800976c:	f000 fc99 	bl	800a0a2 <USBD_GetEpDesc>
 8009770:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009772:	2101      	movs	r1, #1
 8009774:	4815      	ldr	r0, [pc, #84]	; (80097cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009776:	f000 fc94 	bl	800a0a2 <USBD_GetEpDesc>
 800977a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800977c:	2181      	movs	r1, #129	; 0x81
 800977e:	4813      	ldr	r0, [pc, #76]	; (80097cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009780:	f000 fc8f 	bl	800a0a2 <USBD_GetEpDesc>
 8009784:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d002      	beq.n	8009792 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	2210      	movs	r2, #16
 8009790:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d006      	beq.n	80097a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	2200      	movs	r2, #0
 800979c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097a0:	711a      	strb	r2, [r3, #4]
 80097a2:	2200      	movs	r2, #0
 80097a4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d006      	beq.n	80097ba <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2200      	movs	r2, #0
 80097b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097b4:	711a      	strb	r2, [r3, #4]
 80097b6:	2200      	movs	r2, #0
 80097b8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2243      	movs	r2, #67	; 0x43
 80097be:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80097c0:	4b02      	ldr	r3, [pc, #8]	; (80097cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3718      	adds	r7, #24
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	bf00      	nop
 80097cc:	20000060 	.word	0x20000060

080097d0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b083      	sub	sp, #12
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	220a      	movs	r2, #10
 80097dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80097de:	4b03      	ldr	r3, [pc, #12]	; (80097ec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	370c      	adds	r7, #12
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr
 80097ec:	2000001c 	.word	0x2000001c

080097f0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b083      	sub	sp, #12
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
 80097f8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d101      	bne.n	8009804 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009800:	2303      	movs	r3, #3
 8009802:	e009      	b.n	8009818 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800980a:	687a      	ldr	r2, [r7, #4]
 800980c:	33b0      	adds	r3, #176	; 0xb0
 800980e:	009b      	lsls	r3, r3, #2
 8009810:	4413      	add	r3, r2
 8009812:	683a      	ldr	r2, [r7, #0]
 8009814:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009816:	2300      	movs	r3, #0
}
 8009818:	4618      	mov	r0, r3
 800981a:	370c      	adds	r7, #12
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr

08009824 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009824:	b480      	push	{r7}
 8009826:	b087      	sub	sp, #28
 8009828:	af00      	add	r7, sp, #0
 800982a:	60f8      	str	r0, [r7, #12]
 800982c:	60b9      	str	r1, [r7, #8]
 800982e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	32b0      	adds	r2, #176	; 0xb0
 800983a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800983e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d101      	bne.n	800984a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009846:	2303      	movs	r3, #3
 8009848:	e008      	b.n	800985c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	68ba      	ldr	r2, [r7, #8]
 800984e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	687a      	ldr	r2, [r7, #4]
 8009856:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800985a:	2300      	movs	r3, #0
}
 800985c:	4618      	mov	r0, r3
 800985e:	371c      	adds	r7, #28
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009868:	b480      	push	{r7}
 800986a:	b085      	sub	sp, #20
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	32b0      	adds	r2, #176	; 0xb0
 800987c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009880:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d101      	bne.n	800988c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009888:	2303      	movs	r3, #3
 800988a:	e004      	b.n	8009896 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	683a      	ldr	r2, [r7, #0]
 8009890:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009894:	2300      	movs	r3, #0
}
 8009896:	4618      	mov	r0, r3
 8009898:	3714      	adds	r7, #20
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr
	...

080098a4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b084      	sub	sp, #16
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	32b0      	adds	r2, #176	; 0xb0
 80098b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098ba:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	32b0      	adds	r2, #176	; 0xb0
 80098c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d101      	bne.n	80098d2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80098ce:	2303      	movs	r3, #3
 80098d0:	e018      	b.n	8009904 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	7c1b      	ldrb	r3, [r3, #16]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d10a      	bne.n	80098f0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80098da:	4b0c      	ldr	r3, [pc, #48]	; (800990c <USBD_CDC_ReceivePacket+0x68>)
 80098dc:	7819      	ldrb	r1, [r3, #0]
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80098e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f001 ffd1 	bl	800b890 <USBD_LL_PrepareReceive>
 80098ee:	e008      	b.n	8009902 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80098f0:	4b06      	ldr	r3, [pc, #24]	; (800990c <USBD_CDC_ReceivePacket+0x68>)
 80098f2:	7819      	ldrb	r1, [r3, #0]
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80098fa:	2340      	movs	r3, #64	; 0x40
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f001 ffc7 	bl	800b890 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009902:	2300      	movs	r3, #0
}
 8009904:	4618      	mov	r0, r3
 8009906:	3710      	adds	r7, #16
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}
 800990c:	200000a4 	.word	0x200000a4

08009910 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b086      	sub	sp, #24
 8009914:	af00      	add	r7, sp, #0
 8009916:	60f8      	str	r0, [r7, #12]
 8009918:	60b9      	str	r1, [r7, #8]
 800991a:	4613      	mov	r3, r2
 800991c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d101      	bne.n	8009928 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009924:	2303      	movs	r3, #3
 8009926:	e01f      	b.n	8009968 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	2200      	movs	r2, #0
 800992c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2200      	movs	r2, #0
 8009934:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	2200      	movs	r2, #0
 800993c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d003      	beq.n	800994e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	68ba      	ldr	r2, [r7, #8]
 800994a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2201      	movs	r2, #1
 8009952:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	79fa      	ldrb	r2, [r7, #7]
 800995a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800995c:	68f8      	ldr	r0, [r7, #12]
 800995e:	f001 fe41 	bl	800b5e4 <USBD_LL_Init>
 8009962:	4603      	mov	r3, r0
 8009964:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009966:	7dfb      	ldrb	r3, [r7, #23]
}
 8009968:	4618      	mov	r0, r3
 800996a:	3718      	adds	r7, #24
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}

08009970 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b084      	sub	sp, #16
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800997a:	2300      	movs	r3, #0
 800997c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d101      	bne.n	8009988 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009984:	2303      	movs	r3, #3
 8009986:	e025      	b.n	80099d4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	683a      	ldr	r2, [r7, #0]
 800998c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	32ae      	adds	r2, #174	; 0xae
 800999a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800999e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d00f      	beq.n	80099c4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	32ae      	adds	r2, #174	; 0xae
 80099ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099b4:	f107 020e 	add.w	r2, r7, #14
 80099b8:	4610      	mov	r0, r2
 80099ba:	4798      	blx	r3
 80099bc:	4602      	mov	r2, r0
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80099ca:	1c5a      	adds	r2, r3, #1
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80099d2:	2300      	movs	r3, #0
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3710      	adds	r7, #16
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b082      	sub	sp, #8
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f001 fe49 	bl	800b67c <USBD_LL_Start>
 80099ea:	4603      	mov	r3, r0
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3708      	adds	r7, #8
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b083      	sub	sp, #12
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80099fc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	370c      	adds	r7, #12
 8009a02:	46bd      	mov	sp, r7
 8009a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a08:	4770      	bx	lr

08009a0a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a0a:	b580      	push	{r7, lr}
 8009a0c:	b084      	sub	sp, #16
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
 8009a12:	460b      	mov	r3, r1
 8009a14:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a16:	2300      	movs	r3, #0
 8009a18:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d009      	beq.n	8009a38 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	78fa      	ldrb	r2, [r7, #3]
 8009a2e:	4611      	mov	r1, r2
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	4798      	blx	r3
 8009a34:	4603      	mov	r3, r0
 8009a36:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3710      	adds	r7, #16
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}

08009a42 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a42:	b580      	push	{r7, lr}
 8009a44:	b084      	sub	sp, #16
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
 8009a4a:	460b      	mov	r3, r1
 8009a4c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	78fa      	ldrb	r2, [r7, #3]
 8009a5c:	4611      	mov	r1, r2
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	4798      	blx	r3
 8009a62:	4603      	mov	r3, r0
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d001      	beq.n	8009a6c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009a68:	2303      	movs	r3, #3
 8009a6a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3710      	adds	r7, #16
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}

08009a76 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009a76:	b580      	push	{r7, lr}
 8009a78:	b084      	sub	sp, #16
 8009a7a:	af00      	add	r7, sp, #0
 8009a7c:	6078      	str	r0, [r7, #4]
 8009a7e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009a86:	6839      	ldr	r1, [r7, #0]
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f001 f932 	bl	800acf2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2201      	movs	r2, #1
 8009a92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009a9c:	461a      	mov	r2, r3
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009aaa:	f003 031f 	and.w	r3, r3, #31
 8009aae:	2b02      	cmp	r3, #2
 8009ab0:	d01a      	beq.n	8009ae8 <USBD_LL_SetupStage+0x72>
 8009ab2:	2b02      	cmp	r3, #2
 8009ab4:	d822      	bhi.n	8009afc <USBD_LL_SetupStage+0x86>
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d002      	beq.n	8009ac0 <USBD_LL_SetupStage+0x4a>
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	d00a      	beq.n	8009ad4 <USBD_LL_SetupStage+0x5e>
 8009abe:	e01d      	b.n	8009afc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009ac6:	4619      	mov	r1, r3
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f000 fb5f 	bl	800a18c <USBD_StdDevReq>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	73fb      	strb	r3, [r7, #15]
      break;
 8009ad2:	e020      	b.n	8009b16 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009ada:	4619      	mov	r1, r3
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f000 fbc7 	bl	800a270 <USBD_StdItfReq>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	73fb      	strb	r3, [r7, #15]
      break;
 8009ae6:	e016      	b.n	8009b16 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009aee:	4619      	mov	r1, r3
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 fc29 	bl	800a348 <USBD_StdEPReq>
 8009af6:	4603      	mov	r3, r0
 8009af8:	73fb      	strb	r3, [r7, #15]
      break;
 8009afa:	e00c      	b.n	8009b16 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009b02:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	4619      	mov	r1, r3
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f001 fe16 	bl	800b73c <USBD_LL_StallEP>
 8009b10:	4603      	mov	r3, r0
 8009b12:	73fb      	strb	r3, [r7, #15]
      break;
 8009b14:	bf00      	nop
  }

  return ret;
 8009b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3710      	adds	r7, #16
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}

08009b20 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b086      	sub	sp, #24
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	60f8      	str	r0, [r7, #12]
 8009b28:	460b      	mov	r3, r1
 8009b2a:	607a      	str	r2, [r7, #4]
 8009b2c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009b32:	7afb      	ldrb	r3, [r7, #11]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d16e      	bne.n	8009c16 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009b3e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009b46:	2b03      	cmp	r3, #3
 8009b48:	f040 8098 	bne.w	8009c7c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	689a      	ldr	r2, [r3, #8]
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	68db      	ldr	r3, [r3, #12]
 8009b54:	429a      	cmp	r2, r3
 8009b56:	d913      	bls.n	8009b80 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	689a      	ldr	r2, [r3, #8]
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	68db      	ldr	r3, [r3, #12]
 8009b60:	1ad2      	subs	r2, r2, r3
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	68da      	ldr	r2, [r3, #12]
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	689b      	ldr	r3, [r3, #8]
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	bf28      	it	cs
 8009b72:	4613      	movcs	r3, r2
 8009b74:	461a      	mov	r2, r3
 8009b76:	6879      	ldr	r1, [r7, #4]
 8009b78:	68f8      	ldr	r0, [r7, #12]
 8009b7a:	f001 f9ae 	bl	800aeda <USBD_CtlContinueRx>
 8009b7e:	e07d      	b.n	8009c7c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009b86:	f003 031f 	and.w	r3, r3, #31
 8009b8a:	2b02      	cmp	r3, #2
 8009b8c:	d014      	beq.n	8009bb8 <USBD_LL_DataOutStage+0x98>
 8009b8e:	2b02      	cmp	r3, #2
 8009b90:	d81d      	bhi.n	8009bce <USBD_LL_DataOutStage+0xae>
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d002      	beq.n	8009b9c <USBD_LL_DataOutStage+0x7c>
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d003      	beq.n	8009ba2 <USBD_LL_DataOutStage+0x82>
 8009b9a:	e018      	b.n	8009bce <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	75bb      	strb	r3, [r7, #22]
            break;
 8009ba0:	e018      	b.n	8009bd4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009ba8:	b2db      	uxtb	r3, r3
 8009baa:	4619      	mov	r1, r3
 8009bac:	68f8      	ldr	r0, [r7, #12]
 8009bae:	f000 fa5e 	bl	800a06e <USBD_CoreFindIF>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	75bb      	strb	r3, [r7, #22]
            break;
 8009bb6:	e00d      	b.n	8009bd4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009bbe:	b2db      	uxtb	r3, r3
 8009bc0:	4619      	mov	r1, r3
 8009bc2:	68f8      	ldr	r0, [r7, #12]
 8009bc4:	f000 fa60 	bl	800a088 <USBD_CoreFindEP>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	75bb      	strb	r3, [r7, #22]
            break;
 8009bcc:	e002      	b.n	8009bd4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	75bb      	strb	r3, [r7, #22]
            break;
 8009bd2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009bd4:	7dbb      	ldrb	r3, [r7, #22]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d119      	bne.n	8009c0e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009be0:	b2db      	uxtb	r3, r3
 8009be2:	2b03      	cmp	r3, #3
 8009be4:	d113      	bne.n	8009c0e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009be6:	7dba      	ldrb	r2, [r7, #22]
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	32ae      	adds	r2, #174	; 0xae
 8009bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bf0:	691b      	ldr	r3, [r3, #16]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d00b      	beq.n	8009c0e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009bf6:	7dba      	ldrb	r2, [r7, #22]
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009bfe:	7dba      	ldrb	r2, [r7, #22]
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	32ae      	adds	r2, #174	; 0xae
 8009c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c08:	691b      	ldr	r3, [r3, #16]
 8009c0a:	68f8      	ldr	r0, [r7, #12]
 8009c0c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009c0e:	68f8      	ldr	r0, [r7, #12]
 8009c10:	f001 f974 	bl	800aefc <USBD_CtlSendStatus>
 8009c14:	e032      	b.n	8009c7c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009c16:	7afb      	ldrb	r3, [r7, #11]
 8009c18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c1c:	b2db      	uxtb	r3, r3
 8009c1e:	4619      	mov	r1, r3
 8009c20:	68f8      	ldr	r0, [r7, #12]
 8009c22:	f000 fa31 	bl	800a088 <USBD_CoreFindEP>
 8009c26:	4603      	mov	r3, r0
 8009c28:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009c2a:	7dbb      	ldrb	r3, [r7, #22]
 8009c2c:	2bff      	cmp	r3, #255	; 0xff
 8009c2e:	d025      	beq.n	8009c7c <USBD_LL_DataOutStage+0x15c>
 8009c30:	7dbb      	ldrb	r3, [r7, #22]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d122      	bne.n	8009c7c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	2b03      	cmp	r3, #3
 8009c40:	d117      	bne.n	8009c72 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009c42:	7dba      	ldrb	r2, [r7, #22]
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	32ae      	adds	r2, #174	; 0xae
 8009c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c4c:	699b      	ldr	r3, [r3, #24]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d00f      	beq.n	8009c72 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009c52:	7dba      	ldrb	r2, [r7, #22]
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009c5a:	7dba      	ldrb	r2, [r7, #22]
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	32ae      	adds	r2, #174	; 0xae
 8009c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c64:	699b      	ldr	r3, [r3, #24]
 8009c66:	7afa      	ldrb	r2, [r7, #11]
 8009c68:	4611      	mov	r1, r2
 8009c6a:	68f8      	ldr	r0, [r7, #12]
 8009c6c:	4798      	blx	r3
 8009c6e:	4603      	mov	r3, r0
 8009c70:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009c72:	7dfb      	ldrb	r3, [r7, #23]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d001      	beq.n	8009c7c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009c78:	7dfb      	ldrb	r3, [r7, #23]
 8009c7a:	e000      	b.n	8009c7e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009c7c:	2300      	movs	r3, #0
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3718      	adds	r7, #24
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}

08009c86 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009c86:	b580      	push	{r7, lr}
 8009c88:	b086      	sub	sp, #24
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	60f8      	str	r0, [r7, #12]
 8009c8e:	460b      	mov	r3, r1
 8009c90:	607a      	str	r2, [r7, #4]
 8009c92:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009c94:	7afb      	ldrb	r3, [r7, #11]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d16f      	bne.n	8009d7a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	3314      	adds	r3, #20
 8009c9e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009ca6:	2b02      	cmp	r3, #2
 8009ca8:	d15a      	bne.n	8009d60 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	689a      	ldr	r2, [r3, #8]
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	68db      	ldr	r3, [r3, #12]
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d914      	bls.n	8009ce0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	689a      	ldr	r2, [r3, #8]
 8009cba:	693b      	ldr	r3, [r7, #16]
 8009cbc:	68db      	ldr	r3, [r3, #12]
 8009cbe:	1ad2      	subs	r2, r2, r3
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	689b      	ldr	r3, [r3, #8]
 8009cc8:	461a      	mov	r2, r3
 8009cca:	6879      	ldr	r1, [r7, #4]
 8009ccc:	68f8      	ldr	r0, [r7, #12]
 8009cce:	f001 f8d6 	bl	800ae7e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	2100      	movs	r1, #0
 8009cd8:	68f8      	ldr	r0, [r7, #12]
 8009cda:	f001 fdd9 	bl	800b890 <USBD_LL_PrepareReceive>
 8009cde:	e03f      	b.n	8009d60 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	68da      	ldr	r2, [r3, #12]
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	689b      	ldr	r3, [r3, #8]
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d11c      	bne.n	8009d26 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	685a      	ldr	r2, [r3, #4]
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	d316      	bcc.n	8009d26 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	685a      	ldr	r2, [r3, #4]
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009d02:	429a      	cmp	r2, r3
 8009d04:	d20f      	bcs.n	8009d26 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009d06:	2200      	movs	r2, #0
 8009d08:	2100      	movs	r1, #0
 8009d0a:	68f8      	ldr	r0, [r7, #12]
 8009d0c:	f001 f8b7 	bl	800ae7e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	2200      	movs	r2, #0
 8009d14:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009d18:	2300      	movs	r3, #0
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	2100      	movs	r1, #0
 8009d1e:	68f8      	ldr	r0, [r7, #12]
 8009d20:	f001 fdb6 	bl	800b890 <USBD_LL_PrepareReceive>
 8009d24:	e01c      	b.n	8009d60 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d2c:	b2db      	uxtb	r3, r3
 8009d2e:	2b03      	cmp	r3, #3
 8009d30:	d10f      	bne.n	8009d52 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d38:	68db      	ldr	r3, [r3, #12]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d009      	beq.n	8009d52 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	2200      	movs	r2, #0
 8009d42:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d4c:	68db      	ldr	r3, [r3, #12]
 8009d4e:	68f8      	ldr	r0, [r7, #12]
 8009d50:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d52:	2180      	movs	r1, #128	; 0x80
 8009d54:	68f8      	ldr	r0, [r7, #12]
 8009d56:	f001 fcf1 	bl	800b73c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009d5a:	68f8      	ldr	r0, [r7, #12]
 8009d5c:	f001 f8e1 	bl	800af22 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d03a      	beq.n	8009de0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009d6a:	68f8      	ldr	r0, [r7, #12]
 8009d6c:	f7ff fe42 	bl	80099f4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	2200      	movs	r2, #0
 8009d74:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009d78:	e032      	b.n	8009de0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009d7a:	7afb      	ldrb	r3, [r7, #11]
 8009d7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009d80:	b2db      	uxtb	r3, r3
 8009d82:	4619      	mov	r1, r3
 8009d84:	68f8      	ldr	r0, [r7, #12]
 8009d86:	f000 f97f 	bl	800a088 <USBD_CoreFindEP>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009d8e:	7dfb      	ldrb	r3, [r7, #23]
 8009d90:	2bff      	cmp	r3, #255	; 0xff
 8009d92:	d025      	beq.n	8009de0 <USBD_LL_DataInStage+0x15a>
 8009d94:	7dfb      	ldrb	r3, [r7, #23]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d122      	bne.n	8009de0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009da0:	b2db      	uxtb	r3, r3
 8009da2:	2b03      	cmp	r3, #3
 8009da4:	d11c      	bne.n	8009de0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009da6:	7dfa      	ldrb	r2, [r7, #23]
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	32ae      	adds	r2, #174	; 0xae
 8009dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009db0:	695b      	ldr	r3, [r3, #20]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d014      	beq.n	8009de0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009db6:	7dfa      	ldrb	r2, [r7, #23]
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009dbe:	7dfa      	ldrb	r2, [r7, #23]
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	32ae      	adds	r2, #174	; 0xae
 8009dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dc8:	695b      	ldr	r3, [r3, #20]
 8009dca:	7afa      	ldrb	r2, [r7, #11]
 8009dcc:	4611      	mov	r1, r2
 8009dce:	68f8      	ldr	r0, [r7, #12]
 8009dd0:	4798      	blx	r3
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009dd6:	7dbb      	ldrb	r3, [r7, #22]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d001      	beq.n	8009de0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009ddc:	7dbb      	ldrb	r3, [r7, #22]
 8009dde:	e000      	b.n	8009de2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009de0:	2300      	movs	r3, #0
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3718      	adds	r7, #24
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}

08009dea <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009dea:	b580      	push	{r7, lr}
 8009dec:	b084      	sub	sp, #16
 8009dee:	af00      	add	r7, sp, #0
 8009df0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009df2:	2300      	movs	r3, #0
 8009df4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2201      	movs	r2, #1
 8009dfa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2200      	movs	r2, #0
 8009e02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d014      	beq.n	8009e50 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d00e      	beq.n	8009e50 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	687a      	ldr	r2, [r7, #4]
 8009e3c:	6852      	ldr	r2, [r2, #4]
 8009e3e:	b2d2      	uxtb	r2, r2
 8009e40:	4611      	mov	r1, r2
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	4798      	blx	r3
 8009e46:	4603      	mov	r3, r0
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d001      	beq.n	8009e50 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009e4c:	2303      	movs	r3, #3
 8009e4e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009e50:	2340      	movs	r3, #64	; 0x40
 8009e52:	2200      	movs	r2, #0
 8009e54:	2100      	movs	r1, #0
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f001 fc2b 	bl	800b6b2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2201      	movs	r2, #1
 8009e60:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2240      	movs	r2, #64	; 0x40
 8009e68:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009e6c:	2340      	movs	r3, #64	; 0x40
 8009e6e:	2200      	movs	r2, #0
 8009e70:	2180      	movs	r1, #128	; 0x80
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f001 fc1d 	bl	800b6b2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2240      	movs	r2, #64	; 0x40
 8009e82:	621a      	str	r2, [r3, #32]

  return ret;
 8009e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3710      	adds	r7, #16
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}

08009e8e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009e8e:	b480      	push	{r7}
 8009e90:	b083      	sub	sp, #12
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
 8009e96:	460b      	mov	r3, r1
 8009e98:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	78fa      	ldrb	r2, [r7, #3]
 8009e9e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009ea0:	2300      	movs	r3, #0
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	370c      	adds	r7, #12
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr

08009eae <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009eae:	b480      	push	{r7}
 8009eb0:	b083      	sub	sp, #12
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ebc:	b2da      	uxtb	r2, r3
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2204      	movs	r2, #4
 8009ec8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009ecc:	2300      	movs	r3, #0
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	370c      	adds	r7, #12
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed8:	4770      	bx	lr

08009eda <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009eda:	b480      	push	{r7}
 8009edc:	b083      	sub	sp, #12
 8009ede:	af00      	add	r7, sp, #0
 8009ee0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ee8:	b2db      	uxtb	r3, r3
 8009eea:	2b04      	cmp	r3, #4
 8009eec:	d106      	bne.n	8009efc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009ef4:	b2da      	uxtb	r2, r3
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009efc:	2300      	movs	r3, #0
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	370c      	adds	r7, #12
 8009f02:	46bd      	mov	sp, r7
 8009f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f08:	4770      	bx	lr

08009f0a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009f0a:	b580      	push	{r7, lr}
 8009f0c:	b082      	sub	sp, #8
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f18:	b2db      	uxtb	r3, r3
 8009f1a:	2b03      	cmp	r3, #3
 8009f1c:	d110      	bne.n	8009f40 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d00b      	beq.n	8009f40 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f2e:	69db      	ldr	r3, [r3, #28]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d005      	beq.n	8009f40 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f3a:	69db      	ldr	r3, [r3, #28]
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009f40:	2300      	movs	r3, #0
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3708      	adds	r7, #8
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}

08009f4a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009f4a:	b580      	push	{r7, lr}
 8009f4c:	b082      	sub	sp, #8
 8009f4e:	af00      	add	r7, sp, #0
 8009f50:	6078      	str	r0, [r7, #4]
 8009f52:	460b      	mov	r3, r1
 8009f54:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	32ae      	adds	r2, #174	; 0xae
 8009f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d101      	bne.n	8009f6c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009f68:	2303      	movs	r3, #3
 8009f6a:	e01c      	b.n	8009fa6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f72:	b2db      	uxtb	r3, r3
 8009f74:	2b03      	cmp	r3, #3
 8009f76:	d115      	bne.n	8009fa4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	32ae      	adds	r2, #174	; 0xae
 8009f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f86:	6a1b      	ldr	r3, [r3, #32]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d00b      	beq.n	8009fa4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	32ae      	adds	r2, #174	; 0xae
 8009f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f9a:	6a1b      	ldr	r3, [r3, #32]
 8009f9c:	78fa      	ldrb	r2, [r7, #3]
 8009f9e:	4611      	mov	r1, r2
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009fa4:	2300      	movs	r3, #0
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3708      	adds	r7, #8
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}

08009fae <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009fae:	b580      	push	{r7, lr}
 8009fb0:	b082      	sub	sp, #8
 8009fb2:	af00      	add	r7, sp, #0
 8009fb4:	6078      	str	r0, [r7, #4]
 8009fb6:	460b      	mov	r3, r1
 8009fb8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	32ae      	adds	r2, #174	; 0xae
 8009fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d101      	bne.n	8009fd0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009fcc:	2303      	movs	r3, #3
 8009fce:	e01c      	b.n	800a00a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fd6:	b2db      	uxtb	r3, r3
 8009fd8:	2b03      	cmp	r3, #3
 8009fda:	d115      	bne.n	800a008 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	32ae      	adds	r2, #174	; 0xae
 8009fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d00b      	beq.n	800a008 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	32ae      	adds	r2, #174	; 0xae
 8009ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a000:	78fa      	ldrb	r2, [r7, #3]
 800a002:	4611      	mov	r1, r2
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a008:	2300      	movs	r3, #0
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3708      	adds	r7, #8
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}

0800a012 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a012:	b480      	push	{r7}
 800a014:	b083      	sub	sp, #12
 800a016:	af00      	add	r7, sp, #0
 800a018:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a01a:	2300      	movs	r3, #0
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	370c      	adds	r7, #12
 800a020:	46bd      	mov	sp, r7
 800a022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a026:	4770      	bx	lr

0800a028 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b084      	sub	sp, #16
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a030:	2300      	movs	r3, #0
 800a032:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2201      	movs	r2, #1
 800a038:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a042:	2b00      	cmp	r3, #0
 800a044:	d00e      	beq.n	800a064 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	687a      	ldr	r2, [r7, #4]
 800a050:	6852      	ldr	r2, [r2, #4]
 800a052:	b2d2      	uxtb	r2, r2
 800a054:	4611      	mov	r1, r2
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	4798      	blx	r3
 800a05a:	4603      	mov	r3, r0
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d001      	beq.n	800a064 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a060:	2303      	movs	r3, #3
 800a062:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a064:	7bfb      	ldrb	r3, [r7, #15]
}
 800a066:	4618      	mov	r0, r3
 800a068:	3710      	adds	r7, #16
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}

0800a06e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a06e:	b480      	push	{r7}
 800a070:	b083      	sub	sp, #12
 800a072:	af00      	add	r7, sp, #0
 800a074:	6078      	str	r0, [r7, #4]
 800a076:	460b      	mov	r3, r1
 800a078:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a07a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	370c      	adds	r7, #12
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr

0800a088 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a088:	b480      	push	{r7}
 800a08a:	b083      	sub	sp, #12
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
 800a090:	460b      	mov	r3, r1
 800a092:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a094:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a096:	4618      	mov	r0, r3
 800a098:	370c      	adds	r7, #12
 800a09a:	46bd      	mov	sp, r7
 800a09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a0:	4770      	bx	lr

0800a0a2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a0a2:	b580      	push	{r7, lr}
 800a0a4:	b086      	sub	sp, #24
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	6078      	str	r0, [r7, #4]
 800a0aa:	460b      	mov	r3, r1
 800a0ac:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	885b      	ldrh	r3, [r3, #2]
 800a0be:	b29a      	uxth	r2, r3
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	781b      	ldrb	r3, [r3, #0]
 800a0c4:	b29b      	uxth	r3, r3
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d920      	bls.n	800a10c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	781b      	ldrb	r3, [r3, #0]
 800a0ce:	b29b      	uxth	r3, r3
 800a0d0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a0d2:	e013      	b.n	800a0fc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a0d4:	f107 030a 	add.w	r3, r7, #10
 800a0d8:	4619      	mov	r1, r3
 800a0da:	6978      	ldr	r0, [r7, #20]
 800a0dc:	f000 f81b 	bl	800a116 <USBD_GetNextDesc>
 800a0e0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	785b      	ldrb	r3, [r3, #1]
 800a0e6:	2b05      	cmp	r3, #5
 800a0e8:	d108      	bne.n	800a0fc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	789b      	ldrb	r3, [r3, #2]
 800a0f2:	78fa      	ldrb	r2, [r7, #3]
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	d008      	beq.n	800a10a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	885b      	ldrh	r3, [r3, #2]
 800a100:	b29a      	uxth	r2, r3
 800a102:	897b      	ldrh	r3, [r7, #10]
 800a104:	429a      	cmp	r2, r3
 800a106:	d8e5      	bhi.n	800a0d4 <USBD_GetEpDesc+0x32>
 800a108:	e000      	b.n	800a10c <USBD_GetEpDesc+0x6a>
          break;
 800a10a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a10c:	693b      	ldr	r3, [r7, #16]
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3718      	adds	r7, #24
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}

0800a116 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a116:	b480      	push	{r7}
 800a118:	b085      	sub	sp, #20
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	6078      	str	r0, [r7, #4]
 800a11e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	881a      	ldrh	r2, [r3, #0]
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	781b      	ldrb	r3, [r3, #0]
 800a12c:	b29b      	uxth	r3, r3
 800a12e:	4413      	add	r3, r2
 800a130:	b29a      	uxth	r2, r3
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	781b      	ldrb	r3, [r3, #0]
 800a13a:	461a      	mov	r2, r3
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	4413      	add	r3, r2
 800a140:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a142:	68fb      	ldr	r3, [r7, #12]
}
 800a144:	4618      	mov	r0, r3
 800a146:	3714      	adds	r7, #20
 800a148:	46bd      	mov	sp, r7
 800a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14e:	4770      	bx	lr

0800a150 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a150:	b480      	push	{r7}
 800a152:	b087      	sub	sp, #28
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	781b      	ldrb	r3, [r3, #0]
 800a160:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	3301      	adds	r3, #1
 800a166:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a168:	697b      	ldr	r3, [r7, #20]
 800a16a:	781b      	ldrb	r3, [r3, #0]
 800a16c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a16e:	8a3b      	ldrh	r3, [r7, #16]
 800a170:	021b      	lsls	r3, r3, #8
 800a172:	b21a      	sxth	r2, r3
 800a174:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a178:	4313      	orrs	r3, r2
 800a17a:	b21b      	sxth	r3, r3
 800a17c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a17e:	89fb      	ldrh	r3, [r7, #14]
}
 800a180:	4618      	mov	r0, r3
 800a182:	371c      	adds	r7, #28
 800a184:	46bd      	mov	sp, r7
 800a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18a:	4770      	bx	lr

0800a18c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b084      	sub	sp, #16
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a196:	2300      	movs	r3, #0
 800a198:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a1a2:	2b40      	cmp	r3, #64	; 0x40
 800a1a4:	d005      	beq.n	800a1b2 <USBD_StdDevReq+0x26>
 800a1a6:	2b40      	cmp	r3, #64	; 0x40
 800a1a8:	d857      	bhi.n	800a25a <USBD_StdDevReq+0xce>
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d00f      	beq.n	800a1ce <USBD_StdDevReq+0x42>
 800a1ae:	2b20      	cmp	r3, #32
 800a1b0:	d153      	bne.n	800a25a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	32ae      	adds	r2, #174	; 0xae
 800a1bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1c0:	689b      	ldr	r3, [r3, #8]
 800a1c2:	6839      	ldr	r1, [r7, #0]
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	4798      	blx	r3
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	73fb      	strb	r3, [r7, #15]
      break;
 800a1cc:	e04a      	b.n	800a264 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	785b      	ldrb	r3, [r3, #1]
 800a1d2:	2b09      	cmp	r3, #9
 800a1d4:	d83b      	bhi.n	800a24e <USBD_StdDevReq+0xc2>
 800a1d6:	a201      	add	r2, pc, #4	; (adr r2, 800a1dc <USBD_StdDevReq+0x50>)
 800a1d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1dc:	0800a231 	.word	0x0800a231
 800a1e0:	0800a245 	.word	0x0800a245
 800a1e4:	0800a24f 	.word	0x0800a24f
 800a1e8:	0800a23b 	.word	0x0800a23b
 800a1ec:	0800a24f 	.word	0x0800a24f
 800a1f0:	0800a20f 	.word	0x0800a20f
 800a1f4:	0800a205 	.word	0x0800a205
 800a1f8:	0800a24f 	.word	0x0800a24f
 800a1fc:	0800a227 	.word	0x0800a227
 800a200:	0800a219 	.word	0x0800a219
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a204:	6839      	ldr	r1, [r7, #0]
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f000 fa3c 	bl	800a684 <USBD_GetDescriptor>
          break;
 800a20c:	e024      	b.n	800a258 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a20e:	6839      	ldr	r1, [r7, #0]
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f000 fbcb 	bl	800a9ac <USBD_SetAddress>
          break;
 800a216:	e01f      	b.n	800a258 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a218:	6839      	ldr	r1, [r7, #0]
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f000 fc0a 	bl	800aa34 <USBD_SetConfig>
 800a220:	4603      	mov	r3, r0
 800a222:	73fb      	strb	r3, [r7, #15]
          break;
 800a224:	e018      	b.n	800a258 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a226:	6839      	ldr	r1, [r7, #0]
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f000 fcad 	bl	800ab88 <USBD_GetConfig>
          break;
 800a22e:	e013      	b.n	800a258 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a230:	6839      	ldr	r1, [r7, #0]
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f000 fcde 	bl	800abf4 <USBD_GetStatus>
          break;
 800a238:	e00e      	b.n	800a258 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a23a:	6839      	ldr	r1, [r7, #0]
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f000 fd0d 	bl	800ac5c <USBD_SetFeature>
          break;
 800a242:	e009      	b.n	800a258 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a244:	6839      	ldr	r1, [r7, #0]
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f000 fd31 	bl	800acae <USBD_ClrFeature>
          break;
 800a24c:	e004      	b.n	800a258 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a24e:	6839      	ldr	r1, [r7, #0]
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f000 fd88 	bl	800ad66 <USBD_CtlError>
          break;
 800a256:	bf00      	nop
      }
      break;
 800a258:	e004      	b.n	800a264 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a25a:	6839      	ldr	r1, [r7, #0]
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f000 fd82 	bl	800ad66 <USBD_CtlError>
      break;
 800a262:	bf00      	nop
  }

  return ret;
 800a264:	7bfb      	ldrb	r3, [r7, #15]
}
 800a266:	4618      	mov	r0, r3
 800a268:	3710      	adds	r7, #16
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}
 800a26e:	bf00      	nop

0800a270 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b084      	sub	sp, #16
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a27a:	2300      	movs	r3, #0
 800a27c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a286:	2b40      	cmp	r3, #64	; 0x40
 800a288:	d005      	beq.n	800a296 <USBD_StdItfReq+0x26>
 800a28a:	2b40      	cmp	r3, #64	; 0x40
 800a28c:	d852      	bhi.n	800a334 <USBD_StdItfReq+0xc4>
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d001      	beq.n	800a296 <USBD_StdItfReq+0x26>
 800a292:	2b20      	cmp	r3, #32
 800a294:	d14e      	bne.n	800a334 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	3b01      	subs	r3, #1
 800a2a0:	2b02      	cmp	r3, #2
 800a2a2:	d840      	bhi.n	800a326 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	889b      	ldrh	r3, [r3, #4]
 800a2a8:	b2db      	uxtb	r3, r3
 800a2aa:	2b01      	cmp	r3, #1
 800a2ac:	d836      	bhi.n	800a31c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	889b      	ldrh	r3, [r3, #4]
 800a2b2:	b2db      	uxtb	r3, r3
 800a2b4:	4619      	mov	r1, r3
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f7ff fed9 	bl	800a06e <USBD_CoreFindIF>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a2c0:	7bbb      	ldrb	r3, [r7, #14]
 800a2c2:	2bff      	cmp	r3, #255	; 0xff
 800a2c4:	d01d      	beq.n	800a302 <USBD_StdItfReq+0x92>
 800a2c6:	7bbb      	ldrb	r3, [r7, #14]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d11a      	bne.n	800a302 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a2cc:	7bba      	ldrb	r2, [r7, #14]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	32ae      	adds	r2, #174	; 0xae
 800a2d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2d6:	689b      	ldr	r3, [r3, #8]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d00f      	beq.n	800a2fc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a2dc:	7bba      	ldrb	r2, [r7, #14]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a2e4:	7bba      	ldrb	r2, [r7, #14]
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	32ae      	adds	r2, #174	; 0xae
 800a2ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2ee:	689b      	ldr	r3, [r3, #8]
 800a2f0:	6839      	ldr	r1, [r7, #0]
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	4798      	blx	r3
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a2fa:	e004      	b.n	800a306 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a2fc:	2303      	movs	r3, #3
 800a2fe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a300:	e001      	b.n	800a306 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a302:	2303      	movs	r3, #3
 800a304:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	88db      	ldrh	r3, [r3, #6]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d110      	bne.n	800a330 <USBD_StdItfReq+0xc0>
 800a30e:	7bfb      	ldrb	r3, [r7, #15]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d10d      	bne.n	800a330 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f000 fdf1 	bl	800aefc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a31a:	e009      	b.n	800a330 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a31c:	6839      	ldr	r1, [r7, #0]
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f000 fd21 	bl	800ad66 <USBD_CtlError>
          break;
 800a324:	e004      	b.n	800a330 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a326:	6839      	ldr	r1, [r7, #0]
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f000 fd1c 	bl	800ad66 <USBD_CtlError>
          break;
 800a32e:	e000      	b.n	800a332 <USBD_StdItfReq+0xc2>
          break;
 800a330:	bf00      	nop
      }
      break;
 800a332:	e004      	b.n	800a33e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a334:	6839      	ldr	r1, [r7, #0]
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f000 fd15 	bl	800ad66 <USBD_CtlError>
      break;
 800a33c:	bf00      	nop
  }

  return ret;
 800a33e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a340:	4618      	mov	r0, r3
 800a342:	3710      	adds	r7, #16
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}

0800a348 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b084      	sub	sp, #16
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a352:	2300      	movs	r3, #0
 800a354:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	889b      	ldrh	r3, [r3, #4]
 800a35a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a364:	2b40      	cmp	r3, #64	; 0x40
 800a366:	d007      	beq.n	800a378 <USBD_StdEPReq+0x30>
 800a368:	2b40      	cmp	r3, #64	; 0x40
 800a36a:	f200 817f 	bhi.w	800a66c <USBD_StdEPReq+0x324>
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d02a      	beq.n	800a3c8 <USBD_StdEPReq+0x80>
 800a372:	2b20      	cmp	r3, #32
 800a374:	f040 817a 	bne.w	800a66c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a378:	7bbb      	ldrb	r3, [r7, #14]
 800a37a:	4619      	mov	r1, r3
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f7ff fe83 	bl	800a088 <USBD_CoreFindEP>
 800a382:	4603      	mov	r3, r0
 800a384:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a386:	7b7b      	ldrb	r3, [r7, #13]
 800a388:	2bff      	cmp	r3, #255	; 0xff
 800a38a:	f000 8174 	beq.w	800a676 <USBD_StdEPReq+0x32e>
 800a38e:	7b7b      	ldrb	r3, [r7, #13]
 800a390:	2b00      	cmp	r3, #0
 800a392:	f040 8170 	bne.w	800a676 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a396:	7b7a      	ldrb	r2, [r7, #13]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a39e:	7b7a      	ldrb	r2, [r7, #13]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	32ae      	adds	r2, #174	; 0xae
 800a3a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3a8:	689b      	ldr	r3, [r3, #8]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	f000 8163 	beq.w	800a676 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a3b0:	7b7a      	ldrb	r2, [r7, #13]
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	32ae      	adds	r2, #174	; 0xae
 800a3b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3ba:	689b      	ldr	r3, [r3, #8]
 800a3bc:	6839      	ldr	r1, [r7, #0]
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	4798      	blx	r3
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a3c6:	e156      	b.n	800a676 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	785b      	ldrb	r3, [r3, #1]
 800a3cc:	2b03      	cmp	r3, #3
 800a3ce:	d008      	beq.n	800a3e2 <USBD_StdEPReq+0x9a>
 800a3d0:	2b03      	cmp	r3, #3
 800a3d2:	f300 8145 	bgt.w	800a660 <USBD_StdEPReq+0x318>
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	f000 809b 	beq.w	800a512 <USBD_StdEPReq+0x1ca>
 800a3dc:	2b01      	cmp	r3, #1
 800a3de:	d03c      	beq.n	800a45a <USBD_StdEPReq+0x112>
 800a3e0:	e13e      	b.n	800a660 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3e8:	b2db      	uxtb	r3, r3
 800a3ea:	2b02      	cmp	r3, #2
 800a3ec:	d002      	beq.n	800a3f4 <USBD_StdEPReq+0xac>
 800a3ee:	2b03      	cmp	r3, #3
 800a3f0:	d016      	beq.n	800a420 <USBD_StdEPReq+0xd8>
 800a3f2:	e02c      	b.n	800a44e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a3f4:	7bbb      	ldrb	r3, [r7, #14]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d00d      	beq.n	800a416 <USBD_StdEPReq+0xce>
 800a3fa:	7bbb      	ldrb	r3, [r7, #14]
 800a3fc:	2b80      	cmp	r3, #128	; 0x80
 800a3fe:	d00a      	beq.n	800a416 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a400:	7bbb      	ldrb	r3, [r7, #14]
 800a402:	4619      	mov	r1, r3
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f001 f999 	bl	800b73c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a40a:	2180      	movs	r1, #128	; 0x80
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f001 f995 	bl	800b73c <USBD_LL_StallEP>
 800a412:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a414:	e020      	b.n	800a458 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a416:	6839      	ldr	r1, [r7, #0]
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f000 fca4 	bl	800ad66 <USBD_CtlError>
              break;
 800a41e:	e01b      	b.n	800a458 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	885b      	ldrh	r3, [r3, #2]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d10e      	bne.n	800a446 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a428:	7bbb      	ldrb	r3, [r7, #14]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d00b      	beq.n	800a446 <USBD_StdEPReq+0xfe>
 800a42e:	7bbb      	ldrb	r3, [r7, #14]
 800a430:	2b80      	cmp	r3, #128	; 0x80
 800a432:	d008      	beq.n	800a446 <USBD_StdEPReq+0xfe>
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	88db      	ldrh	r3, [r3, #6]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d104      	bne.n	800a446 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a43c:	7bbb      	ldrb	r3, [r7, #14]
 800a43e:	4619      	mov	r1, r3
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f001 f97b 	bl	800b73c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f000 fd58 	bl	800aefc <USBD_CtlSendStatus>

              break;
 800a44c:	e004      	b.n	800a458 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a44e:	6839      	ldr	r1, [r7, #0]
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f000 fc88 	bl	800ad66 <USBD_CtlError>
              break;
 800a456:	bf00      	nop
          }
          break;
 800a458:	e107      	b.n	800a66a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a460:	b2db      	uxtb	r3, r3
 800a462:	2b02      	cmp	r3, #2
 800a464:	d002      	beq.n	800a46c <USBD_StdEPReq+0x124>
 800a466:	2b03      	cmp	r3, #3
 800a468:	d016      	beq.n	800a498 <USBD_StdEPReq+0x150>
 800a46a:	e04b      	b.n	800a504 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a46c:	7bbb      	ldrb	r3, [r7, #14]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d00d      	beq.n	800a48e <USBD_StdEPReq+0x146>
 800a472:	7bbb      	ldrb	r3, [r7, #14]
 800a474:	2b80      	cmp	r3, #128	; 0x80
 800a476:	d00a      	beq.n	800a48e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a478:	7bbb      	ldrb	r3, [r7, #14]
 800a47a:	4619      	mov	r1, r3
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f001 f95d 	bl	800b73c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a482:	2180      	movs	r1, #128	; 0x80
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f001 f959 	bl	800b73c <USBD_LL_StallEP>
 800a48a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a48c:	e040      	b.n	800a510 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a48e:	6839      	ldr	r1, [r7, #0]
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f000 fc68 	bl	800ad66 <USBD_CtlError>
              break;
 800a496:	e03b      	b.n	800a510 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	885b      	ldrh	r3, [r3, #2]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d136      	bne.n	800a50e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a4a0:	7bbb      	ldrb	r3, [r7, #14]
 800a4a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d004      	beq.n	800a4b4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a4aa:	7bbb      	ldrb	r3, [r7, #14]
 800a4ac:	4619      	mov	r1, r3
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f001 f963 	bl	800b77a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f000 fd21 	bl	800aefc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a4ba:	7bbb      	ldrb	r3, [r7, #14]
 800a4bc:	4619      	mov	r1, r3
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f7ff fde2 	bl	800a088 <USBD_CoreFindEP>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a4c8:	7b7b      	ldrb	r3, [r7, #13]
 800a4ca:	2bff      	cmp	r3, #255	; 0xff
 800a4cc:	d01f      	beq.n	800a50e <USBD_StdEPReq+0x1c6>
 800a4ce:	7b7b      	ldrb	r3, [r7, #13]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d11c      	bne.n	800a50e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a4d4:	7b7a      	ldrb	r2, [r7, #13]
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a4dc:	7b7a      	ldrb	r2, [r7, #13]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	32ae      	adds	r2, #174	; 0xae
 800a4e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4e6:	689b      	ldr	r3, [r3, #8]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d010      	beq.n	800a50e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a4ec:	7b7a      	ldrb	r2, [r7, #13]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	32ae      	adds	r2, #174	; 0xae
 800a4f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4f6:	689b      	ldr	r3, [r3, #8]
 800a4f8:	6839      	ldr	r1, [r7, #0]
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	4798      	blx	r3
 800a4fe:	4603      	mov	r3, r0
 800a500:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a502:	e004      	b.n	800a50e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a504:	6839      	ldr	r1, [r7, #0]
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f000 fc2d 	bl	800ad66 <USBD_CtlError>
              break;
 800a50c:	e000      	b.n	800a510 <USBD_StdEPReq+0x1c8>
              break;
 800a50e:	bf00      	nop
          }
          break;
 800a510:	e0ab      	b.n	800a66a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a518:	b2db      	uxtb	r3, r3
 800a51a:	2b02      	cmp	r3, #2
 800a51c:	d002      	beq.n	800a524 <USBD_StdEPReq+0x1dc>
 800a51e:	2b03      	cmp	r3, #3
 800a520:	d032      	beq.n	800a588 <USBD_StdEPReq+0x240>
 800a522:	e097      	b.n	800a654 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a524:	7bbb      	ldrb	r3, [r7, #14]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d007      	beq.n	800a53a <USBD_StdEPReq+0x1f2>
 800a52a:	7bbb      	ldrb	r3, [r7, #14]
 800a52c:	2b80      	cmp	r3, #128	; 0x80
 800a52e:	d004      	beq.n	800a53a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a530:	6839      	ldr	r1, [r7, #0]
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f000 fc17 	bl	800ad66 <USBD_CtlError>
                break;
 800a538:	e091      	b.n	800a65e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a53a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	da0b      	bge.n	800a55a <USBD_StdEPReq+0x212>
 800a542:	7bbb      	ldrb	r3, [r7, #14]
 800a544:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a548:	4613      	mov	r3, r2
 800a54a:	009b      	lsls	r3, r3, #2
 800a54c:	4413      	add	r3, r2
 800a54e:	009b      	lsls	r3, r3, #2
 800a550:	3310      	adds	r3, #16
 800a552:	687a      	ldr	r2, [r7, #4]
 800a554:	4413      	add	r3, r2
 800a556:	3304      	adds	r3, #4
 800a558:	e00b      	b.n	800a572 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a55a:	7bbb      	ldrb	r3, [r7, #14]
 800a55c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a560:	4613      	mov	r3, r2
 800a562:	009b      	lsls	r3, r3, #2
 800a564:	4413      	add	r3, r2
 800a566:	009b      	lsls	r3, r3, #2
 800a568:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a56c:	687a      	ldr	r2, [r7, #4]
 800a56e:	4413      	add	r3, r2
 800a570:	3304      	adds	r3, #4
 800a572:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	2200      	movs	r2, #0
 800a578:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	2202      	movs	r2, #2
 800a57e:	4619      	mov	r1, r3
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f000 fc61 	bl	800ae48 <USBD_CtlSendData>
              break;
 800a586:	e06a      	b.n	800a65e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a588:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	da11      	bge.n	800a5b4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a590:	7bbb      	ldrb	r3, [r7, #14]
 800a592:	f003 020f 	and.w	r2, r3, #15
 800a596:	6879      	ldr	r1, [r7, #4]
 800a598:	4613      	mov	r3, r2
 800a59a:	009b      	lsls	r3, r3, #2
 800a59c:	4413      	add	r3, r2
 800a59e:	009b      	lsls	r3, r3, #2
 800a5a0:	440b      	add	r3, r1
 800a5a2:	3324      	adds	r3, #36	; 0x24
 800a5a4:	881b      	ldrh	r3, [r3, #0]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d117      	bne.n	800a5da <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a5aa:	6839      	ldr	r1, [r7, #0]
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f000 fbda 	bl	800ad66 <USBD_CtlError>
                  break;
 800a5b2:	e054      	b.n	800a65e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a5b4:	7bbb      	ldrb	r3, [r7, #14]
 800a5b6:	f003 020f 	and.w	r2, r3, #15
 800a5ba:	6879      	ldr	r1, [r7, #4]
 800a5bc:	4613      	mov	r3, r2
 800a5be:	009b      	lsls	r3, r3, #2
 800a5c0:	4413      	add	r3, r2
 800a5c2:	009b      	lsls	r3, r3, #2
 800a5c4:	440b      	add	r3, r1
 800a5c6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a5ca:	881b      	ldrh	r3, [r3, #0]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d104      	bne.n	800a5da <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a5d0:	6839      	ldr	r1, [r7, #0]
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f000 fbc7 	bl	800ad66 <USBD_CtlError>
                  break;
 800a5d8:	e041      	b.n	800a65e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a5da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	da0b      	bge.n	800a5fa <USBD_StdEPReq+0x2b2>
 800a5e2:	7bbb      	ldrb	r3, [r7, #14]
 800a5e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a5e8:	4613      	mov	r3, r2
 800a5ea:	009b      	lsls	r3, r3, #2
 800a5ec:	4413      	add	r3, r2
 800a5ee:	009b      	lsls	r3, r3, #2
 800a5f0:	3310      	adds	r3, #16
 800a5f2:	687a      	ldr	r2, [r7, #4]
 800a5f4:	4413      	add	r3, r2
 800a5f6:	3304      	adds	r3, #4
 800a5f8:	e00b      	b.n	800a612 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a5fa:	7bbb      	ldrb	r3, [r7, #14]
 800a5fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a600:	4613      	mov	r3, r2
 800a602:	009b      	lsls	r3, r3, #2
 800a604:	4413      	add	r3, r2
 800a606:	009b      	lsls	r3, r3, #2
 800a608:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a60c:	687a      	ldr	r2, [r7, #4]
 800a60e:	4413      	add	r3, r2
 800a610:	3304      	adds	r3, #4
 800a612:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a614:	7bbb      	ldrb	r3, [r7, #14]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d002      	beq.n	800a620 <USBD_StdEPReq+0x2d8>
 800a61a:	7bbb      	ldrb	r3, [r7, #14]
 800a61c:	2b80      	cmp	r3, #128	; 0x80
 800a61e:	d103      	bne.n	800a628 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	2200      	movs	r2, #0
 800a624:	601a      	str	r2, [r3, #0]
 800a626:	e00e      	b.n	800a646 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a628:	7bbb      	ldrb	r3, [r7, #14]
 800a62a:	4619      	mov	r1, r3
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f001 f8c3 	bl	800b7b8 <USBD_LL_IsStallEP>
 800a632:	4603      	mov	r3, r0
 800a634:	2b00      	cmp	r3, #0
 800a636:	d003      	beq.n	800a640 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	2201      	movs	r2, #1
 800a63c:	601a      	str	r2, [r3, #0]
 800a63e:	e002      	b.n	800a646 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	2200      	movs	r2, #0
 800a644:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	2202      	movs	r2, #2
 800a64a:	4619      	mov	r1, r3
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f000 fbfb 	bl	800ae48 <USBD_CtlSendData>
              break;
 800a652:	e004      	b.n	800a65e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a654:	6839      	ldr	r1, [r7, #0]
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f000 fb85 	bl	800ad66 <USBD_CtlError>
              break;
 800a65c:	bf00      	nop
          }
          break;
 800a65e:	e004      	b.n	800a66a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a660:	6839      	ldr	r1, [r7, #0]
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f000 fb7f 	bl	800ad66 <USBD_CtlError>
          break;
 800a668:	bf00      	nop
      }
      break;
 800a66a:	e005      	b.n	800a678 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a66c:	6839      	ldr	r1, [r7, #0]
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f000 fb79 	bl	800ad66 <USBD_CtlError>
      break;
 800a674:	e000      	b.n	800a678 <USBD_StdEPReq+0x330>
      break;
 800a676:	bf00      	nop
  }

  return ret;
 800a678:	7bfb      	ldrb	r3, [r7, #15]
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3710      	adds	r7, #16
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
	...

0800a684 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b084      	sub	sp, #16
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a68e:	2300      	movs	r3, #0
 800a690:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a692:	2300      	movs	r3, #0
 800a694:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a696:	2300      	movs	r3, #0
 800a698:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	885b      	ldrh	r3, [r3, #2]
 800a69e:	0a1b      	lsrs	r3, r3, #8
 800a6a0:	b29b      	uxth	r3, r3
 800a6a2:	3b01      	subs	r3, #1
 800a6a4:	2b0e      	cmp	r3, #14
 800a6a6:	f200 8152 	bhi.w	800a94e <USBD_GetDescriptor+0x2ca>
 800a6aa:	a201      	add	r2, pc, #4	; (adr r2, 800a6b0 <USBD_GetDescriptor+0x2c>)
 800a6ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6b0:	0800a721 	.word	0x0800a721
 800a6b4:	0800a739 	.word	0x0800a739
 800a6b8:	0800a779 	.word	0x0800a779
 800a6bc:	0800a94f 	.word	0x0800a94f
 800a6c0:	0800a94f 	.word	0x0800a94f
 800a6c4:	0800a8ef 	.word	0x0800a8ef
 800a6c8:	0800a91b 	.word	0x0800a91b
 800a6cc:	0800a94f 	.word	0x0800a94f
 800a6d0:	0800a94f 	.word	0x0800a94f
 800a6d4:	0800a94f 	.word	0x0800a94f
 800a6d8:	0800a94f 	.word	0x0800a94f
 800a6dc:	0800a94f 	.word	0x0800a94f
 800a6e0:	0800a94f 	.word	0x0800a94f
 800a6e4:	0800a94f 	.word	0x0800a94f
 800a6e8:	0800a6ed 	.word	0x0800a6ed
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6f2:	69db      	ldr	r3, [r3, #28]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d00b      	beq.n	800a710 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6fe:	69db      	ldr	r3, [r3, #28]
 800a700:	687a      	ldr	r2, [r7, #4]
 800a702:	7c12      	ldrb	r2, [r2, #16]
 800a704:	f107 0108 	add.w	r1, r7, #8
 800a708:	4610      	mov	r0, r2
 800a70a:	4798      	blx	r3
 800a70c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a70e:	e126      	b.n	800a95e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a710:	6839      	ldr	r1, [r7, #0]
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f000 fb27 	bl	800ad66 <USBD_CtlError>
        err++;
 800a718:	7afb      	ldrb	r3, [r7, #11]
 800a71a:	3301      	adds	r3, #1
 800a71c:	72fb      	strb	r3, [r7, #11]
      break;
 800a71e:	e11e      	b.n	800a95e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	687a      	ldr	r2, [r7, #4]
 800a72a:	7c12      	ldrb	r2, [r2, #16]
 800a72c:	f107 0108 	add.w	r1, r7, #8
 800a730:	4610      	mov	r0, r2
 800a732:	4798      	blx	r3
 800a734:	60f8      	str	r0, [r7, #12]
      break;
 800a736:	e112      	b.n	800a95e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	7c1b      	ldrb	r3, [r3, #16]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d10d      	bne.n	800a75c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a748:	f107 0208 	add.w	r2, r7, #8
 800a74c:	4610      	mov	r0, r2
 800a74e:	4798      	blx	r3
 800a750:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	3301      	adds	r3, #1
 800a756:	2202      	movs	r2, #2
 800a758:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a75a:	e100      	b.n	800a95e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a764:	f107 0208 	add.w	r2, r7, #8
 800a768:	4610      	mov	r0, r2
 800a76a:	4798      	blx	r3
 800a76c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	3301      	adds	r3, #1
 800a772:	2202      	movs	r2, #2
 800a774:	701a      	strb	r2, [r3, #0]
      break;
 800a776:	e0f2      	b.n	800a95e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	885b      	ldrh	r3, [r3, #2]
 800a77c:	b2db      	uxtb	r3, r3
 800a77e:	2b05      	cmp	r3, #5
 800a780:	f200 80ac 	bhi.w	800a8dc <USBD_GetDescriptor+0x258>
 800a784:	a201      	add	r2, pc, #4	; (adr r2, 800a78c <USBD_GetDescriptor+0x108>)
 800a786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a78a:	bf00      	nop
 800a78c:	0800a7a5 	.word	0x0800a7a5
 800a790:	0800a7d9 	.word	0x0800a7d9
 800a794:	0800a80d 	.word	0x0800a80d
 800a798:	0800a841 	.word	0x0800a841
 800a79c:	0800a875 	.word	0x0800a875
 800a7a0:	0800a8a9 	.word	0x0800a8a9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7aa:	685b      	ldr	r3, [r3, #4]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d00b      	beq.n	800a7c8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7b6:	685b      	ldr	r3, [r3, #4]
 800a7b8:	687a      	ldr	r2, [r7, #4]
 800a7ba:	7c12      	ldrb	r2, [r2, #16]
 800a7bc:	f107 0108 	add.w	r1, r7, #8
 800a7c0:	4610      	mov	r0, r2
 800a7c2:	4798      	blx	r3
 800a7c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7c6:	e091      	b.n	800a8ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a7c8:	6839      	ldr	r1, [r7, #0]
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 facb 	bl	800ad66 <USBD_CtlError>
            err++;
 800a7d0:	7afb      	ldrb	r3, [r7, #11]
 800a7d2:	3301      	adds	r3, #1
 800a7d4:	72fb      	strb	r3, [r7, #11]
          break;
 800a7d6:	e089      	b.n	800a8ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7de:	689b      	ldr	r3, [r3, #8]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d00b      	beq.n	800a7fc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7ea:	689b      	ldr	r3, [r3, #8]
 800a7ec:	687a      	ldr	r2, [r7, #4]
 800a7ee:	7c12      	ldrb	r2, [r2, #16]
 800a7f0:	f107 0108 	add.w	r1, r7, #8
 800a7f4:	4610      	mov	r0, r2
 800a7f6:	4798      	blx	r3
 800a7f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7fa:	e077      	b.n	800a8ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a7fc:	6839      	ldr	r1, [r7, #0]
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f000 fab1 	bl	800ad66 <USBD_CtlError>
            err++;
 800a804:	7afb      	ldrb	r3, [r7, #11]
 800a806:	3301      	adds	r3, #1
 800a808:	72fb      	strb	r3, [r7, #11]
          break;
 800a80a:	e06f      	b.n	800a8ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a812:	68db      	ldr	r3, [r3, #12]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d00b      	beq.n	800a830 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a81e:	68db      	ldr	r3, [r3, #12]
 800a820:	687a      	ldr	r2, [r7, #4]
 800a822:	7c12      	ldrb	r2, [r2, #16]
 800a824:	f107 0108 	add.w	r1, r7, #8
 800a828:	4610      	mov	r0, r2
 800a82a:	4798      	blx	r3
 800a82c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a82e:	e05d      	b.n	800a8ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a830:	6839      	ldr	r1, [r7, #0]
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f000 fa97 	bl	800ad66 <USBD_CtlError>
            err++;
 800a838:	7afb      	ldrb	r3, [r7, #11]
 800a83a:	3301      	adds	r3, #1
 800a83c:	72fb      	strb	r3, [r7, #11]
          break;
 800a83e:	e055      	b.n	800a8ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a846:	691b      	ldr	r3, [r3, #16]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d00b      	beq.n	800a864 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a852:	691b      	ldr	r3, [r3, #16]
 800a854:	687a      	ldr	r2, [r7, #4]
 800a856:	7c12      	ldrb	r2, [r2, #16]
 800a858:	f107 0108 	add.w	r1, r7, #8
 800a85c:	4610      	mov	r0, r2
 800a85e:	4798      	blx	r3
 800a860:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a862:	e043      	b.n	800a8ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a864:	6839      	ldr	r1, [r7, #0]
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f000 fa7d 	bl	800ad66 <USBD_CtlError>
            err++;
 800a86c:	7afb      	ldrb	r3, [r7, #11]
 800a86e:	3301      	adds	r3, #1
 800a870:	72fb      	strb	r3, [r7, #11]
          break;
 800a872:	e03b      	b.n	800a8ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a87a:	695b      	ldr	r3, [r3, #20]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d00b      	beq.n	800a898 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a886:	695b      	ldr	r3, [r3, #20]
 800a888:	687a      	ldr	r2, [r7, #4]
 800a88a:	7c12      	ldrb	r2, [r2, #16]
 800a88c:	f107 0108 	add.w	r1, r7, #8
 800a890:	4610      	mov	r0, r2
 800a892:	4798      	blx	r3
 800a894:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a896:	e029      	b.n	800a8ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a898:	6839      	ldr	r1, [r7, #0]
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 fa63 	bl	800ad66 <USBD_CtlError>
            err++;
 800a8a0:	7afb      	ldrb	r3, [r7, #11]
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	72fb      	strb	r3, [r7, #11]
          break;
 800a8a6:	e021      	b.n	800a8ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8ae:	699b      	ldr	r3, [r3, #24]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d00b      	beq.n	800a8cc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8ba:	699b      	ldr	r3, [r3, #24]
 800a8bc:	687a      	ldr	r2, [r7, #4]
 800a8be:	7c12      	ldrb	r2, [r2, #16]
 800a8c0:	f107 0108 	add.w	r1, r7, #8
 800a8c4:	4610      	mov	r0, r2
 800a8c6:	4798      	blx	r3
 800a8c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a8ca:	e00f      	b.n	800a8ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a8cc:	6839      	ldr	r1, [r7, #0]
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f000 fa49 	bl	800ad66 <USBD_CtlError>
            err++;
 800a8d4:	7afb      	ldrb	r3, [r7, #11]
 800a8d6:	3301      	adds	r3, #1
 800a8d8:	72fb      	strb	r3, [r7, #11]
          break;
 800a8da:	e007      	b.n	800a8ec <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a8dc:	6839      	ldr	r1, [r7, #0]
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f000 fa41 	bl	800ad66 <USBD_CtlError>
          err++;
 800a8e4:	7afb      	ldrb	r3, [r7, #11]
 800a8e6:	3301      	adds	r3, #1
 800a8e8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a8ea:	bf00      	nop
      }
      break;
 800a8ec:	e037      	b.n	800a95e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	7c1b      	ldrb	r3, [r3, #16]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d109      	bne.n	800a90a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8fe:	f107 0208 	add.w	r2, r7, #8
 800a902:	4610      	mov	r0, r2
 800a904:	4798      	blx	r3
 800a906:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a908:	e029      	b.n	800a95e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a90a:	6839      	ldr	r1, [r7, #0]
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f000 fa2a 	bl	800ad66 <USBD_CtlError>
        err++;
 800a912:	7afb      	ldrb	r3, [r7, #11]
 800a914:	3301      	adds	r3, #1
 800a916:	72fb      	strb	r3, [r7, #11]
      break;
 800a918:	e021      	b.n	800a95e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	7c1b      	ldrb	r3, [r3, #16]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d10d      	bne.n	800a93e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a92a:	f107 0208 	add.w	r2, r7, #8
 800a92e:	4610      	mov	r0, r2
 800a930:	4798      	blx	r3
 800a932:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	3301      	adds	r3, #1
 800a938:	2207      	movs	r2, #7
 800a93a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a93c:	e00f      	b.n	800a95e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a93e:	6839      	ldr	r1, [r7, #0]
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f000 fa10 	bl	800ad66 <USBD_CtlError>
        err++;
 800a946:	7afb      	ldrb	r3, [r7, #11]
 800a948:	3301      	adds	r3, #1
 800a94a:	72fb      	strb	r3, [r7, #11]
      break;
 800a94c:	e007      	b.n	800a95e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a94e:	6839      	ldr	r1, [r7, #0]
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f000 fa08 	bl	800ad66 <USBD_CtlError>
      err++;
 800a956:	7afb      	ldrb	r3, [r7, #11]
 800a958:	3301      	adds	r3, #1
 800a95a:	72fb      	strb	r3, [r7, #11]
      break;
 800a95c:	bf00      	nop
  }

  if (err != 0U)
 800a95e:	7afb      	ldrb	r3, [r7, #11]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d11e      	bne.n	800a9a2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	88db      	ldrh	r3, [r3, #6]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d016      	beq.n	800a99a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a96c:	893b      	ldrh	r3, [r7, #8]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d00e      	beq.n	800a990 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	88da      	ldrh	r2, [r3, #6]
 800a976:	893b      	ldrh	r3, [r7, #8]
 800a978:	4293      	cmp	r3, r2
 800a97a:	bf28      	it	cs
 800a97c:	4613      	movcs	r3, r2
 800a97e:	b29b      	uxth	r3, r3
 800a980:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a982:	893b      	ldrh	r3, [r7, #8]
 800a984:	461a      	mov	r2, r3
 800a986:	68f9      	ldr	r1, [r7, #12]
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f000 fa5d 	bl	800ae48 <USBD_CtlSendData>
 800a98e:	e009      	b.n	800a9a4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a990:	6839      	ldr	r1, [r7, #0]
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f000 f9e7 	bl	800ad66 <USBD_CtlError>
 800a998:	e004      	b.n	800a9a4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f000 faae 	bl	800aefc <USBD_CtlSendStatus>
 800a9a0:	e000      	b.n	800a9a4 <USBD_GetDescriptor+0x320>
    return;
 800a9a2:	bf00      	nop
  }
}
 800a9a4:	3710      	adds	r7, #16
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}
 800a9aa:	bf00      	nop

0800a9ac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b084      	sub	sp, #16
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	889b      	ldrh	r3, [r3, #4]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d131      	bne.n	800aa22 <USBD_SetAddress+0x76>
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	88db      	ldrh	r3, [r3, #6]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d12d      	bne.n	800aa22 <USBD_SetAddress+0x76>
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	885b      	ldrh	r3, [r3, #2]
 800a9ca:	2b7f      	cmp	r3, #127	; 0x7f
 800a9cc:	d829      	bhi.n	800aa22 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	885b      	ldrh	r3, [r3, #2]
 800a9d2:	b2db      	uxtb	r3, r3
 800a9d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9e0:	b2db      	uxtb	r3, r3
 800a9e2:	2b03      	cmp	r3, #3
 800a9e4:	d104      	bne.n	800a9f0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a9e6:	6839      	ldr	r1, [r7, #0]
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f000 f9bc 	bl	800ad66 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9ee:	e01d      	b.n	800aa2c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	7bfa      	ldrb	r2, [r7, #15]
 800a9f4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a9f8:	7bfb      	ldrb	r3, [r7, #15]
 800a9fa:	4619      	mov	r1, r3
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f000 ff07 	bl	800b810 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f000 fa7a 	bl	800aefc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800aa08:	7bfb      	ldrb	r3, [r7, #15]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d004      	beq.n	800aa18 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2202      	movs	r2, #2
 800aa12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa16:	e009      	b.n	800aa2c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa20:	e004      	b.n	800aa2c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800aa22:	6839      	ldr	r1, [r7, #0]
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f000 f99e 	bl	800ad66 <USBD_CtlError>
  }
}
 800aa2a:	bf00      	nop
 800aa2c:	bf00      	nop
 800aa2e:	3710      	adds	r7, #16
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}

0800aa34 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b084      	sub	sp, #16
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	885b      	ldrh	r3, [r3, #2]
 800aa46:	b2da      	uxtb	r2, r3
 800aa48:	4b4e      	ldr	r3, [pc, #312]	; (800ab84 <USBD_SetConfig+0x150>)
 800aa4a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800aa4c:	4b4d      	ldr	r3, [pc, #308]	; (800ab84 <USBD_SetConfig+0x150>)
 800aa4e:	781b      	ldrb	r3, [r3, #0]
 800aa50:	2b01      	cmp	r3, #1
 800aa52:	d905      	bls.n	800aa60 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800aa54:	6839      	ldr	r1, [r7, #0]
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f000 f985 	bl	800ad66 <USBD_CtlError>
    return USBD_FAIL;
 800aa5c:	2303      	movs	r3, #3
 800aa5e:	e08c      	b.n	800ab7a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa66:	b2db      	uxtb	r3, r3
 800aa68:	2b02      	cmp	r3, #2
 800aa6a:	d002      	beq.n	800aa72 <USBD_SetConfig+0x3e>
 800aa6c:	2b03      	cmp	r3, #3
 800aa6e:	d029      	beq.n	800aac4 <USBD_SetConfig+0x90>
 800aa70:	e075      	b.n	800ab5e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800aa72:	4b44      	ldr	r3, [pc, #272]	; (800ab84 <USBD_SetConfig+0x150>)
 800aa74:	781b      	ldrb	r3, [r3, #0]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d020      	beq.n	800aabc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800aa7a:	4b42      	ldr	r3, [pc, #264]	; (800ab84 <USBD_SetConfig+0x150>)
 800aa7c:	781b      	ldrb	r3, [r3, #0]
 800aa7e:	461a      	mov	r2, r3
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aa84:	4b3f      	ldr	r3, [pc, #252]	; (800ab84 <USBD_SetConfig+0x150>)
 800aa86:	781b      	ldrb	r3, [r3, #0]
 800aa88:	4619      	mov	r1, r3
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f7fe ffbd 	bl	8009a0a <USBD_SetClassConfig>
 800aa90:	4603      	mov	r3, r0
 800aa92:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800aa94:	7bfb      	ldrb	r3, [r7, #15]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d008      	beq.n	800aaac <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800aa9a:	6839      	ldr	r1, [r7, #0]
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f000 f962 	bl	800ad66 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2202      	movs	r2, #2
 800aaa6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aaaa:	e065      	b.n	800ab78 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f000 fa25 	bl	800aefc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2203      	movs	r2, #3
 800aab6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800aaba:	e05d      	b.n	800ab78 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f000 fa1d 	bl	800aefc <USBD_CtlSendStatus>
      break;
 800aac2:	e059      	b.n	800ab78 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800aac4:	4b2f      	ldr	r3, [pc, #188]	; (800ab84 <USBD_SetConfig+0x150>)
 800aac6:	781b      	ldrb	r3, [r3, #0]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d112      	bne.n	800aaf2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2202      	movs	r2, #2
 800aad0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800aad4:	4b2b      	ldr	r3, [pc, #172]	; (800ab84 <USBD_SetConfig+0x150>)
 800aad6:	781b      	ldrb	r3, [r3, #0]
 800aad8:	461a      	mov	r2, r3
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aade:	4b29      	ldr	r3, [pc, #164]	; (800ab84 <USBD_SetConfig+0x150>)
 800aae0:	781b      	ldrb	r3, [r3, #0]
 800aae2:	4619      	mov	r1, r3
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f7fe ffac 	bl	8009a42 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f000 fa06 	bl	800aefc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aaf0:	e042      	b.n	800ab78 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800aaf2:	4b24      	ldr	r3, [pc, #144]	; (800ab84 <USBD_SetConfig+0x150>)
 800aaf4:	781b      	ldrb	r3, [r3, #0]
 800aaf6:	461a      	mov	r2, r3
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	685b      	ldr	r3, [r3, #4]
 800aafc:	429a      	cmp	r2, r3
 800aafe:	d02a      	beq.n	800ab56 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	685b      	ldr	r3, [r3, #4]
 800ab04:	b2db      	uxtb	r3, r3
 800ab06:	4619      	mov	r1, r3
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f7fe ff9a 	bl	8009a42 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ab0e:	4b1d      	ldr	r3, [pc, #116]	; (800ab84 <USBD_SetConfig+0x150>)
 800ab10:	781b      	ldrb	r3, [r3, #0]
 800ab12:	461a      	mov	r2, r3
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ab18:	4b1a      	ldr	r3, [pc, #104]	; (800ab84 <USBD_SetConfig+0x150>)
 800ab1a:	781b      	ldrb	r3, [r3, #0]
 800ab1c:	4619      	mov	r1, r3
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f7fe ff73 	bl	8009a0a <USBD_SetClassConfig>
 800ab24:	4603      	mov	r3, r0
 800ab26:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ab28:	7bfb      	ldrb	r3, [r7, #15]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d00f      	beq.n	800ab4e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ab2e:	6839      	ldr	r1, [r7, #0]
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f000 f918 	bl	800ad66 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	685b      	ldr	r3, [r3, #4]
 800ab3a:	b2db      	uxtb	r3, r3
 800ab3c:	4619      	mov	r1, r3
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f7fe ff7f 	bl	8009a42 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2202      	movs	r2, #2
 800ab48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ab4c:	e014      	b.n	800ab78 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f000 f9d4 	bl	800aefc <USBD_CtlSendStatus>
      break;
 800ab54:	e010      	b.n	800ab78 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f000 f9d0 	bl	800aefc <USBD_CtlSendStatus>
      break;
 800ab5c:	e00c      	b.n	800ab78 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ab5e:	6839      	ldr	r1, [r7, #0]
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f000 f900 	bl	800ad66 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ab66:	4b07      	ldr	r3, [pc, #28]	; (800ab84 <USBD_SetConfig+0x150>)
 800ab68:	781b      	ldrb	r3, [r3, #0]
 800ab6a:	4619      	mov	r1, r3
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f7fe ff68 	bl	8009a42 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ab72:	2303      	movs	r3, #3
 800ab74:	73fb      	strb	r3, [r7, #15]
      break;
 800ab76:	bf00      	nop
  }

  return ret;
 800ab78:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3710      	adds	r7, #16
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
 800ab82:	bf00      	nop
 800ab84:	20000478 	.word	0x20000478

0800ab88 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b082      	sub	sp, #8
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	88db      	ldrh	r3, [r3, #6]
 800ab96:	2b01      	cmp	r3, #1
 800ab98:	d004      	beq.n	800aba4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ab9a:	6839      	ldr	r1, [r7, #0]
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f000 f8e2 	bl	800ad66 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800aba2:	e023      	b.n	800abec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abaa:	b2db      	uxtb	r3, r3
 800abac:	2b02      	cmp	r3, #2
 800abae:	dc02      	bgt.n	800abb6 <USBD_GetConfig+0x2e>
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	dc03      	bgt.n	800abbc <USBD_GetConfig+0x34>
 800abb4:	e015      	b.n	800abe2 <USBD_GetConfig+0x5a>
 800abb6:	2b03      	cmp	r3, #3
 800abb8:	d00b      	beq.n	800abd2 <USBD_GetConfig+0x4a>
 800abba:	e012      	b.n	800abe2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2200      	movs	r2, #0
 800abc0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	3308      	adds	r3, #8
 800abc6:	2201      	movs	r2, #1
 800abc8:	4619      	mov	r1, r3
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f000 f93c 	bl	800ae48 <USBD_CtlSendData>
        break;
 800abd0:	e00c      	b.n	800abec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	3304      	adds	r3, #4
 800abd6:	2201      	movs	r2, #1
 800abd8:	4619      	mov	r1, r3
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f000 f934 	bl	800ae48 <USBD_CtlSendData>
        break;
 800abe0:	e004      	b.n	800abec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800abe2:	6839      	ldr	r1, [r7, #0]
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f000 f8be 	bl	800ad66 <USBD_CtlError>
        break;
 800abea:	bf00      	nop
}
 800abec:	bf00      	nop
 800abee:	3708      	adds	r7, #8
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}

0800abf4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b082      	sub	sp, #8
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac04:	b2db      	uxtb	r3, r3
 800ac06:	3b01      	subs	r3, #1
 800ac08:	2b02      	cmp	r3, #2
 800ac0a:	d81e      	bhi.n	800ac4a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	88db      	ldrh	r3, [r3, #6]
 800ac10:	2b02      	cmp	r3, #2
 800ac12:	d004      	beq.n	800ac1e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ac14:	6839      	ldr	r1, [r7, #0]
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f000 f8a5 	bl	800ad66 <USBD_CtlError>
        break;
 800ac1c:	e01a      	b.n	800ac54 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2201      	movs	r2, #1
 800ac22:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d005      	beq.n	800ac3a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	68db      	ldr	r3, [r3, #12]
 800ac32:	f043 0202 	orr.w	r2, r3, #2
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	330c      	adds	r3, #12
 800ac3e:	2202      	movs	r2, #2
 800ac40:	4619      	mov	r1, r3
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f000 f900 	bl	800ae48 <USBD_CtlSendData>
      break;
 800ac48:	e004      	b.n	800ac54 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ac4a:	6839      	ldr	r1, [r7, #0]
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	f000 f88a 	bl	800ad66 <USBD_CtlError>
      break;
 800ac52:	bf00      	nop
  }
}
 800ac54:	bf00      	nop
 800ac56:	3708      	adds	r7, #8
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}

0800ac5c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b082      	sub	sp, #8
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
 800ac64:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	885b      	ldrh	r3, [r3, #2]
 800ac6a:	2b01      	cmp	r3, #1
 800ac6c:	d107      	bne.n	800ac7e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2201      	movs	r2, #1
 800ac72:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f000 f940 	bl	800aefc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ac7c:	e013      	b.n	800aca6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	885b      	ldrh	r3, [r3, #2]
 800ac82:	2b02      	cmp	r3, #2
 800ac84:	d10b      	bne.n	800ac9e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	889b      	ldrh	r3, [r3, #4]
 800ac8a:	0a1b      	lsrs	r3, r3, #8
 800ac8c:	b29b      	uxth	r3, r3
 800ac8e:	b2da      	uxtb	r2, r3
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f000 f930 	bl	800aefc <USBD_CtlSendStatus>
}
 800ac9c:	e003      	b.n	800aca6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ac9e:	6839      	ldr	r1, [r7, #0]
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f000 f860 	bl	800ad66 <USBD_CtlError>
}
 800aca6:	bf00      	nop
 800aca8:	3708      	adds	r7, #8
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}

0800acae <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acae:	b580      	push	{r7, lr}
 800acb0:	b082      	sub	sp, #8
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	6078      	str	r0, [r7, #4]
 800acb6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acbe:	b2db      	uxtb	r3, r3
 800acc0:	3b01      	subs	r3, #1
 800acc2:	2b02      	cmp	r3, #2
 800acc4:	d80b      	bhi.n	800acde <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	885b      	ldrh	r3, [r3, #2]
 800acca:	2b01      	cmp	r3, #1
 800accc:	d10c      	bne.n	800ace8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2200      	movs	r2, #0
 800acd2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f000 f910 	bl	800aefc <USBD_CtlSendStatus>
      }
      break;
 800acdc:	e004      	b.n	800ace8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800acde:	6839      	ldr	r1, [r7, #0]
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f000 f840 	bl	800ad66 <USBD_CtlError>
      break;
 800ace6:	e000      	b.n	800acea <USBD_ClrFeature+0x3c>
      break;
 800ace8:	bf00      	nop
  }
}
 800acea:	bf00      	nop
 800acec:	3708      	adds	r7, #8
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}

0800acf2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800acf2:	b580      	push	{r7, lr}
 800acf4:	b084      	sub	sp, #16
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	6078      	str	r0, [r7, #4]
 800acfa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	781a      	ldrb	r2, [r3, #0]
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	3301      	adds	r3, #1
 800ad0c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	781a      	ldrb	r2, [r3, #0]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	3301      	adds	r3, #1
 800ad1a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ad1c:	68f8      	ldr	r0, [r7, #12]
 800ad1e:	f7ff fa17 	bl	800a150 <SWAPBYTE>
 800ad22:	4603      	mov	r3, r0
 800ad24:	461a      	mov	r2, r3
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	3301      	adds	r3, #1
 800ad2e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	3301      	adds	r3, #1
 800ad34:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ad36:	68f8      	ldr	r0, [r7, #12]
 800ad38:	f7ff fa0a 	bl	800a150 <SWAPBYTE>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	461a      	mov	r2, r3
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	3301      	adds	r3, #1
 800ad48:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	3301      	adds	r3, #1
 800ad4e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ad50:	68f8      	ldr	r0, [r7, #12]
 800ad52:	f7ff f9fd 	bl	800a150 <SWAPBYTE>
 800ad56:	4603      	mov	r3, r0
 800ad58:	461a      	mov	r2, r3
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	80da      	strh	r2, [r3, #6]
}
 800ad5e:	bf00      	nop
 800ad60:	3710      	adds	r7, #16
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}

0800ad66 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad66:	b580      	push	{r7, lr}
 800ad68:	b082      	sub	sp, #8
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	6078      	str	r0, [r7, #4]
 800ad6e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad70:	2180      	movs	r1, #128	; 0x80
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f000 fce2 	bl	800b73c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ad78:	2100      	movs	r1, #0
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f000 fcde 	bl	800b73c <USBD_LL_StallEP>
}
 800ad80:	bf00      	nop
 800ad82:	3708      	adds	r7, #8
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}

0800ad88 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b086      	sub	sp, #24
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	60f8      	str	r0, [r7, #12]
 800ad90:	60b9      	str	r1, [r7, #8]
 800ad92:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ad94:	2300      	movs	r3, #0
 800ad96:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d036      	beq.n	800ae0c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ada2:	6938      	ldr	r0, [r7, #16]
 800ada4:	f000 f836 	bl	800ae14 <USBD_GetLen>
 800ada8:	4603      	mov	r3, r0
 800adaa:	3301      	adds	r3, #1
 800adac:	b29b      	uxth	r3, r3
 800adae:	005b      	lsls	r3, r3, #1
 800adb0:	b29a      	uxth	r2, r3
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800adb6:	7dfb      	ldrb	r3, [r7, #23]
 800adb8:	68ba      	ldr	r2, [r7, #8]
 800adba:	4413      	add	r3, r2
 800adbc:	687a      	ldr	r2, [r7, #4]
 800adbe:	7812      	ldrb	r2, [r2, #0]
 800adc0:	701a      	strb	r2, [r3, #0]
  idx++;
 800adc2:	7dfb      	ldrb	r3, [r7, #23]
 800adc4:	3301      	adds	r3, #1
 800adc6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800adc8:	7dfb      	ldrb	r3, [r7, #23]
 800adca:	68ba      	ldr	r2, [r7, #8]
 800adcc:	4413      	add	r3, r2
 800adce:	2203      	movs	r2, #3
 800add0:	701a      	strb	r2, [r3, #0]
  idx++;
 800add2:	7dfb      	ldrb	r3, [r7, #23]
 800add4:	3301      	adds	r3, #1
 800add6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800add8:	e013      	b.n	800ae02 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800adda:	7dfb      	ldrb	r3, [r7, #23]
 800addc:	68ba      	ldr	r2, [r7, #8]
 800adde:	4413      	add	r3, r2
 800ade0:	693a      	ldr	r2, [r7, #16]
 800ade2:	7812      	ldrb	r2, [r2, #0]
 800ade4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	3301      	adds	r3, #1
 800adea:	613b      	str	r3, [r7, #16]
    idx++;
 800adec:	7dfb      	ldrb	r3, [r7, #23]
 800adee:	3301      	adds	r3, #1
 800adf0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800adf2:	7dfb      	ldrb	r3, [r7, #23]
 800adf4:	68ba      	ldr	r2, [r7, #8]
 800adf6:	4413      	add	r3, r2
 800adf8:	2200      	movs	r2, #0
 800adfa:	701a      	strb	r2, [r3, #0]
    idx++;
 800adfc:	7dfb      	ldrb	r3, [r7, #23]
 800adfe:	3301      	adds	r3, #1
 800ae00:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ae02:	693b      	ldr	r3, [r7, #16]
 800ae04:	781b      	ldrb	r3, [r3, #0]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d1e7      	bne.n	800adda <USBD_GetString+0x52>
 800ae0a:	e000      	b.n	800ae0e <USBD_GetString+0x86>
    return;
 800ae0c:	bf00      	nop
  }
}
 800ae0e:	3718      	adds	r7, #24
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}

0800ae14 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ae14:	b480      	push	{r7}
 800ae16:	b085      	sub	sp, #20
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ae24:	e005      	b.n	800ae32 <USBD_GetLen+0x1e>
  {
    len++;
 800ae26:	7bfb      	ldrb	r3, [r7, #15]
 800ae28:	3301      	adds	r3, #1
 800ae2a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	3301      	adds	r3, #1
 800ae30:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	781b      	ldrb	r3, [r3, #0]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d1f5      	bne.n	800ae26 <USBD_GetLen+0x12>
  }

  return len;
 800ae3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3714      	adds	r7, #20
 800ae40:	46bd      	mov	sp, r7
 800ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae46:	4770      	bx	lr

0800ae48 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b084      	sub	sp, #16
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	60f8      	str	r0, [r7, #12]
 800ae50:	60b9      	str	r1, [r7, #8]
 800ae52:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	2202      	movs	r2, #2
 800ae58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	687a      	ldr	r2, [r7, #4]
 800ae60:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	687a      	ldr	r2, [r7, #4]
 800ae66:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	68ba      	ldr	r2, [r7, #8]
 800ae6c:	2100      	movs	r1, #0
 800ae6e:	68f8      	ldr	r0, [r7, #12]
 800ae70:	f000 fced 	bl	800b84e <USBD_LL_Transmit>

  return USBD_OK;
 800ae74:	2300      	movs	r3, #0
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	3710      	adds	r7, #16
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}

0800ae7e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ae7e:	b580      	push	{r7, lr}
 800ae80:	b084      	sub	sp, #16
 800ae82:	af00      	add	r7, sp, #0
 800ae84:	60f8      	str	r0, [r7, #12]
 800ae86:	60b9      	str	r1, [r7, #8]
 800ae88:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	68ba      	ldr	r2, [r7, #8]
 800ae8e:	2100      	movs	r1, #0
 800ae90:	68f8      	ldr	r0, [r7, #12]
 800ae92:	f000 fcdc 	bl	800b84e <USBD_LL_Transmit>

  return USBD_OK;
 800ae96:	2300      	movs	r3, #0
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3710      	adds	r7, #16
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}

0800aea0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b084      	sub	sp, #16
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	60f8      	str	r0, [r7, #12]
 800aea8:	60b9      	str	r1, [r7, #8]
 800aeaa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	2203      	movs	r2, #3
 800aeb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	687a      	ldr	r2, [r7, #4]
 800aeb8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	687a      	ldr	r2, [r7, #4]
 800aec0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	68ba      	ldr	r2, [r7, #8]
 800aec8:	2100      	movs	r1, #0
 800aeca:	68f8      	ldr	r0, [r7, #12]
 800aecc:	f000 fce0 	bl	800b890 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aed0:	2300      	movs	r3, #0
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3710      	adds	r7, #16
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}

0800aeda <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800aeda:	b580      	push	{r7, lr}
 800aedc:	b084      	sub	sp, #16
 800aede:	af00      	add	r7, sp, #0
 800aee0:	60f8      	str	r0, [r7, #12]
 800aee2:	60b9      	str	r1, [r7, #8]
 800aee4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	68ba      	ldr	r2, [r7, #8]
 800aeea:	2100      	movs	r1, #0
 800aeec:	68f8      	ldr	r0, [r7, #12]
 800aeee:	f000 fccf 	bl	800b890 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aef2:	2300      	movs	r3, #0
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3710      	adds	r7, #16
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b082      	sub	sp, #8
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2204      	movs	r2, #4
 800af08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800af0c:	2300      	movs	r3, #0
 800af0e:	2200      	movs	r2, #0
 800af10:	2100      	movs	r1, #0
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f000 fc9b 	bl	800b84e <USBD_LL_Transmit>

  return USBD_OK;
 800af18:	2300      	movs	r3, #0
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3708      	adds	r7, #8
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}

0800af22 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800af22:	b580      	push	{r7, lr}
 800af24:	b082      	sub	sp, #8
 800af26:	af00      	add	r7, sp, #0
 800af28:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2205      	movs	r2, #5
 800af2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800af32:	2300      	movs	r3, #0
 800af34:	2200      	movs	r2, #0
 800af36:	2100      	movs	r1, #0
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f000 fca9 	bl	800b890 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800af3e:	2300      	movs	r3, #0
}
 800af40:	4618      	mov	r0, r3
 800af42:	3708      	adds	r7, #8
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}

0800af48 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800af4c:	2200      	movs	r2, #0
 800af4e:	4912      	ldr	r1, [pc, #72]	; (800af98 <MX_USB_DEVICE_Init+0x50>)
 800af50:	4812      	ldr	r0, [pc, #72]	; (800af9c <MX_USB_DEVICE_Init+0x54>)
 800af52:	f7fe fcdd 	bl	8009910 <USBD_Init>
 800af56:	4603      	mov	r3, r0
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d001      	beq.n	800af60 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800af5c:	f7f6 faee 	bl	800153c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800af60:	490f      	ldr	r1, [pc, #60]	; (800afa0 <MX_USB_DEVICE_Init+0x58>)
 800af62:	480e      	ldr	r0, [pc, #56]	; (800af9c <MX_USB_DEVICE_Init+0x54>)
 800af64:	f7fe fd04 	bl	8009970 <USBD_RegisterClass>
 800af68:	4603      	mov	r3, r0
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d001      	beq.n	800af72 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800af6e:	f7f6 fae5 	bl	800153c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800af72:	490c      	ldr	r1, [pc, #48]	; (800afa4 <MX_USB_DEVICE_Init+0x5c>)
 800af74:	4809      	ldr	r0, [pc, #36]	; (800af9c <MX_USB_DEVICE_Init+0x54>)
 800af76:	f7fe fc3b 	bl	80097f0 <USBD_CDC_RegisterInterface>
 800af7a:	4603      	mov	r3, r0
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d001      	beq.n	800af84 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800af80:	f7f6 fadc 	bl	800153c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800af84:	4805      	ldr	r0, [pc, #20]	; (800af9c <MX_USB_DEVICE_Init+0x54>)
 800af86:	f7fe fd29 	bl	80099dc <USBD_Start>
 800af8a:	4603      	mov	r3, r0
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d001      	beq.n	800af94 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800af90:	f7f6 fad4 	bl	800153c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800af94:	bf00      	nop
 800af96:	bd80      	pop	{r7, pc}
 800af98:	200000bc 	.word	0x200000bc
 800af9c:	2000047c 	.word	0x2000047c
 800afa0:	20000028 	.word	0x20000028
 800afa4:	200000a8 	.word	0x200000a8

0800afa8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800afac:	2200      	movs	r2, #0
 800afae:	4905      	ldr	r1, [pc, #20]	; (800afc4 <CDC_Init_FS+0x1c>)
 800afb0:	4805      	ldr	r0, [pc, #20]	; (800afc8 <CDC_Init_FS+0x20>)
 800afb2:	f7fe fc37 	bl	8009824 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800afb6:	4905      	ldr	r1, [pc, #20]	; (800afcc <CDC_Init_FS+0x24>)
 800afb8:	4803      	ldr	r0, [pc, #12]	; (800afc8 <CDC_Init_FS+0x20>)
 800afba:	f7fe fc55 	bl	8009868 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800afbe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	bd80      	pop	{r7, pc}
 800afc4:	20000f58 	.word	0x20000f58
 800afc8:	2000047c 	.word	0x2000047c
 800afcc:	20000758 	.word	0x20000758

0800afd0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800afd0:	b480      	push	{r7}
 800afd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800afd4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	46bd      	mov	sp, r7
 800afda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afde:	4770      	bx	lr

0800afe0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800afe0:	b480      	push	{r7}
 800afe2:	b083      	sub	sp, #12
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	4603      	mov	r3, r0
 800afe8:	6039      	str	r1, [r7, #0]
 800afea:	71fb      	strb	r3, [r7, #7]
 800afec:	4613      	mov	r3, r2
 800afee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800aff0:	79fb      	ldrb	r3, [r7, #7]
 800aff2:	2b23      	cmp	r3, #35	; 0x23
 800aff4:	d84a      	bhi.n	800b08c <CDC_Control_FS+0xac>
 800aff6:	a201      	add	r2, pc, #4	; (adr r2, 800affc <CDC_Control_FS+0x1c>)
 800aff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800affc:	0800b08d 	.word	0x0800b08d
 800b000:	0800b08d 	.word	0x0800b08d
 800b004:	0800b08d 	.word	0x0800b08d
 800b008:	0800b08d 	.word	0x0800b08d
 800b00c:	0800b08d 	.word	0x0800b08d
 800b010:	0800b08d 	.word	0x0800b08d
 800b014:	0800b08d 	.word	0x0800b08d
 800b018:	0800b08d 	.word	0x0800b08d
 800b01c:	0800b08d 	.word	0x0800b08d
 800b020:	0800b08d 	.word	0x0800b08d
 800b024:	0800b08d 	.word	0x0800b08d
 800b028:	0800b08d 	.word	0x0800b08d
 800b02c:	0800b08d 	.word	0x0800b08d
 800b030:	0800b08d 	.word	0x0800b08d
 800b034:	0800b08d 	.word	0x0800b08d
 800b038:	0800b08d 	.word	0x0800b08d
 800b03c:	0800b08d 	.word	0x0800b08d
 800b040:	0800b08d 	.word	0x0800b08d
 800b044:	0800b08d 	.word	0x0800b08d
 800b048:	0800b08d 	.word	0x0800b08d
 800b04c:	0800b08d 	.word	0x0800b08d
 800b050:	0800b08d 	.word	0x0800b08d
 800b054:	0800b08d 	.word	0x0800b08d
 800b058:	0800b08d 	.word	0x0800b08d
 800b05c:	0800b08d 	.word	0x0800b08d
 800b060:	0800b08d 	.word	0x0800b08d
 800b064:	0800b08d 	.word	0x0800b08d
 800b068:	0800b08d 	.word	0x0800b08d
 800b06c:	0800b08d 	.word	0x0800b08d
 800b070:	0800b08d 	.word	0x0800b08d
 800b074:	0800b08d 	.word	0x0800b08d
 800b078:	0800b08d 	.word	0x0800b08d
 800b07c:	0800b08d 	.word	0x0800b08d
 800b080:	0800b08d 	.word	0x0800b08d
 800b084:	0800b08d 	.word	0x0800b08d
 800b088:	0800b08d 	.word	0x0800b08d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b08c:	bf00      	nop
  }

  return (USBD_OK);
 800b08e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b090:	4618      	mov	r0, r3
 800b092:	370c      	adds	r7, #12
 800b094:	46bd      	mov	sp, r7
 800b096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09a:	4770      	bx	lr

0800b09c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b082      	sub	sp, #8
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
 800b0a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b0a6:	6879      	ldr	r1, [r7, #4]
 800b0a8:	4805      	ldr	r0, [pc, #20]	; (800b0c0 <CDC_Receive_FS+0x24>)
 800b0aa:	f7fe fbdd 	bl	8009868 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b0ae:	4804      	ldr	r0, [pc, #16]	; (800b0c0 <CDC_Receive_FS+0x24>)
 800b0b0:	f7fe fbf8 	bl	80098a4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b0b4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3708      	adds	r7, #8
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	2000047c 	.word	0x2000047c

0800b0c4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b087      	sub	sp, #28
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	60f8      	str	r0, [r7, #12]
 800b0cc:	60b9      	str	r1, [r7, #8]
 800b0ce:	4613      	mov	r3, r2
 800b0d0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b0d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	371c      	adds	r7, #28
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e4:	4770      	bx	lr
	...

0800b0e8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b083      	sub	sp, #12
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	6039      	str	r1, [r7, #0]
 800b0f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	2212      	movs	r2, #18
 800b0f8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b0fa:	4b03      	ldr	r3, [pc, #12]	; (800b108 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	370c      	adds	r7, #12
 800b100:	46bd      	mov	sp, r7
 800b102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b106:	4770      	bx	lr
 800b108:	200000dc 	.word	0x200000dc

0800b10c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b10c:	b480      	push	{r7}
 800b10e:	b083      	sub	sp, #12
 800b110:	af00      	add	r7, sp, #0
 800b112:	4603      	mov	r3, r0
 800b114:	6039      	str	r1, [r7, #0]
 800b116:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	2204      	movs	r2, #4
 800b11c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b11e:	4b03      	ldr	r3, [pc, #12]	; (800b12c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b120:	4618      	mov	r0, r3
 800b122:	370c      	adds	r7, #12
 800b124:	46bd      	mov	sp, r7
 800b126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12a:	4770      	bx	lr
 800b12c:	200000fc 	.word	0x200000fc

0800b130 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b082      	sub	sp, #8
 800b134:	af00      	add	r7, sp, #0
 800b136:	4603      	mov	r3, r0
 800b138:	6039      	str	r1, [r7, #0]
 800b13a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b13c:	79fb      	ldrb	r3, [r7, #7]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d105      	bne.n	800b14e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b142:	683a      	ldr	r2, [r7, #0]
 800b144:	4907      	ldr	r1, [pc, #28]	; (800b164 <USBD_FS_ProductStrDescriptor+0x34>)
 800b146:	4808      	ldr	r0, [pc, #32]	; (800b168 <USBD_FS_ProductStrDescriptor+0x38>)
 800b148:	f7ff fe1e 	bl	800ad88 <USBD_GetString>
 800b14c:	e004      	b.n	800b158 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b14e:	683a      	ldr	r2, [r7, #0]
 800b150:	4904      	ldr	r1, [pc, #16]	; (800b164 <USBD_FS_ProductStrDescriptor+0x34>)
 800b152:	4805      	ldr	r0, [pc, #20]	; (800b168 <USBD_FS_ProductStrDescriptor+0x38>)
 800b154:	f7ff fe18 	bl	800ad88 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b158:	4b02      	ldr	r3, [pc, #8]	; (800b164 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3708      	adds	r7, #8
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}
 800b162:	bf00      	nop
 800b164:	20001758 	.word	0x20001758
 800b168:	08010378 	.word	0x08010378

0800b16c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b082      	sub	sp, #8
 800b170:	af00      	add	r7, sp, #0
 800b172:	4603      	mov	r3, r0
 800b174:	6039      	str	r1, [r7, #0]
 800b176:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b178:	683a      	ldr	r2, [r7, #0]
 800b17a:	4904      	ldr	r1, [pc, #16]	; (800b18c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b17c:	4804      	ldr	r0, [pc, #16]	; (800b190 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b17e:	f7ff fe03 	bl	800ad88 <USBD_GetString>
  return USBD_StrDesc;
 800b182:	4b02      	ldr	r3, [pc, #8]	; (800b18c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b184:	4618      	mov	r0, r3
 800b186:	3708      	adds	r7, #8
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}
 800b18c:	20001758 	.word	0x20001758
 800b190:	08010390 	.word	0x08010390

0800b194 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b082      	sub	sp, #8
 800b198:	af00      	add	r7, sp, #0
 800b19a:	4603      	mov	r3, r0
 800b19c:	6039      	str	r1, [r7, #0]
 800b19e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	221a      	movs	r2, #26
 800b1a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b1a6:	f000 f855 	bl	800b254 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b1aa:	4b02      	ldr	r3, [pc, #8]	; (800b1b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3708      	adds	r7, #8
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}
 800b1b4:	20000100 	.word	0x20000100

0800b1b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b082      	sub	sp, #8
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	4603      	mov	r3, r0
 800b1c0:	6039      	str	r1, [r7, #0]
 800b1c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b1c4:	79fb      	ldrb	r3, [r7, #7]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d105      	bne.n	800b1d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b1ca:	683a      	ldr	r2, [r7, #0]
 800b1cc:	4907      	ldr	r1, [pc, #28]	; (800b1ec <USBD_FS_ConfigStrDescriptor+0x34>)
 800b1ce:	4808      	ldr	r0, [pc, #32]	; (800b1f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b1d0:	f7ff fdda 	bl	800ad88 <USBD_GetString>
 800b1d4:	e004      	b.n	800b1e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b1d6:	683a      	ldr	r2, [r7, #0]
 800b1d8:	4904      	ldr	r1, [pc, #16]	; (800b1ec <USBD_FS_ConfigStrDescriptor+0x34>)
 800b1da:	4805      	ldr	r0, [pc, #20]	; (800b1f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b1dc:	f7ff fdd4 	bl	800ad88 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b1e0:	4b02      	ldr	r3, [pc, #8]	; (800b1ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3708      	adds	r7, #8
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
 800b1ea:	bf00      	nop
 800b1ec:	20001758 	.word	0x20001758
 800b1f0:	080103a4 	.word	0x080103a4

0800b1f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b082      	sub	sp, #8
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	6039      	str	r1, [r7, #0]
 800b1fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b200:	79fb      	ldrb	r3, [r7, #7]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d105      	bne.n	800b212 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b206:	683a      	ldr	r2, [r7, #0]
 800b208:	4907      	ldr	r1, [pc, #28]	; (800b228 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b20a:	4808      	ldr	r0, [pc, #32]	; (800b22c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b20c:	f7ff fdbc 	bl	800ad88 <USBD_GetString>
 800b210:	e004      	b.n	800b21c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b212:	683a      	ldr	r2, [r7, #0]
 800b214:	4904      	ldr	r1, [pc, #16]	; (800b228 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b216:	4805      	ldr	r0, [pc, #20]	; (800b22c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b218:	f7ff fdb6 	bl	800ad88 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b21c:	4b02      	ldr	r3, [pc, #8]	; (800b228 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b21e:	4618      	mov	r0, r3
 800b220:	3708      	adds	r7, #8
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}
 800b226:	bf00      	nop
 800b228:	20001758 	.word	0x20001758
 800b22c:	080103b0 	.word	0x080103b0

0800b230 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b230:	b480      	push	{r7}
 800b232:	b083      	sub	sp, #12
 800b234:	af00      	add	r7, sp, #0
 800b236:	4603      	mov	r3, r0
 800b238:	6039      	str	r1, [r7, #0]
 800b23a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	220c      	movs	r2, #12
 800b240:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b242:	4b03      	ldr	r3, [pc, #12]	; (800b250 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b244:	4618      	mov	r0, r3
 800b246:	370c      	adds	r7, #12
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr
 800b250:	200000f0 	.word	0x200000f0

0800b254 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b084      	sub	sp, #16
 800b258:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b25a:	4b0f      	ldr	r3, [pc, #60]	; (800b298 <Get_SerialNum+0x44>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b260:	4b0e      	ldr	r3, [pc, #56]	; (800b29c <Get_SerialNum+0x48>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b266:	4b0e      	ldr	r3, [pc, #56]	; (800b2a0 <Get_SerialNum+0x4c>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b26c:	68fa      	ldr	r2, [r7, #12]
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	4413      	add	r3, r2
 800b272:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d009      	beq.n	800b28e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b27a:	2208      	movs	r2, #8
 800b27c:	4909      	ldr	r1, [pc, #36]	; (800b2a4 <Get_SerialNum+0x50>)
 800b27e:	68f8      	ldr	r0, [r7, #12]
 800b280:	f000 f814 	bl	800b2ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b284:	2204      	movs	r2, #4
 800b286:	4908      	ldr	r1, [pc, #32]	; (800b2a8 <Get_SerialNum+0x54>)
 800b288:	68b8      	ldr	r0, [r7, #8]
 800b28a:	f000 f80f 	bl	800b2ac <IntToUnicode>
  }
}
 800b28e:	bf00      	nop
 800b290:	3710      	adds	r7, #16
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
 800b296:	bf00      	nop
 800b298:	1fff7a10 	.word	0x1fff7a10
 800b29c:	1fff7a14 	.word	0x1fff7a14
 800b2a0:	1fff7a18 	.word	0x1fff7a18
 800b2a4:	20000102 	.word	0x20000102
 800b2a8:	20000112 	.word	0x20000112

0800b2ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	b087      	sub	sp, #28
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	60f8      	str	r0, [r7, #12]
 800b2b4:	60b9      	str	r1, [r7, #8]
 800b2b6:	4613      	mov	r3, r2
 800b2b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b2be:	2300      	movs	r3, #0
 800b2c0:	75fb      	strb	r3, [r7, #23]
 800b2c2:	e027      	b.n	800b314 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	0f1b      	lsrs	r3, r3, #28
 800b2c8:	2b09      	cmp	r3, #9
 800b2ca:	d80b      	bhi.n	800b2e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	0f1b      	lsrs	r3, r3, #28
 800b2d0:	b2da      	uxtb	r2, r3
 800b2d2:	7dfb      	ldrb	r3, [r7, #23]
 800b2d4:	005b      	lsls	r3, r3, #1
 800b2d6:	4619      	mov	r1, r3
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	440b      	add	r3, r1
 800b2dc:	3230      	adds	r2, #48	; 0x30
 800b2de:	b2d2      	uxtb	r2, r2
 800b2e0:	701a      	strb	r2, [r3, #0]
 800b2e2:	e00a      	b.n	800b2fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	0f1b      	lsrs	r3, r3, #28
 800b2e8:	b2da      	uxtb	r2, r3
 800b2ea:	7dfb      	ldrb	r3, [r7, #23]
 800b2ec:	005b      	lsls	r3, r3, #1
 800b2ee:	4619      	mov	r1, r3
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	440b      	add	r3, r1
 800b2f4:	3237      	adds	r2, #55	; 0x37
 800b2f6:	b2d2      	uxtb	r2, r2
 800b2f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	011b      	lsls	r3, r3, #4
 800b2fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b300:	7dfb      	ldrb	r3, [r7, #23]
 800b302:	005b      	lsls	r3, r3, #1
 800b304:	3301      	adds	r3, #1
 800b306:	68ba      	ldr	r2, [r7, #8]
 800b308:	4413      	add	r3, r2
 800b30a:	2200      	movs	r2, #0
 800b30c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b30e:	7dfb      	ldrb	r3, [r7, #23]
 800b310:	3301      	adds	r3, #1
 800b312:	75fb      	strb	r3, [r7, #23]
 800b314:	7dfa      	ldrb	r2, [r7, #23]
 800b316:	79fb      	ldrb	r3, [r7, #7]
 800b318:	429a      	cmp	r2, r3
 800b31a:	d3d3      	bcc.n	800b2c4 <IntToUnicode+0x18>
  }
}
 800b31c:	bf00      	nop
 800b31e:	bf00      	nop
 800b320:	371c      	adds	r7, #28
 800b322:	46bd      	mov	sp, r7
 800b324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b328:	4770      	bx	lr
	...

0800b32c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b0a0      	sub	sp, #128	; 0x80
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b334:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800b338:	2200      	movs	r2, #0
 800b33a:	601a      	str	r2, [r3, #0]
 800b33c:	605a      	str	r2, [r3, #4]
 800b33e:	609a      	str	r2, [r3, #8]
 800b340:	60da      	str	r2, [r3, #12]
 800b342:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b344:	f107 0310 	add.w	r3, r7, #16
 800b348:	225c      	movs	r2, #92	; 0x5c
 800b34a:	2100      	movs	r1, #0
 800b34c:	4618      	mov	r0, r3
 800b34e:	f000 fb8f 	bl	800ba70 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b35a:	d149      	bne.n	800b3f0 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800b35c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b360:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800b362:	2300      	movs	r3, #0
 800b364:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b366:	f107 0310 	add.w	r3, r7, #16
 800b36a:	4618      	mov	r0, r3
 800b36c:	f7f8 ffd2 	bl	8004314 <HAL_RCCEx_PeriphCLKConfig>
 800b370:	4603      	mov	r3, r0
 800b372:	2b00      	cmp	r3, #0
 800b374:	d001      	beq.n	800b37a <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800b376:	f7f6 f8e1 	bl	800153c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b37a:	2300      	movs	r3, #0
 800b37c:	60fb      	str	r3, [r7, #12]
 800b37e:	4b1e      	ldr	r3, [pc, #120]	; (800b3f8 <HAL_PCD_MspInit+0xcc>)
 800b380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b382:	4a1d      	ldr	r2, [pc, #116]	; (800b3f8 <HAL_PCD_MspInit+0xcc>)
 800b384:	f043 0301 	orr.w	r3, r3, #1
 800b388:	6313      	str	r3, [r2, #48]	; 0x30
 800b38a:	4b1b      	ldr	r3, [pc, #108]	; (800b3f8 <HAL_PCD_MspInit+0xcc>)
 800b38c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b38e:	f003 0301 	and.w	r3, r3, #1
 800b392:	60fb      	str	r3, [r7, #12]
 800b394:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b396:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b39a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b39c:	2302      	movs	r3, #2
 800b39e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b3a4:	2303      	movs	r3, #3
 800b3a6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b3a8:	230a      	movs	r3, #10
 800b3aa:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b3ac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800b3b0:	4619      	mov	r1, r3
 800b3b2:	4812      	ldr	r0, [pc, #72]	; (800b3fc <HAL_PCD_MspInit+0xd0>)
 800b3b4:	f7f7 f912 	bl	80025dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b3b8:	4b0f      	ldr	r3, [pc, #60]	; (800b3f8 <HAL_PCD_MspInit+0xcc>)
 800b3ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3bc:	4a0e      	ldr	r2, [pc, #56]	; (800b3f8 <HAL_PCD_MspInit+0xcc>)
 800b3be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3c2:	6353      	str	r3, [r2, #52]	; 0x34
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	60bb      	str	r3, [r7, #8]
 800b3c8:	4b0b      	ldr	r3, [pc, #44]	; (800b3f8 <HAL_PCD_MspInit+0xcc>)
 800b3ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3cc:	4a0a      	ldr	r2, [pc, #40]	; (800b3f8 <HAL_PCD_MspInit+0xcc>)
 800b3ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b3d2:	6453      	str	r3, [r2, #68]	; 0x44
 800b3d4:	4b08      	ldr	r3, [pc, #32]	; (800b3f8 <HAL_PCD_MspInit+0xcc>)
 800b3d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b3dc:	60bb      	str	r3, [r7, #8]
 800b3de:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	2100      	movs	r1, #0
 800b3e4:	2043      	movs	r0, #67	; 0x43
 800b3e6:	f7f6 fce8 	bl	8001dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b3ea:	2043      	movs	r0, #67	; 0x43
 800b3ec:	f7f6 fd01 	bl	8001df2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b3f0:	bf00      	nop
 800b3f2:	3780      	adds	r7, #128	; 0x80
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}
 800b3f8:	40023800 	.word	0x40023800
 800b3fc:	40020000 	.word	0x40020000

0800b400 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b082      	sub	sp, #8
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b414:	4619      	mov	r1, r3
 800b416:	4610      	mov	r0, r2
 800b418:	f7fe fb2d 	bl	8009a76 <USBD_LL_SetupStage>
}
 800b41c:	bf00      	nop
 800b41e:	3708      	adds	r7, #8
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}

0800b424 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b082      	sub	sp, #8
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
 800b42c:	460b      	mov	r3, r1
 800b42e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b436:	78fa      	ldrb	r2, [r7, #3]
 800b438:	6879      	ldr	r1, [r7, #4]
 800b43a:	4613      	mov	r3, r2
 800b43c:	00db      	lsls	r3, r3, #3
 800b43e:	4413      	add	r3, r2
 800b440:	009b      	lsls	r3, r3, #2
 800b442:	440b      	add	r3, r1
 800b444:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b448:	681a      	ldr	r2, [r3, #0]
 800b44a:	78fb      	ldrb	r3, [r7, #3]
 800b44c:	4619      	mov	r1, r3
 800b44e:	f7fe fb67 	bl	8009b20 <USBD_LL_DataOutStage>
}
 800b452:	bf00      	nop
 800b454:	3708      	adds	r7, #8
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}

0800b45a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b45a:	b580      	push	{r7, lr}
 800b45c:	b082      	sub	sp, #8
 800b45e:	af00      	add	r7, sp, #0
 800b460:	6078      	str	r0, [r7, #4]
 800b462:	460b      	mov	r3, r1
 800b464:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b46c:	78fa      	ldrb	r2, [r7, #3]
 800b46e:	6879      	ldr	r1, [r7, #4]
 800b470:	4613      	mov	r3, r2
 800b472:	00db      	lsls	r3, r3, #3
 800b474:	4413      	add	r3, r2
 800b476:	009b      	lsls	r3, r3, #2
 800b478:	440b      	add	r3, r1
 800b47a:	334c      	adds	r3, #76	; 0x4c
 800b47c:	681a      	ldr	r2, [r3, #0]
 800b47e:	78fb      	ldrb	r3, [r7, #3]
 800b480:	4619      	mov	r1, r3
 800b482:	f7fe fc00 	bl	8009c86 <USBD_LL_DataInStage>
}
 800b486:	bf00      	nop
 800b488:	3708      	adds	r7, #8
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}

0800b48e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b48e:	b580      	push	{r7, lr}
 800b490:	b082      	sub	sp, #8
 800b492:	af00      	add	r7, sp, #0
 800b494:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b49c:	4618      	mov	r0, r3
 800b49e:	f7fe fd34 	bl	8009f0a <USBD_LL_SOF>
}
 800b4a2:	bf00      	nop
 800b4a4:	3708      	adds	r7, #8
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}

0800b4aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4aa:	b580      	push	{r7, lr}
 800b4ac:	b084      	sub	sp, #16
 800b4ae:	af00      	add	r7, sp, #0
 800b4b0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	68db      	ldr	r3, [r3, #12]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d102      	bne.n	800b4c4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	73fb      	strb	r3, [r7, #15]
 800b4c2:	e008      	b.n	800b4d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	68db      	ldr	r3, [r3, #12]
 800b4c8:	2b02      	cmp	r3, #2
 800b4ca:	d102      	bne.n	800b4d2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	73fb      	strb	r3, [r7, #15]
 800b4d0:	e001      	b.n	800b4d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b4d2:	f7f6 f833 	bl	800153c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b4dc:	7bfa      	ldrb	r2, [r7, #15]
 800b4de:	4611      	mov	r1, r2
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f7fe fcd4 	bl	8009e8e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f7fe fc7c 	bl	8009dea <USBD_LL_Reset>
}
 800b4f2:	bf00      	nop
 800b4f4:	3710      	adds	r7, #16
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bd80      	pop	{r7, pc}
	...

0800b4fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b082      	sub	sp, #8
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b50a:	4618      	mov	r0, r3
 800b50c:	f7fe fccf 	bl	8009eae <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	687a      	ldr	r2, [r7, #4]
 800b51c:	6812      	ldr	r2, [r2, #0]
 800b51e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b522:	f043 0301 	orr.w	r3, r3, #1
 800b526:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6a1b      	ldr	r3, [r3, #32]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d005      	beq.n	800b53c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b530:	4b04      	ldr	r3, [pc, #16]	; (800b544 <HAL_PCD_SuspendCallback+0x48>)
 800b532:	691b      	ldr	r3, [r3, #16]
 800b534:	4a03      	ldr	r2, [pc, #12]	; (800b544 <HAL_PCD_SuspendCallback+0x48>)
 800b536:	f043 0306 	orr.w	r3, r3, #6
 800b53a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b53c:	bf00      	nop
 800b53e:	3708      	adds	r7, #8
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}
 800b544:	e000ed00 	.word	0xe000ed00

0800b548 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b082      	sub	sp, #8
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b556:	4618      	mov	r0, r3
 800b558:	f7fe fcbf 	bl	8009eda <USBD_LL_Resume>
}
 800b55c:	bf00      	nop
 800b55e:	3708      	adds	r7, #8
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}

0800b564 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b082      	sub	sp, #8
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	460b      	mov	r3, r1
 800b56e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b576:	78fa      	ldrb	r2, [r7, #3]
 800b578:	4611      	mov	r1, r2
 800b57a:	4618      	mov	r0, r3
 800b57c:	f7fe fd17 	bl	8009fae <USBD_LL_IsoOUTIncomplete>
}
 800b580:	bf00      	nop
 800b582:	3708      	adds	r7, #8
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}

0800b588 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b082      	sub	sp, #8
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
 800b590:	460b      	mov	r3, r1
 800b592:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b59a:	78fa      	ldrb	r2, [r7, #3]
 800b59c:	4611      	mov	r1, r2
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f7fe fcd3 	bl	8009f4a <USBD_LL_IsoINIncomplete>
}
 800b5a4:	bf00      	nop
 800b5a6:	3708      	adds	r7, #8
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}

0800b5ac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b082      	sub	sp, #8
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f7fe fd29 	bl	800a012 <USBD_LL_DevConnected>
}
 800b5c0:	bf00      	nop
 800b5c2:	3708      	adds	r7, #8
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}

0800b5c8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b082      	sub	sp, #8
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f7fe fd26 	bl	800a028 <USBD_LL_DevDisconnected>
}
 800b5dc:	bf00      	nop
 800b5de:	3708      	adds	r7, #8
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}

0800b5e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b082      	sub	sp, #8
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	781b      	ldrb	r3, [r3, #0]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d13c      	bne.n	800b66e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b5f4:	4a20      	ldr	r2, [pc, #128]	; (800b678 <USBD_LL_Init+0x94>)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	4a1e      	ldr	r2, [pc, #120]	; (800b678 <USBD_LL_Init+0x94>)
 800b600:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b604:	4b1c      	ldr	r3, [pc, #112]	; (800b678 <USBD_LL_Init+0x94>)
 800b606:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b60a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800b60c:	4b1a      	ldr	r3, [pc, #104]	; (800b678 <USBD_LL_Init+0x94>)
 800b60e:	2206      	movs	r2, #6
 800b610:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b612:	4b19      	ldr	r3, [pc, #100]	; (800b678 <USBD_LL_Init+0x94>)
 800b614:	2202      	movs	r2, #2
 800b616:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b618:	4b17      	ldr	r3, [pc, #92]	; (800b678 <USBD_LL_Init+0x94>)
 800b61a:	2200      	movs	r2, #0
 800b61c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b61e:	4b16      	ldr	r3, [pc, #88]	; (800b678 <USBD_LL_Init+0x94>)
 800b620:	2202      	movs	r2, #2
 800b622:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b624:	4b14      	ldr	r3, [pc, #80]	; (800b678 <USBD_LL_Init+0x94>)
 800b626:	2200      	movs	r2, #0
 800b628:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b62a:	4b13      	ldr	r3, [pc, #76]	; (800b678 <USBD_LL_Init+0x94>)
 800b62c:	2200      	movs	r2, #0
 800b62e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b630:	4b11      	ldr	r3, [pc, #68]	; (800b678 <USBD_LL_Init+0x94>)
 800b632:	2200      	movs	r2, #0
 800b634:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b636:	4b10      	ldr	r3, [pc, #64]	; (800b678 <USBD_LL_Init+0x94>)
 800b638:	2200      	movs	r2, #0
 800b63a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b63c:	4b0e      	ldr	r3, [pc, #56]	; (800b678 <USBD_LL_Init+0x94>)
 800b63e:	2200      	movs	r2, #0
 800b640:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b642:	480d      	ldr	r0, [pc, #52]	; (800b678 <USBD_LL_Init+0x94>)
 800b644:	f7f7 fa83 	bl	8002b4e <HAL_PCD_Init>
 800b648:	4603      	mov	r3, r0
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d001      	beq.n	800b652 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b64e:	f7f5 ff75 	bl	800153c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b652:	2180      	movs	r1, #128	; 0x80
 800b654:	4808      	ldr	r0, [pc, #32]	; (800b678 <USBD_LL_Init+0x94>)
 800b656:	f7f8 fd0e 	bl	8004076 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b65a:	2240      	movs	r2, #64	; 0x40
 800b65c:	2100      	movs	r1, #0
 800b65e:	4806      	ldr	r0, [pc, #24]	; (800b678 <USBD_LL_Init+0x94>)
 800b660:	f7f8 fcc2 	bl	8003fe8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b664:	2280      	movs	r2, #128	; 0x80
 800b666:	2101      	movs	r1, #1
 800b668:	4803      	ldr	r0, [pc, #12]	; (800b678 <USBD_LL_Init+0x94>)
 800b66a:	f7f8 fcbd 	bl	8003fe8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b66e:	2300      	movs	r3, #0
}
 800b670:	4618      	mov	r0, r3
 800b672:	3708      	adds	r7, #8
 800b674:	46bd      	mov	sp, r7
 800b676:	bd80      	pop	{r7, pc}
 800b678:	20001958 	.word	0x20001958

0800b67c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b084      	sub	sp, #16
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b684:	2300      	movs	r3, #0
 800b686:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b688:	2300      	movs	r3, #0
 800b68a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b692:	4618      	mov	r0, r3
 800b694:	f7f7 fb7f 	bl	8002d96 <HAL_PCD_Start>
 800b698:	4603      	mov	r3, r0
 800b69a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b69c:	7bfb      	ldrb	r3, [r7, #15]
 800b69e:	4618      	mov	r0, r3
 800b6a0:	f000 f990 	bl	800b9c4 <USBD_Get_USB_Status>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3710      	adds	r7, #16
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}

0800b6b2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b6b2:	b580      	push	{r7, lr}
 800b6b4:	b084      	sub	sp, #16
 800b6b6:	af00      	add	r7, sp, #0
 800b6b8:	6078      	str	r0, [r7, #4]
 800b6ba:	4608      	mov	r0, r1
 800b6bc:	4611      	mov	r1, r2
 800b6be:	461a      	mov	r2, r3
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	70fb      	strb	r3, [r7, #3]
 800b6c4:	460b      	mov	r3, r1
 800b6c6:	70bb      	strb	r3, [r7, #2]
 800b6c8:	4613      	mov	r3, r2
 800b6ca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b6da:	78bb      	ldrb	r3, [r7, #2]
 800b6dc:	883a      	ldrh	r2, [r7, #0]
 800b6de:	78f9      	ldrb	r1, [r7, #3]
 800b6e0:	f7f8 f87d 	bl	80037de <HAL_PCD_EP_Open>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6e8:	7bfb      	ldrb	r3, [r7, #15]
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f000 f96a 	bl	800b9c4 <USBD_Get_USB_Status>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3710      	adds	r7, #16
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}

0800b6fe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b6fe:	b580      	push	{r7, lr}
 800b700:	b084      	sub	sp, #16
 800b702:	af00      	add	r7, sp, #0
 800b704:	6078      	str	r0, [r7, #4]
 800b706:	460b      	mov	r3, r1
 800b708:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b70a:	2300      	movs	r3, #0
 800b70c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b70e:	2300      	movs	r3, #0
 800b710:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b718:	78fa      	ldrb	r2, [r7, #3]
 800b71a:	4611      	mov	r1, r2
 800b71c:	4618      	mov	r0, r3
 800b71e:	f7f8 f8c6 	bl	80038ae <HAL_PCD_EP_Close>
 800b722:	4603      	mov	r3, r0
 800b724:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b726:	7bfb      	ldrb	r3, [r7, #15]
 800b728:	4618      	mov	r0, r3
 800b72a:	f000 f94b 	bl	800b9c4 <USBD_Get_USB_Status>
 800b72e:	4603      	mov	r3, r0
 800b730:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b732:	7bbb      	ldrb	r3, [r7, #14]
}
 800b734:	4618      	mov	r0, r3
 800b736:	3710      	adds	r7, #16
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}

0800b73c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b084      	sub	sp, #16
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
 800b744:	460b      	mov	r3, r1
 800b746:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b748:	2300      	movs	r3, #0
 800b74a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b74c:	2300      	movs	r3, #0
 800b74e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b756:	78fa      	ldrb	r2, [r7, #3]
 800b758:	4611      	mov	r1, r2
 800b75a:	4618      	mov	r0, r3
 800b75c:	f7f8 f99e 	bl	8003a9c <HAL_PCD_EP_SetStall>
 800b760:	4603      	mov	r3, r0
 800b762:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b764:	7bfb      	ldrb	r3, [r7, #15]
 800b766:	4618      	mov	r0, r3
 800b768:	f000 f92c 	bl	800b9c4 <USBD_Get_USB_Status>
 800b76c:	4603      	mov	r3, r0
 800b76e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b770:	7bbb      	ldrb	r3, [r7, #14]
}
 800b772:	4618      	mov	r0, r3
 800b774:	3710      	adds	r7, #16
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}

0800b77a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b77a:	b580      	push	{r7, lr}
 800b77c:	b084      	sub	sp, #16
 800b77e:	af00      	add	r7, sp, #0
 800b780:	6078      	str	r0, [r7, #4]
 800b782:	460b      	mov	r3, r1
 800b784:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b786:	2300      	movs	r3, #0
 800b788:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b78a:	2300      	movs	r3, #0
 800b78c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b794:	78fa      	ldrb	r2, [r7, #3]
 800b796:	4611      	mov	r1, r2
 800b798:	4618      	mov	r0, r3
 800b79a:	f7f8 f9e3 	bl	8003b64 <HAL_PCD_EP_ClrStall>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7a2:	7bfb      	ldrb	r3, [r7, #15]
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f000 f90d 	bl	800b9c4 <USBD_Get_USB_Status>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b7ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	3710      	adds	r7, #16
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}

0800b7b8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	b085      	sub	sp, #20
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
 800b7c0:	460b      	mov	r3, r1
 800b7c2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b7ca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b7cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	da0b      	bge.n	800b7ec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b7d4:	78fb      	ldrb	r3, [r7, #3]
 800b7d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b7da:	68f9      	ldr	r1, [r7, #12]
 800b7dc:	4613      	mov	r3, r2
 800b7de:	00db      	lsls	r3, r3, #3
 800b7e0:	4413      	add	r3, r2
 800b7e2:	009b      	lsls	r3, r3, #2
 800b7e4:	440b      	add	r3, r1
 800b7e6:	333e      	adds	r3, #62	; 0x3e
 800b7e8:	781b      	ldrb	r3, [r3, #0]
 800b7ea:	e00b      	b.n	800b804 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b7ec:	78fb      	ldrb	r3, [r7, #3]
 800b7ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b7f2:	68f9      	ldr	r1, [r7, #12]
 800b7f4:	4613      	mov	r3, r2
 800b7f6:	00db      	lsls	r3, r3, #3
 800b7f8:	4413      	add	r3, r2
 800b7fa:	009b      	lsls	r3, r3, #2
 800b7fc:	440b      	add	r3, r1
 800b7fe:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800b802:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b804:	4618      	mov	r0, r3
 800b806:	3714      	adds	r7, #20
 800b808:	46bd      	mov	sp, r7
 800b80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80e:	4770      	bx	lr

0800b810 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b084      	sub	sp, #16
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
 800b818:	460b      	mov	r3, r1
 800b81a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b81c:	2300      	movs	r3, #0
 800b81e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b820:	2300      	movs	r3, #0
 800b822:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b82a:	78fa      	ldrb	r2, [r7, #3]
 800b82c:	4611      	mov	r1, r2
 800b82e:	4618      	mov	r0, r3
 800b830:	f7f7 ffb0 	bl	8003794 <HAL_PCD_SetAddress>
 800b834:	4603      	mov	r3, r0
 800b836:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b838:	7bfb      	ldrb	r3, [r7, #15]
 800b83a:	4618      	mov	r0, r3
 800b83c:	f000 f8c2 	bl	800b9c4 <USBD_Get_USB_Status>
 800b840:	4603      	mov	r3, r0
 800b842:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b844:	7bbb      	ldrb	r3, [r7, #14]
}
 800b846:	4618      	mov	r0, r3
 800b848:	3710      	adds	r7, #16
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bd80      	pop	{r7, pc}

0800b84e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b84e:	b580      	push	{r7, lr}
 800b850:	b086      	sub	sp, #24
 800b852:	af00      	add	r7, sp, #0
 800b854:	60f8      	str	r0, [r7, #12]
 800b856:	607a      	str	r2, [r7, #4]
 800b858:	603b      	str	r3, [r7, #0]
 800b85a:	460b      	mov	r3, r1
 800b85c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b85e:	2300      	movs	r3, #0
 800b860:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b862:	2300      	movs	r3, #0
 800b864:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b86c:	7af9      	ldrb	r1, [r7, #11]
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	687a      	ldr	r2, [r7, #4]
 800b872:	f7f8 f8c9 	bl	8003a08 <HAL_PCD_EP_Transmit>
 800b876:	4603      	mov	r3, r0
 800b878:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b87a:	7dfb      	ldrb	r3, [r7, #23]
 800b87c:	4618      	mov	r0, r3
 800b87e:	f000 f8a1 	bl	800b9c4 <USBD_Get_USB_Status>
 800b882:	4603      	mov	r3, r0
 800b884:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b886:	7dbb      	ldrb	r3, [r7, #22]
}
 800b888:	4618      	mov	r0, r3
 800b88a:	3718      	adds	r7, #24
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd80      	pop	{r7, pc}

0800b890 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b086      	sub	sp, #24
 800b894:	af00      	add	r7, sp, #0
 800b896:	60f8      	str	r0, [r7, #12]
 800b898:	607a      	str	r2, [r7, #4]
 800b89a:	603b      	str	r3, [r7, #0]
 800b89c:	460b      	mov	r3, r1
 800b89e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b8ae:	7af9      	ldrb	r1, [r7, #11]
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	687a      	ldr	r2, [r7, #4]
 800b8b4:	f7f8 f845 	bl	8003942 <HAL_PCD_EP_Receive>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8bc:	7dfb      	ldrb	r3, [r7, #23]
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f000 f880 	bl	800b9c4 <USBD_Get_USB_Status>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b8c8:	7dbb      	ldrb	r3, [r7, #22]
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	3718      	adds	r7, #24
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}

0800b8d2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b8d2:	b580      	push	{r7, lr}
 800b8d4:	b082      	sub	sp, #8
 800b8d6:	af00      	add	r7, sp, #0
 800b8d8:	6078      	str	r0, [r7, #4]
 800b8da:	460b      	mov	r3, r1
 800b8dc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b8e4:	78fa      	ldrb	r2, [r7, #3]
 800b8e6:	4611      	mov	r1, r2
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f7f8 f875 	bl	80039d8 <HAL_PCD_EP_GetRxCount>
 800b8ee:	4603      	mov	r3, r0
}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	3708      	adds	r7, #8
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd80      	pop	{r7, pc}

0800b8f8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b082      	sub	sp, #8
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
 800b900:	460b      	mov	r3, r1
 800b902:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800b904:	78fb      	ldrb	r3, [r7, #3]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d002      	beq.n	800b910 <HAL_PCDEx_LPM_Callback+0x18>
 800b90a:	2b01      	cmp	r3, #1
 800b90c:	d01f      	beq.n	800b94e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800b90e:	e03b      	b.n	800b988 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6a1b      	ldr	r3, [r3, #32]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d007      	beq.n	800b928 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800b918:	f7f5 fc2a 	bl	8001170 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b91c:	4b1c      	ldr	r3, [pc, #112]	; (800b990 <HAL_PCDEx_LPM_Callback+0x98>)
 800b91e:	691b      	ldr	r3, [r3, #16]
 800b920:	4a1b      	ldr	r2, [pc, #108]	; (800b990 <HAL_PCDEx_LPM_Callback+0x98>)
 800b922:	f023 0306 	bic.w	r3, r3, #6
 800b926:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	687a      	ldr	r2, [r7, #4]
 800b934:	6812      	ldr	r2, [r2, #0]
 800b936:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b93a:	f023 0301 	bic.w	r3, r3, #1
 800b93e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b946:	4618      	mov	r0, r3
 800b948:	f7fe fac7 	bl	8009eda <USBD_LL_Resume>
    break;
 800b94c:	e01c      	b.n	800b988 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	687a      	ldr	r2, [r7, #4]
 800b95a:	6812      	ldr	r2, [r2, #0]
 800b95c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b960:	f043 0301 	orr.w	r3, r3, #1
 800b964:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b96c:	4618      	mov	r0, r3
 800b96e:	f7fe fa9e 	bl	8009eae <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	6a1b      	ldr	r3, [r3, #32]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d005      	beq.n	800b986 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b97a:	4b05      	ldr	r3, [pc, #20]	; (800b990 <HAL_PCDEx_LPM_Callback+0x98>)
 800b97c:	691b      	ldr	r3, [r3, #16]
 800b97e:	4a04      	ldr	r2, [pc, #16]	; (800b990 <HAL_PCDEx_LPM_Callback+0x98>)
 800b980:	f043 0306 	orr.w	r3, r3, #6
 800b984:	6113      	str	r3, [r2, #16]
    break;
 800b986:	bf00      	nop
}
 800b988:	bf00      	nop
 800b98a:	3708      	adds	r7, #8
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}
 800b990:	e000ed00 	.word	0xe000ed00

0800b994 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b994:	b480      	push	{r7}
 800b996:	b083      	sub	sp, #12
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b99c:	4b03      	ldr	r3, [pc, #12]	; (800b9ac <USBD_static_malloc+0x18>)
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	370c      	adds	r7, #12
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a8:	4770      	bx	lr
 800b9aa:	bf00      	nop
 800b9ac:	20001e64 	.word	0x20001e64

0800b9b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b083      	sub	sp, #12
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]

}
 800b9b8:	bf00      	nop
 800b9ba:	370c      	adds	r7, #12
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c2:	4770      	bx	lr

0800b9c4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	b085      	sub	sp, #20
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b9d2:	79fb      	ldrb	r3, [r7, #7]
 800b9d4:	2b03      	cmp	r3, #3
 800b9d6:	d817      	bhi.n	800ba08 <USBD_Get_USB_Status+0x44>
 800b9d8:	a201      	add	r2, pc, #4	; (adr r2, 800b9e0 <USBD_Get_USB_Status+0x1c>)
 800b9da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9de:	bf00      	nop
 800b9e0:	0800b9f1 	.word	0x0800b9f1
 800b9e4:	0800b9f7 	.word	0x0800b9f7
 800b9e8:	0800b9fd 	.word	0x0800b9fd
 800b9ec:	0800ba03 	.word	0x0800ba03
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	73fb      	strb	r3, [r7, #15]
    break;
 800b9f4:	e00b      	b.n	800ba0e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b9f6:	2303      	movs	r3, #3
 800b9f8:	73fb      	strb	r3, [r7, #15]
    break;
 800b9fa:	e008      	b.n	800ba0e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	73fb      	strb	r3, [r7, #15]
    break;
 800ba00:	e005      	b.n	800ba0e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ba02:	2303      	movs	r3, #3
 800ba04:	73fb      	strb	r3, [r7, #15]
    break;
 800ba06:	e002      	b.n	800ba0e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ba08:	2303      	movs	r3, #3
 800ba0a:	73fb      	strb	r3, [r7, #15]
    break;
 800ba0c:	bf00      	nop
  }
  return usb_status;
 800ba0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3714      	adds	r7, #20
 800ba14:	46bd      	mov	sp, r7
 800ba16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1a:	4770      	bx	lr

0800ba1c <__errno>:
 800ba1c:	4b01      	ldr	r3, [pc, #4]	; (800ba24 <__errno+0x8>)
 800ba1e:	6818      	ldr	r0, [r3, #0]
 800ba20:	4770      	bx	lr
 800ba22:	bf00      	nop
 800ba24:	2000011c 	.word	0x2000011c

0800ba28 <__libc_init_array>:
 800ba28:	b570      	push	{r4, r5, r6, lr}
 800ba2a:	4d0d      	ldr	r5, [pc, #52]	; (800ba60 <__libc_init_array+0x38>)
 800ba2c:	4c0d      	ldr	r4, [pc, #52]	; (800ba64 <__libc_init_array+0x3c>)
 800ba2e:	1b64      	subs	r4, r4, r5
 800ba30:	10a4      	asrs	r4, r4, #2
 800ba32:	2600      	movs	r6, #0
 800ba34:	42a6      	cmp	r6, r4
 800ba36:	d109      	bne.n	800ba4c <__libc_init_array+0x24>
 800ba38:	4d0b      	ldr	r5, [pc, #44]	; (800ba68 <__libc_init_array+0x40>)
 800ba3a:	4c0c      	ldr	r4, [pc, #48]	; (800ba6c <__libc_init_array+0x44>)
 800ba3c:	f004 fc90 	bl	8010360 <_init>
 800ba40:	1b64      	subs	r4, r4, r5
 800ba42:	10a4      	asrs	r4, r4, #2
 800ba44:	2600      	movs	r6, #0
 800ba46:	42a6      	cmp	r6, r4
 800ba48:	d105      	bne.n	800ba56 <__libc_init_array+0x2e>
 800ba4a:	bd70      	pop	{r4, r5, r6, pc}
 800ba4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba50:	4798      	blx	r3
 800ba52:	3601      	adds	r6, #1
 800ba54:	e7ee      	b.n	800ba34 <__libc_init_array+0xc>
 800ba56:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba5a:	4798      	blx	r3
 800ba5c:	3601      	adds	r6, #1
 800ba5e:	e7f2      	b.n	800ba46 <__libc_init_array+0x1e>
 800ba60:	0801088c 	.word	0x0801088c
 800ba64:	0801088c 	.word	0x0801088c
 800ba68:	0801088c 	.word	0x0801088c
 800ba6c:	08010890 	.word	0x08010890

0800ba70 <memset>:
 800ba70:	4402      	add	r2, r0
 800ba72:	4603      	mov	r3, r0
 800ba74:	4293      	cmp	r3, r2
 800ba76:	d100      	bne.n	800ba7a <memset+0xa>
 800ba78:	4770      	bx	lr
 800ba7a:	f803 1b01 	strb.w	r1, [r3], #1
 800ba7e:	e7f9      	b.n	800ba74 <memset+0x4>

0800ba80 <__cvt>:
 800ba80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ba84:	ec55 4b10 	vmov	r4, r5, d0
 800ba88:	2d00      	cmp	r5, #0
 800ba8a:	460e      	mov	r6, r1
 800ba8c:	4619      	mov	r1, r3
 800ba8e:	462b      	mov	r3, r5
 800ba90:	bfbb      	ittet	lt
 800ba92:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ba96:	461d      	movlt	r5, r3
 800ba98:	2300      	movge	r3, #0
 800ba9a:	232d      	movlt	r3, #45	; 0x2d
 800ba9c:	700b      	strb	r3, [r1, #0]
 800ba9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800baa0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800baa4:	4691      	mov	r9, r2
 800baa6:	f023 0820 	bic.w	r8, r3, #32
 800baaa:	bfbc      	itt	lt
 800baac:	4622      	movlt	r2, r4
 800baae:	4614      	movlt	r4, r2
 800bab0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bab4:	d005      	beq.n	800bac2 <__cvt+0x42>
 800bab6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800baba:	d100      	bne.n	800babe <__cvt+0x3e>
 800babc:	3601      	adds	r6, #1
 800babe:	2102      	movs	r1, #2
 800bac0:	e000      	b.n	800bac4 <__cvt+0x44>
 800bac2:	2103      	movs	r1, #3
 800bac4:	ab03      	add	r3, sp, #12
 800bac6:	9301      	str	r3, [sp, #4]
 800bac8:	ab02      	add	r3, sp, #8
 800baca:	9300      	str	r3, [sp, #0]
 800bacc:	ec45 4b10 	vmov	d0, r4, r5
 800bad0:	4653      	mov	r3, sl
 800bad2:	4632      	mov	r2, r6
 800bad4:	f001 fdac 	bl	800d630 <_dtoa_r>
 800bad8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800badc:	4607      	mov	r7, r0
 800bade:	d102      	bne.n	800bae6 <__cvt+0x66>
 800bae0:	f019 0f01 	tst.w	r9, #1
 800bae4:	d022      	beq.n	800bb2c <__cvt+0xac>
 800bae6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800baea:	eb07 0906 	add.w	r9, r7, r6
 800baee:	d110      	bne.n	800bb12 <__cvt+0x92>
 800baf0:	783b      	ldrb	r3, [r7, #0]
 800baf2:	2b30      	cmp	r3, #48	; 0x30
 800baf4:	d10a      	bne.n	800bb0c <__cvt+0x8c>
 800baf6:	2200      	movs	r2, #0
 800baf8:	2300      	movs	r3, #0
 800bafa:	4620      	mov	r0, r4
 800bafc:	4629      	mov	r1, r5
 800bafe:	f7f5 f803 	bl	8000b08 <__aeabi_dcmpeq>
 800bb02:	b918      	cbnz	r0, 800bb0c <__cvt+0x8c>
 800bb04:	f1c6 0601 	rsb	r6, r6, #1
 800bb08:	f8ca 6000 	str.w	r6, [sl]
 800bb0c:	f8da 3000 	ldr.w	r3, [sl]
 800bb10:	4499      	add	r9, r3
 800bb12:	2200      	movs	r2, #0
 800bb14:	2300      	movs	r3, #0
 800bb16:	4620      	mov	r0, r4
 800bb18:	4629      	mov	r1, r5
 800bb1a:	f7f4 fff5 	bl	8000b08 <__aeabi_dcmpeq>
 800bb1e:	b108      	cbz	r0, 800bb24 <__cvt+0xa4>
 800bb20:	f8cd 900c 	str.w	r9, [sp, #12]
 800bb24:	2230      	movs	r2, #48	; 0x30
 800bb26:	9b03      	ldr	r3, [sp, #12]
 800bb28:	454b      	cmp	r3, r9
 800bb2a:	d307      	bcc.n	800bb3c <__cvt+0xbc>
 800bb2c:	9b03      	ldr	r3, [sp, #12]
 800bb2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bb30:	1bdb      	subs	r3, r3, r7
 800bb32:	4638      	mov	r0, r7
 800bb34:	6013      	str	r3, [r2, #0]
 800bb36:	b004      	add	sp, #16
 800bb38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb3c:	1c59      	adds	r1, r3, #1
 800bb3e:	9103      	str	r1, [sp, #12]
 800bb40:	701a      	strb	r2, [r3, #0]
 800bb42:	e7f0      	b.n	800bb26 <__cvt+0xa6>

0800bb44 <__exponent>:
 800bb44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb46:	4603      	mov	r3, r0
 800bb48:	2900      	cmp	r1, #0
 800bb4a:	bfb8      	it	lt
 800bb4c:	4249      	neglt	r1, r1
 800bb4e:	f803 2b02 	strb.w	r2, [r3], #2
 800bb52:	bfb4      	ite	lt
 800bb54:	222d      	movlt	r2, #45	; 0x2d
 800bb56:	222b      	movge	r2, #43	; 0x2b
 800bb58:	2909      	cmp	r1, #9
 800bb5a:	7042      	strb	r2, [r0, #1]
 800bb5c:	dd2a      	ble.n	800bbb4 <__exponent+0x70>
 800bb5e:	f10d 0407 	add.w	r4, sp, #7
 800bb62:	46a4      	mov	ip, r4
 800bb64:	270a      	movs	r7, #10
 800bb66:	46a6      	mov	lr, r4
 800bb68:	460a      	mov	r2, r1
 800bb6a:	fb91 f6f7 	sdiv	r6, r1, r7
 800bb6e:	fb07 1516 	mls	r5, r7, r6, r1
 800bb72:	3530      	adds	r5, #48	; 0x30
 800bb74:	2a63      	cmp	r2, #99	; 0x63
 800bb76:	f104 34ff 	add.w	r4, r4, #4294967295
 800bb7a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bb7e:	4631      	mov	r1, r6
 800bb80:	dcf1      	bgt.n	800bb66 <__exponent+0x22>
 800bb82:	3130      	adds	r1, #48	; 0x30
 800bb84:	f1ae 0502 	sub.w	r5, lr, #2
 800bb88:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bb8c:	1c44      	adds	r4, r0, #1
 800bb8e:	4629      	mov	r1, r5
 800bb90:	4561      	cmp	r1, ip
 800bb92:	d30a      	bcc.n	800bbaa <__exponent+0x66>
 800bb94:	f10d 0209 	add.w	r2, sp, #9
 800bb98:	eba2 020e 	sub.w	r2, r2, lr
 800bb9c:	4565      	cmp	r5, ip
 800bb9e:	bf88      	it	hi
 800bba0:	2200      	movhi	r2, #0
 800bba2:	4413      	add	r3, r2
 800bba4:	1a18      	subs	r0, r3, r0
 800bba6:	b003      	add	sp, #12
 800bba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bbae:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bbb2:	e7ed      	b.n	800bb90 <__exponent+0x4c>
 800bbb4:	2330      	movs	r3, #48	; 0x30
 800bbb6:	3130      	adds	r1, #48	; 0x30
 800bbb8:	7083      	strb	r3, [r0, #2]
 800bbba:	70c1      	strb	r1, [r0, #3]
 800bbbc:	1d03      	adds	r3, r0, #4
 800bbbe:	e7f1      	b.n	800bba4 <__exponent+0x60>

0800bbc0 <_printf_float>:
 800bbc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbc4:	ed2d 8b02 	vpush	{d8}
 800bbc8:	b08d      	sub	sp, #52	; 0x34
 800bbca:	460c      	mov	r4, r1
 800bbcc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bbd0:	4616      	mov	r6, r2
 800bbd2:	461f      	mov	r7, r3
 800bbd4:	4605      	mov	r5, r0
 800bbd6:	f002 fe89 	bl	800e8ec <_localeconv_r>
 800bbda:	f8d0 a000 	ldr.w	sl, [r0]
 800bbde:	4650      	mov	r0, sl
 800bbe0:	f7f4 fb16 	bl	8000210 <strlen>
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	930a      	str	r3, [sp, #40]	; 0x28
 800bbe8:	6823      	ldr	r3, [r4, #0]
 800bbea:	9305      	str	r3, [sp, #20]
 800bbec:	f8d8 3000 	ldr.w	r3, [r8]
 800bbf0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bbf4:	3307      	adds	r3, #7
 800bbf6:	f023 0307 	bic.w	r3, r3, #7
 800bbfa:	f103 0208 	add.w	r2, r3, #8
 800bbfe:	f8c8 2000 	str.w	r2, [r8]
 800bc02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc06:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bc0a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800bc0e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bc12:	9307      	str	r3, [sp, #28]
 800bc14:	f8cd 8018 	str.w	r8, [sp, #24]
 800bc18:	ee08 0a10 	vmov	s16, r0
 800bc1c:	4b9f      	ldr	r3, [pc, #636]	; (800be9c <_printf_float+0x2dc>)
 800bc1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc22:	f04f 32ff 	mov.w	r2, #4294967295
 800bc26:	f7f4 ffa1 	bl	8000b6c <__aeabi_dcmpun>
 800bc2a:	bb88      	cbnz	r0, 800bc90 <_printf_float+0xd0>
 800bc2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc30:	4b9a      	ldr	r3, [pc, #616]	; (800be9c <_printf_float+0x2dc>)
 800bc32:	f04f 32ff 	mov.w	r2, #4294967295
 800bc36:	f7f4 ff7b 	bl	8000b30 <__aeabi_dcmple>
 800bc3a:	bb48      	cbnz	r0, 800bc90 <_printf_float+0xd0>
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	2300      	movs	r3, #0
 800bc40:	4640      	mov	r0, r8
 800bc42:	4649      	mov	r1, r9
 800bc44:	f7f4 ff6a 	bl	8000b1c <__aeabi_dcmplt>
 800bc48:	b110      	cbz	r0, 800bc50 <_printf_float+0x90>
 800bc4a:	232d      	movs	r3, #45	; 0x2d
 800bc4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc50:	4b93      	ldr	r3, [pc, #588]	; (800bea0 <_printf_float+0x2e0>)
 800bc52:	4894      	ldr	r0, [pc, #592]	; (800bea4 <_printf_float+0x2e4>)
 800bc54:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bc58:	bf94      	ite	ls
 800bc5a:	4698      	movls	r8, r3
 800bc5c:	4680      	movhi	r8, r0
 800bc5e:	2303      	movs	r3, #3
 800bc60:	6123      	str	r3, [r4, #16]
 800bc62:	9b05      	ldr	r3, [sp, #20]
 800bc64:	f023 0204 	bic.w	r2, r3, #4
 800bc68:	6022      	str	r2, [r4, #0]
 800bc6a:	f04f 0900 	mov.w	r9, #0
 800bc6e:	9700      	str	r7, [sp, #0]
 800bc70:	4633      	mov	r3, r6
 800bc72:	aa0b      	add	r2, sp, #44	; 0x2c
 800bc74:	4621      	mov	r1, r4
 800bc76:	4628      	mov	r0, r5
 800bc78:	f000 f9d8 	bl	800c02c <_printf_common>
 800bc7c:	3001      	adds	r0, #1
 800bc7e:	f040 8090 	bne.w	800bda2 <_printf_float+0x1e2>
 800bc82:	f04f 30ff 	mov.w	r0, #4294967295
 800bc86:	b00d      	add	sp, #52	; 0x34
 800bc88:	ecbd 8b02 	vpop	{d8}
 800bc8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc90:	4642      	mov	r2, r8
 800bc92:	464b      	mov	r3, r9
 800bc94:	4640      	mov	r0, r8
 800bc96:	4649      	mov	r1, r9
 800bc98:	f7f4 ff68 	bl	8000b6c <__aeabi_dcmpun>
 800bc9c:	b140      	cbz	r0, 800bcb0 <_printf_float+0xf0>
 800bc9e:	464b      	mov	r3, r9
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	bfbc      	itt	lt
 800bca4:	232d      	movlt	r3, #45	; 0x2d
 800bca6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bcaa:	487f      	ldr	r0, [pc, #508]	; (800bea8 <_printf_float+0x2e8>)
 800bcac:	4b7f      	ldr	r3, [pc, #508]	; (800beac <_printf_float+0x2ec>)
 800bcae:	e7d1      	b.n	800bc54 <_printf_float+0x94>
 800bcb0:	6863      	ldr	r3, [r4, #4]
 800bcb2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bcb6:	9206      	str	r2, [sp, #24]
 800bcb8:	1c5a      	adds	r2, r3, #1
 800bcba:	d13f      	bne.n	800bd3c <_printf_float+0x17c>
 800bcbc:	2306      	movs	r3, #6
 800bcbe:	6063      	str	r3, [r4, #4]
 800bcc0:	9b05      	ldr	r3, [sp, #20]
 800bcc2:	6861      	ldr	r1, [r4, #4]
 800bcc4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bcc8:	2300      	movs	r3, #0
 800bcca:	9303      	str	r3, [sp, #12]
 800bccc:	ab0a      	add	r3, sp, #40	; 0x28
 800bcce:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bcd2:	ab09      	add	r3, sp, #36	; 0x24
 800bcd4:	ec49 8b10 	vmov	d0, r8, r9
 800bcd8:	9300      	str	r3, [sp, #0]
 800bcda:	6022      	str	r2, [r4, #0]
 800bcdc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bce0:	4628      	mov	r0, r5
 800bce2:	f7ff fecd 	bl	800ba80 <__cvt>
 800bce6:	9b06      	ldr	r3, [sp, #24]
 800bce8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bcea:	2b47      	cmp	r3, #71	; 0x47
 800bcec:	4680      	mov	r8, r0
 800bcee:	d108      	bne.n	800bd02 <_printf_float+0x142>
 800bcf0:	1cc8      	adds	r0, r1, #3
 800bcf2:	db02      	blt.n	800bcfa <_printf_float+0x13a>
 800bcf4:	6863      	ldr	r3, [r4, #4]
 800bcf6:	4299      	cmp	r1, r3
 800bcf8:	dd41      	ble.n	800bd7e <_printf_float+0x1be>
 800bcfa:	f1ab 0b02 	sub.w	fp, fp, #2
 800bcfe:	fa5f fb8b 	uxtb.w	fp, fp
 800bd02:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bd06:	d820      	bhi.n	800bd4a <_printf_float+0x18a>
 800bd08:	3901      	subs	r1, #1
 800bd0a:	465a      	mov	r2, fp
 800bd0c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bd10:	9109      	str	r1, [sp, #36]	; 0x24
 800bd12:	f7ff ff17 	bl	800bb44 <__exponent>
 800bd16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd18:	1813      	adds	r3, r2, r0
 800bd1a:	2a01      	cmp	r2, #1
 800bd1c:	4681      	mov	r9, r0
 800bd1e:	6123      	str	r3, [r4, #16]
 800bd20:	dc02      	bgt.n	800bd28 <_printf_float+0x168>
 800bd22:	6822      	ldr	r2, [r4, #0]
 800bd24:	07d2      	lsls	r2, r2, #31
 800bd26:	d501      	bpl.n	800bd2c <_printf_float+0x16c>
 800bd28:	3301      	adds	r3, #1
 800bd2a:	6123      	str	r3, [r4, #16]
 800bd2c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d09c      	beq.n	800bc6e <_printf_float+0xae>
 800bd34:	232d      	movs	r3, #45	; 0x2d
 800bd36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd3a:	e798      	b.n	800bc6e <_printf_float+0xae>
 800bd3c:	9a06      	ldr	r2, [sp, #24]
 800bd3e:	2a47      	cmp	r2, #71	; 0x47
 800bd40:	d1be      	bne.n	800bcc0 <_printf_float+0x100>
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d1bc      	bne.n	800bcc0 <_printf_float+0x100>
 800bd46:	2301      	movs	r3, #1
 800bd48:	e7b9      	b.n	800bcbe <_printf_float+0xfe>
 800bd4a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bd4e:	d118      	bne.n	800bd82 <_printf_float+0x1c2>
 800bd50:	2900      	cmp	r1, #0
 800bd52:	6863      	ldr	r3, [r4, #4]
 800bd54:	dd0b      	ble.n	800bd6e <_printf_float+0x1ae>
 800bd56:	6121      	str	r1, [r4, #16]
 800bd58:	b913      	cbnz	r3, 800bd60 <_printf_float+0x1a0>
 800bd5a:	6822      	ldr	r2, [r4, #0]
 800bd5c:	07d0      	lsls	r0, r2, #31
 800bd5e:	d502      	bpl.n	800bd66 <_printf_float+0x1a6>
 800bd60:	3301      	adds	r3, #1
 800bd62:	440b      	add	r3, r1
 800bd64:	6123      	str	r3, [r4, #16]
 800bd66:	65a1      	str	r1, [r4, #88]	; 0x58
 800bd68:	f04f 0900 	mov.w	r9, #0
 800bd6c:	e7de      	b.n	800bd2c <_printf_float+0x16c>
 800bd6e:	b913      	cbnz	r3, 800bd76 <_printf_float+0x1b6>
 800bd70:	6822      	ldr	r2, [r4, #0]
 800bd72:	07d2      	lsls	r2, r2, #31
 800bd74:	d501      	bpl.n	800bd7a <_printf_float+0x1ba>
 800bd76:	3302      	adds	r3, #2
 800bd78:	e7f4      	b.n	800bd64 <_printf_float+0x1a4>
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	e7f2      	b.n	800bd64 <_printf_float+0x1a4>
 800bd7e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bd82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd84:	4299      	cmp	r1, r3
 800bd86:	db05      	blt.n	800bd94 <_printf_float+0x1d4>
 800bd88:	6823      	ldr	r3, [r4, #0]
 800bd8a:	6121      	str	r1, [r4, #16]
 800bd8c:	07d8      	lsls	r0, r3, #31
 800bd8e:	d5ea      	bpl.n	800bd66 <_printf_float+0x1a6>
 800bd90:	1c4b      	adds	r3, r1, #1
 800bd92:	e7e7      	b.n	800bd64 <_printf_float+0x1a4>
 800bd94:	2900      	cmp	r1, #0
 800bd96:	bfd4      	ite	le
 800bd98:	f1c1 0202 	rsble	r2, r1, #2
 800bd9c:	2201      	movgt	r2, #1
 800bd9e:	4413      	add	r3, r2
 800bda0:	e7e0      	b.n	800bd64 <_printf_float+0x1a4>
 800bda2:	6823      	ldr	r3, [r4, #0]
 800bda4:	055a      	lsls	r2, r3, #21
 800bda6:	d407      	bmi.n	800bdb8 <_printf_float+0x1f8>
 800bda8:	6923      	ldr	r3, [r4, #16]
 800bdaa:	4642      	mov	r2, r8
 800bdac:	4631      	mov	r1, r6
 800bdae:	4628      	mov	r0, r5
 800bdb0:	47b8      	blx	r7
 800bdb2:	3001      	adds	r0, #1
 800bdb4:	d12c      	bne.n	800be10 <_printf_float+0x250>
 800bdb6:	e764      	b.n	800bc82 <_printf_float+0xc2>
 800bdb8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bdbc:	f240 80e0 	bls.w	800bf80 <_printf_float+0x3c0>
 800bdc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	f7f4 fe9e 	bl	8000b08 <__aeabi_dcmpeq>
 800bdcc:	2800      	cmp	r0, #0
 800bdce:	d034      	beq.n	800be3a <_printf_float+0x27a>
 800bdd0:	4a37      	ldr	r2, [pc, #220]	; (800beb0 <_printf_float+0x2f0>)
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	4631      	mov	r1, r6
 800bdd6:	4628      	mov	r0, r5
 800bdd8:	47b8      	blx	r7
 800bdda:	3001      	adds	r0, #1
 800bddc:	f43f af51 	beq.w	800bc82 <_printf_float+0xc2>
 800bde0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bde4:	429a      	cmp	r2, r3
 800bde6:	db02      	blt.n	800bdee <_printf_float+0x22e>
 800bde8:	6823      	ldr	r3, [r4, #0]
 800bdea:	07d8      	lsls	r0, r3, #31
 800bdec:	d510      	bpl.n	800be10 <_printf_float+0x250>
 800bdee:	ee18 3a10 	vmov	r3, s16
 800bdf2:	4652      	mov	r2, sl
 800bdf4:	4631      	mov	r1, r6
 800bdf6:	4628      	mov	r0, r5
 800bdf8:	47b8      	blx	r7
 800bdfa:	3001      	adds	r0, #1
 800bdfc:	f43f af41 	beq.w	800bc82 <_printf_float+0xc2>
 800be00:	f04f 0800 	mov.w	r8, #0
 800be04:	f104 091a 	add.w	r9, r4, #26
 800be08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be0a:	3b01      	subs	r3, #1
 800be0c:	4543      	cmp	r3, r8
 800be0e:	dc09      	bgt.n	800be24 <_printf_float+0x264>
 800be10:	6823      	ldr	r3, [r4, #0]
 800be12:	079b      	lsls	r3, r3, #30
 800be14:	f100 8105 	bmi.w	800c022 <_printf_float+0x462>
 800be18:	68e0      	ldr	r0, [r4, #12]
 800be1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be1c:	4298      	cmp	r0, r3
 800be1e:	bfb8      	it	lt
 800be20:	4618      	movlt	r0, r3
 800be22:	e730      	b.n	800bc86 <_printf_float+0xc6>
 800be24:	2301      	movs	r3, #1
 800be26:	464a      	mov	r2, r9
 800be28:	4631      	mov	r1, r6
 800be2a:	4628      	mov	r0, r5
 800be2c:	47b8      	blx	r7
 800be2e:	3001      	adds	r0, #1
 800be30:	f43f af27 	beq.w	800bc82 <_printf_float+0xc2>
 800be34:	f108 0801 	add.w	r8, r8, #1
 800be38:	e7e6      	b.n	800be08 <_printf_float+0x248>
 800be3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	dc39      	bgt.n	800beb4 <_printf_float+0x2f4>
 800be40:	4a1b      	ldr	r2, [pc, #108]	; (800beb0 <_printf_float+0x2f0>)
 800be42:	2301      	movs	r3, #1
 800be44:	4631      	mov	r1, r6
 800be46:	4628      	mov	r0, r5
 800be48:	47b8      	blx	r7
 800be4a:	3001      	adds	r0, #1
 800be4c:	f43f af19 	beq.w	800bc82 <_printf_float+0xc2>
 800be50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be54:	4313      	orrs	r3, r2
 800be56:	d102      	bne.n	800be5e <_printf_float+0x29e>
 800be58:	6823      	ldr	r3, [r4, #0]
 800be5a:	07d9      	lsls	r1, r3, #31
 800be5c:	d5d8      	bpl.n	800be10 <_printf_float+0x250>
 800be5e:	ee18 3a10 	vmov	r3, s16
 800be62:	4652      	mov	r2, sl
 800be64:	4631      	mov	r1, r6
 800be66:	4628      	mov	r0, r5
 800be68:	47b8      	blx	r7
 800be6a:	3001      	adds	r0, #1
 800be6c:	f43f af09 	beq.w	800bc82 <_printf_float+0xc2>
 800be70:	f04f 0900 	mov.w	r9, #0
 800be74:	f104 0a1a 	add.w	sl, r4, #26
 800be78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be7a:	425b      	negs	r3, r3
 800be7c:	454b      	cmp	r3, r9
 800be7e:	dc01      	bgt.n	800be84 <_printf_float+0x2c4>
 800be80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be82:	e792      	b.n	800bdaa <_printf_float+0x1ea>
 800be84:	2301      	movs	r3, #1
 800be86:	4652      	mov	r2, sl
 800be88:	4631      	mov	r1, r6
 800be8a:	4628      	mov	r0, r5
 800be8c:	47b8      	blx	r7
 800be8e:	3001      	adds	r0, #1
 800be90:	f43f aef7 	beq.w	800bc82 <_printf_float+0xc2>
 800be94:	f109 0901 	add.w	r9, r9, #1
 800be98:	e7ee      	b.n	800be78 <_printf_float+0x2b8>
 800be9a:	bf00      	nop
 800be9c:	7fefffff 	.word	0x7fefffff
 800bea0:	080103e4 	.word	0x080103e4
 800bea4:	080103e8 	.word	0x080103e8
 800bea8:	080103f0 	.word	0x080103f0
 800beac:	080103ec 	.word	0x080103ec
 800beb0:	080103f4 	.word	0x080103f4
 800beb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800beb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800beb8:	429a      	cmp	r2, r3
 800beba:	bfa8      	it	ge
 800bebc:	461a      	movge	r2, r3
 800bebe:	2a00      	cmp	r2, #0
 800bec0:	4691      	mov	r9, r2
 800bec2:	dc37      	bgt.n	800bf34 <_printf_float+0x374>
 800bec4:	f04f 0b00 	mov.w	fp, #0
 800bec8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800becc:	f104 021a 	add.w	r2, r4, #26
 800bed0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bed2:	9305      	str	r3, [sp, #20]
 800bed4:	eba3 0309 	sub.w	r3, r3, r9
 800bed8:	455b      	cmp	r3, fp
 800beda:	dc33      	bgt.n	800bf44 <_printf_float+0x384>
 800bedc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bee0:	429a      	cmp	r2, r3
 800bee2:	db3b      	blt.n	800bf5c <_printf_float+0x39c>
 800bee4:	6823      	ldr	r3, [r4, #0]
 800bee6:	07da      	lsls	r2, r3, #31
 800bee8:	d438      	bmi.n	800bf5c <_printf_float+0x39c>
 800beea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800beec:	9a05      	ldr	r2, [sp, #20]
 800beee:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bef0:	1a9a      	subs	r2, r3, r2
 800bef2:	eba3 0901 	sub.w	r9, r3, r1
 800bef6:	4591      	cmp	r9, r2
 800bef8:	bfa8      	it	ge
 800befa:	4691      	movge	r9, r2
 800befc:	f1b9 0f00 	cmp.w	r9, #0
 800bf00:	dc35      	bgt.n	800bf6e <_printf_float+0x3ae>
 800bf02:	f04f 0800 	mov.w	r8, #0
 800bf06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bf0a:	f104 0a1a 	add.w	sl, r4, #26
 800bf0e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bf12:	1a9b      	subs	r3, r3, r2
 800bf14:	eba3 0309 	sub.w	r3, r3, r9
 800bf18:	4543      	cmp	r3, r8
 800bf1a:	f77f af79 	ble.w	800be10 <_printf_float+0x250>
 800bf1e:	2301      	movs	r3, #1
 800bf20:	4652      	mov	r2, sl
 800bf22:	4631      	mov	r1, r6
 800bf24:	4628      	mov	r0, r5
 800bf26:	47b8      	blx	r7
 800bf28:	3001      	adds	r0, #1
 800bf2a:	f43f aeaa 	beq.w	800bc82 <_printf_float+0xc2>
 800bf2e:	f108 0801 	add.w	r8, r8, #1
 800bf32:	e7ec      	b.n	800bf0e <_printf_float+0x34e>
 800bf34:	4613      	mov	r3, r2
 800bf36:	4631      	mov	r1, r6
 800bf38:	4642      	mov	r2, r8
 800bf3a:	4628      	mov	r0, r5
 800bf3c:	47b8      	blx	r7
 800bf3e:	3001      	adds	r0, #1
 800bf40:	d1c0      	bne.n	800bec4 <_printf_float+0x304>
 800bf42:	e69e      	b.n	800bc82 <_printf_float+0xc2>
 800bf44:	2301      	movs	r3, #1
 800bf46:	4631      	mov	r1, r6
 800bf48:	4628      	mov	r0, r5
 800bf4a:	9205      	str	r2, [sp, #20]
 800bf4c:	47b8      	blx	r7
 800bf4e:	3001      	adds	r0, #1
 800bf50:	f43f ae97 	beq.w	800bc82 <_printf_float+0xc2>
 800bf54:	9a05      	ldr	r2, [sp, #20]
 800bf56:	f10b 0b01 	add.w	fp, fp, #1
 800bf5a:	e7b9      	b.n	800bed0 <_printf_float+0x310>
 800bf5c:	ee18 3a10 	vmov	r3, s16
 800bf60:	4652      	mov	r2, sl
 800bf62:	4631      	mov	r1, r6
 800bf64:	4628      	mov	r0, r5
 800bf66:	47b8      	blx	r7
 800bf68:	3001      	adds	r0, #1
 800bf6a:	d1be      	bne.n	800beea <_printf_float+0x32a>
 800bf6c:	e689      	b.n	800bc82 <_printf_float+0xc2>
 800bf6e:	9a05      	ldr	r2, [sp, #20]
 800bf70:	464b      	mov	r3, r9
 800bf72:	4442      	add	r2, r8
 800bf74:	4631      	mov	r1, r6
 800bf76:	4628      	mov	r0, r5
 800bf78:	47b8      	blx	r7
 800bf7a:	3001      	adds	r0, #1
 800bf7c:	d1c1      	bne.n	800bf02 <_printf_float+0x342>
 800bf7e:	e680      	b.n	800bc82 <_printf_float+0xc2>
 800bf80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf82:	2a01      	cmp	r2, #1
 800bf84:	dc01      	bgt.n	800bf8a <_printf_float+0x3ca>
 800bf86:	07db      	lsls	r3, r3, #31
 800bf88:	d538      	bpl.n	800bffc <_printf_float+0x43c>
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	4642      	mov	r2, r8
 800bf8e:	4631      	mov	r1, r6
 800bf90:	4628      	mov	r0, r5
 800bf92:	47b8      	blx	r7
 800bf94:	3001      	adds	r0, #1
 800bf96:	f43f ae74 	beq.w	800bc82 <_printf_float+0xc2>
 800bf9a:	ee18 3a10 	vmov	r3, s16
 800bf9e:	4652      	mov	r2, sl
 800bfa0:	4631      	mov	r1, r6
 800bfa2:	4628      	mov	r0, r5
 800bfa4:	47b8      	blx	r7
 800bfa6:	3001      	adds	r0, #1
 800bfa8:	f43f ae6b 	beq.w	800bc82 <_printf_float+0xc2>
 800bfac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	f7f4 fda8 	bl	8000b08 <__aeabi_dcmpeq>
 800bfb8:	b9d8      	cbnz	r0, 800bff2 <_printf_float+0x432>
 800bfba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfbc:	f108 0201 	add.w	r2, r8, #1
 800bfc0:	3b01      	subs	r3, #1
 800bfc2:	4631      	mov	r1, r6
 800bfc4:	4628      	mov	r0, r5
 800bfc6:	47b8      	blx	r7
 800bfc8:	3001      	adds	r0, #1
 800bfca:	d10e      	bne.n	800bfea <_printf_float+0x42a>
 800bfcc:	e659      	b.n	800bc82 <_printf_float+0xc2>
 800bfce:	2301      	movs	r3, #1
 800bfd0:	4652      	mov	r2, sl
 800bfd2:	4631      	mov	r1, r6
 800bfd4:	4628      	mov	r0, r5
 800bfd6:	47b8      	blx	r7
 800bfd8:	3001      	adds	r0, #1
 800bfda:	f43f ae52 	beq.w	800bc82 <_printf_float+0xc2>
 800bfde:	f108 0801 	add.w	r8, r8, #1
 800bfe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfe4:	3b01      	subs	r3, #1
 800bfe6:	4543      	cmp	r3, r8
 800bfe8:	dcf1      	bgt.n	800bfce <_printf_float+0x40e>
 800bfea:	464b      	mov	r3, r9
 800bfec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bff0:	e6dc      	b.n	800bdac <_printf_float+0x1ec>
 800bff2:	f04f 0800 	mov.w	r8, #0
 800bff6:	f104 0a1a 	add.w	sl, r4, #26
 800bffa:	e7f2      	b.n	800bfe2 <_printf_float+0x422>
 800bffc:	2301      	movs	r3, #1
 800bffe:	4642      	mov	r2, r8
 800c000:	e7df      	b.n	800bfc2 <_printf_float+0x402>
 800c002:	2301      	movs	r3, #1
 800c004:	464a      	mov	r2, r9
 800c006:	4631      	mov	r1, r6
 800c008:	4628      	mov	r0, r5
 800c00a:	47b8      	blx	r7
 800c00c:	3001      	adds	r0, #1
 800c00e:	f43f ae38 	beq.w	800bc82 <_printf_float+0xc2>
 800c012:	f108 0801 	add.w	r8, r8, #1
 800c016:	68e3      	ldr	r3, [r4, #12]
 800c018:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c01a:	1a5b      	subs	r3, r3, r1
 800c01c:	4543      	cmp	r3, r8
 800c01e:	dcf0      	bgt.n	800c002 <_printf_float+0x442>
 800c020:	e6fa      	b.n	800be18 <_printf_float+0x258>
 800c022:	f04f 0800 	mov.w	r8, #0
 800c026:	f104 0919 	add.w	r9, r4, #25
 800c02a:	e7f4      	b.n	800c016 <_printf_float+0x456>

0800c02c <_printf_common>:
 800c02c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c030:	4616      	mov	r6, r2
 800c032:	4699      	mov	r9, r3
 800c034:	688a      	ldr	r2, [r1, #8]
 800c036:	690b      	ldr	r3, [r1, #16]
 800c038:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c03c:	4293      	cmp	r3, r2
 800c03e:	bfb8      	it	lt
 800c040:	4613      	movlt	r3, r2
 800c042:	6033      	str	r3, [r6, #0]
 800c044:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c048:	4607      	mov	r7, r0
 800c04a:	460c      	mov	r4, r1
 800c04c:	b10a      	cbz	r2, 800c052 <_printf_common+0x26>
 800c04e:	3301      	adds	r3, #1
 800c050:	6033      	str	r3, [r6, #0]
 800c052:	6823      	ldr	r3, [r4, #0]
 800c054:	0699      	lsls	r1, r3, #26
 800c056:	bf42      	ittt	mi
 800c058:	6833      	ldrmi	r3, [r6, #0]
 800c05a:	3302      	addmi	r3, #2
 800c05c:	6033      	strmi	r3, [r6, #0]
 800c05e:	6825      	ldr	r5, [r4, #0]
 800c060:	f015 0506 	ands.w	r5, r5, #6
 800c064:	d106      	bne.n	800c074 <_printf_common+0x48>
 800c066:	f104 0a19 	add.w	sl, r4, #25
 800c06a:	68e3      	ldr	r3, [r4, #12]
 800c06c:	6832      	ldr	r2, [r6, #0]
 800c06e:	1a9b      	subs	r3, r3, r2
 800c070:	42ab      	cmp	r3, r5
 800c072:	dc26      	bgt.n	800c0c2 <_printf_common+0x96>
 800c074:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c078:	1e13      	subs	r3, r2, #0
 800c07a:	6822      	ldr	r2, [r4, #0]
 800c07c:	bf18      	it	ne
 800c07e:	2301      	movne	r3, #1
 800c080:	0692      	lsls	r2, r2, #26
 800c082:	d42b      	bmi.n	800c0dc <_printf_common+0xb0>
 800c084:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c088:	4649      	mov	r1, r9
 800c08a:	4638      	mov	r0, r7
 800c08c:	47c0      	blx	r8
 800c08e:	3001      	adds	r0, #1
 800c090:	d01e      	beq.n	800c0d0 <_printf_common+0xa4>
 800c092:	6823      	ldr	r3, [r4, #0]
 800c094:	68e5      	ldr	r5, [r4, #12]
 800c096:	6832      	ldr	r2, [r6, #0]
 800c098:	f003 0306 	and.w	r3, r3, #6
 800c09c:	2b04      	cmp	r3, #4
 800c09e:	bf08      	it	eq
 800c0a0:	1aad      	subeq	r5, r5, r2
 800c0a2:	68a3      	ldr	r3, [r4, #8]
 800c0a4:	6922      	ldr	r2, [r4, #16]
 800c0a6:	bf0c      	ite	eq
 800c0a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c0ac:	2500      	movne	r5, #0
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	bfc4      	itt	gt
 800c0b2:	1a9b      	subgt	r3, r3, r2
 800c0b4:	18ed      	addgt	r5, r5, r3
 800c0b6:	2600      	movs	r6, #0
 800c0b8:	341a      	adds	r4, #26
 800c0ba:	42b5      	cmp	r5, r6
 800c0bc:	d11a      	bne.n	800c0f4 <_printf_common+0xc8>
 800c0be:	2000      	movs	r0, #0
 800c0c0:	e008      	b.n	800c0d4 <_printf_common+0xa8>
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	4652      	mov	r2, sl
 800c0c6:	4649      	mov	r1, r9
 800c0c8:	4638      	mov	r0, r7
 800c0ca:	47c0      	blx	r8
 800c0cc:	3001      	adds	r0, #1
 800c0ce:	d103      	bne.n	800c0d8 <_printf_common+0xac>
 800c0d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c0d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0d8:	3501      	adds	r5, #1
 800c0da:	e7c6      	b.n	800c06a <_printf_common+0x3e>
 800c0dc:	18e1      	adds	r1, r4, r3
 800c0de:	1c5a      	adds	r2, r3, #1
 800c0e0:	2030      	movs	r0, #48	; 0x30
 800c0e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c0e6:	4422      	add	r2, r4
 800c0e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c0ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c0f0:	3302      	adds	r3, #2
 800c0f2:	e7c7      	b.n	800c084 <_printf_common+0x58>
 800c0f4:	2301      	movs	r3, #1
 800c0f6:	4622      	mov	r2, r4
 800c0f8:	4649      	mov	r1, r9
 800c0fa:	4638      	mov	r0, r7
 800c0fc:	47c0      	blx	r8
 800c0fe:	3001      	adds	r0, #1
 800c100:	d0e6      	beq.n	800c0d0 <_printf_common+0xa4>
 800c102:	3601      	adds	r6, #1
 800c104:	e7d9      	b.n	800c0ba <_printf_common+0x8e>
	...

0800c108 <_printf_i>:
 800c108:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c10c:	7e0f      	ldrb	r7, [r1, #24]
 800c10e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c110:	2f78      	cmp	r7, #120	; 0x78
 800c112:	4691      	mov	r9, r2
 800c114:	4680      	mov	r8, r0
 800c116:	460c      	mov	r4, r1
 800c118:	469a      	mov	sl, r3
 800c11a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c11e:	d807      	bhi.n	800c130 <_printf_i+0x28>
 800c120:	2f62      	cmp	r7, #98	; 0x62
 800c122:	d80a      	bhi.n	800c13a <_printf_i+0x32>
 800c124:	2f00      	cmp	r7, #0
 800c126:	f000 80d8 	beq.w	800c2da <_printf_i+0x1d2>
 800c12a:	2f58      	cmp	r7, #88	; 0x58
 800c12c:	f000 80a3 	beq.w	800c276 <_printf_i+0x16e>
 800c130:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c134:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c138:	e03a      	b.n	800c1b0 <_printf_i+0xa8>
 800c13a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c13e:	2b15      	cmp	r3, #21
 800c140:	d8f6      	bhi.n	800c130 <_printf_i+0x28>
 800c142:	a101      	add	r1, pc, #4	; (adr r1, 800c148 <_printf_i+0x40>)
 800c144:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c148:	0800c1a1 	.word	0x0800c1a1
 800c14c:	0800c1b5 	.word	0x0800c1b5
 800c150:	0800c131 	.word	0x0800c131
 800c154:	0800c131 	.word	0x0800c131
 800c158:	0800c131 	.word	0x0800c131
 800c15c:	0800c131 	.word	0x0800c131
 800c160:	0800c1b5 	.word	0x0800c1b5
 800c164:	0800c131 	.word	0x0800c131
 800c168:	0800c131 	.word	0x0800c131
 800c16c:	0800c131 	.word	0x0800c131
 800c170:	0800c131 	.word	0x0800c131
 800c174:	0800c2c1 	.word	0x0800c2c1
 800c178:	0800c1e5 	.word	0x0800c1e5
 800c17c:	0800c2a3 	.word	0x0800c2a3
 800c180:	0800c131 	.word	0x0800c131
 800c184:	0800c131 	.word	0x0800c131
 800c188:	0800c2e3 	.word	0x0800c2e3
 800c18c:	0800c131 	.word	0x0800c131
 800c190:	0800c1e5 	.word	0x0800c1e5
 800c194:	0800c131 	.word	0x0800c131
 800c198:	0800c131 	.word	0x0800c131
 800c19c:	0800c2ab 	.word	0x0800c2ab
 800c1a0:	682b      	ldr	r3, [r5, #0]
 800c1a2:	1d1a      	adds	r2, r3, #4
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	602a      	str	r2, [r5, #0]
 800c1a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c1ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	e0a3      	b.n	800c2fc <_printf_i+0x1f4>
 800c1b4:	6820      	ldr	r0, [r4, #0]
 800c1b6:	6829      	ldr	r1, [r5, #0]
 800c1b8:	0606      	lsls	r6, r0, #24
 800c1ba:	f101 0304 	add.w	r3, r1, #4
 800c1be:	d50a      	bpl.n	800c1d6 <_printf_i+0xce>
 800c1c0:	680e      	ldr	r6, [r1, #0]
 800c1c2:	602b      	str	r3, [r5, #0]
 800c1c4:	2e00      	cmp	r6, #0
 800c1c6:	da03      	bge.n	800c1d0 <_printf_i+0xc8>
 800c1c8:	232d      	movs	r3, #45	; 0x2d
 800c1ca:	4276      	negs	r6, r6
 800c1cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c1d0:	485e      	ldr	r0, [pc, #376]	; (800c34c <_printf_i+0x244>)
 800c1d2:	230a      	movs	r3, #10
 800c1d4:	e019      	b.n	800c20a <_printf_i+0x102>
 800c1d6:	680e      	ldr	r6, [r1, #0]
 800c1d8:	602b      	str	r3, [r5, #0]
 800c1da:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c1de:	bf18      	it	ne
 800c1e0:	b236      	sxthne	r6, r6
 800c1e2:	e7ef      	b.n	800c1c4 <_printf_i+0xbc>
 800c1e4:	682b      	ldr	r3, [r5, #0]
 800c1e6:	6820      	ldr	r0, [r4, #0]
 800c1e8:	1d19      	adds	r1, r3, #4
 800c1ea:	6029      	str	r1, [r5, #0]
 800c1ec:	0601      	lsls	r1, r0, #24
 800c1ee:	d501      	bpl.n	800c1f4 <_printf_i+0xec>
 800c1f0:	681e      	ldr	r6, [r3, #0]
 800c1f2:	e002      	b.n	800c1fa <_printf_i+0xf2>
 800c1f4:	0646      	lsls	r6, r0, #25
 800c1f6:	d5fb      	bpl.n	800c1f0 <_printf_i+0xe8>
 800c1f8:	881e      	ldrh	r6, [r3, #0]
 800c1fa:	4854      	ldr	r0, [pc, #336]	; (800c34c <_printf_i+0x244>)
 800c1fc:	2f6f      	cmp	r7, #111	; 0x6f
 800c1fe:	bf0c      	ite	eq
 800c200:	2308      	moveq	r3, #8
 800c202:	230a      	movne	r3, #10
 800c204:	2100      	movs	r1, #0
 800c206:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c20a:	6865      	ldr	r5, [r4, #4]
 800c20c:	60a5      	str	r5, [r4, #8]
 800c20e:	2d00      	cmp	r5, #0
 800c210:	bfa2      	ittt	ge
 800c212:	6821      	ldrge	r1, [r4, #0]
 800c214:	f021 0104 	bicge.w	r1, r1, #4
 800c218:	6021      	strge	r1, [r4, #0]
 800c21a:	b90e      	cbnz	r6, 800c220 <_printf_i+0x118>
 800c21c:	2d00      	cmp	r5, #0
 800c21e:	d04d      	beq.n	800c2bc <_printf_i+0x1b4>
 800c220:	4615      	mov	r5, r2
 800c222:	fbb6 f1f3 	udiv	r1, r6, r3
 800c226:	fb03 6711 	mls	r7, r3, r1, r6
 800c22a:	5dc7      	ldrb	r7, [r0, r7]
 800c22c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c230:	4637      	mov	r7, r6
 800c232:	42bb      	cmp	r3, r7
 800c234:	460e      	mov	r6, r1
 800c236:	d9f4      	bls.n	800c222 <_printf_i+0x11a>
 800c238:	2b08      	cmp	r3, #8
 800c23a:	d10b      	bne.n	800c254 <_printf_i+0x14c>
 800c23c:	6823      	ldr	r3, [r4, #0]
 800c23e:	07de      	lsls	r6, r3, #31
 800c240:	d508      	bpl.n	800c254 <_printf_i+0x14c>
 800c242:	6923      	ldr	r3, [r4, #16]
 800c244:	6861      	ldr	r1, [r4, #4]
 800c246:	4299      	cmp	r1, r3
 800c248:	bfde      	ittt	le
 800c24a:	2330      	movle	r3, #48	; 0x30
 800c24c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c250:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c254:	1b52      	subs	r2, r2, r5
 800c256:	6122      	str	r2, [r4, #16]
 800c258:	f8cd a000 	str.w	sl, [sp]
 800c25c:	464b      	mov	r3, r9
 800c25e:	aa03      	add	r2, sp, #12
 800c260:	4621      	mov	r1, r4
 800c262:	4640      	mov	r0, r8
 800c264:	f7ff fee2 	bl	800c02c <_printf_common>
 800c268:	3001      	adds	r0, #1
 800c26a:	d14c      	bne.n	800c306 <_printf_i+0x1fe>
 800c26c:	f04f 30ff 	mov.w	r0, #4294967295
 800c270:	b004      	add	sp, #16
 800c272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c276:	4835      	ldr	r0, [pc, #212]	; (800c34c <_printf_i+0x244>)
 800c278:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c27c:	6829      	ldr	r1, [r5, #0]
 800c27e:	6823      	ldr	r3, [r4, #0]
 800c280:	f851 6b04 	ldr.w	r6, [r1], #4
 800c284:	6029      	str	r1, [r5, #0]
 800c286:	061d      	lsls	r5, r3, #24
 800c288:	d514      	bpl.n	800c2b4 <_printf_i+0x1ac>
 800c28a:	07df      	lsls	r7, r3, #31
 800c28c:	bf44      	itt	mi
 800c28e:	f043 0320 	orrmi.w	r3, r3, #32
 800c292:	6023      	strmi	r3, [r4, #0]
 800c294:	b91e      	cbnz	r6, 800c29e <_printf_i+0x196>
 800c296:	6823      	ldr	r3, [r4, #0]
 800c298:	f023 0320 	bic.w	r3, r3, #32
 800c29c:	6023      	str	r3, [r4, #0]
 800c29e:	2310      	movs	r3, #16
 800c2a0:	e7b0      	b.n	800c204 <_printf_i+0xfc>
 800c2a2:	6823      	ldr	r3, [r4, #0]
 800c2a4:	f043 0320 	orr.w	r3, r3, #32
 800c2a8:	6023      	str	r3, [r4, #0]
 800c2aa:	2378      	movs	r3, #120	; 0x78
 800c2ac:	4828      	ldr	r0, [pc, #160]	; (800c350 <_printf_i+0x248>)
 800c2ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c2b2:	e7e3      	b.n	800c27c <_printf_i+0x174>
 800c2b4:	0659      	lsls	r1, r3, #25
 800c2b6:	bf48      	it	mi
 800c2b8:	b2b6      	uxthmi	r6, r6
 800c2ba:	e7e6      	b.n	800c28a <_printf_i+0x182>
 800c2bc:	4615      	mov	r5, r2
 800c2be:	e7bb      	b.n	800c238 <_printf_i+0x130>
 800c2c0:	682b      	ldr	r3, [r5, #0]
 800c2c2:	6826      	ldr	r6, [r4, #0]
 800c2c4:	6961      	ldr	r1, [r4, #20]
 800c2c6:	1d18      	adds	r0, r3, #4
 800c2c8:	6028      	str	r0, [r5, #0]
 800c2ca:	0635      	lsls	r5, r6, #24
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	d501      	bpl.n	800c2d4 <_printf_i+0x1cc>
 800c2d0:	6019      	str	r1, [r3, #0]
 800c2d2:	e002      	b.n	800c2da <_printf_i+0x1d2>
 800c2d4:	0670      	lsls	r0, r6, #25
 800c2d6:	d5fb      	bpl.n	800c2d0 <_printf_i+0x1c8>
 800c2d8:	8019      	strh	r1, [r3, #0]
 800c2da:	2300      	movs	r3, #0
 800c2dc:	6123      	str	r3, [r4, #16]
 800c2de:	4615      	mov	r5, r2
 800c2e0:	e7ba      	b.n	800c258 <_printf_i+0x150>
 800c2e2:	682b      	ldr	r3, [r5, #0]
 800c2e4:	1d1a      	adds	r2, r3, #4
 800c2e6:	602a      	str	r2, [r5, #0]
 800c2e8:	681d      	ldr	r5, [r3, #0]
 800c2ea:	6862      	ldr	r2, [r4, #4]
 800c2ec:	2100      	movs	r1, #0
 800c2ee:	4628      	mov	r0, r5
 800c2f0:	f7f3 ff96 	bl	8000220 <memchr>
 800c2f4:	b108      	cbz	r0, 800c2fa <_printf_i+0x1f2>
 800c2f6:	1b40      	subs	r0, r0, r5
 800c2f8:	6060      	str	r0, [r4, #4]
 800c2fa:	6863      	ldr	r3, [r4, #4]
 800c2fc:	6123      	str	r3, [r4, #16]
 800c2fe:	2300      	movs	r3, #0
 800c300:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c304:	e7a8      	b.n	800c258 <_printf_i+0x150>
 800c306:	6923      	ldr	r3, [r4, #16]
 800c308:	462a      	mov	r2, r5
 800c30a:	4649      	mov	r1, r9
 800c30c:	4640      	mov	r0, r8
 800c30e:	47d0      	blx	sl
 800c310:	3001      	adds	r0, #1
 800c312:	d0ab      	beq.n	800c26c <_printf_i+0x164>
 800c314:	6823      	ldr	r3, [r4, #0]
 800c316:	079b      	lsls	r3, r3, #30
 800c318:	d413      	bmi.n	800c342 <_printf_i+0x23a>
 800c31a:	68e0      	ldr	r0, [r4, #12]
 800c31c:	9b03      	ldr	r3, [sp, #12]
 800c31e:	4298      	cmp	r0, r3
 800c320:	bfb8      	it	lt
 800c322:	4618      	movlt	r0, r3
 800c324:	e7a4      	b.n	800c270 <_printf_i+0x168>
 800c326:	2301      	movs	r3, #1
 800c328:	4632      	mov	r2, r6
 800c32a:	4649      	mov	r1, r9
 800c32c:	4640      	mov	r0, r8
 800c32e:	47d0      	blx	sl
 800c330:	3001      	adds	r0, #1
 800c332:	d09b      	beq.n	800c26c <_printf_i+0x164>
 800c334:	3501      	adds	r5, #1
 800c336:	68e3      	ldr	r3, [r4, #12]
 800c338:	9903      	ldr	r1, [sp, #12]
 800c33a:	1a5b      	subs	r3, r3, r1
 800c33c:	42ab      	cmp	r3, r5
 800c33e:	dcf2      	bgt.n	800c326 <_printf_i+0x21e>
 800c340:	e7eb      	b.n	800c31a <_printf_i+0x212>
 800c342:	2500      	movs	r5, #0
 800c344:	f104 0619 	add.w	r6, r4, #25
 800c348:	e7f5      	b.n	800c336 <_printf_i+0x22e>
 800c34a:	bf00      	nop
 800c34c:	080103f6 	.word	0x080103f6
 800c350:	08010407 	.word	0x08010407

0800c354 <_scanf_float>:
 800c354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c358:	b087      	sub	sp, #28
 800c35a:	4617      	mov	r7, r2
 800c35c:	9303      	str	r3, [sp, #12]
 800c35e:	688b      	ldr	r3, [r1, #8]
 800c360:	1e5a      	subs	r2, r3, #1
 800c362:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c366:	bf83      	ittte	hi
 800c368:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c36c:	195b      	addhi	r3, r3, r5
 800c36e:	9302      	strhi	r3, [sp, #8]
 800c370:	2300      	movls	r3, #0
 800c372:	bf86      	itte	hi
 800c374:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c378:	608b      	strhi	r3, [r1, #8]
 800c37a:	9302      	strls	r3, [sp, #8]
 800c37c:	680b      	ldr	r3, [r1, #0]
 800c37e:	468b      	mov	fp, r1
 800c380:	2500      	movs	r5, #0
 800c382:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c386:	f84b 3b1c 	str.w	r3, [fp], #28
 800c38a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c38e:	4680      	mov	r8, r0
 800c390:	460c      	mov	r4, r1
 800c392:	465e      	mov	r6, fp
 800c394:	46aa      	mov	sl, r5
 800c396:	46a9      	mov	r9, r5
 800c398:	9501      	str	r5, [sp, #4]
 800c39a:	68a2      	ldr	r2, [r4, #8]
 800c39c:	b152      	cbz	r2, 800c3b4 <_scanf_float+0x60>
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	781b      	ldrb	r3, [r3, #0]
 800c3a2:	2b4e      	cmp	r3, #78	; 0x4e
 800c3a4:	d864      	bhi.n	800c470 <_scanf_float+0x11c>
 800c3a6:	2b40      	cmp	r3, #64	; 0x40
 800c3a8:	d83c      	bhi.n	800c424 <_scanf_float+0xd0>
 800c3aa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800c3ae:	b2c8      	uxtb	r0, r1
 800c3b0:	280e      	cmp	r0, #14
 800c3b2:	d93a      	bls.n	800c42a <_scanf_float+0xd6>
 800c3b4:	f1b9 0f00 	cmp.w	r9, #0
 800c3b8:	d003      	beq.n	800c3c2 <_scanf_float+0x6e>
 800c3ba:	6823      	ldr	r3, [r4, #0]
 800c3bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c3c0:	6023      	str	r3, [r4, #0]
 800c3c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c3c6:	f1ba 0f01 	cmp.w	sl, #1
 800c3ca:	f200 8113 	bhi.w	800c5f4 <_scanf_float+0x2a0>
 800c3ce:	455e      	cmp	r6, fp
 800c3d0:	f200 8105 	bhi.w	800c5de <_scanf_float+0x28a>
 800c3d4:	2501      	movs	r5, #1
 800c3d6:	4628      	mov	r0, r5
 800c3d8:	b007      	add	sp, #28
 800c3da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3de:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800c3e2:	2a0d      	cmp	r2, #13
 800c3e4:	d8e6      	bhi.n	800c3b4 <_scanf_float+0x60>
 800c3e6:	a101      	add	r1, pc, #4	; (adr r1, 800c3ec <_scanf_float+0x98>)
 800c3e8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c3ec:	0800c52b 	.word	0x0800c52b
 800c3f0:	0800c3b5 	.word	0x0800c3b5
 800c3f4:	0800c3b5 	.word	0x0800c3b5
 800c3f8:	0800c3b5 	.word	0x0800c3b5
 800c3fc:	0800c58b 	.word	0x0800c58b
 800c400:	0800c563 	.word	0x0800c563
 800c404:	0800c3b5 	.word	0x0800c3b5
 800c408:	0800c3b5 	.word	0x0800c3b5
 800c40c:	0800c539 	.word	0x0800c539
 800c410:	0800c3b5 	.word	0x0800c3b5
 800c414:	0800c3b5 	.word	0x0800c3b5
 800c418:	0800c3b5 	.word	0x0800c3b5
 800c41c:	0800c3b5 	.word	0x0800c3b5
 800c420:	0800c4f1 	.word	0x0800c4f1
 800c424:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800c428:	e7db      	b.n	800c3e2 <_scanf_float+0x8e>
 800c42a:	290e      	cmp	r1, #14
 800c42c:	d8c2      	bhi.n	800c3b4 <_scanf_float+0x60>
 800c42e:	a001      	add	r0, pc, #4	; (adr r0, 800c434 <_scanf_float+0xe0>)
 800c430:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c434:	0800c4e3 	.word	0x0800c4e3
 800c438:	0800c3b5 	.word	0x0800c3b5
 800c43c:	0800c4e3 	.word	0x0800c4e3
 800c440:	0800c577 	.word	0x0800c577
 800c444:	0800c3b5 	.word	0x0800c3b5
 800c448:	0800c491 	.word	0x0800c491
 800c44c:	0800c4cd 	.word	0x0800c4cd
 800c450:	0800c4cd 	.word	0x0800c4cd
 800c454:	0800c4cd 	.word	0x0800c4cd
 800c458:	0800c4cd 	.word	0x0800c4cd
 800c45c:	0800c4cd 	.word	0x0800c4cd
 800c460:	0800c4cd 	.word	0x0800c4cd
 800c464:	0800c4cd 	.word	0x0800c4cd
 800c468:	0800c4cd 	.word	0x0800c4cd
 800c46c:	0800c4cd 	.word	0x0800c4cd
 800c470:	2b6e      	cmp	r3, #110	; 0x6e
 800c472:	d809      	bhi.n	800c488 <_scanf_float+0x134>
 800c474:	2b60      	cmp	r3, #96	; 0x60
 800c476:	d8b2      	bhi.n	800c3de <_scanf_float+0x8a>
 800c478:	2b54      	cmp	r3, #84	; 0x54
 800c47a:	d077      	beq.n	800c56c <_scanf_float+0x218>
 800c47c:	2b59      	cmp	r3, #89	; 0x59
 800c47e:	d199      	bne.n	800c3b4 <_scanf_float+0x60>
 800c480:	2d07      	cmp	r5, #7
 800c482:	d197      	bne.n	800c3b4 <_scanf_float+0x60>
 800c484:	2508      	movs	r5, #8
 800c486:	e029      	b.n	800c4dc <_scanf_float+0x188>
 800c488:	2b74      	cmp	r3, #116	; 0x74
 800c48a:	d06f      	beq.n	800c56c <_scanf_float+0x218>
 800c48c:	2b79      	cmp	r3, #121	; 0x79
 800c48e:	e7f6      	b.n	800c47e <_scanf_float+0x12a>
 800c490:	6821      	ldr	r1, [r4, #0]
 800c492:	05c8      	lsls	r0, r1, #23
 800c494:	d51a      	bpl.n	800c4cc <_scanf_float+0x178>
 800c496:	9b02      	ldr	r3, [sp, #8]
 800c498:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c49c:	6021      	str	r1, [r4, #0]
 800c49e:	f109 0901 	add.w	r9, r9, #1
 800c4a2:	b11b      	cbz	r3, 800c4ac <_scanf_float+0x158>
 800c4a4:	3b01      	subs	r3, #1
 800c4a6:	3201      	adds	r2, #1
 800c4a8:	9302      	str	r3, [sp, #8]
 800c4aa:	60a2      	str	r2, [r4, #8]
 800c4ac:	68a3      	ldr	r3, [r4, #8]
 800c4ae:	3b01      	subs	r3, #1
 800c4b0:	60a3      	str	r3, [r4, #8]
 800c4b2:	6923      	ldr	r3, [r4, #16]
 800c4b4:	3301      	adds	r3, #1
 800c4b6:	6123      	str	r3, [r4, #16]
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	3b01      	subs	r3, #1
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	607b      	str	r3, [r7, #4]
 800c4c0:	f340 8084 	ble.w	800c5cc <_scanf_float+0x278>
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	3301      	adds	r3, #1
 800c4c8:	603b      	str	r3, [r7, #0]
 800c4ca:	e766      	b.n	800c39a <_scanf_float+0x46>
 800c4cc:	eb1a 0f05 	cmn.w	sl, r5
 800c4d0:	f47f af70 	bne.w	800c3b4 <_scanf_float+0x60>
 800c4d4:	6822      	ldr	r2, [r4, #0]
 800c4d6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800c4da:	6022      	str	r2, [r4, #0]
 800c4dc:	f806 3b01 	strb.w	r3, [r6], #1
 800c4e0:	e7e4      	b.n	800c4ac <_scanf_float+0x158>
 800c4e2:	6822      	ldr	r2, [r4, #0]
 800c4e4:	0610      	lsls	r0, r2, #24
 800c4e6:	f57f af65 	bpl.w	800c3b4 <_scanf_float+0x60>
 800c4ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c4ee:	e7f4      	b.n	800c4da <_scanf_float+0x186>
 800c4f0:	f1ba 0f00 	cmp.w	sl, #0
 800c4f4:	d10e      	bne.n	800c514 <_scanf_float+0x1c0>
 800c4f6:	f1b9 0f00 	cmp.w	r9, #0
 800c4fa:	d10e      	bne.n	800c51a <_scanf_float+0x1c6>
 800c4fc:	6822      	ldr	r2, [r4, #0]
 800c4fe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c502:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c506:	d108      	bne.n	800c51a <_scanf_float+0x1c6>
 800c508:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c50c:	6022      	str	r2, [r4, #0]
 800c50e:	f04f 0a01 	mov.w	sl, #1
 800c512:	e7e3      	b.n	800c4dc <_scanf_float+0x188>
 800c514:	f1ba 0f02 	cmp.w	sl, #2
 800c518:	d055      	beq.n	800c5c6 <_scanf_float+0x272>
 800c51a:	2d01      	cmp	r5, #1
 800c51c:	d002      	beq.n	800c524 <_scanf_float+0x1d0>
 800c51e:	2d04      	cmp	r5, #4
 800c520:	f47f af48 	bne.w	800c3b4 <_scanf_float+0x60>
 800c524:	3501      	adds	r5, #1
 800c526:	b2ed      	uxtb	r5, r5
 800c528:	e7d8      	b.n	800c4dc <_scanf_float+0x188>
 800c52a:	f1ba 0f01 	cmp.w	sl, #1
 800c52e:	f47f af41 	bne.w	800c3b4 <_scanf_float+0x60>
 800c532:	f04f 0a02 	mov.w	sl, #2
 800c536:	e7d1      	b.n	800c4dc <_scanf_float+0x188>
 800c538:	b97d      	cbnz	r5, 800c55a <_scanf_float+0x206>
 800c53a:	f1b9 0f00 	cmp.w	r9, #0
 800c53e:	f47f af3c 	bne.w	800c3ba <_scanf_float+0x66>
 800c542:	6822      	ldr	r2, [r4, #0]
 800c544:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c548:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c54c:	f47f af39 	bne.w	800c3c2 <_scanf_float+0x6e>
 800c550:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c554:	6022      	str	r2, [r4, #0]
 800c556:	2501      	movs	r5, #1
 800c558:	e7c0      	b.n	800c4dc <_scanf_float+0x188>
 800c55a:	2d03      	cmp	r5, #3
 800c55c:	d0e2      	beq.n	800c524 <_scanf_float+0x1d0>
 800c55e:	2d05      	cmp	r5, #5
 800c560:	e7de      	b.n	800c520 <_scanf_float+0x1cc>
 800c562:	2d02      	cmp	r5, #2
 800c564:	f47f af26 	bne.w	800c3b4 <_scanf_float+0x60>
 800c568:	2503      	movs	r5, #3
 800c56a:	e7b7      	b.n	800c4dc <_scanf_float+0x188>
 800c56c:	2d06      	cmp	r5, #6
 800c56e:	f47f af21 	bne.w	800c3b4 <_scanf_float+0x60>
 800c572:	2507      	movs	r5, #7
 800c574:	e7b2      	b.n	800c4dc <_scanf_float+0x188>
 800c576:	6822      	ldr	r2, [r4, #0]
 800c578:	0591      	lsls	r1, r2, #22
 800c57a:	f57f af1b 	bpl.w	800c3b4 <_scanf_float+0x60>
 800c57e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800c582:	6022      	str	r2, [r4, #0]
 800c584:	f8cd 9004 	str.w	r9, [sp, #4]
 800c588:	e7a8      	b.n	800c4dc <_scanf_float+0x188>
 800c58a:	6822      	ldr	r2, [r4, #0]
 800c58c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800c590:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c594:	d006      	beq.n	800c5a4 <_scanf_float+0x250>
 800c596:	0550      	lsls	r0, r2, #21
 800c598:	f57f af0c 	bpl.w	800c3b4 <_scanf_float+0x60>
 800c59c:	f1b9 0f00 	cmp.w	r9, #0
 800c5a0:	f43f af0f 	beq.w	800c3c2 <_scanf_float+0x6e>
 800c5a4:	0591      	lsls	r1, r2, #22
 800c5a6:	bf58      	it	pl
 800c5a8:	9901      	ldrpl	r1, [sp, #4]
 800c5aa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c5ae:	bf58      	it	pl
 800c5b0:	eba9 0101 	subpl.w	r1, r9, r1
 800c5b4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800c5b8:	bf58      	it	pl
 800c5ba:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c5be:	6022      	str	r2, [r4, #0]
 800c5c0:	f04f 0900 	mov.w	r9, #0
 800c5c4:	e78a      	b.n	800c4dc <_scanf_float+0x188>
 800c5c6:	f04f 0a03 	mov.w	sl, #3
 800c5ca:	e787      	b.n	800c4dc <_scanf_float+0x188>
 800c5cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c5d0:	4639      	mov	r1, r7
 800c5d2:	4640      	mov	r0, r8
 800c5d4:	4798      	blx	r3
 800c5d6:	2800      	cmp	r0, #0
 800c5d8:	f43f aedf 	beq.w	800c39a <_scanf_float+0x46>
 800c5dc:	e6ea      	b.n	800c3b4 <_scanf_float+0x60>
 800c5de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c5e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c5e6:	463a      	mov	r2, r7
 800c5e8:	4640      	mov	r0, r8
 800c5ea:	4798      	blx	r3
 800c5ec:	6923      	ldr	r3, [r4, #16]
 800c5ee:	3b01      	subs	r3, #1
 800c5f0:	6123      	str	r3, [r4, #16]
 800c5f2:	e6ec      	b.n	800c3ce <_scanf_float+0x7a>
 800c5f4:	1e6b      	subs	r3, r5, #1
 800c5f6:	2b06      	cmp	r3, #6
 800c5f8:	d825      	bhi.n	800c646 <_scanf_float+0x2f2>
 800c5fa:	2d02      	cmp	r5, #2
 800c5fc:	d836      	bhi.n	800c66c <_scanf_float+0x318>
 800c5fe:	455e      	cmp	r6, fp
 800c600:	f67f aee8 	bls.w	800c3d4 <_scanf_float+0x80>
 800c604:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c608:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c60c:	463a      	mov	r2, r7
 800c60e:	4640      	mov	r0, r8
 800c610:	4798      	blx	r3
 800c612:	6923      	ldr	r3, [r4, #16]
 800c614:	3b01      	subs	r3, #1
 800c616:	6123      	str	r3, [r4, #16]
 800c618:	e7f1      	b.n	800c5fe <_scanf_float+0x2aa>
 800c61a:	9802      	ldr	r0, [sp, #8]
 800c61c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c620:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c624:	9002      	str	r0, [sp, #8]
 800c626:	463a      	mov	r2, r7
 800c628:	4640      	mov	r0, r8
 800c62a:	4798      	blx	r3
 800c62c:	6923      	ldr	r3, [r4, #16]
 800c62e:	3b01      	subs	r3, #1
 800c630:	6123      	str	r3, [r4, #16]
 800c632:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c636:	fa5f fa8a 	uxtb.w	sl, sl
 800c63a:	f1ba 0f02 	cmp.w	sl, #2
 800c63e:	d1ec      	bne.n	800c61a <_scanf_float+0x2c6>
 800c640:	3d03      	subs	r5, #3
 800c642:	b2ed      	uxtb	r5, r5
 800c644:	1b76      	subs	r6, r6, r5
 800c646:	6823      	ldr	r3, [r4, #0]
 800c648:	05da      	lsls	r2, r3, #23
 800c64a:	d52f      	bpl.n	800c6ac <_scanf_float+0x358>
 800c64c:	055b      	lsls	r3, r3, #21
 800c64e:	d510      	bpl.n	800c672 <_scanf_float+0x31e>
 800c650:	455e      	cmp	r6, fp
 800c652:	f67f aebf 	bls.w	800c3d4 <_scanf_float+0x80>
 800c656:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c65a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c65e:	463a      	mov	r2, r7
 800c660:	4640      	mov	r0, r8
 800c662:	4798      	blx	r3
 800c664:	6923      	ldr	r3, [r4, #16]
 800c666:	3b01      	subs	r3, #1
 800c668:	6123      	str	r3, [r4, #16]
 800c66a:	e7f1      	b.n	800c650 <_scanf_float+0x2fc>
 800c66c:	46aa      	mov	sl, r5
 800c66e:	9602      	str	r6, [sp, #8]
 800c670:	e7df      	b.n	800c632 <_scanf_float+0x2de>
 800c672:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c676:	6923      	ldr	r3, [r4, #16]
 800c678:	2965      	cmp	r1, #101	; 0x65
 800c67a:	f103 33ff 	add.w	r3, r3, #4294967295
 800c67e:	f106 35ff 	add.w	r5, r6, #4294967295
 800c682:	6123      	str	r3, [r4, #16]
 800c684:	d00c      	beq.n	800c6a0 <_scanf_float+0x34c>
 800c686:	2945      	cmp	r1, #69	; 0x45
 800c688:	d00a      	beq.n	800c6a0 <_scanf_float+0x34c>
 800c68a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c68e:	463a      	mov	r2, r7
 800c690:	4640      	mov	r0, r8
 800c692:	4798      	blx	r3
 800c694:	6923      	ldr	r3, [r4, #16]
 800c696:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c69a:	3b01      	subs	r3, #1
 800c69c:	1eb5      	subs	r5, r6, #2
 800c69e:	6123      	str	r3, [r4, #16]
 800c6a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c6a4:	463a      	mov	r2, r7
 800c6a6:	4640      	mov	r0, r8
 800c6a8:	4798      	blx	r3
 800c6aa:	462e      	mov	r6, r5
 800c6ac:	6825      	ldr	r5, [r4, #0]
 800c6ae:	f015 0510 	ands.w	r5, r5, #16
 800c6b2:	d159      	bne.n	800c768 <_scanf_float+0x414>
 800c6b4:	7035      	strb	r5, [r6, #0]
 800c6b6:	6823      	ldr	r3, [r4, #0]
 800c6b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c6bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c6c0:	d11b      	bne.n	800c6fa <_scanf_float+0x3a6>
 800c6c2:	9b01      	ldr	r3, [sp, #4]
 800c6c4:	454b      	cmp	r3, r9
 800c6c6:	eba3 0209 	sub.w	r2, r3, r9
 800c6ca:	d123      	bne.n	800c714 <_scanf_float+0x3c0>
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	4659      	mov	r1, fp
 800c6d0:	4640      	mov	r0, r8
 800c6d2:	f000 fe97 	bl	800d404 <_strtod_r>
 800c6d6:	6822      	ldr	r2, [r4, #0]
 800c6d8:	9b03      	ldr	r3, [sp, #12]
 800c6da:	f012 0f02 	tst.w	r2, #2
 800c6de:	ec57 6b10 	vmov	r6, r7, d0
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	d021      	beq.n	800c72a <_scanf_float+0x3d6>
 800c6e6:	9903      	ldr	r1, [sp, #12]
 800c6e8:	1d1a      	adds	r2, r3, #4
 800c6ea:	600a      	str	r2, [r1, #0]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	e9c3 6700 	strd	r6, r7, [r3]
 800c6f2:	68e3      	ldr	r3, [r4, #12]
 800c6f4:	3301      	adds	r3, #1
 800c6f6:	60e3      	str	r3, [r4, #12]
 800c6f8:	e66d      	b.n	800c3d6 <_scanf_float+0x82>
 800c6fa:	9b04      	ldr	r3, [sp, #16]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d0e5      	beq.n	800c6cc <_scanf_float+0x378>
 800c700:	9905      	ldr	r1, [sp, #20]
 800c702:	230a      	movs	r3, #10
 800c704:	462a      	mov	r2, r5
 800c706:	3101      	adds	r1, #1
 800c708:	4640      	mov	r0, r8
 800c70a:	f000 ff03 	bl	800d514 <_strtol_r>
 800c70e:	9b04      	ldr	r3, [sp, #16]
 800c710:	9e05      	ldr	r6, [sp, #20]
 800c712:	1ac2      	subs	r2, r0, r3
 800c714:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c718:	429e      	cmp	r6, r3
 800c71a:	bf28      	it	cs
 800c71c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800c720:	4912      	ldr	r1, [pc, #72]	; (800c76c <_scanf_float+0x418>)
 800c722:	4630      	mov	r0, r6
 800c724:	f000 f82c 	bl	800c780 <siprintf>
 800c728:	e7d0      	b.n	800c6cc <_scanf_float+0x378>
 800c72a:	9903      	ldr	r1, [sp, #12]
 800c72c:	f012 0f04 	tst.w	r2, #4
 800c730:	f103 0204 	add.w	r2, r3, #4
 800c734:	600a      	str	r2, [r1, #0]
 800c736:	d1d9      	bne.n	800c6ec <_scanf_float+0x398>
 800c738:	f8d3 8000 	ldr.w	r8, [r3]
 800c73c:	ee10 2a10 	vmov	r2, s0
 800c740:	ee10 0a10 	vmov	r0, s0
 800c744:	463b      	mov	r3, r7
 800c746:	4639      	mov	r1, r7
 800c748:	f7f4 fa10 	bl	8000b6c <__aeabi_dcmpun>
 800c74c:	b128      	cbz	r0, 800c75a <_scanf_float+0x406>
 800c74e:	4808      	ldr	r0, [pc, #32]	; (800c770 <_scanf_float+0x41c>)
 800c750:	f000 f810 	bl	800c774 <nanf>
 800c754:	ed88 0a00 	vstr	s0, [r8]
 800c758:	e7cb      	b.n	800c6f2 <_scanf_float+0x39e>
 800c75a:	4630      	mov	r0, r6
 800c75c:	4639      	mov	r1, r7
 800c75e:	f7f4 fa63 	bl	8000c28 <__aeabi_d2f>
 800c762:	f8c8 0000 	str.w	r0, [r8]
 800c766:	e7c4      	b.n	800c6f2 <_scanf_float+0x39e>
 800c768:	2500      	movs	r5, #0
 800c76a:	e634      	b.n	800c3d6 <_scanf_float+0x82>
 800c76c:	08010418 	.word	0x08010418
 800c770:	08010820 	.word	0x08010820

0800c774 <nanf>:
 800c774:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c77c <nanf+0x8>
 800c778:	4770      	bx	lr
 800c77a:	bf00      	nop
 800c77c:	7fc00000 	.word	0x7fc00000

0800c780 <siprintf>:
 800c780:	b40e      	push	{r1, r2, r3}
 800c782:	b500      	push	{lr}
 800c784:	b09c      	sub	sp, #112	; 0x70
 800c786:	ab1d      	add	r3, sp, #116	; 0x74
 800c788:	9002      	str	r0, [sp, #8]
 800c78a:	9006      	str	r0, [sp, #24]
 800c78c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c790:	4809      	ldr	r0, [pc, #36]	; (800c7b8 <siprintf+0x38>)
 800c792:	9107      	str	r1, [sp, #28]
 800c794:	9104      	str	r1, [sp, #16]
 800c796:	4909      	ldr	r1, [pc, #36]	; (800c7bc <siprintf+0x3c>)
 800c798:	f853 2b04 	ldr.w	r2, [r3], #4
 800c79c:	9105      	str	r1, [sp, #20]
 800c79e:	6800      	ldr	r0, [r0, #0]
 800c7a0:	9301      	str	r3, [sp, #4]
 800c7a2:	a902      	add	r1, sp, #8
 800c7a4:	f002 fee2 	bl	800f56c <_svfiprintf_r>
 800c7a8:	9b02      	ldr	r3, [sp, #8]
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	701a      	strb	r2, [r3, #0]
 800c7ae:	b01c      	add	sp, #112	; 0x70
 800c7b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c7b4:	b003      	add	sp, #12
 800c7b6:	4770      	bx	lr
 800c7b8:	2000011c 	.word	0x2000011c
 800c7bc:	ffff0208 	.word	0xffff0208

0800c7c0 <sulp>:
 800c7c0:	b570      	push	{r4, r5, r6, lr}
 800c7c2:	4604      	mov	r4, r0
 800c7c4:	460d      	mov	r5, r1
 800c7c6:	ec45 4b10 	vmov	d0, r4, r5
 800c7ca:	4616      	mov	r6, r2
 800c7cc:	f002 fc2c 	bl	800f028 <__ulp>
 800c7d0:	ec51 0b10 	vmov	r0, r1, d0
 800c7d4:	b17e      	cbz	r6, 800c7f6 <sulp+0x36>
 800c7d6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c7da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	dd09      	ble.n	800c7f6 <sulp+0x36>
 800c7e2:	051b      	lsls	r3, r3, #20
 800c7e4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c7e8:	2400      	movs	r4, #0
 800c7ea:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c7ee:	4622      	mov	r2, r4
 800c7f0:	462b      	mov	r3, r5
 800c7f2:	f7f3 ff21 	bl	8000638 <__aeabi_dmul>
 800c7f6:	bd70      	pop	{r4, r5, r6, pc}

0800c7f8 <_strtod_l>:
 800c7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7fc:	ed2d 8b02 	vpush	{d8}
 800c800:	b09d      	sub	sp, #116	; 0x74
 800c802:	461f      	mov	r7, r3
 800c804:	2300      	movs	r3, #0
 800c806:	9318      	str	r3, [sp, #96]	; 0x60
 800c808:	4ba2      	ldr	r3, [pc, #648]	; (800ca94 <_strtod_l+0x29c>)
 800c80a:	9213      	str	r2, [sp, #76]	; 0x4c
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	9305      	str	r3, [sp, #20]
 800c810:	4604      	mov	r4, r0
 800c812:	4618      	mov	r0, r3
 800c814:	4688      	mov	r8, r1
 800c816:	f7f3 fcfb 	bl	8000210 <strlen>
 800c81a:	f04f 0a00 	mov.w	sl, #0
 800c81e:	4605      	mov	r5, r0
 800c820:	f04f 0b00 	mov.w	fp, #0
 800c824:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c828:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c82a:	781a      	ldrb	r2, [r3, #0]
 800c82c:	2a2b      	cmp	r2, #43	; 0x2b
 800c82e:	d04e      	beq.n	800c8ce <_strtod_l+0xd6>
 800c830:	d83b      	bhi.n	800c8aa <_strtod_l+0xb2>
 800c832:	2a0d      	cmp	r2, #13
 800c834:	d834      	bhi.n	800c8a0 <_strtod_l+0xa8>
 800c836:	2a08      	cmp	r2, #8
 800c838:	d834      	bhi.n	800c8a4 <_strtod_l+0xac>
 800c83a:	2a00      	cmp	r2, #0
 800c83c:	d03e      	beq.n	800c8bc <_strtod_l+0xc4>
 800c83e:	2300      	movs	r3, #0
 800c840:	930a      	str	r3, [sp, #40]	; 0x28
 800c842:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c844:	7833      	ldrb	r3, [r6, #0]
 800c846:	2b30      	cmp	r3, #48	; 0x30
 800c848:	f040 80b0 	bne.w	800c9ac <_strtod_l+0x1b4>
 800c84c:	7873      	ldrb	r3, [r6, #1]
 800c84e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c852:	2b58      	cmp	r3, #88	; 0x58
 800c854:	d168      	bne.n	800c928 <_strtod_l+0x130>
 800c856:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c858:	9301      	str	r3, [sp, #4]
 800c85a:	ab18      	add	r3, sp, #96	; 0x60
 800c85c:	9702      	str	r7, [sp, #8]
 800c85e:	9300      	str	r3, [sp, #0]
 800c860:	4a8d      	ldr	r2, [pc, #564]	; (800ca98 <_strtod_l+0x2a0>)
 800c862:	ab19      	add	r3, sp, #100	; 0x64
 800c864:	a917      	add	r1, sp, #92	; 0x5c
 800c866:	4620      	mov	r0, r4
 800c868:	f001 fd38 	bl	800e2dc <__gethex>
 800c86c:	f010 0707 	ands.w	r7, r0, #7
 800c870:	4605      	mov	r5, r0
 800c872:	d005      	beq.n	800c880 <_strtod_l+0x88>
 800c874:	2f06      	cmp	r7, #6
 800c876:	d12c      	bne.n	800c8d2 <_strtod_l+0xda>
 800c878:	3601      	adds	r6, #1
 800c87a:	2300      	movs	r3, #0
 800c87c:	9617      	str	r6, [sp, #92]	; 0x5c
 800c87e:	930a      	str	r3, [sp, #40]	; 0x28
 800c880:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c882:	2b00      	cmp	r3, #0
 800c884:	f040 8590 	bne.w	800d3a8 <_strtod_l+0xbb0>
 800c888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c88a:	b1eb      	cbz	r3, 800c8c8 <_strtod_l+0xd0>
 800c88c:	4652      	mov	r2, sl
 800c88e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c892:	ec43 2b10 	vmov	d0, r2, r3
 800c896:	b01d      	add	sp, #116	; 0x74
 800c898:	ecbd 8b02 	vpop	{d8}
 800c89c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8a0:	2a20      	cmp	r2, #32
 800c8a2:	d1cc      	bne.n	800c83e <_strtod_l+0x46>
 800c8a4:	3301      	adds	r3, #1
 800c8a6:	9317      	str	r3, [sp, #92]	; 0x5c
 800c8a8:	e7be      	b.n	800c828 <_strtod_l+0x30>
 800c8aa:	2a2d      	cmp	r2, #45	; 0x2d
 800c8ac:	d1c7      	bne.n	800c83e <_strtod_l+0x46>
 800c8ae:	2201      	movs	r2, #1
 800c8b0:	920a      	str	r2, [sp, #40]	; 0x28
 800c8b2:	1c5a      	adds	r2, r3, #1
 800c8b4:	9217      	str	r2, [sp, #92]	; 0x5c
 800c8b6:	785b      	ldrb	r3, [r3, #1]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d1c2      	bne.n	800c842 <_strtod_l+0x4a>
 800c8bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c8be:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	f040 856e 	bne.w	800d3a4 <_strtod_l+0xbac>
 800c8c8:	4652      	mov	r2, sl
 800c8ca:	465b      	mov	r3, fp
 800c8cc:	e7e1      	b.n	800c892 <_strtod_l+0x9a>
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	e7ee      	b.n	800c8b0 <_strtod_l+0xb8>
 800c8d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c8d4:	b13a      	cbz	r2, 800c8e6 <_strtod_l+0xee>
 800c8d6:	2135      	movs	r1, #53	; 0x35
 800c8d8:	a81a      	add	r0, sp, #104	; 0x68
 800c8da:	f002 fcb0 	bl	800f23e <__copybits>
 800c8de:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c8e0:	4620      	mov	r0, r4
 800c8e2:	f002 f86f 	bl	800e9c4 <_Bfree>
 800c8e6:	3f01      	subs	r7, #1
 800c8e8:	2f04      	cmp	r7, #4
 800c8ea:	d806      	bhi.n	800c8fa <_strtod_l+0x102>
 800c8ec:	e8df f007 	tbb	[pc, r7]
 800c8f0:	1714030a 	.word	0x1714030a
 800c8f4:	0a          	.byte	0x0a
 800c8f5:	00          	.byte	0x00
 800c8f6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800c8fa:	0728      	lsls	r0, r5, #28
 800c8fc:	d5c0      	bpl.n	800c880 <_strtod_l+0x88>
 800c8fe:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c902:	e7bd      	b.n	800c880 <_strtod_l+0x88>
 800c904:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800c908:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c90a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c90e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c912:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c916:	e7f0      	b.n	800c8fa <_strtod_l+0x102>
 800c918:	f8df b180 	ldr.w	fp, [pc, #384]	; 800ca9c <_strtod_l+0x2a4>
 800c91c:	e7ed      	b.n	800c8fa <_strtod_l+0x102>
 800c91e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c922:	f04f 3aff 	mov.w	sl, #4294967295
 800c926:	e7e8      	b.n	800c8fa <_strtod_l+0x102>
 800c928:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c92a:	1c5a      	adds	r2, r3, #1
 800c92c:	9217      	str	r2, [sp, #92]	; 0x5c
 800c92e:	785b      	ldrb	r3, [r3, #1]
 800c930:	2b30      	cmp	r3, #48	; 0x30
 800c932:	d0f9      	beq.n	800c928 <_strtod_l+0x130>
 800c934:	2b00      	cmp	r3, #0
 800c936:	d0a3      	beq.n	800c880 <_strtod_l+0x88>
 800c938:	2301      	movs	r3, #1
 800c93a:	f04f 0900 	mov.w	r9, #0
 800c93e:	9304      	str	r3, [sp, #16]
 800c940:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c942:	9308      	str	r3, [sp, #32]
 800c944:	f8cd 901c 	str.w	r9, [sp, #28]
 800c948:	464f      	mov	r7, r9
 800c94a:	220a      	movs	r2, #10
 800c94c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c94e:	7806      	ldrb	r6, [r0, #0]
 800c950:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c954:	b2d9      	uxtb	r1, r3
 800c956:	2909      	cmp	r1, #9
 800c958:	d92a      	bls.n	800c9b0 <_strtod_l+0x1b8>
 800c95a:	9905      	ldr	r1, [sp, #20]
 800c95c:	462a      	mov	r2, r5
 800c95e:	f002 ff1f 	bl	800f7a0 <strncmp>
 800c962:	b398      	cbz	r0, 800c9cc <_strtod_l+0x1d4>
 800c964:	2000      	movs	r0, #0
 800c966:	4632      	mov	r2, r6
 800c968:	463d      	mov	r5, r7
 800c96a:	9005      	str	r0, [sp, #20]
 800c96c:	4603      	mov	r3, r0
 800c96e:	2a65      	cmp	r2, #101	; 0x65
 800c970:	d001      	beq.n	800c976 <_strtod_l+0x17e>
 800c972:	2a45      	cmp	r2, #69	; 0x45
 800c974:	d118      	bne.n	800c9a8 <_strtod_l+0x1b0>
 800c976:	b91d      	cbnz	r5, 800c980 <_strtod_l+0x188>
 800c978:	9a04      	ldr	r2, [sp, #16]
 800c97a:	4302      	orrs	r2, r0
 800c97c:	d09e      	beq.n	800c8bc <_strtod_l+0xc4>
 800c97e:	2500      	movs	r5, #0
 800c980:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800c984:	f108 0201 	add.w	r2, r8, #1
 800c988:	9217      	str	r2, [sp, #92]	; 0x5c
 800c98a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800c98e:	2a2b      	cmp	r2, #43	; 0x2b
 800c990:	d075      	beq.n	800ca7e <_strtod_l+0x286>
 800c992:	2a2d      	cmp	r2, #45	; 0x2d
 800c994:	d07b      	beq.n	800ca8e <_strtod_l+0x296>
 800c996:	f04f 0c00 	mov.w	ip, #0
 800c99a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c99e:	2909      	cmp	r1, #9
 800c9a0:	f240 8082 	bls.w	800caa8 <_strtod_l+0x2b0>
 800c9a4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c9a8:	2600      	movs	r6, #0
 800c9aa:	e09d      	b.n	800cae8 <_strtod_l+0x2f0>
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	e7c4      	b.n	800c93a <_strtod_l+0x142>
 800c9b0:	2f08      	cmp	r7, #8
 800c9b2:	bfd8      	it	le
 800c9b4:	9907      	ldrle	r1, [sp, #28]
 800c9b6:	f100 0001 	add.w	r0, r0, #1
 800c9ba:	bfda      	itte	le
 800c9bc:	fb02 3301 	mlale	r3, r2, r1, r3
 800c9c0:	9307      	strle	r3, [sp, #28]
 800c9c2:	fb02 3909 	mlagt	r9, r2, r9, r3
 800c9c6:	3701      	adds	r7, #1
 800c9c8:	9017      	str	r0, [sp, #92]	; 0x5c
 800c9ca:	e7bf      	b.n	800c94c <_strtod_l+0x154>
 800c9cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c9ce:	195a      	adds	r2, r3, r5
 800c9d0:	9217      	str	r2, [sp, #92]	; 0x5c
 800c9d2:	5d5a      	ldrb	r2, [r3, r5]
 800c9d4:	2f00      	cmp	r7, #0
 800c9d6:	d037      	beq.n	800ca48 <_strtod_l+0x250>
 800c9d8:	9005      	str	r0, [sp, #20]
 800c9da:	463d      	mov	r5, r7
 800c9dc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c9e0:	2b09      	cmp	r3, #9
 800c9e2:	d912      	bls.n	800ca0a <_strtod_l+0x212>
 800c9e4:	2301      	movs	r3, #1
 800c9e6:	e7c2      	b.n	800c96e <_strtod_l+0x176>
 800c9e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c9ea:	1c5a      	adds	r2, r3, #1
 800c9ec:	9217      	str	r2, [sp, #92]	; 0x5c
 800c9ee:	785a      	ldrb	r2, [r3, #1]
 800c9f0:	3001      	adds	r0, #1
 800c9f2:	2a30      	cmp	r2, #48	; 0x30
 800c9f4:	d0f8      	beq.n	800c9e8 <_strtod_l+0x1f0>
 800c9f6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c9fa:	2b08      	cmp	r3, #8
 800c9fc:	f200 84d9 	bhi.w	800d3b2 <_strtod_l+0xbba>
 800ca00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ca02:	9005      	str	r0, [sp, #20]
 800ca04:	2000      	movs	r0, #0
 800ca06:	9308      	str	r3, [sp, #32]
 800ca08:	4605      	mov	r5, r0
 800ca0a:	3a30      	subs	r2, #48	; 0x30
 800ca0c:	f100 0301 	add.w	r3, r0, #1
 800ca10:	d014      	beq.n	800ca3c <_strtod_l+0x244>
 800ca12:	9905      	ldr	r1, [sp, #20]
 800ca14:	4419      	add	r1, r3
 800ca16:	9105      	str	r1, [sp, #20]
 800ca18:	462b      	mov	r3, r5
 800ca1a:	eb00 0e05 	add.w	lr, r0, r5
 800ca1e:	210a      	movs	r1, #10
 800ca20:	4573      	cmp	r3, lr
 800ca22:	d113      	bne.n	800ca4c <_strtod_l+0x254>
 800ca24:	182b      	adds	r3, r5, r0
 800ca26:	2b08      	cmp	r3, #8
 800ca28:	f105 0501 	add.w	r5, r5, #1
 800ca2c:	4405      	add	r5, r0
 800ca2e:	dc1c      	bgt.n	800ca6a <_strtod_l+0x272>
 800ca30:	9907      	ldr	r1, [sp, #28]
 800ca32:	230a      	movs	r3, #10
 800ca34:	fb03 2301 	mla	r3, r3, r1, r2
 800ca38:	9307      	str	r3, [sp, #28]
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ca3e:	1c51      	adds	r1, r2, #1
 800ca40:	9117      	str	r1, [sp, #92]	; 0x5c
 800ca42:	7852      	ldrb	r2, [r2, #1]
 800ca44:	4618      	mov	r0, r3
 800ca46:	e7c9      	b.n	800c9dc <_strtod_l+0x1e4>
 800ca48:	4638      	mov	r0, r7
 800ca4a:	e7d2      	b.n	800c9f2 <_strtod_l+0x1fa>
 800ca4c:	2b08      	cmp	r3, #8
 800ca4e:	dc04      	bgt.n	800ca5a <_strtod_l+0x262>
 800ca50:	9e07      	ldr	r6, [sp, #28]
 800ca52:	434e      	muls	r6, r1
 800ca54:	9607      	str	r6, [sp, #28]
 800ca56:	3301      	adds	r3, #1
 800ca58:	e7e2      	b.n	800ca20 <_strtod_l+0x228>
 800ca5a:	f103 0c01 	add.w	ip, r3, #1
 800ca5e:	f1bc 0f10 	cmp.w	ip, #16
 800ca62:	bfd8      	it	le
 800ca64:	fb01 f909 	mulle.w	r9, r1, r9
 800ca68:	e7f5      	b.n	800ca56 <_strtod_l+0x25e>
 800ca6a:	2d10      	cmp	r5, #16
 800ca6c:	bfdc      	itt	le
 800ca6e:	230a      	movle	r3, #10
 800ca70:	fb03 2909 	mlale	r9, r3, r9, r2
 800ca74:	e7e1      	b.n	800ca3a <_strtod_l+0x242>
 800ca76:	2300      	movs	r3, #0
 800ca78:	9305      	str	r3, [sp, #20]
 800ca7a:	2301      	movs	r3, #1
 800ca7c:	e77c      	b.n	800c978 <_strtod_l+0x180>
 800ca7e:	f04f 0c00 	mov.w	ip, #0
 800ca82:	f108 0202 	add.w	r2, r8, #2
 800ca86:	9217      	str	r2, [sp, #92]	; 0x5c
 800ca88:	f898 2002 	ldrb.w	r2, [r8, #2]
 800ca8c:	e785      	b.n	800c99a <_strtod_l+0x1a2>
 800ca8e:	f04f 0c01 	mov.w	ip, #1
 800ca92:	e7f6      	b.n	800ca82 <_strtod_l+0x28a>
 800ca94:	08010668 	.word	0x08010668
 800ca98:	08010420 	.word	0x08010420
 800ca9c:	7ff00000 	.word	0x7ff00000
 800caa0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800caa2:	1c51      	adds	r1, r2, #1
 800caa4:	9117      	str	r1, [sp, #92]	; 0x5c
 800caa6:	7852      	ldrb	r2, [r2, #1]
 800caa8:	2a30      	cmp	r2, #48	; 0x30
 800caaa:	d0f9      	beq.n	800caa0 <_strtod_l+0x2a8>
 800caac:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800cab0:	2908      	cmp	r1, #8
 800cab2:	f63f af79 	bhi.w	800c9a8 <_strtod_l+0x1b0>
 800cab6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800caba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cabc:	9206      	str	r2, [sp, #24]
 800cabe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cac0:	1c51      	adds	r1, r2, #1
 800cac2:	9117      	str	r1, [sp, #92]	; 0x5c
 800cac4:	7852      	ldrb	r2, [r2, #1]
 800cac6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800caca:	2e09      	cmp	r6, #9
 800cacc:	d937      	bls.n	800cb3e <_strtod_l+0x346>
 800cace:	9e06      	ldr	r6, [sp, #24]
 800cad0:	1b89      	subs	r1, r1, r6
 800cad2:	2908      	cmp	r1, #8
 800cad4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800cad8:	dc02      	bgt.n	800cae0 <_strtod_l+0x2e8>
 800cada:	4576      	cmp	r6, lr
 800cadc:	bfa8      	it	ge
 800cade:	4676      	movge	r6, lr
 800cae0:	f1bc 0f00 	cmp.w	ip, #0
 800cae4:	d000      	beq.n	800cae8 <_strtod_l+0x2f0>
 800cae6:	4276      	negs	r6, r6
 800cae8:	2d00      	cmp	r5, #0
 800caea:	d14d      	bne.n	800cb88 <_strtod_l+0x390>
 800caec:	9904      	ldr	r1, [sp, #16]
 800caee:	4301      	orrs	r1, r0
 800caf0:	f47f aec6 	bne.w	800c880 <_strtod_l+0x88>
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	f47f aee1 	bne.w	800c8bc <_strtod_l+0xc4>
 800cafa:	2a69      	cmp	r2, #105	; 0x69
 800cafc:	d027      	beq.n	800cb4e <_strtod_l+0x356>
 800cafe:	dc24      	bgt.n	800cb4a <_strtod_l+0x352>
 800cb00:	2a49      	cmp	r2, #73	; 0x49
 800cb02:	d024      	beq.n	800cb4e <_strtod_l+0x356>
 800cb04:	2a4e      	cmp	r2, #78	; 0x4e
 800cb06:	f47f aed9 	bne.w	800c8bc <_strtod_l+0xc4>
 800cb0a:	499f      	ldr	r1, [pc, #636]	; (800cd88 <_strtod_l+0x590>)
 800cb0c:	a817      	add	r0, sp, #92	; 0x5c
 800cb0e:	f001 fe3d 	bl	800e78c <__match>
 800cb12:	2800      	cmp	r0, #0
 800cb14:	f43f aed2 	beq.w	800c8bc <_strtod_l+0xc4>
 800cb18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cb1a:	781b      	ldrb	r3, [r3, #0]
 800cb1c:	2b28      	cmp	r3, #40	; 0x28
 800cb1e:	d12d      	bne.n	800cb7c <_strtod_l+0x384>
 800cb20:	499a      	ldr	r1, [pc, #616]	; (800cd8c <_strtod_l+0x594>)
 800cb22:	aa1a      	add	r2, sp, #104	; 0x68
 800cb24:	a817      	add	r0, sp, #92	; 0x5c
 800cb26:	f001 fe45 	bl	800e7b4 <__hexnan>
 800cb2a:	2805      	cmp	r0, #5
 800cb2c:	d126      	bne.n	800cb7c <_strtod_l+0x384>
 800cb2e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cb30:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800cb34:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800cb38:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800cb3c:	e6a0      	b.n	800c880 <_strtod_l+0x88>
 800cb3e:	210a      	movs	r1, #10
 800cb40:	fb01 2e0e 	mla	lr, r1, lr, r2
 800cb44:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800cb48:	e7b9      	b.n	800cabe <_strtod_l+0x2c6>
 800cb4a:	2a6e      	cmp	r2, #110	; 0x6e
 800cb4c:	e7db      	b.n	800cb06 <_strtod_l+0x30e>
 800cb4e:	4990      	ldr	r1, [pc, #576]	; (800cd90 <_strtod_l+0x598>)
 800cb50:	a817      	add	r0, sp, #92	; 0x5c
 800cb52:	f001 fe1b 	bl	800e78c <__match>
 800cb56:	2800      	cmp	r0, #0
 800cb58:	f43f aeb0 	beq.w	800c8bc <_strtod_l+0xc4>
 800cb5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cb5e:	498d      	ldr	r1, [pc, #564]	; (800cd94 <_strtod_l+0x59c>)
 800cb60:	3b01      	subs	r3, #1
 800cb62:	a817      	add	r0, sp, #92	; 0x5c
 800cb64:	9317      	str	r3, [sp, #92]	; 0x5c
 800cb66:	f001 fe11 	bl	800e78c <__match>
 800cb6a:	b910      	cbnz	r0, 800cb72 <_strtod_l+0x37a>
 800cb6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cb6e:	3301      	adds	r3, #1
 800cb70:	9317      	str	r3, [sp, #92]	; 0x5c
 800cb72:	f8df b230 	ldr.w	fp, [pc, #560]	; 800cda4 <_strtod_l+0x5ac>
 800cb76:	f04f 0a00 	mov.w	sl, #0
 800cb7a:	e681      	b.n	800c880 <_strtod_l+0x88>
 800cb7c:	4886      	ldr	r0, [pc, #536]	; (800cd98 <_strtod_l+0x5a0>)
 800cb7e:	f002 fdf7 	bl	800f770 <nan>
 800cb82:	ec5b ab10 	vmov	sl, fp, d0
 800cb86:	e67b      	b.n	800c880 <_strtod_l+0x88>
 800cb88:	9b05      	ldr	r3, [sp, #20]
 800cb8a:	9807      	ldr	r0, [sp, #28]
 800cb8c:	1af3      	subs	r3, r6, r3
 800cb8e:	2f00      	cmp	r7, #0
 800cb90:	bf08      	it	eq
 800cb92:	462f      	moveq	r7, r5
 800cb94:	2d10      	cmp	r5, #16
 800cb96:	9306      	str	r3, [sp, #24]
 800cb98:	46a8      	mov	r8, r5
 800cb9a:	bfa8      	it	ge
 800cb9c:	f04f 0810 	movge.w	r8, #16
 800cba0:	f7f3 fcd0 	bl	8000544 <__aeabi_ui2d>
 800cba4:	2d09      	cmp	r5, #9
 800cba6:	4682      	mov	sl, r0
 800cba8:	468b      	mov	fp, r1
 800cbaa:	dd13      	ble.n	800cbd4 <_strtod_l+0x3dc>
 800cbac:	4b7b      	ldr	r3, [pc, #492]	; (800cd9c <_strtod_l+0x5a4>)
 800cbae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800cbb2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800cbb6:	f7f3 fd3f 	bl	8000638 <__aeabi_dmul>
 800cbba:	4682      	mov	sl, r0
 800cbbc:	4648      	mov	r0, r9
 800cbbe:	468b      	mov	fp, r1
 800cbc0:	f7f3 fcc0 	bl	8000544 <__aeabi_ui2d>
 800cbc4:	4602      	mov	r2, r0
 800cbc6:	460b      	mov	r3, r1
 800cbc8:	4650      	mov	r0, sl
 800cbca:	4659      	mov	r1, fp
 800cbcc:	f7f3 fb7e 	bl	80002cc <__adddf3>
 800cbd0:	4682      	mov	sl, r0
 800cbd2:	468b      	mov	fp, r1
 800cbd4:	2d0f      	cmp	r5, #15
 800cbd6:	dc38      	bgt.n	800cc4a <_strtod_l+0x452>
 800cbd8:	9b06      	ldr	r3, [sp, #24]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	f43f ae50 	beq.w	800c880 <_strtod_l+0x88>
 800cbe0:	dd24      	ble.n	800cc2c <_strtod_l+0x434>
 800cbe2:	2b16      	cmp	r3, #22
 800cbe4:	dc0b      	bgt.n	800cbfe <_strtod_l+0x406>
 800cbe6:	496d      	ldr	r1, [pc, #436]	; (800cd9c <_strtod_l+0x5a4>)
 800cbe8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cbec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cbf0:	4652      	mov	r2, sl
 800cbf2:	465b      	mov	r3, fp
 800cbf4:	f7f3 fd20 	bl	8000638 <__aeabi_dmul>
 800cbf8:	4682      	mov	sl, r0
 800cbfa:	468b      	mov	fp, r1
 800cbfc:	e640      	b.n	800c880 <_strtod_l+0x88>
 800cbfe:	9a06      	ldr	r2, [sp, #24]
 800cc00:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800cc04:	4293      	cmp	r3, r2
 800cc06:	db20      	blt.n	800cc4a <_strtod_l+0x452>
 800cc08:	4c64      	ldr	r4, [pc, #400]	; (800cd9c <_strtod_l+0x5a4>)
 800cc0a:	f1c5 050f 	rsb	r5, r5, #15
 800cc0e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800cc12:	4652      	mov	r2, sl
 800cc14:	465b      	mov	r3, fp
 800cc16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc1a:	f7f3 fd0d 	bl	8000638 <__aeabi_dmul>
 800cc1e:	9b06      	ldr	r3, [sp, #24]
 800cc20:	1b5d      	subs	r5, r3, r5
 800cc22:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cc26:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cc2a:	e7e3      	b.n	800cbf4 <_strtod_l+0x3fc>
 800cc2c:	9b06      	ldr	r3, [sp, #24]
 800cc2e:	3316      	adds	r3, #22
 800cc30:	db0b      	blt.n	800cc4a <_strtod_l+0x452>
 800cc32:	9b05      	ldr	r3, [sp, #20]
 800cc34:	1b9e      	subs	r6, r3, r6
 800cc36:	4b59      	ldr	r3, [pc, #356]	; (800cd9c <_strtod_l+0x5a4>)
 800cc38:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800cc3c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cc40:	4650      	mov	r0, sl
 800cc42:	4659      	mov	r1, fp
 800cc44:	f7f3 fe22 	bl	800088c <__aeabi_ddiv>
 800cc48:	e7d6      	b.n	800cbf8 <_strtod_l+0x400>
 800cc4a:	9b06      	ldr	r3, [sp, #24]
 800cc4c:	eba5 0808 	sub.w	r8, r5, r8
 800cc50:	4498      	add	r8, r3
 800cc52:	f1b8 0f00 	cmp.w	r8, #0
 800cc56:	dd74      	ble.n	800cd42 <_strtod_l+0x54a>
 800cc58:	f018 030f 	ands.w	r3, r8, #15
 800cc5c:	d00a      	beq.n	800cc74 <_strtod_l+0x47c>
 800cc5e:	494f      	ldr	r1, [pc, #316]	; (800cd9c <_strtod_l+0x5a4>)
 800cc60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cc64:	4652      	mov	r2, sl
 800cc66:	465b      	mov	r3, fp
 800cc68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc6c:	f7f3 fce4 	bl	8000638 <__aeabi_dmul>
 800cc70:	4682      	mov	sl, r0
 800cc72:	468b      	mov	fp, r1
 800cc74:	f038 080f 	bics.w	r8, r8, #15
 800cc78:	d04f      	beq.n	800cd1a <_strtod_l+0x522>
 800cc7a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800cc7e:	dd22      	ble.n	800ccc6 <_strtod_l+0x4ce>
 800cc80:	2500      	movs	r5, #0
 800cc82:	462e      	mov	r6, r5
 800cc84:	9507      	str	r5, [sp, #28]
 800cc86:	9505      	str	r5, [sp, #20]
 800cc88:	2322      	movs	r3, #34	; 0x22
 800cc8a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800cda4 <_strtod_l+0x5ac>
 800cc8e:	6023      	str	r3, [r4, #0]
 800cc90:	f04f 0a00 	mov.w	sl, #0
 800cc94:	9b07      	ldr	r3, [sp, #28]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	f43f adf2 	beq.w	800c880 <_strtod_l+0x88>
 800cc9c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cc9e:	4620      	mov	r0, r4
 800cca0:	f001 fe90 	bl	800e9c4 <_Bfree>
 800cca4:	9905      	ldr	r1, [sp, #20]
 800cca6:	4620      	mov	r0, r4
 800cca8:	f001 fe8c 	bl	800e9c4 <_Bfree>
 800ccac:	4631      	mov	r1, r6
 800ccae:	4620      	mov	r0, r4
 800ccb0:	f001 fe88 	bl	800e9c4 <_Bfree>
 800ccb4:	9907      	ldr	r1, [sp, #28]
 800ccb6:	4620      	mov	r0, r4
 800ccb8:	f001 fe84 	bl	800e9c4 <_Bfree>
 800ccbc:	4629      	mov	r1, r5
 800ccbe:	4620      	mov	r0, r4
 800ccc0:	f001 fe80 	bl	800e9c4 <_Bfree>
 800ccc4:	e5dc      	b.n	800c880 <_strtod_l+0x88>
 800ccc6:	4b36      	ldr	r3, [pc, #216]	; (800cda0 <_strtod_l+0x5a8>)
 800ccc8:	9304      	str	r3, [sp, #16]
 800ccca:	2300      	movs	r3, #0
 800cccc:	ea4f 1828 	mov.w	r8, r8, asr #4
 800ccd0:	4650      	mov	r0, sl
 800ccd2:	4659      	mov	r1, fp
 800ccd4:	4699      	mov	r9, r3
 800ccd6:	f1b8 0f01 	cmp.w	r8, #1
 800ccda:	dc21      	bgt.n	800cd20 <_strtod_l+0x528>
 800ccdc:	b10b      	cbz	r3, 800cce2 <_strtod_l+0x4ea>
 800ccde:	4682      	mov	sl, r0
 800cce0:	468b      	mov	fp, r1
 800cce2:	4b2f      	ldr	r3, [pc, #188]	; (800cda0 <_strtod_l+0x5a8>)
 800cce4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800cce8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800ccec:	4652      	mov	r2, sl
 800ccee:	465b      	mov	r3, fp
 800ccf0:	e9d9 0100 	ldrd	r0, r1, [r9]
 800ccf4:	f7f3 fca0 	bl	8000638 <__aeabi_dmul>
 800ccf8:	4b2a      	ldr	r3, [pc, #168]	; (800cda4 <_strtod_l+0x5ac>)
 800ccfa:	460a      	mov	r2, r1
 800ccfc:	400b      	ands	r3, r1
 800ccfe:	492a      	ldr	r1, [pc, #168]	; (800cda8 <_strtod_l+0x5b0>)
 800cd00:	428b      	cmp	r3, r1
 800cd02:	4682      	mov	sl, r0
 800cd04:	d8bc      	bhi.n	800cc80 <_strtod_l+0x488>
 800cd06:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800cd0a:	428b      	cmp	r3, r1
 800cd0c:	bf86      	itte	hi
 800cd0e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800cdac <_strtod_l+0x5b4>
 800cd12:	f04f 3aff 	movhi.w	sl, #4294967295
 800cd16:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	9304      	str	r3, [sp, #16]
 800cd1e:	e084      	b.n	800ce2a <_strtod_l+0x632>
 800cd20:	f018 0f01 	tst.w	r8, #1
 800cd24:	d005      	beq.n	800cd32 <_strtod_l+0x53a>
 800cd26:	9b04      	ldr	r3, [sp, #16]
 800cd28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd2c:	f7f3 fc84 	bl	8000638 <__aeabi_dmul>
 800cd30:	2301      	movs	r3, #1
 800cd32:	9a04      	ldr	r2, [sp, #16]
 800cd34:	3208      	adds	r2, #8
 800cd36:	f109 0901 	add.w	r9, r9, #1
 800cd3a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800cd3e:	9204      	str	r2, [sp, #16]
 800cd40:	e7c9      	b.n	800ccd6 <_strtod_l+0x4de>
 800cd42:	d0ea      	beq.n	800cd1a <_strtod_l+0x522>
 800cd44:	f1c8 0800 	rsb	r8, r8, #0
 800cd48:	f018 020f 	ands.w	r2, r8, #15
 800cd4c:	d00a      	beq.n	800cd64 <_strtod_l+0x56c>
 800cd4e:	4b13      	ldr	r3, [pc, #76]	; (800cd9c <_strtod_l+0x5a4>)
 800cd50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cd54:	4650      	mov	r0, sl
 800cd56:	4659      	mov	r1, fp
 800cd58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd5c:	f7f3 fd96 	bl	800088c <__aeabi_ddiv>
 800cd60:	4682      	mov	sl, r0
 800cd62:	468b      	mov	fp, r1
 800cd64:	ea5f 1828 	movs.w	r8, r8, asr #4
 800cd68:	d0d7      	beq.n	800cd1a <_strtod_l+0x522>
 800cd6a:	f1b8 0f1f 	cmp.w	r8, #31
 800cd6e:	dd1f      	ble.n	800cdb0 <_strtod_l+0x5b8>
 800cd70:	2500      	movs	r5, #0
 800cd72:	462e      	mov	r6, r5
 800cd74:	9507      	str	r5, [sp, #28]
 800cd76:	9505      	str	r5, [sp, #20]
 800cd78:	2322      	movs	r3, #34	; 0x22
 800cd7a:	f04f 0a00 	mov.w	sl, #0
 800cd7e:	f04f 0b00 	mov.w	fp, #0
 800cd82:	6023      	str	r3, [r4, #0]
 800cd84:	e786      	b.n	800cc94 <_strtod_l+0x49c>
 800cd86:	bf00      	nop
 800cd88:	080103f1 	.word	0x080103f1
 800cd8c:	08010434 	.word	0x08010434
 800cd90:	080103e9 	.word	0x080103e9
 800cd94:	08010574 	.word	0x08010574
 800cd98:	08010820 	.word	0x08010820
 800cd9c:	08010700 	.word	0x08010700
 800cda0:	080106d8 	.word	0x080106d8
 800cda4:	7ff00000 	.word	0x7ff00000
 800cda8:	7ca00000 	.word	0x7ca00000
 800cdac:	7fefffff 	.word	0x7fefffff
 800cdb0:	f018 0310 	ands.w	r3, r8, #16
 800cdb4:	bf18      	it	ne
 800cdb6:	236a      	movne	r3, #106	; 0x6a
 800cdb8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800d168 <_strtod_l+0x970>
 800cdbc:	9304      	str	r3, [sp, #16]
 800cdbe:	4650      	mov	r0, sl
 800cdc0:	4659      	mov	r1, fp
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	f018 0f01 	tst.w	r8, #1
 800cdc8:	d004      	beq.n	800cdd4 <_strtod_l+0x5dc>
 800cdca:	e9d9 2300 	ldrd	r2, r3, [r9]
 800cdce:	f7f3 fc33 	bl	8000638 <__aeabi_dmul>
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800cdd8:	f109 0908 	add.w	r9, r9, #8
 800cddc:	d1f2      	bne.n	800cdc4 <_strtod_l+0x5cc>
 800cdde:	b10b      	cbz	r3, 800cde4 <_strtod_l+0x5ec>
 800cde0:	4682      	mov	sl, r0
 800cde2:	468b      	mov	fp, r1
 800cde4:	9b04      	ldr	r3, [sp, #16]
 800cde6:	b1c3      	cbz	r3, 800ce1a <_strtod_l+0x622>
 800cde8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800cdec:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	4659      	mov	r1, fp
 800cdf4:	dd11      	ble.n	800ce1a <_strtod_l+0x622>
 800cdf6:	2b1f      	cmp	r3, #31
 800cdf8:	f340 8124 	ble.w	800d044 <_strtod_l+0x84c>
 800cdfc:	2b34      	cmp	r3, #52	; 0x34
 800cdfe:	bfde      	ittt	le
 800ce00:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800ce04:	f04f 33ff 	movle.w	r3, #4294967295
 800ce08:	fa03 f202 	lslle.w	r2, r3, r2
 800ce0c:	f04f 0a00 	mov.w	sl, #0
 800ce10:	bfcc      	ite	gt
 800ce12:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ce16:	ea02 0b01 	andle.w	fp, r2, r1
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	4650      	mov	r0, sl
 800ce20:	4659      	mov	r1, fp
 800ce22:	f7f3 fe71 	bl	8000b08 <__aeabi_dcmpeq>
 800ce26:	2800      	cmp	r0, #0
 800ce28:	d1a2      	bne.n	800cd70 <_strtod_l+0x578>
 800ce2a:	9b07      	ldr	r3, [sp, #28]
 800ce2c:	9300      	str	r3, [sp, #0]
 800ce2e:	9908      	ldr	r1, [sp, #32]
 800ce30:	462b      	mov	r3, r5
 800ce32:	463a      	mov	r2, r7
 800ce34:	4620      	mov	r0, r4
 800ce36:	f001 fe2d 	bl	800ea94 <__s2b>
 800ce3a:	9007      	str	r0, [sp, #28]
 800ce3c:	2800      	cmp	r0, #0
 800ce3e:	f43f af1f 	beq.w	800cc80 <_strtod_l+0x488>
 800ce42:	9b05      	ldr	r3, [sp, #20]
 800ce44:	1b9e      	subs	r6, r3, r6
 800ce46:	9b06      	ldr	r3, [sp, #24]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	bfb4      	ite	lt
 800ce4c:	4633      	movlt	r3, r6
 800ce4e:	2300      	movge	r3, #0
 800ce50:	930c      	str	r3, [sp, #48]	; 0x30
 800ce52:	9b06      	ldr	r3, [sp, #24]
 800ce54:	2500      	movs	r5, #0
 800ce56:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ce5a:	9312      	str	r3, [sp, #72]	; 0x48
 800ce5c:	462e      	mov	r6, r5
 800ce5e:	9b07      	ldr	r3, [sp, #28]
 800ce60:	4620      	mov	r0, r4
 800ce62:	6859      	ldr	r1, [r3, #4]
 800ce64:	f001 fd6e 	bl	800e944 <_Balloc>
 800ce68:	9005      	str	r0, [sp, #20]
 800ce6a:	2800      	cmp	r0, #0
 800ce6c:	f43f af0c 	beq.w	800cc88 <_strtod_l+0x490>
 800ce70:	9b07      	ldr	r3, [sp, #28]
 800ce72:	691a      	ldr	r2, [r3, #16]
 800ce74:	3202      	adds	r2, #2
 800ce76:	f103 010c 	add.w	r1, r3, #12
 800ce7a:	0092      	lsls	r2, r2, #2
 800ce7c:	300c      	adds	r0, #12
 800ce7e:	f001 fd53 	bl	800e928 <memcpy>
 800ce82:	ec4b ab10 	vmov	d0, sl, fp
 800ce86:	aa1a      	add	r2, sp, #104	; 0x68
 800ce88:	a919      	add	r1, sp, #100	; 0x64
 800ce8a:	4620      	mov	r0, r4
 800ce8c:	f002 f948 	bl	800f120 <__d2b>
 800ce90:	ec4b ab18 	vmov	d8, sl, fp
 800ce94:	9018      	str	r0, [sp, #96]	; 0x60
 800ce96:	2800      	cmp	r0, #0
 800ce98:	f43f aef6 	beq.w	800cc88 <_strtod_l+0x490>
 800ce9c:	2101      	movs	r1, #1
 800ce9e:	4620      	mov	r0, r4
 800cea0:	f001 fe92 	bl	800ebc8 <__i2b>
 800cea4:	4606      	mov	r6, r0
 800cea6:	2800      	cmp	r0, #0
 800cea8:	f43f aeee 	beq.w	800cc88 <_strtod_l+0x490>
 800ceac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ceae:	9904      	ldr	r1, [sp, #16]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	bfab      	itete	ge
 800ceb4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800ceb6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800ceb8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800ceba:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800cebe:	bfac      	ite	ge
 800cec0:	eb03 0902 	addge.w	r9, r3, r2
 800cec4:	1ad7      	sublt	r7, r2, r3
 800cec6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800cec8:	eba3 0801 	sub.w	r8, r3, r1
 800cecc:	4490      	add	r8, r2
 800cece:	4ba1      	ldr	r3, [pc, #644]	; (800d154 <_strtod_l+0x95c>)
 800ced0:	f108 38ff 	add.w	r8, r8, #4294967295
 800ced4:	4598      	cmp	r8, r3
 800ced6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ceda:	f280 80c7 	bge.w	800d06c <_strtod_l+0x874>
 800cede:	eba3 0308 	sub.w	r3, r3, r8
 800cee2:	2b1f      	cmp	r3, #31
 800cee4:	eba2 0203 	sub.w	r2, r2, r3
 800cee8:	f04f 0101 	mov.w	r1, #1
 800ceec:	f300 80b1 	bgt.w	800d052 <_strtod_l+0x85a>
 800cef0:	fa01 f303 	lsl.w	r3, r1, r3
 800cef4:	930d      	str	r3, [sp, #52]	; 0x34
 800cef6:	2300      	movs	r3, #0
 800cef8:	9308      	str	r3, [sp, #32]
 800cefa:	eb09 0802 	add.w	r8, r9, r2
 800cefe:	9b04      	ldr	r3, [sp, #16]
 800cf00:	45c1      	cmp	r9, r8
 800cf02:	4417      	add	r7, r2
 800cf04:	441f      	add	r7, r3
 800cf06:	464b      	mov	r3, r9
 800cf08:	bfa8      	it	ge
 800cf0a:	4643      	movge	r3, r8
 800cf0c:	42bb      	cmp	r3, r7
 800cf0e:	bfa8      	it	ge
 800cf10:	463b      	movge	r3, r7
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	bfc2      	ittt	gt
 800cf16:	eba8 0803 	subgt.w	r8, r8, r3
 800cf1a:	1aff      	subgt	r7, r7, r3
 800cf1c:	eba9 0903 	subgt.w	r9, r9, r3
 800cf20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	dd17      	ble.n	800cf56 <_strtod_l+0x75e>
 800cf26:	4631      	mov	r1, r6
 800cf28:	461a      	mov	r2, r3
 800cf2a:	4620      	mov	r0, r4
 800cf2c:	f001 ff0c 	bl	800ed48 <__pow5mult>
 800cf30:	4606      	mov	r6, r0
 800cf32:	2800      	cmp	r0, #0
 800cf34:	f43f aea8 	beq.w	800cc88 <_strtod_l+0x490>
 800cf38:	4601      	mov	r1, r0
 800cf3a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cf3c:	4620      	mov	r0, r4
 800cf3e:	f001 fe59 	bl	800ebf4 <__multiply>
 800cf42:	900b      	str	r0, [sp, #44]	; 0x2c
 800cf44:	2800      	cmp	r0, #0
 800cf46:	f43f ae9f 	beq.w	800cc88 <_strtod_l+0x490>
 800cf4a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cf4c:	4620      	mov	r0, r4
 800cf4e:	f001 fd39 	bl	800e9c4 <_Bfree>
 800cf52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf54:	9318      	str	r3, [sp, #96]	; 0x60
 800cf56:	f1b8 0f00 	cmp.w	r8, #0
 800cf5a:	f300 808c 	bgt.w	800d076 <_strtod_l+0x87e>
 800cf5e:	9b06      	ldr	r3, [sp, #24]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	dd08      	ble.n	800cf76 <_strtod_l+0x77e>
 800cf64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cf66:	9905      	ldr	r1, [sp, #20]
 800cf68:	4620      	mov	r0, r4
 800cf6a:	f001 feed 	bl	800ed48 <__pow5mult>
 800cf6e:	9005      	str	r0, [sp, #20]
 800cf70:	2800      	cmp	r0, #0
 800cf72:	f43f ae89 	beq.w	800cc88 <_strtod_l+0x490>
 800cf76:	2f00      	cmp	r7, #0
 800cf78:	dd08      	ble.n	800cf8c <_strtod_l+0x794>
 800cf7a:	9905      	ldr	r1, [sp, #20]
 800cf7c:	463a      	mov	r2, r7
 800cf7e:	4620      	mov	r0, r4
 800cf80:	f001 ff3c 	bl	800edfc <__lshift>
 800cf84:	9005      	str	r0, [sp, #20]
 800cf86:	2800      	cmp	r0, #0
 800cf88:	f43f ae7e 	beq.w	800cc88 <_strtod_l+0x490>
 800cf8c:	f1b9 0f00 	cmp.w	r9, #0
 800cf90:	dd08      	ble.n	800cfa4 <_strtod_l+0x7ac>
 800cf92:	4631      	mov	r1, r6
 800cf94:	464a      	mov	r2, r9
 800cf96:	4620      	mov	r0, r4
 800cf98:	f001 ff30 	bl	800edfc <__lshift>
 800cf9c:	4606      	mov	r6, r0
 800cf9e:	2800      	cmp	r0, #0
 800cfa0:	f43f ae72 	beq.w	800cc88 <_strtod_l+0x490>
 800cfa4:	9a05      	ldr	r2, [sp, #20]
 800cfa6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cfa8:	4620      	mov	r0, r4
 800cfaa:	f001 ffb3 	bl	800ef14 <__mdiff>
 800cfae:	4605      	mov	r5, r0
 800cfb0:	2800      	cmp	r0, #0
 800cfb2:	f43f ae69 	beq.w	800cc88 <_strtod_l+0x490>
 800cfb6:	68c3      	ldr	r3, [r0, #12]
 800cfb8:	930b      	str	r3, [sp, #44]	; 0x2c
 800cfba:	2300      	movs	r3, #0
 800cfbc:	60c3      	str	r3, [r0, #12]
 800cfbe:	4631      	mov	r1, r6
 800cfc0:	f001 ff8c 	bl	800eedc <__mcmp>
 800cfc4:	2800      	cmp	r0, #0
 800cfc6:	da60      	bge.n	800d08a <_strtod_l+0x892>
 800cfc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cfca:	ea53 030a 	orrs.w	r3, r3, sl
 800cfce:	f040 8082 	bne.w	800d0d6 <_strtod_l+0x8de>
 800cfd2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d17d      	bne.n	800d0d6 <_strtod_l+0x8de>
 800cfda:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cfde:	0d1b      	lsrs	r3, r3, #20
 800cfe0:	051b      	lsls	r3, r3, #20
 800cfe2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800cfe6:	d976      	bls.n	800d0d6 <_strtod_l+0x8de>
 800cfe8:	696b      	ldr	r3, [r5, #20]
 800cfea:	b913      	cbnz	r3, 800cff2 <_strtod_l+0x7fa>
 800cfec:	692b      	ldr	r3, [r5, #16]
 800cfee:	2b01      	cmp	r3, #1
 800cff0:	dd71      	ble.n	800d0d6 <_strtod_l+0x8de>
 800cff2:	4629      	mov	r1, r5
 800cff4:	2201      	movs	r2, #1
 800cff6:	4620      	mov	r0, r4
 800cff8:	f001 ff00 	bl	800edfc <__lshift>
 800cffc:	4631      	mov	r1, r6
 800cffe:	4605      	mov	r5, r0
 800d000:	f001 ff6c 	bl	800eedc <__mcmp>
 800d004:	2800      	cmp	r0, #0
 800d006:	dd66      	ble.n	800d0d6 <_strtod_l+0x8de>
 800d008:	9904      	ldr	r1, [sp, #16]
 800d00a:	4a53      	ldr	r2, [pc, #332]	; (800d158 <_strtod_l+0x960>)
 800d00c:	465b      	mov	r3, fp
 800d00e:	2900      	cmp	r1, #0
 800d010:	f000 8081 	beq.w	800d116 <_strtod_l+0x91e>
 800d014:	ea02 010b 	and.w	r1, r2, fp
 800d018:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d01c:	dc7b      	bgt.n	800d116 <_strtod_l+0x91e>
 800d01e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d022:	f77f aea9 	ble.w	800cd78 <_strtod_l+0x580>
 800d026:	4b4d      	ldr	r3, [pc, #308]	; (800d15c <_strtod_l+0x964>)
 800d028:	4650      	mov	r0, sl
 800d02a:	4659      	mov	r1, fp
 800d02c:	2200      	movs	r2, #0
 800d02e:	f7f3 fb03 	bl	8000638 <__aeabi_dmul>
 800d032:	460b      	mov	r3, r1
 800d034:	4303      	orrs	r3, r0
 800d036:	bf08      	it	eq
 800d038:	2322      	moveq	r3, #34	; 0x22
 800d03a:	4682      	mov	sl, r0
 800d03c:	468b      	mov	fp, r1
 800d03e:	bf08      	it	eq
 800d040:	6023      	streq	r3, [r4, #0]
 800d042:	e62b      	b.n	800cc9c <_strtod_l+0x4a4>
 800d044:	f04f 32ff 	mov.w	r2, #4294967295
 800d048:	fa02 f303 	lsl.w	r3, r2, r3
 800d04c:	ea03 0a0a 	and.w	sl, r3, sl
 800d050:	e6e3      	b.n	800ce1a <_strtod_l+0x622>
 800d052:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800d056:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800d05a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800d05e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800d062:	fa01 f308 	lsl.w	r3, r1, r8
 800d066:	9308      	str	r3, [sp, #32]
 800d068:	910d      	str	r1, [sp, #52]	; 0x34
 800d06a:	e746      	b.n	800cefa <_strtod_l+0x702>
 800d06c:	2300      	movs	r3, #0
 800d06e:	9308      	str	r3, [sp, #32]
 800d070:	2301      	movs	r3, #1
 800d072:	930d      	str	r3, [sp, #52]	; 0x34
 800d074:	e741      	b.n	800cefa <_strtod_l+0x702>
 800d076:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d078:	4642      	mov	r2, r8
 800d07a:	4620      	mov	r0, r4
 800d07c:	f001 febe 	bl	800edfc <__lshift>
 800d080:	9018      	str	r0, [sp, #96]	; 0x60
 800d082:	2800      	cmp	r0, #0
 800d084:	f47f af6b 	bne.w	800cf5e <_strtod_l+0x766>
 800d088:	e5fe      	b.n	800cc88 <_strtod_l+0x490>
 800d08a:	465f      	mov	r7, fp
 800d08c:	d16e      	bne.n	800d16c <_strtod_l+0x974>
 800d08e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d090:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d094:	b342      	cbz	r2, 800d0e8 <_strtod_l+0x8f0>
 800d096:	4a32      	ldr	r2, [pc, #200]	; (800d160 <_strtod_l+0x968>)
 800d098:	4293      	cmp	r3, r2
 800d09a:	d128      	bne.n	800d0ee <_strtod_l+0x8f6>
 800d09c:	9b04      	ldr	r3, [sp, #16]
 800d09e:	4651      	mov	r1, sl
 800d0a0:	b1eb      	cbz	r3, 800d0de <_strtod_l+0x8e6>
 800d0a2:	4b2d      	ldr	r3, [pc, #180]	; (800d158 <_strtod_l+0x960>)
 800d0a4:	403b      	ands	r3, r7
 800d0a6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d0aa:	f04f 32ff 	mov.w	r2, #4294967295
 800d0ae:	d819      	bhi.n	800d0e4 <_strtod_l+0x8ec>
 800d0b0:	0d1b      	lsrs	r3, r3, #20
 800d0b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d0b6:	fa02 f303 	lsl.w	r3, r2, r3
 800d0ba:	4299      	cmp	r1, r3
 800d0bc:	d117      	bne.n	800d0ee <_strtod_l+0x8f6>
 800d0be:	4b29      	ldr	r3, [pc, #164]	; (800d164 <_strtod_l+0x96c>)
 800d0c0:	429f      	cmp	r7, r3
 800d0c2:	d102      	bne.n	800d0ca <_strtod_l+0x8d2>
 800d0c4:	3101      	adds	r1, #1
 800d0c6:	f43f addf 	beq.w	800cc88 <_strtod_l+0x490>
 800d0ca:	4b23      	ldr	r3, [pc, #140]	; (800d158 <_strtod_l+0x960>)
 800d0cc:	403b      	ands	r3, r7
 800d0ce:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d0d2:	f04f 0a00 	mov.w	sl, #0
 800d0d6:	9b04      	ldr	r3, [sp, #16]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d1a4      	bne.n	800d026 <_strtod_l+0x82e>
 800d0dc:	e5de      	b.n	800cc9c <_strtod_l+0x4a4>
 800d0de:	f04f 33ff 	mov.w	r3, #4294967295
 800d0e2:	e7ea      	b.n	800d0ba <_strtod_l+0x8c2>
 800d0e4:	4613      	mov	r3, r2
 800d0e6:	e7e8      	b.n	800d0ba <_strtod_l+0x8c2>
 800d0e8:	ea53 030a 	orrs.w	r3, r3, sl
 800d0ec:	d08c      	beq.n	800d008 <_strtod_l+0x810>
 800d0ee:	9b08      	ldr	r3, [sp, #32]
 800d0f0:	b1db      	cbz	r3, 800d12a <_strtod_l+0x932>
 800d0f2:	423b      	tst	r3, r7
 800d0f4:	d0ef      	beq.n	800d0d6 <_strtod_l+0x8de>
 800d0f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d0f8:	9a04      	ldr	r2, [sp, #16]
 800d0fa:	4650      	mov	r0, sl
 800d0fc:	4659      	mov	r1, fp
 800d0fe:	b1c3      	cbz	r3, 800d132 <_strtod_l+0x93a>
 800d100:	f7ff fb5e 	bl	800c7c0 <sulp>
 800d104:	4602      	mov	r2, r0
 800d106:	460b      	mov	r3, r1
 800d108:	ec51 0b18 	vmov	r0, r1, d8
 800d10c:	f7f3 f8de 	bl	80002cc <__adddf3>
 800d110:	4682      	mov	sl, r0
 800d112:	468b      	mov	fp, r1
 800d114:	e7df      	b.n	800d0d6 <_strtod_l+0x8de>
 800d116:	4013      	ands	r3, r2
 800d118:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d11c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d120:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d124:	f04f 3aff 	mov.w	sl, #4294967295
 800d128:	e7d5      	b.n	800d0d6 <_strtod_l+0x8de>
 800d12a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d12c:	ea13 0f0a 	tst.w	r3, sl
 800d130:	e7e0      	b.n	800d0f4 <_strtod_l+0x8fc>
 800d132:	f7ff fb45 	bl	800c7c0 <sulp>
 800d136:	4602      	mov	r2, r0
 800d138:	460b      	mov	r3, r1
 800d13a:	ec51 0b18 	vmov	r0, r1, d8
 800d13e:	f7f3 f8c3 	bl	80002c8 <__aeabi_dsub>
 800d142:	2200      	movs	r2, #0
 800d144:	2300      	movs	r3, #0
 800d146:	4682      	mov	sl, r0
 800d148:	468b      	mov	fp, r1
 800d14a:	f7f3 fcdd 	bl	8000b08 <__aeabi_dcmpeq>
 800d14e:	2800      	cmp	r0, #0
 800d150:	d0c1      	beq.n	800d0d6 <_strtod_l+0x8de>
 800d152:	e611      	b.n	800cd78 <_strtod_l+0x580>
 800d154:	fffffc02 	.word	0xfffffc02
 800d158:	7ff00000 	.word	0x7ff00000
 800d15c:	39500000 	.word	0x39500000
 800d160:	000fffff 	.word	0x000fffff
 800d164:	7fefffff 	.word	0x7fefffff
 800d168:	08010448 	.word	0x08010448
 800d16c:	4631      	mov	r1, r6
 800d16e:	4628      	mov	r0, r5
 800d170:	f002 f832 	bl	800f1d8 <__ratio>
 800d174:	ec59 8b10 	vmov	r8, r9, d0
 800d178:	ee10 0a10 	vmov	r0, s0
 800d17c:	2200      	movs	r2, #0
 800d17e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d182:	4649      	mov	r1, r9
 800d184:	f7f3 fcd4 	bl	8000b30 <__aeabi_dcmple>
 800d188:	2800      	cmp	r0, #0
 800d18a:	d07a      	beq.n	800d282 <_strtod_l+0xa8a>
 800d18c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d04a      	beq.n	800d228 <_strtod_l+0xa30>
 800d192:	4b95      	ldr	r3, [pc, #596]	; (800d3e8 <_strtod_l+0xbf0>)
 800d194:	2200      	movs	r2, #0
 800d196:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d19a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800d3e8 <_strtod_l+0xbf0>
 800d19e:	f04f 0800 	mov.w	r8, #0
 800d1a2:	4b92      	ldr	r3, [pc, #584]	; (800d3ec <_strtod_l+0xbf4>)
 800d1a4:	403b      	ands	r3, r7
 800d1a6:	930d      	str	r3, [sp, #52]	; 0x34
 800d1a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d1aa:	4b91      	ldr	r3, [pc, #580]	; (800d3f0 <_strtod_l+0xbf8>)
 800d1ac:	429a      	cmp	r2, r3
 800d1ae:	f040 80b0 	bne.w	800d312 <_strtod_l+0xb1a>
 800d1b2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d1b6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800d1ba:	ec4b ab10 	vmov	d0, sl, fp
 800d1be:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d1c2:	f001 ff31 	bl	800f028 <__ulp>
 800d1c6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d1ca:	ec53 2b10 	vmov	r2, r3, d0
 800d1ce:	f7f3 fa33 	bl	8000638 <__aeabi_dmul>
 800d1d2:	4652      	mov	r2, sl
 800d1d4:	465b      	mov	r3, fp
 800d1d6:	f7f3 f879 	bl	80002cc <__adddf3>
 800d1da:	460b      	mov	r3, r1
 800d1dc:	4983      	ldr	r1, [pc, #524]	; (800d3ec <_strtod_l+0xbf4>)
 800d1de:	4a85      	ldr	r2, [pc, #532]	; (800d3f4 <_strtod_l+0xbfc>)
 800d1e0:	4019      	ands	r1, r3
 800d1e2:	4291      	cmp	r1, r2
 800d1e4:	4682      	mov	sl, r0
 800d1e6:	d960      	bls.n	800d2aa <_strtod_l+0xab2>
 800d1e8:	ee18 3a90 	vmov	r3, s17
 800d1ec:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d1f0:	4293      	cmp	r3, r2
 800d1f2:	d104      	bne.n	800d1fe <_strtod_l+0xa06>
 800d1f4:	ee18 3a10 	vmov	r3, s16
 800d1f8:	3301      	adds	r3, #1
 800d1fa:	f43f ad45 	beq.w	800cc88 <_strtod_l+0x490>
 800d1fe:	f8df b200 	ldr.w	fp, [pc, #512]	; 800d400 <_strtod_l+0xc08>
 800d202:	f04f 3aff 	mov.w	sl, #4294967295
 800d206:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d208:	4620      	mov	r0, r4
 800d20a:	f001 fbdb 	bl	800e9c4 <_Bfree>
 800d20e:	9905      	ldr	r1, [sp, #20]
 800d210:	4620      	mov	r0, r4
 800d212:	f001 fbd7 	bl	800e9c4 <_Bfree>
 800d216:	4631      	mov	r1, r6
 800d218:	4620      	mov	r0, r4
 800d21a:	f001 fbd3 	bl	800e9c4 <_Bfree>
 800d21e:	4629      	mov	r1, r5
 800d220:	4620      	mov	r0, r4
 800d222:	f001 fbcf 	bl	800e9c4 <_Bfree>
 800d226:	e61a      	b.n	800ce5e <_strtod_l+0x666>
 800d228:	f1ba 0f00 	cmp.w	sl, #0
 800d22c:	d11b      	bne.n	800d266 <_strtod_l+0xa6e>
 800d22e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d232:	b9f3      	cbnz	r3, 800d272 <_strtod_l+0xa7a>
 800d234:	4b6c      	ldr	r3, [pc, #432]	; (800d3e8 <_strtod_l+0xbf0>)
 800d236:	2200      	movs	r2, #0
 800d238:	4640      	mov	r0, r8
 800d23a:	4649      	mov	r1, r9
 800d23c:	f7f3 fc6e 	bl	8000b1c <__aeabi_dcmplt>
 800d240:	b9d0      	cbnz	r0, 800d278 <_strtod_l+0xa80>
 800d242:	4640      	mov	r0, r8
 800d244:	4649      	mov	r1, r9
 800d246:	4b6c      	ldr	r3, [pc, #432]	; (800d3f8 <_strtod_l+0xc00>)
 800d248:	2200      	movs	r2, #0
 800d24a:	f7f3 f9f5 	bl	8000638 <__aeabi_dmul>
 800d24e:	4680      	mov	r8, r0
 800d250:	4689      	mov	r9, r1
 800d252:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d256:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800d25a:	9315      	str	r3, [sp, #84]	; 0x54
 800d25c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d260:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d264:	e79d      	b.n	800d1a2 <_strtod_l+0x9aa>
 800d266:	f1ba 0f01 	cmp.w	sl, #1
 800d26a:	d102      	bne.n	800d272 <_strtod_l+0xa7a>
 800d26c:	2f00      	cmp	r7, #0
 800d26e:	f43f ad83 	beq.w	800cd78 <_strtod_l+0x580>
 800d272:	4b62      	ldr	r3, [pc, #392]	; (800d3fc <_strtod_l+0xc04>)
 800d274:	2200      	movs	r2, #0
 800d276:	e78e      	b.n	800d196 <_strtod_l+0x99e>
 800d278:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800d3f8 <_strtod_l+0xc00>
 800d27c:	f04f 0800 	mov.w	r8, #0
 800d280:	e7e7      	b.n	800d252 <_strtod_l+0xa5a>
 800d282:	4b5d      	ldr	r3, [pc, #372]	; (800d3f8 <_strtod_l+0xc00>)
 800d284:	4640      	mov	r0, r8
 800d286:	4649      	mov	r1, r9
 800d288:	2200      	movs	r2, #0
 800d28a:	f7f3 f9d5 	bl	8000638 <__aeabi_dmul>
 800d28e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d290:	4680      	mov	r8, r0
 800d292:	4689      	mov	r9, r1
 800d294:	b933      	cbnz	r3, 800d2a4 <_strtod_l+0xaac>
 800d296:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d29a:	900e      	str	r0, [sp, #56]	; 0x38
 800d29c:	930f      	str	r3, [sp, #60]	; 0x3c
 800d29e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d2a2:	e7dd      	b.n	800d260 <_strtod_l+0xa68>
 800d2a4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800d2a8:	e7f9      	b.n	800d29e <_strtod_l+0xaa6>
 800d2aa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d2ae:	9b04      	ldr	r3, [sp, #16]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d1a8      	bne.n	800d206 <_strtod_l+0xa0e>
 800d2b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d2b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d2ba:	0d1b      	lsrs	r3, r3, #20
 800d2bc:	051b      	lsls	r3, r3, #20
 800d2be:	429a      	cmp	r2, r3
 800d2c0:	d1a1      	bne.n	800d206 <_strtod_l+0xa0e>
 800d2c2:	4640      	mov	r0, r8
 800d2c4:	4649      	mov	r1, r9
 800d2c6:	f7f3 fd17 	bl	8000cf8 <__aeabi_d2lz>
 800d2ca:	f7f3 f987 	bl	80005dc <__aeabi_l2d>
 800d2ce:	4602      	mov	r2, r0
 800d2d0:	460b      	mov	r3, r1
 800d2d2:	4640      	mov	r0, r8
 800d2d4:	4649      	mov	r1, r9
 800d2d6:	f7f2 fff7 	bl	80002c8 <__aeabi_dsub>
 800d2da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d2dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d2e0:	ea43 030a 	orr.w	r3, r3, sl
 800d2e4:	4313      	orrs	r3, r2
 800d2e6:	4680      	mov	r8, r0
 800d2e8:	4689      	mov	r9, r1
 800d2ea:	d055      	beq.n	800d398 <_strtod_l+0xba0>
 800d2ec:	a336      	add	r3, pc, #216	; (adr r3, 800d3c8 <_strtod_l+0xbd0>)
 800d2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2f2:	f7f3 fc13 	bl	8000b1c <__aeabi_dcmplt>
 800d2f6:	2800      	cmp	r0, #0
 800d2f8:	f47f acd0 	bne.w	800cc9c <_strtod_l+0x4a4>
 800d2fc:	a334      	add	r3, pc, #208	; (adr r3, 800d3d0 <_strtod_l+0xbd8>)
 800d2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d302:	4640      	mov	r0, r8
 800d304:	4649      	mov	r1, r9
 800d306:	f7f3 fc27 	bl	8000b58 <__aeabi_dcmpgt>
 800d30a:	2800      	cmp	r0, #0
 800d30c:	f43f af7b 	beq.w	800d206 <_strtod_l+0xa0e>
 800d310:	e4c4      	b.n	800cc9c <_strtod_l+0x4a4>
 800d312:	9b04      	ldr	r3, [sp, #16]
 800d314:	b333      	cbz	r3, 800d364 <_strtod_l+0xb6c>
 800d316:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d318:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d31c:	d822      	bhi.n	800d364 <_strtod_l+0xb6c>
 800d31e:	a32e      	add	r3, pc, #184	; (adr r3, 800d3d8 <_strtod_l+0xbe0>)
 800d320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d324:	4640      	mov	r0, r8
 800d326:	4649      	mov	r1, r9
 800d328:	f7f3 fc02 	bl	8000b30 <__aeabi_dcmple>
 800d32c:	b1a0      	cbz	r0, 800d358 <_strtod_l+0xb60>
 800d32e:	4649      	mov	r1, r9
 800d330:	4640      	mov	r0, r8
 800d332:	f7f3 fc59 	bl	8000be8 <__aeabi_d2uiz>
 800d336:	2801      	cmp	r0, #1
 800d338:	bf38      	it	cc
 800d33a:	2001      	movcc	r0, #1
 800d33c:	f7f3 f902 	bl	8000544 <__aeabi_ui2d>
 800d340:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d342:	4680      	mov	r8, r0
 800d344:	4689      	mov	r9, r1
 800d346:	bb23      	cbnz	r3, 800d392 <_strtod_l+0xb9a>
 800d348:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d34c:	9010      	str	r0, [sp, #64]	; 0x40
 800d34e:	9311      	str	r3, [sp, #68]	; 0x44
 800d350:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d354:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d35a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d35c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d360:	1a9b      	subs	r3, r3, r2
 800d362:	9309      	str	r3, [sp, #36]	; 0x24
 800d364:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d368:	eeb0 0a48 	vmov.f32	s0, s16
 800d36c:	eef0 0a68 	vmov.f32	s1, s17
 800d370:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d374:	f001 fe58 	bl	800f028 <__ulp>
 800d378:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d37c:	ec53 2b10 	vmov	r2, r3, d0
 800d380:	f7f3 f95a 	bl	8000638 <__aeabi_dmul>
 800d384:	ec53 2b18 	vmov	r2, r3, d8
 800d388:	f7f2 ffa0 	bl	80002cc <__adddf3>
 800d38c:	4682      	mov	sl, r0
 800d38e:	468b      	mov	fp, r1
 800d390:	e78d      	b.n	800d2ae <_strtod_l+0xab6>
 800d392:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800d396:	e7db      	b.n	800d350 <_strtod_l+0xb58>
 800d398:	a311      	add	r3, pc, #68	; (adr r3, 800d3e0 <_strtod_l+0xbe8>)
 800d39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d39e:	f7f3 fbbd 	bl	8000b1c <__aeabi_dcmplt>
 800d3a2:	e7b2      	b.n	800d30a <_strtod_l+0xb12>
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	930a      	str	r3, [sp, #40]	; 0x28
 800d3a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d3aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d3ac:	6013      	str	r3, [r2, #0]
 800d3ae:	f7ff ba6b 	b.w	800c888 <_strtod_l+0x90>
 800d3b2:	2a65      	cmp	r2, #101	; 0x65
 800d3b4:	f43f ab5f 	beq.w	800ca76 <_strtod_l+0x27e>
 800d3b8:	2a45      	cmp	r2, #69	; 0x45
 800d3ba:	f43f ab5c 	beq.w	800ca76 <_strtod_l+0x27e>
 800d3be:	2301      	movs	r3, #1
 800d3c0:	f7ff bb94 	b.w	800caec <_strtod_l+0x2f4>
 800d3c4:	f3af 8000 	nop.w
 800d3c8:	94a03595 	.word	0x94a03595
 800d3cc:	3fdfffff 	.word	0x3fdfffff
 800d3d0:	35afe535 	.word	0x35afe535
 800d3d4:	3fe00000 	.word	0x3fe00000
 800d3d8:	ffc00000 	.word	0xffc00000
 800d3dc:	41dfffff 	.word	0x41dfffff
 800d3e0:	94a03595 	.word	0x94a03595
 800d3e4:	3fcfffff 	.word	0x3fcfffff
 800d3e8:	3ff00000 	.word	0x3ff00000
 800d3ec:	7ff00000 	.word	0x7ff00000
 800d3f0:	7fe00000 	.word	0x7fe00000
 800d3f4:	7c9fffff 	.word	0x7c9fffff
 800d3f8:	3fe00000 	.word	0x3fe00000
 800d3fc:	bff00000 	.word	0xbff00000
 800d400:	7fefffff 	.word	0x7fefffff

0800d404 <_strtod_r>:
 800d404:	4b01      	ldr	r3, [pc, #4]	; (800d40c <_strtod_r+0x8>)
 800d406:	f7ff b9f7 	b.w	800c7f8 <_strtod_l>
 800d40a:	bf00      	nop
 800d40c:	20000184 	.word	0x20000184

0800d410 <_strtol_l.constprop.0>:
 800d410:	2b01      	cmp	r3, #1
 800d412:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d416:	d001      	beq.n	800d41c <_strtol_l.constprop.0+0xc>
 800d418:	2b24      	cmp	r3, #36	; 0x24
 800d41a:	d906      	bls.n	800d42a <_strtol_l.constprop.0+0x1a>
 800d41c:	f7fe fafe 	bl	800ba1c <__errno>
 800d420:	2316      	movs	r3, #22
 800d422:	6003      	str	r3, [r0, #0]
 800d424:	2000      	movs	r0, #0
 800d426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d42a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d510 <_strtol_l.constprop.0+0x100>
 800d42e:	460d      	mov	r5, r1
 800d430:	462e      	mov	r6, r5
 800d432:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d436:	f814 700c 	ldrb.w	r7, [r4, ip]
 800d43a:	f017 0708 	ands.w	r7, r7, #8
 800d43e:	d1f7      	bne.n	800d430 <_strtol_l.constprop.0+0x20>
 800d440:	2c2d      	cmp	r4, #45	; 0x2d
 800d442:	d132      	bne.n	800d4aa <_strtol_l.constprop.0+0x9a>
 800d444:	782c      	ldrb	r4, [r5, #0]
 800d446:	2701      	movs	r7, #1
 800d448:	1cb5      	adds	r5, r6, #2
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d05b      	beq.n	800d506 <_strtol_l.constprop.0+0xf6>
 800d44e:	2b10      	cmp	r3, #16
 800d450:	d109      	bne.n	800d466 <_strtol_l.constprop.0+0x56>
 800d452:	2c30      	cmp	r4, #48	; 0x30
 800d454:	d107      	bne.n	800d466 <_strtol_l.constprop.0+0x56>
 800d456:	782c      	ldrb	r4, [r5, #0]
 800d458:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d45c:	2c58      	cmp	r4, #88	; 0x58
 800d45e:	d14d      	bne.n	800d4fc <_strtol_l.constprop.0+0xec>
 800d460:	786c      	ldrb	r4, [r5, #1]
 800d462:	2310      	movs	r3, #16
 800d464:	3502      	adds	r5, #2
 800d466:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d46a:	f108 38ff 	add.w	r8, r8, #4294967295
 800d46e:	f04f 0c00 	mov.w	ip, #0
 800d472:	fbb8 f9f3 	udiv	r9, r8, r3
 800d476:	4666      	mov	r6, ip
 800d478:	fb03 8a19 	mls	sl, r3, r9, r8
 800d47c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800d480:	f1be 0f09 	cmp.w	lr, #9
 800d484:	d816      	bhi.n	800d4b4 <_strtol_l.constprop.0+0xa4>
 800d486:	4674      	mov	r4, lr
 800d488:	42a3      	cmp	r3, r4
 800d48a:	dd24      	ble.n	800d4d6 <_strtol_l.constprop.0+0xc6>
 800d48c:	f1bc 0f00 	cmp.w	ip, #0
 800d490:	db1e      	blt.n	800d4d0 <_strtol_l.constprop.0+0xc0>
 800d492:	45b1      	cmp	r9, r6
 800d494:	d31c      	bcc.n	800d4d0 <_strtol_l.constprop.0+0xc0>
 800d496:	d101      	bne.n	800d49c <_strtol_l.constprop.0+0x8c>
 800d498:	45a2      	cmp	sl, r4
 800d49a:	db19      	blt.n	800d4d0 <_strtol_l.constprop.0+0xc0>
 800d49c:	fb06 4603 	mla	r6, r6, r3, r4
 800d4a0:	f04f 0c01 	mov.w	ip, #1
 800d4a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d4a8:	e7e8      	b.n	800d47c <_strtol_l.constprop.0+0x6c>
 800d4aa:	2c2b      	cmp	r4, #43	; 0x2b
 800d4ac:	bf04      	itt	eq
 800d4ae:	782c      	ldrbeq	r4, [r5, #0]
 800d4b0:	1cb5      	addeq	r5, r6, #2
 800d4b2:	e7ca      	b.n	800d44a <_strtol_l.constprop.0+0x3a>
 800d4b4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800d4b8:	f1be 0f19 	cmp.w	lr, #25
 800d4bc:	d801      	bhi.n	800d4c2 <_strtol_l.constprop.0+0xb2>
 800d4be:	3c37      	subs	r4, #55	; 0x37
 800d4c0:	e7e2      	b.n	800d488 <_strtol_l.constprop.0+0x78>
 800d4c2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800d4c6:	f1be 0f19 	cmp.w	lr, #25
 800d4ca:	d804      	bhi.n	800d4d6 <_strtol_l.constprop.0+0xc6>
 800d4cc:	3c57      	subs	r4, #87	; 0x57
 800d4ce:	e7db      	b.n	800d488 <_strtol_l.constprop.0+0x78>
 800d4d0:	f04f 3cff 	mov.w	ip, #4294967295
 800d4d4:	e7e6      	b.n	800d4a4 <_strtol_l.constprop.0+0x94>
 800d4d6:	f1bc 0f00 	cmp.w	ip, #0
 800d4da:	da05      	bge.n	800d4e8 <_strtol_l.constprop.0+0xd8>
 800d4dc:	2322      	movs	r3, #34	; 0x22
 800d4de:	6003      	str	r3, [r0, #0]
 800d4e0:	4646      	mov	r6, r8
 800d4e2:	b942      	cbnz	r2, 800d4f6 <_strtol_l.constprop.0+0xe6>
 800d4e4:	4630      	mov	r0, r6
 800d4e6:	e79e      	b.n	800d426 <_strtol_l.constprop.0+0x16>
 800d4e8:	b107      	cbz	r7, 800d4ec <_strtol_l.constprop.0+0xdc>
 800d4ea:	4276      	negs	r6, r6
 800d4ec:	2a00      	cmp	r2, #0
 800d4ee:	d0f9      	beq.n	800d4e4 <_strtol_l.constprop.0+0xd4>
 800d4f0:	f1bc 0f00 	cmp.w	ip, #0
 800d4f4:	d000      	beq.n	800d4f8 <_strtol_l.constprop.0+0xe8>
 800d4f6:	1e69      	subs	r1, r5, #1
 800d4f8:	6011      	str	r1, [r2, #0]
 800d4fa:	e7f3      	b.n	800d4e4 <_strtol_l.constprop.0+0xd4>
 800d4fc:	2430      	movs	r4, #48	; 0x30
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d1b1      	bne.n	800d466 <_strtol_l.constprop.0+0x56>
 800d502:	2308      	movs	r3, #8
 800d504:	e7af      	b.n	800d466 <_strtol_l.constprop.0+0x56>
 800d506:	2c30      	cmp	r4, #48	; 0x30
 800d508:	d0a5      	beq.n	800d456 <_strtol_l.constprop.0+0x46>
 800d50a:	230a      	movs	r3, #10
 800d50c:	e7ab      	b.n	800d466 <_strtol_l.constprop.0+0x56>
 800d50e:	bf00      	nop
 800d510:	08010471 	.word	0x08010471

0800d514 <_strtol_r>:
 800d514:	f7ff bf7c 	b.w	800d410 <_strtol_l.constprop.0>

0800d518 <quorem>:
 800d518:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d51c:	6903      	ldr	r3, [r0, #16]
 800d51e:	690c      	ldr	r4, [r1, #16]
 800d520:	42a3      	cmp	r3, r4
 800d522:	4607      	mov	r7, r0
 800d524:	f2c0 8081 	blt.w	800d62a <quorem+0x112>
 800d528:	3c01      	subs	r4, #1
 800d52a:	f101 0814 	add.w	r8, r1, #20
 800d52e:	f100 0514 	add.w	r5, r0, #20
 800d532:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d536:	9301      	str	r3, [sp, #4]
 800d538:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d53c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d540:	3301      	adds	r3, #1
 800d542:	429a      	cmp	r2, r3
 800d544:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d548:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d54c:	fbb2 f6f3 	udiv	r6, r2, r3
 800d550:	d331      	bcc.n	800d5b6 <quorem+0x9e>
 800d552:	f04f 0e00 	mov.w	lr, #0
 800d556:	4640      	mov	r0, r8
 800d558:	46ac      	mov	ip, r5
 800d55a:	46f2      	mov	sl, lr
 800d55c:	f850 2b04 	ldr.w	r2, [r0], #4
 800d560:	b293      	uxth	r3, r2
 800d562:	fb06 e303 	mla	r3, r6, r3, lr
 800d566:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d56a:	b29b      	uxth	r3, r3
 800d56c:	ebaa 0303 	sub.w	r3, sl, r3
 800d570:	f8dc a000 	ldr.w	sl, [ip]
 800d574:	0c12      	lsrs	r2, r2, #16
 800d576:	fa13 f38a 	uxtah	r3, r3, sl
 800d57a:	fb06 e202 	mla	r2, r6, r2, lr
 800d57e:	9300      	str	r3, [sp, #0]
 800d580:	9b00      	ldr	r3, [sp, #0]
 800d582:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d586:	b292      	uxth	r2, r2
 800d588:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d58c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d590:	f8bd 3000 	ldrh.w	r3, [sp]
 800d594:	4581      	cmp	r9, r0
 800d596:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d59a:	f84c 3b04 	str.w	r3, [ip], #4
 800d59e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d5a2:	d2db      	bcs.n	800d55c <quorem+0x44>
 800d5a4:	f855 300b 	ldr.w	r3, [r5, fp]
 800d5a8:	b92b      	cbnz	r3, 800d5b6 <quorem+0x9e>
 800d5aa:	9b01      	ldr	r3, [sp, #4]
 800d5ac:	3b04      	subs	r3, #4
 800d5ae:	429d      	cmp	r5, r3
 800d5b0:	461a      	mov	r2, r3
 800d5b2:	d32e      	bcc.n	800d612 <quorem+0xfa>
 800d5b4:	613c      	str	r4, [r7, #16]
 800d5b6:	4638      	mov	r0, r7
 800d5b8:	f001 fc90 	bl	800eedc <__mcmp>
 800d5bc:	2800      	cmp	r0, #0
 800d5be:	db24      	blt.n	800d60a <quorem+0xf2>
 800d5c0:	3601      	adds	r6, #1
 800d5c2:	4628      	mov	r0, r5
 800d5c4:	f04f 0c00 	mov.w	ip, #0
 800d5c8:	f858 2b04 	ldr.w	r2, [r8], #4
 800d5cc:	f8d0 e000 	ldr.w	lr, [r0]
 800d5d0:	b293      	uxth	r3, r2
 800d5d2:	ebac 0303 	sub.w	r3, ip, r3
 800d5d6:	0c12      	lsrs	r2, r2, #16
 800d5d8:	fa13 f38e 	uxtah	r3, r3, lr
 800d5dc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d5e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d5e4:	b29b      	uxth	r3, r3
 800d5e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d5ea:	45c1      	cmp	r9, r8
 800d5ec:	f840 3b04 	str.w	r3, [r0], #4
 800d5f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d5f4:	d2e8      	bcs.n	800d5c8 <quorem+0xb0>
 800d5f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d5fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d5fe:	b922      	cbnz	r2, 800d60a <quorem+0xf2>
 800d600:	3b04      	subs	r3, #4
 800d602:	429d      	cmp	r5, r3
 800d604:	461a      	mov	r2, r3
 800d606:	d30a      	bcc.n	800d61e <quorem+0x106>
 800d608:	613c      	str	r4, [r7, #16]
 800d60a:	4630      	mov	r0, r6
 800d60c:	b003      	add	sp, #12
 800d60e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d612:	6812      	ldr	r2, [r2, #0]
 800d614:	3b04      	subs	r3, #4
 800d616:	2a00      	cmp	r2, #0
 800d618:	d1cc      	bne.n	800d5b4 <quorem+0x9c>
 800d61a:	3c01      	subs	r4, #1
 800d61c:	e7c7      	b.n	800d5ae <quorem+0x96>
 800d61e:	6812      	ldr	r2, [r2, #0]
 800d620:	3b04      	subs	r3, #4
 800d622:	2a00      	cmp	r2, #0
 800d624:	d1f0      	bne.n	800d608 <quorem+0xf0>
 800d626:	3c01      	subs	r4, #1
 800d628:	e7eb      	b.n	800d602 <quorem+0xea>
 800d62a:	2000      	movs	r0, #0
 800d62c:	e7ee      	b.n	800d60c <quorem+0xf4>
	...

0800d630 <_dtoa_r>:
 800d630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d634:	ed2d 8b04 	vpush	{d8-d9}
 800d638:	ec57 6b10 	vmov	r6, r7, d0
 800d63c:	b093      	sub	sp, #76	; 0x4c
 800d63e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d640:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d644:	9106      	str	r1, [sp, #24]
 800d646:	ee10 aa10 	vmov	sl, s0
 800d64a:	4604      	mov	r4, r0
 800d64c:	9209      	str	r2, [sp, #36]	; 0x24
 800d64e:	930c      	str	r3, [sp, #48]	; 0x30
 800d650:	46bb      	mov	fp, r7
 800d652:	b975      	cbnz	r5, 800d672 <_dtoa_r+0x42>
 800d654:	2010      	movs	r0, #16
 800d656:	f001 f94d 	bl	800e8f4 <malloc>
 800d65a:	4602      	mov	r2, r0
 800d65c:	6260      	str	r0, [r4, #36]	; 0x24
 800d65e:	b920      	cbnz	r0, 800d66a <_dtoa_r+0x3a>
 800d660:	4ba7      	ldr	r3, [pc, #668]	; (800d900 <_dtoa_r+0x2d0>)
 800d662:	21ea      	movs	r1, #234	; 0xea
 800d664:	48a7      	ldr	r0, [pc, #668]	; (800d904 <_dtoa_r+0x2d4>)
 800d666:	f002 f8bd 	bl	800f7e4 <__assert_func>
 800d66a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d66e:	6005      	str	r5, [r0, #0]
 800d670:	60c5      	str	r5, [r0, #12]
 800d672:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d674:	6819      	ldr	r1, [r3, #0]
 800d676:	b151      	cbz	r1, 800d68e <_dtoa_r+0x5e>
 800d678:	685a      	ldr	r2, [r3, #4]
 800d67a:	604a      	str	r2, [r1, #4]
 800d67c:	2301      	movs	r3, #1
 800d67e:	4093      	lsls	r3, r2
 800d680:	608b      	str	r3, [r1, #8]
 800d682:	4620      	mov	r0, r4
 800d684:	f001 f99e 	bl	800e9c4 <_Bfree>
 800d688:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d68a:	2200      	movs	r2, #0
 800d68c:	601a      	str	r2, [r3, #0]
 800d68e:	1e3b      	subs	r3, r7, #0
 800d690:	bfaa      	itet	ge
 800d692:	2300      	movge	r3, #0
 800d694:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d698:	f8c8 3000 	strge.w	r3, [r8]
 800d69c:	4b9a      	ldr	r3, [pc, #616]	; (800d908 <_dtoa_r+0x2d8>)
 800d69e:	bfbc      	itt	lt
 800d6a0:	2201      	movlt	r2, #1
 800d6a2:	f8c8 2000 	strlt.w	r2, [r8]
 800d6a6:	ea33 030b 	bics.w	r3, r3, fp
 800d6aa:	d11b      	bne.n	800d6e4 <_dtoa_r+0xb4>
 800d6ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d6ae:	f242 730f 	movw	r3, #9999	; 0x270f
 800d6b2:	6013      	str	r3, [r2, #0]
 800d6b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d6b8:	4333      	orrs	r3, r6
 800d6ba:	f000 8592 	beq.w	800e1e2 <_dtoa_r+0xbb2>
 800d6be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d6c0:	b963      	cbnz	r3, 800d6dc <_dtoa_r+0xac>
 800d6c2:	4b92      	ldr	r3, [pc, #584]	; (800d90c <_dtoa_r+0x2dc>)
 800d6c4:	e022      	b.n	800d70c <_dtoa_r+0xdc>
 800d6c6:	4b92      	ldr	r3, [pc, #584]	; (800d910 <_dtoa_r+0x2e0>)
 800d6c8:	9301      	str	r3, [sp, #4]
 800d6ca:	3308      	adds	r3, #8
 800d6cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d6ce:	6013      	str	r3, [r2, #0]
 800d6d0:	9801      	ldr	r0, [sp, #4]
 800d6d2:	b013      	add	sp, #76	; 0x4c
 800d6d4:	ecbd 8b04 	vpop	{d8-d9}
 800d6d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6dc:	4b8b      	ldr	r3, [pc, #556]	; (800d90c <_dtoa_r+0x2dc>)
 800d6de:	9301      	str	r3, [sp, #4]
 800d6e0:	3303      	adds	r3, #3
 800d6e2:	e7f3      	b.n	800d6cc <_dtoa_r+0x9c>
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	4650      	mov	r0, sl
 800d6ea:	4659      	mov	r1, fp
 800d6ec:	f7f3 fa0c 	bl	8000b08 <__aeabi_dcmpeq>
 800d6f0:	ec4b ab19 	vmov	d9, sl, fp
 800d6f4:	4680      	mov	r8, r0
 800d6f6:	b158      	cbz	r0, 800d710 <_dtoa_r+0xe0>
 800d6f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d6fa:	2301      	movs	r3, #1
 800d6fc:	6013      	str	r3, [r2, #0]
 800d6fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d700:	2b00      	cmp	r3, #0
 800d702:	f000 856b 	beq.w	800e1dc <_dtoa_r+0xbac>
 800d706:	4883      	ldr	r0, [pc, #524]	; (800d914 <_dtoa_r+0x2e4>)
 800d708:	6018      	str	r0, [r3, #0]
 800d70a:	1e43      	subs	r3, r0, #1
 800d70c:	9301      	str	r3, [sp, #4]
 800d70e:	e7df      	b.n	800d6d0 <_dtoa_r+0xa0>
 800d710:	ec4b ab10 	vmov	d0, sl, fp
 800d714:	aa10      	add	r2, sp, #64	; 0x40
 800d716:	a911      	add	r1, sp, #68	; 0x44
 800d718:	4620      	mov	r0, r4
 800d71a:	f001 fd01 	bl	800f120 <__d2b>
 800d71e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d722:	ee08 0a10 	vmov	s16, r0
 800d726:	2d00      	cmp	r5, #0
 800d728:	f000 8084 	beq.w	800d834 <_dtoa_r+0x204>
 800d72c:	ee19 3a90 	vmov	r3, s19
 800d730:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d734:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d738:	4656      	mov	r6, sl
 800d73a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d73e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d742:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d746:	4b74      	ldr	r3, [pc, #464]	; (800d918 <_dtoa_r+0x2e8>)
 800d748:	2200      	movs	r2, #0
 800d74a:	4630      	mov	r0, r6
 800d74c:	4639      	mov	r1, r7
 800d74e:	f7f2 fdbb 	bl	80002c8 <__aeabi_dsub>
 800d752:	a365      	add	r3, pc, #404	; (adr r3, 800d8e8 <_dtoa_r+0x2b8>)
 800d754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d758:	f7f2 ff6e 	bl	8000638 <__aeabi_dmul>
 800d75c:	a364      	add	r3, pc, #400	; (adr r3, 800d8f0 <_dtoa_r+0x2c0>)
 800d75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d762:	f7f2 fdb3 	bl	80002cc <__adddf3>
 800d766:	4606      	mov	r6, r0
 800d768:	4628      	mov	r0, r5
 800d76a:	460f      	mov	r7, r1
 800d76c:	f7f2 fefa 	bl	8000564 <__aeabi_i2d>
 800d770:	a361      	add	r3, pc, #388	; (adr r3, 800d8f8 <_dtoa_r+0x2c8>)
 800d772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d776:	f7f2 ff5f 	bl	8000638 <__aeabi_dmul>
 800d77a:	4602      	mov	r2, r0
 800d77c:	460b      	mov	r3, r1
 800d77e:	4630      	mov	r0, r6
 800d780:	4639      	mov	r1, r7
 800d782:	f7f2 fda3 	bl	80002cc <__adddf3>
 800d786:	4606      	mov	r6, r0
 800d788:	460f      	mov	r7, r1
 800d78a:	f7f3 fa05 	bl	8000b98 <__aeabi_d2iz>
 800d78e:	2200      	movs	r2, #0
 800d790:	9000      	str	r0, [sp, #0]
 800d792:	2300      	movs	r3, #0
 800d794:	4630      	mov	r0, r6
 800d796:	4639      	mov	r1, r7
 800d798:	f7f3 f9c0 	bl	8000b1c <__aeabi_dcmplt>
 800d79c:	b150      	cbz	r0, 800d7b4 <_dtoa_r+0x184>
 800d79e:	9800      	ldr	r0, [sp, #0]
 800d7a0:	f7f2 fee0 	bl	8000564 <__aeabi_i2d>
 800d7a4:	4632      	mov	r2, r6
 800d7a6:	463b      	mov	r3, r7
 800d7a8:	f7f3 f9ae 	bl	8000b08 <__aeabi_dcmpeq>
 800d7ac:	b910      	cbnz	r0, 800d7b4 <_dtoa_r+0x184>
 800d7ae:	9b00      	ldr	r3, [sp, #0]
 800d7b0:	3b01      	subs	r3, #1
 800d7b2:	9300      	str	r3, [sp, #0]
 800d7b4:	9b00      	ldr	r3, [sp, #0]
 800d7b6:	2b16      	cmp	r3, #22
 800d7b8:	d85a      	bhi.n	800d870 <_dtoa_r+0x240>
 800d7ba:	9a00      	ldr	r2, [sp, #0]
 800d7bc:	4b57      	ldr	r3, [pc, #348]	; (800d91c <_dtoa_r+0x2ec>)
 800d7be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7c6:	ec51 0b19 	vmov	r0, r1, d9
 800d7ca:	f7f3 f9a7 	bl	8000b1c <__aeabi_dcmplt>
 800d7ce:	2800      	cmp	r0, #0
 800d7d0:	d050      	beq.n	800d874 <_dtoa_r+0x244>
 800d7d2:	9b00      	ldr	r3, [sp, #0]
 800d7d4:	3b01      	subs	r3, #1
 800d7d6:	9300      	str	r3, [sp, #0]
 800d7d8:	2300      	movs	r3, #0
 800d7da:	930b      	str	r3, [sp, #44]	; 0x2c
 800d7dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d7de:	1b5d      	subs	r5, r3, r5
 800d7e0:	1e6b      	subs	r3, r5, #1
 800d7e2:	9305      	str	r3, [sp, #20]
 800d7e4:	bf45      	ittet	mi
 800d7e6:	f1c5 0301 	rsbmi	r3, r5, #1
 800d7ea:	9304      	strmi	r3, [sp, #16]
 800d7ec:	2300      	movpl	r3, #0
 800d7ee:	2300      	movmi	r3, #0
 800d7f0:	bf4c      	ite	mi
 800d7f2:	9305      	strmi	r3, [sp, #20]
 800d7f4:	9304      	strpl	r3, [sp, #16]
 800d7f6:	9b00      	ldr	r3, [sp, #0]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	db3d      	blt.n	800d878 <_dtoa_r+0x248>
 800d7fc:	9b05      	ldr	r3, [sp, #20]
 800d7fe:	9a00      	ldr	r2, [sp, #0]
 800d800:	920a      	str	r2, [sp, #40]	; 0x28
 800d802:	4413      	add	r3, r2
 800d804:	9305      	str	r3, [sp, #20]
 800d806:	2300      	movs	r3, #0
 800d808:	9307      	str	r3, [sp, #28]
 800d80a:	9b06      	ldr	r3, [sp, #24]
 800d80c:	2b09      	cmp	r3, #9
 800d80e:	f200 8089 	bhi.w	800d924 <_dtoa_r+0x2f4>
 800d812:	2b05      	cmp	r3, #5
 800d814:	bfc4      	itt	gt
 800d816:	3b04      	subgt	r3, #4
 800d818:	9306      	strgt	r3, [sp, #24]
 800d81a:	9b06      	ldr	r3, [sp, #24]
 800d81c:	f1a3 0302 	sub.w	r3, r3, #2
 800d820:	bfcc      	ite	gt
 800d822:	2500      	movgt	r5, #0
 800d824:	2501      	movle	r5, #1
 800d826:	2b03      	cmp	r3, #3
 800d828:	f200 8087 	bhi.w	800d93a <_dtoa_r+0x30a>
 800d82c:	e8df f003 	tbb	[pc, r3]
 800d830:	59383a2d 	.word	0x59383a2d
 800d834:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d838:	441d      	add	r5, r3
 800d83a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d83e:	2b20      	cmp	r3, #32
 800d840:	bfc1      	itttt	gt
 800d842:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d846:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d84a:	fa0b f303 	lslgt.w	r3, fp, r3
 800d84e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d852:	bfda      	itte	le
 800d854:	f1c3 0320 	rsble	r3, r3, #32
 800d858:	fa06 f003 	lslle.w	r0, r6, r3
 800d85c:	4318      	orrgt	r0, r3
 800d85e:	f7f2 fe71 	bl	8000544 <__aeabi_ui2d>
 800d862:	2301      	movs	r3, #1
 800d864:	4606      	mov	r6, r0
 800d866:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d86a:	3d01      	subs	r5, #1
 800d86c:	930e      	str	r3, [sp, #56]	; 0x38
 800d86e:	e76a      	b.n	800d746 <_dtoa_r+0x116>
 800d870:	2301      	movs	r3, #1
 800d872:	e7b2      	b.n	800d7da <_dtoa_r+0x1aa>
 800d874:	900b      	str	r0, [sp, #44]	; 0x2c
 800d876:	e7b1      	b.n	800d7dc <_dtoa_r+0x1ac>
 800d878:	9b04      	ldr	r3, [sp, #16]
 800d87a:	9a00      	ldr	r2, [sp, #0]
 800d87c:	1a9b      	subs	r3, r3, r2
 800d87e:	9304      	str	r3, [sp, #16]
 800d880:	4253      	negs	r3, r2
 800d882:	9307      	str	r3, [sp, #28]
 800d884:	2300      	movs	r3, #0
 800d886:	930a      	str	r3, [sp, #40]	; 0x28
 800d888:	e7bf      	b.n	800d80a <_dtoa_r+0x1da>
 800d88a:	2300      	movs	r3, #0
 800d88c:	9308      	str	r3, [sp, #32]
 800d88e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d890:	2b00      	cmp	r3, #0
 800d892:	dc55      	bgt.n	800d940 <_dtoa_r+0x310>
 800d894:	2301      	movs	r3, #1
 800d896:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d89a:	461a      	mov	r2, r3
 800d89c:	9209      	str	r2, [sp, #36]	; 0x24
 800d89e:	e00c      	b.n	800d8ba <_dtoa_r+0x28a>
 800d8a0:	2301      	movs	r3, #1
 800d8a2:	e7f3      	b.n	800d88c <_dtoa_r+0x25c>
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d8a8:	9308      	str	r3, [sp, #32]
 800d8aa:	9b00      	ldr	r3, [sp, #0]
 800d8ac:	4413      	add	r3, r2
 800d8ae:	9302      	str	r3, [sp, #8]
 800d8b0:	3301      	adds	r3, #1
 800d8b2:	2b01      	cmp	r3, #1
 800d8b4:	9303      	str	r3, [sp, #12]
 800d8b6:	bfb8      	it	lt
 800d8b8:	2301      	movlt	r3, #1
 800d8ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d8bc:	2200      	movs	r2, #0
 800d8be:	6042      	str	r2, [r0, #4]
 800d8c0:	2204      	movs	r2, #4
 800d8c2:	f102 0614 	add.w	r6, r2, #20
 800d8c6:	429e      	cmp	r6, r3
 800d8c8:	6841      	ldr	r1, [r0, #4]
 800d8ca:	d93d      	bls.n	800d948 <_dtoa_r+0x318>
 800d8cc:	4620      	mov	r0, r4
 800d8ce:	f001 f839 	bl	800e944 <_Balloc>
 800d8d2:	9001      	str	r0, [sp, #4]
 800d8d4:	2800      	cmp	r0, #0
 800d8d6:	d13b      	bne.n	800d950 <_dtoa_r+0x320>
 800d8d8:	4b11      	ldr	r3, [pc, #68]	; (800d920 <_dtoa_r+0x2f0>)
 800d8da:	4602      	mov	r2, r0
 800d8dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d8e0:	e6c0      	b.n	800d664 <_dtoa_r+0x34>
 800d8e2:	2301      	movs	r3, #1
 800d8e4:	e7df      	b.n	800d8a6 <_dtoa_r+0x276>
 800d8e6:	bf00      	nop
 800d8e8:	636f4361 	.word	0x636f4361
 800d8ec:	3fd287a7 	.word	0x3fd287a7
 800d8f0:	8b60c8b3 	.word	0x8b60c8b3
 800d8f4:	3fc68a28 	.word	0x3fc68a28
 800d8f8:	509f79fb 	.word	0x509f79fb
 800d8fc:	3fd34413 	.word	0x3fd34413
 800d900:	0801057e 	.word	0x0801057e
 800d904:	08010595 	.word	0x08010595
 800d908:	7ff00000 	.word	0x7ff00000
 800d90c:	0801057a 	.word	0x0801057a
 800d910:	08010571 	.word	0x08010571
 800d914:	080103f5 	.word	0x080103f5
 800d918:	3ff80000 	.word	0x3ff80000
 800d91c:	08010700 	.word	0x08010700
 800d920:	080105f0 	.word	0x080105f0
 800d924:	2501      	movs	r5, #1
 800d926:	2300      	movs	r3, #0
 800d928:	9306      	str	r3, [sp, #24]
 800d92a:	9508      	str	r5, [sp, #32]
 800d92c:	f04f 33ff 	mov.w	r3, #4294967295
 800d930:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d934:	2200      	movs	r2, #0
 800d936:	2312      	movs	r3, #18
 800d938:	e7b0      	b.n	800d89c <_dtoa_r+0x26c>
 800d93a:	2301      	movs	r3, #1
 800d93c:	9308      	str	r3, [sp, #32]
 800d93e:	e7f5      	b.n	800d92c <_dtoa_r+0x2fc>
 800d940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d942:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d946:	e7b8      	b.n	800d8ba <_dtoa_r+0x28a>
 800d948:	3101      	adds	r1, #1
 800d94a:	6041      	str	r1, [r0, #4]
 800d94c:	0052      	lsls	r2, r2, #1
 800d94e:	e7b8      	b.n	800d8c2 <_dtoa_r+0x292>
 800d950:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d952:	9a01      	ldr	r2, [sp, #4]
 800d954:	601a      	str	r2, [r3, #0]
 800d956:	9b03      	ldr	r3, [sp, #12]
 800d958:	2b0e      	cmp	r3, #14
 800d95a:	f200 809d 	bhi.w	800da98 <_dtoa_r+0x468>
 800d95e:	2d00      	cmp	r5, #0
 800d960:	f000 809a 	beq.w	800da98 <_dtoa_r+0x468>
 800d964:	9b00      	ldr	r3, [sp, #0]
 800d966:	2b00      	cmp	r3, #0
 800d968:	dd32      	ble.n	800d9d0 <_dtoa_r+0x3a0>
 800d96a:	4ab7      	ldr	r2, [pc, #732]	; (800dc48 <_dtoa_r+0x618>)
 800d96c:	f003 030f 	and.w	r3, r3, #15
 800d970:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d974:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d978:	9b00      	ldr	r3, [sp, #0]
 800d97a:	05d8      	lsls	r0, r3, #23
 800d97c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d980:	d516      	bpl.n	800d9b0 <_dtoa_r+0x380>
 800d982:	4bb2      	ldr	r3, [pc, #712]	; (800dc4c <_dtoa_r+0x61c>)
 800d984:	ec51 0b19 	vmov	r0, r1, d9
 800d988:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d98c:	f7f2 ff7e 	bl	800088c <__aeabi_ddiv>
 800d990:	f007 070f 	and.w	r7, r7, #15
 800d994:	4682      	mov	sl, r0
 800d996:	468b      	mov	fp, r1
 800d998:	2503      	movs	r5, #3
 800d99a:	4eac      	ldr	r6, [pc, #688]	; (800dc4c <_dtoa_r+0x61c>)
 800d99c:	b957      	cbnz	r7, 800d9b4 <_dtoa_r+0x384>
 800d99e:	4642      	mov	r2, r8
 800d9a0:	464b      	mov	r3, r9
 800d9a2:	4650      	mov	r0, sl
 800d9a4:	4659      	mov	r1, fp
 800d9a6:	f7f2 ff71 	bl	800088c <__aeabi_ddiv>
 800d9aa:	4682      	mov	sl, r0
 800d9ac:	468b      	mov	fp, r1
 800d9ae:	e028      	b.n	800da02 <_dtoa_r+0x3d2>
 800d9b0:	2502      	movs	r5, #2
 800d9b2:	e7f2      	b.n	800d99a <_dtoa_r+0x36a>
 800d9b4:	07f9      	lsls	r1, r7, #31
 800d9b6:	d508      	bpl.n	800d9ca <_dtoa_r+0x39a>
 800d9b8:	4640      	mov	r0, r8
 800d9ba:	4649      	mov	r1, r9
 800d9bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d9c0:	f7f2 fe3a 	bl	8000638 <__aeabi_dmul>
 800d9c4:	3501      	adds	r5, #1
 800d9c6:	4680      	mov	r8, r0
 800d9c8:	4689      	mov	r9, r1
 800d9ca:	107f      	asrs	r7, r7, #1
 800d9cc:	3608      	adds	r6, #8
 800d9ce:	e7e5      	b.n	800d99c <_dtoa_r+0x36c>
 800d9d0:	f000 809b 	beq.w	800db0a <_dtoa_r+0x4da>
 800d9d4:	9b00      	ldr	r3, [sp, #0]
 800d9d6:	4f9d      	ldr	r7, [pc, #628]	; (800dc4c <_dtoa_r+0x61c>)
 800d9d8:	425e      	negs	r6, r3
 800d9da:	4b9b      	ldr	r3, [pc, #620]	; (800dc48 <_dtoa_r+0x618>)
 800d9dc:	f006 020f 	and.w	r2, r6, #15
 800d9e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9e8:	ec51 0b19 	vmov	r0, r1, d9
 800d9ec:	f7f2 fe24 	bl	8000638 <__aeabi_dmul>
 800d9f0:	1136      	asrs	r6, r6, #4
 800d9f2:	4682      	mov	sl, r0
 800d9f4:	468b      	mov	fp, r1
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	2502      	movs	r5, #2
 800d9fa:	2e00      	cmp	r6, #0
 800d9fc:	d17a      	bne.n	800daf4 <_dtoa_r+0x4c4>
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d1d3      	bne.n	800d9aa <_dtoa_r+0x37a>
 800da02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da04:	2b00      	cmp	r3, #0
 800da06:	f000 8082 	beq.w	800db0e <_dtoa_r+0x4de>
 800da0a:	4b91      	ldr	r3, [pc, #580]	; (800dc50 <_dtoa_r+0x620>)
 800da0c:	2200      	movs	r2, #0
 800da0e:	4650      	mov	r0, sl
 800da10:	4659      	mov	r1, fp
 800da12:	f7f3 f883 	bl	8000b1c <__aeabi_dcmplt>
 800da16:	2800      	cmp	r0, #0
 800da18:	d079      	beq.n	800db0e <_dtoa_r+0x4de>
 800da1a:	9b03      	ldr	r3, [sp, #12]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d076      	beq.n	800db0e <_dtoa_r+0x4de>
 800da20:	9b02      	ldr	r3, [sp, #8]
 800da22:	2b00      	cmp	r3, #0
 800da24:	dd36      	ble.n	800da94 <_dtoa_r+0x464>
 800da26:	9b00      	ldr	r3, [sp, #0]
 800da28:	4650      	mov	r0, sl
 800da2a:	4659      	mov	r1, fp
 800da2c:	1e5f      	subs	r7, r3, #1
 800da2e:	2200      	movs	r2, #0
 800da30:	4b88      	ldr	r3, [pc, #544]	; (800dc54 <_dtoa_r+0x624>)
 800da32:	f7f2 fe01 	bl	8000638 <__aeabi_dmul>
 800da36:	9e02      	ldr	r6, [sp, #8]
 800da38:	4682      	mov	sl, r0
 800da3a:	468b      	mov	fp, r1
 800da3c:	3501      	adds	r5, #1
 800da3e:	4628      	mov	r0, r5
 800da40:	f7f2 fd90 	bl	8000564 <__aeabi_i2d>
 800da44:	4652      	mov	r2, sl
 800da46:	465b      	mov	r3, fp
 800da48:	f7f2 fdf6 	bl	8000638 <__aeabi_dmul>
 800da4c:	4b82      	ldr	r3, [pc, #520]	; (800dc58 <_dtoa_r+0x628>)
 800da4e:	2200      	movs	r2, #0
 800da50:	f7f2 fc3c 	bl	80002cc <__adddf3>
 800da54:	46d0      	mov	r8, sl
 800da56:	46d9      	mov	r9, fp
 800da58:	4682      	mov	sl, r0
 800da5a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800da5e:	2e00      	cmp	r6, #0
 800da60:	d158      	bne.n	800db14 <_dtoa_r+0x4e4>
 800da62:	4b7e      	ldr	r3, [pc, #504]	; (800dc5c <_dtoa_r+0x62c>)
 800da64:	2200      	movs	r2, #0
 800da66:	4640      	mov	r0, r8
 800da68:	4649      	mov	r1, r9
 800da6a:	f7f2 fc2d 	bl	80002c8 <__aeabi_dsub>
 800da6e:	4652      	mov	r2, sl
 800da70:	465b      	mov	r3, fp
 800da72:	4680      	mov	r8, r0
 800da74:	4689      	mov	r9, r1
 800da76:	f7f3 f86f 	bl	8000b58 <__aeabi_dcmpgt>
 800da7a:	2800      	cmp	r0, #0
 800da7c:	f040 8295 	bne.w	800dfaa <_dtoa_r+0x97a>
 800da80:	4652      	mov	r2, sl
 800da82:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800da86:	4640      	mov	r0, r8
 800da88:	4649      	mov	r1, r9
 800da8a:	f7f3 f847 	bl	8000b1c <__aeabi_dcmplt>
 800da8e:	2800      	cmp	r0, #0
 800da90:	f040 8289 	bne.w	800dfa6 <_dtoa_r+0x976>
 800da94:	ec5b ab19 	vmov	sl, fp, d9
 800da98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	f2c0 8148 	blt.w	800dd30 <_dtoa_r+0x700>
 800daa0:	9a00      	ldr	r2, [sp, #0]
 800daa2:	2a0e      	cmp	r2, #14
 800daa4:	f300 8144 	bgt.w	800dd30 <_dtoa_r+0x700>
 800daa8:	4b67      	ldr	r3, [pc, #412]	; (800dc48 <_dtoa_r+0x618>)
 800daaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800daae:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	f280 80d5 	bge.w	800dc64 <_dtoa_r+0x634>
 800daba:	9b03      	ldr	r3, [sp, #12]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	f300 80d1 	bgt.w	800dc64 <_dtoa_r+0x634>
 800dac2:	f040 826f 	bne.w	800dfa4 <_dtoa_r+0x974>
 800dac6:	4b65      	ldr	r3, [pc, #404]	; (800dc5c <_dtoa_r+0x62c>)
 800dac8:	2200      	movs	r2, #0
 800daca:	4640      	mov	r0, r8
 800dacc:	4649      	mov	r1, r9
 800dace:	f7f2 fdb3 	bl	8000638 <__aeabi_dmul>
 800dad2:	4652      	mov	r2, sl
 800dad4:	465b      	mov	r3, fp
 800dad6:	f7f3 f835 	bl	8000b44 <__aeabi_dcmpge>
 800dada:	9e03      	ldr	r6, [sp, #12]
 800dadc:	4637      	mov	r7, r6
 800dade:	2800      	cmp	r0, #0
 800dae0:	f040 8245 	bne.w	800df6e <_dtoa_r+0x93e>
 800dae4:	9d01      	ldr	r5, [sp, #4]
 800dae6:	2331      	movs	r3, #49	; 0x31
 800dae8:	f805 3b01 	strb.w	r3, [r5], #1
 800daec:	9b00      	ldr	r3, [sp, #0]
 800daee:	3301      	adds	r3, #1
 800daf0:	9300      	str	r3, [sp, #0]
 800daf2:	e240      	b.n	800df76 <_dtoa_r+0x946>
 800daf4:	07f2      	lsls	r2, r6, #31
 800daf6:	d505      	bpl.n	800db04 <_dtoa_r+0x4d4>
 800daf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dafc:	f7f2 fd9c 	bl	8000638 <__aeabi_dmul>
 800db00:	3501      	adds	r5, #1
 800db02:	2301      	movs	r3, #1
 800db04:	1076      	asrs	r6, r6, #1
 800db06:	3708      	adds	r7, #8
 800db08:	e777      	b.n	800d9fa <_dtoa_r+0x3ca>
 800db0a:	2502      	movs	r5, #2
 800db0c:	e779      	b.n	800da02 <_dtoa_r+0x3d2>
 800db0e:	9f00      	ldr	r7, [sp, #0]
 800db10:	9e03      	ldr	r6, [sp, #12]
 800db12:	e794      	b.n	800da3e <_dtoa_r+0x40e>
 800db14:	9901      	ldr	r1, [sp, #4]
 800db16:	4b4c      	ldr	r3, [pc, #304]	; (800dc48 <_dtoa_r+0x618>)
 800db18:	4431      	add	r1, r6
 800db1a:	910d      	str	r1, [sp, #52]	; 0x34
 800db1c:	9908      	ldr	r1, [sp, #32]
 800db1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800db22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800db26:	2900      	cmp	r1, #0
 800db28:	d043      	beq.n	800dbb2 <_dtoa_r+0x582>
 800db2a:	494d      	ldr	r1, [pc, #308]	; (800dc60 <_dtoa_r+0x630>)
 800db2c:	2000      	movs	r0, #0
 800db2e:	f7f2 fead 	bl	800088c <__aeabi_ddiv>
 800db32:	4652      	mov	r2, sl
 800db34:	465b      	mov	r3, fp
 800db36:	f7f2 fbc7 	bl	80002c8 <__aeabi_dsub>
 800db3a:	9d01      	ldr	r5, [sp, #4]
 800db3c:	4682      	mov	sl, r0
 800db3e:	468b      	mov	fp, r1
 800db40:	4649      	mov	r1, r9
 800db42:	4640      	mov	r0, r8
 800db44:	f7f3 f828 	bl	8000b98 <__aeabi_d2iz>
 800db48:	4606      	mov	r6, r0
 800db4a:	f7f2 fd0b 	bl	8000564 <__aeabi_i2d>
 800db4e:	4602      	mov	r2, r0
 800db50:	460b      	mov	r3, r1
 800db52:	4640      	mov	r0, r8
 800db54:	4649      	mov	r1, r9
 800db56:	f7f2 fbb7 	bl	80002c8 <__aeabi_dsub>
 800db5a:	3630      	adds	r6, #48	; 0x30
 800db5c:	f805 6b01 	strb.w	r6, [r5], #1
 800db60:	4652      	mov	r2, sl
 800db62:	465b      	mov	r3, fp
 800db64:	4680      	mov	r8, r0
 800db66:	4689      	mov	r9, r1
 800db68:	f7f2 ffd8 	bl	8000b1c <__aeabi_dcmplt>
 800db6c:	2800      	cmp	r0, #0
 800db6e:	d163      	bne.n	800dc38 <_dtoa_r+0x608>
 800db70:	4642      	mov	r2, r8
 800db72:	464b      	mov	r3, r9
 800db74:	4936      	ldr	r1, [pc, #216]	; (800dc50 <_dtoa_r+0x620>)
 800db76:	2000      	movs	r0, #0
 800db78:	f7f2 fba6 	bl	80002c8 <__aeabi_dsub>
 800db7c:	4652      	mov	r2, sl
 800db7e:	465b      	mov	r3, fp
 800db80:	f7f2 ffcc 	bl	8000b1c <__aeabi_dcmplt>
 800db84:	2800      	cmp	r0, #0
 800db86:	f040 80b5 	bne.w	800dcf4 <_dtoa_r+0x6c4>
 800db8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db8c:	429d      	cmp	r5, r3
 800db8e:	d081      	beq.n	800da94 <_dtoa_r+0x464>
 800db90:	4b30      	ldr	r3, [pc, #192]	; (800dc54 <_dtoa_r+0x624>)
 800db92:	2200      	movs	r2, #0
 800db94:	4650      	mov	r0, sl
 800db96:	4659      	mov	r1, fp
 800db98:	f7f2 fd4e 	bl	8000638 <__aeabi_dmul>
 800db9c:	4b2d      	ldr	r3, [pc, #180]	; (800dc54 <_dtoa_r+0x624>)
 800db9e:	4682      	mov	sl, r0
 800dba0:	468b      	mov	fp, r1
 800dba2:	4640      	mov	r0, r8
 800dba4:	4649      	mov	r1, r9
 800dba6:	2200      	movs	r2, #0
 800dba8:	f7f2 fd46 	bl	8000638 <__aeabi_dmul>
 800dbac:	4680      	mov	r8, r0
 800dbae:	4689      	mov	r9, r1
 800dbb0:	e7c6      	b.n	800db40 <_dtoa_r+0x510>
 800dbb2:	4650      	mov	r0, sl
 800dbb4:	4659      	mov	r1, fp
 800dbb6:	f7f2 fd3f 	bl	8000638 <__aeabi_dmul>
 800dbba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dbbc:	9d01      	ldr	r5, [sp, #4]
 800dbbe:	930f      	str	r3, [sp, #60]	; 0x3c
 800dbc0:	4682      	mov	sl, r0
 800dbc2:	468b      	mov	fp, r1
 800dbc4:	4649      	mov	r1, r9
 800dbc6:	4640      	mov	r0, r8
 800dbc8:	f7f2 ffe6 	bl	8000b98 <__aeabi_d2iz>
 800dbcc:	4606      	mov	r6, r0
 800dbce:	f7f2 fcc9 	bl	8000564 <__aeabi_i2d>
 800dbd2:	3630      	adds	r6, #48	; 0x30
 800dbd4:	4602      	mov	r2, r0
 800dbd6:	460b      	mov	r3, r1
 800dbd8:	4640      	mov	r0, r8
 800dbda:	4649      	mov	r1, r9
 800dbdc:	f7f2 fb74 	bl	80002c8 <__aeabi_dsub>
 800dbe0:	f805 6b01 	strb.w	r6, [r5], #1
 800dbe4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dbe6:	429d      	cmp	r5, r3
 800dbe8:	4680      	mov	r8, r0
 800dbea:	4689      	mov	r9, r1
 800dbec:	f04f 0200 	mov.w	r2, #0
 800dbf0:	d124      	bne.n	800dc3c <_dtoa_r+0x60c>
 800dbf2:	4b1b      	ldr	r3, [pc, #108]	; (800dc60 <_dtoa_r+0x630>)
 800dbf4:	4650      	mov	r0, sl
 800dbf6:	4659      	mov	r1, fp
 800dbf8:	f7f2 fb68 	bl	80002cc <__adddf3>
 800dbfc:	4602      	mov	r2, r0
 800dbfe:	460b      	mov	r3, r1
 800dc00:	4640      	mov	r0, r8
 800dc02:	4649      	mov	r1, r9
 800dc04:	f7f2 ffa8 	bl	8000b58 <__aeabi_dcmpgt>
 800dc08:	2800      	cmp	r0, #0
 800dc0a:	d173      	bne.n	800dcf4 <_dtoa_r+0x6c4>
 800dc0c:	4652      	mov	r2, sl
 800dc0e:	465b      	mov	r3, fp
 800dc10:	4913      	ldr	r1, [pc, #76]	; (800dc60 <_dtoa_r+0x630>)
 800dc12:	2000      	movs	r0, #0
 800dc14:	f7f2 fb58 	bl	80002c8 <__aeabi_dsub>
 800dc18:	4602      	mov	r2, r0
 800dc1a:	460b      	mov	r3, r1
 800dc1c:	4640      	mov	r0, r8
 800dc1e:	4649      	mov	r1, r9
 800dc20:	f7f2 ff7c 	bl	8000b1c <__aeabi_dcmplt>
 800dc24:	2800      	cmp	r0, #0
 800dc26:	f43f af35 	beq.w	800da94 <_dtoa_r+0x464>
 800dc2a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800dc2c:	1e6b      	subs	r3, r5, #1
 800dc2e:	930f      	str	r3, [sp, #60]	; 0x3c
 800dc30:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dc34:	2b30      	cmp	r3, #48	; 0x30
 800dc36:	d0f8      	beq.n	800dc2a <_dtoa_r+0x5fa>
 800dc38:	9700      	str	r7, [sp, #0]
 800dc3a:	e049      	b.n	800dcd0 <_dtoa_r+0x6a0>
 800dc3c:	4b05      	ldr	r3, [pc, #20]	; (800dc54 <_dtoa_r+0x624>)
 800dc3e:	f7f2 fcfb 	bl	8000638 <__aeabi_dmul>
 800dc42:	4680      	mov	r8, r0
 800dc44:	4689      	mov	r9, r1
 800dc46:	e7bd      	b.n	800dbc4 <_dtoa_r+0x594>
 800dc48:	08010700 	.word	0x08010700
 800dc4c:	080106d8 	.word	0x080106d8
 800dc50:	3ff00000 	.word	0x3ff00000
 800dc54:	40240000 	.word	0x40240000
 800dc58:	401c0000 	.word	0x401c0000
 800dc5c:	40140000 	.word	0x40140000
 800dc60:	3fe00000 	.word	0x3fe00000
 800dc64:	9d01      	ldr	r5, [sp, #4]
 800dc66:	4656      	mov	r6, sl
 800dc68:	465f      	mov	r7, fp
 800dc6a:	4642      	mov	r2, r8
 800dc6c:	464b      	mov	r3, r9
 800dc6e:	4630      	mov	r0, r6
 800dc70:	4639      	mov	r1, r7
 800dc72:	f7f2 fe0b 	bl	800088c <__aeabi_ddiv>
 800dc76:	f7f2 ff8f 	bl	8000b98 <__aeabi_d2iz>
 800dc7a:	4682      	mov	sl, r0
 800dc7c:	f7f2 fc72 	bl	8000564 <__aeabi_i2d>
 800dc80:	4642      	mov	r2, r8
 800dc82:	464b      	mov	r3, r9
 800dc84:	f7f2 fcd8 	bl	8000638 <__aeabi_dmul>
 800dc88:	4602      	mov	r2, r0
 800dc8a:	460b      	mov	r3, r1
 800dc8c:	4630      	mov	r0, r6
 800dc8e:	4639      	mov	r1, r7
 800dc90:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800dc94:	f7f2 fb18 	bl	80002c8 <__aeabi_dsub>
 800dc98:	f805 6b01 	strb.w	r6, [r5], #1
 800dc9c:	9e01      	ldr	r6, [sp, #4]
 800dc9e:	9f03      	ldr	r7, [sp, #12]
 800dca0:	1bae      	subs	r6, r5, r6
 800dca2:	42b7      	cmp	r7, r6
 800dca4:	4602      	mov	r2, r0
 800dca6:	460b      	mov	r3, r1
 800dca8:	d135      	bne.n	800dd16 <_dtoa_r+0x6e6>
 800dcaa:	f7f2 fb0f 	bl	80002cc <__adddf3>
 800dcae:	4642      	mov	r2, r8
 800dcb0:	464b      	mov	r3, r9
 800dcb2:	4606      	mov	r6, r0
 800dcb4:	460f      	mov	r7, r1
 800dcb6:	f7f2 ff4f 	bl	8000b58 <__aeabi_dcmpgt>
 800dcba:	b9d0      	cbnz	r0, 800dcf2 <_dtoa_r+0x6c2>
 800dcbc:	4642      	mov	r2, r8
 800dcbe:	464b      	mov	r3, r9
 800dcc0:	4630      	mov	r0, r6
 800dcc2:	4639      	mov	r1, r7
 800dcc4:	f7f2 ff20 	bl	8000b08 <__aeabi_dcmpeq>
 800dcc8:	b110      	cbz	r0, 800dcd0 <_dtoa_r+0x6a0>
 800dcca:	f01a 0f01 	tst.w	sl, #1
 800dcce:	d110      	bne.n	800dcf2 <_dtoa_r+0x6c2>
 800dcd0:	4620      	mov	r0, r4
 800dcd2:	ee18 1a10 	vmov	r1, s16
 800dcd6:	f000 fe75 	bl	800e9c4 <_Bfree>
 800dcda:	2300      	movs	r3, #0
 800dcdc:	9800      	ldr	r0, [sp, #0]
 800dcde:	702b      	strb	r3, [r5, #0]
 800dce0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dce2:	3001      	adds	r0, #1
 800dce4:	6018      	str	r0, [r3, #0]
 800dce6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	f43f acf1 	beq.w	800d6d0 <_dtoa_r+0xa0>
 800dcee:	601d      	str	r5, [r3, #0]
 800dcf0:	e4ee      	b.n	800d6d0 <_dtoa_r+0xa0>
 800dcf2:	9f00      	ldr	r7, [sp, #0]
 800dcf4:	462b      	mov	r3, r5
 800dcf6:	461d      	mov	r5, r3
 800dcf8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dcfc:	2a39      	cmp	r2, #57	; 0x39
 800dcfe:	d106      	bne.n	800dd0e <_dtoa_r+0x6de>
 800dd00:	9a01      	ldr	r2, [sp, #4]
 800dd02:	429a      	cmp	r2, r3
 800dd04:	d1f7      	bne.n	800dcf6 <_dtoa_r+0x6c6>
 800dd06:	9901      	ldr	r1, [sp, #4]
 800dd08:	2230      	movs	r2, #48	; 0x30
 800dd0a:	3701      	adds	r7, #1
 800dd0c:	700a      	strb	r2, [r1, #0]
 800dd0e:	781a      	ldrb	r2, [r3, #0]
 800dd10:	3201      	adds	r2, #1
 800dd12:	701a      	strb	r2, [r3, #0]
 800dd14:	e790      	b.n	800dc38 <_dtoa_r+0x608>
 800dd16:	4ba6      	ldr	r3, [pc, #664]	; (800dfb0 <_dtoa_r+0x980>)
 800dd18:	2200      	movs	r2, #0
 800dd1a:	f7f2 fc8d 	bl	8000638 <__aeabi_dmul>
 800dd1e:	2200      	movs	r2, #0
 800dd20:	2300      	movs	r3, #0
 800dd22:	4606      	mov	r6, r0
 800dd24:	460f      	mov	r7, r1
 800dd26:	f7f2 feef 	bl	8000b08 <__aeabi_dcmpeq>
 800dd2a:	2800      	cmp	r0, #0
 800dd2c:	d09d      	beq.n	800dc6a <_dtoa_r+0x63a>
 800dd2e:	e7cf      	b.n	800dcd0 <_dtoa_r+0x6a0>
 800dd30:	9a08      	ldr	r2, [sp, #32]
 800dd32:	2a00      	cmp	r2, #0
 800dd34:	f000 80d7 	beq.w	800dee6 <_dtoa_r+0x8b6>
 800dd38:	9a06      	ldr	r2, [sp, #24]
 800dd3a:	2a01      	cmp	r2, #1
 800dd3c:	f300 80ba 	bgt.w	800deb4 <_dtoa_r+0x884>
 800dd40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dd42:	2a00      	cmp	r2, #0
 800dd44:	f000 80b2 	beq.w	800deac <_dtoa_r+0x87c>
 800dd48:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dd4c:	9e07      	ldr	r6, [sp, #28]
 800dd4e:	9d04      	ldr	r5, [sp, #16]
 800dd50:	9a04      	ldr	r2, [sp, #16]
 800dd52:	441a      	add	r2, r3
 800dd54:	9204      	str	r2, [sp, #16]
 800dd56:	9a05      	ldr	r2, [sp, #20]
 800dd58:	2101      	movs	r1, #1
 800dd5a:	441a      	add	r2, r3
 800dd5c:	4620      	mov	r0, r4
 800dd5e:	9205      	str	r2, [sp, #20]
 800dd60:	f000 ff32 	bl	800ebc8 <__i2b>
 800dd64:	4607      	mov	r7, r0
 800dd66:	2d00      	cmp	r5, #0
 800dd68:	dd0c      	ble.n	800dd84 <_dtoa_r+0x754>
 800dd6a:	9b05      	ldr	r3, [sp, #20]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	dd09      	ble.n	800dd84 <_dtoa_r+0x754>
 800dd70:	42ab      	cmp	r3, r5
 800dd72:	9a04      	ldr	r2, [sp, #16]
 800dd74:	bfa8      	it	ge
 800dd76:	462b      	movge	r3, r5
 800dd78:	1ad2      	subs	r2, r2, r3
 800dd7a:	9204      	str	r2, [sp, #16]
 800dd7c:	9a05      	ldr	r2, [sp, #20]
 800dd7e:	1aed      	subs	r5, r5, r3
 800dd80:	1ad3      	subs	r3, r2, r3
 800dd82:	9305      	str	r3, [sp, #20]
 800dd84:	9b07      	ldr	r3, [sp, #28]
 800dd86:	b31b      	cbz	r3, 800ddd0 <_dtoa_r+0x7a0>
 800dd88:	9b08      	ldr	r3, [sp, #32]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	f000 80af 	beq.w	800deee <_dtoa_r+0x8be>
 800dd90:	2e00      	cmp	r6, #0
 800dd92:	dd13      	ble.n	800ddbc <_dtoa_r+0x78c>
 800dd94:	4639      	mov	r1, r7
 800dd96:	4632      	mov	r2, r6
 800dd98:	4620      	mov	r0, r4
 800dd9a:	f000 ffd5 	bl	800ed48 <__pow5mult>
 800dd9e:	ee18 2a10 	vmov	r2, s16
 800dda2:	4601      	mov	r1, r0
 800dda4:	4607      	mov	r7, r0
 800dda6:	4620      	mov	r0, r4
 800dda8:	f000 ff24 	bl	800ebf4 <__multiply>
 800ddac:	ee18 1a10 	vmov	r1, s16
 800ddb0:	4680      	mov	r8, r0
 800ddb2:	4620      	mov	r0, r4
 800ddb4:	f000 fe06 	bl	800e9c4 <_Bfree>
 800ddb8:	ee08 8a10 	vmov	s16, r8
 800ddbc:	9b07      	ldr	r3, [sp, #28]
 800ddbe:	1b9a      	subs	r2, r3, r6
 800ddc0:	d006      	beq.n	800ddd0 <_dtoa_r+0x7a0>
 800ddc2:	ee18 1a10 	vmov	r1, s16
 800ddc6:	4620      	mov	r0, r4
 800ddc8:	f000 ffbe 	bl	800ed48 <__pow5mult>
 800ddcc:	ee08 0a10 	vmov	s16, r0
 800ddd0:	2101      	movs	r1, #1
 800ddd2:	4620      	mov	r0, r4
 800ddd4:	f000 fef8 	bl	800ebc8 <__i2b>
 800ddd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	4606      	mov	r6, r0
 800ddde:	f340 8088 	ble.w	800def2 <_dtoa_r+0x8c2>
 800dde2:	461a      	mov	r2, r3
 800dde4:	4601      	mov	r1, r0
 800dde6:	4620      	mov	r0, r4
 800dde8:	f000 ffae 	bl	800ed48 <__pow5mult>
 800ddec:	9b06      	ldr	r3, [sp, #24]
 800ddee:	2b01      	cmp	r3, #1
 800ddf0:	4606      	mov	r6, r0
 800ddf2:	f340 8081 	ble.w	800def8 <_dtoa_r+0x8c8>
 800ddf6:	f04f 0800 	mov.w	r8, #0
 800ddfa:	6933      	ldr	r3, [r6, #16]
 800ddfc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800de00:	6918      	ldr	r0, [r3, #16]
 800de02:	f000 fe91 	bl	800eb28 <__hi0bits>
 800de06:	f1c0 0020 	rsb	r0, r0, #32
 800de0a:	9b05      	ldr	r3, [sp, #20]
 800de0c:	4418      	add	r0, r3
 800de0e:	f010 001f 	ands.w	r0, r0, #31
 800de12:	f000 8092 	beq.w	800df3a <_dtoa_r+0x90a>
 800de16:	f1c0 0320 	rsb	r3, r0, #32
 800de1a:	2b04      	cmp	r3, #4
 800de1c:	f340 808a 	ble.w	800df34 <_dtoa_r+0x904>
 800de20:	f1c0 001c 	rsb	r0, r0, #28
 800de24:	9b04      	ldr	r3, [sp, #16]
 800de26:	4403      	add	r3, r0
 800de28:	9304      	str	r3, [sp, #16]
 800de2a:	9b05      	ldr	r3, [sp, #20]
 800de2c:	4403      	add	r3, r0
 800de2e:	4405      	add	r5, r0
 800de30:	9305      	str	r3, [sp, #20]
 800de32:	9b04      	ldr	r3, [sp, #16]
 800de34:	2b00      	cmp	r3, #0
 800de36:	dd07      	ble.n	800de48 <_dtoa_r+0x818>
 800de38:	ee18 1a10 	vmov	r1, s16
 800de3c:	461a      	mov	r2, r3
 800de3e:	4620      	mov	r0, r4
 800de40:	f000 ffdc 	bl	800edfc <__lshift>
 800de44:	ee08 0a10 	vmov	s16, r0
 800de48:	9b05      	ldr	r3, [sp, #20]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	dd05      	ble.n	800de5a <_dtoa_r+0x82a>
 800de4e:	4631      	mov	r1, r6
 800de50:	461a      	mov	r2, r3
 800de52:	4620      	mov	r0, r4
 800de54:	f000 ffd2 	bl	800edfc <__lshift>
 800de58:	4606      	mov	r6, r0
 800de5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d06e      	beq.n	800df3e <_dtoa_r+0x90e>
 800de60:	ee18 0a10 	vmov	r0, s16
 800de64:	4631      	mov	r1, r6
 800de66:	f001 f839 	bl	800eedc <__mcmp>
 800de6a:	2800      	cmp	r0, #0
 800de6c:	da67      	bge.n	800df3e <_dtoa_r+0x90e>
 800de6e:	9b00      	ldr	r3, [sp, #0]
 800de70:	3b01      	subs	r3, #1
 800de72:	ee18 1a10 	vmov	r1, s16
 800de76:	9300      	str	r3, [sp, #0]
 800de78:	220a      	movs	r2, #10
 800de7a:	2300      	movs	r3, #0
 800de7c:	4620      	mov	r0, r4
 800de7e:	f000 fdc3 	bl	800ea08 <__multadd>
 800de82:	9b08      	ldr	r3, [sp, #32]
 800de84:	ee08 0a10 	vmov	s16, r0
 800de88:	2b00      	cmp	r3, #0
 800de8a:	f000 81b1 	beq.w	800e1f0 <_dtoa_r+0xbc0>
 800de8e:	2300      	movs	r3, #0
 800de90:	4639      	mov	r1, r7
 800de92:	220a      	movs	r2, #10
 800de94:	4620      	mov	r0, r4
 800de96:	f000 fdb7 	bl	800ea08 <__multadd>
 800de9a:	9b02      	ldr	r3, [sp, #8]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	4607      	mov	r7, r0
 800dea0:	f300 808e 	bgt.w	800dfc0 <_dtoa_r+0x990>
 800dea4:	9b06      	ldr	r3, [sp, #24]
 800dea6:	2b02      	cmp	r3, #2
 800dea8:	dc51      	bgt.n	800df4e <_dtoa_r+0x91e>
 800deaa:	e089      	b.n	800dfc0 <_dtoa_r+0x990>
 800deac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800deae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800deb2:	e74b      	b.n	800dd4c <_dtoa_r+0x71c>
 800deb4:	9b03      	ldr	r3, [sp, #12]
 800deb6:	1e5e      	subs	r6, r3, #1
 800deb8:	9b07      	ldr	r3, [sp, #28]
 800deba:	42b3      	cmp	r3, r6
 800debc:	bfbf      	itttt	lt
 800debe:	9b07      	ldrlt	r3, [sp, #28]
 800dec0:	9607      	strlt	r6, [sp, #28]
 800dec2:	1af2      	sublt	r2, r6, r3
 800dec4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800dec6:	bfb6      	itet	lt
 800dec8:	189b      	addlt	r3, r3, r2
 800deca:	1b9e      	subge	r6, r3, r6
 800decc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800dece:	9b03      	ldr	r3, [sp, #12]
 800ded0:	bfb8      	it	lt
 800ded2:	2600      	movlt	r6, #0
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	bfb7      	itett	lt
 800ded8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800dedc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800dee0:	1a9d      	sublt	r5, r3, r2
 800dee2:	2300      	movlt	r3, #0
 800dee4:	e734      	b.n	800dd50 <_dtoa_r+0x720>
 800dee6:	9e07      	ldr	r6, [sp, #28]
 800dee8:	9d04      	ldr	r5, [sp, #16]
 800deea:	9f08      	ldr	r7, [sp, #32]
 800deec:	e73b      	b.n	800dd66 <_dtoa_r+0x736>
 800deee:	9a07      	ldr	r2, [sp, #28]
 800def0:	e767      	b.n	800ddc2 <_dtoa_r+0x792>
 800def2:	9b06      	ldr	r3, [sp, #24]
 800def4:	2b01      	cmp	r3, #1
 800def6:	dc18      	bgt.n	800df2a <_dtoa_r+0x8fa>
 800def8:	f1ba 0f00 	cmp.w	sl, #0
 800defc:	d115      	bne.n	800df2a <_dtoa_r+0x8fa>
 800defe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800df02:	b993      	cbnz	r3, 800df2a <_dtoa_r+0x8fa>
 800df04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800df08:	0d1b      	lsrs	r3, r3, #20
 800df0a:	051b      	lsls	r3, r3, #20
 800df0c:	b183      	cbz	r3, 800df30 <_dtoa_r+0x900>
 800df0e:	9b04      	ldr	r3, [sp, #16]
 800df10:	3301      	adds	r3, #1
 800df12:	9304      	str	r3, [sp, #16]
 800df14:	9b05      	ldr	r3, [sp, #20]
 800df16:	3301      	adds	r3, #1
 800df18:	9305      	str	r3, [sp, #20]
 800df1a:	f04f 0801 	mov.w	r8, #1
 800df1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df20:	2b00      	cmp	r3, #0
 800df22:	f47f af6a 	bne.w	800ddfa <_dtoa_r+0x7ca>
 800df26:	2001      	movs	r0, #1
 800df28:	e76f      	b.n	800de0a <_dtoa_r+0x7da>
 800df2a:	f04f 0800 	mov.w	r8, #0
 800df2e:	e7f6      	b.n	800df1e <_dtoa_r+0x8ee>
 800df30:	4698      	mov	r8, r3
 800df32:	e7f4      	b.n	800df1e <_dtoa_r+0x8ee>
 800df34:	f43f af7d 	beq.w	800de32 <_dtoa_r+0x802>
 800df38:	4618      	mov	r0, r3
 800df3a:	301c      	adds	r0, #28
 800df3c:	e772      	b.n	800de24 <_dtoa_r+0x7f4>
 800df3e:	9b03      	ldr	r3, [sp, #12]
 800df40:	2b00      	cmp	r3, #0
 800df42:	dc37      	bgt.n	800dfb4 <_dtoa_r+0x984>
 800df44:	9b06      	ldr	r3, [sp, #24]
 800df46:	2b02      	cmp	r3, #2
 800df48:	dd34      	ble.n	800dfb4 <_dtoa_r+0x984>
 800df4a:	9b03      	ldr	r3, [sp, #12]
 800df4c:	9302      	str	r3, [sp, #8]
 800df4e:	9b02      	ldr	r3, [sp, #8]
 800df50:	b96b      	cbnz	r3, 800df6e <_dtoa_r+0x93e>
 800df52:	4631      	mov	r1, r6
 800df54:	2205      	movs	r2, #5
 800df56:	4620      	mov	r0, r4
 800df58:	f000 fd56 	bl	800ea08 <__multadd>
 800df5c:	4601      	mov	r1, r0
 800df5e:	4606      	mov	r6, r0
 800df60:	ee18 0a10 	vmov	r0, s16
 800df64:	f000 ffba 	bl	800eedc <__mcmp>
 800df68:	2800      	cmp	r0, #0
 800df6a:	f73f adbb 	bgt.w	800dae4 <_dtoa_r+0x4b4>
 800df6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df70:	9d01      	ldr	r5, [sp, #4]
 800df72:	43db      	mvns	r3, r3
 800df74:	9300      	str	r3, [sp, #0]
 800df76:	f04f 0800 	mov.w	r8, #0
 800df7a:	4631      	mov	r1, r6
 800df7c:	4620      	mov	r0, r4
 800df7e:	f000 fd21 	bl	800e9c4 <_Bfree>
 800df82:	2f00      	cmp	r7, #0
 800df84:	f43f aea4 	beq.w	800dcd0 <_dtoa_r+0x6a0>
 800df88:	f1b8 0f00 	cmp.w	r8, #0
 800df8c:	d005      	beq.n	800df9a <_dtoa_r+0x96a>
 800df8e:	45b8      	cmp	r8, r7
 800df90:	d003      	beq.n	800df9a <_dtoa_r+0x96a>
 800df92:	4641      	mov	r1, r8
 800df94:	4620      	mov	r0, r4
 800df96:	f000 fd15 	bl	800e9c4 <_Bfree>
 800df9a:	4639      	mov	r1, r7
 800df9c:	4620      	mov	r0, r4
 800df9e:	f000 fd11 	bl	800e9c4 <_Bfree>
 800dfa2:	e695      	b.n	800dcd0 <_dtoa_r+0x6a0>
 800dfa4:	2600      	movs	r6, #0
 800dfa6:	4637      	mov	r7, r6
 800dfa8:	e7e1      	b.n	800df6e <_dtoa_r+0x93e>
 800dfaa:	9700      	str	r7, [sp, #0]
 800dfac:	4637      	mov	r7, r6
 800dfae:	e599      	b.n	800dae4 <_dtoa_r+0x4b4>
 800dfb0:	40240000 	.word	0x40240000
 800dfb4:	9b08      	ldr	r3, [sp, #32]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	f000 80ca 	beq.w	800e150 <_dtoa_r+0xb20>
 800dfbc:	9b03      	ldr	r3, [sp, #12]
 800dfbe:	9302      	str	r3, [sp, #8]
 800dfc0:	2d00      	cmp	r5, #0
 800dfc2:	dd05      	ble.n	800dfd0 <_dtoa_r+0x9a0>
 800dfc4:	4639      	mov	r1, r7
 800dfc6:	462a      	mov	r2, r5
 800dfc8:	4620      	mov	r0, r4
 800dfca:	f000 ff17 	bl	800edfc <__lshift>
 800dfce:	4607      	mov	r7, r0
 800dfd0:	f1b8 0f00 	cmp.w	r8, #0
 800dfd4:	d05b      	beq.n	800e08e <_dtoa_r+0xa5e>
 800dfd6:	6879      	ldr	r1, [r7, #4]
 800dfd8:	4620      	mov	r0, r4
 800dfda:	f000 fcb3 	bl	800e944 <_Balloc>
 800dfde:	4605      	mov	r5, r0
 800dfe0:	b928      	cbnz	r0, 800dfee <_dtoa_r+0x9be>
 800dfe2:	4b87      	ldr	r3, [pc, #540]	; (800e200 <_dtoa_r+0xbd0>)
 800dfe4:	4602      	mov	r2, r0
 800dfe6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800dfea:	f7ff bb3b 	b.w	800d664 <_dtoa_r+0x34>
 800dfee:	693a      	ldr	r2, [r7, #16]
 800dff0:	3202      	adds	r2, #2
 800dff2:	0092      	lsls	r2, r2, #2
 800dff4:	f107 010c 	add.w	r1, r7, #12
 800dff8:	300c      	adds	r0, #12
 800dffa:	f000 fc95 	bl	800e928 <memcpy>
 800dffe:	2201      	movs	r2, #1
 800e000:	4629      	mov	r1, r5
 800e002:	4620      	mov	r0, r4
 800e004:	f000 fefa 	bl	800edfc <__lshift>
 800e008:	9b01      	ldr	r3, [sp, #4]
 800e00a:	f103 0901 	add.w	r9, r3, #1
 800e00e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e012:	4413      	add	r3, r2
 800e014:	9305      	str	r3, [sp, #20]
 800e016:	f00a 0301 	and.w	r3, sl, #1
 800e01a:	46b8      	mov	r8, r7
 800e01c:	9304      	str	r3, [sp, #16]
 800e01e:	4607      	mov	r7, r0
 800e020:	4631      	mov	r1, r6
 800e022:	ee18 0a10 	vmov	r0, s16
 800e026:	f7ff fa77 	bl	800d518 <quorem>
 800e02a:	4641      	mov	r1, r8
 800e02c:	9002      	str	r0, [sp, #8]
 800e02e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e032:	ee18 0a10 	vmov	r0, s16
 800e036:	f000 ff51 	bl	800eedc <__mcmp>
 800e03a:	463a      	mov	r2, r7
 800e03c:	9003      	str	r0, [sp, #12]
 800e03e:	4631      	mov	r1, r6
 800e040:	4620      	mov	r0, r4
 800e042:	f000 ff67 	bl	800ef14 <__mdiff>
 800e046:	68c2      	ldr	r2, [r0, #12]
 800e048:	f109 3bff 	add.w	fp, r9, #4294967295
 800e04c:	4605      	mov	r5, r0
 800e04e:	bb02      	cbnz	r2, 800e092 <_dtoa_r+0xa62>
 800e050:	4601      	mov	r1, r0
 800e052:	ee18 0a10 	vmov	r0, s16
 800e056:	f000 ff41 	bl	800eedc <__mcmp>
 800e05a:	4602      	mov	r2, r0
 800e05c:	4629      	mov	r1, r5
 800e05e:	4620      	mov	r0, r4
 800e060:	9207      	str	r2, [sp, #28]
 800e062:	f000 fcaf 	bl	800e9c4 <_Bfree>
 800e066:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e06a:	ea43 0102 	orr.w	r1, r3, r2
 800e06e:	9b04      	ldr	r3, [sp, #16]
 800e070:	430b      	orrs	r3, r1
 800e072:	464d      	mov	r5, r9
 800e074:	d10f      	bne.n	800e096 <_dtoa_r+0xa66>
 800e076:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e07a:	d02a      	beq.n	800e0d2 <_dtoa_r+0xaa2>
 800e07c:	9b03      	ldr	r3, [sp, #12]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	dd02      	ble.n	800e088 <_dtoa_r+0xa58>
 800e082:	9b02      	ldr	r3, [sp, #8]
 800e084:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e088:	f88b a000 	strb.w	sl, [fp]
 800e08c:	e775      	b.n	800df7a <_dtoa_r+0x94a>
 800e08e:	4638      	mov	r0, r7
 800e090:	e7ba      	b.n	800e008 <_dtoa_r+0x9d8>
 800e092:	2201      	movs	r2, #1
 800e094:	e7e2      	b.n	800e05c <_dtoa_r+0xa2c>
 800e096:	9b03      	ldr	r3, [sp, #12]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	db04      	blt.n	800e0a6 <_dtoa_r+0xa76>
 800e09c:	9906      	ldr	r1, [sp, #24]
 800e09e:	430b      	orrs	r3, r1
 800e0a0:	9904      	ldr	r1, [sp, #16]
 800e0a2:	430b      	orrs	r3, r1
 800e0a4:	d122      	bne.n	800e0ec <_dtoa_r+0xabc>
 800e0a6:	2a00      	cmp	r2, #0
 800e0a8:	ddee      	ble.n	800e088 <_dtoa_r+0xa58>
 800e0aa:	ee18 1a10 	vmov	r1, s16
 800e0ae:	2201      	movs	r2, #1
 800e0b0:	4620      	mov	r0, r4
 800e0b2:	f000 fea3 	bl	800edfc <__lshift>
 800e0b6:	4631      	mov	r1, r6
 800e0b8:	ee08 0a10 	vmov	s16, r0
 800e0bc:	f000 ff0e 	bl	800eedc <__mcmp>
 800e0c0:	2800      	cmp	r0, #0
 800e0c2:	dc03      	bgt.n	800e0cc <_dtoa_r+0xa9c>
 800e0c4:	d1e0      	bne.n	800e088 <_dtoa_r+0xa58>
 800e0c6:	f01a 0f01 	tst.w	sl, #1
 800e0ca:	d0dd      	beq.n	800e088 <_dtoa_r+0xa58>
 800e0cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e0d0:	d1d7      	bne.n	800e082 <_dtoa_r+0xa52>
 800e0d2:	2339      	movs	r3, #57	; 0x39
 800e0d4:	f88b 3000 	strb.w	r3, [fp]
 800e0d8:	462b      	mov	r3, r5
 800e0da:	461d      	mov	r5, r3
 800e0dc:	3b01      	subs	r3, #1
 800e0de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e0e2:	2a39      	cmp	r2, #57	; 0x39
 800e0e4:	d071      	beq.n	800e1ca <_dtoa_r+0xb9a>
 800e0e6:	3201      	adds	r2, #1
 800e0e8:	701a      	strb	r2, [r3, #0]
 800e0ea:	e746      	b.n	800df7a <_dtoa_r+0x94a>
 800e0ec:	2a00      	cmp	r2, #0
 800e0ee:	dd07      	ble.n	800e100 <_dtoa_r+0xad0>
 800e0f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e0f4:	d0ed      	beq.n	800e0d2 <_dtoa_r+0xaa2>
 800e0f6:	f10a 0301 	add.w	r3, sl, #1
 800e0fa:	f88b 3000 	strb.w	r3, [fp]
 800e0fe:	e73c      	b.n	800df7a <_dtoa_r+0x94a>
 800e100:	9b05      	ldr	r3, [sp, #20]
 800e102:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e106:	4599      	cmp	r9, r3
 800e108:	d047      	beq.n	800e19a <_dtoa_r+0xb6a>
 800e10a:	ee18 1a10 	vmov	r1, s16
 800e10e:	2300      	movs	r3, #0
 800e110:	220a      	movs	r2, #10
 800e112:	4620      	mov	r0, r4
 800e114:	f000 fc78 	bl	800ea08 <__multadd>
 800e118:	45b8      	cmp	r8, r7
 800e11a:	ee08 0a10 	vmov	s16, r0
 800e11e:	f04f 0300 	mov.w	r3, #0
 800e122:	f04f 020a 	mov.w	r2, #10
 800e126:	4641      	mov	r1, r8
 800e128:	4620      	mov	r0, r4
 800e12a:	d106      	bne.n	800e13a <_dtoa_r+0xb0a>
 800e12c:	f000 fc6c 	bl	800ea08 <__multadd>
 800e130:	4680      	mov	r8, r0
 800e132:	4607      	mov	r7, r0
 800e134:	f109 0901 	add.w	r9, r9, #1
 800e138:	e772      	b.n	800e020 <_dtoa_r+0x9f0>
 800e13a:	f000 fc65 	bl	800ea08 <__multadd>
 800e13e:	4639      	mov	r1, r7
 800e140:	4680      	mov	r8, r0
 800e142:	2300      	movs	r3, #0
 800e144:	220a      	movs	r2, #10
 800e146:	4620      	mov	r0, r4
 800e148:	f000 fc5e 	bl	800ea08 <__multadd>
 800e14c:	4607      	mov	r7, r0
 800e14e:	e7f1      	b.n	800e134 <_dtoa_r+0xb04>
 800e150:	9b03      	ldr	r3, [sp, #12]
 800e152:	9302      	str	r3, [sp, #8]
 800e154:	9d01      	ldr	r5, [sp, #4]
 800e156:	ee18 0a10 	vmov	r0, s16
 800e15a:	4631      	mov	r1, r6
 800e15c:	f7ff f9dc 	bl	800d518 <quorem>
 800e160:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e164:	9b01      	ldr	r3, [sp, #4]
 800e166:	f805 ab01 	strb.w	sl, [r5], #1
 800e16a:	1aea      	subs	r2, r5, r3
 800e16c:	9b02      	ldr	r3, [sp, #8]
 800e16e:	4293      	cmp	r3, r2
 800e170:	dd09      	ble.n	800e186 <_dtoa_r+0xb56>
 800e172:	ee18 1a10 	vmov	r1, s16
 800e176:	2300      	movs	r3, #0
 800e178:	220a      	movs	r2, #10
 800e17a:	4620      	mov	r0, r4
 800e17c:	f000 fc44 	bl	800ea08 <__multadd>
 800e180:	ee08 0a10 	vmov	s16, r0
 800e184:	e7e7      	b.n	800e156 <_dtoa_r+0xb26>
 800e186:	9b02      	ldr	r3, [sp, #8]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	bfc8      	it	gt
 800e18c:	461d      	movgt	r5, r3
 800e18e:	9b01      	ldr	r3, [sp, #4]
 800e190:	bfd8      	it	le
 800e192:	2501      	movle	r5, #1
 800e194:	441d      	add	r5, r3
 800e196:	f04f 0800 	mov.w	r8, #0
 800e19a:	ee18 1a10 	vmov	r1, s16
 800e19e:	2201      	movs	r2, #1
 800e1a0:	4620      	mov	r0, r4
 800e1a2:	f000 fe2b 	bl	800edfc <__lshift>
 800e1a6:	4631      	mov	r1, r6
 800e1a8:	ee08 0a10 	vmov	s16, r0
 800e1ac:	f000 fe96 	bl	800eedc <__mcmp>
 800e1b0:	2800      	cmp	r0, #0
 800e1b2:	dc91      	bgt.n	800e0d8 <_dtoa_r+0xaa8>
 800e1b4:	d102      	bne.n	800e1bc <_dtoa_r+0xb8c>
 800e1b6:	f01a 0f01 	tst.w	sl, #1
 800e1ba:	d18d      	bne.n	800e0d8 <_dtoa_r+0xaa8>
 800e1bc:	462b      	mov	r3, r5
 800e1be:	461d      	mov	r5, r3
 800e1c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e1c4:	2a30      	cmp	r2, #48	; 0x30
 800e1c6:	d0fa      	beq.n	800e1be <_dtoa_r+0xb8e>
 800e1c8:	e6d7      	b.n	800df7a <_dtoa_r+0x94a>
 800e1ca:	9a01      	ldr	r2, [sp, #4]
 800e1cc:	429a      	cmp	r2, r3
 800e1ce:	d184      	bne.n	800e0da <_dtoa_r+0xaaa>
 800e1d0:	9b00      	ldr	r3, [sp, #0]
 800e1d2:	3301      	adds	r3, #1
 800e1d4:	9300      	str	r3, [sp, #0]
 800e1d6:	2331      	movs	r3, #49	; 0x31
 800e1d8:	7013      	strb	r3, [r2, #0]
 800e1da:	e6ce      	b.n	800df7a <_dtoa_r+0x94a>
 800e1dc:	4b09      	ldr	r3, [pc, #36]	; (800e204 <_dtoa_r+0xbd4>)
 800e1de:	f7ff ba95 	b.w	800d70c <_dtoa_r+0xdc>
 800e1e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	f47f aa6e 	bne.w	800d6c6 <_dtoa_r+0x96>
 800e1ea:	4b07      	ldr	r3, [pc, #28]	; (800e208 <_dtoa_r+0xbd8>)
 800e1ec:	f7ff ba8e 	b.w	800d70c <_dtoa_r+0xdc>
 800e1f0:	9b02      	ldr	r3, [sp, #8]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	dcae      	bgt.n	800e154 <_dtoa_r+0xb24>
 800e1f6:	9b06      	ldr	r3, [sp, #24]
 800e1f8:	2b02      	cmp	r3, #2
 800e1fa:	f73f aea8 	bgt.w	800df4e <_dtoa_r+0x91e>
 800e1fe:	e7a9      	b.n	800e154 <_dtoa_r+0xb24>
 800e200:	080105f0 	.word	0x080105f0
 800e204:	080103f4 	.word	0x080103f4
 800e208:	08010571 	.word	0x08010571

0800e20c <rshift>:
 800e20c:	6903      	ldr	r3, [r0, #16]
 800e20e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e212:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e216:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e21a:	f100 0414 	add.w	r4, r0, #20
 800e21e:	dd45      	ble.n	800e2ac <rshift+0xa0>
 800e220:	f011 011f 	ands.w	r1, r1, #31
 800e224:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e228:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e22c:	d10c      	bne.n	800e248 <rshift+0x3c>
 800e22e:	f100 0710 	add.w	r7, r0, #16
 800e232:	4629      	mov	r1, r5
 800e234:	42b1      	cmp	r1, r6
 800e236:	d334      	bcc.n	800e2a2 <rshift+0x96>
 800e238:	1a9b      	subs	r3, r3, r2
 800e23a:	009b      	lsls	r3, r3, #2
 800e23c:	1eea      	subs	r2, r5, #3
 800e23e:	4296      	cmp	r6, r2
 800e240:	bf38      	it	cc
 800e242:	2300      	movcc	r3, #0
 800e244:	4423      	add	r3, r4
 800e246:	e015      	b.n	800e274 <rshift+0x68>
 800e248:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e24c:	f1c1 0820 	rsb	r8, r1, #32
 800e250:	40cf      	lsrs	r7, r1
 800e252:	f105 0e04 	add.w	lr, r5, #4
 800e256:	46a1      	mov	r9, r4
 800e258:	4576      	cmp	r6, lr
 800e25a:	46f4      	mov	ip, lr
 800e25c:	d815      	bhi.n	800e28a <rshift+0x7e>
 800e25e:	1a9a      	subs	r2, r3, r2
 800e260:	0092      	lsls	r2, r2, #2
 800e262:	3a04      	subs	r2, #4
 800e264:	3501      	adds	r5, #1
 800e266:	42ae      	cmp	r6, r5
 800e268:	bf38      	it	cc
 800e26a:	2200      	movcc	r2, #0
 800e26c:	18a3      	adds	r3, r4, r2
 800e26e:	50a7      	str	r7, [r4, r2]
 800e270:	b107      	cbz	r7, 800e274 <rshift+0x68>
 800e272:	3304      	adds	r3, #4
 800e274:	1b1a      	subs	r2, r3, r4
 800e276:	42a3      	cmp	r3, r4
 800e278:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e27c:	bf08      	it	eq
 800e27e:	2300      	moveq	r3, #0
 800e280:	6102      	str	r2, [r0, #16]
 800e282:	bf08      	it	eq
 800e284:	6143      	streq	r3, [r0, #20]
 800e286:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e28a:	f8dc c000 	ldr.w	ip, [ip]
 800e28e:	fa0c fc08 	lsl.w	ip, ip, r8
 800e292:	ea4c 0707 	orr.w	r7, ip, r7
 800e296:	f849 7b04 	str.w	r7, [r9], #4
 800e29a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e29e:	40cf      	lsrs	r7, r1
 800e2a0:	e7da      	b.n	800e258 <rshift+0x4c>
 800e2a2:	f851 cb04 	ldr.w	ip, [r1], #4
 800e2a6:	f847 cf04 	str.w	ip, [r7, #4]!
 800e2aa:	e7c3      	b.n	800e234 <rshift+0x28>
 800e2ac:	4623      	mov	r3, r4
 800e2ae:	e7e1      	b.n	800e274 <rshift+0x68>

0800e2b0 <__hexdig_fun>:
 800e2b0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e2b4:	2b09      	cmp	r3, #9
 800e2b6:	d802      	bhi.n	800e2be <__hexdig_fun+0xe>
 800e2b8:	3820      	subs	r0, #32
 800e2ba:	b2c0      	uxtb	r0, r0
 800e2bc:	4770      	bx	lr
 800e2be:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e2c2:	2b05      	cmp	r3, #5
 800e2c4:	d801      	bhi.n	800e2ca <__hexdig_fun+0x1a>
 800e2c6:	3847      	subs	r0, #71	; 0x47
 800e2c8:	e7f7      	b.n	800e2ba <__hexdig_fun+0xa>
 800e2ca:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e2ce:	2b05      	cmp	r3, #5
 800e2d0:	d801      	bhi.n	800e2d6 <__hexdig_fun+0x26>
 800e2d2:	3827      	subs	r0, #39	; 0x27
 800e2d4:	e7f1      	b.n	800e2ba <__hexdig_fun+0xa>
 800e2d6:	2000      	movs	r0, #0
 800e2d8:	4770      	bx	lr
	...

0800e2dc <__gethex>:
 800e2dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2e0:	ed2d 8b02 	vpush	{d8}
 800e2e4:	b089      	sub	sp, #36	; 0x24
 800e2e6:	ee08 0a10 	vmov	s16, r0
 800e2ea:	9304      	str	r3, [sp, #16]
 800e2ec:	4bb4      	ldr	r3, [pc, #720]	; (800e5c0 <__gethex+0x2e4>)
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	9301      	str	r3, [sp, #4]
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	468b      	mov	fp, r1
 800e2f6:	4690      	mov	r8, r2
 800e2f8:	f7f1 ff8a 	bl	8000210 <strlen>
 800e2fc:	9b01      	ldr	r3, [sp, #4]
 800e2fe:	f8db 2000 	ldr.w	r2, [fp]
 800e302:	4403      	add	r3, r0
 800e304:	4682      	mov	sl, r0
 800e306:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e30a:	9305      	str	r3, [sp, #20]
 800e30c:	1c93      	adds	r3, r2, #2
 800e30e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e312:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e316:	32fe      	adds	r2, #254	; 0xfe
 800e318:	18d1      	adds	r1, r2, r3
 800e31a:	461f      	mov	r7, r3
 800e31c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e320:	9100      	str	r1, [sp, #0]
 800e322:	2830      	cmp	r0, #48	; 0x30
 800e324:	d0f8      	beq.n	800e318 <__gethex+0x3c>
 800e326:	f7ff ffc3 	bl	800e2b0 <__hexdig_fun>
 800e32a:	4604      	mov	r4, r0
 800e32c:	2800      	cmp	r0, #0
 800e32e:	d13a      	bne.n	800e3a6 <__gethex+0xca>
 800e330:	9901      	ldr	r1, [sp, #4]
 800e332:	4652      	mov	r2, sl
 800e334:	4638      	mov	r0, r7
 800e336:	f001 fa33 	bl	800f7a0 <strncmp>
 800e33a:	4605      	mov	r5, r0
 800e33c:	2800      	cmp	r0, #0
 800e33e:	d168      	bne.n	800e412 <__gethex+0x136>
 800e340:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e344:	eb07 060a 	add.w	r6, r7, sl
 800e348:	f7ff ffb2 	bl	800e2b0 <__hexdig_fun>
 800e34c:	2800      	cmp	r0, #0
 800e34e:	d062      	beq.n	800e416 <__gethex+0x13a>
 800e350:	4633      	mov	r3, r6
 800e352:	7818      	ldrb	r0, [r3, #0]
 800e354:	2830      	cmp	r0, #48	; 0x30
 800e356:	461f      	mov	r7, r3
 800e358:	f103 0301 	add.w	r3, r3, #1
 800e35c:	d0f9      	beq.n	800e352 <__gethex+0x76>
 800e35e:	f7ff ffa7 	bl	800e2b0 <__hexdig_fun>
 800e362:	2301      	movs	r3, #1
 800e364:	fab0 f480 	clz	r4, r0
 800e368:	0964      	lsrs	r4, r4, #5
 800e36a:	4635      	mov	r5, r6
 800e36c:	9300      	str	r3, [sp, #0]
 800e36e:	463a      	mov	r2, r7
 800e370:	4616      	mov	r6, r2
 800e372:	3201      	adds	r2, #1
 800e374:	7830      	ldrb	r0, [r6, #0]
 800e376:	f7ff ff9b 	bl	800e2b0 <__hexdig_fun>
 800e37a:	2800      	cmp	r0, #0
 800e37c:	d1f8      	bne.n	800e370 <__gethex+0x94>
 800e37e:	9901      	ldr	r1, [sp, #4]
 800e380:	4652      	mov	r2, sl
 800e382:	4630      	mov	r0, r6
 800e384:	f001 fa0c 	bl	800f7a0 <strncmp>
 800e388:	b980      	cbnz	r0, 800e3ac <__gethex+0xd0>
 800e38a:	b94d      	cbnz	r5, 800e3a0 <__gethex+0xc4>
 800e38c:	eb06 050a 	add.w	r5, r6, sl
 800e390:	462a      	mov	r2, r5
 800e392:	4616      	mov	r6, r2
 800e394:	3201      	adds	r2, #1
 800e396:	7830      	ldrb	r0, [r6, #0]
 800e398:	f7ff ff8a 	bl	800e2b0 <__hexdig_fun>
 800e39c:	2800      	cmp	r0, #0
 800e39e:	d1f8      	bne.n	800e392 <__gethex+0xb6>
 800e3a0:	1bad      	subs	r5, r5, r6
 800e3a2:	00ad      	lsls	r5, r5, #2
 800e3a4:	e004      	b.n	800e3b0 <__gethex+0xd4>
 800e3a6:	2400      	movs	r4, #0
 800e3a8:	4625      	mov	r5, r4
 800e3aa:	e7e0      	b.n	800e36e <__gethex+0x92>
 800e3ac:	2d00      	cmp	r5, #0
 800e3ae:	d1f7      	bne.n	800e3a0 <__gethex+0xc4>
 800e3b0:	7833      	ldrb	r3, [r6, #0]
 800e3b2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e3b6:	2b50      	cmp	r3, #80	; 0x50
 800e3b8:	d13b      	bne.n	800e432 <__gethex+0x156>
 800e3ba:	7873      	ldrb	r3, [r6, #1]
 800e3bc:	2b2b      	cmp	r3, #43	; 0x2b
 800e3be:	d02c      	beq.n	800e41a <__gethex+0x13e>
 800e3c0:	2b2d      	cmp	r3, #45	; 0x2d
 800e3c2:	d02e      	beq.n	800e422 <__gethex+0x146>
 800e3c4:	1c71      	adds	r1, r6, #1
 800e3c6:	f04f 0900 	mov.w	r9, #0
 800e3ca:	7808      	ldrb	r0, [r1, #0]
 800e3cc:	f7ff ff70 	bl	800e2b0 <__hexdig_fun>
 800e3d0:	1e43      	subs	r3, r0, #1
 800e3d2:	b2db      	uxtb	r3, r3
 800e3d4:	2b18      	cmp	r3, #24
 800e3d6:	d82c      	bhi.n	800e432 <__gethex+0x156>
 800e3d8:	f1a0 0210 	sub.w	r2, r0, #16
 800e3dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e3e0:	f7ff ff66 	bl	800e2b0 <__hexdig_fun>
 800e3e4:	1e43      	subs	r3, r0, #1
 800e3e6:	b2db      	uxtb	r3, r3
 800e3e8:	2b18      	cmp	r3, #24
 800e3ea:	d91d      	bls.n	800e428 <__gethex+0x14c>
 800e3ec:	f1b9 0f00 	cmp.w	r9, #0
 800e3f0:	d000      	beq.n	800e3f4 <__gethex+0x118>
 800e3f2:	4252      	negs	r2, r2
 800e3f4:	4415      	add	r5, r2
 800e3f6:	f8cb 1000 	str.w	r1, [fp]
 800e3fa:	b1e4      	cbz	r4, 800e436 <__gethex+0x15a>
 800e3fc:	9b00      	ldr	r3, [sp, #0]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	bf14      	ite	ne
 800e402:	2700      	movne	r7, #0
 800e404:	2706      	moveq	r7, #6
 800e406:	4638      	mov	r0, r7
 800e408:	b009      	add	sp, #36	; 0x24
 800e40a:	ecbd 8b02 	vpop	{d8}
 800e40e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e412:	463e      	mov	r6, r7
 800e414:	4625      	mov	r5, r4
 800e416:	2401      	movs	r4, #1
 800e418:	e7ca      	b.n	800e3b0 <__gethex+0xd4>
 800e41a:	f04f 0900 	mov.w	r9, #0
 800e41e:	1cb1      	adds	r1, r6, #2
 800e420:	e7d3      	b.n	800e3ca <__gethex+0xee>
 800e422:	f04f 0901 	mov.w	r9, #1
 800e426:	e7fa      	b.n	800e41e <__gethex+0x142>
 800e428:	230a      	movs	r3, #10
 800e42a:	fb03 0202 	mla	r2, r3, r2, r0
 800e42e:	3a10      	subs	r2, #16
 800e430:	e7d4      	b.n	800e3dc <__gethex+0x100>
 800e432:	4631      	mov	r1, r6
 800e434:	e7df      	b.n	800e3f6 <__gethex+0x11a>
 800e436:	1bf3      	subs	r3, r6, r7
 800e438:	3b01      	subs	r3, #1
 800e43a:	4621      	mov	r1, r4
 800e43c:	2b07      	cmp	r3, #7
 800e43e:	dc0b      	bgt.n	800e458 <__gethex+0x17c>
 800e440:	ee18 0a10 	vmov	r0, s16
 800e444:	f000 fa7e 	bl	800e944 <_Balloc>
 800e448:	4604      	mov	r4, r0
 800e44a:	b940      	cbnz	r0, 800e45e <__gethex+0x182>
 800e44c:	4b5d      	ldr	r3, [pc, #372]	; (800e5c4 <__gethex+0x2e8>)
 800e44e:	4602      	mov	r2, r0
 800e450:	21de      	movs	r1, #222	; 0xde
 800e452:	485d      	ldr	r0, [pc, #372]	; (800e5c8 <__gethex+0x2ec>)
 800e454:	f001 f9c6 	bl	800f7e4 <__assert_func>
 800e458:	3101      	adds	r1, #1
 800e45a:	105b      	asrs	r3, r3, #1
 800e45c:	e7ee      	b.n	800e43c <__gethex+0x160>
 800e45e:	f100 0914 	add.w	r9, r0, #20
 800e462:	f04f 0b00 	mov.w	fp, #0
 800e466:	f1ca 0301 	rsb	r3, sl, #1
 800e46a:	f8cd 9008 	str.w	r9, [sp, #8]
 800e46e:	f8cd b000 	str.w	fp, [sp]
 800e472:	9306      	str	r3, [sp, #24]
 800e474:	42b7      	cmp	r7, r6
 800e476:	d340      	bcc.n	800e4fa <__gethex+0x21e>
 800e478:	9802      	ldr	r0, [sp, #8]
 800e47a:	9b00      	ldr	r3, [sp, #0]
 800e47c:	f840 3b04 	str.w	r3, [r0], #4
 800e480:	eba0 0009 	sub.w	r0, r0, r9
 800e484:	1080      	asrs	r0, r0, #2
 800e486:	0146      	lsls	r6, r0, #5
 800e488:	6120      	str	r0, [r4, #16]
 800e48a:	4618      	mov	r0, r3
 800e48c:	f000 fb4c 	bl	800eb28 <__hi0bits>
 800e490:	1a30      	subs	r0, r6, r0
 800e492:	f8d8 6000 	ldr.w	r6, [r8]
 800e496:	42b0      	cmp	r0, r6
 800e498:	dd63      	ble.n	800e562 <__gethex+0x286>
 800e49a:	1b87      	subs	r7, r0, r6
 800e49c:	4639      	mov	r1, r7
 800e49e:	4620      	mov	r0, r4
 800e4a0:	f000 fef0 	bl	800f284 <__any_on>
 800e4a4:	4682      	mov	sl, r0
 800e4a6:	b1a8      	cbz	r0, 800e4d4 <__gethex+0x1f8>
 800e4a8:	1e7b      	subs	r3, r7, #1
 800e4aa:	1159      	asrs	r1, r3, #5
 800e4ac:	f003 021f 	and.w	r2, r3, #31
 800e4b0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e4b4:	f04f 0a01 	mov.w	sl, #1
 800e4b8:	fa0a f202 	lsl.w	r2, sl, r2
 800e4bc:	420a      	tst	r2, r1
 800e4be:	d009      	beq.n	800e4d4 <__gethex+0x1f8>
 800e4c0:	4553      	cmp	r3, sl
 800e4c2:	dd05      	ble.n	800e4d0 <__gethex+0x1f4>
 800e4c4:	1eb9      	subs	r1, r7, #2
 800e4c6:	4620      	mov	r0, r4
 800e4c8:	f000 fedc 	bl	800f284 <__any_on>
 800e4cc:	2800      	cmp	r0, #0
 800e4ce:	d145      	bne.n	800e55c <__gethex+0x280>
 800e4d0:	f04f 0a02 	mov.w	sl, #2
 800e4d4:	4639      	mov	r1, r7
 800e4d6:	4620      	mov	r0, r4
 800e4d8:	f7ff fe98 	bl	800e20c <rshift>
 800e4dc:	443d      	add	r5, r7
 800e4de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e4e2:	42ab      	cmp	r3, r5
 800e4e4:	da4c      	bge.n	800e580 <__gethex+0x2a4>
 800e4e6:	ee18 0a10 	vmov	r0, s16
 800e4ea:	4621      	mov	r1, r4
 800e4ec:	f000 fa6a 	bl	800e9c4 <_Bfree>
 800e4f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	6013      	str	r3, [r2, #0]
 800e4f6:	27a3      	movs	r7, #163	; 0xa3
 800e4f8:	e785      	b.n	800e406 <__gethex+0x12a>
 800e4fa:	1e73      	subs	r3, r6, #1
 800e4fc:	9a05      	ldr	r2, [sp, #20]
 800e4fe:	9303      	str	r3, [sp, #12]
 800e500:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e504:	4293      	cmp	r3, r2
 800e506:	d019      	beq.n	800e53c <__gethex+0x260>
 800e508:	f1bb 0f20 	cmp.w	fp, #32
 800e50c:	d107      	bne.n	800e51e <__gethex+0x242>
 800e50e:	9b02      	ldr	r3, [sp, #8]
 800e510:	9a00      	ldr	r2, [sp, #0]
 800e512:	f843 2b04 	str.w	r2, [r3], #4
 800e516:	9302      	str	r3, [sp, #8]
 800e518:	2300      	movs	r3, #0
 800e51a:	9300      	str	r3, [sp, #0]
 800e51c:	469b      	mov	fp, r3
 800e51e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e522:	f7ff fec5 	bl	800e2b0 <__hexdig_fun>
 800e526:	9b00      	ldr	r3, [sp, #0]
 800e528:	f000 000f 	and.w	r0, r0, #15
 800e52c:	fa00 f00b 	lsl.w	r0, r0, fp
 800e530:	4303      	orrs	r3, r0
 800e532:	9300      	str	r3, [sp, #0]
 800e534:	f10b 0b04 	add.w	fp, fp, #4
 800e538:	9b03      	ldr	r3, [sp, #12]
 800e53a:	e00d      	b.n	800e558 <__gethex+0x27c>
 800e53c:	9b03      	ldr	r3, [sp, #12]
 800e53e:	9a06      	ldr	r2, [sp, #24]
 800e540:	4413      	add	r3, r2
 800e542:	42bb      	cmp	r3, r7
 800e544:	d3e0      	bcc.n	800e508 <__gethex+0x22c>
 800e546:	4618      	mov	r0, r3
 800e548:	9901      	ldr	r1, [sp, #4]
 800e54a:	9307      	str	r3, [sp, #28]
 800e54c:	4652      	mov	r2, sl
 800e54e:	f001 f927 	bl	800f7a0 <strncmp>
 800e552:	9b07      	ldr	r3, [sp, #28]
 800e554:	2800      	cmp	r0, #0
 800e556:	d1d7      	bne.n	800e508 <__gethex+0x22c>
 800e558:	461e      	mov	r6, r3
 800e55a:	e78b      	b.n	800e474 <__gethex+0x198>
 800e55c:	f04f 0a03 	mov.w	sl, #3
 800e560:	e7b8      	b.n	800e4d4 <__gethex+0x1f8>
 800e562:	da0a      	bge.n	800e57a <__gethex+0x29e>
 800e564:	1a37      	subs	r7, r6, r0
 800e566:	4621      	mov	r1, r4
 800e568:	ee18 0a10 	vmov	r0, s16
 800e56c:	463a      	mov	r2, r7
 800e56e:	f000 fc45 	bl	800edfc <__lshift>
 800e572:	1bed      	subs	r5, r5, r7
 800e574:	4604      	mov	r4, r0
 800e576:	f100 0914 	add.w	r9, r0, #20
 800e57a:	f04f 0a00 	mov.w	sl, #0
 800e57e:	e7ae      	b.n	800e4de <__gethex+0x202>
 800e580:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e584:	42a8      	cmp	r0, r5
 800e586:	dd72      	ble.n	800e66e <__gethex+0x392>
 800e588:	1b45      	subs	r5, r0, r5
 800e58a:	42ae      	cmp	r6, r5
 800e58c:	dc36      	bgt.n	800e5fc <__gethex+0x320>
 800e58e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e592:	2b02      	cmp	r3, #2
 800e594:	d02a      	beq.n	800e5ec <__gethex+0x310>
 800e596:	2b03      	cmp	r3, #3
 800e598:	d02c      	beq.n	800e5f4 <__gethex+0x318>
 800e59a:	2b01      	cmp	r3, #1
 800e59c:	d11c      	bne.n	800e5d8 <__gethex+0x2fc>
 800e59e:	42ae      	cmp	r6, r5
 800e5a0:	d11a      	bne.n	800e5d8 <__gethex+0x2fc>
 800e5a2:	2e01      	cmp	r6, #1
 800e5a4:	d112      	bne.n	800e5cc <__gethex+0x2f0>
 800e5a6:	9a04      	ldr	r2, [sp, #16]
 800e5a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e5ac:	6013      	str	r3, [r2, #0]
 800e5ae:	2301      	movs	r3, #1
 800e5b0:	6123      	str	r3, [r4, #16]
 800e5b2:	f8c9 3000 	str.w	r3, [r9]
 800e5b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e5b8:	2762      	movs	r7, #98	; 0x62
 800e5ba:	601c      	str	r4, [r3, #0]
 800e5bc:	e723      	b.n	800e406 <__gethex+0x12a>
 800e5be:	bf00      	nop
 800e5c0:	08010668 	.word	0x08010668
 800e5c4:	080105f0 	.word	0x080105f0
 800e5c8:	08010601 	.word	0x08010601
 800e5cc:	1e71      	subs	r1, r6, #1
 800e5ce:	4620      	mov	r0, r4
 800e5d0:	f000 fe58 	bl	800f284 <__any_on>
 800e5d4:	2800      	cmp	r0, #0
 800e5d6:	d1e6      	bne.n	800e5a6 <__gethex+0x2ca>
 800e5d8:	ee18 0a10 	vmov	r0, s16
 800e5dc:	4621      	mov	r1, r4
 800e5de:	f000 f9f1 	bl	800e9c4 <_Bfree>
 800e5e2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	6013      	str	r3, [r2, #0]
 800e5e8:	2750      	movs	r7, #80	; 0x50
 800e5ea:	e70c      	b.n	800e406 <__gethex+0x12a>
 800e5ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d1f2      	bne.n	800e5d8 <__gethex+0x2fc>
 800e5f2:	e7d8      	b.n	800e5a6 <__gethex+0x2ca>
 800e5f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d1d5      	bne.n	800e5a6 <__gethex+0x2ca>
 800e5fa:	e7ed      	b.n	800e5d8 <__gethex+0x2fc>
 800e5fc:	1e6f      	subs	r7, r5, #1
 800e5fe:	f1ba 0f00 	cmp.w	sl, #0
 800e602:	d131      	bne.n	800e668 <__gethex+0x38c>
 800e604:	b127      	cbz	r7, 800e610 <__gethex+0x334>
 800e606:	4639      	mov	r1, r7
 800e608:	4620      	mov	r0, r4
 800e60a:	f000 fe3b 	bl	800f284 <__any_on>
 800e60e:	4682      	mov	sl, r0
 800e610:	117b      	asrs	r3, r7, #5
 800e612:	2101      	movs	r1, #1
 800e614:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e618:	f007 071f 	and.w	r7, r7, #31
 800e61c:	fa01 f707 	lsl.w	r7, r1, r7
 800e620:	421f      	tst	r7, r3
 800e622:	4629      	mov	r1, r5
 800e624:	4620      	mov	r0, r4
 800e626:	bf18      	it	ne
 800e628:	f04a 0a02 	orrne.w	sl, sl, #2
 800e62c:	1b76      	subs	r6, r6, r5
 800e62e:	f7ff fded 	bl	800e20c <rshift>
 800e632:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e636:	2702      	movs	r7, #2
 800e638:	f1ba 0f00 	cmp.w	sl, #0
 800e63c:	d048      	beq.n	800e6d0 <__gethex+0x3f4>
 800e63e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e642:	2b02      	cmp	r3, #2
 800e644:	d015      	beq.n	800e672 <__gethex+0x396>
 800e646:	2b03      	cmp	r3, #3
 800e648:	d017      	beq.n	800e67a <__gethex+0x39e>
 800e64a:	2b01      	cmp	r3, #1
 800e64c:	d109      	bne.n	800e662 <__gethex+0x386>
 800e64e:	f01a 0f02 	tst.w	sl, #2
 800e652:	d006      	beq.n	800e662 <__gethex+0x386>
 800e654:	f8d9 0000 	ldr.w	r0, [r9]
 800e658:	ea4a 0a00 	orr.w	sl, sl, r0
 800e65c:	f01a 0f01 	tst.w	sl, #1
 800e660:	d10e      	bne.n	800e680 <__gethex+0x3a4>
 800e662:	f047 0710 	orr.w	r7, r7, #16
 800e666:	e033      	b.n	800e6d0 <__gethex+0x3f4>
 800e668:	f04f 0a01 	mov.w	sl, #1
 800e66c:	e7d0      	b.n	800e610 <__gethex+0x334>
 800e66e:	2701      	movs	r7, #1
 800e670:	e7e2      	b.n	800e638 <__gethex+0x35c>
 800e672:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e674:	f1c3 0301 	rsb	r3, r3, #1
 800e678:	9315      	str	r3, [sp, #84]	; 0x54
 800e67a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d0f0      	beq.n	800e662 <__gethex+0x386>
 800e680:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e684:	f104 0314 	add.w	r3, r4, #20
 800e688:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e68c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e690:	f04f 0c00 	mov.w	ip, #0
 800e694:	4618      	mov	r0, r3
 800e696:	f853 2b04 	ldr.w	r2, [r3], #4
 800e69a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e69e:	d01c      	beq.n	800e6da <__gethex+0x3fe>
 800e6a0:	3201      	adds	r2, #1
 800e6a2:	6002      	str	r2, [r0, #0]
 800e6a4:	2f02      	cmp	r7, #2
 800e6a6:	f104 0314 	add.w	r3, r4, #20
 800e6aa:	d13f      	bne.n	800e72c <__gethex+0x450>
 800e6ac:	f8d8 2000 	ldr.w	r2, [r8]
 800e6b0:	3a01      	subs	r2, #1
 800e6b2:	42b2      	cmp	r2, r6
 800e6b4:	d10a      	bne.n	800e6cc <__gethex+0x3f0>
 800e6b6:	1171      	asrs	r1, r6, #5
 800e6b8:	2201      	movs	r2, #1
 800e6ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e6be:	f006 061f 	and.w	r6, r6, #31
 800e6c2:	fa02 f606 	lsl.w	r6, r2, r6
 800e6c6:	421e      	tst	r6, r3
 800e6c8:	bf18      	it	ne
 800e6ca:	4617      	movne	r7, r2
 800e6cc:	f047 0720 	orr.w	r7, r7, #32
 800e6d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e6d2:	601c      	str	r4, [r3, #0]
 800e6d4:	9b04      	ldr	r3, [sp, #16]
 800e6d6:	601d      	str	r5, [r3, #0]
 800e6d8:	e695      	b.n	800e406 <__gethex+0x12a>
 800e6da:	4299      	cmp	r1, r3
 800e6dc:	f843 cc04 	str.w	ip, [r3, #-4]
 800e6e0:	d8d8      	bhi.n	800e694 <__gethex+0x3b8>
 800e6e2:	68a3      	ldr	r3, [r4, #8]
 800e6e4:	459b      	cmp	fp, r3
 800e6e6:	db19      	blt.n	800e71c <__gethex+0x440>
 800e6e8:	6861      	ldr	r1, [r4, #4]
 800e6ea:	ee18 0a10 	vmov	r0, s16
 800e6ee:	3101      	adds	r1, #1
 800e6f0:	f000 f928 	bl	800e944 <_Balloc>
 800e6f4:	4681      	mov	r9, r0
 800e6f6:	b918      	cbnz	r0, 800e700 <__gethex+0x424>
 800e6f8:	4b1a      	ldr	r3, [pc, #104]	; (800e764 <__gethex+0x488>)
 800e6fa:	4602      	mov	r2, r0
 800e6fc:	2184      	movs	r1, #132	; 0x84
 800e6fe:	e6a8      	b.n	800e452 <__gethex+0x176>
 800e700:	6922      	ldr	r2, [r4, #16]
 800e702:	3202      	adds	r2, #2
 800e704:	f104 010c 	add.w	r1, r4, #12
 800e708:	0092      	lsls	r2, r2, #2
 800e70a:	300c      	adds	r0, #12
 800e70c:	f000 f90c 	bl	800e928 <memcpy>
 800e710:	4621      	mov	r1, r4
 800e712:	ee18 0a10 	vmov	r0, s16
 800e716:	f000 f955 	bl	800e9c4 <_Bfree>
 800e71a:	464c      	mov	r4, r9
 800e71c:	6923      	ldr	r3, [r4, #16]
 800e71e:	1c5a      	adds	r2, r3, #1
 800e720:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e724:	6122      	str	r2, [r4, #16]
 800e726:	2201      	movs	r2, #1
 800e728:	615a      	str	r2, [r3, #20]
 800e72a:	e7bb      	b.n	800e6a4 <__gethex+0x3c8>
 800e72c:	6922      	ldr	r2, [r4, #16]
 800e72e:	455a      	cmp	r2, fp
 800e730:	dd0b      	ble.n	800e74a <__gethex+0x46e>
 800e732:	2101      	movs	r1, #1
 800e734:	4620      	mov	r0, r4
 800e736:	f7ff fd69 	bl	800e20c <rshift>
 800e73a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e73e:	3501      	adds	r5, #1
 800e740:	42ab      	cmp	r3, r5
 800e742:	f6ff aed0 	blt.w	800e4e6 <__gethex+0x20a>
 800e746:	2701      	movs	r7, #1
 800e748:	e7c0      	b.n	800e6cc <__gethex+0x3f0>
 800e74a:	f016 061f 	ands.w	r6, r6, #31
 800e74e:	d0fa      	beq.n	800e746 <__gethex+0x46a>
 800e750:	4453      	add	r3, sl
 800e752:	f1c6 0620 	rsb	r6, r6, #32
 800e756:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e75a:	f000 f9e5 	bl	800eb28 <__hi0bits>
 800e75e:	42b0      	cmp	r0, r6
 800e760:	dbe7      	blt.n	800e732 <__gethex+0x456>
 800e762:	e7f0      	b.n	800e746 <__gethex+0x46a>
 800e764:	080105f0 	.word	0x080105f0

0800e768 <L_shift>:
 800e768:	f1c2 0208 	rsb	r2, r2, #8
 800e76c:	0092      	lsls	r2, r2, #2
 800e76e:	b570      	push	{r4, r5, r6, lr}
 800e770:	f1c2 0620 	rsb	r6, r2, #32
 800e774:	6843      	ldr	r3, [r0, #4]
 800e776:	6804      	ldr	r4, [r0, #0]
 800e778:	fa03 f506 	lsl.w	r5, r3, r6
 800e77c:	432c      	orrs	r4, r5
 800e77e:	40d3      	lsrs	r3, r2
 800e780:	6004      	str	r4, [r0, #0]
 800e782:	f840 3f04 	str.w	r3, [r0, #4]!
 800e786:	4288      	cmp	r0, r1
 800e788:	d3f4      	bcc.n	800e774 <L_shift+0xc>
 800e78a:	bd70      	pop	{r4, r5, r6, pc}

0800e78c <__match>:
 800e78c:	b530      	push	{r4, r5, lr}
 800e78e:	6803      	ldr	r3, [r0, #0]
 800e790:	3301      	adds	r3, #1
 800e792:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e796:	b914      	cbnz	r4, 800e79e <__match+0x12>
 800e798:	6003      	str	r3, [r0, #0]
 800e79a:	2001      	movs	r0, #1
 800e79c:	bd30      	pop	{r4, r5, pc}
 800e79e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e7a2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e7a6:	2d19      	cmp	r5, #25
 800e7a8:	bf98      	it	ls
 800e7aa:	3220      	addls	r2, #32
 800e7ac:	42a2      	cmp	r2, r4
 800e7ae:	d0f0      	beq.n	800e792 <__match+0x6>
 800e7b0:	2000      	movs	r0, #0
 800e7b2:	e7f3      	b.n	800e79c <__match+0x10>

0800e7b4 <__hexnan>:
 800e7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7b8:	680b      	ldr	r3, [r1, #0]
 800e7ba:	115e      	asrs	r6, r3, #5
 800e7bc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e7c0:	f013 031f 	ands.w	r3, r3, #31
 800e7c4:	b087      	sub	sp, #28
 800e7c6:	bf18      	it	ne
 800e7c8:	3604      	addne	r6, #4
 800e7ca:	2500      	movs	r5, #0
 800e7cc:	1f37      	subs	r7, r6, #4
 800e7ce:	4690      	mov	r8, r2
 800e7d0:	6802      	ldr	r2, [r0, #0]
 800e7d2:	9301      	str	r3, [sp, #4]
 800e7d4:	4682      	mov	sl, r0
 800e7d6:	f846 5c04 	str.w	r5, [r6, #-4]
 800e7da:	46b9      	mov	r9, r7
 800e7dc:	463c      	mov	r4, r7
 800e7de:	9502      	str	r5, [sp, #8]
 800e7e0:	46ab      	mov	fp, r5
 800e7e2:	7851      	ldrb	r1, [r2, #1]
 800e7e4:	1c53      	adds	r3, r2, #1
 800e7e6:	9303      	str	r3, [sp, #12]
 800e7e8:	b341      	cbz	r1, 800e83c <__hexnan+0x88>
 800e7ea:	4608      	mov	r0, r1
 800e7ec:	9205      	str	r2, [sp, #20]
 800e7ee:	9104      	str	r1, [sp, #16]
 800e7f0:	f7ff fd5e 	bl	800e2b0 <__hexdig_fun>
 800e7f4:	2800      	cmp	r0, #0
 800e7f6:	d14f      	bne.n	800e898 <__hexnan+0xe4>
 800e7f8:	9904      	ldr	r1, [sp, #16]
 800e7fa:	9a05      	ldr	r2, [sp, #20]
 800e7fc:	2920      	cmp	r1, #32
 800e7fe:	d818      	bhi.n	800e832 <__hexnan+0x7e>
 800e800:	9b02      	ldr	r3, [sp, #8]
 800e802:	459b      	cmp	fp, r3
 800e804:	dd13      	ble.n	800e82e <__hexnan+0x7a>
 800e806:	454c      	cmp	r4, r9
 800e808:	d206      	bcs.n	800e818 <__hexnan+0x64>
 800e80a:	2d07      	cmp	r5, #7
 800e80c:	dc04      	bgt.n	800e818 <__hexnan+0x64>
 800e80e:	462a      	mov	r2, r5
 800e810:	4649      	mov	r1, r9
 800e812:	4620      	mov	r0, r4
 800e814:	f7ff ffa8 	bl	800e768 <L_shift>
 800e818:	4544      	cmp	r4, r8
 800e81a:	d950      	bls.n	800e8be <__hexnan+0x10a>
 800e81c:	2300      	movs	r3, #0
 800e81e:	f1a4 0904 	sub.w	r9, r4, #4
 800e822:	f844 3c04 	str.w	r3, [r4, #-4]
 800e826:	f8cd b008 	str.w	fp, [sp, #8]
 800e82a:	464c      	mov	r4, r9
 800e82c:	461d      	mov	r5, r3
 800e82e:	9a03      	ldr	r2, [sp, #12]
 800e830:	e7d7      	b.n	800e7e2 <__hexnan+0x2e>
 800e832:	2929      	cmp	r1, #41	; 0x29
 800e834:	d156      	bne.n	800e8e4 <__hexnan+0x130>
 800e836:	3202      	adds	r2, #2
 800e838:	f8ca 2000 	str.w	r2, [sl]
 800e83c:	f1bb 0f00 	cmp.w	fp, #0
 800e840:	d050      	beq.n	800e8e4 <__hexnan+0x130>
 800e842:	454c      	cmp	r4, r9
 800e844:	d206      	bcs.n	800e854 <__hexnan+0xa0>
 800e846:	2d07      	cmp	r5, #7
 800e848:	dc04      	bgt.n	800e854 <__hexnan+0xa0>
 800e84a:	462a      	mov	r2, r5
 800e84c:	4649      	mov	r1, r9
 800e84e:	4620      	mov	r0, r4
 800e850:	f7ff ff8a 	bl	800e768 <L_shift>
 800e854:	4544      	cmp	r4, r8
 800e856:	d934      	bls.n	800e8c2 <__hexnan+0x10e>
 800e858:	f1a8 0204 	sub.w	r2, r8, #4
 800e85c:	4623      	mov	r3, r4
 800e85e:	f853 1b04 	ldr.w	r1, [r3], #4
 800e862:	f842 1f04 	str.w	r1, [r2, #4]!
 800e866:	429f      	cmp	r7, r3
 800e868:	d2f9      	bcs.n	800e85e <__hexnan+0xaa>
 800e86a:	1b3b      	subs	r3, r7, r4
 800e86c:	f023 0303 	bic.w	r3, r3, #3
 800e870:	3304      	adds	r3, #4
 800e872:	3401      	adds	r4, #1
 800e874:	3e03      	subs	r6, #3
 800e876:	42b4      	cmp	r4, r6
 800e878:	bf88      	it	hi
 800e87a:	2304      	movhi	r3, #4
 800e87c:	4443      	add	r3, r8
 800e87e:	2200      	movs	r2, #0
 800e880:	f843 2b04 	str.w	r2, [r3], #4
 800e884:	429f      	cmp	r7, r3
 800e886:	d2fb      	bcs.n	800e880 <__hexnan+0xcc>
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	b91b      	cbnz	r3, 800e894 <__hexnan+0xe0>
 800e88c:	4547      	cmp	r7, r8
 800e88e:	d127      	bne.n	800e8e0 <__hexnan+0x12c>
 800e890:	2301      	movs	r3, #1
 800e892:	603b      	str	r3, [r7, #0]
 800e894:	2005      	movs	r0, #5
 800e896:	e026      	b.n	800e8e6 <__hexnan+0x132>
 800e898:	3501      	adds	r5, #1
 800e89a:	2d08      	cmp	r5, #8
 800e89c:	f10b 0b01 	add.w	fp, fp, #1
 800e8a0:	dd06      	ble.n	800e8b0 <__hexnan+0xfc>
 800e8a2:	4544      	cmp	r4, r8
 800e8a4:	d9c3      	bls.n	800e82e <__hexnan+0x7a>
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	f844 3c04 	str.w	r3, [r4, #-4]
 800e8ac:	2501      	movs	r5, #1
 800e8ae:	3c04      	subs	r4, #4
 800e8b0:	6822      	ldr	r2, [r4, #0]
 800e8b2:	f000 000f 	and.w	r0, r0, #15
 800e8b6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800e8ba:	6022      	str	r2, [r4, #0]
 800e8bc:	e7b7      	b.n	800e82e <__hexnan+0x7a>
 800e8be:	2508      	movs	r5, #8
 800e8c0:	e7b5      	b.n	800e82e <__hexnan+0x7a>
 800e8c2:	9b01      	ldr	r3, [sp, #4]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d0df      	beq.n	800e888 <__hexnan+0xd4>
 800e8c8:	f04f 32ff 	mov.w	r2, #4294967295
 800e8cc:	f1c3 0320 	rsb	r3, r3, #32
 800e8d0:	fa22 f303 	lsr.w	r3, r2, r3
 800e8d4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e8d8:	401a      	ands	r2, r3
 800e8da:	f846 2c04 	str.w	r2, [r6, #-4]
 800e8de:	e7d3      	b.n	800e888 <__hexnan+0xd4>
 800e8e0:	3f04      	subs	r7, #4
 800e8e2:	e7d1      	b.n	800e888 <__hexnan+0xd4>
 800e8e4:	2004      	movs	r0, #4
 800e8e6:	b007      	add	sp, #28
 800e8e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e8ec <_localeconv_r>:
 800e8ec:	4800      	ldr	r0, [pc, #0]	; (800e8f0 <_localeconv_r+0x4>)
 800e8ee:	4770      	bx	lr
 800e8f0:	20000274 	.word	0x20000274

0800e8f4 <malloc>:
 800e8f4:	4b02      	ldr	r3, [pc, #8]	; (800e900 <malloc+0xc>)
 800e8f6:	4601      	mov	r1, r0
 800e8f8:	6818      	ldr	r0, [r3, #0]
 800e8fa:	f000 bd67 	b.w	800f3cc <_malloc_r>
 800e8fe:	bf00      	nop
 800e900:	2000011c 	.word	0x2000011c

0800e904 <__ascii_mbtowc>:
 800e904:	b082      	sub	sp, #8
 800e906:	b901      	cbnz	r1, 800e90a <__ascii_mbtowc+0x6>
 800e908:	a901      	add	r1, sp, #4
 800e90a:	b142      	cbz	r2, 800e91e <__ascii_mbtowc+0x1a>
 800e90c:	b14b      	cbz	r3, 800e922 <__ascii_mbtowc+0x1e>
 800e90e:	7813      	ldrb	r3, [r2, #0]
 800e910:	600b      	str	r3, [r1, #0]
 800e912:	7812      	ldrb	r2, [r2, #0]
 800e914:	1e10      	subs	r0, r2, #0
 800e916:	bf18      	it	ne
 800e918:	2001      	movne	r0, #1
 800e91a:	b002      	add	sp, #8
 800e91c:	4770      	bx	lr
 800e91e:	4610      	mov	r0, r2
 800e920:	e7fb      	b.n	800e91a <__ascii_mbtowc+0x16>
 800e922:	f06f 0001 	mvn.w	r0, #1
 800e926:	e7f8      	b.n	800e91a <__ascii_mbtowc+0x16>

0800e928 <memcpy>:
 800e928:	440a      	add	r2, r1
 800e92a:	4291      	cmp	r1, r2
 800e92c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e930:	d100      	bne.n	800e934 <memcpy+0xc>
 800e932:	4770      	bx	lr
 800e934:	b510      	push	{r4, lr}
 800e936:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e93a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e93e:	4291      	cmp	r1, r2
 800e940:	d1f9      	bne.n	800e936 <memcpy+0xe>
 800e942:	bd10      	pop	{r4, pc}

0800e944 <_Balloc>:
 800e944:	b570      	push	{r4, r5, r6, lr}
 800e946:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e948:	4604      	mov	r4, r0
 800e94a:	460d      	mov	r5, r1
 800e94c:	b976      	cbnz	r6, 800e96c <_Balloc+0x28>
 800e94e:	2010      	movs	r0, #16
 800e950:	f7ff ffd0 	bl	800e8f4 <malloc>
 800e954:	4602      	mov	r2, r0
 800e956:	6260      	str	r0, [r4, #36]	; 0x24
 800e958:	b920      	cbnz	r0, 800e964 <_Balloc+0x20>
 800e95a:	4b18      	ldr	r3, [pc, #96]	; (800e9bc <_Balloc+0x78>)
 800e95c:	4818      	ldr	r0, [pc, #96]	; (800e9c0 <_Balloc+0x7c>)
 800e95e:	2166      	movs	r1, #102	; 0x66
 800e960:	f000 ff40 	bl	800f7e4 <__assert_func>
 800e964:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e968:	6006      	str	r6, [r0, #0]
 800e96a:	60c6      	str	r6, [r0, #12]
 800e96c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e96e:	68f3      	ldr	r3, [r6, #12]
 800e970:	b183      	cbz	r3, 800e994 <_Balloc+0x50>
 800e972:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e974:	68db      	ldr	r3, [r3, #12]
 800e976:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e97a:	b9b8      	cbnz	r0, 800e9ac <_Balloc+0x68>
 800e97c:	2101      	movs	r1, #1
 800e97e:	fa01 f605 	lsl.w	r6, r1, r5
 800e982:	1d72      	adds	r2, r6, #5
 800e984:	0092      	lsls	r2, r2, #2
 800e986:	4620      	mov	r0, r4
 800e988:	f000 fc9d 	bl	800f2c6 <_calloc_r>
 800e98c:	b160      	cbz	r0, 800e9a8 <_Balloc+0x64>
 800e98e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e992:	e00e      	b.n	800e9b2 <_Balloc+0x6e>
 800e994:	2221      	movs	r2, #33	; 0x21
 800e996:	2104      	movs	r1, #4
 800e998:	4620      	mov	r0, r4
 800e99a:	f000 fc94 	bl	800f2c6 <_calloc_r>
 800e99e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e9a0:	60f0      	str	r0, [r6, #12]
 800e9a2:	68db      	ldr	r3, [r3, #12]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d1e4      	bne.n	800e972 <_Balloc+0x2e>
 800e9a8:	2000      	movs	r0, #0
 800e9aa:	bd70      	pop	{r4, r5, r6, pc}
 800e9ac:	6802      	ldr	r2, [r0, #0]
 800e9ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e9b8:	e7f7      	b.n	800e9aa <_Balloc+0x66>
 800e9ba:	bf00      	nop
 800e9bc:	0801057e 	.word	0x0801057e
 800e9c0:	0801067c 	.word	0x0801067c

0800e9c4 <_Bfree>:
 800e9c4:	b570      	push	{r4, r5, r6, lr}
 800e9c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e9c8:	4605      	mov	r5, r0
 800e9ca:	460c      	mov	r4, r1
 800e9cc:	b976      	cbnz	r6, 800e9ec <_Bfree+0x28>
 800e9ce:	2010      	movs	r0, #16
 800e9d0:	f7ff ff90 	bl	800e8f4 <malloc>
 800e9d4:	4602      	mov	r2, r0
 800e9d6:	6268      	str	r0, [r5, #36]	; 0x24
 800e9d8:	b920      	cbnz	r0, 800e9e4 <_Bfree+0x20>
 800e9da:	4b09      	ldr	r3, [pc, #36]	; (800ea00 <_Bfree+0x3c>)
 800e9dc:	4809      	ldr	r0, [pc, #36]	; (800ea04 <_Bfree+0x40>)
 800e9de:	218a      	movs	r1, #138	; 0x8a
 800e9e0:	f000 ff00 	bl	800f7e4 <__assert_func>
 800e9e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e9e8:	6006      	str	r6, [r0, #0]
 800e9ea:	60c6      	str	r6, [r0, #12]
 800e9ec:	b13c      	cbz	r4, 800e9fe <_Bfree+0x3a>
 800e9ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e9f0:	6862      	ldr	r2, [r4, #4]
 800e9f2:	68db      	ldr	r3, [r3, #12]
 800e9f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e9f8:	6021      	str	r1, [r4, #0]
 800e9fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e9fe:	bd70      	pop	{r4, r5, r6, pc}
 800ea00:	0801057e 	.word	0x0801057e
 800ea04:	0801067c 	.word	0x0801067c

0800ea08 <__multadd>:
 800ea08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea0c:	690d      	ldr	r5, [r1, #16]
 800ea0e:	4607      	mov	r7, r0
 800ea10:	460c      	mov	r4, r1
 800ea12:	461e      	mov	r6, r3
 800ea14:	f101 0c14 	add.w	ip, r1, #20
 800ea18:	2000      	movs	r0, #0
 800ea1a:	f8dc 3000 	ldr.w	r3, [ip]
 800ea1e:	b299      	uxth	r1, r3
 800ea20:	fb02 6101 	mla	r1, r2, r1, r6
 800ea24:	0c1e      	lsrs	r6, r3, #16
 800ea26:	0c0b      	lsrs	r3, r1, #16
 800ea28:	fb02 3306 	mla	r3, r2, r6, r3
 800ea2c:	b289      	uxth	r1, r1
 800ea2e:	3001      	adds	r0, #1
 800ea30:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ea34:	4285      	cmp	r5, r0
 800ea36:	f84c 1b04 	str.w	r1, [ip], #4
 800ea3a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ea3e:	dcec      	bgt.n	800ea1a <__multadd+0x12>
 800ea40:	b30e      	cbz	r6, 800ea86 <__multadd+0x7e>
 800ea42:	68a3      	ldr	r3, [r4, #8]
 800ea44:	42ab      	cmp	r3, r5
 800ea46:	dc19      	bgt.n	800ea7c <__multadd+0x74>
 800ea48:	6861      	ldr	r1, [r4, #4]
 800ea4a:	4638      	mov	r0, r7
 800ea4c:	3101      	adds	r1, #1
 800ea4e:	f7ff ff79 	bl	800e944 <_Balloc>
 800ea52:	4680      	mov	r8, r0
 800ea54:	b928      	cbnz	r0, 800ea62 <__multadd+0x5a>
 800ea56:	4602      	mov	r2, r0
 800ea58:	4b0c      	ldr	r3, [pc, #48]	; (800ea8c <__multadd+0x84>)
 800ea5a:	480d      	ldr	r0, [pc, #52]	; (800ea90 <__multadd+0x88>)
 800ea5c:	21b5      	movs	r1, #181	; 0xb5
 800ea5e:	f000 fec1 	bl	800f7e4 <__assert_func>
 800ea62:	6922      	ldr	r2, [r4, #16]
 800ea64:	3202      	adds	r2, #2
 800ea66:	f104 010c 	add.w	r1, r4, #12
 800ea6a:	0092      	lsls	r2, r2, #2
 800ea6c:	300c      	adds	r0, #12
 800ea6e:	f7ff ff5b 	bl	800e928 <memcpy>
 800ea72:	4621      	mov	r1, r4
 800ea74:	4638      	mov	r0, r7
 800ea76:	f7ff ffa5 	bl	800e9c4 <_Bfree>
 800ea7a:	4644      	mov	r4, r8
 800ea7c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ea80:	3501      	adds	r5, #1
 800ea82:	615e      	str	r6, [r3, #20]
 800ea84:	6125      	str	r5, [r4, #16]
 800ea86:	4620      	mov	r0, r4
 800ea88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea8c:	080105f0 	.word	0x080105f0
 800ea90:	0801067c 	.word	0x0801067c

0800ea94 <__s2b>:
 800ea94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea98:	460c      	mov	r4, r1
 800ea9a:	4615      	mov	r5, r2
 800ea9c:	461f      	mov	r7, r3
 800ea9e:	2209      	movs	r2, #9
 800eaa0:	3308      	adds	r3, #8
 800eaa2:	4606      	mov	r6, r0
 800eaa4:	fb93 f3f2 	sdiv	r3, r3, r2
 800eaa8:	2100      	movs	r1, #0
 800eaaa:	2201      	movs	r2, #1
 800eaac:	429a      	cmp	r2, r3
 800eaae:	db09      	blt.n	800eac4 <__s2b+0x30>
 800eab0:	4630      	mov	r0, r6
 800eab2:	f7ff ff47 	bl	800e944 <_Balloc>
 800eab6:	b940      	cbnz	r0, 800eaca <__s2b+0x36>
 800eab8:	4602      	mov	r2, r0
 800eaba:	4b19      	ldr	r3, [pc, #100]	; (800eb20 <__s2b+0x8c>)
 800eabc:	4819      	ldr	r0, [pc, #100]	; (800eb24 <__s2b+0x90>)
 800eabe:	21ce      	movs	r1, #206	; 0xce
 800eac0:	f000 fe90 	bl	800f7e4 <__assert_func>
 800eac4:	0052      	lsls	r2, r2, #1
 800eac6:	3101      	adds	r1, #1
 800eac8:	e7f0      	b.n	800eaac <__s2b+0x18>
 800eaca:	9b08      	ldr	r3, [sp, #32]
 800eacc:	6143      	str	r3, [r0, #20]
 800eace:	2d09      	cmp	r5, #9
 800ead0:	f04f 0301 	mov.w	r3, #1
 800ead4:	6103      	str	r3, [r0, #16]
 800ead6:	dd16      	ble.n	800eb06 <__s2b+0x72>
 800ead8:	f104 0909 	add.w	r9, r4, #9
 800eadc:	46c8      	mov	r8, r9
 800eade:	442c      	add	r4, r5
 800eae0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800eae4:	4601      	mov	r1, r0
 800eae6:	3b30      	subs	r3, #48	; 0x30
 800eae8:	220a      	movs	r2, #10
 800eaea:	4630      	mov	r0, r6
 800eaec:	f7ff ff8c 	bl	800ea08 <__multadd>
 800eaf0:	45a0      	cmp	r8, r4
 800eaf2:	d1f5      	bne.n	800eae0 <__s2b+0x4c>
 800eaf4:	f1a5 0408 	sub.w	r4, r5, #8
 800eaf8:	444c      	add	r4, r9
 800eafa:	1b2d      	subs	r5, r5, r4
 800eafc:	1963      	adds	r3, r4, r5
 800eafe:	42bb      	cmp	r3, r7
 800eb00:	db04      	blt.n	800eb0c <__s2b+0x78>
 800eb02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb06:	340a      	adds	r4, #10
 800eb08:	2509      	movs	r5, #9
 800eb0a:	e7f6      	b.n	800eafa <__s2b+0x66>
 800eb0c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800eb10:	4601      	mov	r1, r0
 800eb12:	3b30      	subs	r3, #48	; 0x30
 800eb14:	220a      	movs	r2, #10
 800eb16:	4630      	mov	r0, r6
 800eb18:	f7ff ff76 	bl	800ea08 <__multadd>
 800eb1c:	e7ee      	b.n	800eafc <__s2b+0x68>
 800eb1e:	bf00      	nop
 800eb20:	080105f0 	.word	0x080105f0
 800eb24:	0801067c 	.word	0x0801067c

0800eb28 <__hi0bits>:
 800eb28:	0c03      	lsrs	r3, r0, #16
 800eb2a:	041b      	lsls	r3, r3, #16
 800eb2c:	b9d3      	cbnz	r3, 800eb64 <__hi0bits+0x3c>
 800eb2e:	0400      	lsls	r0, r0, #16
 800eb30:	2310      	movs	r3, #16
 800eb32:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800eb36:	bf04      	itt	eq
 800eb38:	0200      	lsleq	r0, r0, #8
 800eb3a:	3308      	addeq	r3, #8
 800eb3c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800eb40:	bf04      	itt	eq
 800eb42:	0100      	lsleq	r0, r0, #4
 800eb44:	3304      	addeq	r3, #4
 800eb46:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800eb4a:	bf04      	itt	eq
 800eb4c:	0080      	lsleq	r0, r0, #2
 800eb4e:	3302      	addeq	r3, #2
 800eb50:	2800      	cmp	r0, #0
 800eb52:	db05      	blt.n	800eb60 <__hi0bits+0x38>
 800eb54:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800eb58:	f103 0301 	add.w	r3, r3, #1
 800eb5c:	bf08      	it	eq
 800eb5e:	2320      	moveq	r3, #32
 800eb60:	4618      	mov	r0, r3
 800eb62:	4770      	bx	lr
 800eb64:	2300      	movs	r3, #0
 800eb66:	e7e4      	b.n	800eb32 <__hi0bits+0xa>

0800eb68 <__lo0bits>:
 800eb68:	6803      	ldr	r3, [r0, #0]
 800eb6a:	f013 0207 	ands.w	r2, r3, #7
 800eb6e:	4601      	mov	r1, r0
 800eb70:	d00b      	beq.n	800eb8a <__lo0bits+0x22>
 800eb72:	07da      	lsls	r2, r3, #31
 800eb74:	d423      	bmi.n	800ebbe <__lo0bits+0x56>
 800eb76:	0798      	lsls	r0, r3, #30
 800eb78:	bf49      	itett	mi
 800eb7a:	085b      	lsrmi	r3, r3, #1
 800eb7c:	089b      	lsrpl	r3, r3, #2
 800eb7e:	2001      	movmi	r0, #1
 800eb80:	600b      	strmi	r3, [r1, #0]
 800eb82:	bf5c      	itt	pl
 800eb84:	600b      	strpl	r3, [r1, #0]
 800eb86:	2002      	movpl	r0, #2
 800eb88:	4770      	bx	lr
 800eb8a:	b298      	uxth	r0, r3
 800eb8c:	b9a8      	cbnz	r0, 800ebba <__lo0bits+0x52>
 800eb8e:	0c1b      	lsrs	r3, r3, #16
 800eb90:	2010      	movs	r0, #16
 800eb92:	b2da      	uxtb	r2, r3
 800eb94:	b90a      	cbnz	r2, 800eb9a <__lo0bits+0x32>
 800eb96:	3008      	adds	r0, #8
 800eb98:	0a1b      	lsrs	r3, r3, #8
 800eb9a:	071a      	lsls	r2, r3, #28
 800eb9c:	bf04      	itt	eq
 800eb9e:	091b      	lsreq	r3, r3, #4
 800eba0:	3004      	addeq	r0, #4
 800eba2:	079a      	lsls	r2, r3, #30
 800eba4:	bf04      	itt	eq
 800eba6:	089b      	lsreq	r3, r3, #2
 800eba8:	3002      	addeq	r0, #2
 800ebaa:	07da      	lsls	r2, r3, #31
 800ebac:	d403      	bmi.n	800ebb6 <__lo0bits+0x4e>
 800ebae:	085b      	lsrs	r3, r3, #1
 800ebb0:	f100 0001 	add.w	r0, r0, #1
 800ebb4:	d005      	beq.n	800ebc2 <__lo0bits+0x5a>
 800ebb6:	600b      	str	r3, [r1, #0]
 800ebb8:	4770      	bx	lr
 800ebba:	4610      	mov	r0, r2
 800ebbc:	e7e9      	b.n	800eb92 <__lo0bits+0x2a>
 800ebbe:	2000      	movs	r0, #0
 800ebc0:	4770      	bx	lr
 800ebc2:	2020      	movs	r0, #32
 800ebc4:	4770      	bx	lr
	...

0800ebc8 <__i2b>:
 800ebc8:	b510      	push	{r4, lr}
 800ebca:	460c      	mov	r4, r1
 800ebcc:	2101      	movs	r1, #1
 800ebce:	f7ff feb9 	bl	800e944 <_Balloc>
 800ebd2:	4602      	mov	r2, r0
 800ebd4:	b928      	cbnz	r0, 800ebe2 <__i2b+0x1a>
 800ebd6:	4b05      	ldr	r3, [pc, #20]	; (800ebec <__i2b+0x24>)
 800ebd8:	4805      	ldr	r0, [pc, #20]	; (800ebf0 <__i2b+0x28>)
 800ebda:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ebde:	f000 fe01 	bl	800f7e4 <__assert_func>
 800ebe2:	2301      	movs	r3, #1
 800ebe4:	6144      	str	r4, [r0, #20]
 800ebe6:	6103      	str	r3, [r0, #16]
 800ebe8:	bd10      	pop	{r4, pc}
 800ebea:	bf00      	nop
 800ebec:	080105f0 	.word	0x080105f0
 800ebf0:	0801067c 	.word	0x0801067c

0800ebf4 <__multiply>:
 800ebf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebf8:	4691      	mov	r9, r2
 800ebfa:	690a      	ldr	r2, [r1, #16]
 800ebfc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ec00:	429a      	cmp	r2, r3
 800ec02:	bfb8      	it	lt
 800ec04:	460b      	movlt	r3, r1
 800ec06:	460c      	mov	r4, r1
 800ec08:	bfbc      	itt	lt
 800ec0a:	464c      	movlt	r4, r9
 800ec0c:	4699      	movlt	r9, r3
 800ec0e:	6927      	ldr	r7, [r4, #16]
 800ec10:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ec14:	68a3      	ldr	r3, [r4, #8]
 800ec16:	6861      	ldr	r1, [r4, #4]
 800ec18:	eb07 060a 	add.w	r6, r7, sl
 800ec1c:	42b3      	cmp	r3, r6
 800ec1e:	b085      	sub	sp, #20
 800ec20:	bfb8      	it	lt
 800ec22:	3101      	addlt	r1, #1
 800ec24:	f7ff fe8e 	bl	800e944 <_Balloc>
 800ec28:	b930      	cbnz	r0, 800ec38 <__multiply+0x44>
 800ec2a:	4602      	mov	r2, r0
 800ec2c:	4b44      	ldr	r3, [pc, #272]	; (800ed40 <__multiply+0x14c>)
 800ec2e:	4845      	ldr	r0, [pc, #276]	; (800ed44 <__multiply+0x150>)
 800ec30:	f240 115d 	movw	r1, #349	; 0x15d
 800ec34:	f000 fdd6 	bl	800f7e4 <__assert_func>
 800ec38:	f100 0514 	add.w	r5, r0, #20
 800ec3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ec40:	462b      	mov	r3, r5
 800ec42:	2200      	movs	r2, #0
 800ec44:	4543      	cmp	r3, r8
 800ec46:	d321      	bcc.n	800ec8c <__multiply+0x98>
 800ec48:	f104 0314 	add.w	r3, r4, #20
 800ec4c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ec50:	f109 0314 	add.w	r3, r9, #20
 800ec54:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ec58:	9202      	str	r2, [sp, #8]
 800ec5a:	1b3a      	subs	r2, r7, r4
 800ec5c:	3a15      	subs	r2, #21
 800ec5e:	f022 0203 	bic.w	r2, r2, #3
 800ec62:	3204      	adds	r2, #4
 800ec64:	f104 0115 	add.w	r1, r4, #21
 800ec68:	428f      	cmp	r7, r1
 800ec6a:	bf38      	it	cc
 800ec6c:	2204      	movcc	r2, #4
 800ec6e:	9201      	str	r2, [sp, #4]
 800ec70:	9a02      	ldr	r2, [sp, #8]
 800ec72:	9303      	str	r3, [sp, #12]
 800ec74:	429a      	cmp	r2, r3
 800ec76:	d80c      	bhi.n	800ec92 <__multiply+0x9e>
 800ec78:	2e00      	cmp	r6, #0
 800ec7a:	dd03      	ble.n	800ec84 <__multiply+0x90>
 800ec7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d05a      	beq.n	800ed3a <__multiply+0x146>
 800ec84:	6106      	str	r6, [r0, #16]
 800ec86:	b005      	add	sp, #20
 800ec88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec8c:	f843 2b04 	str.w	r2, [r3], #4
 800ec90:	e7d8      	b.n	800ec44 <__multiply+0x50>
 800ec92:	f8b3 a000 	ldrh.w	sl, [r3]
 800ec96:	f1ba 0f00 	cmp.w	sl, #0
 800ec9a:	d024      	beq.n	800ece6 <__multiply+0xf2>
 800ec9c:	f104 0e14 	add.w	lr, r4, #20
 800eca0:	46a9      	mov	r9, r5
 800eca2:	f04f 0c00 	mov.w	ip, #0
 800eca6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ecaa:	f8d9 1000 	ldr.w	r1, [r9]
 800ecae:	fa1f fb82 	uxth.w	fp, r2
 800ecb2:	b289      	uxth	r1, r1
 800ecb4:	fb0a 110b 	mla	r1, sl, fp, r1
 800ecb8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ecbc:	f8d9 2000 	ldr.w	r2, [r9]
 800ecc0:	4461      	add	r1, ip
 800ecc2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ecc6:	fb0a c20b 	mla	r2, sl, fp, ip
 800ecca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ecce:	b289      	uxth	r1, r1
 800ecd0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ecd4:	4577      	cmp	r7, lr
 800ecd6:	f849 1b04 	str.w	r1, [r9], #4
 800ecda:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ecde:	d8e2      	bhi.n	800eca6 <__multiply+0xb2>
 800ece0:	9a01      	ldr	r2, [sp, #4]
 800ece2:	f845 c002 	str.w	ip, [r5, r2]
 800ece6:	9a03      	ldr	r2, [sp, #12]
 800ece8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ecec:	3304      	adds	r3, #4
 800ecee:	f1b9 0f00 	cmp.w	r9, #0
 800ecf2:	d020      	beq.n	800ed36 <__multiply+0x142>
 800ecf4:	6829      	ldr	r1, [r5, #0]
 800ecf6:	f104 0c14 	add.w	ip, r4, #20
 800ecfa:	46ae      	mov	lr, r5
 800ecfc:	f04f 0a00 	mov.w	sl, #0
 800ed00:	f8bc b000 	ldrh.w	fp, [ip]
 800ed04:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ed08:	fb09 220b 	mla	r2, r9, fp, r2
 800ed0c:	4492      	add	sl, r2
 800ed0e:	b289      	uxth	r1, r1
 800ed10:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ed14:	f84e 1b04 	str.w	r1, [lr], #4
 800ed18:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ed1c:	f8be 1000 	ldrh.w	r1, [lr]
 800ed20:	0c12      	lsrs	r2, r2, #16
 800ed22:	fb09 1102 	mla	r1, r9, r2, r1
 800ed26:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ed2a:	4567      	cmp	r7, ip
 800ed2c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ed30:	d8e6      	bhi.n	800ed00 <__multiply+0x10c>
 800ed32:	9a01      	ldr	r2, [sp, #4]
 800ed34:	50a9      	str	r1, [r5, r2]
 800ed36:	3504      	adds	r5, #4
 800ed38:	e79a      	b.n	800ec70 <__multiply+0x7c>
 800ed3a:	3e01      	subs	r6, #1
 800ed3c:	e79c      	b.n	800ec78 <__multiply+0x84>
 800ed3e:	bf00      	nop
 800ed40:	080105f0 	.word	0x080105f0
 800ed44:	0801067c 	.word	0x0801067c

0800ed48 <__pow5mult>:
 800ed48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed4c:	4615      	mov	r5, r2
 800ed4e:	f012 0203 	ands.w	r2, r2, #3
 800ed52:	4606      	mov	r6, r0
 800ed54:	460f      	mov	r7, r1
 800ed56:	d007      	beq.n	800ed68 <__pow5mult+0x20>
 800ed58:	4c25      	ldr	r4, [pc, #148]	; (800edf0 <__pow5mult+0xa8>)
 800ed5a:	3a01      	subs	r2, #1
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ed62:	f7ff fe51 	bl	800ea08 <__multadd>
 800ed66:	4607      	mov	r7, r0
 800ed68:	10ad      	asrs	r5, r5, #2
 800ed6a:	d03d      	beq.n	800ede8 <__pow5mult+0xa0>
 800ed6c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ed6e:	b97c      	cbnz	r4, 800ed90 <__pow5mult+0x48>
 800ed70:	2010      	movs	r0, #16
 800ed72:	f7ff fdbf 	bl	800e8f4 <malloc>
 800ed76:	4602      	mov	r2, r0
 800ed78:	6270      	str	r0, [r6, #36]	; 0x24
 800ed7a:	b928      	cbnz	r0, 800ed88 <__pow5mult+0x40>
 800ed7c:	4b1d      	ldr	r3, [pc, #116]	; (800edf4 <__pow5mult+0xac>)
 800ed7e:	481e      	ldr	r0, [pc, #120]	; (800edf8 <__pow5mult+0xb0>)
 800ed80:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ed84:	f000 fd2e 	bl	800f7e4 <__assert_func>
 800ed88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ed8c:	6004      	str	r4, [r0, #0]
 800ed8e:	60c4      	str	r4, [r0, #12]
 800ed90:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ed94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ed98:	b94c      	cbnz	r4, 800edae <__pow5mult+0x66>
 800ed9a:	f240 2171 	movw	r1, #625	; 0x271
 800ed9e:	4630      	mov	r0, r6
 800eda0:	f7ff ff12 	bl	800ebc8 <__i2b>
 800eda4:	2300      	movs	r3, #0
 800eda6:	f8c8 0008 	str.w	r0, [r8, #8]
 800edaa:	4604      	mov	r4, r0
 800edac:	6003      	str	r3, [r0, #0]
 800edae:	f04f 0900 	mov.w	r9, #0
 800edb2:	07eb      	lsls	r3, r5, #31
 800edb4:	d50a      	bpl.n	800edcc <__pow5mult+0x84>
 800edb6:	4639      	mov	r1, r7
 800edb8:	4622      	mov	r2, r4
 800edba:	4630      	mov	r0, r6
 800edbc:	f7ff ff1a 	bl	800ebf4 <__multiply>
 800edc0:	4639      	mov	r1, r7
 800edc2:	4680      	mov	r8, r0
 800edc4:	4630      	mov	r0, r6
 800edc6:	f7ff fdfd 	bl	800e9c4 <_Bfree>
 800edca:	4647      	mov	r7, r8
 800edcc:	106d      	asrs	r5, r5, #1
 800edce:	d00b      	beq.n	800ede8 <__pow5mult+0xa0>
 800edd0:	6820      	ldr	r0, [r4, #0]
 800edd2:	b938      	cbnz	r0, 800ede4 <__pow5mult+0x9c>
 800edd4:	4622      	mov	r2, r4
 800edd6:	4621      	mov	r1, r4
 800edd8:	4630      	mov	r0, r6
 800edda:	f7ff ff0b 	bl	800ebf4 <__multiply>
 800edde:	6020      	str	r0, [r4, #0]
 800ede0:	f8c0 9000 	str.w	r9, [r0]
 800ede4:	4604      	mov	r4, r0
 800ede6:	e7e4      	b.n	800edb2 <__pow5mult+0x6a>
 800ede8:	4638      	mov	r0, r7
 800edea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800edee:	bf00      	nop
 800edf0:	080107c8 	.word	0x080107c8
 800edf4:	0801057e 	.word	0x0801057e
 800edf8:	0801067c 	.word	0x0801067c

0800edfc <__lshift>:
 800edfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee00:	460c      	mov	r4, r1
 800ee02:	6849      	ldr	r1, [r1, #4]
 800ee04:	6923      	ldr	r3, [r4, #16]
 800ee06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ee0a:	68a3      	ldr	r3, [r4, #8]
 800ee0c:	4607      	mov	r7, r0
 800ee0e:	4691      	mov	r9, r2
 800ee10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ee14:	f108 0601 	add.w	r6, r8, #1
 800ee18:	42b3      	cmp	r3, r6
 800ee1a:	db0b      	blt.n	800ee34 <__lshift+0x38>
 800ee1c:	4638      	mov	r0, r7
 800ee1e:	f7ff fd91 	bl	800e944 <_Balloc>
 800ee22:	4605      	mov	r5, r0
 800ee24:	b948      	cbnz	r0, 800ee3a <__lshift+0x3e>
 800ee26:	4602      	mov	r2, r0
 800ee28:	4b2a      	ldr	r3, [pc, #168]	; (800eed4 <__lshift+0xd8>)
 800ee2a:	482b      	ldr	r0, [pc, #172]	; (800eed8 <__lshift+0xdc>)
 800ee2c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ee30:	f000 fcd8 	bl	800f7e4 <__assert_func>
 800ee34:	3101      	adds	r1, #1
 800ee36:	005b      	lsls	r3, r3, #1
 800ee38:	e7ee      	b.n	800ee18 <__lshift+0x1c>
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	f100 0114 	add.w	r1, r0, #20
 800ee40:	f100 0210 	add.w	r2, r0, #16
 800ee44:	4618      	mov	r0, r3
 800ee46:	4553      	cmp	r3, sl
 800ee48:	db37      	blt.n	800eeba <__lshift+0xbe>
 800ee4a:	6920      	ldr	r0, [r4, #16]
 800ee4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ee50:	f104 0314 	add.w	r3, r4, #20
 800ee54:	f019 091f 	ands.w	r9, r9, #31
 800ee58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ee5c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ee60:	d02f      	beq.n	800eec2 <__lshift+0xc6>
 800ee62:	f1c9 0e20 	rsb	lr, r9, #32
 800ee66:	468a      	mov	sl, r1
 800ee68:	f04f 0c00 	mov.w	ip, #0
 800ee6c:	681a      	ldr	r2, [r3, #0]
 800ee6e:	fa02 f209 	lsl.w	r2, r2, r9
 800ee72:	ea42 020c 	orr.w	r2, r2, ip
 800ee76:	f84a 2b04 	str.w	r2, [sl], #4
 800ee7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee7e:	4298      	cmp	r0, r3
 800ee80:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ee84:	d8f2      	bhi.n	800ee6c <__lshift+0x70>
 800ee86:	1b03      	subs	r3, r0, r4
 800ee88:	3b15      	subs	r3, #21
 800ee8a:	f023 0303 	bic.w	r3, r3, #3
 800ee8e:	3304      	adds	r3, #4
 800ee90:	f104 0215 	add.w	r2, r4, #21
 800ee94:	4290      	cmp	r0, r2
 800ee96:	bf38      	it	cc
 800ee98:	2304      	movcc	r3, #4
 800ee9a:	f841 c003 	str.w	ip, [r1, r3]
 800ee9e:	f1bc 0f00 	cmp.w	ip, #0
 800eea2:	d001      	beq.n	800eea8 <__lshift+0xac>
 800eea4:	f108 0602 	add.w	r6, r8, #2
 800eea8:	3e01      	subs	r6, #1
 800eeaa:	4638      	mov	r0, r7
 800eeac:	612e      	str	r6, [r5, #16]
 800eeae:	4621      	mov	r1, r4
 800eeb0:	f7ff fd88 	bl	800e9c4 <_Bfree>
 800eeb4:	4628      	mov	r0, r5
 800eeb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eeba:	f842 0f04 	str.w	r0, [r2, #4]!
 800eebe:	3301      	adds	r3, #1
 800eec0:	e7c1      	b.n	800ee46 <__lshift+0x4a>
 800eec2:	3904      	subs	r1, #4
 800eec4:	f853 2b04 	ldr.w	r2, [r3], #4
 800eec8:	f841 2f04 	str.w	r2, [r1, #4]!
 800eecc:	4298      	cmp	r0, r3
 800eece:	d8f9      	bhi.n	800eec4 <__lshift+0xc8>
 800eed0:	e7ea      	b.n	800eea8 <__lshift+0xac>
 800eed2:	bf00      	nop
 800eed4:	080105f0 	.word	0x080105f0
 800eed8:	0801067c 	.word	0x0801067c

0800eedc <__mcmp>:
 800eedc:	b530      	push	{r4, r5, lr}
 800eede:	6902      	ldr	r2, [r0, #16]
 800eee0:	690c      	ldr	r4, [r1, #16]
 800eee2:	1b12      	subs	r2, r2, r4
 800eee4:	d10e      	bne.n	800ef04 <__mcmp+0x28>
 800eee6:	f100 0314 	add.w	r3, r0, #20
 800eeea:	3114      	adds	r1, #20
 800eeec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800eef0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800eef4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800eef8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800eefc:	42a5      	cmp	r5, r4
 800eefe:	d003      	beq.n	800ef08 <__mcmp+0x2c>
 800ef00:	d305      	bcc.n	800ef0e <__mcmp+0x32>
 800ef02:	2201      	movs	r2, #1
 800ef04:	4610      	mov	r0, r2
 800ef06:	bd30      	pop	{r4, r5, pc}
 800ef08:	4283      	cmp	r3, r0
 800ef0a:	d3f3      	bcc.n	800eef4 <__mcmp+0x18>
 800ef0c:	e7fa      	b.n	800ef04 <__mcmp+0x28>
 800ef0e:	f04f 32ff 	mov.w	r2, #4294967295
 800ef12:	e7f7      	b.n	800ef04 <__mcmp+0x28>

0800ef14 <__mdiff>:
 800ef14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef18:	460c      	mov	r4, r1
 800ef1a:	4606      	mov	r6, r0
 800ef1c:	4611      	mov	r1, r2
 800ef1e:	4620      	mov	r0, r4
 800ef20:	4690      	mov	r8, r2
 800ef22:	f7ff ffdb 	bl	800eedc <__mcmp>
 800ef26:	1e05      	subs	r5, r0, #0
 800ef28:	d110      	bne.n	800ef4c <__mdiff+0x38>
 800ef2a:	4629      	mov	r1, r5
 800ef2c:	4630      	mov	r0, r6
 800ef2e:	f7ff fd09 	bl	800e944 <_Balloc>
 800ef32:	b930      	cbnz	r0, 800ef42 <__mdiff+0x2e>
 800ef34:	4b3a      	ldr	r3, [pc, #232]	; (800f020 <__mdiff+0x10c>)
 800ef36:	4602      	mov	r2, r0
 800ef38:	f240 2132 	movw	r1, #562	; 0x232
 800ef3c:	4839      	ldr	r0, [pc, #228]	; (800f024 <__mdiff+0x110>)
 800ef3e:	f000 fc51 	bl	800f7e4 <__assert_func>
 800ef42:	2301      	movs	r3, #1
 800ef44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ef48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef4c:	bfa4      	itt	ge
 800ef4e:	4643      	movge	r3, r8
 800ef50:	46a0      	movge	r8, r4
 800ef52:	4630      	mov	r0, r6
 800ef54:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ef58:	bfa6      	itte	ge
 800ef5a:	461c      	movge	r4, r3
 800ef5c:	2500      	movge	r5, #0
 800ef5e:	2501      	movlt	r5, #1
 800ef60:	f7ff fcf0 	bl	800e944 <_Balloc>
 800ef64:	b920      	cbnz	r0, 800ef70 <__mdiff+0x5c>
 800ef66:	4b2e      	ldr	r3, [pc, #184]	; (800f020 <__mdiff+0x10c>)
 800ef68:	4602      	mov	r2, r0
 800ef6a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ef6e:	e7e5      	b.n	800ef3c <__mdiff+0x28>
 800ef70:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ef74:	6926      	ldr	r6, [r4, #16]
 800ef76:	60c5      	str	r5, [r0, #12]
 800ef78:	f104 0914 	add.w	r9, r4, #20
 800ef7c:	f108 0514 	add.w	r5, r8, #20
 800ef80:	f100 0e14 	add.w	lr, r0, #20
 800ef84:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ef88:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ef8c:	f108 0210 	add.w	r2, r8, #16
 800ef90:	46f2      	mov	sl, lr
 800ef92:	2100      	movs	r1, #0
 800ef94:	f859 3b04 	ldr.w	r3, [r9], #4
 800ef98:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ef9c:	fa1f f883 	uxth.w	r8, r3
 800efa0:	fa11 f18b 	uxtah	r1, r1, fp
 800efa4:	0c1b      	lsrs	r3, r3, #16
 800efa6:	eba1 0808 	sub.w	r8, r1, r8
 800efaa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800efae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800efb2:	fa1f f888 	uxth.w	r8, r8
 800efb6:	1419      	asrs	r1, r3, #16
 800efb8:	454e      	cmp	r6, r9
 800efba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800efbe:	f84a 3b04 	str.w	r3, [sl], #4
 800efc2:	d8e7      	bhi.n	800ef94 <__mdiff+0x80>
 800efc4:	1b33      	subs	r3, r6, r4
 800efc6:	3b15      	subs	r3, #21
 800efc8:	f023 0303 	bic.w	r3, r3, #3
 800efcc:	3304      	adds	r3, #4
 800efce:	3415      	adds	r4, #21
 800efd0:	42a6      	cmp	r6, r4
 800efd2:	bf38      	it	cc
 800efd4:	2304      	movcc	r3, #4
 800efd6:	441d      	add	r5, r3
 800efd8:	4473      	add	r3, lr
 800efda:	469e      	mov	lr, r3
 800efdc:	462e      	mov	r6, r5
 800efde:	4566      	cmp	r6, ip
 800efe0:	d30e      	bcc.n	800f000 <__mdiff+0xec>
 800efe2:	f10c 0203 	add.w	r2, ip, #3
 800efe6:	1b52      	subs	r2, r2, r5
 800efe8:	f022 0203 	bic.w	r2, r2, #3
 800efec:	3d03      	subs	r5, #3
 800efee:	45ac      	cmp	ip, r5
 800eff0:	bf38      	it	cc
 800eff2:	2200      	movcc	r2, #0
 800eff4:	441a      	add	r2, r3
 800eff6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800effa:	b17b      	cbz	r3, 800f01c <__mdiff+0x108>
 800effc:	6107      	str	r7, [r0, #16]
 800effe:	e7a3      	b.n	800ef48 <__mdiff+0x34>
 800f000:	f856 8b04 	ldr.w	r8, [r6], #4
 800f004:	fa11 f288 	uxtah	r2, r1, r8
 800f008:	1414      	asrs	r4, r2, #16
 800f00a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f00e:	b292      	uxth	r2, r2
 800f010:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f014:	f84e 2b04 	str.w	r2, [lr], #4
 800f018:	1421      	asrs	r1, r4, #16
 800f01a:	e7e0      	b.n	800efde <__mdiff+0xca>
 800f01c:	3f01      	subs	r7, #1
 800f01e:	e7ea      	b.n	800eff6 <__mdiff+0xe2>
 800f020:	080105f0 	.word	0x080105f0
 800f024:	0801067c 	.word	0x0801067c

0800f028 <__ulp>:
 800f028:	b082      	sub	sp, #8
 800f02a:	ed8d 0b00 	vstr	d0, [sp]
 800f02e:	9b01      	ldr	r3, [sp, #4]
 800f030:	4912      	ldr	r1, [pc, #72]	; (800f07c <__ulp+0x54>)
 800f032:	4019      	ands	r1, r3
 800f034:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800f038:	2900      	cmp	r1, #0
 800f03a:	dd05      	ble.n	800f048 <__ulp+0x20>
 800f03c:	2200      	movs	r2, #0
 800f03e:	460b      	mov	r3, r1
 800f040:	ec43 2b10 	vmov	d0, r2, r3
 800f044:	b002      	add	sp, #8
 800f046:	4770      	bx	lr
 800f048:	4249      	negs	r1, r1
 800f04a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800f04e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800f052:	f04f 0200 	mov.w	r2, #0
 800f056:	f04f 0300 	mov.w	r3, #0
 800f05a:	da04      	bge.n	800f066 <__ulp+0x3e>
 800f05c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800f060:	fa41 f300 	asr.w	r3, r1, r0
 800f064:	e7ec      	b.n	800f040 <__ulp+0x18>
 800f066:	f1a0 0114 	sub.w	r1, r0, #20
 800f06a:	291e      	cmp	r1, #30
 800f06c:	bfda      	itte	le
 800f06e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800f072:	fa20 f101 	lsrle.w	r1, r0, r1
 800f076:	2101      	movgt	r1, #1
 800f078:	460a      	mov	r2, r1
 800f07a:	e7e1      	b.n	800f040 <__ulp+0x18>
 800f07c:	7ff00000 	.word	0x7ff00000

0800f080 <__b2d>:
 800f080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f082:	6905      	ldr	r5, [r0, #16]
 800f084:	f100 0714 	add.w	r7, r0, #20
 800f088:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f08c:	1f2e      	subs	r6, r5, #4
 800f08e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f092:	4620      	mov	r0, r4
 800f094:	f7ff fd48 	bl	800eb28 <__hi0bits>
 800f098:	f1c0 0320 	rsb	r3, r0, #32
 800f09c:	280a      	cmp	r0, #10
 800f09e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800f11c <__b2d+0x9c>
 800f0a2:	600b      	str	r3, [r1, #0]
 800f0a4:	dc14      	bgt.n	800f0d0 <__b2d+0x50>
 800f0a6:	f1c0 0e0b 	rsb	lr, r0, #11
 800f0aa:	fa24 f10e 	lsr.w	r1, r4, lr
 800f0ae:	42b7      	cmp	r7, r6
 800f0b0:	ea41 030c 	orr.w	r3, r1, ip
 800f0b4:	bf34      	ite	cc
 800f0b6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f0ba:	2100      	movcs	r1, #0
 800f0bc:	3015      	adds	r0, #21
 800f0be:	fa04 f000 	lsl.w	r0, r4, r0
 800f0c2:	fa21 f10e 	lsr.w	r1, r1, lr
 800f0c6:	ea40 0201 	orr.w	r2, r0, r1
 800f0ca:	ec43 2b10 	vmov	d0, r2, r3
 800f0ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0d0:	42b7      	cmp	r7, r6
 800f0d2:	bf3a      	itte	cc
 800f0d4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f0d8:	f1a5 0608 	subcc.w	r6, r5, #8
 800f0dc:	2100      	movcs	r1, #0
 800f0de:	380b      	subs	r0, #11
 800f0e0:	d017      	beq.n	800f112 <__b2d+0x92>
 800f0e2:	f1c0 0c20 	rsb	ip, r0, #32
 800f0e6:	fa04 f500 	lsl.w	r5, r4, r0
 800f0ea:	42be      	cmp	r6, r7
 800f0ec:	fa21 f40c 	lsr.w	r4, r1, ip
 800f0f0:	ea45 0504 	orr.w	r5, r5, r4
 800f0f4:	bf8c      	ite	hi
 800f0f6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f0fa:	2400      	movls	r4, #0
 800f0fc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800f100:	fa01 f000 	lsl.w	r0, r1, r0
 800f104:	fa24 f40c 	lsr.w	r4, r4, ip
 800f108:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f10c:	ea40 0204 	orr.w	r2, r0, r4
 800f110:	e7db      	b.n	800f0ca <__b2d+0x4a>
 800f112:	ea44 030c 	orr.w	r3, r4, ip
 800f116:	460a      	mov	r2, r1
 800f118:	e7d7      	b.n	800f0ca <__b2d+0x4a>
 800f11a:	bf00      	nop
 800f11c:	3ff00000 	.word	0x3ff00000

0800f120 <__d2b>:
 800f120:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f124:	4689      	mov	r9, r1
 800f126:	2101      	movs	r1, #1
 800f128:	ec57 6b10 	vmov	r6, r7, d0
 800f12c:	4690      	mov	r8, r2
 800f12e:	f7ff fc09 	bl	800e944 <_Balloc>
 800f132:	4604      	mov	r4, r0
 800f134:	b930      	cbnz	r0, 800f144 <__d2b+0x24>
 800f136:	4602      	mov	r2, r0
 800f138:	4b25      	ldr	r3, [pc, #148]	; (800f1d0 <__d2b+0xb0>)
 800f13a:	4826      	ldr	r0, [pc, #152]	; (800f1d4 <__d2b+0xb4>)
 800f13c:	f240 310a 	movw	r1, #778	; 0x30a
 800f140:	f000 fb50 	bl	800f7e4 <__assert_func>
 800f144:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f148:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f14c:	bb35      	cbnz	r5, 800f19c <__d2b+0x7c>
 800f14e:	2e00      	cmp	r6, #0
 800f150:	9301      	str	r3, [sp, #4]
 800f152:	d028      	beq.n	800f1a6 <__d2b+0x86>
 800f154:	4668      	mov	r0, sp
 800f156:	9600      	str	r6, [sp, #0]
 800f158:	f7ff fd06 	bl	800eb68 <__lo0bits>
 800f15c:	9900      	ldr	r1, [sp, #0]
 800f15e:	b300      	cbz	r0, 800f1a2 <__d2b+0x82>
 800f160:	9a01      	ldr	r2, [sp, #4]
 800f162:	f1c0 0320 	rsb	r3, r0, #32
 800f166:	fa02 f303 	lsl.w	r3, r2, r3
 800f16a:	430b      	orrs	r3, r1
 800f16c:	40c2      	lsrs	r2, r0
 800f16e:	6163      	str	r3, [r4, #20]
 800f170:	9201      	str	r2, [sp, #4]
 800f172:	9b01      	ldr	r3, [sp, #4]
 800f174:	61a3      	str	r3, [r4, #24]
 800f176:	2b00      	cmp	r3, #0
 800f178:	bf14      	ite	ne
 800f17a:	2202      	movne	r2, #2
 800f17c:	2201      	moveq	r2, #1
 800f17e:	6122      	str	r2, [r4, #16]
 800f180:	b1d5      	cbz	r5, 800f1b8 <__d2b+0x98>
 800f182:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f186:	4405      	add	r5, r0
 800f188:	f8c9 5000 	str.w	r5, [r9]
 800f18c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f190:	f8c8 0000 	str.w	r0, [r8]
 800f194:	4620      	mov	r0, r4
 800f196:	b003      	add	sp, #12
 800f198:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f19c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f1a0:	e7d5      	b.n	800f14e <__d2b+0x2e>
 800f1a2:	6161      	str	r1, [r4, #20]
 800f1a4:	e7e5      	b.n	800f172 <__d2b+0x52>
 800f1a6:	a801      	add	r0, sp, #4
 800f1a8:	f7ff fcde 	bl	800eb68 <__lo0bits>
 800f1ac:	9b01      	ldr	r3, [sp, #4]
 800f1ae:	6163      	str	r3, [r4, #20]
 800f1b0:	2201      	movs	r2, #1
 800f1b2:	6122      	str	r2, [r4, #16]
 800f1b4:	3020      	adds	r0, #32
 800f1b6:	e7e3      	b.n	800f180 <__d2b+0x60>
 800f1b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f1bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f1c0:	f8c9 0000 	str.w	r0, [r9]
 800f1c4:	6918      	ldr	r0, [r3, #16]
 800f1c6:	f7ff fcaf 	bl	800eb28 <__hi0bits>
 800f1ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f1ce:	e7df      	b.n	800f190 <__d2b+0x70>
 800f1d0:	080105f0 	.word	0x080105f0
 800f1d4:	0801067c 	.word	0x0801067c

0800f1d8 <__ratio>:
 800f1d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1dc:	4688      	mov	r8, r1
 800f1de:	4669      	mov	r1, sp
 800f1e0:	4681      	mov	r9, r0
 800f1e2:	f7ff ff4d 	bl	800f080 <__b2d>
 800f1e6:	a901      	add	r1, sp, #4
 800f1e8:	4640      	mov	r0, r8
 800f1ea:	ec55 4b10 	vmov	r4, r5, d0
 800f1ee:	f7ff ff47 	bl	800f080 <__b2d>
 800f1f2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f1f6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f1fa:	eba3 0c02 	sub.w	ip, r3, r2
 800f1fe:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f202:	1a9b      	subs	r3, r3, r2
 800f204:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f208:	ec51 0b10 	vmov	r0, r1, d0
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	bfd6      	itet	le
 800f210:	460a      	movle	r2, r1
 800f212:	462a      	movgt	r2, r5
 800f214:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f218:	468b      	mov	fp, r1
 800f21a:	462f      	mov	r7, r5
 800f21c:	bfd4      	ite	le
 800f21e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f222:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f226:	4620      	mov	r0, r4
 800f228:	ee10 2a10 	vmov	r2, s0
 800f22c:	465b      	mov	r3, fp
 800f22e:	4639      	mov	r1, r7
 800f230:	f7f1 fb2c 	bl	800088c <__aeabi_ddiv>
 800f234:	ec41 0b10 	vmov	d0, r0, r1
 800f238:	b003      	add	sp, #12
 800f23a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f23e <__copybits>:
 800f23e:	3901      	subs	r1, #1
 800f240:	b570      	push	{r4, r5, r6, lr}
 800f242:	1149      	asrs	r1, r1, #5
 800f244:	6914      	ldr	r4, [r2, #16]
 800f246:	3101      	adds	r1, #1
 800f248:	f102 0314 	add.w	r3, r2, #20
 800f24c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f250:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f254:	1f05      	subs	r5, r0, #4
 800f256:	42a3      	cmp	r3, r4
 800f258:	d30c      	bcc.n	800f274 <__copybits+0x36>
 800f25a:	1aa3      	subs	r3, r4, r2
 800f25c:	3b11      	subs	r3, #17
 800f25e:	f023 0303 	bic.w	r3, r3, #3
 800f262:	3211      	adds	r2, #17
 800f264:	42a2      	cmp	r2, r4
 800f266:	bf88      	it	hi
 800f268:	2300      	movhi	r3, #0
 800f26a:	4418      	add	r0, r3
 800f26c:	2300      	movs	r3, #0
 800f26e:	4288      	cmp	r0, r1
 800f270:	d305      	bcc.n	800f27e <__copybits+0x40>
 800f272:	bd70      	pop	{r4, r5, r6, pc}
 800f274:	f853 6b04 	ldr.w	r6, [r3], #4
 800f278:	f845 6f04 	str.w	r6, [r5, #4]!
 800f27c:	e7eb      	b.n	800f256 <__copybits+0x18>
 800f27e:	f840 3b04 	str.w	r3, [r0], #4
 800f282:	e7f4      	b.n	800f26e <__copybits+0x30>

0800f284 <__any_on>:
 800f284:	f100 0214 	add.w	r2, r0, #20
 800f288:	6900      	ldr	r0, [r0, #16]
 800f28a:	114b      	asrs	r3, r1, #5
 800f28c:	4298      	cmp	r0, r3
 800f28e:	b510      	push	{r4, lr}
 800f290:	db11      	blt.n	800f2b6 <__any_on+0x32>
 800f292:	dd0a      	ble.n	800f2aa <__any_on+0x26>
 800f294:	f011 011f 	ands.w	r1, r1, #31
 800f298:	d007      	beq.n	800f2aa <__any_on+0x26>
 800f29a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f29e:	fa24 f001 	lsr.w	r0, r4, r1
 800f2a2:	fa00 f101 	lsl.w	r1, r0, r1
 800f2a6:	428c      	cmp	r4, r1
 800f2a8:	d10b      	bne.n	800f2c2 <__any_on+0x3e>
 800f2aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f2ae:	4293      	cmp	r3, r2
 800f2b0:	d803      	bhi.n	800f2ba <__any_on+0x36>
 800f2b2:	2000      	movs	r0, #0
 800f2b4:	bd10      	pop	{r4, pc}
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	e7f7      	b.n	800f2aa <__any_on+0x26>
 800f2ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f2be:	2900      	cmp	r1, #0
 800f2c0:	d0f5      	beq.n	800f2ae <__any_on+0x2a>
 800f2c2:	2001      	movs	r0, #1
 800f2c4:	e7f6      	b.n	800f2b4 <__any_on+0x30>

0800f2c6 <_calloc_r>:
 800f2c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f2c8:	fba1 2402 	umull	r2, r4, r1, r2
 800f2cc:	b94c      	cbnz	r4, 800f2e2 <_calloc_r+0x1c>
 800f2ce:	4611      	mov	r1, r2
 800f2d0:	9201      	str	r2, [sp, #4]
 800f2d2:	f000 f87b 	bl	800f3cc <_malloc_r>
 800f2d6:	9a01      	ldr	r2, [sp, #4]
 800f2d8:	4605      	mov	r5, r0
 800f2da:	b930      	cbnz	r0, 800f2ea <_calloc_r+0x24>
 800f2dc:	4628      	mov	r0, r5
 800f2de:	b003      	add	sp, #12
 800f2e0:	bd30      	pop	{r4, r5, pc}
 800f2e2:	220c      	movs	r2, #12
 800f2e4:	6002      	str	r2, [r0, #0]
 800f2e6:	2500      	movs	r5, #0
 800f2e8:	e7f8      	b.n	800f2dc <_calloc_r+0x16>
 800f2ea:	4621      	mov	r1, r4
 800f2ec:	f7fc fbc0 	bl	800ba70 <memset>
 800f2f0:	e7f4      	b.n	800f2dc <_calloc_r+0x16>
	...

0800f2f4 <_free_r>:
 800f2f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f2f6:	2900      	cmp	r1, #0
 800f2f8:	d044      	beq.n	800f384 <_free_r+0x90>
 800f2fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f2fe:	9001      	str	r0, [sp, #4]
 800f300:	2b00      	cmp	r3, #0
 800f302:	f1a1 0404 	sub.w	r4, r1, #4
 800f306:	bfb8      	it	lt
 800f308:	18e4      	addlt	r4, r4, r3
 800f30a:	f000 fab5 	bl	800f878 <__malloc_lock>
 800f30e:	4a1e      	ldr	r2, [pc, #120]	; (800f388 <_free_r+0x94>)
 800f310:	9801      	ldr	r0, [sp, #4]
 800f312:	6813      	ldr	r3, [r2, #0]
 800f314:	b933      	cbnz	r3, 800f324 <_free_r+0x30>
 800f316:	6063      	str	r3, [r4, #4]
 800f318:	6014      	str	r4, [r2, #0]
 800f31a:	b003      	add	sp, #12
 800f31c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f320:	f000 bab0 	b.w	800f884 <__malloc_unlock>
 800f324:	42a3      	cmp	r3, r4
 800f326:	d908      	bls.n	800f33a <_free_r+0x46>
 800f328:	6825      	ldr	r5, [r4, #0]
 800f32a:	1961      	adds	r1, r4, r5
 800f32c:	428b      	cmp	r3, r1
 800f32e:	bf01      	itttt	eq
 800f330:	6819      	ldreq	r1, [r3, #0]
 800f332:	685b      	ldreq	r3, [r3, #4]
 800f334:	1949      	addeq	r1, r1, r5
 800f336:	6021      	streq	r1, [r4, #0]
 800f338:	e7ed      	b.n	800f316 <_free_r+0x22>
 800f33a:	461a      	mov	r2, r3
 800f33c:	685b      	ldr	r3, [r3, #4]
 800f33e:	b10b      	cbz	r3, 800f344 <_free_r+0x50>
 800f340:	42a3      	cmp	r3, r4
 800f342:	d9fa      	bls.n	800f33a <_free_r+0x46>
 800f344:	6811      	ldr	r1, [r2, #0]
 800f346:	1855      	adds	r5, r2, r1
 800f348:	42a5      	cmp	r5, r4
 800f34a:	d10b      	bne.n	800f364 <_free_r+0x70>
 800f34c:	6824      	ldr	r4, [r4, #0]
 800f34e:	4421      	add	r1, r4
 800f350:	1854      	adds	r4, r2, r1
 800f352:	42a3      	cmp	r3, r4
 800f354:	6011      	str	r1, [r2, #0]
 800f356:	d1e0      	bne.n	800f31a <_free_r+0x26>
 800f358:	681c      	ldr	r4, [r3, #0]
 800f35a:	685b      	ldr	r3, [r3, #4]
 800f35c:	6053      	str	r3, [r2, #4]
 800f35e:	4421      	add	r1, r4
 800f360:	6011      	str	r1, [r2, #0]
 800f362:	e7da      	b.n	800f31a <_free_r+0x26>
 800f364:	d902      	bls.n	800f36c <_free_r+0x78>
 800f366:	230c      	movs	r3, #12
 800f368:	6003      	str	r3, [r0, #0]
 800f36a:	e7d6      	b.n	800f31a <_free_r+0x26>
 800f36c:	6825      	ldr	r5, [r4, #0]
 800f36e:	1961      	adds	r1, r4, r5
 800f370:	428b      	cmp	r3, r1
 800f372:	bf04      	itt	eq
 800f374:	6819      	ldreq	r1, [r3, #0]
 800f376:	685b      	ldreq	r3, [r3, #4]
 800f378:	6063      	str	r3, [r4, #4]
 800f37a:	bf04      	itt	eq
 800f37c:	1949      	addeq	r1, r1, r5
 800f37e:	6021      	streq	r1, [r4, #0]
 800f380:	6054      	str	r4, [r2, #4]
 800f382:	e7ca      	b.n	800f31a <_free_r+0x26>
 800f384:	b003      	add	sp, #12
 800f386:	bd30      	pop	{r4, r5, pc}
 800f388:	20002084 	.word	0x20002084

0800f38c <sbrk_aligned>:
 800f38c:	b570      	push	{r4, r5, r6, lr}
 800f38e:	4e0e      	ldr	r6, [pc, #56]	; (800f3c8 <sbrk_aligned+0x3c>)
 800f390:	460c      	mov	r4, r1
 800f392:	6831      	ldr	r1, [r6, #0]
 800f394:	4605      	mov	r5, r0
 800f396:	b911      	cbnz	r1, 800f39e <sbrk_aligned+0x12>
 800f398:	f000 f9f2 	bl	800f780 <_sbrk_r>
 800f39c:	6030      	str	r0, [r6, #0]
 800f39e:	4621      	mov	r1, r4
 800f3a0:	4628      	mov	r0, r5
 800f3a2:	f000 f9ed 	bl	800f780 <_sbrk_r>
 800f3a6:	1c43      	adds	r3, r0, #1
 800f3a8:	d00a      	beq.n	800f3c0 <sbrk_aligned+0x34>
 800f3aa:	1cc4      	adds	r4, r0, #3
 800f3ac:	f024 0403 	bic.w	r4, r4, #3
 800f3b0:	42a0      	cmp	r0, r4
 800f3b2:	d007      	beq.n	800f3c4 <sbrk_aligned+0x38>
 800f3b4:	1a21      	subs	r1, r4, r0
 800f3b6:	4628      	mov	r0, r5
 800f3b8:	f000 f9e2 	bl	800f780 <_sbrk_r>
 800f3bc:	3001      	adds	r0, #1
 800f3be:	d101      	bne.n	800f3c4 <sbrk_aligned+0x38>
 800f3c0:	f04f 34ff 	mov.w	r4, #4294967295
 800f3c4:	4620      	mov	r0, r4
 800f3c6:	bd70      	pop	{r4, r5, r6, pc}
 800f3c8:	20002088 	.word	0x20002088

0800f3cc <_malloc_r>:
 800f3cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3d0:	1ccd      	adds	r5, r1, #3
 800f3d2:	f025 0503 	bic.w	r5, r5, #3
 800f3d6:	3508      	adds	r5, #8
 800f3d8:	2d0c      	cmp	r5, #12
 800f3da:	bf38      	it	cc
 800f3dc:	250c      	movcc	r5, #12
 800f3de:	2d00      	cmp	r5, #0
 800f3e0:	4607      	mov	r7, r0
 800f3e2:	db01      	blt.n	800f3e8 <_malloc_r+0x1c>
 800f3e4:	42a9      	cmp	r1, r5
 800f3e6:	d905      	bls.n	800f3f4 <_malloc_r+0x28>
 800f3e8:	230c      	movs	r3, #12
 800f3ea:	603b      	str	r3, [r7, #0]
 800f3ec:	2600      	movs	r6, #0
 800f3ee:	4630      	mov	r0, r6
 800f3f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3f4:	4e2e      	ldr	r6, [pc, #184]	; (800f4b0 <_malloc_r+0xe4>)
 800f3f6:	f000 fa3f 	bl	800f878 <__malloc_lock>
 800f3fa:	6833      	ldr	r3, [r6, #0]
 800f3fc:	461c      	mov	r4, r3
 800f3fe:	bb34      	cbnz	r4, 800f44e <_malloc_r+0x82>
 800f400:	4629      	mov	r1, r5
 800f402:	4638      	mov	r0, r7
 800f404:	f7ff ffc2 	bl	800f38c <sbrk_aligned>
 800f408:	1c43      	adds	r3, r0, #1
 800f40a:	4604      	mov	r4, r0
 800f40c:	d14d      	bne.n	800f4aa <_malloc_r+0xde>
 800f40e:	6834      	ldr	r4, [r6, #0]
 800f410:	4626      	mov	r6, r4
 800f412:	2e00      	cmp	r6, #0
 800f414:	d140      	bne.n	800f498 <_malloc_r+0xcc>
 800f416:	6823      	ldr	r3, [r4, #0]
 800f418:	4631      	mov	r1, r6
 800f41a:	4638      	mov	r0, r7
 800f41c:	eb04 0803 	add.w	r8, r4, r3
 800f420:	f000 f9ae 	bl	800f780 <_sbrk_r>
 800f424:	4580      	cmp	r8, r0
 800f426:	d13a      	bne.n	800f49e <_malloc_r+0xd2>
 800f428:	6821      	ldr	r1, [r4, #0]
 800f42a:	3503      	adds	r5, #3
 800f42c:	1a6d      	subs	r5, r5, r1
 800f42e:	f025 0503 	bic.w	r5, r5, #3
 800f432:	3508      	adds	r5, #8
 800f434:	2d0c      	cmp	r5, #12
 800f436:	bf38      	it	cc
 800f438:	250c      	movcc	r5, #12
 800f43a:	4629      	mov	r1, r5
 800f43c:	4638      	mov	r0, r7
 800f43e:	f7ff ffa5 	bl	800f38c <sbrk_aligned>
 800f442:	3001      	adds	r0, #1
 800f444:	d02b      	beq.n	800f49e <_malloc_r+0xd2>
 800f446:	6823      	ldr	r3, [r4, #0]
 800f448:	442b      	add	r3, r5
 800f44a:	6023      	str	r3, [r4, #0]
 800f44c:	e00e      	b.n	800f46c <_malloc_r+0xa0>
 800f44e:	6822      	ldr	r2, [r4, #0]
 800f450:	1b52      	subs	r2, r2, r5
 800f452:	d41e      	bmi.n	800f492 <_malloc_r+0xc6>
 800f454:	2a0b      	cmp	r2, #11
 800f456:	d916      	bls.n	800f486 <_malloc_r+0xba>
 800f458:	1961      	adds	r1, r4, r5
 800f45a:	42a3      	cmp	r3, r4
 800f45c:	6025      	str	r5, [r4, #0]
 800f45e:	bf18      	it	ne
 800f460:	6059      	strne	r1, [r3, #4]
 800f462:	6863      	ldr	r3, [r4, #4]
 800f464:	bf08      	it	eq
 800f466:	6031      	streq	r1, [r6, #0]
 800f468:	5162      	str	r2, [r4, r5]
 800f46a:	604b      	str	r3, [r1, #4]
 800f46c:	4638      	mov	r0, r7
 800f46e:	f104 060b 	add.w	r6, r4, #11
 800f472:	f000 fa07 	bl	800f884 <__malloc_unlock>
 800f476:	f026 0607 	bic.w	r6, r6, #7
 800f47a:	1d23      	adds	r3, r4, #4
 800f47c:	1af2      	subs	r2, r6, r3
 800f47e:	d0b6      	beq.n	800f3ee <_malloc_r+0x22>
 800f480:	1b9b      	subs	r3, r3, r6
 800f482:	50a3      	str	r3, [r4, r2]
 800f484:	e7b3      	b.n	800f3ee <_malloc_r+0x22>
 800f486:	6862      	ldr	r2, [r4, #4]
 800f488:	42a3      	cmp	r3, r4
 800f48a:	bf0c      	ite	eq
 800f48c:	6032      	streq	r2, [r6, #0]
 800f48e:	605a      	strne	r2, [r3, #4]
 800f490:	e7ec      	b.n	800f46c <_malloc_r+0xa0>
 800f492:	4623      	mov	r3, r4
 800f494:	6864      	ldr	r4, [r4, #4]
 800f496:	e7b2      	b.n	800f3fe <_malloc_r+0x32>
 800f498:	4634      	mov	r4, r6
 800f49a:	6876      	ldr	r6, [r6, #4]
 800f49c:	e7b9      	b.n	800f412 <_malloc_r+0x46>
 800f49e:	230c      	movs	r3, #12
 800f4a0:	603b      	str	r3, [r7, #0]
 800f4a2:	4638      	mov	r0, r7
 800f4a4:	f000 f9ee 	bl	800f884 <__malloc_unlock>
 800f4a8:	e7a1      	b.n	800f3ee <_malloc_r+0x22>
 800f4aa:	6025      	str	r5, [r4, #0]
 800f4ac:	e7de      	b.n	800f46c <_malloc_r+0xa0>
 800f4ae:	bf00      	nop
 800f4b0:	20002084 	.word	0x20002084

0800f4b4 <__ssputs_r>:
 800f4b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4b8:	688e      	ldr	r6, [r1, #8]
 800f4ba:	429e      	cmp	r6, r3
 800f4bc:	4682      	mov	sl, r0
 800f4be:	460c      	mov	r4, r1
 800f4c0:	4690      	mov	r8, r2
 800f4c2:	461f      	mov	r7, r3
 800f4c4:	d838      	bhi.n	800f538 <__ssputs_r+0x84>
 800f4c6:	898a      	ldrh	r2, [r1, #12]
 800f4c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f4cc:	d032      	beq.n	800f534 <__ssputs_r+0x80>
 800f4ce:	6825      	ldr	r5, [r4, #0]
 800f4d0:	6909      	ldr	r1, [r1, #16]
 800f4d2:	eba5 0901 	sub.w	r9, r5, r1
 800f4d6:	6965      	ldr	r5, [r4, #20]
 800f4d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f4dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f4e0:	3301      	adds	r3, #1
 800f4e2:	444b      	add	r3, r9
 800f4e4:	106d      	asrs	r5, r5, #1
 800f4e6:	429d      	cmp	r5, r3
 800f4e8:	bf38      	it	cc
 800f4ea:	461d      	movcc	r5, r3
 800f4ec:	0553      	lsls	r3, r2, #21
 800f4ee:	d531      	bpl.n	800f554 <__ssputs_r+0xa0>
 800f4f0:	4629      	mov	r1, r5
 800f4f2:	f7ff ff6b 	bl	800f3cc <_malloc_r>
 800f4f6:	4606      	mov	r6, r0
 800f4f8:	b950      	cbnz	r0, 800f510 <__ssputs_r+0x5c>
 800f4fa:	230c      	movs	r3, #12
 800f4fc:	f8ca 3000 	str.w	r3, [sl]
 800f500:	89a3      	ldrh	r3, [r4, #12]
 800f502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f506:	81a3      	strh	r3, [r4, #12]
 800f508:	f04f 30ff 	mov.w	r0, #4294967295
 800f50c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f510:	6921      	ldr	r1, [r4, #16]
 800f512:	464a      	mov	r2, r9
 800f514:	f7ff fa08 	bl	800e928 <memcpy>
 800f518:	89a3      	ldrh	r3, [r4, #12]
 800f51a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f51e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f522:	81a3      	strh	r3, [r4, #12]
 800f524:	6126      	str	r6, [r4, #16]
 800f526:	6165      	str	r5, [r4, #20]
 800f528:	444e      	add	r6, r9
 800f52a:	eba5 0509 	sub.w	r5, r5, r9
 800f52e:	6026      	str	r6, [r4, #0]
 800f530:	60a5      	str	r5, [r4, #8]
 800f532:	463e      	mov	r6, r7
 800f534:	42be      	cmp	r6, r7
 800f536:	d900      	bls.n	800f53a <__ssputs_r+0x86>
 800f538:	463e      	mov	r6, r7
 800f53a:	6820      	ldr	r0, [r4, #0]
 800f53c:	4632      	mov	r2, r6
 800f53e:	4641      	mov	r1, r8
 800f540:	f000 f980 	bl	800f844 <memmove>
 800f544:	68a3      	ldr	r3, [r4, #8]
 800f546:	1b9b      	subs	r3, r3, r6
 800f548:	60a3      	str	r3, [r4, #8]
 800f54a:	6823      	ldr	r3, [r4, #0]
 800f54c:	4433      	add	r3, r6
 800f54e:	6023      	str	r3, [r4, #0]
 800f550:	2000      	movs	r0, #0
 800f552:	e7db      	b.n	800f50c <__ssputs_r+0x58>
 800f554:	462a      	mov	r2, r5
 800f556:	f000 f99b 	bl	800f890 <_realloc_r>
 800f55a:	4606      	mov	r6, r0
 800f55c:	2800      	cmp	r0, #0
 800f55e:	d1e1      	bne.n	800f524 <__ssputs_r+0x70>
 800f560:	6921      	ldr	r1, [r4, #16]
 800f562:	4650      	mov	r0, sl
 800f564:	f7ff fec6 	bl	800f2f4 <_free_r>
 800f568:	e7c7      	b.n	800f4fa <__ssputs_r+0x46>
	...

0800f56c <_svfiprintf_r>:
 800f56c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f570:	4698      	mov	r8, r3
 800f572:	898b      	ldrh	r3, [r1, #12]
 800f574:	061b      	lsls	r3, r3, #24
 800f576:	b09d      	sub	sp, #116	; 0x74
 800f578:	4607      	mov	r7, r0
 800f57a:	460d      	mov	r5, r1
 800f57c:	4614      	mov	r4, r2
 800f57e:	d50e      	bpl.n	800f59e <_svfiprintf_r+0x32>
 800f580:	690b      	ldr	r3, [r1, #16]
 800f582:	b963      	cbnz	r3, 800f59e <_svfiprintf_r+0x32>
 800f584:	2140      	movs	r1, #64	; 0x40
 800f586:	f7ff ff21 	bl	800f3cc <_malloc_r>
 800f58a:	6028      	str	r0, [r5, #0]
 800f58c:	6128      	str	r0, [r5, #16]
 800f58e:	b920      	cbnz	r0, 800f59a <_svfiprintf_r+0x2e>
 800f590:	230c      	movs	r3, #12
 800f592:	603b      	str	r3, [r7, #0]
 800f594:	f04f 30ff 	mov.w	r0, #4294967295
 800f598:	e0d1      	b.n	800f73e <_svfiprintf_r+0x1d2>
 800f59a:	2340      	movs	r3, #64	; 0x40
 800f59c:	616b      	str	r3, [r5, #20]
 800f59e:	2300      	movs	r3, #0
 800f5a0:	9309      	str	r3, [sp, #36]	; 0x24
 800f5a2:	2320      	movs	r3, #32
 800f5a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f5a8:	f8cd 800c 	str.w	r8, [sp, #12]
 800f5ac:	2330      	movs	r3, #48	; 0x30
 800f5ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f758 <_svfiprintf_r+0x1ec>
 800f5b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f5b6:	f04f 0901 	mov.w	r9, #1
 800f5ba:	4623      	mov	r3, r4
 800f5bc:	469a      	mov	sl, r3
 800f5be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f5c2:	b10a      	cbz	r2, 800f5c8 <_svfiprintf_r+0x5c>
 800f5c4:	2a25      	cmp	r2, #37	; 0x25
 800f5c6:	d1f9      	bne.n	800f5bc <_svfiprintf_r+0x50>
 800f5c8:	ebba 0b04 	subs.w	fp, sl, r4
 800f5cc:	d00b      	beq.n	800f5e6 <_svfiprintf_r+0x7a>
 800f5ce:	465b      	mov	r3, fp
 800f5d0:	4622      	mov	r2, r4
 800f5d2:	4629      	mov	r1, r5
 800f5d4:	4638      	mov	r0, r7
 800f5d6:	f7ff ff6d 	bl	800f4b4 <__ssputs_r>
 800f5da:	3001      	adds	r0, #1
 800f5dc:	f000 80aa 	beq.w	800f734 <_svfiprintf_r+0x1c8>
 800f5e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f5e2:	445a      	add	r2, fp
 800f5e4:	9209      	str	r2, [sp, #36]	; 0x24
 800f5e6:	f89a 3000 	ldrb.w	r3, [sl]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	f000 80a2 	beq.w	800f734 <_svfiprintf_r+0x1c8>
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	f04f 32ff 	mov.w	r2, #4294967295
 800f5f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f5fa:	f10a 0a01 	add.w	sl, sl, #1
 800f5fe:	9304      	str	r3, [sp, #16]
 800f600:	9307      	str	r3, [sp, #28]
 800f602:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f606:	931a      	str	r3, [sp, #104]	; 0x68
 800f608:	4654      	mov	r4, sl
 800f60a:	2205      	movs	r2, #5
 800f60c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f610:	4851      	ldr	r0, [pc, #324]	; (800f758 <_svfiprintf_r+0x1ec>)
 800f612:	f7f0 fe05 	bl	8000220 <memchr>
 800f616:	9a04      	ldr	r2, [sp, #16]
 800f618:	b9d8      	cbnz	r0, 800f652 <_svfiprintf_r+0xe6>
 800f61a:	06d0      	lsls	r0, r2, #27
 800f61c:	bf44      	itt	mi
 800f61e:	2320      	movmi	r3, #32
 800f620:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f624:	0711      	lsls	r1, r2, #28
 800f626:	bf44      	itt	mi
 800f628:	232b      	movmi	r3, #43	; 0x2b
 800f62a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f62e:	f89a 3000 	ldrb.w	r3, [sl]
 800f632:	2b2a      	cmp	r3, #42	; 0x2a
 800f634:	d015      	beq.n	800f662 <_svfiprintf_r+0xf6>
 800f636:	9a07      	ldr	r2, [sp, #28]
 800f638:	4654      	mov	r4, sl
 800f63a:	2000      	movs	r0, #0
 800f63c:	f04f 0c0a 	mov.w	ip, #10
 800f640:	4621      	mov	r1, r4
 800f642:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f646:	3b30      	subs	r3, #48	; 0x30
 800f648:	2b09      	cmp	r3, #9
 800f64a:	d94e      	bls.n	800f6ea <_svfiprintf_r+0x17e>
 800f64c:	b1b0      	cbz	r0, 800f67c <_svfiprintf_r+0x110>
 800f64e:	9207      	str	r2, [sp, #28]
 800f650:	e014      	b.n	800f67c <_svfiprintf_r+0x110>
 800f652:	eba0 0308 	sub.w	r3, r0, r8
 800f656:	fa09 f303 	lsl.w	r3, r9, r3
 800f65a:	4313      	orrs	r3, r2
 800f65c:	9304      	str	r3, [sp, #16]
 800f65e:	46a2      	mov	sl, r4
 800f660:	e7d2      	b.n	800f608 <_svfiprintf_r+0x9c>
 800f662:	9b03      	ldr	r3, [sp, #12]
 800f664:	1d19      	adds	r1, r3, #4
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	9103      	str	r1, [sp, #12]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	bfbb      	ittet	lt
 800f66e:	425b      	neglt	r3, r3
 800f670:	f042 0202 	orrlt.w	r2, r2, #2
 800f674:	9307      	strge	r3, [sp, #28]
 800f676:	9307      	strlt	r3, [sp, #28]
 800f678:	bfb8      	it	lt
 800f67a:	9204      	strlt	r2, [sp, #16]
 800f67c:	7823      	ldrb	r3, [r4, #0]
 800f67e:	2b2e      	cmp	r3, #46	; 0x2e
 800f680:	d10c      	bne.n	800f69c <_svfiprintf_r+0x130>
 800f682:	7863      	ldrb	r3, [r4, #1]
 800f684:	2b2a      	cmp	r3, #42	; 0x2a
 800f686:	d135      	bne.n	800f6f4 <_svfiprintf_r+0x188>
 800f688:	9b03      	ldr	r3, [sp, #12]
 800f68a:	1d1a      	adds	r2, r3, #4
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	9203      	str	r2, [sp, #12]
 800f690:	2b00      	cmp	r3, #0
 800f692:	bfb8      	it	lt
 800f694:	f04f 33ff 	movlt.w	r3, #4294967295
 800f698:	3402      	adds	r4, #2
 800f69a:	9305      	str	r3, [sp, #20]
 800f69c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f768 <_svfiprintf_r+0x1fc>
 800f6a0:	7821      	ldrb	r1, [r4, #0]
 800f6a2:	2203      	movs	r2, #3
 800f6a4:	4650      	mov	r0, sl
 800f6a6:	f7f0 fdbb 	bl	8000220 <memchr>
 800f6aa:	b140      	cbz	r0, 800f6be <_svfiprintf_r+0x152>
 800f6ac:	2340      	movs	r3, #64	; 0x40
 800f6ae:	eba0 000a 	sub.w	r0, r0, sl
 800f6b2:	fa03 f000 	lsl.w	r0, r3, r0
 800f6b6:	9b04      	ldr	r3, [sp, #16]
 800f6b8:	4303      	orrs	r3, r0
 800f6ba:	3401      	adds	r4, #1
 800f6bc:	9304      	str	r3, [sp, #16]
 800f6be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6c2:	4826      	ldr	r0, [pc, #152]	; (800f75c <_svfiprintf_r+0x1f0>)
 800f6c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f6c8:	2206      	movs	r2, #6
 800f6ca:	f7f0 fda9 	bl	8000220 <memchr>
 800f6ce:	2800      	cmp	r0, #0
 800f6d0:	d038      	beq.n	800f744 <_svfiprintf_r+0x1d8>
 800f6d2:	4b23      	ldr	r3, [pc, #140]	; (800f760 <_svfiprintf_r+0x1f4>)
 800f6d4:	bb1b      	cbnz	r3, 800f71e <_svfiprintf_r+0x1b2>
 800f6d6:	9b03      	ldr	r3, [sp, #12]
 800f6d8:	3307      	adds	r3, #7
 800f6da:	f023 0307 	bic.w	r3, r3, #7
 800f6de:	3308      	adds	r3, #8
 800f6e0:	9303      	str	r3, [sp, #12]
 800f6e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6e4:	4433      	add	r3, r6
 800f6e6:	9309      	str	r3, [sp, #36]	; 0x24
 800f6e8:	e767      	b.n	800f5ba <_svfiprintf_r+0x4e>
 800f6ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800f6ee:	460c      	mov	r4, r1
 800f6f0:	2001      	movs	r0, #1
 800f6f2:	e7a5      	b.n	800f640 <_svfiprintf_r+0xd4>
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	3401      	adds	r4, #1
 800f6f8:	9305      	str	r3, [sp, #20]
 800f6fa:	4619      	mov	r1, r3
 800f6fc:	f04f 0c0a 	mov.w	ip, #10
 800f700:	4620      	mov	r0, r4
 800f702:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f706:	3a30      	subs	r2, #48	; 0x30
 800f708:	2a09      	cmp	r2, #9
 800f70a:	d903      	bls.n	800f714 <_svfiprintf_r+0x1a8>
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d0c5      	beq.n	800f69c <_svfiprintf_r+0x130>
 800f710:	9105      	str	r1, [sp, #20]
 800f712:	e7c3      	b.n	800f69c <_svfiprintf_r+0x130>
 800f714:	fb0c 2101 	mla	r1, ip, r1, r2
 800f718:	4604      	mov	r4, r0
 800f71a:	2301      	movs	r3, #1
 800f71c:	e7f0      	b.n	800f700 <_svfiprintf_r+0x194>
 800f71e:	ab03      	add	r3, sp, #12
 800f720:	9300      	str	r3, [sp, #0]
 800f722:	462a      	mov	r2, r5
 800f724:	4b0f      	ldr	r3, [pc, #60]	; (800f764 <_svfiprintf_r+0x1f8>)
 800f726:	a904      	add	r1, sp, #16
 800f728:	4638      	mov	r0, r7
 800f72a:	f7fc fa49 	bl	800bbc0 <_printf_float>
 800f72e:	1c42      	adds	r2, r0, #1
 800f730:	4606      	mov	r6, r0
 800f732:	d1d6      	bne.n	800f6e2 <_svfiprintf_r+0x176>
 800f734:	89ab      	ldrh	r3, [r5, #12]
 800f736:	065b      	lsls	r3, r3, #25
 800f738:	f53f af2c 	bmi.w	800f594 <_svfiprintf_r+0x28>
 800f73c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f73e:	b01d      	add	sp, #116	; 0x74
 800f740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f744:	ab03      	add	r3, sp, #12
 800f746:	9300      	str	r3, [sp, #0]
 800f748:	462a      	mov	r2, r5
 800f74a:	4b06      	ldr	r3, [pc, #24]	; (800f764 <_svfiprintf_r+0x1f8>)
 800f74c:	a904      	add	r1, sp, #16
 800f74e:	4638      	mov	r0, r7
 800f750:	f7fc fcda 	bl	800c108 <_printf_i>
 800f754:	e7eb      	b.n	800f72e <_svfiprintf_r+0x1c2>
 800f756:	bf00      	nop
 800f758:	080107d4 	.word	0x080107d4
 800f75c:	080107de 	.word	0x080107de
 800f760:	0800bbc1 	.word	0x0800bbc1
 800f764:	0800f4b5 	.word	0x0800f4b5
 800f768:	080107da 	.word	0x080107da
 800f76c:	00000000 	.word	0x00000000

0800f770 <nan>:
 800f770:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f778 <nan+0x8>
 800f774:	4770      	bx	lr
 800f776:	bf00      	nop
 800f778:	00000000 	.word	0x00000000
 800f77c:	7ff80000 	.word	0x7ff80000

0800f780 <_sbrk_r>:
 800f780:	b538      	push	{r3, r4, r5, lr}
 800f782:	4d06      	ldr	r5, [pc, #24]	; (800f79c <_sbrk_r+0x1c>)
 800f784:	2300      	movs	r3, #0
 800f786:	4604      	mov	r4, r0
 800f788:	4608      	mov	r0, r1
 800f78a:	602b      	str	r3, [r5, #0]
 800f78c:	f7f2 f932 	bl	80019f4 <_sbrk>
 800f790:	1c43      	adds	r3, r0, #1
 800f792:	d102      	bne.n	800f79a <_sbrk_r+0x1a>
 800f794:	682b      	ldr	r3, [r5, #0]
 800f796:	b103      	cbz	r3, 800f79a <_sbrk_r+0x1a>
 800f798:	6023      	str	r3, [r4, #0]
 800f79a:	bd38      	pop	{r3, r4, r5, pc}
 800f79c:	2000208c 	.word	0x2000208c

0800f7a0 <strncmp>:
 800f7a0:	b510      	push	{r4, lr}
 800f7a2:	b17a      	cbz	r2, 800f7c4 <strncmp+0x24>
 800f7a4:	4603      	mov	r3, r0
 800f7a6:	3901      	subs	r1, #1
 800f7a8:	1884      	adds	r4, r0, r2
 800f7aa:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f7ae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f7b2:	4290      	cmp	r0, r2
 800f7b4:	d101      	bne.n	800f7ba <strncmp+0x1a>
 800f7b6:	42a3      	cmp	r3, r4
 800f7b8:	d101      	bne.n	800f7be <strncmp+0x1e>
 800f7ba:	1a80      	subs	r0, r0, r2
 800f7bc:	bd10      	pop	{r4, pc}
 800f7be:	2800      	cmp	r0, #0
 800f7c0:	d1f3      	bne.n	800f7aa <strncmp+0xa>
 800f7c2:	e7fa      	b.n	800f7ba <strncmp+0x1a>
 800f7c4:	4610      	mov	r0, r2
 800f7c6:	e7f9      	b.n	800f7bc <strncmp+0x1c>

0800f7c8 <__ascii_wctomb>:
 800f7c8:	b149      	cbz	r1, 800f7de <__ascii_wctomb+0x16>
 800f7ca:	2aff      	cmp	r2, #255	; 0xff
 800f7cc:	bf85      	ittet	hi
 800f7ce:	238a      	movhi	r3, #138	; 0x8a
 800f7d0:	6003      	strhi	r3, [r0, #0]
 800f7d2:	700a      	strbls	r2, [r1, #0]
 800f7d4:	f04f 30ff 	movhi.w	r0, #4294967295
 800f7d8:	bf98      	it	ls
 800f7da:	2001      	movls	r0, #1
 800f7dc:	4770      	bx	lr
 800f7de:	4608      	mov	r0, r1
 800f7e0:	4770      	bx	lr
	...

0800f7e4 <__assert_func>:
 800f7e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f7e6:	4614      	mov	r4, r2
 800f7e8:	461a      	mov	r2, r3
 800f7ea:	4b09      	ldr	r3, [pc, #36]	; (800f810 <__assert_func+0x2c>)
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	4605      	mov	r5, r0
 800f7f0:	68d8      	ldr	r0, [r3, #12]
 800f7f2:	b14c      	cbz	r4, 800f808 <__assert_func+0x24>
 800f7f4:	4b07      	ldr	r3, [pc, #28]	; (800f814 <__assert_func+0x30>)
 800f7f6:	9100      	str	r1, [sp, #0]
 800f7f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f7fc:	4906      	ldr	r1, [pc, #24]	; (800f818 <__assert_func+0x34>)
 800f7fe:	462b      	mov	r3, r5
 800f800:	f000 f80e 	bl	800f820 <fiprintf>
 800f804:	f000 fa8c 	bl	800fd20 <abort>
 800f808:	4b04      	ldr	r3, [pc, #16]	; (800f81c <__assert_func+0x38>)
 800f80a:	461c      	mov	r4, r3
 800f80c:	e7f3      	b.n	800f7f6 <__assert_func+0x12>
 800f80e:	bf00      	nop
 800f810:	2000011c 	.word	0x2000011c
 800f814:	080107e5 	.word	0x080107e5
 800f818:	080107f2 	.word	0x080107f2
 800f81c:	08010820 	.word	0x08010820

0800f820 <fiprintf>:
 800f820:	b40e      	push	{r1, r2, r3}
 800f822:	b503      	push	{r0, r1, lr}
 800f824:	4601      	mov	r1, r0
 800f826:	ab03      	add	r3, sp, #12
 800f828:	4805      	ldr	r0, [pc, #20]	; (800f840 <fiprintf+0x20>)
 800f82a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f82e:	6800      	ldr	r0, [r0, #0]
 800f830:	9301      	str	r3, [sp, #4]
 800f832:	f000 f885 	bl	800f940 <_vfiprintf_r>
 800f836:	b002      	add	sp, #8
 800f838:	f85d eb04 	ldr.w	lr, [sp], #4
 800f83c:	b003      	add	sp, #12
 800f83e:	4770      	bx	lr
 800f840:	2000011c 	.word	0x2000011c

0800f844 <memmove>:
 800f844:	4288      	cmp	r0, r1
 800f846:	b510      	push	{r4, lr}
 800f848:	eb01 0402 	add.w	r4, r1, r2
 800f84c:	d902      	bls.n	800f854 <memmove+0x10>
 800f84e:	4284      	cmp	r4, r0
 800f850:	4623      	mov	r3, r4
 800f852:	d807      	bhi.n	800f864 <memmove+0x20>
 800f854:	1e43      	subs	r3, r0, #1
 800f856:	42a1      	cmp	r1, r4
 800f858:	d008      	beq.n	800f86c <memmove+0x28>
 800f85a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f85e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f862:	e7f8      	b.n	800f856 <memmove+0x12>
 800f864:	4402      	add	r2, r0
 800f866:	4601      	mov	r1, r0
 800f868:	428a      	cmp	r2, r1
 800f86a:	d100      	bne.n	800f86e <memmove+0x2a>
 800f86c:	bd10      	pop	{r4, pc}
 800f86e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f872:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f876:	e7f7      	b.n	800f868 <memmove+0x24>

0800f878 <__malloc_lock>:
 800f878:	4801      	ldr	r0, [pc, #4]	; (800f880 <__malloc_lock+0x8>)
 800f87a:	f000 bc11 	b.w	80100a0 <__retarget_lock_acquire_recursive>
 800f87e:	bf00      	nop
 800f880:	20002090 	.word	0x20002090

0800f884 <__malloc_unlock>:
 800f884:	4801      	ldr	r0, [pc, #4]	; (800f88c <__malloc_unlock+0x8>)
 800f886:	f000 bc0c 	b.w	80100a2 <__retarget_lock_release_recursive>
 800f88a:	bf00      	nop
 800f88c:	20002090 	.word	0x20002090

0800f890 <_realloc_r>:
 800f890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f894:	4680      	mov	r8, r0
 800f896:	4614      	mov	r4, r2
 800f898:	460e      	mov	r6, r1
 800f89a:	b921      	cbnz	r1, 800f8a6 <_realloc_r+0x16>
 800f89c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f8a0:	4611      	mov	r1, r2
 800f8a2:	f7ff bd93 	b.w	800f3cc <_malloc_r>
 800f8a6:	b92a      	cbnz	r2, 800f8b4 <_realloc_r+0x24>
 800f8a8:	f7ff fd24 	bl	800f2f4 <_free_r>
 800f8ac:	4625      	mov	r5, r4
 800f8ae:	4628      	mov	r0, r5
 800f8b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8b4:	f000 fc5c 	bl	8010170 <_malloc_usable_size_r>
 800f8b8:	4284      	cmp	r4, r0
 800f8ba:	4607      	mov	r7, r0
 800f8bc:	d802      	bhi.n	800f8c4 <_realloc_r+0x34>
 800f8be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f8c2:	d812      	bhi.n	800f8ea <_realloc_r+0x5a>
 800f8c4:	4621      	mov	r1, r4
 800f8c6:	4640      	mov	r0, r8
 800f8c8:	f7ff fd80 	bl	800f3cc <_malloc_r>
 800f8cc:	4605      	mov	r5, r0
 800f8ce:	2800      	cmp	r0, #0
 800f8d0:	d0ed      	beq.n	800f8ae <_realloc_r+0x1e>
 800f8d2:	42bc      	cmp	r4, r7
 800f8d4:	4622      	mov	r2, r4
 800f8d6:	4631      	mov	r1, r6
 800f8d8:	bf28      	it	cs
 800f8da:	463a      	movcs	r2, r7
 800f8dc:	f7ff f824 	bl	800e928 <memcpy>
 800f8e0:	4631      	mov	r1, r6
 800f8e2:	4640      	mov	r0, r8
 800f8e4:	f7ff fd06 	bl	800f2f4 <_free_r>
 800f8e8:	e7e1      	b.n	800f8ae <_realloc_r+0x1e>
 800f8ea:	4635      	mov	r5, r6
 800f8ec:	e7df      	b.n	800f8ae <_realloc_r+0x1e>

0800f8ee <__sfputc_r>:
 800f8ee:	6893      	ldr	r3, [r2, #8]
 800f8f0:	3b01      	subs	r3, #1
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	b410      	push	{r4}
 800f8f6:	6093      	str	r3, [r2, #8]
 800f8f8:	da08      	bge.n	800f90c <__sfputc_r+0x1e>
 800f8fa:	6994      	ldr	r4, [r2, #24]
 800f8fc:	42a3      	cmp	r3, r4
 800f8fe:	db01      	blt.n	800f904 <__sfputc_r+0x16>
 800f900:	290a      	cmp	r1, #10
 800f902:	d103      	bne.n	800f90c <__sfputc_r+0x1e>
 800f904:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f908:	f000 b94a 	b.w	800fba0 <__swbuf_r>
 800f90c:	6813      	ldr	r3, [r2, #0]
 800f90e:	1c58      	adds	r0, r3, #1
 800f910:	6010      	str	r0, [r2, #0]
 800f912:	7019      	strb	r1, [r3, #0]
 800f914:	4608      	mov	r0, r1
 800f916:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f91a:	4770      	bx	lr

0800f91c <__sfputs_r>:
 800f91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f91e:	4606      	mov	r6, r0
 800f920:	460f      	mov	r7, r1
 800f922:	4614      	mov	r4, r2
 800f924:	18d5      	adds	r5, r2, r3
 800f926:	42ac      	cmp	r4, r5
 800f928:	d101      	bne.n	800f92e <__sfputs_r+0x12>
 800f92a:	2000      	movs	r0, #0
 800f92c:	e007      	b.n	800f93e <__sfputs_r+0x22>
 800f92e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f932:	463a      	mov	r2, r7
 800f934:	4630      	mov	r0, r6
 800f936:	f7ff ffda 	bl	800f8ee <__sfputc_r>
 800f93a:	1c43      	adds	r3, r0, #1
 800f93c:	d1f3      	bne.n	800f926 <__sfputs_r+0xa>
 800f93e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f940 <_vfiprintf_r>:
 800f940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f944:	460d      	mov	r5, r1
 800f946:	b09d      	sub	sp, #116	; 0x74
 800f948:	4614      	mov	r4, r2
 800f94a:	4698      	mov	r8, r3
 800f94c:	4606      	mov	r6, r0
 800f94e:	b118      	cbz	r0, 800f958 <_vfiprintf_r+0x18>
 800f950:	6983      	ldr	r3, [r0, #24]
 800f952:	b90b      	cbnz	r3, 800f958 <_vfiprintf_r+0x18>
 800f954:	f000 fb06 	bl	800ff64 <__sinit>
 800f958:	4b89      	ldr	r3, [pc, #548]	; (800fb80 <_vfiprintf_r+0x240>)
 800f95a:	429d      	cmp	r5, r3
 800f95c:	d11b      	bne.n	800f996 <_vfiprintf_r+0x56>
 800f95e:	6875      	ldr	r5, [r6, #4]
 800f960:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f962:	07d9      	lsls	r1, r3, #31
 800f964:	d405      	bmi.n	800f972 <_vfiprintf_r+0x32>
 800f966:	89ab      	ldrh	r3, [r5, #12]
 800f968:	059a      	lsls	r2, r3, #22
 800f96a:	d402      	bmi.n	800f972 <_vfiprintf_r+0x32>
 800f96c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f96e:	f000 fb97 	bl	80100a0 <__retarget_lock_acquire_recursive>
 800f972:	89ab      	ldrh	r3, [r5, #12]
 800f974:	071b      	lsls	r3, r3, #28
 800f976:	d501      	bpl.n	800f97c <_vfiprintf_r+0x3c>
 800f978:	692b      	ldr	r3, [r5, #16]
 800f97a:	b9eb      	cbnz	r3, 800f9b8 <_vfiprintf_r+0x78>
 800f97c:	4629      	mov	r1, r5
 800f97e:	4630      	mov	r0, r6
 800f980:	f000 f960 	bl	800fc44 <__swsetup_r>
 800f984:	b1c0      	cbz	r0, 800f9b8 <_vfiprintf_r+0x78>
 800f986:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f988:	07dc      	lsls	r4, r3, #31
 800f98a:	d50e      	bpl.n	800f9aa <_vfiprintf_r+0x6a>
 800f98c:	f04f 30ff 	mov.w	r0, #4294967295
 800f990:	b01d      	add	sp, #116	; 0x74
 800f992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f996:	4b7b      	ldr	r3, [pc, #492]	; (800fb84 <_vfiprintf_r+0x244>)
 800f998:	429d      	cmp	r5, r3
 800f99a:	d101      	bne.n	800f9a0 <_vfiprintf_r+0x60>
 800f99c:	68b5      	ldr	r5, [r6, #8]
 800f99e:	e7df      	b.n	800f960 <_vfiprintf_r+0x20>
 800f9a0:	4b79      	ldr	r3, [pc, #484]	; (800fb88 <_vfiprintf_r+0x248>)
 800f9a2:	429d      	cmp	r5, r3
 800f9a4:	bf08      	it	eq
 800f9a6:	68f5      	ldreq	r5, [r6, #12]
 800f9a8:	e7da      	b.n	800f960 <_vfiprintf_r+0x20>
 800f9aa:	89ab      	ldrh	r3, [r5, #12]
 800f9ac:	0598      	lsls	r0, r3, #22
 800f9ae:	d4ed      	bmi.n	800f98c <_vfiprintf_r+0x4c>
 800f9b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f9b2:	f000 fb76 	bl	80100a2 <__retarget_lock_release_recursive>
 800f9b6:	e7e9      	b.n	800f98c <_vfiprintf_r+0x4c>
 800f9b8:	2300      	movs	r3, #0
 800f9ba:	9309      	str	r3, [sp, #36]	; 0x24
 800f9bc:	2320      	movs	r3, #32
 800f9be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f9c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800f9c6:	2330      	movs	r3, #48	; 0x30
 800f9c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fb8c <_vfiprintf_r+0x24c>
 800f9cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f9d0:	f04f 0901 	mov.w	r9, #1
 800f9d4:	4623      	mov	r3, r4
 800f9d6:	469a      	mov	sl, r3
 800f9d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f9dc:	b10a      	cbz	r2, 800f9e2 <_vfiprintf_r+0xa2>
 800f9de:	2a25      	cmp	r2, #37	; 0x25
 800f9e0:	d1f9      	bne.n	800f9d6 <_vfiprintf_r+0x96>
 800f9e2:	ebba 0b04 	subs.w	fp, sl, r4
 800f9e6:	d00b      	beq.n	800fa00 <_vfiprintf_r+0xc0>
 800f9e8:	465b      	mov	r3, fp
 800f9ea:	4622      	mov	r2, r4
 800f9ec:	4629      	mov	r1, r5
 800f9ee:	4630      	mov	r0, r6
 800f9f0:	f7ff ff94 	bl	800f91c <__sfputs_r>
 800f9f4:	3001      	adds	r0, #1
 800f9f6:	f000 80aa 	beq.w	800fb4e <_vfiprintf_r+0x20e>
 800f9fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f9fc:	445a      	add	r2, fp
 800f9fe:	9209      	str	r2, [sp, #36]	; 0x24
 800fa00:	f89a 3000 	ldrb.w	r3, [sl]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	f000 80a2 	beq.w	800fb4e <_vfiprintf_r+0x20e>
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	f04f 32ff 	mov.w	r2, #4294967295
 800fa10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fa14:	f10a 0a01 	add.w	sl, sl, #1
 800fa18:	9304      	str	r3, [sp, #16]
 800fa1a:	9307      	str	r3, [sp, #28]
 800fa1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fa20:	931a      	str	r3, [sp, #104]	; 0x68
 800fa22:	4654      	mov	r4, sl
 800fa24:	2205      	movs	r2, #5
 800fa26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa2a:	4858      	ldr	r0, [pc, #352]	; (800fb8c <_vfiprintf_r+0x24c>)
 800fa2c:	f7f0 fbf8 	bl	8000220 <memchr>
 800fa30:	9a04      	ldr	r2, [sp, #16]
 800fa32:	b9d8      	cbnz	r0, 800fa6c <_vfiprintf_r+0x12c>
 800fa34:	06d1      	lsls	r1, r2, #27
 800fa36:	bf44      	itt	mi
 800fa38:	2320      	movmi	r3, #32
 800fa3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa3e:	0713      	lsls	r3, r2, #28
 800fa40:	bf44      	itt	mi
 800fa42:	232b      	movmi	r3, #43	; 0x2b
 800fa44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa48:	f89a 3000 	ldrb.w	r3, [sl]
 800fa4c:	2b2a      	cmp	r3, #42	; 0x2a
 800fa4e:	d015      	beq.n	800fa7c <_vfiprintf_r+0x13c>
 800fa50:	9a07      	ldr	r2, [sp, #28]
 800fa52:	4654      	mov	r4, sl
 800fa54:	2000      	movs	r0, #0
 800fa56:	f04f 0c0a 	mov.w	ip, #10
 800fa5a:	4621      	mov	r1, r4
 800fa5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fa60:	3b30      	subs	r3, #48	; 0x30
 800fa62:	2b09      	cmp	r3, #9
 800fa64:	d94e      	bls.n	800fb04 <_vfiprintf_r+0x1c4>
 800fa66:	b1b0      	cbz	r0, 800fa96 <_vfiprintf_r+0x156>
 800fa68:	9207      	str	r2, [sp, #28]
 800fa6a:	e014      	b.n	800fa96 <_vfiprintf_r+0x156>
 800fa6c:	eba0 0308 	sub.w	r3, r0, r8
 800fa70:	fa09 f303 	lsl.w	r3, r9, r3
 800fa74:	4313      	orrs	r3, r2
 800fa76:	9304      	str	r3, [sp, #16]
 800fa78:	46a2      	mov	sl, r4
 800fa7a:	e7d2      	b.n	800fa22 <_vfiprintf_r+0xe2>
 800fa7c:	9b03      	ldr	r3, [sp, #12]
 800fa7e:	1d19      	adds	r1, r3, #4
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	9103      	str	r1, [sp, #12]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	bfbb      	ittet	lt
 800fa88:	425b      	neglt	r3, r3
 800fa8a:	f042 0202 	orrlt.w	r2, r2, #2
 800fa8e:	9307      	strge	r3, [sp, #28]
 800fa90:	9307      	strlt	r3, [sp, #28]
 800fa92:	bfb8      	it	lt
 800fa94:	9204      	strlt	r2, [sp, #16]
 800fa96:	7823      	ldrb	r3, [r4, #0]
 800fa98:	2b2e      	cmp	r3, #46	; 0x2e
 800fa9a:	d10c      	bne.n	800fab6 <_vfiprintf_r+0x176>
 800fa9c:	7863      	ldrb	r3, [r4, #1]
 800fa9e:	2b2a      	cmp	r3, #42	; 0x2a
 800faa0:	d135      	bne.n	800fb0e <_vfiprintf_r+0x1ce>
 800faa2:	9b03      	ldr	r3, [sp, #12]
 800faa4:	1d1a      	adds	r2, r3, #4
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	9203      	str	r2, [sp, #12]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	bfb8      	it	lt
 800faae:	f04f 33ff 	movlt.w	r3, #4294967295
 800fab2:	3402      	adds	r4, #2
 800fab4:	9305      	str	r3, [sp, #20]
 800fab6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fb9c <_vfiprintf_r+0x25c>
 800faba:	7821      	ldrb	r1, [r4, #0]
 800fabc:	2203      	movs	r2, #3
 800fabe:	4650      	mov	r0, sl
 800fac0:	f7f0 fbae 	bl	8000220 <memchr>
 800fac4:	b140      	cbz	r0, 800fad8 <_vfiprintf_r+0x198>
 800fac6:	2340      	movs	r3, #64	; 0x40
 800fac8:	eba0 000a 	sub.w	r0, r0, sl
 800facc:	fa03 f000 	lsl.w	r0, r3, r0
 800fad0:	9b04      	ldr	r3, [sp, #16]
 800fad2:	4303      	orrs	r3, r0
 800fad4:	3401      	adds	r4, #1
 800fad6:	9304      	str	r3, [sp, #16]
 800fad8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fadc:	482c      	ldr	r0, [pc, #176]	; (800fb90 <_vfiprintf_r+0x250>)
 800fade:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fae2:	2206      	movs	r2, #6
 800fae4:	f7f0 fb9c 	bl	8000220 <memchr>
 800fae8:	2800      	cmp	r0, #0
 800faea:	d03f      	beq.n	800fb6c <_vfiprintf_r+0x22c>
 800faec:	4b29      	ldr	r3, [pc, #164]	; (800fb94 <_vfiprintf_r+0x254>)
 800faee:	bb1b      	cbnz	r3, 800fb38 <_vfiprintf_r+0x1f8>
 800faf0:	9b03      	ldr	r3, [sp, #12]
 800faf2:	3307      	adds	r3, #7
 800faf4:	f023 0307 	bic.w	r3, r3, #7
 800faf8:	3308      	adds	r3, #8
 800fafa:	9303      	str	r3, [sp, #12]
 800fafc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fafe:	443b      	add	r3, r7
 800fb00:	9309      	str	r3, [sp, #36]	; 0x24
 800fb02:	e767      	b.n	800f9d4 <_vfiprintf_r+0x94>
 800fb04:	fb0c 3202 	mla	r2, ip, r2, r3
 800fb08:	460c      	mov	r4, r1
 800fb0a:	2001      	movs	r0, #1
 800fb0c:	e7a5      	b.n	800fa5a <_vfiprintf_r+0x11a>
 800fb0e:	2300      	movs	r3, #0
 800fb10:	3401      	adds	r4, #1
 800fb12:	9305      	str	r3, [sp, #20]
 800fb14:	4619      	mov	r1, r3
 800fb16:	f04f 0c0a 	mov.w	ip, #10
 800fb1a:	4620      	mov	r0, r4
 800fb1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb20:	3a30      	subs	r2, #48	; 0x30
 800fb22:	2a09      	cmp	r2, #9
 800fb24:	d903      	bls.n	800fb2e <_vfiprintf_r+0x1ee>
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d0c5      	beq.n	800fab6 <_vfiprintf_r+0x176>
 800fb2a:	9105      	str	r1, [sp, #20]
 800fb2c:	e7c3      	b.n	800fab6 <_vfiprintf_r+0x176>
 800fb2e:	fb0c 2101 	mla	r1, ip, r1, r2
 800fb32:	4604      	mov	r4, r0
 800fb34:	2301      	movs	r3, #1
 800fb36:	e7f0      	b.n	800fb1a <_vfiprintf_r+0x1da>
 800fb38:	ab03      	add	r3, sp, #12
 800fb3a:	9300      	str	r3, [sp, #0]
 800fb3c:	462a      	mov	r2, r5
 800fb3e:	4b16      	ldr	r3, [pc, #88]	; (800fb98 <_vfiprintf_r+0x258>)
 800fb40:	a904      	add	r1, sp, #16
 800fb42:	4630      	mov	r0, r6
 800fb44:	f7fc f83c 	bl	800bbc0 <_printf_float>
 800fb48:	4607      	mov	r7, r0
 800fb4a:	1c78      	adds	r0, r7, #1
 800fb4c:	d1d6      	bne.n	800fafc <_vfiprintf_r+0x1bc>
 800fb4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fb50:	07d9      	lsls	r1, r3, #31
 800fb52:	d405      	bmi.n	800fb60 <_vfiprintf_r+0x220>
 800fb54:	89ab      	ldrh	r3, [r5, #12]
 800fb56:	059a      	lsls	r2, r3, #22
 800fb58:	d402      	bmi.n	800fb60 <_vfiprintf_r+0x220>
 800fb5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fb5c:	f000 faa1 	bl	80100a2 <__retarget_lock_release_recursive>
 800fb60:	89ab      	ldrh	r3, [r5, #12]
 800fb62:	065b      	lsls	r3, r3, #25
 800fb64:	f53f af12 	bmi.w	800f98c <_vfiprintf_r+0x4c>
 800fb68:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fb6a:	e711      	b.n	800f990 <_vfiprintf_r+0x50>
 800fb6c:	ab03      	add	r3, sp, #12
 800fb6e:	9300      	str	r3, [sp, #0]
 800fb70:	462a      	mov	r2, r5
 800fb72:	4b09      	ldr	r3, [pc, #36]	; (800fb98 <_vfiprintf_r+0x258>)
 800fb74:	a904      	add	r1, sp, #16
 800fb76:	4630      	mov	r0, r6
 800fb78:	f7fc fac6 	bl	800c108 <_printf_i>
 800fb7c:	e7e4      	b.n	800fb48 <_vfiprintf_r+0x208>
 800fb7e:	bf00      	nop
 800fb80:	08010844 	.word	0x08010844
 800fb84:	08010864 	.word	0x08010864
 800fb88:	08010824 	.word	0x08010824
 800fb8c:	080107d4 	.word	0x080107d4
 800fb90:	080107de 	.word	0x080107de
 800fb94:	0800bbc1 	.word	0x0800bbc1
 800fb98:	0800f91d 	.word	0x0800f91d
 800fb9c:	080107da 	.word	0x080107da

0800fba0 <__swbuf_r>:
 800fba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fba2:	460e      	mov	r6, r1
 800fba4:	4614      	mov	r4, r2
 800fba6:	4605      	mov	r5, r0
 800fba8:	b118      	cbz	r0, 800fbb2 <__swbuf_r+0x12>
 800fbaa:	6983      	ldr	r3, [r0, #24]
 800fbac:	b90b      	cbnz	r3, 800fbb2 <__swbuf_r+0x12>
 800fbae:	f000 f9d9 	bl	800ff64 <__sinit>
 800fbb2:	4b21      	ldr	r3, [pc, #132]	; (800fc38 <__swbuf_r+0x98>)
 800fbb4:	429c      	cmp	r4, r3
 800fbb6:	d12b      	bne.n	800fc10 <__swbuf_r+0x70>
 800fbb8:	686c      	ldr	r4, [r5, #4]
 800fbba:	69a3      	ldr	r3, [r4, #24]
 800fbbc:	60a3      	str	r3, [r4, #8]
 800fbbe:	89a3      	ldrh	r3, [r4, #12]
 800fbc0:	071a      	lsls	r2, r3, #28
 800fbc2:	d52f      	bpl.n	800fc24 <__swbuf_r+0x84>
 800fbc4:	6923      	ldr	r3, [r4, #16]
 800fbc6:	b36b      	cbz	r3, 800fc24 <__swbuf_r+0x84>
 800fbc8:	6923      	ldr	r3, [r4, #16]
 800fbca:	6820      	ldr	r0, [r4, #0]
 800fbcc:	1ac0      	subs	r0, r0, r3
 800fbce:	6963      	ldr	r3, [r4, #20]
 800fbd0:	b2f6      	uxtb	r6, r6
 800fbd2:	4283      	cmp	r3, r0
 800fbd4:	4637      	mov	r7, r6
 800fbd6:	dc04      	bgt.n	800fbe2 <__swbuf_r+0x42>
 800fbd8:	4621      	mov	r1, r4
 800fbda:	4628      	mov	r0, r5
 800fbdc:	f000 f92e 	bl	800fe3c <_fflush_r>
 800fbe0:	bb30      	cbnz	r0, 800fc30 <__swbuf_r+0x90>
 800fbe2:	68a3      	ldr	r3, [r4, #8]
 800fbe4:	3b01      	subs	r3, #1
 800fbe6:	60a3      	str	r3, [r4, #8]
 800fbe8:	6823      	ldr	r3, [r4, #0]
 800fbea:	1c5a      	adds	r2, r3, #1
 800fbec:	6022      	str	r2, [r4, #0]
 800fbee:	701e      	strb	r6, [r3, #0]
 800fbf0:	6963      	ldr	r3, [r4, #20]
 800fbf2:	3001      	adds	r0, #1
 800fbf4:	4283      	cmp	r3, r0
 800fbf6:	d004      	beq.n	800fc02 <__swbuf_r+0x62>
 800fbf8:	89a3      	ldrh	r3, [r4, #12]
 800fbfa:	07db      	lsls	r3, r3, #31
 800fbfc:	d506      	bpl.n	800fc0c <__swbuf_r+0x6c>
 800fbfe:	2e0a      	cmp	r6, #10
 800fc00:	d104      	bne.n	800fc0c <__swbuf_r+0x6c>
 800fc02:	4621      	mov	r1, r4
 800fc04:	4628      	mov	r0, r5
 800fc06:	f000 f919 	bl	800fe3c <_fflush_r>
 800fc0a:	b988      	cbnz	r0, 800fc30 <__swbuf_r+0x90>
 800fc0c:	4638      	mov	r0, r7
 800fc0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc10:	4b0a      	ldr	r3, [pc, #40]	; (800fc3c <__swbuf_r+0x9c>)
 800fc12:	429c      	cmp	r4, r3
 800fc14:	d101      	bne.n	800fc1a <__swbuf_r+0x7a>
 800fc16:	68ac      	ldr	r4, [r5, #8]
 800fc18:	e7cf      	b.n	800fbba <__swbuf_r+0x1a>
 800fc1a:	4b09      	ldr	r3, [pc, #36]	; (800fc40 <__swbuf_r+0xa0>)
 800fc1c:	429c      	cmp	r4, r3
 800fc1e:	bf08      	it	eq
 800fc20:	68ec      	ldreq	r4, [r5, #12]
 800fc22:	e7ca      	b.n	800fbba <__swbuf_r+0x1a>
 800fc24:	4621      	mov	r1, r4
 800fc26:	4628      	mov	r0, r5
 800fc28:	f000 f80c 	bl	800fc44 <__swsetup_r>
 800fc2c:	2800      	cmp	r0, #0
 800fc2e:	d0cb      	beq.n	800fbc8 <__swbuf_r+0x28>
 800fc30:	f04f 37ff 	mov.w	r7, #4294967295
 800fc34:	e7ea      	b.n	800fc0c <__swbuf_r+0x6c>
 800fc36:	bf00      	nop
 800fc38:	08010844 	.word	0x08010844
 800fc3c:	08010864 	.word	0x08010864
 800fc40:	08010824 	.word	0x08010824

0800fc44 <__swsetup_r>:
 800fc44:	4b32      	ldr	r3, [pc, #200]	; (800fd10 <__swsetup_r+0xcc>)
 800fc46:	b570      	push	{r4, r5, r6, lr}
 800fc48:	681d      	ldr	r5, [r3, #0]
 800fc4a:	4606      	mov	r6, r0
 800fc4c:	460c      	mov	r4, r1
 800fc4e:	b125      	cbz	r5, 800fc5a <__swsetup_r+0x16>
 800fc50:	69ab      	ldr	r3, [r5, #24]
 800fc52:	b913      	cbnz	r3, 800fc5a <__swsetup_r+0x16>
 800fc54:	4628      	mov	r0, r5
 800fc56:	f000 f985 	bl	800ff64 <__sinit>
 800fc5a:	4b2e      	ldr	r3, [pc, #184]	; (800fd14 <__swsetup_r+0xd0>)
 800fc5c:	429c      	cmp	r4, r3
 800fc5e:	d10f      	bne.n	800fc80 <__swsetup_r+0x3c>
 800fc60:	686c      	ldr	r4, [r5, #4]
 800fc62:	89a3      	ldrh	r3, [r4, #12]
 800fc64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fc68:	0719      	lsls	r1, r3, #28
 800fc6a:	d42c      	bmi.n	800fcc6 <__swsetup_r+0x82>
 800fc6c:	06dd      	lsls	r5, r3, #27
 800fc6e:	d411      	bmi.n	800fc94 <__swsetup_r+0x50>
 800fc70:	2309      	movs	r3, #9
 800fc72:	6033      	str	r3, [r6, #0]
 800fc74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fc78:	81a3      	strh	r3, [r4, #12]
 800fc7a:	f04f 30ff 	mov.w	r0, #4294967295
 800fc7e:	e03e      	b.n	800fcfe <__swsetup_r+0xba>
 800fc80:	4b25      	ldr	r3, [pc, #148]	; (800fd18 <__swsetup_r+0xd4>)
 800fc82:	429c      	cmp	r4, r3
 800fc84:	d101      	bne.n	800fc8a <__swsetup_r+0x46>
 800fc86:	68ac      	ldr	r4, [r5, #8]
 800fc88:	e7eb      	b.n	800fc62 <__swsetup_r+0x1e>
 800fc8a:	4b24      	ldr	r3, [pc, #144]	; (800fd1c <__swsetup_r+0xd8>)
 800fc8c:	429c      	cmp	r4, r3
 800fc8e:	bf08      	it	eq
 800fc90:	68ec      	ldreq	r4, [r5, #12]
 800fc92:	e7e6      	b.n	800fc62 <__swsetup_r+0x1e>
 800fc94:	0758      	lsls	r0, r3, #29
 800fc96:	d512      	bpl.n	800fcbe <__swsetup_r+0x7a>
 800fc98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fc9a:	b141      	cbz	r1, 800fcae <__swsetup_r+0x6a>
 800fc9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fca0:	4299      	cmp	r1, r3
 800fca2:	d002      	beq.n	800fcaa <__swsetup_r+0x66>
 800fca4:	4630      	mov	r0, r6
 800fca6:	f7ff fb25 	bl	800f2f4 <_free_r>
 800fcaa:	2300      	movs	r3, #0
 800fcac:	6363      	str	r3, [r4, #52]	; 0x34
 800fcae:	89a3      	ldrh	r3, [r4, #12]
 800fcb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fcb4:	81a3      	strh	r3, [r4, #12]
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	6063      	str	r3, [r4, #4]
 800fcba:	6923      	ldr	r3, [r4, #16]
 800fcbc:	6023      	str	r3, [r4, #0]
 800fcbe:	89a3      	ldrh	r3, [r4, #12]
 800fcc0:	f043 0308 	orr.w	r3, r3, #8
 800fcc4:	81a3      	strh	r3, [r4, #12]
 800fcc6:	6923      	ldr	r3, [r4, #16]
 800fcc8:	b94b      	cbnz	r3, 800fcde <__swsetup_r+0x9a>
 800fcca:	89a3      	ldrh	r3, [r4, #12]
 800fccc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fcd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fcd4:	d003      	beq.n	800fcde <__swsetup_r+0x9a>
 800fcd6:	4621      	mov	r1, r4
 800fcd8:	4630      	mov	r0, r6
 800fcda:	f000 fa09 	bl	80100f0 <__smakebuf_r>
 800fcde:	89a0      	ldrh	r0, [r4, #12]
 800fce0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fce4:	f010 0301 	ands.w	r3, r0, #1
 800fce8:	d00a      	beq.n	800fd00 <__swsetup_r+0xbc>
 800fcea:	2300      	movs	r3, #0
 800fcec:	60a3      	str	r3, [r4, #8]
 800fcee:	6963      	ldr	r3, [r4, #20]
 800fcf0:	425b      	negs	r3, r3
 800fcf2:	61a3      	str	r3, [r4, #24]
 800fcf4:	6923      	ldr	r3, [r4, #16]
 800fcf6:	b943      	cbnz	r3, 800fd0a <__swsetup_r+0xc6>
 800fcf8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fcfc:	d1ba      	bne.n	800fc74 <__swsetup_r+0x30>
 800fcfe:	bd70      	pop	{r4, r5, r6, pc}
 800fd00:	0781      	lsls	r1, r0, #30
 800fd02:	bf58      	it	pl
 800fd04:	6963      	ldrpl	r3, [r4, #20]
 800fd06:	60a3      	str	r3, [r4, #8]
 800fd08:	e7f4      	b.n	800fcf4 <__swsetup_r+0xb0>
 800fd0a:	2000      	movs	r0, #0
 800fd0c:	e7f7      	b.n	800fcfe <__swsetup_r+0xba>
 800fd0e:	bf00      	nop
 800fd10:	2000011c 	.word	0x2000011c
 800fd14:	08010844 	.word	0x08010844
 800fd18:	08010864 	.word	0x08010864
 800fd1c:	08010824 	.word	0x08010824

0800fd20 <abort>:
 800fd20:	b508      	push	{r3, lr}
 800fd22:	2006      	movs	r0, #6
 800fd24:	f000 fa54 	bl	80101d0 <raise>
 800fd28:	2001      	movs	r0, #1
 800fd2a:	f7f1 fdeb 	bl	8001904 <_exit>
	...

0800fd30 <__sflush_r>:
 800fd30:	898a      	ldrh	r2, [r1, #12]
 800fd32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd36:	4605      	mov	r5, r0
 800fd38:	0710      	lsls	r0, r2, #28
 800fd3a:	460c      	mov	r4, r1
 800fd3c:	d458      	bmi.n	800fdf0 <__sflush_r+0xc0>
 800fd3e:	684b      	ldr	r3, [r1, #4]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	dc05      	bgt.n	800fd50 <__sflush_r+0x20>
 800fd44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	dc02      	bgt.n	800fd50 <__sflush_r+0x20>
 800fd4a:	2000      	movs	r0, #0
 800fd4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fd52:	2e00      	cmp	r6, #0
 800fd54:	d0f9      	beq.n	800fd4a <__sflush_r+0x1a>
 800fd56:	2300      	movs	r3, #0
 800fd58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fd5c:	682f      	ldr	r7, [r5, #0]
 800fd5e:	602b      	str	r3, [r5, #0]
 800fd60:	d032      	beq.n	800fdc8 <__sflush_r+0x98>
 800fd62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fd64:	89a3      	ldrh	r3, [r4, #12]
 800fd66:	075a      	lsls	r2, r3, #29
 800fd68:	d505      	bpl.n	800fd76 <__sflush_r+0x46>
 800fd6a:	6863      	ldr	r3, [r4, #4]
 800fd6c:	1ac0      	subs	r0, r0, r3
 800fd6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fd70:	b10b      	cbz	r3, 800fd76 <__sflush_r+0x46>
 800fd72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fd74:	1ac0      	subs	r0, r0, r3
 800fd76:	2300      	movs	r3, #0
 800fd78:	4602      	mov	r2, r0
 800fd7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fd7c:	6a21      	ldr	r1, [r4, #32]
 800fd7e:	4628      	mov	r0, r5
 800fd80:	47b0      	blx	r6
 800fd82:	1c43      	adds	r3, r0, #1
 800fd84:	89a3      	ldrh	r3, [r4, #12]
 800fd86:	d106      	bne.n	800fd96 <__sflush_r+0x66>
 800fd88:	6829      	ldr	r1, [r5, #0]
 800fd8a:	291d      	cmp	r1, #29
 800fd8c:	d82c      	bhi.n	800fde8 <__sflush_r+0xb8>
 800fd8e:	4a2a      	ldr	r2, [pc, #168]	; (800fe38 <__sflush_r+0x108>)
 800fd90:	40ca      	lsrs	r2, r1
 800fd92:	07d6      	lsls	r6, r2, #31
 800fd94:	d528      	bpl.n	800fde8 <__sflush_r+0xb8>
 800fd96:	2200      	movs	r2, #0
 800fd98:	6062      	str	r2, [r4, #4]
 800fd9a:	04d9      	lsls	r1, r3, #19
 800fd9c:	6922      	ldr	r2, [r4, #16]
 800fd9e:	6022      	str	r2, [r4, #0]
 800fda0:	d504      	bpl.n	800fdac <__sflush_r+0x7c>
 800fda2:	1c42      	adds	r2, r0, #1
 800fda4:	d101      	bne.n	800fdaa <__sflush_r+0x7a>
 800fda6:	682b      	ldr	r3, [r5, #0]
 800fda8:	b903      	cbnz	r3, 800fdac <__sflush_r+0x7c>
 800fdaa:	6560      	str	r0, [r4, #84]	; 0x54
 800fdac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fdae:	602f      	str	r7, [r5, #0]
 800fdb0:	2900      	cmp	r1, #0
 800fdb2:	d0ca      	beq.n	800fd4a <__sflush_r+0x1a>
 800fdb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fdb8:	4299      	cmp	r1, r3
 800fdba:	d002      	beq.n	800fdc2 <__sflush_r+0x92>
 800fdbc:	4628      	mov	r0, r5
 800fdbe:	f7ff fa99 	bl	800f2f4 <_free_r>
 800fdc2:	2000      	movs	r0, #0
 800fdc4:	6360      	str	r0, [r4, #52]	; 0x34
 800fdc6:	e7c1      	b.n	800fd4c <__sflush_r+0x1c>
 800fdc8:	6a21      	ldr	r1, [r4, #32]
 800fdca:	2301      	movs	r3, #1
 800fdcc:	4628      	mov	r0, r5
 800fdce:	47b0      	blx	r6
 800fdd0:	1c41      	adds	r1, r0, #1
 800fdd2:	d1c7      	bne.n	800fd64 <__sflush_r+0x34>
 800fdd4:	682b      	ldr	r3, [r5, #0]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d0c4      	beq.n	800fd64 <__sflush_r+0x34>
 800fdda:	2b1d      	cmp	r3, #29
 800fddc:	d001      	beq.n	800fde2 <__sflush_r+0xb2>
 800fdde:	2b16      	cmp	r3, #22
 800fde0:	d101      	bne.n	800fde6 <__sflush_r+0xb6>
 800fde2:	602f      	str	r7, [r5, #0]
 800fde4:	e7b1      	b.n	800fd4a <__sflush_r+0x1a>
 800fde6:	89a3      	ldrh	r3, [r4, #12]
 800fde8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fdec:	81a3      	strh	r3, [r4, #12]
 800fdee:	e7ad      	b.n	800fd4c <__sflush_r+0x1c>
 800fdf0:	690f      	ldr	r7, [r1, #16]
 800fdf2:	2f00      	cmp	r7, #0
 800fdf4:	d0a9      	beq.n	800fd4a <__sflush_r+0x1a>
 800fdf6:	0793      	lsls	r3, r2, #30
 800fdf8:	680e      	ldr	r6, [r1, #0]
 800fdfa:	bf08      	it	eq
 800fdfc:	694b      	ldreq	r3, [r1, #20]
 800fdfe:	600f      	str	r7, [r1, #0]
 800fe00:	bf18      	it	ne
 800fe02:	2300      	movne	r3, #0
 800fe04:	eba6 0807 	sub.w	r8, r6, r7
 800fe08:	608b      	str	r3, [r1, #8]
 800fe0a:	f1b8 0f00 	cmp.w	r8, #0
 800fe0e:	dd9c      	ble.n	800fd4a <__sflush_r+0x1a>
 800fe10:	6a21      	ldr	r1, [r4, #32]
 800fe12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fe14:	4643      	mov	r3, r8
 800fe16:	463a      	mov	r2, r7
 800fe18:	4628      	mov	r0, r5
 800fe1a:	47b0      	blx	r6
 800fe1c:	2800      	cmp	r0, #0
 800fe1e:	dc06      	bgt.n	800fe2e <__sflush_r+0xfe>
 800fe20:	89a3      	ldrh	r3, [r4, #12]
 800fe22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe26:	81a3      	strh	r3, [r4, #12]
 800fe28:	f04f 30ff 	mov.w	r0, #4294967295
 800fe2c:	e78e      	b.n	800fd4c <__sflush_r+0x1c>
 800fe2e:	4407      	add	r7, r0
 800fe30:	eba8 0800 	sub.w	r8, r8, r0
 800fe34:	e7e9      	b.n	800fe0a <__sflush_r+0xda>
 800fe36:	bf00      	nop
 800fe38:	20400001 	.word	0x20400001

0800fe3c <_fflush_r>:
 800fe3c:	b538      	push	{r3, r4, r5, lr}
 800fe3e:	690b      	ldr	r3, [r1, #16]
 800fe40:	4605      	mov	r5, r0
 800fe42:	460c      	mov	r4, r1
 800fe44:	b913      	cbnz	r3, 800fe4c <_fflush_r+0x10>
 800fe46:	2500      	movs	r5, #0
 800fe48:	4628      	mov	r0, r5
 800fe4a:	bd38      	pop	{r3, r4, r5, pc}
 800fe4c:	b118      	cbz	r0, 800fe56 <_fflush_r+0x1a>
 800fe4e:	6983      	ldr	r3, [r0, #24]
 800fe50:	b90b      	cbnz	r3, 800fe56 <_fflush_r+0x1a>
 800fe52:	f000 f887 	bl	800ff64 <__sinit>
 800fe56:	4b14      	ldr	r3, [pc, #80]	; (800fea8 <_fflush_r+0x6c>)
 800fe58:	429c      	cmp	r4, r3
 800fe5a:	d11b      	bne.n	800fe94 <_fflush_r+0x58>
 800fe5c:	686c      	ldr	r4, [r5, #4]
 800fe5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d0ef      	beq.n	800fe46 <_fflush_r+0xa>
 800fe66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fe68:	07d0      	lsls	r0, r2, #31
 800fe6a:	d404      	bmi.n	800fe76 <_fflush_r+0x3a>
 800fe6c:	0599      	lsls	r1, r3, #22
 800fe6e:	d402      	bmi.n	800fe76 <_fflush_r+0x3a>
 800fe70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fe72:	f000 f915 	bl	80100a0 <__retarget_lock_acquire_recursive>
 800fe76:	4628      	mov	r0, r5
 800fe78:	4621      	mov	r1, r4
 800fe7a:	f7ff ff59 	bl	800fd30 <__sflush_r>
 800fe7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fe80:	07da      	lsls	r2, r3, #31
 800fe82:	4605      	mov	r5, r0
 800fe84:	d4e0      	bmi.n	800fe48 <_fflush_r+0xc>
 800fe86:	89a3      	ldrh	r3, [r4, #12]
 800fe88:	059b      	lsls	r3, r3, #22
 800fe8a:	d4dd      	bmi.n	800fe48 <_fflush_r+0xc>
 800fe8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fe8e:	f000 f908 	bl	80100a2 <__retarget_lock_release_recursive>
 800fe92:	e7d9      	b.n	800fe48 <_fflush_r+0xc>
 800fe94:	4b05      	ldr	r3, [pc, #20]	; (800feac <_fflush_r+0x70>)
 800fe96:	429c      	cmp	r4, r3
 800fe98:	d101      	bne.n	800fe9e <_fflush_r+0x62>
 800fe9a:	68ac      	ldr	r4, [r5, #8]
 800fe9c:	e7df      	b.n	800fe5e <_fflush_r+0x22>
 800fe9e:	4b04      	ldr	r3, [pc, #16]	; (800feb0 <_fflush_r+0x74>)
 800fea0:	429c      	cmp	r4, r3
 800fea2:	bf08      	it	eq
 800fea4:	68ec      	ldreq	r4, [r5, #12]
 800fea6:	e7da      	b.n	800fe5e <_fflush_r+0x22>
 800fea8:	08010844 	.word	0x08010844
 800feac:	08010864 	.word	0x08010864
 800feb0:	08010824 	.word	0x08010824

0800feb4 <std>:
 800feb4:	2300      	movs	r3, #0
 800feb6:	b510      	push	{r4, lr}
 800feb8:	4604      	mov	r4, r0
 800feba:	e9c0 3300 	strd	r3, r3, [r0]
 800febe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fec2:	6083      	str	r3, [r0, #8]
 800fec4:	8181      	strh	r1, [r0, #12]
 800fec6:	6643      	str	r3, [r0, #100]	; 0x64
 800fec8:	81c2      	strh	r2, [r0, #14]
 800feca:	6183      	str	r3, [r0, #24]
 800fecc:	4619      	mov	r1, r3
 800fece:	2208      	movs	r2, #8
 800fed0:	305c      	adds	r0, #92	; 0x5c
 800fed2:	f7fb fdcd 	bl	800ba70 <memset>
 800fed6:	4b05      	ldr	r3, [pc, #20]	; (800feec <std+0x38>)
 800fed8:	6263      	str	r3, [r4, #36]	; 0x24
 800feda:	4b05      	ldr	r3, [pc, #20]	; (800fef0 <std+0x3c>)
 800fedc:	62a3      	str	r3, [r4, #40]	; 0x28
 800fede:	4b05      	ldr	r3, [pc, #20]	; (800fef4 <std+0x40>)
 800fee0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fee2:	4b05      	ldr	r3, [pc, #20]	; (800fef8 <std+0x44>)
 800fee4:	6224      	str	r4, [r4, #32]
 800fee6:	6323      	str	r3, [r4, #48]	; 0x30
 800fee8:	bd10      	pop	{r4, pc}
 800feea:	bf00      	nop
 800feec:	08010209 	.word	0x08010209
 800fef0:	0801022b 	.word	0x0801022b
 800fef4:	08010263 	.word	0x08010263
 800fef8:	08010287 	.word	0x08010287

0800fefc <_cleanup_r>:
 800fefc:	4901      	ldr	r1, [pc, #4]	; (800ff04 <_cleanup_r+0x8>)
 800fefe:	f000 b8af 	b.w	8010060 <_fwalk_reent>
 800ff02:	bf00      	nop
 800ff04:	0800fe3d 	.word	0x0800fe3d

0800ff08 <__sfmoreglue>:
 800ff08:	b570      	push	{r4, r5, r6, lr}
 800ff0a:	2268      	movs	r2, #104	; 0x68
 800ff0c:	1e4d      	subs	r5, r1, #1
 800ff0e:	4355      	muls	r5, r2
 800ff10:	460e      	mov	r6, r1
 800ff12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ff16:	f7ff fa59 	bl	800f3cc <_malloc_r>
 800ff1a:	4604      	mov	r4, r0
 800ff1c:	b140      	cbz	r0, 800ff30 <__sfmoreglue+0x28>
 800ff1e:	2100      	movs	r1, #0
 800ff20:	e9c0 1600 	strd	r1, r6, [r0]
 800ff24:	300c      	adds	r0, #12
 800ff26:	60a0      	str	r0, [r4, #8]
 800ff28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ff2c:	f7fb fda0 	bl	800ba70 <memset>
 800ff30:	4620      	mov	r0, r4
 800ff32:	bd70      	pop	{r4, r5, r6, pc}

0800ff34 <__sfp_lock_acquire>:
 800ff34:	4801      	ldr	r0, [pc, #4]	; (800ff3c <__sfp_lock_acquire+0x8>)
 800ff36:	f000 b8b3 	b.w	80100a0 <__retarget_lock_acquire_recursive>
 800ff3a:	bf00      	nop
 800ff3c:	20002091 	.word	0x20002091

0800ff40 <__sfp_lock_release>:
 800ff40:	4801      	ldr	r0, [pc, #4]	; (800ff48 <__sfp_lock_release+0x8>)
 800ff42:	f000 b8ae 	b.w	80100a2 <__retarget_lock_release_recursive>
 800ff46:	bf00      	nop
 800ff48:	20002091 	.word	0x20002091

0800ff4c <__sinit_lock_acquire>:
 800ff4c:	4801      	ldr	r0, [pc, #4]	; (800ff54 <__sinit_lock_acquire+0x8>)
 800ff4e:	f000 b8a7 	b.w	80100a0 <__retarget_lock_acquire_recursive>
 800ff52:	bf00      	nop
 800ff54:	20002092 	.word	0x20002092

0800ff58 <__sinit_lock_release>:
 800ff58:	4801      	ldr	r0, [pc, #4]	; (800ff60 <__sinit_lock_release+0x8>)
 800ff5a:	f000 b8a2 	b.w	80100a2 <__retarget_lock_release_recursive>
 800ff5e:	bf00      	nop
 800ff60:	20002092 	.word	0x20002092

0800ff64 <__sinit>:
 800ff64:	b510      	push	{r4, lr}
 800ff66:	4604      	mov	r4, r0
 800ff68:	f7ff fff0 	bl	800ff4c <__sinit_lock_acquire>
 800ff6c:	69a3      	ldr	r3, [r4, #24]
 800ff6e:	b11b      	cbz	r3, 800ff78 <__sinit+0x14>
 800ff70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff74:	f7ff bff0 	b.w	800ff58 <__sinit_lock_release>
 800ff78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ff7c:	6523      	str	r3, [r4, #80]	; 0x50
 800ff7e:	4b13      	ldr	r3, [pc, #76]	; (800ffcc <__sinit+0x68>)
 800ff80:	4a13      	ldr	r2, [pc, #76]	; (800ffd0 <__sinit+0x6c>)
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	62a2      	str	r2, [r4, #40]	; 0x28
 800ff86:	42a3      	cmp	r3, r4
 800ff88:	bf04      	itt	eq
 800ff8a:	2301      	moveq	r3, #1
 800ff8c:	61a3      	streq	r3, [r4, #24]
 800ff8e:	4620      	mov	r0, r4
 800ff90:	f000 f820 	bl	800ffd4 <__sfp>
 800ff94:	6060      	str	r0, [r4, #4]
 800ff96:	4620      	mov	r0, r4
 800ff98:	f000 f81c 	bl	800ffd4 <__sfp>
 800ff9c:	60a0      	str	r0, [r4, #8]
 800ff9e:	4620      	mov	r0, r4
 800ffa0:	f000 f818 	bl	800ffd4 <__sfp>
 800ffa4:	2200      	movs	r2, #0
 800ffa6:	60e0      	str	r0, [r4, #12]
 800ffa8:	2104      	movs	r1, #4
 800ffaa:	6860      	ldr	r0, [r4, #4]
 800ffac:	f7ff ff82 	bl	800feb4 <std>
 800ffb0:	68a0      	ldr	r0, [r4, #8]
 800ffb2:	2201      	movs	r2, #1
 800ffb4:	2109      	movs	r1, #9
 800ffb6:	f7ff ff7d 	bl	800feb4 <std>
 800ffba:	68e0      	ldr	r0, [r4, #12]
 800ffbc:	2202      	movs	r2, #2
 800ffbe:	2112      	movs	r1, #18
 800ffc0:	f7ff ff78 	bl	800feb4 <std>
 800ffc4:	2301      	movs	r3, #1
 800ffc6:	61a3      	str	r3, [r4, #24]
 800ffc8:	e7d2      	b.n	800ff70 <__sinit+0xc>
 800ffca:	bf00      	nop
 800ffcc:	080103e0 	.word	0x080103e0
 800ffd0:	0800fefd 	.word	0x0800fefd

0800ffd4 <__sfp>:
 800ffd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffd6:	4607      	mov	r7, r0
 800ffd8:	f7ff ffac 	bl	800ff34 <__sfp_lock_acquire>
 800ffdc:	4b1e      	ldr	r3, [pc, #120]	; (8010058 <__sfp+0x84>)
 800ffde:	681e      	ldr	r6, [r3, #0]
 800ffe0:	69b3      	ldr	r3, [r6, #24]
 800ffe2:	b913      	cbnz	r3, 800ffea <__sfp+0x16>
 800ffe4:	4630      	mov	r0, r6
 800ffe6:	f7ff ffbd 	bl	800ff64 <__sinit>
 800ffea:	3648      	adds	r6, #72	; 0x48
 800ffec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fff0:	3b01      	subs	r3, #1
 800fff2:	d503      	bpl.n	800fffc <__sfp+0x28>
 800fff4:	6833      	ldr	r3, [r6, #0]
 800fff6:	b30b      	cbz	r3, 801003c <__sfp+0x68>
 800fff8:	6836      	ldr	r6, [r6, #0]
 800fffa:	e7f7      	b.n	800ffec <__sfp+0x18>
 800fffc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010000:	b9d5      	cbnz	r5, 8010038 <__sfp+0x64>
 8010002:	4b16      	ldr	r3, [pc, #88]	; (801005c <__sfp+0x88>)
 8010004:	60e3      	str	r3, [r4, #12]
 8010006:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801000a:	6665      	str	r5, [r4, #100]	; 0x64
 801000c:	f000 f847 	bl	801009e <__retarget_lock_init_recursive>
 8010010:	f7ff ff96 	bl	800ff40 <__sfp_lock_release>
 8010014:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010018:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801001c:	6025      	str	r5, [r4, #0]
 801001e:	61a5      	str	r5, [r4, #24]
 8010020:	2208      	movs	r2, #8
 8010022:	4629      	mov	r1, r5
 8010024:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010028:	f7fb fd22 	bl	800ba70 <memset>
 801002c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010030:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010034:	4620      	mov	r0, r4
 8010036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010038:	3468      	adds	r4, #104	; 0x68
 801003a:	e7d9      	b.n	800fff0 <__sfp+0x1c>
 801003c:	2104      	movs	r1, #4
 801003e:	4638      	mov	r0, r7
 8010040:	f7ff ff62 	bl	800ff08 <__sfmoreglue>
 8010044:	4604      	mov	r4, r0
 8010046:	6030      	str	r0, [r6, #0]
 8010048:	2800      	cmp	r0, #0
 801004a:	d1d5      	bne.n	800fff8 <__sfp+0x24>
 801004c:	f7ff ff78 	bl	800ff40 <__sfp_lock_release>
 8010050:	230c      	movs	r3, #12
 8010052:	603b      	str	r3, [r7, #0]
 8010054:	e7ee      	b.n	8010034 <__sfp+0x60>
 8010056:	bf00      	nop
 8010058:	080103e0 	.word	0x080103e0
 801005c:	ffff0001 	.word	0xffff0001

08010060 <_fwalk_reent>:
 8010060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010064:	4606      	mov	r6, r0
 8010066:	4688      	mov	r8, r1
 8010068:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801006c:	2700      	movs	r7, #0
 801006e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010072:	f1b9 0901 	subs.w	r9, r9, #1
 8010076:	d505      	bpl.n	8010084 <_fwalk_reent+0x24>
 8010078:	6824      	ldr	r4, [r4, #0]
 801007a:	2c00      	cmp	r4, #0
 801007c:	d1f7      	bne.n	801006e <_fwalk_reent+0xe>
 801007e:	4638      	mov	r0, r7
 8010080:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010084:	89ab      	ldrh	r3, [r5, #12]
 8010086:	2b01      	cmp	r3, #1
 8010088:	d907      	bls.n	801009a <_fwalk_reent+0x3a>
 801008a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801008e:	3301      	adds	r3, #1
 8010090:	d003      	beq.n	801009a <_fwalk_reent+0x3a>
 8010092:	4629      	mov	r1, r5
 8010094:	4630      	mov	r0, r6
 8010096:	47c0      	blx	r8
 8010098:	4307      	orrs	r7, r0
 801009a:	3568      	adds	r5, #104	; 0x68
 801009c:	e7e9      	b.n	8010072 <_fwalk_reent+0x12>

0801009e <__retarget_lock_init_recursive>:
 801009e:	4770      	bx	lr

080100a0 <__retarget_lock_acquire_recursive>:
 80100a0:	4770      	bx	lr

080100a2 <__retarget_lock_release_recursive>:
 80100a2:	4770      	bx	lr

080100a4 <__swhatbuf_r>:
 80100a4:	b570      	push	{r4, r5, r6, lr}
 80100a6:	460e      	mov	r6, r1
 80100a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100ac:	2900      	cmp	r1, #0
 80100ae:	b096      	sub	sp, #88	; 0x58
 80100b0:	4614      	mov	r4, r2
 80100b2:	461d      	mov	r5, r3
 80100b4:	da08      	bge.n	80100c8 <__swhatbuf_r+0x24>
 80100b6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80100ba:	2200      	movs	r2, #0
 80100bc:	602a      	str	r2, [r5, #0]
 80100be:	061a      	lsls	r2, r3, #24
 80100c0:	d410      	bmi.n	80100e4 <__swhatbuf_r+0x40>
 80100c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80100c6:	e00e      	b.n	80100e6 <__swhatbuf_r+0x42>
 80100c8:	466a      	mov	r2, sp
 80100ca:	f000 f903 	bl	80102d4 <_fstat_r>
 80100ce:	2800      	cmp	r0, #0
 80100d0:	dbf1      	blt.n	80100b6 <__swhatbuf_r+0x12>
 80100d2:	9a01      	ldr	r2, [sp, #4]
 80100d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80100d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80100dc:	425a      	negs	r2, r3
 80100de:	415a      	adcs	r2, r3
 80100e0:	602a      	str	r2, [r5, #0]
 80100e2:	e7ee      	b.n	80100c2 <__swhatbuf_r+0x1e>
 80100e4:	2340      	movs	r3, #64	; 0x40
 80100e6:	2000      	movs	r0, #0
 80100e8:	6023      	str	r3, [r4, #0]
 80100ea:	b016      	add	sp, #88	; 0x58
 80100ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080100f0 <__smakebuf_r>:
 80100f0:	898b      	ldrh	r3, [r1, #12]
 80100f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80100f4:	079d      	lsls	r5, r3, #30
 80100f6:	4606      	mov	r6, r0
 80100f8:	460c      	mov	r4, r1
 80100fa:	d507      	bpl.n	801010c <__smakebuf_r+0x1c>
 80100fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010100:	6023      	str	r3, [r4, #0]
 8010102:	6123      	str	r3, [r4, #16]
 8010104:	2301      	movs	r3, #1
 8010106:	6163      	str	r3, [r4, #20]
 8010108:	b002      	add	sp, #8
 801010a:	bd70      	pop	{r4, r5, r6, pc}
 801010c:	ab01      	add	r3, sp, #4
 801010e:	466a      	mov	r2, sp
 8010110:	f7ff ffc8 	bl	80100a4 <__swhatbuf_r>
 8010114:	9900      	ldr	r1, [sp, #0]
 8010116:	4605      	mov	r5, r0
 8010118:	4630      	mov	r0, r6
 801011a:	f7ff f957 	bl	800f3cc <_malloc_r>
 801011e:	b948      	cbnz	r0, 8010134 <__smakebuf_r+0x44>
 8010120:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010124:	059a      	lsls	r2, r3, #22
 8010126:	d4ef      	bmi.n	8010108 <__smakebuf_r+0x18>
 8010128:	f023 0303 	bic.w	r3, r3, #3
 801012c:	f043 0302 	orr.w	r3, r3, #2
 8010130:	81a3      	strh	r3, [r4, #12]
 8010132:	e7e3      	b.n	80100fc <__smakebuf_r+0xc>
 8010134:	4b0d      	ldr	r3, [pc, #52]	; (801016c <__smakebuf_r+0x7c>)
 8010136:	62b3      	str	r3, [r6, #40]	; 0x28
 8010138:	89a3      	ldrh	r3, [r4, #12]
 801013a:	6020      	str	r0, [r4, #0]
 801013c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010140:	81a3      	strh	r3, [r4, #12]
 8010142:	9b00      	ldr	r3, [sp, #0]
 8010144:	6163      	str	r3, [r4, #20]
 8010146:	9b01      	ldr	r3, [sp, #4]
 8010148:	6120      	str	r0, [r4, #16]
 801014a:	b15b      	cbz	r3, 8010164 <__smakebuf_r+0x74>
 801014c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010150:	4630      	mov	r0, r6
 8010152:	f000 f8d1 	bl	80102f8 <_isatty_r>
 8010156:	b128      	cbz	r0, 8010164 <__smakebuf_r+0x74>
 8010158:	89a3      	ldrh	r3, [r4, #12]
 801015a:	f023 0303 	bic.w	r3, r3, #3
 801015e:	f043 0301 	orr.w	r3, r3, #1
 8010162:	81a3      	strh	r3, [r4, #12]
 8010164:	89a0      	ldrh	r0, [r4, #12]
 8010166:	4305      	orrs	r5, r0
 8010168:	81a5      	strh	r5, [r4, #12]
 801016a:	e7cd      	b.n	8010108 <__smakebuf_r+0x18>
 801016c:	0800fefd 	.word	0x0800fefd

08010170 <_malloc_usable_size_r>:
 8010170:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010174:	1f18      	subs	r0, r3, #4
 8010176:	2b00      	cmp	r3, #0
 8010178:	bfbc      	itt	lt
 801017a:	580b      	ldrlt	r3, [r1, r0]
 801017c:	18c0      	addlt	r0, r0, r3
 801017e:	4770      	bx	lr

08010180 <_raise_r>:
 8010180:	291f      	cmp	r1, #31
 8010182:	b538      	push	{r3, r4, r5, lr}
 8010184:	4604      	mov	r4, r0
 8010186:	460d      	mov	r5, r1
 8010188:	d904      	bls.n	8010194 <_raise_r+0x14>
 801018a:	2316      	movs	r3, #22
 801018c:	6003      	str	r3, [r0, #0]
 801018e:	f04f 30ff 	mov.w	r0, #4294967295
 8010192:	bd38      	pop	{r3, r4, r5, pc}
 8010194:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010196:	b112      	cbz	r2, 801019e <_raise_r+0x1e>
 8010198:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801019c:	b94b      	cbnz	r3, 80101b2 <_raise_r+0x32>
 801019e:	4620      	mov	r0, r4
 80101a0:	f000 f830 	bl	8010204 <_getpid_r>
 80101a4:	462a      	mov	r2, r5
 80101a6:	4601      	mov	r1, r0
 80101a8:	4620      	mov	r0, r4
 80101aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80101ae:	f000 b817 	b.w	80101e0 <_kill_r>
 80101b2:	2b01      	cmp	r3, #1
 80101b4:	d00a      	beq.n	80101cc <_raise_r+0x4c>
 80101b6:	1c59      	adds	r1, r3, #1
 80101b8:	d103      	bne.n	80101c2 <_raise_r+0x42>
 80101ba:	2316      	movs	r3, #22
 80101bc:	6003      	str	r3, [r0, #0]
 80101be:	2001      	movs	r0, #1
 80101c0:	e7e7      	b.n	8010192 <_raise_r+0x12>
 80101c2:	2400      	movs	r4, #0
 80101c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80101c8:	4628      	mov	r0, r5
 80101ca:	4798      	blx	r3
 80101cc:	2000      	movs	r0, #0
 80101ce:	e7e0      	b.n	8010192 <_raise_r+0x12>

080101d0 <raise>:
 80101d0:	4b02      	ldr	r3, [pc, #8]	; (80101dc <raise+0xc>)
 80101d2:	4601      	mov	r1, r0
 80101d4:	6818      	ldr	r0, [r3, #0]
 80101d6:	f7ff bfd3 	b.w	8010180 <_raise_r>
 80101da:	bf00      	nop
 80101dc:	2000011c 	.word	0x2000011c

080101e0 <_kill_r>:
 80101e0:	b538      	push	{r3, r4, r5, lr}
 80101e2:	4d07      	ldr	r5, [pc, #28]	; (8010200 <_kill_r+0x20>)
 80101e4:	2300      	movs	r3, #0
 80101e6:	4604      	mov	r4, r0
 80101e8:	4608      	mov	r0, r1
 80101ea:	4611      	mov	r1, r2
 80101ec:	602b      	str	r3, [r5, #0]
 80101ee:	f7f1 fb79 	bl	80018e4 <_kill>
 80101f2:	1c43      	adds	r3, r0, #1
 80101f4:	d102      	bne.n	80101fc <_kill_r+0x1c>
 80101f6:	682b      	ldr	r3, [r5, #0]
 80101f8:	b103      	cbz	r3, 80101fc <_kill_r+0x1c>
 80101fa:	6023      	str	r3, [r4, #0]
 80101fc:	bd38      	pop	{r3, r4, r5, pc}
 80101fe:	bf00      	nop
 8010200:	2000208c 	.word	0x2000208c

08010204 <_getpid_r>:
 8010204:	f7f1 bb66 	b.w	80018d4 <_getpid>

08010208 <__sread>:
 8010208:	b510      	push	{r4, lr}
 801020a:	460c      	mov	r4, r1
 801020c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010210:	f000 f894 	bl	801033c <_read_r>
 8010214:	2800      	cmp	r0, #0
 8010216:	bfab      	itete	ge
 8010218:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801021a:	89a3      	ldrhlt	r3, [r4, #12]
 801021c:	181b      	addge	r3, r3, r0
 801021e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010222:	bfac      	ite	ge
 8010224:	6563      	strge	r3, [r4, #84]	; 0x54
 8010226:	81a3      	strhlt	r3, [r4, #12]
 8010228:	bd10      	pop	{r4, pc}

0801022a <__swrite>:
 801022a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801022e:	461f      	mov	r7, r3
 8010230:	898b      	ldrh	r3, [r1, #12]
 8010232:	05db      	lsls	r3, r3, #23
 8010234:	4605      	mov	r5, r0
 8010236:	460c      	mov	r4, r1
 8010238:	4616      	mov	r6, r2
 801023a:	d505      	bpl.n	8010248 <__swrite+0x1e>
 801023c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010240:	2302      	movs	r3, #2
 8010242:	2200      	movs	r2, #0
 8010244:	f000 f868 	bl	8010318 <_lseek_r>
 8010248:	89a3      	ldrh	r3, [r4, #12]
 801024a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801024e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010252:	81a3      	strh	r3, [r4, #12]
 8010254:	4632      	mov	r2, r6
 8010256:	463b      	mov	r3, r7
 8010258:	4628      	mov	r0, r5
 801025a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801025e:	f000 b817 	b.w	8010290 <_write_r>

08010262 <__sseek>:
 8010262:	b510      	push	{r4, lr}
 8010264:	460c      	mov	r4, r1
 8010266:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801026a:	f000 f855 	bl	8010318 <_lseek_r>
 801026e:	1c43      	adds	r3, r0, #1
 8010270:	89a3      	ldrh	r3, [r4, #12]
 8010272:	bf15      	itete	ne
 8010274:	6560      	strne	r0, [r4, #84]	; 0x54
 8010276:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801027a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801027e:	81a3      	strheq	r3, [r4, #12]
 8010280:	bf18      	it	ne
 8010282:	81a3      	strhne	r3, [r4, #12]
 8010284:	bd10      	pop	{r4, pc}

08010286 <__sclose>:
 8010286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801028a:	f000 b813 	b.w	80102b4 <_close_r>
	...

08010290 <_write_r>:
 8010290:	b538      	push	{r3, r4, r5, lr}
 8010292:	4d07      	ldr	r5, [pc, #28]	; (80102b0 <_write_r+0x20>)
 8010294:	4604      	mov	r4, r0
 8010296:	4608      	mov	r0, r1
 8010298:	4611      	mov	r1, r2
 801029a:	2200      	movs	r2, #0
 801029c:	602a      	str	r2, [r5, #0]
 801029e:	461a      	mov	r2, r3
 80102a0:	f7f1 fb57 	bl	8001952 <_write>
 80102a4:	1c43      	adds	r3, r0, #1
 80102a6:	d102      	bne.n	80102ae <_write_r+0x1e>
 80102a8:	682b      	ldr	r3, [r5, #0]
 80102aa:	b103      	cbz	r3, 80102ae <_write_r+0x1e>
 80102ac:	6023      	str	r3, [r4, #0]
 80102ae:	bd38      	pop	{r3, r4, r5, pc}
 80102b0:	2000208c 	.word	0x2000208c

080102b4 <_close_r>:
 80102b4:	b538      	push	{r3, r4, r5, lr}
 80102b6:	4d06      	ldr	r5, [pc, #24]	; (80102d0 <_close_r+0x1c>)
 80102b8:	2300      	movs	r3, #0
 80102ba:	4604      	mov	r4, r0
 80102bc:	4608      	mov	r0, r1
 80102be:	602b      	str	r3, [r5, #0]
 80102c0:	f7f1 fb63 	bl	800198a <_close>
 80102c4:	1c43      	adds	r3, r0, #1
 80102c6:	d102      	bne.n	80102ce <_close_r+0x1a>
 80102c8:	682b      	ldr	r3, [r5, #0]
 80102ca:	b103      	cbz	r3, 80102ce <_close_r+0x1a>
 80102cc:	6023      	str	r3, [r4, #0]
 80102ce:	bd38      	pop	{r3, r4, r5, pc}
 80102d0:	2000208c 	.word	0x2000208c

080102d4 <_fstat_r>:
 80102d4:	b538      	push	{r3, r4, r5, lr}
 80102d6:	4d07      	ldr	r5, [pc, #28]	; (80102f4 <_fstat_r+0x20>)
 80102d8:	2300      	movs	r3, #0
 80102da:	4604      	mov	r4, r0
 80102dc:	4608      	mov	r0, r1
 80102de:	4611      	mov	r1, r2
 80102e0:	602b      	str	r3, [r5, #0]
 80102e2:	f7f1 fb5e 	bl	80019a2 <_fstat>
 80102e6:	1c43      	adds	r3, r0, #1
 80102e8:	d102      	bne.n	80102f0 <_fstat_r+0x1c>
 80102ea:	682b      	ldr	r3, [r5, #0]
 80102ec:	b103      	cbz	r3, 80102f0 <_fstat_r+0x1c>
 80102ee:	6023      	str	r3, [r4, #0]
 80102f0:	bd38      	pop	{r3, r4, r5, pc}
 80102f2:	bf00      	nop
 80102f4:	2000208c 	.word	0x2000208c

080102f8 <_isatty_r>:
 80102f8:	b538      	push	{r3, r4, r5, lr}
 80102fa:	4d06      	ldr	r5, [pc, #24]	; (8010314 <_isatty_r+0x1c>)
 80102fc:	2300      	movs	r3, #0
 80102fe:	4604      	mov	r4, r0
 8010300:	4608      	mov	r0, r1
 8010302:	602b      	str	r3, [r5, #0]
 8010304:	f7f1 fb5d 	bl	80019c2 <_isatty>
 8010308:	1c43      	adds	r3, r0, #1
 801030a:	d102      	bne.n	8010312 <_isatty_r+0x1a>
 801030c:	682b      	ldr	r3, [r5, #0]
 801030e:	b103      	cbz	r3, 8010312 <_isatty_r+0x1a>
 8010310:	6023      	str	r3, [r4, #0]
 8010312:	bd38      	pop	{r3, r4, r5, pc}
 8010314:	2000208c 	.word	0x2000208c

08010318 <_lseek_r>:
 8010318:	b538      	push	{r3, r4, r5, lr}
 801031a:	4d07      	ldr	r5, [pc, #28]	; (8010338 <_lseek_r+0x20>)
 801031c:	4604      	mov	r4, r0
 801031e:	4608      	mov	r0, r1
 8010320:	4611      	mov	r1, r2
 8010322:	2200      	movs	r2, #0
 8010324:	602a      	str	r2, [r5, #0]
 8010326:	461a      	mov	r2, r3
 8010328:	f7f1 fb56 	bl	80019d8 <_lseek>
 801032c:	1c43      	adds	r3, r0, #1
 801032e:	d102      	bne.n	8010336 <_lseek_r+0x1e>
 8010330:	682b      	ldr	r3, [r5, #0]
 8010332:	b103      	cbz	r3, 8010336 <_lseek_r+0x1e>
 8010334:	6023      	str	r3, [r4, #0]
 8010336:	bd38      	pop	{r3, r4, r5, pc}
 8010338:	2000208c 	.word	0x2000208c

0801033c <_read_r>:
 801033c:	b538      	push	{r3, r4, r5, lr}
 801033e:	4d07      	ldr	r5, [pc, #28]	; (801035c <_read_r+0x20>)
 8010340:	4604      	mov	r4, r0
 8010342:	4608      	mov	r0, r1
 8010344:	4611      	mov	r1, r2
 8010346:	2200      	movs	r2, #0
 8010348:	602a      	str	r2, [r5, #0]
 801034a:	461a      	mov	r2, r3
 801034c:	f7f1 fae4 	bl	8001918 <_read>
 8010350:	1c43      	adds	r3, r0, #1
 8010352:	d102      	bne.n	801035a <_read_r+0x1e>
 8010354:	682b      	ldr	r3, [r5, #0]
 8010356:	b103      	cbz	r3, 801035a <_read_r+0x1e>
 8010358:	6023      	str	r3, [r4, #0]
 801035a:	bd38      	pop	{r3, r4, r5, pc}
 801035c:	2000208c 	.word	0x2000208c

08010360 <_init>:
 8010360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010362:	bf00      	nop
 8010364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010366:	bc08      	pop	{r3}
 8010368:	469e      	mov	lr, r3
 801036a:	4770      	bx	lr

0801036c <_fini>:
 801036c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801036e:	bf00      	nop
 8010370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010372:	bc08      	pop	{r3}
 8010374:	469e      	mov	lr, r3
 8010376:	4770      	bx	lr
