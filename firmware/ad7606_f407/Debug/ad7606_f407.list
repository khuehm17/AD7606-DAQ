
ad7606_f407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092d0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08009458  08009458  00019458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094e0  080094e0  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  080094e0  080094e0  000194e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080094e8  080094e8  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094e8  080094e8  000194e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094ec  080094ec  000194ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  080094f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          00001d80  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00006004  20001e7c  20001e7c  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016bcb  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000362b  00000000  00000000  00036cf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001370  00000000  00000000  0003a328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011e8  00000000  00000000  0003b698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000244f9  00000000  00000000  0003c880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001785a  00000000  00000000  00060d79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cecd8  00000000  00000000  000785d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001472ab  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000051bc  00000000  00000000  001472fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009440 	.word	0x08009440

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	08009440 	.word	0x08009440

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <AD7606_Init>:
 *               the configuration information for TIM mmodule.
 * @retval None
 */
void AD7606_Init(AD7606_HandleTyeDef *dev, SPI_HandleTypeDef *spiHandle,
		DMA_HandleTypeDef *dmaHandle, TIM_HandleTypeDef *timHandle)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	607a      	str	r2, [r7, #4]
 80004d8:	603b      	str	r3, [r7, #0]
	dev->hspi = spiHandle;
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	68ba      	ldr	r2, [r7, #8]
 80004de:	601a      	str	r2, [r3, #0]
	dev->hdmarx = dmaHandle;
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	687a      	ldr	r2, [r7, #4]
 80004e4:	609a      	str	r2, [r3, #8]
	dev->htim = timHandle;
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	683a      	ldr	r2, [r7, #0]
 80004ea:	605a      	str	r2, [r3, #4]
	return;
 80004ec:	bf00      	nop
}
 80004ee:	3714      	adds	r7, #20
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr

080004f8 <AD7606_RST>:
/**
 * @brief  Reset AD7606 Module before using
 * @retval None
 */
void AD7606_RST(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
	AD_RST_H;
 80004fc:	2201      	movs	r2, #1
 80004fe:	2104      	movs	r1, #4
 8000500:	4806      	ldr	r0, [pc, #24]	; (800051c <AD7606_RST+0x24>)
 8000502:	f001 fbcb 	bl	8001c9c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000506:	2001      	movs	r0, #1
 8000508:	f000 fd6e 	bl	8000fe8 <HAL_Delay>
	AD_RST_L;
 800050c:	2200      	movs	r2, #0
 800050e:	2104      	movs	r1, #4
 8000510:	4802      	ldr	r0, [pc, #8]	; (800051c <AD7606_RST+0x24>)
 8000512:	f001 fbc3 	bl	8001c9c <HAL_GPIO_WritePin>
}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40020800 	.word	0x40020800

08000520 <AD7606_OS_SET>:
 * @brief  Init oversampling rate for AD7606
 * @param osRate,
 * @retval None
 */
void AD7606_OS_SET(uint8_t osRate)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	71fb      	strb	r3, [r7, #7]
	switch (osRate)
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	2b20      	cmp	r3, #32
 800052e:	dc49      	bgt.n	80005c4 <AD7606_OS_SET+0xa4>
 8000530:	2b00      	cmp	r3, #0
 8000532:	f340 80ba 	ble.w	80006aa <AD7606_OS_SET+0x18a>
 8000536:	3b01      	subs	r3, #1
 8000538:	2b1f      	cmp	r3, #31
 800053a:	f200 80b6 	bhi.w	80006aa <AD7606_OS_SET+0x18a>
 800053e:	a201      	add	r2, pc, #4	; (adr r2, 8000544 <AD7606_OS_SET+0x24>)
 8000540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000544:	080005cb 	.word	0x080005cb
 8000548:	080005eb 	.word	0x080005eb
 800054c:	080006ab 	.word	0x080006ab
 8000550:	0800060b 	.word	0x0800060b
 8000554:	080006ab 	.word	0x080006ab
 8000558:	080006ab 	.word	0x080006ab
 800055c:	080006ab 	.word	0x080006ab
 8000560:	0800062b 	.word	0x0800062b
 8000564:	080006ab 	.word	0x080006ab
 8000568:	080006ab 	.word	0x080006ab
 800056c:	080006ab 	.word	0x080006ab
 8000570:	080006ab 	.word	0x080006ab
 8000574:	080006ab 	.word	0x080006ab
 8000578:	080006ab 	.word	0x080006ab
 800057c:	080006ab 	.word	0x080006ab
 8000580:	0800064b 	.word	0x0800064b
 8000584:	080006ab 	.word	0x080006ab
 8000588:	080006ab 	.word	0x080006ab
 800058c:	080006ab 	.word	0x080006ab
 8000590:	080006ab 	.word	0x080006ab
 8000594:	080006ab 	.word	0x080006ab
 8000598:	080006ab 	.word	0x080006ab
 800059c:	080006ab 	.word	0x080006ab
 80005a0:	080006ab 	.word	0x080006ab
 80005a4:	080006ab 	.word	0x080006ab
 80005a8:	080006ab 	.word	0x080006ab
 80005ac:	080006ab 	.word	0x080006ab
 80005b0:	080006ab 	.word	0x080006ab
 80005b4:	080006ab 	.word	0x080006ab
 80005b8:	080006ab 	.word	0x080006ab
 80005bc:	080006ab 	.word	0x080006ab
 80005c0:	0800066b 	.word	0x0800066b
 80005c4:	2b40      	cmp	r3, #64	; 0x40
 80005c6:	d060      	beq.n	800068a <AD7606_OS_SET+0x16a>
 80005c8:	e06f      	b.n	80006aa <AD7606_OS_SET+0x18a>
	{
	case OS_NO_RATIO:	//000
		AD_OS0_L;
 80005ca:	2200      	movs	r2, #0
 80005cc:	2102      	movs	r1, #2
 80005ce:	4841      	ldr	r0, [pc, #260]	; (80006d4 <AD7606_OS_SET+0x1b4>)
 80005d0:	f001 fb64 	bl	8001c9c <HAL_GPIO_WritePin>
		AD_OS1_L;
 80005d4:	2200      	movs	r2, #0
 80005d6:	2101      	movs	r1, #1
 80005d8:	483e      	ldr	r0, [pc, #248]	; (80006d4 <AD7606_OS_SET+0x1b4>)
 80005da:	f001 fb5f 	bl	8001c9c <HAL_GPIO_WritePin>
		AD_OS2_L;
 80005de:	2200      	movs	r2, #0
 80005e0:	2101      	movs	r1, #1
 80005e2:	483c      	ldr	r0, [pc, #240]	; (80006d4 <AD7606_OS_SET+0x1b4>)
 80005e4:	f001 fb5a 	bl	8001c9c <HAL_GPIO_WritePin>
		break;
 80005e8:	e06f      	b.n	80006ca <AD7606_OS_SET+0x1aa>
	case OS_RATIO_2:	//001
		AD_OS0_H;
 80005ea:	2201      	movs	r2, #1
 80005ec:	2102      	movs	r1, #2
 80005ee:	4839      	ldr	r0, [pc, #228]	; (80006d4 <AD7606_OS_SET+0x1b4>)
 80005f0:	f001 fb54 	bl	8001c9c <HAL_GPIO_WritePin>
		AD_OS1_L;
 80005f4:	2200      	movs	r2, #0
 80005f6:	2101      	movs	r1, #1
 80005f8:	4836      	ldr	r0, [pc, #216]	; (80006d4 <AD7606_OS_SET+0x1b4>)
 80005fa:	f001 fb4f 	bl	8001c9c <HAL_GPIO_WritePin>
		AD_OS2_L;
 80005fe:	2200      	movs	r2, #0
 8000600:	2101      	movs	r1, #1
 8000602:	4834      	ldr	r0, [pc, #208]	; (80006d4 <AD7606_OS_SET+0x1b4>)
 8000604:	f001 fb4a 	bl	8001c9c <HAL_GPIO_WritePin>
		break;
 8000608:	e05f      	b.n	80006ca <AD7606_OS_SET+0x1aa>
	case OS_RATIO_4:	//010
		AD_OS0_L;
 800060a:	2200      	movs	r2, #0
 800060c:	2102      	movs	r1, #2
 800060e:	4831      	ldr	r0, [pc, #196]	; (80006d4 <AD7606_OS_SET+0x1b4>)
 8000610:	f001 fb44 	bl	8001c9c <HAL_GPIO_WritePin>
		AD_OS1_H;
 8000614:	2201      	movs	r2, #1
 8000616:	2101      	movs	r1, #1
 8000618:	482e      	ldr	r0, [pc, #184]	; (80006d4 <AD7606_OS_SET+0x1b4>)
 800061a:	f001 fb3f 	bl	8001c9c <HAL_GPIO_WritePin>
		AD_OS2_L;
 800061e:	2200      	movs	r2, #0
 8000620:	2101      	movs	r1, #1
 8000622:	482c      	ldr	r0, [pc, #176]	; (80006d4 <AD7606_OS_SET+0x1b4>)
 8000624:	f001 fb3a 	bl	8001c9c <HAL_GPIO_WritePin>
		break;
 8000628:	e04f      	b.n	80006ca <AD7606_OS_SET+0x1aa>
	case OS_RATIO_8:	//011
		AD_OS0_H;
 800062a:	2201      	movs	r2, #1
 800062c:	2102      	movs	r1, #2
 800062e:	4829      	ldr	r0, [pc, #164]	; (80006d4 <AD7606_OS_SET+0x1b4>)
 8000630:	f001 fb34 	bl	8001c9c <HAL_GPIO_WritePin>
		AD_OS1_H;
 8000634:	2201      	movs	r2, #1
 8000636:	2101      	movs	r1, #1
 8000638:	4826      	ldr	r0, [pc, #152]	; (80006d4 <AD7606_OS_SET+0x1b4>)
 800063a:	f001 fb2f 	bl	8001c9c <HAL_GPIO_WritePin>
		AD_OS2_L;
 800063e:	2200      	movs	r2, #0
 8000640:	2101      	movs	r1, #1
 8000642:	4824      	ldr	r0, [pc, #144]	; (80006d4 <AD7606_OS_SET+0x1b4>)
 8000644:	f001 fb2a 	bl	8001c9c <HAL_GPIO_WritePin>
		break;
 8000648:	e03f      	b.n	80006ca <AD7606_OS_SET+0x1aa>
	case OS_RATIO_16:	//100
		AD_OS0_L;
 800064a:	2200      	movs	r2, #0
 800064c:	2102      	movs	r1, #2
 800064e:	4821      	ldr	r0, [pc, #132]	; (80006d4 <AD7606_OS_SET+0x1b4>)
 8000650:	f001 fb24 	bl	8001c9c <HAL_GPIO_WritePin>
		AD_OS1_L;
 8000654:	2200      	movs	r2, #0
 8000656:	2101      	movs	r1, #1
 8000658:	481e      	ldr	r0, [pc, #120]	; (80006d4 <AD7606_OS_SET+0x1b4>)
 800065a:	f001 fb1f 	bl	8001c9c <HAL_GPIO_WritePin>
		AD_OS2_H;
 800065e:	2201      	movs	r2, #1
 8000660:	2108      	movs	r1, #8
 8000662:	481d      	ldr	r0, [pc, #116]	; (80006d8 <AD7606_OS_SET+0x1b8>)
 8000664:	f001 fb1a 	bl	8001c9c <HAL_GPIO_WritePin>
		break;
 8000668:	e02f      	b.n	80006ca <AD7606_OS_SET+0x1aa>
	case OS_RATIO_32:	//101
		AD_OS0_H;
 800066a:	2201      	movs	r2, #1
 800066c:	2102      	movs	r1, #2
 800066e:	4819      	ldr	r0, [pc, #100]	; (80006d4 <AD7606_OS_SET+0x1b4>)
 8000670:	f001 fb14 	bl	8001c9c <HAL_GPIO_WritePin>
		AD_OS1_L;
 8000674:	2200      	movs	r2, #0
 8000676:	2101      	movs	r1, #1
 8000678:	4816      	ldr	r0, [pc, #88]	; (80006d4 <AD7606_OS_SET+0x1b4>)
 800067a:	f001 fb0f 	bl	8001c9c <HAL_GPIO_WritePin>
		AD_OS2_H;
 800067e:	2201      	movs	r2, #1
 8000680:	2108      	movs	r1, #8
 8000682:	4815      	ldr	r0, [pc, #84]	; (80006d8 <AD7606_OS_SET+0x1b8>)
 8000684:	f001 fb0a 	bl	8001c9c <HAL_GPIO_WritePin>
		break;
 8000688:	e01f      	b.n	80006ca <AD7606_OS_SET+0x1aa>
	case OS_RATIO_64:	//110
		AD_OS0_L;
 800068a:	2200      	movs	r2, #0
 800068c:	2102      	movs	r1, #2
 800068e:	4811      	ldr	r0, [pc, #68]	; (80006d4 <AD7606_OS_SET+0x1b4>)
 8000690:	f001 fb04 	bl	8001c9c <HAL_GPIO_WritePin>
		AD_OS1_H;
 8000694:	2201      	movs	r2, #1
 8000696:	2101      	movs	r1, #1
 8000698:	480e      	ldr	r0, [pc, #56]	; (80006d4 <AD7606_OS_SET+0x1b4>)
 800069a:	f001 faff 	bl	8001c9c <HAL_GPIO_WritePin>
		AD_OS2_H;
 800069e:	2201      	movs	r2, #1
 80006a0:	2108      	movs	r1, #8
 80006a2:	480d      	ldr	r0, [pc, #52]	; (80006d8 <AD7606_OS_SET+0x1b8>)
 80006a4:	f001 fafa 	bl	8001c9c <HAL_GPIO_WritePin>
		break;
 80006a8:	e00f      	b.n	80006ca <AD7606_OS_SET+0x1aa>
	default:
		AD_OS0_L;
 80006aa:	2200      	movs	r2, #0
 80006ac:	2102      	movs	r1, #2
 80006ae:	4809      	ldr	r0, [pc, #36]	; (80006d4 <AD7606_OS_SET+0x1b4>)
 80006b0:	f001 faf4 	bl	8001c9c <HAL_GPIO_WritePin>
		AD_OS1_L;
 80006b4:	2200      	movs	r2, #0
 80006b6:	2101      	movs	r1, #1
 80006b8:	4806      	ldr	r0, [pc, #24]	; (80006d4 <AD7606_OS_SET+0x1b4>)
 80006ba:	f001 faef 	bl	8001c9c <HAL_GPIO_WritePin>
		AD_OS2_L;
 80006be:	2200      	movs	r2, #0
 80006c0:	2101      	movs	r1, #1
 80006c2:	4804      	ldr	r0, [pc, #16]	; (80006d4 <AD7606_OS_SET+0x1b4>)
 80006c4:	f001 faea 	bl	8001c9c <HAL_GPIO_WritePin>
		break;
 80006c8:	bf00      	nop

	}
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40020000 	.word	0x40020000
 80006d8:	40020800 	.word	0x40020800

080006dc <AD7606_StartReadBytes_DMA>:
 * @param  Size amount of data to be received
 * @retval HAL status
 */
HAL_StatusTypeDef AD7606_StartReadBytes_DMA(AD7606_HandleTyeDef *dev,
		int16_t *pAdcDataBuf, uint16_t Size)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	4613      	mov	r3, r2
 80006e8:	80fb      	strh	r3, [r7, #6]
	//Set Transaction Information
	dev->pAdcDataBufPtr = pAdcDataBuf;
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	68ba      	ldr	r2, [r7, #8]
 80006ee:	60da      	str	r2, [r3, #12]
	dev->adcDataBufSize = Size;
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	88fa      	ldrh	r2, [r7, #6]
 80006f4:	821a      	strh	r2, [r3, #16]
	//wait until the BUSY pin is at reset state (Logic "0")
	while (HAL_GPIO_ReadPin(AD_BUSY_GPIO_Port, AD_BUSY_Pin) == GPIO_PIN_SET);
 80006f6:	bf00      	nop
 80006f8:	2110      	movs	r1, #16
 80006fa:	480b      	ldr	r0, [pc, #44]	; (8000728 <AD7606_StartReadBytes_DMA+0x4c>)
 80006fc:	f001 fab6 	bl	8001c6c <HAL_GPIO_ReadPin>
 8000700:	4603      	mov	r3, r0
 8000702:	2b01      	cmp	r3, #1
 8000704:	d0f8      	beq.n	80006f8 <AD7606_StartReadBytes_DMA+0x1c>
	HAL_Delay(0.0000015);
 8000706:	2000      	movs	r0, #0
 8000708:	f000 fc6e 	bl	8000fe8 <HAL_Delay>
	return HAL_SPI_Receive_DMA(dev->hspi, (uint8_t*) dev->pAdcDataBufPtr,
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	6818      	ldr	r0, [r3, #0]
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	68d9      	ldr	r1, [r3, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	8a1b      	ldrh	r3, [r3, #16]
 8000718:	461a      	mov	r2, r3
 800071a:	f003 fa4f 	bl	8003bbc <HAL_SPI_Receive_DMA>
 800071e:	4603      	mov	r3, r0
			dev->adcDataBufSize);
}
 8000720:	4618      	mov	r0, r3
 8000722:	3710      	adds	r7, #16
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40020800 	.word	0x40020800

0800072c <AD7606_CVST_START>:
 * @param  dev pointer to a AD7606_HandleTyeDef structure that contains
 *               the configuration information for AD7606 module.
 * @retval HAL status
 */
HAL_StatusTypeDef AD7606_CVST_START(AD7606_HandleTyeDef *dev)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]

	return HAL_TIM_PWM_Start(dev->htim, TIM_CHANNEL_2);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	685b      	ldr	r3, [r3, #4]
 8000738:	2104      	movs	r1, #4
 800073a:	4618      	mov	r0, r3
 800073c:	f003 feea 	bl	8004514 <HAL_TIM_PWM_Start>
 8000740:	4603      	mov	r3, r0
}
 8000742:	4618      	mov	r0, r3
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
	...

0800074c <AD7606_ConvertToVoltage>:
 * @retval HAL status
 */

void AD7606_ConvertToVoltage(uint16_t channelNum, int16_t *pAdcDataBuf,
		float *pVoltDataBuf)
{
 800074c:	b480      	push	{r7}
 800074e:	b087      	sub	sp, #28
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	60b9      	str	r1, [r7, #8]
 8000756:	607a      	str	r2, [r7, #4]
 8000758:	81fb      	strh	r3, [r7, #14]
	uint16_t i;
	for (i = 0; i < channelNum; i++)
 800075a:	2300      	movs	r3, #0
 800075c:	82fb      	strh	r3, [r7, #22]
 800075e:	e01a      	b.n	8000796 <AD7606_ConvertToVoltage+0x4a>
	{
		pVoltDataBuf[i] = ((float) pAdcDataBuf[i] * AD7606_RANGE_VALUE_10)
 8000760:	8afb      	ldrh	r3, [r7, #22]
 8000762:	005b      	lsls	r3, r3, #1
 8000764:	68ba      	ldr	r2, [r7, #8]
 8000766:	4413      	add	r3, r2
 8000768:	f9b3 3000 	ldrsh.w	r3, [r3]
 800076c:	ee07 3a90 	vmov	s15, r3
 8000770:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000774:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000778:	ee27 7a87 	vmul.f32	s14, s15, s14
 800077c:	8afb      	ldrh	r3, [r7, #22]
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	4413      	add	r3, r2
				/ 32768.0;
 8000784:	eddf 6a09 	vldr	s13, [pc, #36]	; 80007ac <AD7606_ConvertToVoltage+0x60>
 8000788:	eec7 7a26 	vdiv.f32	s15, s14, s13
		pVoltDataBuf[i] = ((float) pAdcDataBuf[i] * AD7606_RANGE_VALUE_10)
 800078c:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < channelNum; i++)
 8000790:	8afb      	ldrh	r3, [r7, #22]
 8000792:	3301      	adds	r3, #1
 8000794:	82fb      	strh	r3, [r7, #22]
 8000796:	8afa      	ldrh	r2, [r7, #22]
 8000798:	89fb      	ldrh	r3, [r7, #14]
 800079a:	429a      	cmp	r2, r3
 800079c:	d3e0      	bcc.n	8000760 <AD7606_ConvertToVoltage+0x14>
	}
	return;
 800079e:	bf00      	nop
}
 80007a0:	371c      	adds	r7, #28
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	47000000 	.word	0x47000000

080007b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b4:	f000 fba6 	bl	8000f04 <HAL_Init>

  /* USER CODE BEGIN Init */
  AD7606_Init(&had7606, &hspi1, &hdma_spi1_rx, &htim2);
 80007b8:	4b18      	ldr	r3, [pc, #96]	; (800081c <main+0x6c>)
 80007ba:	4a19      	ldr	r2, [pc, #100]	; (8000820 <main+0x70>)
 80007bc:	4919      	ldr	r1, [pc, #100]	; (8000824 <main+0x74>)
 80007be:	481a      	ldr	r0, [pc, #104]	; (8000828 <main+0x78>)
 80007c0:	f7ff fe84 	bl	80004cc <AD7606_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c4:	f000 f838 	bl	8000838 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c8:	f000 f96c 	bl	8000aa4 <MX_GPIO_Init>
  MX_DMA_Init();
 80007cc:	f000 f94a 	bl	8000a64 <MX_DMA_Init>
  MX_SPI1_Init();
 80007d0:	f000 f89c 	bl	800090c <MX_SPI1_Init>
  MX_TIM2_Init();
 80007d4:	f000 f8d2 	bl	800097c <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80007d8:	f008 f890 	bl	80088fc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  AD7606_OS_SET(1);
 80007dc:	2001      	movs	r0, #1
 80007de:	f7ff fe9f 	bl	8000520 <AD7606_OS_SET>
  AD7606_RST();
 80007e2:	f7ff fe89 	bl	80004f8 <AD7606_RST>
  AD7606_CVST_START(&had7606);
 80007e6:	4810      	ldr	r0, [pc, #64]	; (8000828 <main+0x78>)
 80007e8:	f7ff ffa0 	bl	800072c <AD7606_CVST_START>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

//	  AD7606_StartReadBytes(&had7606, adcDataBuf, ADC_DATA_BUF_SIZE, 10);
	  AD7606_StartReadBytes_DMA(&had7606, adcDataBuf, ADC_DATA_BUF_SIZE);
 80007ec:	2208      	movs	r2, #8
 80007ee:	490f      	ldr	r1, [pc, #60]	; (800082c <main+0x7c>)
 80007f0:	480d      	ldr	r0, [pc, #52]	; (8000828 <main+0x78>)
 80007f2:	f7ff ff73 	bl	80006dc <AD7606_StartReadBytes_DMA>
	  AD7606_ConvertToVoltage(READ_8_CHANNEL, adcDataBuf, voltageDataBuf);
 80007f6:	4a0e      	ldr	r2, [pc, #56]	; (8000830 <main+0x80>)
 80007f8:	490c      	ldr	r1, [pc, #48]	; (800082c <main+0x7c>)
 80007fa:	2008      	movs	r0, #8
 80007fc:	f7ff ffa6 	bl	800074c <AD7606_ConvertToVoltage>

	  CDC_Transmit_FS((uint8_t*)(itoa((int)adcDataBuf[ADC_CHANNEL_7], usbTxDataBuf, 10)), USB_TX_DATA_BUF_SIZE);
 8000800:	4b0a      	ldr	r3, [pc, #40]	; (800082c <main+0x7c>)
 8000802:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000806:	220a      	movs	r2, #10
 8000808:	490a      	ldr	r1, [pc, #40]	; (8000834 <main+0x84>)
 800080a:	4618      	mov	r0, r3
 800080c:	f008 fdcc 	bl	80093a8 <itoa>
 8000810:	4603      	mov	r3, r0
 8000812:	2108      	movs	r1, #8
 8000814:	4618      	mov	r0, r3
 8000816:	f008 f92f 	bl	8008a78 <CDC_Transmit_FS>
	  AD7606_StartReadBytes_DMA(&had7606, adcDataBuf, ADC_DATA_BUF_SIZE);
 800081a:	e7e7      	b.n	80007ec <main+0x3c>
 800081c:	200001d0 	.word	0x200001d0
 8000820:	20000170 	.word	0x20000170
 8000824:	20000118 	.word	0x20000118
 8000828:	20000250 	.word	0x20000250
 800082c:	20000218 	.word	0x20000218
 8000830:	20000228 	.word	0x20000228
 8000834:	20000248 	.word	0x20000248

08000838 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b094      	sub	sp, #80	; 0x50
 800083c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083e:	f107 0320 	add.w	r3, r7, #32
 8000842:	2230      	movs	r2, #48	; 0x30
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f008 fdb0 	bl	80093ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800084c:	f107 030c 	add.w	r3, r7, #12
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800085c:	2300      	movs	r3, #0
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	4b28      	ldr	r3, [pc, #160]	; (8000904 <SystemClock_Config+0xcc>)
 8000862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000864:	4a27      	ldr	r2, [pc, #156]	; (8000904 <SystemClock_Config+0xcc>)
 8000866:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800086a:	6413      	str	r3, [r2, #64]	; 0x40
 800086c:	4b25      	ldr	r3, [pc, #148]	; (8000904 <SystemClock_Config+0xcc>)
 800086e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000878:	2300      	movs	r3, #0
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	4b22      	ldr	r3, [pc, #136]	; (8000908 <SystemClock_Config+0xd0>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a21      	ldr	r2, [pc, #132]	; (8000908 <SystemClock_Config+0xd0>)
 8000882:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000886:	6013      	str	r3, [r2, #0]
 8000888:	4b1f      	ldr	r3, [pc, #124]	; (8000908 <SystemClock_Config+0xd0>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000894:	2301      	movs	r3, #1
 8000896:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000898:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800089e:	2302      	movs	r3, #2
 80008a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008a8:	2308      	movs	r3, #8
 80008aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008ac:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008b2:	2302      	movs	r3, #2
 80008b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008b6:	2307      	movs	r3, #7
 80008b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ba:	f107 0320 	add.w	r3, r7, #32
 80008be:	4618      	mov	r0, r3
 80008c0:	f002 fc82 	bl	80031c8 <HAL_RCC_OscConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <SystemClock_Config+0x96>
  {
    Error_Handler();
 80008ca:	f000 f98f 	bl	8000bec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ce:	230f      	movs	r3, #15
 80008d0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d2:	2302      	movs	r3, #2
 80008d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d6:	2300      	movs	r3, #0
 80008d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008da:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008e6:	f107 030c 	add.w	r3, r7, #12
 80008ea:	2105      	movs	r1, #5
 80008ec:	4618      	mov	r0, r3
 80008ee:	f002 fee3 	bl	80036b8 <HAL_RCC_ClockConfig>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80008f8:	f000 f978 	bl	8000bec <Error_Handler>
  }
}
 80008fc:	bf00      	nop
 80008fe:	3750      	adds	r7, #80	; 0x50
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40023800 	.word	0x40023800
 8000908:	40007000 	.word	0x40007000

0800090c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000910:	4b18      	ldr	r3, [pc, #96]	; (8000974 <MX_SPI1_Init+0x68>)
 8000912:	4a19      	ldr	r2, [pc, #100]	; (8000978 <MX_SPI1_Init+0x6c>)
 8000914:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000916:	4b17      	ldr	r3, [pc, #92]	; (8000974 <MX_SPI1_Init+0x68>)
 8000918:	f44f 7282 	mov.w	r2, #260	; 0x104
 800091c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800091e:	4b15      	ldr	r3, [pc, #84]	; (8000974 <MX_SPI1_Init+0x68>)
 8000920:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000924:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000926:	4b13      	ldr	r3, [pc, #76]	; (8000974 <MX_SPI1_Init+0x68>)
 8000928:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800092c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800092e:	4b11      	ldr	r3, [pc, #68]	; (8000974 <MX_SPI1_Init+0x68>)
 8000930:	2202      	movs	r2, #2
 8000932:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000934:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <MX_SPI1_Init+0x68>)
 8000936:	2201      	movs	r2, #1
 8000938:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <MX_SPI1_Init+0x68>)
 800093c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000940:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000942:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <MX_SPI1_Init+0x68>)
 8000944:	2208      	movs	r2, #8
 8000946:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000948:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <MX_SPI1_Init+0x68>)
 800094a:	2200      	movs	r2, #0
 800094c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <MX_SPI1_Init+0x68>)
 8000950:	2200      	movs	r2, #0
 8000952:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000954:	4b07      	ldr	r3, [pc, #28]	; (8000974 <MX_SPI1_Init+0x68>)
 8000956:	2200      	movs	r2, #0
 8000958:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <MX_SPI1_Init+0x68>)
 800095c:	220a      	movs	r2, #10
 800095e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000960:	4804      	ldr	r0, [pc, #16]	; (8000974 <MX_SPI1_Init+0x68>)
 8000962:	f003 f8a1 	bl	8003aa8 <HAL_SPI_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 800096c:	f000 f93e 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000118 	.word	0x20000118
 8000978:	40013000 	.word	0x40013000

0800097c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08e      	sub	sp, #56	; 0x38
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000982:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000990:	f107 0320 	add.w	r3, r7, #32
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
 80009a8:	615a      	str	r2, [r3, #20]
 80009aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009ac:	4b2c      	ldr	r3, [pc, #176]	; (8000a60 <MX_TIM2_Init+0xe4>)
 80009ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84;
 80009b4:	4b2a      	ldr	r3, [pc, #168]	; (8000a60 <MX_TIM2_Init+0xe4>)
 80009b6:	2254      	movs	r2, #84	; 0x54
 80009b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ba:	4b29      	ldr	r3, [pc, #164]	; (8000a60 <MX_TIM2_Init+0xe4>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80009c0:	4b27      	ldr	r3, [pc, #156]	; (8000a60 <MX_TIM2_Init+0xe4>)
 80009c2:	2263      	movs	r2, #99	; 0x63
 80009c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c6:	4b26      	ldr	r3, [pc, #152]	; (8000a60 <MX_TIM2_Init+0xe4>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009cc:	4b24      	ldr	r3, [pc, #144]	; (8000a60 <MX_TIM2_Init+0xe4>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009d2:	4823      	ldr	r0, [pc, #140]	; (8000a60 <MX_TIM2_Init+0xe4>)
 80009d4:	f003 fcf6 	bl	80043c4 <HAL_TIM_Base_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80009de:	f000 f905 	bl	8000bec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009ec:	4619      	mov	r1, r3
 80009ee:	481c      	ldr	r0, [pc, #112]	; (8000a60 <MX_TIM2_Init+0xe4>)
 80009f0:	f003 ff1a 	bl	8004828 <HAL_TIM_ConfigClockSource>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80009fa:	f000 f8f7 	bl	8000bec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009fe:	4818      	ldr	r0, [pc, #96]	; (8000a60 <MX_TIM2_Init+0xe4>)
 8000a00:	f003 fd2f 	bl	8004462 <HAL_TIM_PWM_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000a0a:	f000 f8ef 	bl	8000bec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a16:	f107 0320 	add.w	r3, r7, #32
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4810      	ldr	r0, [pc, #64]	; (8000a60 <MX_TIM2_Init+0xe4>)
 8000a1e:	f004 fadb 	bl	8004fd8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000a28:	f000 f8e0 	bl	8000bec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a2c:	2360      	movs	r3, #96	; 0x60
 8000a2e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 95;
 8000a30:	235f      	movs	r3, #95	; 0x5f
 8000a32:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a34:	2300      	movs	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	2204      	movs	r2, #4
 8000a40:	4619      	mov	r1, r3
 8000a42:	4807      	ldr	r0, [pc, #28]	; (8000a60 <MX_TIM2_Init+0xe4>)
 8000a44:	f003 fe2e 	bl	80046a4 <HAL_TIM_PWM_ConfigChannel>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000a4e:	f000 f8cd 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a52:	4803      	ldr	r0, [pc, #12]	; (8000a60 <MX_TIM2_Init+0xe4>)
 8000a54:	f000 f9a4 	bl	8000da0 <HAL_TIM_MspPostInit>

}
 8000a58:	bf00      	nop
 8000a5a:	3738      	adds	r7, #56	; 0x38
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	200001d0 	.word	0x200001d0

08000a64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	607b      	str	r3, [r7, #4]
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <MX_DMA_Init+0x3c>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a0b      	ldr	r2, [pc, #44]	; (8000aa0 <MX_DMA_Init+0x3c>)
 8000a74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <MX_DMA_Init+0x3c>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2038      	movs	r0, #56	; 0x38
 8000a8c:	f000 fbab 	bl	80011e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a90:	2038      	movs	r0, #56	; 0x38
 8000a92:	f000 fbc4 	bl	800121e <HAL_NVIC_EnableIRQ>

}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40023800 	.word	0x40023800

08000aa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08a      	sub	sp, #40	; 0x28
 8000aa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aaa:	f107 0314 	add.w	r3, r7, #20
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
 8000ab8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	613b      	str	r3, [r7, #16]
 8000abe:	4b47      	ldr	r3, [pc, #284]	; (8000bdc <MX_GPIO_Init+0x138>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a46      	ldr	r2, [pc, #280]	; (8000bdc <MX_GPIO_Init+0x138>)
 8000ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b44      	ldr	r3, [pc, #272]	; (8000bdc <MX_GPIO_Init+0x138>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	4b40      	ldr	r3, [pc, #256]	; (8000bdc <MX_GPIO_Init+0x138>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a3f      	ldr	r2, [pc, #252]	; (8000bdc <MX_GPIO_Init+0x138>)
 8000ae0:	f043 0304 	orr.w	r3, r3, #4
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b3d      	ldr	r3, [pc, #244]	; (8000bdc <MX_GPIO_Init+0x138>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0304 	and.w	r3, r3, #4
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	4b39      	ldr	r3, [pc, #228]	; (8000bdc <MX_GPIO_Init+0x138>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a38      	ldr	r2, [pc, #224]	; (8000bdc <MX_GPIO_Init+0x138>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b36      	ldr	r3, [pc, #216]	; (8000bdc <MX_GPIO_Init+0x138>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	4b32      	ldr	r3, [pc, #200]	; (8000bdc <MX_GPIO_Init+0x138>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a31      	ldr	r2, [pc, #196]	; (8000bdc <MX_GPIO_Init+0x138>)
 8000b18:	f043 0308 	orr.w	r3, r3, #8
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b2f      	ldr	r3, [pc, #188]	; (8000bdc <MX_GPIO_Init+0x138>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0308 	and.w	r3, r3, #8
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	603b      	str	r3, [r7, #0]
 8000b2e:	4b2b      	ldr	r3, [pc, #172]	; (8000bdc <MX_GPIO_Init+0x138>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a2a      	ldr	r2, [pc, #168]	; (8000bdc <MX_GPIO_Init+0x138>)
 8000b34:	f043 0302 	orr.w	r3, r3, #2
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b28      	ldr	r3, [pc, #160]	; (8000bdc <MX_GPIO_Init+0x138>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD_RST_Pin|AD_OS2_Pin, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	210c      	movs	r1, #12
 8000b4a:	4825      	ldr	r0, [pc, #148]	; (8000be0 <MX_GPIO_Init+0x13c>)
 8000b4c:	f001 f8a6 	bl	8001c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AD_OS1_Pin|AD_OS0_Pin, GPIO_PIN_RESET);
 8000b50:	2200      	movs	r2, #0
 8000b52:	2103      	movs	r1, #3
 8000b54:	4823      	ldr	r0, [pc, #140]	; (8000be4 <MX_GPIO_Init+0x140>)
 8000b56:	f001 f8a1 	bl	8001c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b60:	4821      	ldr	r0, [pc, #132]	; (8000be8 <MX_GPIO_Init+0x144>)
 8000b62:	f001 f89b 	bl	8001c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : AD_RST_Pin AD_OS2_Pin */
  GPIO_InitStruct.Pin = AD_RST_Pin|AD_OS2_Pin;
 8000b66:	230c      	movs	r3, #12
 8000b68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2300      	movs	r3, #0
 8000b74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b76:	f107 0314 	add.w	r3, r7, #20
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4818      	ldr	r0, [pc, #96]	; (8000be0 <MX_GPIO_Init+0x13c>)
 8000b7e:	f000 fed9 	bl	8001934 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD_OS1_Pin AD_OS0_Pin */
  GPIO_InitStruct.Pin = AD_OS1_Pin|AD_OS0_Pin;
 8000b82:	2303      	movs	r3, #3
 8000b84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b86:	2301      	movs	r3, #1
 8000b88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	4619      	mov	r1, r3
 8000b98:	4812      	ldr	r0, [pc, #72]	; (8000be4 <MX_GPIO_Init+0x140>)
 8000b9a:	f000 fecb 	bl	8001934 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD_BUSY_Pin AD_FRST_Pin */
  GPIO_InitStruct.Pin = AD_BUSY_Pin|AD_FRST_Pin;
 8000b9e:	2330      	movs	r3, #48	; 0x30
 8000ba0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	4619      	mov	r1, r3
 8000bb0:	480b      	ldr	r0, [pc, #44]	; (8000be0 <MX_GPIO_Init+0x13c>)
 8000bb2:	f000 febf 	bl	8001934 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 8000bb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4806      	ldr	r0, [pc, #24]	; (8000be8 <MX_GPIO_Init+0x144>)
 8000bd0:	f000 feb0 	bl	8001934 <HAL_GPIO_Init>

}
 8000bd4:	bf00      	nop
 8000bd6:	3728      	adds	r7, #40	; 0x28
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020800 	.word	0x40020800
 8000be4:	40020000 	.word	0x40020000
 8000be8:	40020c00 	.word	0x40020c00

08000bec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf0:	b672      	cpsid	i
}
 8000bf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <Error_Handler+0x8>
	...

08000bf8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <HAL_MspInit+0x4c>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c06:	4a0f      	ldr	r2, [pc, #60]	; (8000c44 <HAL_MspInit+0x4c>)
 8000c08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c0e:	4b0d      	ldr	r3, [pc, #52]	; (8000c44 <HAL_MspInit+0x4c>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	603b      	str	r3, [r7, #0]
 8000c1e:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <HAL_MspInit+0x4c>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	4a08      	ldr	r2, [pc, #32]	; (8000c44 <HAL_MspInit+0x4c>)
 8000c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c28:	6413      	str	r3, [r2, #64]	; 0x40
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <HAL_MspInit+0x4c>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c32:	603b      	str	r3, [r7, #0]
 8000c34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	40023800 	.word	0x40023800

08000c48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	; 0x28
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a39      	ldr	r2, [pc, #228]	; (8000d4c <HAL_SPI_MspInit+0x104>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d16b      	bne.n	8000d42 <HAL_SPI_MspInit+0xfa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	4b38      	ldr	r3, [pc, #224]	; (8000d50 <HAL_SPI_MspInit+0x108>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c72:	4a37      	ldr	r2, [pc, #220]	; (8000d50 <HAL_SPI_MspInit+0x108>)
 8000c74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c78:	6453      	str	r3, [r2, #68]	; 0x44
 8000c7a:	4b35      	ldr	r3, [pc, #212]	; (8000d50 <HAL_SPI_MspInit+0x108>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	4b31      	ldr	r3, [pc, #196]	; (8000d50 <HAL_SPI_MspInit+0x108>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a30      	ldr	r2, [pc, #192]	; (8000d50 <HAL_SPI_MspInit+0x108>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b2e      	ldr	r3, [pc, #184]	; (8000d50 <HAL_SPI_MspInit+0x108>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = AD_CS_Pin;
 8000ca2:	2310      	movs	r3, #16
 8000ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000caa:	2301      	movs	r3, #1
 8000cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cb2:	2305      	movs	r3, #5
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AD_CS_GPIO_Port, &GPIO_InitStruct);
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4825      	ldr	r0, [pc, #148]	; (8000d54 <HAL_SPI_MspInit+0x10c>)
 8000cbe:	f000 fe39 	bl	8001934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AD_SCK_Pin|AD_DOU_A_Pin;
 8000cc2:	2360      	movs	r3, #96	; 0x60
 8000cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cd2:	2305      	movs	r3, #5
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd6:	f107 0314 	add.w	r3, r7, #20
 8000cda:	4619      	mov	r1, r3
 8000cdc:	481d      	ldr	r0, [pc, #116]	; (8000d54 <HAL_SPI_MspInit+0x10c>)
 8000cde:	f000 fe29 	bl	8001934 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8000ce2:	4b1d      	ldr	r3, [pc, #116]	; (8000d58 <HAL_SPI_MspInit+0x110>)
 8000ce4:	4a1d      	ldr	r2, [pc, #116]	; (8000d5c <HAL_SPI_MspInit+0x114>)
 8000ce6:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000ce8:	4b1b      	ldr	r3, [pc, #108]	; (8000d58 <HAL_SPI_MspInit+0x110>)
 8000cea:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000cee:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cf0:	4b19      	ldr	r3, [pc, #100]	; (8000d58 <HAL_SPI_MspInit+0x110>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cf6:	4b18      	ldr	r3, [pc, #96]	; (8000d58 <HAL_SPI_MspInit+0x110>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cfc:	4b16      	ldr	r3, [pc, #88]	; (8000d58 <HAL_SPI_MspInit+0x110>)
 8000cfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d02:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d04:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <HAL_SPI_MspInit+0x110>)
 8000d06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d0a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d0c:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <HAL_SPI_MspInit+0x110>)
 8000d0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d12:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000d14:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <HAL_SPI_MspInit+0x110>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <HAL_SPI_MspInit+0x110>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d20:	4b0d      	ldr	r3, [pc, #52]	; (8000d58 <HAL_SPI_MspInit+0x110>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000d26:	480c      	ldr	r0, [pc, #48]	; (8000d58 <HAL_SPI_MspInit+0x110>)
 8000d28:	f000 fa94 	bl	8001254 <HAL_DMA_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <HAL_SPI_MspInit+0xee>
    {
      Error_Handler();
 8000d32:	f7ff ff5b 	bl	8000bec <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a07      	ldr	r2, [pc, #28]	; (8000d58 <HAL_SPI_MspInit+0x110>)
 8000d3a:	64da      	str	r2, [r3, #76]	; 0x4c
 8000d3c:	4a06      	ldr	r2, [pc, #24]	; (8000d58 <HAL_SPI_MspInit+0x110>)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d42:	bf00      	nop
 8000d44:	3728      	adds	r7, #40	; 0x28
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40013000 	.word	0x40013000
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40020000 	.word	0x40020000
 8000d58:	20000170 	.word	0x20000170
 8000d5c:	40026410 	.word	0x40026410

08000d60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d70:	d10d      	bne.n	8000d8e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <HAL_TIM_Base_MspInit+0x3c>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	4a08      	ldr	r2, [pc, #32]	; (8000d9c <HAL_TIM_Base_MspInit+0x3c>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6413      	str	r3, [r2, #64]	; 0x40
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_TIM_Base_MspInit+0x3c>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d8e:	bf00      	nop
 8000d90:	3714      	adds	r7, #20
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	40023800 	.word	0x40023800

08000da0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 030c 	add.w	r3, r7, #12
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dc0:	d11d      	bne.n	8000dfe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <HAL_TIM_MspPostInit+0x68>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	4a0f      	ldr	r2, [pc, #60]	; (8000e08 <HAL_TIM_MspPostInit+0x68>)
 8000dcc:	f043 0302 	orr.w	r3, r3, #2
 8000dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd2:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <HAL_TIM_MspPostInit+0x68>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	f003 0302 	and.w	r3, r3, #2
 8000dda:	60bb      	str	r3, [r7, #8]
 8000ddc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = AD_CVST_Pin;
 8000dde:	2308      	movs	r3, #8
 8000de0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000dee:	2301      	movs	r3, #1
 8000df0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AD_CVST_GPIO_Port, &GPIO_InitStruct);
 8000df2:	f107 030c 	add.w	r3, r7, #12
 8000df6:	4619      	mov	r1, r3
 8000df8:	4804      	ldr	r0, [pc, #16]	; (8000e0c <HAL_TIM_MspPostInit+0x6c>)
 8000dfa:	f000 fd9b 	bl	8001934 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000dfe:	bf00      	nop
 8000e00:	3720      	adds	r7, #32
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40020400 	.word	0x40020400

08000e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <NMI_Handler+0x4>

08000e16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1a:	e7fe      	b.n	8000e1a <HardFault_Handler+0x4>

08000e1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <MemManage_Handler+0x4>

08000e22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e26:	e7fe      	b.n	8000e26 <BusFault_Handler+0x4>

08000e28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <UsageFault_Handler+0x4>

08000e2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e5c:	f000 f8a4 	bl	8000fa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000e68:	4802      	ldr	r0, [pc, #8]	; (8000e74 <DMA2_Stream0_IRQHandler+0x10>)
 8000e6a:	f000 faf9 	bl	8001460 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000170 	.word	0x20000170

08000e78 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e7c:	4802      	ldr	r0, [pc, #8]	; (8000e88 <OTG_FS_IRQHandler+0x10>)
 8000e7e:	f001 f876 	bl	8001f6e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20001750 	.word	0x20001750

08000e8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <SystemInit+0x20>)
 8000e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e96:	4a05      	ldr	r2, [pc, #20]	; (8000eac <SystemInit+0x20>)
 8000e98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000eb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ee8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000eb4:	480d      	ldr	r0, [pc, #52]	; (8000eec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eb6:	490e      	ldr	r1, [pc, #56]	; (8000ef0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000eb8:	4a0e      	ldr	r2, [pc, #56]	; (8000ef4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ebc:	e002      	b.n	8000ec4 <LoopCopyDataInit>

08000ebe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ebe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ec2:	3304      	adds	r3, #4

08000ec4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ec6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec8:	d3f9      	bcc.n	8000ebe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eca:	4a0b      	ldr	r2, [pc, #44]	; (8000ef8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ecc:	4c0b      	ldr	r4, [pc, #44]	; (8000efc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed0:	e001      	b.n	8000ed6 <LoopFillZerobss>

08000ed2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ed2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed4:	3204      	adds	r2, #4

08000ed6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ed6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed8:	d3fb      	bcc.n	8000ed2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eda:	f7ff ffd7 	bl	8000e8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ede:	f008 fa27 	bl	8009330 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ee2:	f7ff fc65 	bl	80007b0 <main>
  bx  lr    
 8000ee6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ee8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000eec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef0:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000ef4:	080094f0 	.word	0x080094f0
  ldr r2, =_sbss
 8000ef8:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000efc:	20001e7c 	.word	0x20001e7c

08000f00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f00:	e7fe      	b.n	8000f00 <ADC_IRQHandler>
	...

08000f04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f08:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <HAL_Init+0x40>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a0d      	ldr	r2, [pc, #52]	; (8000f44 <HAL_Init+0x40>)
 8000f0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f14:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <HAL_Init+0x40>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a0a      	ldr	r2, [pc, #40]	; (8000f44 <HAL_Init+0x40>)
 8000f1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f20:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <HAL_Init+0x40>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a07      	ldr	r2, [pc, #28]	; (8000f44 <HAL_Init+0x40>)
 8000f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f2c:	2003      	movs	r0, #3
 8000f2e:	f000 f94f 	bl	80011d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f32:	200f      	movs	r0, #15
 8000f34:	f000 f808 	bl	8000f48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f38:	f7ff fe5e 	bl	8000bf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40023c00 	.word	0x40023c00

08000f48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f50:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <HAL_InitTick+0x54>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <HAL_InitTick+0x58>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f66:	4618      	mov	r0, r3
 8000f68:	f000 f967 	bl	800123a <HAL_SYSTICK_Config>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e00e      	b.n	8000f94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2b0f      	cmp	r3, #15
 8000f7a:	d80a      	bhi.n	8000f92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	6879      	ldr	r1, [r7, #4]
 8000f80:	f04f 30ff 	mov.w	r0, #4294967295
 8000f84:	f000 f92f 	bl	80011e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f88:	4a06      	ldr	r2, [pc, #24]	; (8000fa4 <HAL_InitTick+0x5c>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	e000      	b.n	8000f94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000000 	.word	0x20000000
 8000fa0:	20000008 	.word	0x20000008
 8000fa4:	20000004 	.word	0x20000004

08000fa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_IncTick+0x20>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <HAL_IncTick+0x24>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	4a04      	ldr	r2, [pc, #16]	; (8000fcc <HAL_IncTick+0x24>)
 8000fba:	6013      	str	r3, [r2, #0]
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	20000008 	.word	0x20000008
 8000fcc:	2000026c 	.word	0x2000026c

08000fd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd4:	4b03      	ldr	r3, [pc, #12]	; (8000fe4 <HAL_GetTick+0x14>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	2000026c 	.word	0x2000026c

08000fe8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff0:	f7ff ffee 	bl	8000fd0 <HAL_GetTick>
 8000ff4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001000:	d005      	beq.n	800100e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001002:	4b0a      	ldr	r3, [pc, #40]	; (800102c <HAL_Delay+0x44>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	461a      	mov	r2, r3
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4413      	add	r3, r2
 800100c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800100e:	bf00      	nop
 8001010:	f7ff ffde 	bl	8000fd0 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	68fa      	ldr	r2, [r7, #12]
 800101c:	429a      	cmp	r2, r3
 800101e:	d8f7      	bhi.n	8001010 <HAL_Delay+0x28>
  {
  }
}
 8001020:	bf00      	nop
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000008 	.word	0x20000008

08001030 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <__NVIC_SetPriorityGrouping+0x44>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001046:	68ba      	ldr	r2, [r7, #8]
 8001048:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800104c:	4013      	ands	r3, r2
 800104e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001058:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800105c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001060:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001062:	4a04      	ldr	r2, [pc, #16]	; (8001074 <__NVIC_SetPriorityGrouping+0x44>)
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	60d3      	str	r3, [r2, #12]
}
 8001068:	bf00      	nop
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800107c:	4b04      	ldr	r3, [pc, #16]	; (8001090 <__NVIC_GetPriorityGrouping+0x18>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	0a1b      	lsrs	r3, r3, #8
 8001082:	f003 0307 	and.w	r3, r3, #7
}
 8001086:	4618      	mov	r0, r3
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	db0b      	blt.n	80010be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	f003 021f 	and.w	r2, r3, #31
 80010ac:	4907      	ldr	r1, [pc, #28]	; (80010cc <__NVIC_EnableIRQ+0x38>)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	095b      	lsrs	r3, r3, #5
 80010b4:	2001      	movs	r0, #1
 80010b6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000e100 	.word	0xe000e100

080010d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	6039      	str	r1, [r7, #0]
 80010da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	db0a      	blt.n	80010fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	490c      	ldr	r1, [pc, #48]	; (800111c <__NVIC_SetPriority+0x4c>)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	0112      	lsls	r2, r2, #4
 80010f0:	b2d2      	uxtb	r2, r2
 80010f2:	440b      	add	r3, r1
 80010f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f8:	e00a      	b.n	8001110 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4908      	ldr	r1, [pc, #32]	; (8001120 <__NVIC_SetPriority+0x50>)
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	f003 030f 	and.w	r3, r3, #15
 8001106:	3b04      	subs	r3, #4
 8001108:	0112      	lsls	r2, r2, #4
 800110a:	b2d2      	uxtb	r2, r2
 800110c:	440b      	add	r3, r1
 800110e:	761a      	strb	r2, [r3, #24]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000e100 	.word	0xe000e100
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001124:	b480      	push	{r7}
 8001126:	b089      	sub	sp, #36	; 0x24
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f1c3 0307 	rsb	r3, r3, #7
 800113e:	2b04      	cmp	r3, #4
 8001140:	bf28      	it	cs
 8001142:	2304      	movcs	r3, #4
 8001144:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3304      	adds	r3, #4
 800114a:	2b06      	cmp	r3, #6
 800114c:	d902      	bls.n	8001154 <NVIC_EncodePriority+0x30>
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3b03      	subs	r3, #3
 8001152:	e000      	b.n	8001156 <NVIC_EncodePriority+0x32>
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001158:	f04f 32ff 	mov.w	r2, #4294967295
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43da      	mvns	r2, r3
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	401a      	ands	r2, r3
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800116c:	f04f 31ff 	mov.w	r1, #4294967295
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	fa01 f303 	lsl.w	r3, r1, r3
 8001176:	43d9      	mvns	r1, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800117c:	4313      	orrs	r3, r2
         );
}
 800117e:	4618      	mov	r0, r3
 8001180:	3724      	adds	r7, #36	; 0x24
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
	...

0800118c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3b01      	subs	r3, #1
 8001198:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800119c:	d301      	bcc.n	80011a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800119e:	2301      	movs	r3, #1
 80011a0:	e00f      	b.n	80011c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011a2:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <SysTick_Config+0x40>)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011aa:	210f      	movs	r1, #15
 80011ac:	f04f 30ff 	mov.w	r0, #4294967295
 80011b0:	f7ff ff8e 	bl	80010d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b4:	4b05      	ldr	r3, [pc, #20]	; (80011cc <SysTick_Config+0x40>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ba:	4b04      	ldr	r3, [pc, #16]	; (80011cc <SysTick_Config+0x40>)
 80011bc:	2207      	movs	r2, #7
 80011be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	e000e010 	.word	0xe000e010

080011d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff ff29 	bl	8001030 <__NVIC_SetPriorityGrouping>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b086      	sub	sp, #24
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	4603      	mov	r3, r0
 80011ee:	60b9      	str	r1, [r7, #8]
 80011f0:	607a      	str	r2, [r7, #4]
 80011f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011f8:	f7ff ff3e 	bl	8001078 <__NVIC_GetPriorityGrouping>
 80011fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	68b9      	ldr	r1, [r7, #8]
 8001202:	6978      	ldr	r0, [r7, #20]
 8001204:	f7ff ff8e 	bl	8001124 <NVIC_EncodePriority>
 8001208:	4602      	mov	r2, r0
 800120a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120e:	4611      	mov	r1, r2
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ff5d 	bl	80010d0 <__NVIC_SetPriority>
}
 8001216:	bf00      	nop
 8001218:	3718      	adds	r7, #24
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
 8001224:	4603      	mov	r3, r0
 8001226:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff31 	bl	8001094 <__NVIC_EnableIRQ>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff ffa2 	bl	800118c <SysTick_Config>
 8001248:	4603      	mov	r3, r0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001260:	f7ff feb6 	bl	8000fd0 <HAL_GetTick>
 8001264:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d101      	bne.n	8001270 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	e099      	b.n	80013a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2202      	movs	r2, #2
 8001274:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f022 0201 	bic.w	r2, r2, #1
 800128e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001290:	e00f      	b.n	80012b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001292:	f7ff fe9d 	bl	8000fd0 <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	2b05      	cmp	r3, #5
 800129e:	d908      	bls.n	80012b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2220      	movs	r2, #32
 80012a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2203      	movs	r2, #3
 80012aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e078      	b.n	80013a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1e8      	bne.n	8001292 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80012c8:	697a      	ldr	r2, [r7, #20]
 80012ca:	4b38      	ldr	r3, [pc, #224]	; (80013ac <HAL_DMA_Init+0x158>)
 80012cc:	4013      	ands	r3, r2
 80012ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685a      	ldr	r2, [r3, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	691b      	ldr	r3, [r3, #16]
 80012e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a1b      	ldr	r3, [r3, #32]
 80012fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012fe:	697a      	ldr	r2, [r7, #20]
 8001300:	4313      	orrs	r3, r2
 8001302:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001308:	2b04      	cmp	r3, #4
 800130a:	d107      	bne.n	800131c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001314:	4313      	orrs	r3, r2
 8001316:	697a      	ldr	r2, [r7, #20]
 8001318:	4313      	orrs	r3, r2
 800131a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	697a      	ldr	r2, [r7, #20]
 8001322:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	f023 0307 	bic.w	r3, r3, #7
 8001332:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001338:	697a      	ldr	r2, [r7, #20]
 800133a:	4313      	orrs	r3, r2
 800133c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001342:	2b04      	cmp	r3, #4
 8001344:	d117      	bne.n	8001376 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800134a:	697a      	ldr	r2, [r7, #20]
 800134c:	4313      	orrs	r3, r2
 800134e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001354:	2b00      	cmp	r3, #0
 8001356:	d00e      	beq.n	8001376 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f000 fa6f 	bl	800183c <DMA_CheckFifoParam>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d008      	beq.n	8001376 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2240      	movs	r2, #64	; 0x40
 8001368:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2201      	movs	r2, #1
 800136e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001372:	2301      	movs	r3, #1
 8001374:	e016      	b.n	80013a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	697a      	ldr	r2, [r7, #20]
 800137c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f000 fa26 	bl	80017d0 <DMA_CalcBaseAndBitshift>
 8001384:	4603      	mov	r3, r0
 8001386:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800138c:	223f      	movs	r2, #63	; 0x3f
 800138e:	409a      	lsls	r2, r3
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2201      	movs	r2, #1
 800139e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80013a2:	2300      	movs	r3, #0
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3718      	adds	r7, #24
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	f010803f 	.word	0xf010803f

080013b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
 80013bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013be:	2300      	movs	r3, #0
 80013c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d101      	bne.n	80013d6 <HAL_DMA_Start_IT+0x26>
 80013d2:	2302      	movs	r3, #2
 80013d4:	e040      	b.n	8001458 <HAL_DMA_Start_IT+0xa8>
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2201      	movs	r2, #1
 80013da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d12f      	bne.n	800144a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2202      	movs	r2, #2
 80013ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2200      	movs	r2, #0
 80013f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	68b9      	ldr	r1, [r7, #8]
 80013fe:	68f8      	ldr	r0, [r7, #12]
 8001400:	f000 f9b8 	bl	8001774 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001408:	223f      	movs	r2, #63	; 0x3f
 800140a:	409a      	lsls	r2, r3
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f042 0216 	orr.w	r2, r2, #22
 800141e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001424:	2b00      	cmp	r3, #0
 8001426:	d007      	beq.n	8001438 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f042 0208 	orr.w	r2, r2, #8
 8001436:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f042 0201 	orr.w	r2, r2, #1
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	e005      	b.n	8001456 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	2200      	movs	r2, #0
 800144e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001452:	2302      	movs	r3, #2
 8001454:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001456:	7dfb      	ldrb	r3, [r7, #23]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3718      	adds	r7, #24
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001468:	2300      	movs	r3, #0
 800146a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800146c:	4b8e      	ldr	r3, [pc, #568]	; (80016a8 <HAL_DMA_IRQHandler+0x248>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a8e      	ldr	r2, [pc, #568]	; (80016ac <HAL_DMA_IRQHandler+0x24c>)
 8001472:	fba2 2303 	umull	r2, r3, r2, r3
 8001476:	0a9b      	lsrs	r3, r3, #10
 8001478:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800147e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800148a:	2208      	movs	r2, #8
 800148c:	409a      	lsls	r2, r3
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	4013      	ands	r3, r2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d01a      	beq.n	80014cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0304 	and.w	r3, r3, #4
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d013      	beq.n	80014cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f022 0204 	bic.w	r2, r2, #4
 80014b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014b8:	2208      	movs	r2, #8
 80014ba:	409a      	lsls	r2, r3
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014c4:	f043 0201 	orr.w	r2, r3, #1
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014d0:	2201      	movs	r2, #1
 80014d2:	409a      	lsls	r2, r3
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4013      	ands	r3, r2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d012      	beq.n	8001502 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d00b      	beq.n	8001502 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ee:	2201      	movs	r2, #1
 80014f0:	409a      	lsls	r2, r3
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014fa:	f043 0202 	orr.w	r2, r3, #2
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001506:	2204      	movs	r2, #4
 8001508:	409a      	lsls	r2, r3
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	4013      	ands	r3, r2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d012      	beq.n	8001538 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d00b      	beq.n	8001538 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001524:	2204      	movs	r2, #4
 8001526:	409a      	lsls	r2, r3
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001530:	f043 0204 	orr.w	r2, r3, #4
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800153c:	2210      	movs	r2, #16
 800153e:	409a      	lsls	r2, r3
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	4013      	ands	r3, r2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d043      	beq.n	80015d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0308 	and.w	r3, r3, #8
 8001552:	2b00      	cmp	r3, #0
 8001554:	d03c      	beq.n	80015d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800155a:	2210      	movs	r2, #16
 800155c:	409a      	lsls	r2, r3
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d018      	beq.n	80015a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d108      	bne.n	8001590 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	2b00      	cmp	r3, #0
 8001584:	d024      	beq.n	80015d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	4798      	blx	r3
 800158e:	e01f      	b.n	80015d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001594:	2b00      	cmp	r3, #0
 8001596:	d01b      	beq.n	80015d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	4798      	blx	r3
 80015a0:	e016      	b.n	80015d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d107      	bne.n	80015c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f022 0208 	bic.w	r2, r2, #8
 80015be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d003      	beq.n	80015d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d4:	2220      	movs	r2, #32
 80015d6:	409a      	lsls	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	4013      	ands	r3, r2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 808f 	beq.w	8001700 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0310 	and.w	r3, r3, #16
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 8087 	beq.w	8001700 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015f6:	2220      	movs	r2, #32
 80015f8:	409a      	lsls	r2, r3
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b05      	cmp	r3, #5
 8001608:	d136      	bne.n	8001678 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f022 0216 	bic.w	r2, r2, #22
 8001618:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	695a      	ldr	r2, [r3, #20]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001628:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	2b00      	cmp	r3, #0
 8001630:	d103      	bne.n	800163a <HAL_DMA_IRQHandler+0x1da>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001636:	2b00      	cmp	r3, #0
 8001638:	d007      	beq.n	800164a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 0208 	bic.w	r2, r2, #8
 8001648:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800164e:	223f      	movs	r2, #63	; 0x3f
 8001650:	409a      	lsls	r2, r3
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2201      	movs	r2, #1
 800165a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800166a:	2b00      	cmp	r3, #0
 800166c:	d07e      	beq.n	800176c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	4798      	blx	r3
        }
        return;
 8001676:	e079      	b.n	800176c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d01d      	beq.n	80016c2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d10d      	bne.n	80016b0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001698:	2b00      	cmp	r3, #0
 800169a:	d031      	beq.n	8001700 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	4798      	blx	r3
 80016a4:	e02c      	b.n	8001700 <HAL_DMA_IRQHandler+0x2a0>
 80016a6:	bf00      	nop
 80016a8:	20000000 	.word	0x20000000
 80016ac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d023      	beq.n	8001700 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	4798      	blx	r3
 80016c0:	e01e      	b.n	8001700 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d10f      	bne.n	80016f0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f022 0210 	bic.w	r2, r2, #16
 80016de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2201      	movs	r2, #1
 80016e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d003      	beq.n	8001700 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001704:	2b00      	cmp	r3, #0
 8001706:	d032      	beq.n	800176e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	2b00      	cmp	r3, #0
 8001712:	d022      	beq.n	800175a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2205      	movs	r2, #5
 8001718:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f022 0201 	bic.w	r2, r2, #1
 800172a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	3301      	adds	r3, #1
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	697a      	ldr	r2, [r7, #20]
 8001734:	429a      	cmp	r2, r3
 8001736:	d307      	bcc.n	8001748 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1f2      	bne.n	800172c <HAL_DMA_IRQHandler+0x2cc>
 8001746:	e000      	b.n	800174a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001748:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2201      	movs	r2, #1
 800174e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175e:	2b00      	cmp	r3, #0
 8001760:	d005      	beq.n	800176e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	4798      	blx	r3
 800176a:	e000      	b.n	800176e <HAL_DMA_IRQHandler+0x30e>
        return;
 800176c:	bf00      	nop
    }
  }
}
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
 8001780:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001790:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	2b40      	cmp	r3, #64	; 0x40
 80017a0:	d108      	bne.n	80017b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80017b2:	e007      	b.n	80017c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	68ba      	ldr	r2, [r7, #8]
 80017ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	60da      	str	r2, [r3, #12]
}
 80017c4:	bf00      	nop
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	3b10      	subs	r3, #16
 80017e0:	4a14      	ldr	r2, [pc, #80]	; (8001834 <DMA_CalcBaseAndBitshift+0x64>)
 80017e2:	fba2 2303 	umull	r2, r3, r2, r3
 80017e6:	091b      	lsrs	r3, r3, #4
 80017e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80017ea:	4a13      	ldr	r2, [pc, #76]	; (8001838 <DMA_CalcBaseAndBitshift+0x68>)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	4413      	add	r3, r2
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	461a      	mov	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2b03      	cmp	r3, #3
 80017fc:	d909      	bls.n	8001812 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001806:	f023 0303 	bic.w	r3, r3, #3
 800180a:	1d1a      	adds	r2, r3, #4
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	659a      	str	r2, [r3, #88]	; 0x58
 8001810:	e007      	b.n	8001822 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800181a:	f023 0303 	bic.w	r3, r3, #3
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001826:	4618      	mov	r0, r3
 8001828:	3714      	adds	r7, #20
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	aaaaaaab 	.word	0xaaaaaaab
 8001838:	080094b0 	.word	0x080094b0

0800183c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001844:	2300      	movs	r3, #0
 8001846:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d11f      	bne.n	8001896 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	2b03      	cmp	r3, #3
 800185a:	d856      	bhi.n	800190a <DMA_CheckFifoParam+0xce>
 800185c:	a201      	add	r2, pc, #4	; (adr r2, 8001864 <DMA_CheckFifoParam+0x28>)
 800185e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001862:	bf00      	nop
 8001864:	08001875 	.word	0x08001875
 8001868:	08001887 	.word	0x08001887
 800186c:	08001875 	.word	0x08001875
 8001870:	0800190b 	.word	0x0800190b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001878:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d046      	beq.n	800190e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001884:	e043      	b.n	800190e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800188e:	d140      	bne.n	8001912 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001894:	e03d      	b.n	8001912 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800189e:	d121      	bne.n	80018e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	2b03      	cmp	r3, #3
 80018a4:	d837      	bhi.n	8001916 <DMA_CheckFifoParam+0xda>
 80018a6:	a201      	add	r2, pc, #4	; (adr r2, 80018ac <DMA_CheckFifoParam+0x70>)
 80018a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ac:	080018bd 	.word	0x080018bd
 80018b0:	080018c3 	.word	0x080018c3
 80018b4:	080018bd 	.word	0x080018bd
 80018b8:	080018d5 	.word	0x080018d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	73fb      	strb	r3, [r7, #15]
      break;
 80018c0:	e030      	b.n	8001924 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d025      	beq.n	800191a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018d2:	e022      	b.n	800191a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80018dc:	d11f      	bne.n	800191e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80018e2:	e01c      	b.n	800191e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d903      	bls.n	80018f2 <DMA_CheckFifoParam+0xb6>
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	2b03      	cmp	r3, #3
 80018ee:	d003      	beq.n	80018f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80018f0:	e018      	b.n	8001924 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	73fb      	strb	r3, [r7, #15]
      break;
 80018f6:	e015      	b.n	8001924 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d00e      	beq.n	8001922 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	73fb      	strb	r3, [r7, #15]
      break;
 8001908:	e00b      	b.n	8001922 <DMA_CheckFifoParam+0xe6>
      break;
 800190a:	bf00      	nop
 800190c:	e00a      	b.n	8001924 <DMA_CheckFifoParam+0xe8>
      break;
 800190e:	bf00      	nop
 8001910:	e008      	b.n	8001924 <DMA_CheckFifoParam+0xe8>
      break;
 8001912:	bf00      	nop
 8001914:	e006      	b.n	8001924 <DMA_CheckFifoParam+0xe8>
      break;
 8001916:	bf00      	nop
 8001918:	e004      	b.n	8001924 <DMA_CheckFifoParam+0xe8>
      break;
 800191a:	bf00      	nop
 800191c:	e002      	b.n	8001924 <DMA_CheckFifoParam+0xe8>
      break;   
 800191e:	bf00      	nop
 8001920:	e000      	b.n	8001924 <DMA_CheckFifoParam+0xe8>
      break;
 8001922:	bf00      	nop
    }
  } 
  
  return status; 
 8001924:	7bfb      	ldrb	r3, [r7, #15]
}
 8001926:	4618      	mov	r0, r3
 8001928:	3714      	adds	r7, #20
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop

08001934 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001934:	b480      	push	{r7}
 8001936:	b089      	sub	sp, #36	; 0x24
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800193e:	2300      	movs	r3, #0
 8001940:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001942:	2300      	movs	r3, #0
 8001944:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001946:	2300      	movs	r3, #0
 8001948:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800194a:	2300      	movs	r3, #0
 800194c:	61fb      	str	r3, [r7, #28]
 800194e:	e16b      	b.n	8001c28 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001950:	2201      	movs	r2, #1
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	4013      	ands	r3, r2
 8001962:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	429a      	cmp	r2, r3
 800196a:	f040 815a 	bne.w	8001c22 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f003 0303 	and.w	r3, r3, #3
 8001976:	2b01      	cmp	r3, #1
 8001978:	d005      	beq.n	8001986 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001982:	2b02      	cmp	r3, #2
 8001984:	d130      	bne.n	80019e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	2203      	movs	r2, #3
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43db      	mvns	r3, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4013      	ands	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	68da      	ldr	r2, [r3, #12]
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019bc:	2201      	movs	r2, #1
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4013      	ands	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	091b      	lsrs	r3, r3, #4
 80019d2:	f003 0201 	and.w	r2, r3, #1
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 0303 	and.w	r3, r3, #3
 80019f0:	2b03      	cmp	r3, #3
 80019f2:	d017      	beq.n	8001a24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	2203      	movs	r2, #3
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 0303 	and.w	r3, r3, #3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d123      	bne.n	8001a78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	08da      	lsrs	r2, r3, #3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3208      	adds	r2, #8
 8001a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	220f      	movs	r2, #15
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4013      	ands	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	691a      	ldr	r2, [r3, #16]
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	08da      	lsrs	r2, r3, #3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	3208      	adds	r2, #8
 8001a72:	69b9      	ldr	r1, [r7, #24]
 8001a74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	2203      	movs	r2, #3
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f003 0203 	and.w	r2, r3, #3
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f000 80b4 	beq.w	8001c22 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	4b60      	ldr	r3, [pc, #384]	; (8001c40 <HAL_GPIO_Init+0x30c>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	4a5f      	ldr	r2, [pc, #380]	; (8001c40 <HAL_GPIO_Init+0x30c>)
 8001ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aca:	4b5d      	ldr	r3, [pc, #372]	; (8001c40 <HAL_GPIO_Init+0x30c>)
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ad6:	4a5b      	ldr	r2, [pc, #364]	; (8001c44 <HAL_GPIO_Init+0x310>)
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	089b      	lsrs	r3, r3, #2
 8001adc:	3302      	adds	r3, #2
 8001ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	220f      	movs	r2, #15
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43db      	mvns	r3, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4013      	ands	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a52      	ldr	r2, [pc, #328]	; (8001c48 <HAL_GPIO_Init+0x314>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d02b      	beq.n	8001b5a <HAL_GPIO_Init+0x226>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a51      	ldr	r2, [pc, #324]	; (8001c4c <HAL_GPIO_Init+0x318>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d025      	beq.n	8001b56 <HAL_GPIO_Init+0x222>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a50      	ldr	r2, [pc, #320]	; (8001c50 <HAL_GPIO_Init+0x31c>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d01f      	beq.n	8001b52 <HAL_GPIO_Init+0x21e>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a4f      	ldr	r2, [pc, #316]	; (8001c54 <HAL_GPIO_Init+0x320>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d019      	beq.n	8001b4e <HAL_GPIO_Init+0x21a>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a4e      	ldr	r2, [pc, #312]	; (8001c58 <HAL_GPIO_Init+0x324>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d013      	beq.n	8001b4a <HAL_GPIO_Init+0x216>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a4d      	ldr	r2, [pc, #308]	; (8001c5c <HAL_GPIO_Init+0x328>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d00d      	beq.n	8001b46 <HAL_GPIO_Init+0x212>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a4c      	ldr	r2, [pc, #304]	; (8001c60 <HAL_GPIO_Init+0x32c>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d007      	beq.n	8001b42 <HAL_GPIO_Init+0x20e>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a4b      	ldr	r2, [pc, #300]	; (8001c64 <HAL_GPIO_Init+0x330>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d101      	bne.n	8001b3e <HAL_GPIO_Init+0x20a>
 8001b3a:	2307      	movs	r3, #7
 8001b3c:	e00e      	b.n	8001b5c <HAL_GPIO_Init+0x228>
 8001b3e:	2308      	movs	r3, #8
 8001b40:	e00c      	b.n	8001b5c <HAL_GPIO_Init+0x228>
 8001b42:	2306      	movs	r3, #6
 8001b44:	e00a      	b.n	8001b5c <HAL_GPIO_Init+0x228>
 8001b46:	2305      	movs	r3, #5
 8001b48:	e008      	b.n	8001b5c <HAL_GPIO_Init+0x228>
 8001b4a:	2304      	movs	r3, #4
 8001b4c:	e006      	b.n	8001b5c <HAL_GPIO_Init+0x228>
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e004      	b.n	8001b5c <HAL_GPIO_Init+0x228>
 8001b52:	2302      	movs	r3, #2
 8001b54:	e002      	b.n	8001b5c <HAL_GPIO_Init+0x228>
 8001b56:	2301      	movs	r3, #1
 8001b58:	e000      	b.n	8001b5c <HAL_GPIO_Init+0x228>
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	69fa      	ldr	r2, [r7, #28]
 8001b5e:	f002 0203 	and.w	r2, r2, #3
 8001b62:	0092      	lsls	r2, r2, #2
 8001b64:	4093      	lsls	r3, r2
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b6c:	4935      	ldr	r1, [pc, #212]	; (8001c44 <HAL_GPIO_Init+0x310>)
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	089b      	lsrs	r3, r3, #2
 8001b72:	3302      	adds	r3, #2
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b7a:	4b3b      	ldr	r3, [pc, #236]	; (8001c68 <HAL_GPIO_Init+0x334>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	43db      	mvns	r3, r3
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4013      	ands	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b9e:	4a32      	ldr	r2, [pc, #200]	; (8001c68 <HAL_GPIO_Init+0x334>)
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ba4:	4b30      	ldr	r3, [pc, #192]	; (8001c68 <HAL_GPIO_Init+0x334>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	43db      	mvns	r3, r3
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d003      	beq.n	8001bc8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bc8:	4a27      	ldr	r2, [pc, #156]	; (8001c68 <HAL_GPIO_Init+0x334>)
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bce:	4b26      	ldr	r3, [pc, #152]	; (8001c68 <HAL_GPIO_Init+0x334>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bf2:	4a1d      	ldr	r2, [pc, #116]	; (8001c68 <HAL_GPIO_Init+0x334>)
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bf8:	4b1b      	ldr	r3, [pc, #108]	; (8001c68 <HAL_GPIO_Init+0x334>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	43db      	mvns	r3, r3
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4013      	ands	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d003      	beq.n	8001c1c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c1c:	4a12      	ldr	r2, [pc, #72]	; (8001c68 <HAL_GPIO_Init+0x334>)
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	3301      	adds	r3, #1
 8001c26:	61fb      	str	r3, [r7, #28]
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	2b0f      	cmp	r3, #15
 8001c2c:	f67f ae90 	bls.w	8001950 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c30:	bf00      	nop
 8001c32:	bf00      	nop
 8001c34:	3724      	adds	r7, #36	; 0x24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40013800 	.word	0x40013800
 8001c48:	40020000 	.word	0x40020000
 8001c4c:	40020400 	.word	0x40020400
 8001c50:	40020800 	.word	0x40020800
 8001c54:	40020c00 	.word	0x40020c00
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	40021400 	.word	0x40021400
 8001c60:	40021800 	.word	0x40021800
 8001c64:	40021c00 	.word	0x40021c00
 8001c68:	40013c00 	.word	0x40013c00

08001c6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	691a      	ldr	r2, [r3, #16]
 8001c7c:	887b      	ldrh	r3, [r7, #2]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d002      	beq.n	8001c8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c84:	2301      	movs	r3, #1
 8001c86:	73fb      	strb	r3, [r7, #15]
 8001c88:	e001      	b.n	8001c8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	807b      	strh	r3, [r7, #2]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cac:	787b      	ldrb	r3, [r7, #1]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cb2:	887a      	ldrh	r2, [r7, #2]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cb8:	e003      	b.n	8001cc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cba:	887b      	ldrh	r3, [r7, #2]
 8001cbc:	041a      	lsls	r2, r3, #16
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	619a      	str	r2, [r3, #24]
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001cce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cd0:	b08f      	sub	sp, #60	; 0x3c
 8001cd2:	af0a      	add	r7, sp, #40	; 0x28
 8001cd4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d101      	bne.n	8001ce0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e10f      	b.n	8001f00 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d106      	bne.n	8001d00 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f007 f804 	bl	8008d08 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2203      	movs	r2, #3
 8001d04:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d102      	bne.n	8001d1a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f003 faeb 	bl	80052fa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	603b      	str	r3, [r7, #0]
 8001d2a:	687e      	ldr	r6, [r7, #4]
 8001d2c:	466d      	mov	r5, sp
 8001d2e:	f106 0410 	add.w	r4, r6, #16
 8001d32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d3a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d3e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d42:	1d33      	adds	r3, r6, #4
 8001d44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d46:	6838      	ldr	r0, [r7, #0]
 8001d48:	f003 f9c2 	bl	80050d0 <USB_CoreInit>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d005      	beq.n	8001d5e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2202      	movs	r2, #2
 8001d56:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e0d0      	b.n	8001f00 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2100      	movs	r1, #0
 8001d64:	4618      	mov	r0, r3
 8001d66:	f003 fad9 	bl	800531c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	73fb      	strb	r3, [r7, #15]
 8001d6e:	e04a      	b.n	8001e06 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d70:	7bfa      	ldrb	r2, [r7, #15]
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	4613      	mov	r3, r2
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	4413      	add	r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	333d      	adds	r3, #61	; 0x3d
 8001d80:	2201      	movs	r2, #1
 8001d82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d84:	7bfa      	ldrb	r2, [r7, #15]
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	4413      	add	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	440b      	add	r3, r1
 8001d92:	333c      	adds	r3, #60	; 0x3c
 8001d94:	7bfa      	ldrb	r2, [r7, #15]
 8001d96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d98:	7bfa      	ldrb	r2, [r7, #15]
 8001d9a:	7bfb      	ldrb	r3, [r7, #15]
 8001d9c:	b298      	uxth	r0, r3
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	4613      	mov	r3, r2
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	4413      	add	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	440b      	add	r3, r1
 8001daa:	3344      	adds	r3, #68	; 0x44
 8001dac:	4602      	mov	r2, r0
 8001dae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001db0:	7bfa      	ldrb	r2, [r7, #15]
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	4613      	mov	r3, r2
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	4413      	add	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	3340      	adds	r3, #64	; 0x40
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001dc4:	7bfa      	ldrb	r2, [r7, #15]
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	4413      	add	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	440b      	add	r3, r1
 8001dd2:	3348      	adds	r3, #72	; 0x48
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001dd8:	7bfa      	ldrb	r2, [r7, #15]
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	4413      	add	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	440b      	add	r3, r1
 8001de6:	334c      	adds	r3, #76	; 0x4c
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001dec:	7bfa      	ldrb	r2, [r7, #15]
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	4613      	mov	r3, r2
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	4413      	add	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	440b      	add	r3, r1
 8001dfa:	3354      	adds	r3, #84	; 0x54
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e00:	7bfb      	ldrb	r3, [r7, #15]
 8001e02:	3301      	adds	r3, #1
 8001e04:	73fb      	strb	r3, [r7, #15]
 8001e06:	7bfa      	ldrb	r2, [r7, #15]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d3af      	bcc.n	8001d70 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e10:	2300      	movs	r3, #0
 8001e12:	73fb      	strb	r3, [r7, #15]
 8001e14:	e044      	b.n	8001ea0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e16:	7bfa      	ldrb	r2, [r7, #15]
 8001e18:	6879      	ldr	r1, [r7, #4]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	4413      	add	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	440b      	add	r3, r1
 8001e24:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001e28:	2200      	movs	r2, #0
 8001e2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e2c:	7bfa      	ldrb	r2, [r7, #15]
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	4613      	mov	r3, r2
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	4413      	add	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	440b      	add	r3, r1
 8001e3a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001e3e:	7bfa      	ldrb	r2, [r7, #15]
 8001e40:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e42:	7bfa      	ldrb	r2, [r7, #15]
 8001e44:	6879      	ldr	r1, [r7, #4]
 8001e46:	4613      	mov	r3, r2
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	4413      	add	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	440b      	add	r3, r1
 8001e50:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001e54:	2200      	movs	r2, #0
 8001e56:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e58:	7bfa      	ldrb	r2, [r7, #15]
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	4413      	add	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	440b      	add	r3, r1
 8001e66:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e6e:	7bfa      	ldrb	r2, [r7, #15]
 8001e70:	6879      	ldr	r1, [r7, #4]
 8001e72:	4613      	mov	r3, r2
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	4413      	add	r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	440b      	add	r3, r1
 8001e7c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e84:	7bfa      	ldrb	r2, [r7, #15]
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	4413      	add	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	440b      	add	r3, r1
 8001e92:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e9a:	7bfb      	ldrb	r3, [r7, #15]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	73fb      	strb	r3, [r7, #15]
 8001ea0:	7bfa      	ldrb	r2, [r7, #15]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d3b5      	bcc.n	8001e16 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	603b      	str	r3, [r7, #0]
 8001eb0:	687e      	ldr	r6, [r7, #4]
 8001eb2:	466d      	mov	r5, sp
 8001eb4:	f106 0410 	add.w	r4, r6, #16
 8001eb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ebc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ebe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ec0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ec4:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ec8:	1d33      	adds	r3, r6, #4
 8001eca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ecc:	6838      	ldr	r0, [r7, #0]
 8001ece:	f003 fa71 	bl	80053b4 <USB_DevInit>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d005      	beq.n	8001ee4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2202      	movs	r2, #2
 8001edc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e00d      	b.n	8001f00 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f004 fbc0 	bl	800667e <USB_DevDisconnect>

  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f08 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d101      	bne.n	8001f24 <HAL_PCD_Start+0x1c>
 8001f20:	2302      	movs	r3, #2
 8001f22:	e020      	b.n	8001f66 <HAL_PCD_Start+0x5e>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d109      	bne.n	8001f48 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d005      	beq.n	8001f48 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f40:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f003 f9c3 	bl	80052d8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f004 fb70 	bl	800663c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f6e:	b590      	push	{r4, r7, lr}
 8001f70:	b08d      	sub	sp, #52	; 0x34
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f7c:	6a3b      	ldr	r3, [r7, #32]
 8001f7e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f004 fc2e 	bl	80067e6 <USB_GetMode>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f040 848a 	bne.w	80028a6 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f004 fb92 	bl	80066c0 <USB_ReadInterrupts>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 8480 	beq.w	80028a4 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	0a1b      	lsrs	r3, r3, #8
 8001fae:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f004 fb7f 	bl	80066c0 <USB_ReadInterrupts>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d107      	bne.n	8001fdc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	695a      	ldr	r2, [r3, #20]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f002 0202 	and.w	r2, r2, #2
 8001fda:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f004 fb6d 	bl	80066c0 <USB_ReadInterrupts>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	f003 0310 	and.w	r3, r3, #16
 8001fec:	2b10      	cmp	r3, #16
 8001fee:	d161      	bne.n	80020b4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	699a      	ldr	r2, [r3, #24]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 0210 	bic.w	r2, r2, #16
 8001ffe:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002000:	6a3b      	ldr	r3, [r7, #32]
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	f003 020f 	and.w	r2, r3, #15
 800200c:	4613      	mov	r3, r2
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	4413      	add	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	4413      	add	r3, r2
 800201c:	3304      	adds	r3, #4
 800201e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	0c5b      	lsrs	r3, r3, #17
 8002024:	f003 030f 	and.w	r3, r3, #15
 8002028:	2b02      	cmp	r3, #2
 800202a:	d124      	bne.n	8002076 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002032:	4013      	ands	r3, r2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d035      	beq.n	80020a4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	091b      	lsrs	r3, r3, #4
 8002040:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002042:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002046:	b29b      	uxth	r3, r3
 8002048:	461a      	mov	r2, r3
 800204a:	6a38      	ldr	r0, [r7, #32]
 800204c:	f004 f9a4 	bl	8006398 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	691a      	ldr	r2, [r3, #16]
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	091b      	lsrs	r3, r3, #4
 8002058:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800205c:	441a      	add	r2, r3
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	6a1a      	ldr	r2, [r3, #32]
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	091b      	lsrs	r3, r3, #4
 800206a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800206e:	441a      	add	r2, r3
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	621a      	str	r2, [r3, #32]
 8002074:	e016      	b.n	80020a4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	0c5b      	lsrs	r3, r3, #17
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	2b06      	cmp	r3, #6
 8002080:	d110      	bne.n	80020a4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002088:	2208      	movs	r2, #8
 800208a:	4619      	mov	r1, r3
 800208c:	6a38      	ldr	r0, [r7, #32]
 800208e:	f004 f983 	bl	8006398 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	6a1a      	ldr	r2, [r3, #32]
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	091b      	lsrs	r3, r3, #4
 800209a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800209e:	441a      	add	r2, r3
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	699a      	ldr	r2, [r3, #24]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f042 0210 	orr.w	r2, r2, #16
 80020b2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f004 fb01 	bl	80066c0 <USB_ReadInterrupts>
 80020be:	4603      	mov	r3, r0
 80020c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020c4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80020c8:	f040 80a7 	bne.w	800221a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80020cc:	2300      	movs	r3, #0
 80020ce:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f004 fb06 	bl	80066e6 <USB_ReadDevAllOutEpInterrupt>
 80020da:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80020dc:	e099      	b.n	8002212 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80020de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f000 808e 	beq.w	8002206 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020f0:	b2d2      	uxtb	r2, r2
 80020f2:	4611      	mov	r1, r2
 80020f4:	4618      	mov	r0, r3
 80020f6:	f004 fb2a 	bl	800674e <USB_ReadDevOutEPInterrupt>
 80020fa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00c      	beq.n	8002120 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	015a      	lsls	r2, r3, #5
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	4413      	add	r3, r2
 800210e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002112:	461a      	mov	r2, r3
 8002114:	2301      	movs	r3, #1
 8002116:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002118:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 fec2 	bl	8002ea4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	f003 0308 	and.w	r3, r3, #8
 8002126:	2b00      	cmp	r3, #0
 8002128:	d00c      	beq.n	8002144 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212c:	015a      	lsls	r2, r3, #5
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	4413      	add	r3, r2
 8002132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002136:	461a      	mov	r2, r3
 8002138:	2308      	movs	r3, #8
 800213a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800213c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 ff98 	bl	8003074 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	f003 0310 	and.w	r3, r3, #16
 800214a:	2b00      	cmp	r3, #0
 800214c:	d008      	beq.n	8002160 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002150:	015a      	lsls	r2, r3, #5
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	4413      	add	r3, r2
 8002156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800215a:	461a      	mov	r2, r3
 800215c:	2310      	movs	r3, #16
 800215e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d030      	beq.n	80021cc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800216a:	6a3b      	ldr	r3, [r7, #32]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002172:	2b80      	cmp	r3, #128	; 0x80
 8002174:	d109      	bne.n	800218a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	69fa      	ldr	r2, [r7, #28]
 8002180:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002184:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002188:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800218a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800218c:	4613      	mov	r3, r2
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	4413      	add	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	4413      	add	r3, r2
 800219c:	3304      	adds	r3, #4
 800219e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	78db      	ldrb	r3, [r3, #3]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d108      	bne.n	80021ba <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	2200      	movs	r2, #0
 80021ac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	4619      	mov	r1, r3
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f006 fead 	bl	8008f14 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	015a      	lsls	r2, r3, #5
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	4413      	add	r3, r2
 80021c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021c6:	461a      	mov	r2, r3
 80021c8:	2302      	movs	r3, #2
 80021ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	f003 0320 	and.w	r3, r3, #32
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d008      	beq.n	80021e8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d8:	015a      	lsls	r2, r3, #5
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	4413      	add	r3, r2
 80021de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021e2:	461a      	mov	r2, r3
 80021e4:	2320      	movs	r3, #32
 80021e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d009      	beq.n	8002206 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	015a      	lsls	r2, r3, #5
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	4413      	add	r3, r2
 80021fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021fe:	461a      	mov	r2, r3
 8002200:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002204:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	3301      	adds	r3, #1
 800220a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800220c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800220e:	085b      	lsrs	r3, r3, #1
 8002210:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002214:	2b00      	cmp	r3, #0
 8002216:	f47f af62 	bne.w	80020de <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f004 fa4e 	bl	80066c0 <USB_ReadInterrupts>
 8002224:	4603      	mov	r3, r0
 8002226:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800222a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800222e:	f040 80db 	bne.w	80023e8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f004 fa6f 	bl	800671a <USB_ReadDevAllInEpInterrupt>
 800223c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800223e:	2300      	movs	r3, #0
 8002240:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002242:	e0cd      	b.n	80023e0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b00      	cmp	r3, #0
 800224c:	f000 80c2 	beq.w	80023d4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	4611      	mov	r1, r2
 800225a:	4618      	mov	r0, r3
 800225c:	f004 fa95 	bl	800678a <USB_ReadDevInEPInterrupt>
 8002260:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	2b00      	cmp	r3, #0
 800226a:	d057      	beq.n	800231c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	f003 030f 	and.w	r3, r3, #15
 8002272:	2201      	movs	r2, #1
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002280:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	43db      	mvns	r3, r3
 8002286:	69f9      	ldr	r1, [r7, #28]
 8002288:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800228c:	4013      	ands	r3, r2
 800228e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	015a      	lsls	r2, r3, #5
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	4413      	add	r3, r2
 8002298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800229c:	461a      	mov	r2, r3
 800229e:	2301      	movs	r3, #1
 80022a0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d132      	bne.n	8002310 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ae:	4613      	mov	r3, r2
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	4413      	add	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	440b      	add	r3, r1
 80022b8:	334c      	adds	r3, #76	; 0x4c
 80022ba:	6819      	ldr	r1, [r3, #0]
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022c0:	4613      	mov	r3, r2
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	4413      	add	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	4403      	add	r3, r0
 80022ca:	3348      	adds	r3, #72	; 0x48
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4419      	add	r1, r3
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022d4:	4613      	mov	r3, r2
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	4413      	add	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4403      	add	r3, r0
 80022de:	334c      	adds	r3, #76	; 0x4c
 80022e0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d113      	bne.n	8002310 <HAL_PCD_IRQHandler+0x3a2>
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ec:	4613      	mov	r3, r2
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	4413      	add	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	440b      	add	r3, r1
 80022f6:	3354      	adds	r3, #84	; 0x54
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d108      	bne.n	8002310 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6818      	ldr	r0, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002308:	461a      	mov	r2, r3
 800230a:	2101      	movs	r1, #1
 800230c:	f004 fa9c 	bl	8006848 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	b2db      	uxtb	r3, r3
 8002314:	4619      	mov	r1, r3
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f006 fd77 	bl	8008e0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	2b00      	cmp	r3, #0
 8002324:	d008      	beq.n	8002338 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	015a      	lsls	r2, r3, #5
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	4413      	add	r3, r2
 800232e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002332:	461a      	mov	r2, r3
 8002334:	2308      	movs	r3, #8
 8002336:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	f003 0310 	and.w	r3, r3, #16
 800233e:	2b00      	cmp	r3, #0
 8002340:	d008      	beq.n	8002354 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	015a      	lsls	r2, r3, #5
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	4413      	add	r3, r2
 800234a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800234e:	461a      	mov	r2, r3
 8002350:	2310      	movs	r3, #16
 8002352:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800235a:	2b00      	cmp	r3, #0
 800235c:	d008      	beq.n	8002370 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	015a      	lsls	r2, r3, #5
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	4413      	add	r3, r2
 8002366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800236a:	461a      	mov	r2, r3
 800236c:	2340      	movs	r3, #64	; 0x40
 800236e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d023      	beq.n	80023c2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800237a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800237c:	6a38      	ldr	r0, [r7, #32]
 800237e:	f003 f97d 	bl	800567c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002384:	4613      	mov	r3, r2
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	4413      	add	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	3338      	adds	r3, #56	; 0x38
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	4413      	add	r3, r2
 8002392:	3304      	adds	r3, #4
 8002394:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	78db      	ldrb	r3, [r3, #3]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d108      	bne.n	80023b0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	2200      	movs	r2, #0
 80023a2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80023a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	4619      	mov	r1, r3
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f006 fdc4 	bl	8008f38 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	015a      	lsls	r2, r3, #5
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	4413      	add	r3, r2
 80023b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023bc:	461a      	mov	r2, r3
 80023be:	2302      	movs	r3, #2
 80023c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d003      	beq.n	80023d4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80023cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 fcdb 	bl	8002d8a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	3301      	adds	r3, #1
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80023da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023dc:	085b      	lsrs	r3, r3, #1
 80023de:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80023e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f47f af2e 	bne.w	8002244 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f004 f967 	bl	80066c0 <USB_ReadInterrupts>
 80023f2:	4603      	mov	r3, r0
 80023f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80023f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023fc:	d122      	bne.n	8002444 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	69fa      	ldr	r2, [r7, #28]
 8002408:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800240c:	f023 0301 	bic.w	r3, r3, #1
 8002410:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002418:	2b01      	cmp	r3, #1
 800241a:	d108      	bne.n	800242e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002424:	2100      	movs	r1, #0
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 fec2 	bl	80031b0 <HAL_PCDEx_LPM_Callback>
 800242c:	e002      	b.n	8002434 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f006 fd62 	bl	8008ef8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	695a      	ldr	r2, [r3, #20]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002442:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	f004 f939 	bl	80066c0 <USB_ReadInterrupts>
 800244e:	4603      	mov	r3, r0
 8002450:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002454:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002458:	d112      	bne.n	8002480 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b01      	cmp	r3, #1
 8002468:	d102      	bne.n	8002470 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f006 fd1e 	bl	8008eac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	695a      	ldr	r2, [r3, #20]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800247e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f004 f91b 	bl	80066c0 <USB_ReadInterrupts>
 800248a:	4603      	mov	r3, r0
 800248c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002494:	f040 80b7 	bne.w	8002606 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	69fa      	ldr	r2, [r7, #28]
 80024a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024a6:	f023 0301 	bic.w	r3, r3, #1
 80024aa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2110      	movs	r1, #16
 80024b2:	4618      	mov	r0, r3
 80024b4:	f003 f8e2 	bl	800567c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024b8:	2300      	movs	r3, #0
 80024ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024bc:	e046      	b.n	800254c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80024be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c0:	015a      	lsls	r2, r3, #5
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	4413      	add	r3, r2
 80024c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024ca:	461a      	mov	r2, r3
 80024cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80024d0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80024d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d4:	015a      	lsls	r2, r3, #5
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	4413      	add	r3, r2
 80024da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024e2:	0151      	lsls	r1, r2, #5
 80024e4:	69fa      	ldr	r2, [r7, #28]
 80024e6:	440a      	add	r2, r1
 80024e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80024ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024f0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80024f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f4:	015a      	lsls	r2, r3, #5
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	4413      	add	r3, r2
 80024fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024fe:	461a      	mov	r2, r3
 8002500:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002504:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002508:	015a      	lsls	r2, r3, #5
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	4413      	add	r3, r2
 800250e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002516:	0151      	lsls	r1, r2, #5
 8002518:	69fa      	ldr	r2, [r7, #28]
 800251a:	440a      	add	r2, r1
 800251c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002520:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002524:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002528:	015a      	lsls	r2, r3, #5
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	4413      	add	r3, r2
 800252e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002536:	0151      	lsls	r1, r2, #5
 8002538:	69fa      	ldr	r2, [r7, #28]
 800253a:	440a      	add	r2, r1
 800253c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002540:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002544:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002548:	3301      	adds	r3, #1
 800254a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002552:	429a      	cmp	r2, r3
 8002554:	d3b3      	bcc.n	80024be <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	69fa      	ldr	r2, [r7, #28]
 8002560:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002564:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002568:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	2b00      	cmp	r3, #0
 8002570:	d016      	beq.n	80025a0 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002578:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800257c:	69fa      	ldr	r2, [r7, #28]
 800257e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002582:	f043 030b 	orr.w	r3, r3, #11
 8002586:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002592:	69fa      	ldr	r2, [r7, #28]
 8002594:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002598:	f043 030b 	orr.w	r3, r3, #11
 800259c:	6453      	str	r3, [r2, #68]	; 0x44
 800259e:	e015      	b.n	80025cc <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	69fa      	ldr	r2, [r7, #28]
 80025aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025b2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80025b6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	69fa      	ldr	r2, [r7, #28]
 80025c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025c6:	f043 030b 	orr.w	r3, r3, #11
 80025ca:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	69fa      	ldr	r2, [r7, #28]
 80025d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025da:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80025de:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6818      	ldr	r0, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025f0:	461a      	mov	r2, r3
 80025f2:	f004 f929 	bl	8006848 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	695a      	ldr	r2, [r3, #20]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002604:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f004 f858 	bl	80066c0 <USB_ReadInterrupts>
 8002610:	4603      	mov	r3, r0
 8002612:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800261a:	d124      	bne.n	8002666 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4618      	mov	r0, r3
 8002622:	f004 f8ee 	bl	8006802 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f003 f8a3 	bl	8005776 <USB_GetDevSpeed>
 8002630:	4603      	mov	r3, r0
 8002632:	461a      	mov	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681c      	ldr	r4, [r3, #0]
 800263c:	f001 fa28 	bl	8003a90 <HAL_RCC_GetHCLKFreq>
 8002640:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002646:	b2db      	uxtb	r3, r3
 8002648:	461a      	mov	r2, r3
 800264a:	4620      	mov	r0, r4
 800264c:	f002 fda2 	bl	8005194 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f006 fc02 	bl	8008e5a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	695a      	ldr	r2, [r3, #20]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002664:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f004 f828 	bl	80066c0 <USB_ReadInterrupts>
 8002670:	4603      	mov	r3, r0
 8002672:	f003 0308 	and.w	r3, r3, #8
 8002676:	2b08      	cmp	r3, #8
 8002678:	d10a      	bne.n	8002690 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f006 fbdf 	bl	8008e3e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	695a      	ldr	r2, [r3, #20]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f002 0208 	and.w	r2, r2, #8
 800268e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f004 f813 	bl	80066c0 <USB_ReadInterrupts>
 800269a:	4603      	mov	r3, r0
 800269c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a0:	2b80      	cmp	r3, #128	; 0x80
 80026a2:	d122      	bne.n	80026ea <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80026a4:	6a3b      	ldr	r3, [r7, #32]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026ac:	6a3b      	ldr	r3, [r7, #32]
 80026ae:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026b0:	2301      	movs	r3, #1
 80026b2:	627b      	str	r3, [r7, #36]	; 0x24
 80026b4:	e014      	b.n	80026e0 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ba:	4613      	mov	r3, r2
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	4413      	add	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	440b      	add	r3, r1
 80026c4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d105      	bne.n	80026da <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	4619      	mov	r1, r3
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 fb27 	bl	8002d28 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	3301      	adds	r3, #1
 80026de:	627b      	str	r3, [r7, #36]	; 0x24
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d3e5      	bcc.n	80026b6 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f003 ffe6 	bl	80066c0 <USB_ReadInterrupts>
 80026f4:	4603      	mov	r3, r0
 80026f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026fe:	d13b      	bne.n	8002778 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002700:	2301      	movs	r3, #1
 8002702:	627b      	str	r3, [r7, #36]	; 0x24
 8002704:	e02b      	b.n	800275e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002708:	015a      	lsls	r2, r3, #5
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	4413      	add	r3, r2
 800270e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800271a:	4613      	mov	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	4413      	add	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	440b      	add	r3, r1
 8002724:	3340      	adds	r3, #64	; 0x40
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d115      	bne.n	8002758 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800272c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800272e:	2b00      	cmp	r3, #0
 8002730:	da12      	bge.n	8002758 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002732:	6879      	ldr	r1, [r7, #4]
 8002734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002736:	4613      	mov	r3, r2
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	4413      	add	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	440b      	add	r3, r1
 8002740:	333f      	adds	r3, #63	; 0x3f
 8002742:	2201      	movs	r2, #1
 8002744:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	b2db      	uxtb	r3, r3
 800274a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800274e:	b2db      	uxtb	r3, r3
 8002750:	4619      	mov	r1, r3
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 fae8 	bl	8002d28 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275a:	3301      	adds	r3, #1
 800275c:	627b      	str	r3, [r7, #36]	; 0x24
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002764:	429a      	cmp	r2, r3
 8002766:	d3ce      	bcc.n	8002706 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	695a      	ldr	r2, [r3, #20]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002776:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4618      	mov	r0, r3
 800277e:	f003 ff9f 	bl	80066c0 <USB_ReadInterrupts>
 8002782:	4603      	mov	r3, r0
 8002784:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002788:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800278c:	d155      	bne.n	800283a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800278e:	2301      	movs	r3, #1
 8002790:	627b      	str	r3, [r7, #36]	; 0x24
 8002792:	e045      	b.n	8002820 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	015a      	lsls	r2, r3, #5
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	4413      	add	r3, r2
 800279c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027a8:	4613      	mov	r3, r2
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	4413      	add	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	440b      	add	r3, r1
 80027b2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d12e      	bne.n	800281a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80027bc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80027be:	2b00      	cmp	r3, #0
 80027c0:	da2b      	bge.n	800281a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80027ce:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d121      	bne.n	800281a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80027d6:	6879      	ldr	r1, [r7, #4]
 80027d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027da:	4613      	mov	r3, r2
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	4413      	add	r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	440b      	add	r3, r1
 80027e4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80027e8:	2201      	movs	r2, #1
 80027ea:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80027f4:	6a3b      	ldr	r3, [r7, #32]
 80027f6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80027f8:	6a3b      	ldr	r3, [r7, #32]
 80027fa:	695b      	ldr	r3, [r3, #20]
 80027fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10a      	bne.n	800281a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	69fa      	ldr	r2, [r7, #28]
 800280e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002812:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002816:	6053      	str	r3, [r2, #4]
            break;
 8002818:	e007      	b.n	800282a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	3301      	adds	r3, #1
 800281e:	627b      	str	r3, [r7, #36]	; 0x24
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002826:	429a      	cmp	r2, r3
 8002828:	d3b4      	bcc.n	8002794 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	695a      	ldr	r2, [r3, #20]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002838:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f003 ff3e 	bl	80066c0 <USB_ReadInterrupts>
 8002844:	4603      	mov	r3, r0
 8002846:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800284a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800284e:	d10a      	bne.n	8002866 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f006 fb83 	bl	8008f5c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	695a      	ldr	r2, [r3, #20]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002864:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f003 ff28 	bl	80066c0 <USB_ReadInterrupts>
 8002870:	4603      	mov	r3, r0
 8002872:	f003 0304 	and.w	r3, r3, #4
 8002876:	2b04      	cmp	r3, #4
 8002878:	d115      	bne.n	80028a6 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	2b00      	cmp	r3, #0
 800288a:	d002      	beq.n	8002892 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f006 fb73 	bl	8008f78 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6859      	ldr	r1, [r3, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	430a      	orrs	r2, r1
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	e000      	b.n	80028a6 <HAL_PCD_IRQHandler+0x938>
      return;
 80028a4:	bf00      	nop
    }
  }
}
 80028a6:	3734      	adds	r7, #52	; 0x34
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd90      	pop	{r4, r7, pc}

080028ac <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	460b      	mov	r3, r1
 80028b6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d101      	bne.n	80028c6 <HAL_PCD_SetAddress+0x1a>
 80028c2:	2302      	movs	r3, #2
 80028c4:	e013      	b.n	80028ee <HAL_PCD_SetAddress+0x42>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	78fa      	ldrb	r2, [r7, #3]
 80028d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	78fa      	ldrb	r2, [r7, #3]
 80028dc:	4611      	mov	r1, r2
 80028de:	4618      	mov	r0, r3
 80028e0:	f003 fe86 	bl	80065f0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b084      	sub	sp, #16
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
 80028fe:	4608      	mov	r0, r1
 8002900:	4611      	mov	r1, r2
 8002902:	461a      	mov	r2, r3
 8002904:	4603      	mov	r3, r0
 8002906:	70fb      	strb	r3, [r7, #3]
 8002908:	460b      	mov	r3, r1
 800290a:	803b      	strh	r3, [r7, #0]
 800290c:	4613      	mov	r3, r2
 800290e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002910:	2300      	movs	r3, #0
 8002912:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002914:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002918:	2b00      	cmp	r3, #0
 800291a:	da0f      	bge.n	800293c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800291c:	78fb      	ldrb	r3, [r7, #3]
 800291e:	f003 020f 	and.w	r2, r3, #15
 8002922:	4613      	mov	r3, r2
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	4413      	add	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	3338      	adds	r3, #56	; 0x38
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	4413      	add	r3, r2
 8002930:	3304      	adds	r3, #4
 8002932:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2201      	movs	r2, #1
 8002938:	705a      	strb	r2, [r3, #1]
 800293a:	e00f      	b.n	800295c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800293c:	78fb      	ldrb	r3, [r7, #3]
 800293e:	f003 020f 	and.w	r2, r3, #15
 8002942:	4613      	mov	r3, r2
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	4413      	add	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	4413      	add	r3, r2
 8002952:	3304      	adds	r3, #4
 8002954:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800295c:	78fb      	ldrb	r3, [r7, #3]
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	b2da      	uxtb	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002968:	883a      	ldrh	r2, [r7, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	78ba      	ldrb	r2, [r7, #2]
 8002972:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	785b      	ldrb	r3, [r3, #1]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d004      	beq.n	8002986 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	b29a      	uxth	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002986:	78bb      	ldrb	r3, [r7, #2]
 8002988:	2b02      	cmp	r3, #2
 800298a:	d102      	bne.n	8002992 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002998:	2b01      	cmp	r3, #1
 800299a:	d101      	bne.n	80029a0 <HAL_PCD_EP_Open+0xaa>
 800299c:	2302      	movs	r3, #2
 800299e:	e00e      	b.n	80029be <HAL_PCD_EP_Open+0xc8>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68f9      	ldr	r1, [r7, #12]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f002 ff06 	bl	80057c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80029bc:	7afb      	ldrb	r3, [r7, #11]
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b084      	sub	sp, #16
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
 80029ce:	460b      	mov	r3, r1
 80029d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	da0f      	bge.n	80029fa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029da:	78fb      	ldrb	r3, [r7, #3]
 80029dc:	f003 020f 	and.w	r2, r3, #15
 80029e0:	4613      	mov	r3, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	4413      	add	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	3338      	adds	r3, #56	; 0x38
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	4413      	add	r3, r2
 80029ee:	3304      	adds	r3, #4
 80029f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2201      	movs	r2, #1
 80029f6:	705a      	strb	r2, [r3, #1]
 80029f8:	e00f      	b.n	8002a1a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029fa:	78fb      	ldrb	r3, [r7, #3]
 80029fc:	f003 020f 	and.w	r2, r3, #15
 8002a00:	4613      	mov	r3, r2
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	4413      	add	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	4413      	add	r3, r2
 8002a10:	3304      	adds	r3, #4
 8002a12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002a1a:	78fb      	ldrb	r3, [r7, #3]
 8002a1c:	f003 030f 	and.w	r3, r3, #15
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d101      	bne.n	8002a34 <HAL_PCD_EP_Close+0x6e>
 8002a30:	2302      	movs	r3, #2
 8002a32:	e00e      	b.n	8002a52 <HAL_PCD_EP_Close+0x8c>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68f9      	ldr	r1, [r7, #12]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f002 ff44 	bl	80058d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b086      	sub	sp, #24
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	60f8      	str	r0, [r7, #12]
 8002a62:	607a      	str	r2, [r7, #4]
 8002a64:	603b      	str	r3, [r7, #0]
 8002a66:	460b      	mov	r3, r1
 8002a68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a6a:	7afb      	ldrb	r3, [r7, #11]
 8002a6c:	f003 020f 	and.w	r2, r3, #15
 8002a70:	4613      	mov	r3, r2
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	4413      	add	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	4413      	add	r3, r2
 8002a80:	3304      	adds	r3, #4
 8002a82:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	2200      	movs	r2, #0
 8002a94:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a9c:	7afb      	ldrb	r3, [r7, #11]
 8002a9e:	f003 030f 	and.w	r3, r3, #15
 8002aa2:	b2da      	uxtb	r2, r3
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d102      	bne.n	8002ab6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ab6:	7afb      	ldrb	r3, [r7, #11]
 8002ab8:	f003 030f 	and.w	r3, r3, #15
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d109      	bne.n	8002ad4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6818      	ldr	r0, [r3, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	461a      	mov	r2, r3
 8002acc:	6979      	ldr	r1, [r7, #20]
 8002ace:	f003 fa23 	bl	8005f18 <USB_EP0StartXfer>
 8002ad2:	e008      	b.n	8002ae6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6818      	ldr	r0, [r3, #0]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	461a      	mov	r2, r3
 8002ae0:	6979      	ldr	r1, [r7, #20]
 8002ae2:	f002 ffd1 	bl	8005a88 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3718      	adds	r7, #24
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	460b      	mov	r3, r1
 8002afa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002afc:	78fb      	ldrb	r3, [r7, #3]
 8002afe:	f003 020f 	and.w	r2, r3, #15
 8002b02:	6879      	ldr	r1, [r7, #4]
 8002b04:	4613      	mov	r3, r2
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	4413      	add	r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	440b      	add	r3, r1
 8002b0e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002b12:	681b      	ldr	r3, [r3, #0]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	607a      	str	r2, [r7, #4]
 8002b2a:	603b      	str	r3, [r7, #0]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b30:	7afb      	ldrb	r3, [r7, #11]
 8002b32:	f003 020f 	and.w	r2, r3, #15
 8002b36:	4613      	mov	r3, r2
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	4413      	add	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	3338      	adds	r3, #56	; 0x38
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	4413      	add	r3, r2
 8002b44:	3304      	adds	r3, #4
 8002b46:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	2200      	movs	r2, #0
 8002b58:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b60:	7afb      	ldrb	r3, [r7, #11]
 8002b62:	f003 030f 	and.w	r3, r3, #15
 8002b66:	b2da      	uxtb	r2, r3
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d102      	bne.n	8002b7a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b7a:	7afb      	ldrb	r3, [r7, #11]
 8002b7c:	f003 030f 	and.w	r3, r3, #15
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d109      	bne.n	8002b98 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6818      	ldr	r0, [r3, #0]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	461a      	mov	r2, r3
 8002b90:	6979      	ldr	r1, [r7, #20]
 8002b92:	f003 f9c1 	bl	8005f18 <USB_EP0StartXfer>
 8002b96:	e008      	b.n	8002baa <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6818      	ldr	r0, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	6979      	ldr	r1, [r7, #20]
 8002ba6:	f002 ff6f 	bl	8005a88 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3718      	adds	r7, #24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002bc0:	78fb      	ldrb	r3, [r7, #3]
 8002bc2:	f003 020f 	and.w	r2, r3, #15
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d901      	bls.n	8002bd2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e050      	b.n	8002c74 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002bd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	da0f      	bge.n	8002bfa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bda:	78fb      	ldrb	r3, [r7, #3]
 8002bdc:	f003 020f 	and.w	r2, r3, #15
 8002be0:	4613      	mov	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	4413      	add	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	3338      	adds	r3, #56	; 0x38
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	4413      	add	r3, r2
 8002bee:	3304      	adds	r3, #4
 8002bf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	705a      	strb	r2, [r3, #1]
 8002bf8:	e00d      	b.n	8002c16 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002bfa:	78fa      	ldrb	r2, [r7, #3]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	4413      	add	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c1c:	78fb      	ldrb	r3, [r7, #3]
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d101      	bne.n	8002c36 <HAL_PCD_EP_SetStall+0x82>
 8002c32:	2302      	movs	r3, #2
 8002c34:	e01e      	b.n	8002c74 <HAL_PCD_EP_SetStall+0xc0>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68f9      	ldr	r1, [r7, #12]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f003 fbff 	bl	8006448 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c4a:	78fb      	ldrb	r3, [r7, #3]
 8002c4c:	f003 030f 	and.w	r3, r3, #15
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d10a      	bne.n	8002c6a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6818      	ldr	r0, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	b2d9      	uxtb	r1, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c64:	461a      	mov	r2, r3
 8002c66:	f003 fdef 	bl	8006848 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	460b      	mov	r3, r1
 8002c86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c88:	78fb      	ldrb	r3, [r7, #3]
 8002c8a:	f003 020f 	and.w	r2, r3, #15
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d901      	bls.n	8002c9a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e042      	b.n	8002d20 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	da0f      	bge.n	8002cc2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ca2:	78fb      	ldrb	r3, [r7, #3]
 8002ca4:	f003 020f 	and.w	r2, r3, #15
 8002ca8:	4613      	mov	r3, r2
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	4413      	add	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	3338      	adds	r3, #56	; 0x38
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	3304      	adds	r3, #4
 8002cb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	705a      	strb	r2, [r3, #1]
 8002cc0:	e00f      	b.n	8002ce2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cc2:	78fb      	ldrb	r3, [r7, #3]
 8002cc4:	f003 020f 	and.w	r2, r3, #15
 8002cc8:	4613      	mov	r3, r2
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	4413      	add	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	3304      	adds	r3, #4
 8002cda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ce8:	78fb      	ldrb	r3, [r7, #3]
 8002cea:	f003 030f 	and.w	r3, r3, #15
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d101      	bne.n	8002d02 <HAL_PCD_EP_ClrStall+0x86>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	e00e      	b.n	8002d20 <HAL_PCD_EP_ClrStall+0xa4>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68f9      	ldr	r1, [r7, #12]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f003 fc07 	bl	8006524 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	460b      	mov	r3, r1
 8002d32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002d34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	da0c      	bge.n	8002d56 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d3c:	78fb      	ldrb	r3, [r7, #3]
 8002d3e:	f003 020f 	and.w	r2, r3, #15
 8002d42:	4613      	mov	r3, r2
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	4413      	add	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	3338      	adds	r3, #56	; 0x38
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	4413      	add	r3, r2
 8002d50:	3304      	adds	r3, #4
 8002d52:	60fb      	str	r3, [r7, #12]
 8002d54:	e00c      	b.n	8002d70 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d56:	78fb      	ldrb	r3, [r7, #3]
 8002d58:	f003 020f 	and.w	r2, r3, #15
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	4413      	add	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68f9      	ldr	r1, [r7, #12]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f003 fa26 	bl	80061c8 <USB_EPStopXfer>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002d80:	7afb      	ldrb	r3, [r7, #11]
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b08a      	sub	sp, #40	; 0x28
 8002d8e:	af02      	add	r7, sp, #8
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	4613      	mov	r3, r2
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	4413      	add	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	3338      	adds	r3, #56	; 0x38
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	4413      	add	r3, r2
 8002dae:	3304      	adds	r3, #4
 8002db0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6a1a      	ldr	r2, [r3, #32]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d901      	bls.n	8002dc2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e06c      	b.n	8002e9c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	699a      	ldr	r2, [r3, #24]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	69fa      	ldr	r2, [r7, #28]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d902      	bls.n	8002dde <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	3303      	adds	r3, #3
 8002de2:	089b      	lsrs	r3, r3, #2
 8002de4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002de6:	e02b      	b.n	8002e40 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	699a      	ldr	r2, [r3, #24]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	69fa      	ldr	r2, [r7, #28]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d902      	bls.n	8002e04 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	3303      	adds	r3, #3
 8002e08:	089b      	lsrs	r3, r3, #2
 8002e0a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6919      	ldr	r1, [r3, #16]
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	4603      	mov	r3, r0
 8002e22:	6978      	ldr	r0, [r7, #20]
 8002e24:	f003 fa7a 	bl	800631c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	691a      	ldr	r2, [r3, #16]
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	441a      	add	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6a1a      	ldr	r2, [r3, #32]
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	441a      	add	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	015a      	lsls	r2, r3, #5
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	4413      	add	r3, r2
 8002e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d809      	bhi.n	8002e6a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6a1a      	ldr	r2, [r3, #32]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d203      	bcs.n	8002e6a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1be      	bne.n	8002de8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	699a      	ldr	r2, [r3, #24]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d811      	bhi.n	8002e9a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	f003 030f 	and.w	r3, r3, #15
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	43db      	mvns	r3, r3
 8002e90:	6939      	ldr	r1, [r7, #16]
 8002e92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e96:	4013      	ands	r3, r2
 8002e98:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3720      	adds	r7, #32
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b088      	sub	sp, #32
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	333c      	adds	r3, #60	; 0x3c
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	015a      	lsls	r2, r3, #5
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	4413      	add	r3, r2
 8002eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d17b      	bne.n	8002fd2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	f003 0308 	and.w	r3, r3, #8
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d015      	beq.n	8002f10 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	4a61      	ldr	r2, [pc, #388]	; (800306c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	f240 80b9 	bls.w	8003060 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f000 80b3 	beq.w	8003060 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	015a      	lsls	r2, r3, #5
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	4413      	add	r3, r2
 8002f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f06:	461a      	mov	r2, r3
 8002f08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f0c:	6093      	str	r3, [r2, #8]
 8002f0e:	e0a7      	b.n	8003060 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	f003 0320 	and.w	r3, r3, #32
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d009      	beq.n	8002f2e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	015a      	lsls	r2, r3, #5
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	4413      	add	r3, r2
 8002f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f26:	461a      	mov	r2, r3
 8002f28:	2320      	movs	r3, #32
 8002f2a:	6093      	str	r3, [r2, #8]
 8002f2c:	e098      	b.n	8003060 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f040 8093 	bne.w	8003060 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	4a4b      	ldr	r2, [pc, #300]	; (800306c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d90f      	bls.n	8002f62 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00a      	beq.n	8002f62 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	015a      	lsls	r2, r3, #5
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	4413      	add	r3, r2
 8002f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f58:	461a      	mov	r2, r3
 8002f5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f5e:	6093      	str	r3, [r2, #8]
 8002f60:	e07e      	b.n	8003060 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	4613      	mov	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	4413      	add	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	4413      	add	r3, r2
 8002f74:	3304      	adds	r3, #4
 8002f76:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	69da      	ldr	r2, [r3, #28]
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	0159      	lsls	r1, r3, #5
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	440b      	add	r3, r1
 8002f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f8e:	1ad2      	subs	r2, r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d114      	bne.n	8002fc4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d109      	bne.n	8002fb6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6818      	ldr	r0, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002fac:	461a      	mov	r2, r3
 8002fae:	2101      	movs	r1, #1
 8002fb0:	f003 fc4a 	bl	8006848 <USB_EP0_OutStart>
 8002fb4:	e006      	b.n	8002fc4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	691a      	ldr	r2, [r3, #16]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	441a      	add	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	4619      	mov	r1, r3
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f005 ff02 	bl	8008dd4 <HAL_PCD_DataOutStageCallback>
 8002fd0:	e046      	b.n	8003060 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	4a26      	ldr	r2, [pc, #152]	; (8003070 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d124      	bne.n	8003024 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00a      	beq.n	8002ffa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	015a      	lsls	r2, r3, #5
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	4413      	add	r3, r2
 8002fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ff6:	6093      	str	r3, [r2, #8]
 8002ff8:	e032      	b.n	8003060 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	f003 0320 	and.w	r3, r3, #32
 8003000:	2b00      	cmp	r3, #0
 8003002:	d008      	beq.n	8003016 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	015a      	lsls	r2, r3, #5
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	4413      	add	r3, r2
 800300c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003010:	461a      	mov	r2, r3
 8003012:	2320      	movs	r3, #32
 8003014:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	b2db      	uxtb	r3, r3
 800301a:	4619      	mov	r1, r3
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f005 fed9 	bl	8008dd4 <HAL_PCD_DataOutStageCallback>
 8003022:	e01d      	b.n	8003060 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d114      	bne.n	8003054 <PCD_EP_OutXfrComplete_int+0x1b0>
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	4613      	mov	r3, r2
 8003030:	00db      	lsls	r3, r3, #3
 8003032:	4413      	add	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	440b      	add	r3, r1
 8003038:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d108      	bne.n	8003054 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6818      	ldr	r0, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800304c:	461a      	mov	r2, r3
 800304e:	2100      	movs	r1, #0
 8003050:	f003 fbfa 	bl	8006848 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	b2db      	uxtb	r3, r3
 8003058:	4619      	mov	r1, r3
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f005 feba 	bl	8008dd4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3720      	adds	r7, #32
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	4f54300a 	.word	0x4f54300a
 8003070:	4f54310a 	.word	0x4f54310a

08003074 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	333c      	adds	r3, #60	; 0x3c
 800308c:	3304      	adds	r3, #4
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	015a      	lsls	r2, r3, #5
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	4413      	add	r3, r2
 800309a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	4a15      	ldr	r2, [pc, #84]	; (80030fc <PCD_EP_OutSetupPacket_int+0x88>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d90e      	bls.n	80030c8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d009      	beq.n	80030c8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	015a      	lsls	r2, r3, #5
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	4413      	add	r3, r2
 80030bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030c0:	461a      	mov	r2, r3
 80030c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030c6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f005 fe71 	bl	8008db0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	4a0a      	ldr	r2, [pc, #40]	; (80030fc <PCD_EP_OutSetupPacket_int+0x88>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d90c      	bls.n	80030f0 <PCD_EP_OutSetupPacket_int+0x7c>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d108      	bne.n	80030f0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6818      	ldr	r0, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80030e8:	461a      	mov	r2, r3
 80030ea:	2101      	movs	r1, #1
 80030ec:	f003 fbac 	bl	8006848 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3718      	adds	r7, #24
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	4f54300a 	.word	0x4f54300a

08003100 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	460b      	mov	r3, r1
 800310a:	70fb      	strb	r3, [r7, #3]
 800310c:	4613      	mov	r3, r2
 800310e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003118:	78fb      	ldrb	r3, [r7, #3]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d107      	bne.n	800312e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800311e:	883b      	ldrh	r3, [r7, #0]
 8003120:	0419      	lsls	r1, r3, #16
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	430a      	orrs	r2, r1
 800312a:	629a      	str	r2, [r3, #40]	; 0x28
 800312c:	e028      	b.n	8003180 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003134:	0c1b      	lsrs	r3, r3, #16
 8003136:	68ba      	ldr	r2, [r7, #8]
 8003138:	4413      	add	r3, r2
 800313a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800313c:	2300      	movs	r3, #0
 800313e:	73fb      	strb	r3, [r7, #15]
 8003140:	e00d      	b.n	800315e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	7bfb      	ldrb	r3, [r7, #15]
 8003148:	3340      	adds	r3, #64	; 0x40
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	0c1b      	lsrs	r3, r3, #16
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	4413      	add	r3, r2
 8003156:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003158:	7bfb      	ldrb	r3, [r7, #15]
 800315a:	3301      	adds	r3, #1
 800315c:	73fb      	strb	r3, [r7, #15]
 800315e:	7bfa      	ldrb	r2, [r7, #15]
 8003160:	78fb      	ldrb	r3, [r7, #3]
 8003162:	3b01      	subs	r3, #1
 8003164:	429a      	cmp	r2, r3
 8003166:	d3ec      	bcc.n	8003142 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003168:	883b      	ldrh	r3, [r7, #0]
 800316a:	0418      	lsls	r0, r3, #16
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6819      	ldr	r1, [r3, #0]
 8003170:	78fb      	ldrb	r3, [r7, #3]
 8003172:	3b01      	subs	r3, #1
 8003174:	68ba      	ldr	r2, [r7, #8]
 8003176:	4302      	orrs	r2, r0
 8003178:	3340      	adds	r3, #64	; 0x40
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3714      	adds	r7, #20
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr

0800318e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800318e:	b480      	push	{r7}
 8003190:	b083      	sub	sp, #12
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
 8003196:	460b      	mov	r3, r1
 8003198:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	887a      	ldrh	r2, [r7, #2]
 80031a0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	460b      	mov	r3, r1
 80031ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e267      	b.n	80036aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d075      	beq.n	80032d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031e6:	4b88      	ldr	r3, [pc, #544]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 030c 	and.w	r3, r3, #12
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	d00c      	beq.n	800320c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031f2:	4b85      	ldr	r3, [pc, #532]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031fa:	2b08      	cmp	r3, #8
 80031fc:	d112      	bne.n	8003224 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031fe:	4b82      	ldr	r3, [pc, #520]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003206:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800320a:	d10b      	bne.n	8003224 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800320c:	4b7e      	ldr	r3, [pc, #504]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d05b      	beq.n	80032d0 <HAL_RCC_OscConfig+0x108>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d157      	bne.n	80032d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e242      	b.n	80036aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800322c:	d106      	bne.n	800323c <HAL_RCC_OscConfig+0x74>
 800322e:	4b76      	ldr	r3, [pc, #472]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a75      	ldr	r2, [pc, #468]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 8003234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003238:	6013      	str	r3, [r2, #0]
 800323a:	e01d      	b.n	8003278 <HAL_RCC_OscConfig+0xb0>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003244:	d10c      	bne.n	8003260 <HAL_RCC_OscConfig+0x98>
 8003246:	4b70      	ldr	r3, [pc, #448]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a6f      	ldr	r2, [pc, #444]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 800324c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	4b6d      	ldr	r3, [pc, #436]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a6c      	ldr	r2, [pc, #432]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 8003258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800325c:	6013      	str	r3, [r2, #0]
 800325e:	e00b      	b.n	8003278 <HAL_RCC_OscConfig+0xb0>
 8003260:	4b69      	ldr	r3, [pc, #420]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a68      	ldr	r2, [pc, #416]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 8003266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800326a:	6013      	str	r3, [r2, #0]
 800326c:	4b66      	ldr	r3, [pc, #408]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a65      	ldr	r2, [pc, #404]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 8003272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003276:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d013      	beq.n	80032a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003280:	f7fd fea6 	bl	8000fd0 <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003288:	f7fd fea2 	bl	8000fd0 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b64      	cmp	r3, #100	; 0x64
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e207      	b.n	80036aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800329a:	4b5b      	ldr	r3, [pc, #364]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0f0      	beq.n	8003288 <HAL_RCC_OscConfig+0xc0>
 80032a6:	e014      	b.n	80032d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a8:	f7fd fe92 	bl	8000fd0 <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032b0:	f7fd fe8e 	bl	8000fd0 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b64      	cmp	r3, #100	; 0x64
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e1f3      	b.n	80036aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032c2:	4b51      	ldr	r3, [pc, #324]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f0      	bne.n	80032b0 <HAL_RCC_OscConfig+0xe8>
 80032ce:	e000      	b.n	80032d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d063      	beq.n	80033a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032de:	4b4a      	ldr	r3, [pc, #296]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 030c 	and.w	r3, r3, #12
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00b      	beq.n	8003302 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ea:	4b47      	ldr	r3, [pc, #284]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032f2:	2b08      	cmp	r3, #8
 80032f4:	d11c      	bne.n	8003330 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032f6:	4b44      	ldr	r3, [pc, #272]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d116      	bne.n	8003330 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003302:	4b41      	ldr	r3, [pc, #260]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d005      	beq.n	800331a <HAL_RCC_OscConfig+0x152>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d001      	beq.n	800331a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e1c7      	b.n	80036aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800331a:	4b3b      	ldr	r3, [pc, #236]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	4937      	ldr	r1, [pc, #220]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 800332a:	4313      	orrs	r3, r2
 800332c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800332e:	e03a      	b.n	80033a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d020      	beq.n	800337a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003338:	4b34      	ldr	r3, [pc, #208]	; (800340c <HAL_RCC_OscConfig+0x244>)
 800333a:	2201      	movs	r2, #1
 800333c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333e:	f7fd fe47 	bl	8000fd0 <HAL_GetTick>
 8003342:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003344:	e008      	b.n	8003358 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003346:	f7fd fe43 	bl	8000fd0 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e1a8      	b.n	80036aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003358:	4b2b      	ldr	r3, [pc, #172]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d0f0      	beq.n	8003346 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003364:	4b28      	ldr	r3, [pc, #160]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	4925      	ldr	r1, [pc, #148]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 8003374:	4313      	orrs	r3, r2
 8003376:	600b      	str	r3, [r1, #0]
 8003378:	e015      	b.n	80033a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800337a:	4b24      	ldr	r3, [pc, #144]	; (800340c <HAL_RCC_OscConfig+0x244>)
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003380:	f7fd fe26 	bl	8000fd0 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003388:	f7fd fe22 	bl	8000fd0 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e187      	b.n	80036aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800339a:	4b1b      	ldr	r3, [pc, #108]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f0      	bne.n	8003388 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0308 	and.w	r3, r3, #8
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d036      	beq.n	8003420 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d016      	beq.n	80033e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033ba:	4b15      	ldr	r3, [pc, #84]	; (8003410 <HAL_RCC_OscConfig+0x248>)
 80033bc:	2201      	movs	r2, #1
 80033be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c0:	f7fd fe06 	bl	8000fd0 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033c8:	f7fd fe02 	bl	8000fd0 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e167      	b.n	80036aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033da:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 80033dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0f0      	beq.n	80033c8 <HAL_RCC_OscConfig+0x200>
 80033e6:	e01b      	b.n	8003420 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033e8:	4b09      	ldr	r3, [pc, #36]	; (8003410 <HAL_RCC_OscConfig+0x248>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ee:	f7fd fdef 	bl	8000fd0 <HAL_GetTick>
 80033f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033f4:	e00e      	b.n	8003414 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033f6:	f7fd fdeb 	bl	8000fd0 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d907      	bls.n	8003414 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e150      	b.n	80036aa <HAL_RCC_OscConfig+0x4e2>
 8003408:	40023800 	.word	0x40023800
 800340c:	42470000 	.word	0x42470000
 8003410:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003414:	4b88      	ldr	r3, [pc, #544]	; (8003638 <HAL_RCC_OscConfig+0x470>)
 8003416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1ea      	bne.n	80033f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0304 	and.w	r3, r3, #4
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 8097 	beq.w	800355c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800342e:	2300      	movs	r3, #0
 8003430:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003432:	4b81      	ldr	r3, [pc, #516]	; (8003638 <HAL_RCC_OscConfig+0x470>)
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10f      	bne.n	800345e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800343e:	2300      	movs	r3, #0
 8003440:	60bb      	str	r3, [r7, #8]
 8003442:	4b7d      	ldr	r3, [pc, #500]	; (8003638 <HAL_RCC_OscConfig+0x470>)
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	4a7c      	ldr	r2, [pc, #496]	; (8003638 <HAL_RCC_OscConfig+0x470>)
 8003448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800344c:	6413      	str	r3, [r2, #64]	; 0x40
 800344e:	4b7a      	ldr	r3, [pc, #488]	; (8003638 <HAL_RCC_OscConfig+0x470>)
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003456:	60bb      	str	r3, [r7, #8]
 8003458:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800345a:	2301      	movs	r3, #1
 800345c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800345e:	4b77      	ldr	r3, [pc, #476]	; (800363c <HAL_RCC_OscConfig+0x474>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003466:	2b00      	cmp	r3, #0
 8003468:	d118      	bne.n	800349c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800346a:	4b74      	ldr	r3, [pc, #464]	; (800363c <HAL_RCC_OscConfig+0x474>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a73      	ldr	r2, [pc, #460]	; (800363c <HAL_RCC_OscConfig+0x474>)
 8003470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003474:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003476:	f7fd fdab 	bl	8000fd0 <HAL_GetTick>
 800347a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800347c:	e008      	b.n	8003490 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800347e:	f7fd fda7 	bl	8000fd0 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e10c      	b.n	80036aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003490:	4b6a      	ldr	r3, [pc, #424]	; (800363c <HAL_RCC_OscConfig+0x474>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0f0      	beq.n	800347e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d106      	bne.n	80034b2 <HAL_RCC_OscConfig+0x2ea>
 80034a4:	4b64      	ldr	r3, [pc, #400]	; (8003638 <HAL_RCC_OscConfig+0x470>)
 80034a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a8:	4a63      	ldr	r2, [pc, #396]	; (8003638 <HAL_RCC_OscConfig+0x470>)
 80034aa:	f043 0301 	orr.w	r3, r3, #1
 80034ae:	6713      	str	r3, [r2, #112]	; 0x70
 80034b0:	e01c      	b.n	80034ec <HAL_RCC_OscConfig+0x324>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	2b05      	cmp	r3, #5
 80034b8:	d10c      	bne.n	80034d4 <HAL_RCC_OscConfig+0x30c>
 80034ba:	4b5f      	ldr	r3, [pc, #380]	; (8003638 <HAL_RCC_OscConfig+0x470>)
 80034bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034be:	4a5e      	ldr	r2, [pc, #376]	; (8003638 <HAL_RCC_OscConfig+0x470>)
 80034c0:	f043 0304 	orr.w	r3, r3, #4
 80034c4:	6713      	str	r3, [r2, #112]	; 0x70
 80034c6:	4b5c      	ldr	r3, [pc, #368]	; (8003638 <HAL_RCC_OscConfig+0x470>)
 80034c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ca:	4a5b      	ldr	r2, [pc, #364]	; (8003638 <HAL_RCC_OscConfig+0x470>)
 80034cc:	f043 0301 	orr.w	r3, r3, #1
 80034d0:	6713      	str	r3, [r2, #112]	; 0x70
 80034d2:	e00b      	b.n	80034ec <HAL_RCC_OscConfig+0x324>
 80034d4:	4b58      	ldr	r3, [pc, #352]	; (8003638 <HAL_RCC_OscConfig+0x470>)
 80034d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d8:	4a57      	ldr	r2, [pc, #348]	; (8003638 <HAL_RCC_OscConfig+0x470>)
 80034da:	f023 0301 	bic.w	r3, r3, #1
 80034de:	6713      	str	r3, [r2, #112]	; 0x70
 80034e0:	4b55      	ldr	r3, [pc, #340]	; (8003638 <HAL_RCC_OscConfig+0x470>)
 80034e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e4:	4a54      	ldr	r2, [pc, #336]	; (8003638 <HAL_RCC_OscConfig+0x470>)
 80034e6:	f023 0304 	bic.w	r3, r3, #4
 80034ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d015      	beq.n	8003520 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f4:	f7fd fd6c 	bl	8000fd0 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034fa:	e00a      	b.n	8003512 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034fc:	f7fd fd68 	bl	8000fd0 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	f241 3288 	movw	r2, #5000	; 0x1388
 800350a:	4293      	cmp	r3, r2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e0cb      	b.n	80036aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003512:	4b49      	ldr	r3, [pc, #292]	; (8003638 <HAL_RCC_OscConfig+0x470>)
 8003514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d0ee      	beq.n	80034fc <HAL_RCC_OscConfig+0x334>
 800351e:	e014      	b.n	800354a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003520:	f7fd fd56 	bl	8000fd0 <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003526:	e00a      	b.n	800353e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003528:	f7fd fd52 	bl	8000fd0 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	f241 3288 	movw	r2, #5000	; 0x1388
 8003536:	4293      	cmp	r3, r2
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e0b5      	b.n	80036aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800353e:	4b3e      	ldr	r3, [pc, #248]	; (8003638 <HAL_RCC_OscConfig+0x470>)
 8003540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1ee      	bne.n	8003528 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800354a:	7dfb      	ldrb	r3, [r7, #23]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d105      	bne.n	800355c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003550:	4b39      	ldr	r3, [pc, #228]	; (8003638 <HAL_RCC_OscConfig+0x470>)
 8003552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003554:	4a38      	ldr	r2, [pc, #224]	; (8003638 <HAL_RCC_OscConfig+0x470>)
 8003556:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800355a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 80a1 	beq.w	80036a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003566:	4b34      	ldr	r3, [pc, #208]	; (8003638 <HAL_RCC_OscConfig+0x470>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f003 030c 	and.w	r3, r3, #12
 800356e:	2b08      	cmp	r3, #8
 8003570:	d05c      	beq.n	800362c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	2b02      	cmp	r3, #2
 8003578:	d141      	bne.n	80035fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800357a:	4b31      	ldr	r3, [pc, #196]	; (8003640 <HAL_RCC_OscConfig+0x478>)
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003580:	f7fd fd26 	bl	8000fd0 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003588:	f7fd fd22 	bl	8000fd0 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e087      	b.n	80036aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800359a:	4b27      	ldr	r3, [pc, #156]	; (8003638 <HAL_RCC_OscConfig+0x470>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1f0      	bne.n	8003588 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	69da      	ldr	r2, [r3, #28]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	431a      	orrs	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	019b      	lsls	r3, r3, #6
 80035b6:	431a      	orrs	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035bc:	085b      	lsrs	r3, r3, #1
 80035be:	3b01      	subs	r3, #1
 80035c0:	041b      	lsls	r3, r3, #16
 80035c2:	431a      	orrs	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c8:	061b      	lsls	r3, r3, #24
 80035ca:	491b      	ldr	r1, [pc, #108]	; (8003638 <HAL_RCC_OscConfig+0x470>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035d0:	4b1b      	ldr	r3, [pc, #108]	; (8003640 <HAL_RCC_OscConfig+0x478>)
 80035d2:	2201      	movs	r2, #1
 80035d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d6:	f7fd fcfb 	bl	8000fd0 <HAL_GetTick>
 80035da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035dc:	e008      	b.n	80035f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035de:	f7fd fcf7 	bl	8000fd0 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d901      	bls.n	80035f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e05c      	b.n	80036aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035f0:	4b11      	ldr	r3, [pc, #68]	; (8003638 <HAL_RCC_OscConfig+0x470>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d0f0      	beq.n	80035de <HAL_RCC_OscConfig+0x416>
 80035fc:	e054      	b.n	80036a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035fe:	4b10      	ldr	r3, [pc, #64]	; (8003640 <HAL_RCC_OscConfig+0x478>)
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003604:	f7fd fce4 	bl	8000fd0 <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800360c:	f7fd fce0 	bl	8000fd0 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e045      	b.n	80036aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800361e:	4b06      	ldr	r3, [pc, #24]	; (8003638 <HAL_RCC_OscConfig+0x470>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1f0      	bne.n	800360c <HAL_RCC_OscConfig+0x444>
 800362a:	e03d      	b.n	80036a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d107      	bne.n	8003644 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e038      	b.n	80036aa <HAL_RCC_OscConfig+0x4e2>
 8003638:	40023800 	.word	0x40023800
 800363c:	40007000 	.word	0x40007000
 8003640:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003644:	4b1b      	ldr	r3, [pc, #108]	; (80036b4 <HAL_RCC_OscConfig+0x4ec>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d028      	beq.n	80036a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800365c:	429a      	cmp	r2, r3
 800365e:	d121      	bne.n	80036a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800366a:	429a      	cmp	r2, r3
 800366c:	d11a      	bne.n	80036a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003674:	4013      	ands	r3, r2
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800367a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800367c:	4293      	cmp	r3, r2
 800367e:	d111      	bne.n	80036a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368a:	085b      	lsrs	r3, r3, #1
 800368c:	3b01      	subs	r3, #1
 800368e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003690:	429a      	cmp	r2, r3
 8003692:	d107      	bne.n	80036a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d001      	beq.n	80036a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e000      	b.n	80036aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3718      	adds	r7, #24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	40023800 	.word	0x40023800

080036b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d101      	bne.n	80036cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e0cc      	b.n	8003866 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036cc:	4b68      	ldr	r3, [pc, #416]	; (8003870 <HAL_RCC_ClockConfig+0x1b8>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d90c      	bls.n	80036f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036da:	4b65      	ldr	r3, [pc, #404]	; (8003870 <HAL_RCC_ClockConfig+0x1b8>)
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	b2d2      	uxtb	r2, r2
 80036e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036e2:	4b63      	ldr	r3, [pc, #396]	; (8003870 <HAL_RCC_ClockConfig+0x1b8>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0307 	and.w	r3, r3, #7
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d001      	beq.n	80036f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e0b8      	b.n	8003866 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d020      	beq.n	8003742 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	2b00      	cmp	r3, #0
 800370a:	d005      	beq.n	8003718 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800370c:	4b59      	ldr	r3, [pc, #356]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	4a58      	ldr	r2, [pc, #352]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 8003712:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003716:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0308 	and.w	r3, r3, #8
 8003720:	2b00      	cmp	r3, #0
 8003722:	d005      	beq.n	8003730 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003724:	4b53      	ldr	r3, [pc, #332]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	4a52      	ldr	r2, [pc, #328]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 800372a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800372e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003730:	4b50      	ldr	r3, [pc, #320]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	494d      	ldr	r1, [pc, #308]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 800373e:	4313      	orrs	r3, r2
 8003740:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b00      	cmp	r3, #0
 800374c:	d044      	beq.n	80037d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d107      	bne.n	8003766 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003756:	4b47      	ldr	r3, [pc, #284]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d119      	bne.n	8003796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e07f      	b.n	8003866 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b02      	cmp	r3, #2
 800376c:	d003      	beq.n	8003776 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003772:	2b03      	cmp	r3, #3
 8003774:	d107      	bne.n	8003786 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003776:	4b3f      	ldr	r3, [pc, #252]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d109      	bne.n	8003796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e06f      	b.n	8003866 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003786:	4b3b      	ldr	r3, [pc, #236]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e067      	b.n	8003866 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003796:	4b37      	ldr	r3, [pc, #220]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f023 0203 	bic.w	r2, r3, #3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	4934      	ldr	r1, [pc, #208]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037a8:	f7fd fc12 	bl	8000fd0 <HAL_GetTick>
 80037ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ae:	e00a      	b.n	80037c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037b0:	f7fd fc0e 	bl	8000fd0 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80037be:	4293      	cmp	r3, r2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e04f      	b.n	8003866 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037c6:	4b2b      	ldr	r3, [pc, #172]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f003 020c 	and.w	r2, r3, #12
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d1eb      	bne.n	80037b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037d8:	4b25      	ldr	r3, [pc, #148]	; (8003870 <HAL_RCC_ClockConfig+0x1b8>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0307 	and.w	r3, r3, #7
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d20c      	bcs.n	8003800 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037e6:	4b22      	ldr	r3, [pc, #136]	; (8003870 <HAL_RCC_ClockConfig+0x1b8>)
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	b2d2      	uxtb	r2, r2
 80037ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ee:	4b20      	ldr	r3, [pc, #128]	; (8003870 <HAL_RCC_ClockConfig+0x1b8>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0307 	and.w	r3, r3, #7
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d001      	beq.n	8003800 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e032      	b.n	8003866 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	2b00      	cmp	r3, #0
 800380a:	d008      	beq.n	800381e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800380c:	4b19      	ldr	r3, [pc, #100]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	4916      	ldr	r1, [pc, #88]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 800381a:	4313      	orrs	r3, r2
 800381c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0308 	and.w	r3, r3, #8
 8003826:	2b00      	cmp	r3, #0
 8003828:	d009      	beq.n	800383e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800382a:	4b12      	ldr	r3, [pc, #72]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	490e      	ldr	r1, [pc, #56]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 800383a:	4313      	orrs	r3, r2
 800383c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800383e:	f000 f821 	bl	8003884 <HAL_RCC_GetSysClockFreq>
 8003842:	4602      	mov	r2, r0
 8003844:	4b0b      	ldr	r3, [pc, #44]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	091b      	lsrs	r3, r3, #4
 800384a:	f003 030f 	and.w	r3, r3, #15
 800384e:	490a      	ldr	r1, [pc, #40]	; (8003878 <HAL_RCC_ClockConfig+0x1c0>)
 8003850:	5ccb      	ldrb	r3, [r1, r3]
 8003852:	fa22 f303 	lsr.w	r3, r2, r3
 8003856:	4a09      	ldr	r2, [pc, #36]	; (800387c <HAL_RCC_ClockConfig+0x1c4>)
 8003858:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800385a:	4b09      	ldr	r3, [pc, #36]	; (8003880 <HAL_RCC_ClockConfig+0x1c8>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4618      	mov	r0, r3
 8003860:	f7fd fb72 	bl	8000f48 <HAL_InitTick>

  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	40023c00 	.word	0x40023c00
 8003874:	40023800 	.word	0x40023800
 8003878:	080094a0 	.word	0x080094a0
 800387c:	20000000 	.word	0x20000000
 8003880:	20000004 	.word	0x20000004

08003884 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003884:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003888:	b094      	sub	sp, #80	; 0x50
 800388a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800388c:	2300      	movs	r3, #0
 800388e:	647b      	str	r3, [r7, #68]	; 0x44
 8003890:	2300      	movs	r3, #0
 8003892:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003894:	2300      	movs	r3, #0
 8003896:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003898:	2300      	movs	r3, #0
 800389a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800389c:	4b79      	ldr	r3, [pc, #484]	; (8003a84 <HAL_RCC_GetSysClockFreq+0x200>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f003 030c 	and.w	r3, r3, #12
 80038a4:	2b08      	cmp	r3, #8
 80038a6:	d00d      	beq.n	80038c4 <HAL_RCC_GetSysClockFreq+0x40>
 80038a8:	2b08      	cmp	r3, #8
 80038aa:	f200 80e1 	bhi.w	8003a70 <HAL_RCC_GetSysClockFreq+0x1ec>
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d002      	beq.n	80038b8 <HAL_RCC_GetSysClockFreq+0x34>
 80038b2:	2b04      	cmp	r3, #4
 80038b4:	d003      	beq.n	80038be <HAL_RCC_GetSysClockFreq+0x3a>
 80038b6:	e0db      	b.n	8003a70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038b8:	4b73      	ldr	r3, [pc, #460]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x204>)
 80038ba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80038bc:	e0db      	b.n	8003a76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038be:	4b73      	ldr	r3, [pc, #460]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x208>)
 80038c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038c2:	e0d8      	b.n	8003a76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038c4:	4b6f      	ldr	r3, [pc, #444]	; (8003a84 <HAL_RCC_GetSysClockFreq+0x200>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038cc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038ce:	4b6d      	ldr	r3, [pc, #436]	; (8003a84 <HAL_RCC_GetSysClockFreq+0x200>)
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d063      	beq.n	80039a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038da:	4b6a      	ldr	r3, [pc, #424]	; (8003a84 <HAL_RCC_GetSysClockFreq+0x200>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	099b      	lsrs	r3, r3, #6
 80038e0:	2200      	movs	r2, #0
 80038e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80038e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80038e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ec:	633b      	str	r3, [r7, #48]	; 0x30
 80038ee:	2300      	movs	r3, #0
 80038f0:	637b      	str	r3, [r7, #52]	; 0x34
 80038f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80038f6:	4622      	mov	r2, r4
 80038f8:	462b      	mov	r3, r5
 80038fa:	f04f 0000 	mov.w	r0, #0
 80038fe:	f04f 0100 	mov.w	r1, #0
 8003902:	0159      	lsls	r1, r3, #5
 8003904:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003908:	0150      	lsls	r0, r2, #5
 800390a:	4602      	mov	r2, r0
 800390c:	460b      	mov	r3, r1
 800390e:	4621      	mov	r1, r4
 8003910:	1a51      	subs	r1, r2, r1
 8003912:	6139      	str	r1, [r7, #16]
 8003914:	4629      	mov	r1, r5
 8003916:	eb63 0301 	sbc.w	r3, r3, r1
 800391a:	617b      	str	r3, [r7, #20]
 800391c:	f04f 0200 	mov.w	r2, #0
 8003920:	f04f 0300 	mov.w	r3, #0
 8003924:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003928:	4659      	mov	r1, fp
 800392a:	018b      	lsls	r3, r1, #6
 800392c:	4651      	mov	r1, sl
 800392e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003932:	4651      	mov	r1, sl
 8003934:	018a      	lsls	r2, r1, #6
 8003936:	4651      	mov	r1, sl
 8003938:	ebb2 0801 	subs.w	r8, r2, r1
 800393c:	4659      	mov	r1, fp
 800393e:	eb63 0901 	sbc.w	r9, r3, r1
 8003942:	f04f 0200 	mov.w	r2, #0
 8003946:	f04f 0300 	mov.w	r3, #0
 800394a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800394e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003952:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003956:	4690      	mov	r8, r2
 8003958:	4699      	mov	r9, r3
 800395a:	4623      	mov	r3, r4
 800395c:	eb18 0303 	adds.w	r3, r8, r3
 8003960:	60bb      	str	r3, [r7, #8]
 8003962:	462b      	mov	r3, r5
 8003964:	eb49 0303 	adc.w	r3, r9, r3
 8003968:	60fb      	str	r3, [r7, #12]
 800396a:	f04f 0200 	mov.w	r2, #0
 800396e:	f04f 0300 	mov.w	r3, #0
 8003972:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003976:	4629      	mov	r1, r5
 8003978:	024b      	lsls	r3, r1, #9
 800397a:	4621      	mov	r1, r4
 800397c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003980:	4621      	mov	r1, r4
 8003982:	024a      	lsls	r2, r1, #9
 8003984:	4610      	mov	r0, r2
 8003986:	4619      	mov	r1, r3
 8003988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800398a:	2200      	movs	r2, #0
 800398c:	62bb      	str	r3, [r7, #40]	; 0x28
 800398e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003990:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003994:	f7fc fc18 	bl	80001c8 <__aeabi_uldivmod>
 8003998:	4602      	mov	r2, r0
 800399a:	460b      	mov	r3, r1
 800399c:	4613      	mov	r3, r2
 800399e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039a0:	e058      	b.n	8003a54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039a2:	4b38      	ldr	r3, [pc, #224]	; (8003a84 <HAL_RCC_GetSysClockFreq+0x200>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	099b      	lsrs	r3, r3, #6
 80039a8:	2200      	movs	r2, #0
 80039aa:	4618      	mov	r0, r3
 80039ac:	4611      	mov	r1, r2
 80039ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80039b2:	623b      	str	r3, [r7, #32]
 80039b4:	2300      	movs	r3, #0
 80039b6:	627b      	str	r3, [r7, #36]	; 0x24
 80039b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80039bc:	4642      	mov	r2, r8
 80039be:	464b      	mov	r3, r9
 80039c0:	f04f 0000 	mov.w	r0, #0
 80039c4:	f04f 0100 	mov.w	r1, #0
 80039c8:	0159      	lsls	r1, r3, #5
 80039ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039ce:	0150      	lsls	r0, r2, #5
 80039d0:	4602      	mov	r2, r0
 80039d2:	460b      	mov	r3, r1
 80039d4:	4641      	mov	r1, r8
 80039d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80039da:	4649      	mov	r1, r9
 80039dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80039e0:	f04f 0200 	mov.w	r2, #0
 80039e4:	f04f 0300 	mov.w	r3, #0
 80039e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80039ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80039f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80039f4:	ebb2 040a 	subs.w	r4, r2, sl
 80039f8:	eb63 050b 	sbc.w	r5, r3, fp
 80039fc:	f04f 0200 	mov.w	r2, #0
 8003a00:	f04f 0300 	mov.w	r3, #0
 8003a04:	00eb      	lsls	r3, r5, #3
 8003a06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a0a:	00e2      	lsls	r2, r4, #3
 8003a0c:	4614      	mov	r4, r2
 8003a0e:	461d      	mov	r5, r3
 8003a10:	4643      	mov	r3, r8
 8003a12:	18e3      	adds	r3, r4, r3
 8003a14:	603b      	str	r3, [r7, #0]
 8003a16:	464b      	mov	r3, r9
 8003a18:	eb45 0303 	adc.w	r3, r5, r3
 8003a1c:	607b      	str	r3, [r7, #4]
 8003a1e:	f04f 0200 	mov.w	r2, #0
 8003a22:	f04f 0300 	mov.w	r3, #0
 8003a26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a2a:	4629      	mov	r1, r5
 8003a2c:	028b      	lsls	r3, r1, #10
 8003a2e:	4621      	mov	r1, r4
 8003a30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a34:	4621      	mov	r1, r4
 8003a36:	028a      	lsls	r2, r1, #10
 8003a38:	4610      	mov	r0, r2
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a3e:	2200      	movs	r2, #0
 8003a40:	61bb      	str	r3, [r7, #24]
 8003a42:	61fa      	str	r2, [r7, #28]
 8003a44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a48:	f7fc fbbe 	bl	80001c8 <__aeabi_uldivmod>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	460b      	mov	r3, r1
 8003a50:	4613      	mov	r3, r2
 8003a52:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a54:	4b0b      	ldr	r3, [pc, #44]	; (8003a84 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	0c1b      	lsrs	r3, r3, #16
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	3301      	adds	r3, #1
 8003a60:	005b      	lsls	r3, r3, #1
 8003a62:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003a64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a6e:	e002      	b.n	8003a76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a70:	4b05      	ldr	r3, [pc, #20]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3750      	adds	r7, #80	; 0x50
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a82:	bf00      	nop
 8003a84:	40023800 	.word	0x40023800
 8003a88:	00f42400 	.word	0x00f42400
 8003a8c:	007a1200 	.word	0x007a1200

08003a90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a94:	4b03      	ldr	r3, [pc, #12]	; (8003aa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a96:	681b      	ldr	r3, [r3, #0]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	20000000 	.word	0x20000000

08003aa8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e07b      	b.n	8003bb2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d108      	bne.n	8003ad4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003aca:	d009      	beq.n	8003ae0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	61da      	str	r2, [r3, #28]
 8003ad2:	e005      	b.n	8003ae0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d106      	bne.n	8003b00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7fd f8a4 	bl	8000c48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2202      	movs	r2, #2
 8003b04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b16:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b28:	431a      	orrs	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b32:	431a      	orrs	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	431a      	orrs	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b50:	431a      	orrs	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	69db      	ldr	r3, [r3, #28]
 8003b56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b64:	ea42 0103 	orr.w	r1, r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b6c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	430a      	orrs	r2, r1
 8003b76:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	0c1b      	lsrs	r3, r3, #16
 8003b7e:	f003 0104 	and.w	r1, r3, #4
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	f003 0210 	and.w	r2, r3, #16
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	69da      	ldr	r2, [r3, #28]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ba0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
	...

08003bbc <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d110      	bne.n	8003bf8 <HAL_SPI_Receive_DMA+0x3c>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bde:	d10b      	bne.n	8003bf8 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2204      	movs	r2, #4
 8003be4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8003be8:	88fb      	ldrh	r3, [r7, #6]
 8003bea:	68ba      	ldr	r2, [r7, #8]
 8003bec:	68b9      	ldr	r1, [r7, #8]
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f000 f8ac 	bl	8003d4c <HAL_SPI_TransmitReceive_DMA>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	e09f      	b.n	8003d38 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d101      	bne.n	8003c06 <HAL_SPI_Receive_DMA+0x4a>
 8003c02:	2302      	movs	r3, #2
 8003c04:	e098      	b.n	8003d38 <HAL_SPI_Receive_DMA+0x17c>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d002      	beq.n	8003c20 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c1e:	e086      	b.n	8003d2e <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d002      	beq.n	8003c2c <HAL_SPI_Receive_DMA+0x70>
 8003c26:	88fb      	ldrh	r3, [r7, #6]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d102      	bne.n	8003c32 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c30:	e07d      	b.n	8003d2e <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2204      	movs	r2, #4
 8003c36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	88fa      	ldrh	r2, [r7, #6]
 8003c4a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	88fa      	ldrh	r2, [r7, #6]
 8003c50:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c72:	d10f      	bne.n	8003c94 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c82:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c92:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c98:	4a29      	ldr	r2, [pc, #164]	; (8003d40 <HAL_SPI_Receive_DMA+0x184>)
 8003c9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ca0:	4a28      	ldr	r2, [pc, #160]	; (8003d44 <HAL_SPI_Receive_DMA+0x188>)
 8003ca2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ca8:	4a27      	ldr	r2, [pc, #156]	; (8003d48 <HAL_SPI_Receive_DMA+0x18c>)
 8003caa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	330c      	adds	r3, #12
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cca:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003ccc:	f7fd fb70 	bl	80013b0 <HAL_DMA_Start_IT>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00c      	beq.n	8003cf0 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cda:	f043 0210 	orr.w	r2, r3, #16
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003cee:	e01e      	b.n	8003d2e <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfa:	2b40      	cmp	r3, #64	; 0x40
 8003cfc:	d007      	beq.n	8003d0e <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d0c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f042 0220 	orr.w	r2, r2, #32
 8003d1c:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f042 0201 	orr.w	r2, r2, #1
 8003d2c:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3718      	adds	r7, #24
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	080040ed 	.word	0x080040ed
 8003d44:	08003fb5 	.word	0x08003fb5
 8003d48:	08004125 	.word	0x08004125

08003d4c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b086      	sub	sp, #24
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
 8003d58:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d101      	bne.n	8003d6c <HAL_SPI_TransmitReceive_DMA+0x20>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e0e3      	b.n	8003f34 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d7a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003d82:	7dbb      	ldrb	r3, [r7, #22]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d00d      	beq.n	8003da4 <HAL_SPI_TransmitReceive_DMA+0x58>
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d8e:	d106      	bne.n	8003d9e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d102      	bne.n	8003d9e <HAL_SPI_TransmitReceive_DMA+0x52>
 8003d98:	7dbb      	ldrb	r3, [r7, #22]
 8003d9a:	2b04      	cmp	r3, #4
 8003d9c:	d002      	beq.n	8003da4 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8003d9e:	2302      	movs	r3, #2
 8003da0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003da2:	e0c2      	b.n	8003f2a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d005      	beq.n	8003db6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d002      	beq.n	8003db6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003db0:	887b      	ldrh	r3, [r7, #2]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d102      	bne.n	8003dbc <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003dba:	e0b6      	b.n	8003f2a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b04      	cmp	r3, #4
 8003dc6:	d003      	beq.n	8003dd0 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2205      	movs	r2, #5
 8003dcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	887a      	ldrh	r2, [r7, #2]
 8003de0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	887a      	ldrh	r2, [r7, #2]
 8003de6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	887a      	ldrh	r2, [r7, #2]
 8003df2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	887a      	ldrh	r2, [r7, #2]
 8003df8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b04      	cmp	r3, #4
 8003e10:	d108      	bne.n	8003e24 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e16:	4a49      	ldr	r2, [pc, #292]	; (8003f3c <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8003e18:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e1e:	4a48      	ldr	r2, [pc, #288]	; (8003f40 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8003e20:	63da      	str	r2, [r3, #60]	; 0x3c
 8003e22:	e007      	b.n	8003e34 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e28:	4a46      	ldr	r2, [pc, #280]	; (8003f44 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8003e2a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e30:	4a45      	ldr	r2, [pc, #276]	; (8003f48 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8003e32:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e38:	4a44      	ldr	r2, [pc, #272]	; (8003f4c <HAL_SPI_TransmitReceive_DMA+0x200>)
 8003e3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e40:	2200      	movs	r2, #0
 8003e42:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	330c      	adds	r3, #12
 8003e4e:	4619      	mov	r1, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e54:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e5a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003e5c:	f7fd faa8 	bl	80013b0 <HAL_DMA_Start_IT>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00c      	beq.n	8003e80 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e6a:	f043 0210 	orr.w	r2, r3, #16
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003e7e:	e054      	b.n	8003f2a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	685a      	ldr	r2, [r3, #4]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f042 0201 	orr.w	r2, r2, #1
 8003e8e:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e94:	2200      	movs	r2, #0
 8003e96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eac:	2200      	movs	r2, #0
 8003eae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb8:	4619      	mov	r1, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	330c      	adds	r3, #12
 8003ec0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ec6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003ec8:	f7fd fa72 	bl	80013b0 <HAL_DMA_Start_IT>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00c      	beq.n	8003eec <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed6:	f043 0210 	orr.w	r2, r3, #16
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003eea:	e01e      	b.n	8003f2a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef6:	2b40      	cmp	r3, #64	; 0x40
 8003ef8:	d007      	beq.n	8003f0a <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f08:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f042 0220 	orr.w	r2, r2, #32
 8003f18:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f042 0202 	orr.w	r2, r2, #2
 8003f28:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f32:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3718      	adds	r7, #24
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	080040ed 	.word	0x080040ed
 8003f40:	08003fb5 	.word	0x08003fb5
 8003f44:	08004109 	.word	0x08004109
 8003f48:	0800405d 	.word	0x0800405d
 8003f4c:	08004125 	.word	0x08004125

08003f50 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc0:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fc2:	f7fd f805 	bl	8000fd0 <HAL_GetTick>
 8003fc6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fd6:	d03b      	beq.n	8004050 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f022 0220 	bic.w	r2, r2, #32
 8003fe6:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10d      	bne.n	800400c <SPI_DMAReceiveCplt+0x58>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ff8:	d108      	bne.n	800400c <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 0203 	bic.w	r2, r2, #3
 8004008:	605a      	str	r2, [r3, #4]
 800400a:	e007      	b.n	800401c <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f022 0201 	bic.w	r2, r2, #1
 800401a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	2164      	movs	r1, #100	; 0x64
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f000 f927 	bl	8004274 <SPI_EndRxTransaction>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d002      	beq.n	8004032 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2220      	movs	r2, #32
 8004030:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004044:	2b00      	cmp	r3, #0
 8004046:	d003      	beq.n	8004050 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f7ff ffa9 	bl	8003fa0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800404e:	e002      	b.n	8004056 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f7ff ff7d 	bl	8003f50 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004068:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800406a:	f7fc ffb1 	bl	8000fd0 <HAL_GetTick>
 800406e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800407e:	d02f      	beq.n	80040e0 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f022 0220 	bic.w	r2, r2, #32
 800408e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004090:	68ba      	ldr	r2, [r7, #8]
 8004092:	2164      	movs	r1, #100	; 0x64
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f000 f953 	bl	8004340 <SPI_EndRxTxTransaction>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d005      	beq.n	80040ac <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a4:	f043 0220 	orr.w	r2, r3, #32
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685a      	ldr	r2, [r3, #4]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f022 0203 	bic.w	r2, r2, #3
 80040ba:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d003      	beq.n	80040e0 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f7ff ff61 	bl	8003fa0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80040de:	e002      	b.n	80040e6 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f7ff ff3f 	bl	8003f64 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f7ff ff3c 	bl	8003f78 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004100:	bf00      	nop
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004114:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f7ff ff38 	bl	8003f8c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800411c:	bf00      	nop
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004130:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f022 0203 	bic.w	r2, r2, #3
 8004140:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004146:	f043 0210 	orr.w	r2, r3, #16
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f7ff ff22 	bl	8003fa0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800415c:	bf00      	nop
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b088      	sub	sp, #32
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	603b      	str	r3, [r7, #0]
 8004170:	4613      	mov	r3, r2
 8004172:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004174:	f7fc ff2c 	bl	8000fd0 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417c:	1a9b      	subs	r3, r3, r2
 800417e:	683a      	ldr	r2, [r7, #0]
 8004180:	4413      	add	r3, r2
 8004182:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004184:	f7fc ff24 	bl	8000fd0 <HAL_GetTick>
 8004188:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800418a:	4b39      	ldr	r3, [pc, #228]	; (8004270 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	015b      	lsls	r3, r3, #5
 8004190:	0d1b      	lsrs	r3, r3, #20
 8004192:	69fa      	ldr	r2, [r7, #28]
 8004194:	fb02 f303 	mul.w	r3, r2, r3
 8004198:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800419a:	e054      	b.n	8004246 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a2:	d050      	beq.n	8004246 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041a4:	f7fc ff14 	bl	8000fd0 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	69fa      	ldr	r2, [r7, #28]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d902      	bls.n	80041ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d13d      	bne.n	8004236 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	685a      	ldr	r2, [r3, #4]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80041c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041d2:	d111      	bne.n	80041f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041dc:	d004      	beq.n	80041e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041e6:	d107      	bne.n	80041f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004200:	d10f      	bne.n	8004222 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004220:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e017      	b.n	8004266 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d101      	bne.n	8004240 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800423c:	2300      	movs	r3, #0
 800423e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	3b01      	subs	r3, #1
 8004244:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	689a      	ldr	r2, [r3, #8]
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	4013      	ands	r3, r2
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	429a      	cmp	r2, r3
 8004254:	bf0c      	ite	eq
 8004256:	2301      	moveq	r3, #1
 8004258:	2300      	movne	r3, #0
 800425a:	b2db      	uxtb	r3, r3
 800425c:	461a      	mov	r2, r3
 800425e:	79fb      	ldrb	r3, [r7, #7]
 8004260:	429a      	cmp	r2, r3
 8004262:	d19b      	bne.n	800419c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3720      	adds	r7, #32
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	20000000 	.word	0x20000000

08004274 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b086      	sub	sp, #24
 8004278:	af02      	add	r7, sp, #8
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004288:	d111      	bne.n	80042ae <SPI_EndRxTransaction+0x3a>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004292:	d004      	beq.n	800429e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800429c:	d107      	bne.n	80042ae <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042ac:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042b6:	d12a      	bne.n	800430e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042c0:	d012      	beq.n	80042e8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	9300      	str	r3, [sp, #0]
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	2200      	movs	r2, #0
 80042ca:	2180      	movs	r1, #128	; 0x80
 80042cc:	68f8      	ldr	r0, [r7, #12]
 80042ce:	f7ff ff49 	bl	8004164 <SPI_WaitFlagStateUntilTimeout>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d02d      	beq.n	8004334 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042dc:	f043 0220 	orr.w	r2, r3, #32
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e026      	b.n	8004336 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	9300      	str	r3, [sp, #0]
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	2200      	movs	r2, #0
 80042f0:	2101      	movs	r1, #1
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f7ff ff36 	bl	8004164 <SPI_WaitFlagStateUntilTimeout>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d01a      	beq.n	8004334 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004302:	f043 0220 	orr.w	r2, r3, #32
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e013      	b.n	8004336 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	2200      	movs	r2, #0
 8004316:	2101      	movs	r1, #1
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f7ff ff23 	bl	8004164 <SPI_WaitFlagStateUntilTimeout>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d007      	beq.n	8004334 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004328:	f043 0220 	orr.w	r2, r3, #32
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e000      	b.n	8004336 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
	...

08004340 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b088      	sub	sp, #32
 8004344:	af02      	add	r7, sp, #8
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800434c:	4b1b      	ldr	r3, [pc, #108]	; (80043bc <SPI_EndRxTxTransaction+0x7c>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a1b      	ldr	r2, [pc, #108]	; (80043c0 <SPI_EndRxTxTransaction+0x80>)
 8004352:	fba2 2303 	umull	r2, r3, r2, r3
 8004356:	0d5b      	lsrs	r3, r3, #21
 8004358:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800435c:	fb02 f303 	mul.w	r3, r2, r3
 8004360:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800436a:	d112      	bne.n	8004392 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	2200      	movs	r2, #0
 8004374:	2180      	movs	r1, #128	; 0x80
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f7ff fef4 	bl	8004164 <SPI_WaitFlagStateUntilTimeout>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d016      	beq.n	80043b0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004386:	f043 0220 	orr.w	r2, r3, #32
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e00f      	b.n	80043b2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00a      	beq.n	80043ae <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	3b01      	subs	r3, #1
 800439c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a8:	2b80      	cmp	r3, #128	; 0x80
 80043aa:	d0f2      	beq.n	8004392 <SPI_EndRxTxTransaction+0x52>
 80043ac:	e000      	b.n	80043b0 <SPI_EndRxTxTransaction+0x70>
        break;
 80043ae:	bf00      	nop
  }

  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3718      	adds	r7, #24
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	20000000 	.word	0x20000000
 80043c0:	165e9f81 	.word	0x165e9f81

080043c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e041      	b.n	800445a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d106      	bne.n	80043f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f7fc fcb8 	bl	8000d60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2202      	movs	r2, #2
 80043f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	3304      	adds	r3, #4
 8004400:	4619      	mov	r1, r3
 8004402:	4610      	mov	r0, r2
 8004404:	f000 fad8 	bl	80049b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3708      	adds	r7, #8
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b082      	sub	sp, #8
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d101      	bne.n	8004474 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e041      	b.n	80044f8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b00      	cmp	r3, #0
 800447e:	d106      	bne.n	800448e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 f839 	bl	8004500 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2202      	movs	r2, #2
 8004492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	3304      	adds	r3, #4
 800449e:	4619      	mov	r1, r3
 80044a0:	4610      	mov	r0, r2
 80044a2:	f000 fa89 	bl	80049b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2201      	movs	r2, #1
 80044ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3708      	adds	r7, #8
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d109      	bne.n	8004538 <HAL_TIM_PWM_Start+0x24>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b01      	cmp	r3, #1
 800452e:	bf14      	ite	ne
 8004530:	2301      	movne	r3, #1
 8004532:	2300      	moveq	r3, #0
 8004534:	b2db      	uxtb	r3, r3
 8004536:	e022      	b.n	800457e <HAL_TIM_PWM_Start+0x6a>
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	2b04      	cmp	r3, #4
 800453c:	d109      	bne.n	8004552 <HAL_TIM_PWM_Start+0x3e>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004544:	b2db      	uxtb	r3, r3
 8004546:	2b01      	cmp	r3, #1
 8004548:	bf14      	ite	ne
 800454a:	2301      	movne	r3, #1
 800454c:	2300      	moveq	r3, #0
 800454e:	b2db      	uxtb	r3, r3
 8004550:	e015      	b.n	800457e <HAL_TIM_PWM_Start+0x6a>
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	2b08      	cmp	r3, #8
 8004556:	d109      	bne.n	800456c <HAL_TIM_PWM_Start+0x58>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800455e:	b2db      	uxtb	r3, r3
 8004560:	2b01      	cmp	r3, #1
 8004562:	bf14      	ite	ne
 8004564:	2301      	movne	r3, #1
 8004566:	2300      	moveq	r3, #0
 8004568:	b2db      	uxtb	r3, r3
 800456a:	e008      	b.n	800457e <HAL_TIM_PWM_Start+0x6a>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004572:	b2db      	uxtb	r3, r3
 8004574:	2b01      	cmp	r3, #1
 8004576:	bf14      	ite	ne
 8004578:	2301      	movne	r3, #1
 800457a:	2300      	moveq	r3, #0
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e07c      	b.n	8004680 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d104      	bne.n	8004596 <HAL_TIM_PWM_Start+0x82>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2202      	movs	r2, #2
 8004590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004594:	e013      	b.n	80045be <HAL_TIM_PWM_Start+0xaa>
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	2b04      	cmp	r3, #4
 800459a:	d104      	bne.n	80045a6 <HAL_TIM_PWM_Start+0x92>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2202      	movs	r2, #2
 80045a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045a4:	e00b      	b.n	80045be <HAL_TIM_PWM_Start+0xaa>
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b08      	cmp	r3, #8
 80045aa:	d104      	bne.n	80045b6 <HAL_TIM_PWM_Start+0xa2>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2202      	movs	r2, #2
 80045b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045b4:	e003      	b.n	80045be <HAL_TIM_PWM_Start+0xaa>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2202      	movs	r2, #2
 80045ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2201      	movs	r2, #1
 80045c4:	6839      	ldr	r1, [r7, #0]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f000 fce0 	bl	8004f8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a2d      	ldr	r2, [pc, #180]	; (8004688 <HAL_TIM_PWM_Start+0x174>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d004      	beq.n	80045e0 <HAL_TIM_PWM_Start+0xcc>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a2c      	ldr	r2, [pc, #176]	; (800468c <HAL_TIM_PWM_Start+0x178>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d101      	bne.n	80045e4 <HAL_TIM_PWM_Start+0xd0>
 80045e0:	2301      	movs	r3, #1
 80045e2:	e000      	b.n	80045e6 <HAL_TIM_PWM_Start+0xd2>
 80045e4:	2300      	movs	r3, #0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d007      	beq.n	80045fa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a22      	ldr	r2, [pc, #136]	; (8004688 <HAL_TIM_PWM_Start+0x174>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d022      	beq.n	800464a <HAL_TIM_PWM_Start+0x136>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800460c:	d01d      	beq.n	800464a <HAL_TIM_PWM_Start+0x136>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a1f      	ldr	r2, [pc, #124]	; (8004690 <HAL_TIM_PWM_Start+0x17c>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d018      	beq.n	800464a <HAL_TIM_PWM_Start+0x136>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a1d      	ldr	r2, [pc, #116]	; (8004694 <HAL_TIM_PWM_Start+0x180>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d013      	beq.n	800464a <HAL_TIM_PWM_Start+0x136>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a1c      	ldr	r2, [pc, #112]	; (8004698 <HAL_TIM_PWM_Start+0x184>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d00e      	beq.n	800464a <HAL_TIM_PWM_Start+0x136>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a16      	ldr	r2, [pc, #88]	; (800468c <HAL_TIM_PWM_Start+0x178>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d009      	beq.n	800464a <HAL_TIM_PWM_Start+0x136>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a18      	ldr	r2, [pc, #96]	; (800469c <HAL_TIM_PWM_Start+0x188>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d004      	beq.n	800464a <HAL_TIM_PWM_Start+0x136>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a16      	ldr	r2, [pc, #88]	; (80046a0 <HAL_TIM_PWM_Start+0x18c>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d111      	bne.n	800466e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f003 0307 	and.w	r3, r3, #7
 8004654:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2b06      	cmp	r3, #6
 800465a:	d010      	beq.n	800467e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f042 0201 	orr.w	r2, r2, #1
 800466a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800466c:	e007      	b.n	800467e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f042 0201 	orr.w	r2, r2, #1
 800467c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	40010000 	.word	0x40010000
 800468c:	40010400 	.word	0x40010400
 8004690:	40000400 	.word	0x40000400
 8004694:	40000800 	.word	0x40000800
 8004698:	40000c00 	.word	0x40000c00
 800469c:	40014000 	.word	0x40014000
 80046a0:	40001800 	.word	0x40001800

080046a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046b0:	2300      	movs	r3, #0
 80046b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d101      	bne.n	80046c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80046be:	2302      	movs	r3, #2
 80046c0:	e0ae      	b.n	8004820 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2b0c      	cmp	r3, #12
 80046ce:	f200 809f 	bhi.w	8004810 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80046d2:	a201      	add	r2, pc, #4	; (adr r2, 80046d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d8:	0800470d 	.word	0x0800470d
 80046dc:	08004811 	.word	0x08004811
 80046e0:	08004811 	.word	0x08004811
 80046e4:	08004811 	.word	0x08004811
 80046e8:	0800474d 	.word	0x0800474d
 80046ec:	08004811 	.word	0x08004811
 80046f0:	08004811 	.word	0x08004811
 80046f4:	08004811 	.word	0x08004811
 80046f8:	0800478f 	.word	0x0800478f
 80046fc:	08004811 	.word	0x08004811
 8004700:	08004811 	.word	0x08004811
 8004704:	08004811 	.word	0x08004811
 8004708:	080047cf 	.word	0x080047cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68b9      	ldr	r1, [r7, #8]
 8004712:	4618      	mov	r0, r3
 8004714:	f000 f9f0 	bl	8004af8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	699a      	ldr	r2, [r3, #24]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f042 0208 	orr.w	r2, r2, #8
 8004726:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	699a      	ldr	r2, [r3, #24]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 0204 	bic.w	r2, r2, #4
 8004736:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	6999      	ldr	r1, [r3, #24]
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	691a      	ldr	r2, [r3, #16]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	430a      	orrs	r2, r1
 8004748:	619a      	str	r2, [r3, #24]
      break;
 800474a:	e064      	b.n	8004816 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68b9      	ldr	r1, [r7, #8]
 8004752:	4618      	mov	r0, r3
 8004754:	f000 fa40 	bl	8004bd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	699a      	ldr	r2, [r3, #24]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004766:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	699a      	ldr	r2, [r3, #24]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004776:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6999      	ldr	r1, [r3, #24]
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	021a      	lsls	r2, r3, #8
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	430a      	orrs	r2, r1
 800478a:	619a      	str	r2, [r3, #24]
      break;
 800478c:	e043      	b.n	8004816 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68b9      	ldr	r1, [r7, #8]
 8004794:	4618      	mov	r0, r3
 8004796:	f000 fa95 	bl	8004cc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	69da      	ldr	r2, [r3, #28]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f042 0208 	orr.w	r2, r2, #8
 80047a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	69da      	ldr	r2, [r3, #28]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f022 0204 	bic.w	r2, r2, #4
 80047b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	69d9      	ldr	r1, [r3, #28]
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	691a      	ldr	r2, [r3, #16]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	430a      	orrs	r2, r1
 80047ca:	61da      	str	r2, [r3, #28]
      break;
 80047cc:	e023      	b.n	8004816 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68b9      	ldr	r1, [r7, #8]
 80047d4:	4618      	mov	r0, r3
 80047d6:	f000 fae9 	bl	8004dac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	69da      	ldr	r2, [r3, #28]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	69da      	ldr	r2, [r3, #28]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	69d9      	ldr	r1, [r3, #28]
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	021a      	lsls	r2, r3, #8
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	61da      	str	r2, [r3, #28]
      break;
 800480e:	e002      	b.n	8004816 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	75fb      	strb	r3, [r7, #23]
      break;
 8004814:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800481e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004820:	4618      	mov	r0, r3
 8004822:	3718      	adds	r7, #24
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004832:	2300      	movs	r3, #0
 8004834:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800483c:	2b01      	cmp	r3, #1
 800483e:	d101      	bne.n	8004844 <HAL_TIM_ConfigClockSource+0x1c>
 8004840:	2302      	movs	r3, #2
 8004842:	e0b4      	b.n	80049ae <HAL_TIM_ConfigClockSource+0x186>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2202      	movs	r2, #2
 8004850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004862:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800486a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800487c:	d03e      	beq.n	80048fc <HAL_TIM_ConfigClockSource+0xd4>
 800487e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004882:	f200 8087 	bhi.w	8004994 <HAL_TIM_ConfigClockSource+0x16c>
 8004886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800488a:	f000 8086 	beq.w	800499a <HAL_TIM_ConfigClockSource+0x172>
 800488e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004892:	d87f      	bhi.n	8004994 <HAL_TIM_ConfigClockSource+0x16c>
 8004894:	2b70      	cmp	r3, #112	; 0x70
 8004896:	d01a      	beq.n	80048ce <HAL_TIM_ConfigClockSource+0xa6>
 8004898:	2b70      	cmp	r3, #112	; 0x70
 800489a:	d87b      	bhi.n	8004994 <HAL_TIM_ConfigClockSource+0x16c>
 800489c:	2b60      	cmp	r3, #96	; 0x60
 800489e:	d050      	beq.n	8004942 <HAL_TIM_ConfigClockSource+0x11a>
 80048a0:	2b60      	cmp	r3, #96	; 0x60
 80048a2:	d877      	bhi.n	8004994 <HAL_TIM_ConfigClockSource+0x16c>
 80048a4:	2b50      	cmp	r3, #80	; 0x50
 80048a6:	d03c      	beq.n	8004922 <HAL_TIM_ConfigClockSource+0xfa>
 80048a8:	2b50      	cmp	r3, #80	; 0x50
 80048aa:	d873      	bhi.n	8004994 <HAL_TIM_ConfigClockSource+0x16c>
 80048ac:	2b40      	cmp	r3, #64	; 0x40
 80048ae:	d058      	beq.n	8004962 <HAL_TIM_ConfigClockSource+0x13a>
 80048b0:	2b40      	cmp	r3, #64	; 0x40
 80048b2:	d86f      	bhi.n	8004994 <HAL_TIM_ConfigClockSource+0x16c>
 80048b4:	2b30      	cmp	r3, #48	; 0x30
 80048b6:	d064      	beq.n	8004982 <HAL_TIM_ConfigClockSource+0x15a>
 80048b8:	2b30      	cmp	r3, #48	; 0x30
 80048ba:	d86b      	bhi.n	8004994 <HAL_TIM_ConfigClockSource+0x16c>
 80048bc:	2b20      	cmp	r3, #32
 80048be:	d060      	beq.n	8004982 <HAL_TIM_ConfigClockSource+0x15a>
 80048c0:	2b20      	cmp	r3, #32
 80048c2:	d867      	bhi.n	8004994 <HAL_TIM_ConfigClockSource+0x16c>
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d05c      	beq.n	8004982 <HAL_TIM_ConfigClockSource+0x15a>
 80048c8:	2b10      	cmp	r3, #16
 80048ca:	d05a      	beq.n	8004982 <HAL_TIM_ConfigClockSource+0x15a>
 80048cc:	e062      	b.n	8004994 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6818      	ldr	r0, [r3, #0]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	6899      	ldr	r1, [r3, #8]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	685a      	ldr	r2, [r3, #4]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	f000 fb35 	bl	8004f4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80048f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	609a      	str	r2, [r3, #8]
      break;
 80048fa:	e04f      	b.n	800499c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6818      	ldr	r0, [r3, #0]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	6899      	ldr	r1, [r3, #8]
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685a      	ldr	r2, [r3, #4]
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	f000 fb1e 	bl	8004f4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689a      	ldr	r2, [r3, #8]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800491e:	609a      	str	r2, [r3, #8]
      break;
 8004920:	e03c      	b.n	800499c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6818      	ldr	r0, [r3, #0]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	6859      	ldr	r1, [r3, #4]
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	461a      	mov	r2, r3
 8004930:	f000 fa92 	bl	8004e58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2150      	movs	r1, #80	; 0x50
 800493a:	4618      	mov	r0, r3
 800493c:	f000 faeb 	bl	8004f16 <TIM_ITRx_SetConfig>
      break;
 8004940:	e02c      	b.n	800499c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6818      	ldr	r0, [r3, #0]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	6859      	ldr	r1, [r3, #4]
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	461a      	mov	r2, r3
 8004950:	f000 fab1 	bl	8004eb6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2160      	movs	r1, #96	; 0x60
 800495a:	4618      	mov	r0, r3
 800495c:	f000 fadb 	bl	8004f16 <TIM_ITRx_SetConfig>
      break;
 8004960:	e01c      	b.n	800499c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6818      	ldr	r0, [r3, #0]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	6859      	ldr	r1, [r3, #4]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	461a      	mov	r2, r3
 8004970:	f000 fa72 	bl	8004e58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2140      	movs	r1, #64	; 0x40
 800497a:	4618      	mov	r0, r3
 800497c:	f000 facb 	bl	8004f16 <TIM_ITRx_SetConfig>
      break;
 8004980:	e00c      	b.n	800499c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4619      	mov	r1, r3
 800498c:	4610      	mov	r0, r2
 800498e:	f000 fac2 	bl	8004f16 <TIM_ITRx_SetConfig>
      break;
 8004992:	e003      	b.n	800499c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	73fb      	strb	r3, [r7, #15]
      break;
 8004998:	e000      	b.n	800499c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800499a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3710      	adds	r7, #16
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
	...

080049b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a40      	ldr	r2, [pc, #256]	; (8004acc <TIM_Base_SetConfig+0x114>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d013      	beq.n	80049f8 <TIM_Base_SetConfig+0x40>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049d6:	d00f      	beq.n	80049f8 <TIM_Base_SetConfig+0x40>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a3d      	ldr	r2, [pc, #244]	; (8004ad0 <TIM_Base_SetConfig+0x118>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d00b      	beq.n	80049f8 <TIM_Base_SetConfig+0x40>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a3c      	ldr	r2, [pc, #240]	; (8004ad4 <TIM_Base_SetConfig+0x11c>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d007      	beq.n	80049f8 <TIM_Base_SetConfig+0x40>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a3b      	ldr	r2, [pc, #236]	; (8004ad8 <TIM_Base_SetConfig+0x120>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d003      	beq.n	80049f8 <TIM_Base_SetConfig+0x40>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a3a      	ldr	r2, [pc, #232]	; (8004adc <TIM_Base_SetConfig+0x124>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d108      	bne.n	8004a0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a2f      	ldr	r2, [pc, #188]	; (8004acc <TIM_Base_SetConfig+0x114>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d02b      	beq.n	8004a6a <TIM_Base_SetConfig+0xb2>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a18:	d027      	beq.n	8004a6a <TIM_Base_SetConfig+0xb2>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a2c      	ldr	r2, [pc, #176]	; (8004ad0 <TIM_Base_SetConfig+0x118>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d023      	beq.n	8004a6a <TIM_Base_SetConfig+0xb2>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a2b      	ldr	r2, [pc, #172]	; (8004ad4 <TIM_Base_SetConfig+0x11c>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d01f      	beq.n	8004a6a <TIM_Base_SetConfig+0xb2>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a2a      	ldr	r2, [pc, #168]	; (8004ad8 <TIM_Base_SetConfig+0x120>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d01b      	beq.n	8004a6a <TIM_Base_SetConfig+0xb2>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a29      	ldr	r2, [pc, #164]	; (8004adc <TIM_Base_SetConfig+0x124>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d017      	beq.n	8004a6a <TIM_Base_SetConfig+0xb2>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a28      	ldr	r2, [pc, #160]	; (8004ae0 <TIM_Base_SetConfig+0x128>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d013      	beq.n	8004a6a <TIM_Base_SetConfig+0xb2>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a27      	ldr	r2, [pc, #156]	; (8004ae4 <TIM_Base_SetConfig+0x12c>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d00f      	beq.n	8004a6a <TIM_Base_SetConfig+0xb2>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a26      	ldr	r2, [pc, #152]	; (8004ae8 <TIM_Base_SetConfig+0x130>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d00b      	beq.n	8004a6a <TIM_Base_SetConfig+0xb2>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a25      	ldr	r2, [pc, #148]	; (8004aec <TIM_Base_SetConfig+0x134>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d007      	beq.n	8004a6a <TIM_Base_SetConfig+0xb2>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a24      	ldr	r2, [pc, #144]	; (8004af0 <TIM_Base_SetConfig+0x138>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d003      	beq.n	8004a6a <TIM_Base_SetConfig+0xb2>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a23      	ldr	r2, [pc, #140]	; (8004af4 <TIM_Base_SetConfig+0x13c>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d108      	bne.n	8004a7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	689a      	ldr	r2, [r3, #8]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a0a      	ldr	r2, [pc, #40]	; (8004acc <TIM_Base_SetConfig+0x114>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d003      	beq.n	8004ab0 <TIM_Base_SetConfig+0xf8>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a0c      	ldr	r2, [pc, #48]	; (8004adc <TIM_Base_SetConfig+0x124>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d103      	bne.n	8004ab8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	691a      	ldr	r2, [r3, #16]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	615a      	str	r2, [r3, #20]
}
 8004abe:	bf00      	nop
 8004ac0:	3714      	adds	r7, #20
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	40010000 	.word	0x40010000
 8004ad0:	40000400 	.word	0x40000400
 8004ad4:	40000800 	.word	0x40000800
 8004ad8:	40000c00 	.word	0x40000c00
 8004adc:	40010400 	.word	0x40010400
 8004ae0:	40014000 	.word	0x40014000
 8004ae4:	40014400 	.word	0x40014400
 8004ae8:	40014800 	.word	0x40014800
 8004aec:	40001800 	.word	0x40001800
 8004af0:	40001c00 	.word	0x40001c00
 8004af4:	40002000 	.word	0x40002000

08004af8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b087      	sub	sp, #28
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a1b      	ldr	r3, [r3, #32]
 8004b06:	f023 0201 	bic.w	r2, r3, #1
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f023 0303 	bic.w	r3, r3, #3
 8004b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	f023 0302 	bic.w	r3, r3, #2
 8004b40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a20      	ldr	r2, [pc, #128]	; (8004bd0 <TIM_OC1_SetConfig+0xd8>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d003      	beq.n	8004b5c <TIM_OC1_SetConfig+0x64>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a1f      	ldr	r2, [pc, #124]	; (8004bd4 <TIM_OC1_SetConfig+0xdc>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d10c      	bne.n	8004b76 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	f023 0308 	bic.w	r3, r3, #8
 8004b62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	f023 0304 	bic.w	r3, r3, #4
 8004b74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a15      	ldr	r2, [pc, #84]	; (8004bd0 <TIM_OC1_SetConfig+0xd8>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d003      	beq.n	8004b86 <TIM_OC1_SetConfig+0x8e>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a14      	ldr	r2, [pc, #80]	; (8004bd4 <TIM_OC1_SetConfig+0xdc>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d111      	bne.n	8004baa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	685a      	ldr	r2, [r3, #4]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	621a      	str	r2, [r3, #32]
}
 8004bc4:	bf00      	nop
 8004bc6:	371c      	adds	r7, #28
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr
 8004bd0:	40010000 	.word	0x40010000
 8004bd4:	40010400 	.word	0x40010400

08004bd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b087      	sub	sp, #28
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	f023 0210 	bic.w	r2, r3, #16
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a1b      	ldr	r3, [r3, #32]
 8004bf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	021b      	lsls	r3, r3, #8
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	f023 0320 	bic.w	r3, r3, #32
 8004c22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	011b      	lsls	r3, r3, #4
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a22      	ldr	r2, [pc, #136]	; (8004cbc <TIM_OC2_SetConfig+0xe4>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d003      	beq.n	8004c40 <TIM_OC2_SetConfig+0x68>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a21      	ldr	r2, [pc, #132]	; (8004cc0 <TIM_OC2_SetConfig+0xe8>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d10d      	bne.n	8004c5c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	011b      	lsls	r3, r3, #4
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a17      	ldr	r2, [pc, #92]	; (8004cbc <TIM_OC2_SetConfig+0xe4>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d003      	beq.n	8004c6c <TIM_OC2_SetConfig+0x94>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a16      	ldr	r2, [pc, #88]	; (8004cc0 <TIM_OC2_SetConfig+0xe8>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d113      	bne.n	8004c94 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	695b      	ldr	r3, [r3, #20]
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	693a      	ldr	r2, [r7, #16]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	685a      	ldr	r2, [r3, #4]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	621a      	str	r2, [r3, #32]
}
 8004cae:	bf00      	nop
 8004cb0:	371c      	adds	r7, #28
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	40010000 	.word	0x40010000
 8004cc0:	40010400 	.word	0x40010400

08004cc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b087      	sub	sp, #28
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
 8004cde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	69db      	ldr	r3, [r3, #28]
 8004cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f023 0303 	bic.w	r3, r3, #3
 8004cfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	021b      	lsls	r3, r3, #8
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a21      	ldr	r2, [pc, #132]	; (8004da4 <TIM_OC3_SetConfig+0xe0>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d003      	beq.n	8004d2a <TIM_OC3_SetConfig+0x66>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a20      	ldr	r2, [pc, #128]	; (8004da8 <TIM_OC3_SetConfig+0xe4>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d10d      	bne.n	8004d46 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	021b      	lsls	r3, r3, #8
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a16      	ldr	r2, [pc, #88]	; (8004da4 <TIM_OC3_SetConfig+0xe0>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d003      	beq.n	8004d56 <TIM_OC3_SetConfig+0x92>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a15      	ldr	r2, [pc, #84]	; (8004da8 <TIM_OC3_SetConfig+0xe4>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d113      	bne.n	8004d7e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	011b      	lsls	r3, r3, #4
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	011b      	lsls	r3, r3, #4
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	685a      	ldr	r2, [r3, #4]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	697a      	ldr	r2, [r7, #20]
 8004d96:	621a      	str	r2, [r3, #32]
}
 8004d98:	bf00      	nop
 8004d9a:	371c      	adds	r7, #28
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr
 8004da4:	40010000 	.word	0x40010000
 8004da8:	40010400 	.word	0x40010400

08004dac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b087      	sub	sp, #28
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	69db      	ldr	r3, [r3, #28]
 8004dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004de2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	021b      	lsls	r3, r3, #8
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004df6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	031b      	lsls	r3, r3, #12
 8004dfe:	693a      	ldr	r2, [r7, #16]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a12      	ldr	r2, [pc, #72]	; (8004e50 <TIM_OC4_SetConfig+0xa4>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d003      	beq.n	8004e14 <TIM_OC4_SetConfig+0x68>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a11      	ldr	r2, [pc, #68]	; (8004e54 <TIM_OC4_SetConfig+0xa8>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d109      	bne.n	8004e28 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	695b      	ldr	r3, [r3, #20]
 8004e20:	019b      	lsls	r3, r3, #6
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	685a      	ldr	r2, [r3, #4]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	621a      	str	r2, [r3, #32]
}
 8004e42:	bf00      	nop
 8004e44:	371c      	adds	r7, #28
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	40010000 	.word	0x40010000
 8004e54:	40010400 	.word	0x40010400

08004e58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b087      	sub	sp, #28
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6a1b      	ldr	r3, [r3, #32]
 8004e68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	f023 0201 	bic.w	r2, r3, #1
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	011b      	lsls	r3, r3, #4
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	f023 030a 	bic.w	r3, r3, #10
 8004e94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	621a      	str	r2, [r3, #32]
}
 8004eaa:	bf00      	nop
 8004eac:	371c      	adds	r7, #28
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr

08004eb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004eb6:	b480      	push	{r7}
 8004eb8:	b087      	sub	sp, #28
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	60f8      	str	r0, [r7, #12]
 8004ebe:	60b9      	str	r1, [r7, #8]
 8004ec0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	f023 0210 	bic.w	r2, r3, #16
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6a1b      	ldr	r3, [r3, #32]
 8004ed8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ee0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	031b      	lsls	r3, r3, #12
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ef2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	011b      	lsls	r3, r3, #4
 8004ef8:	693a      	ldr	r2, [r7, #16]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	697a      	ldr	r2, [r7, #20]
 8004f02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	621a      	str	r2, [r3, #32]
}
 8004f0a:	bf00      	nop
 8004f0c:	371c      	adds	r7, #28
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr

08004f16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f16:	b480      	push	{r7}
 8004f18:	b085      	sub	sp, #20
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
 8004f1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f2e:	683a      	ldr	r2, [r7, #0]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	f043 0307 	orr.w	r3, r3, #7
 8004f38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	609a      	str	r2, [r3, #8]
}
 8004f40:	bf00      	nop
 8004f42:	3714      	adds	r7, #20
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b087      	sub	sp, #28
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
 8004f58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	021a      	lsls	r2, r3, #8
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	431a      	orrs	r2, r3
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	609a      	str	r2, [r3, #8]
}
 8004f80:	bf00      	nop
 8004f82:	371c      	adds	r7, #28
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b087      	sub	sp, #28
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	f003 031f 	and.w	r3, r3, #31
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6a1a      	ldr	r2, [r3, #32]
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	43db      	mvns	r3, r3
 8004fae:	401a      	ands	r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6a1a      	ldr	r2, [r3, #32]
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	f003 031f 	and.w	r3, r3, #31
 8004fbe:	6879      	ldr	r1, [r7, #4]
 8004fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8004fc4:	431a      	orrs	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	621a      	str	r2, [r3, #32]
}
 8004fca:	bf00      	nop
 8004fcc:	371c      	adds	r7, #28
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
	...

08004fd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d101      	bne.n	8004ff0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fec:	2302      	movs	r3, #2
 8004fee:	e05a      	b.n	80050a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005016:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	4313      	orrs	r3, r2
 8005020:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a21      	ldr	r2, [pc, #132]	; (80050b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d022      	beq.n	800507a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800503c:	d01d      	beq.n	800507a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a1d      	ldr	r2, [pc, #116]	; (80050b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d018      	beq.n	800507a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a1b      	ldr	r2, [pc, #108]	; (80050bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d013      	beq.n	800507a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a1a      	ldr	r2, [pc, #104]	; (80050c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d00e      	beq.n	800507a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a18      	ldr	r2, [pc, #96]	; (80050c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d009      	beq.n	800507a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a17      	ldr	r2, [pc, #92]	; (80050c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d004      	beq.n	800507a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a15      	ldr	r2, [pc, #84]	; (80050cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d10c      	bne.n	8005094 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005080:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	4313      	orrs	r3, r2
 800508a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68ba      	ldr	r2, [r7, #8]
 8005092:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3714      	adds	r7, #20
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	40010000 	.word	0x40010000
 80050b8:	40000400 	.word	0x40000400
 80050bc:	40000800 	.word	0x40000800
 80050c0:	40000c00 	.word	0x40000c00
 80050c4:	40010400 	.word	0x40010400
 80050c8:	40014000 	.word	0x40014000
 80050cc:	40001800 	.word	0x40001800

080050d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050d0:	b084      	sub	sp, #16
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b084      	sub	sp, #16
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
 80050da:	f107 001c 	add.w	r0, r7, #28
 80050de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d122      	bne.n	800512e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80050fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005112:	2b01      	cmp	r3, #1
 8005114:	d105      	bne.n	8005122 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f001 fbee 	bl	8006904 <USB_CoreReset>
 8005128:	4603      	mov	r3, r0
 800512a:	73fb      	strb	r3, [r7, #15]
 800512c:	e01a      	b.n	8005164 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f001 fbe2 	bl	8006904 <USB_CoreReset>
 8005140:	4603      	mov	r3, r0
 8005142:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005144:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005146:	2b00      	cmp	r3, #0
 8005148:	d106      	bne.n	8005158 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	639a      	str	r2, [r3, #56]	; 0x38
 8005156:	e005      	b.n	8005164 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005166:	2b01      	cmp	r3, #1
 8005168:	d10b      	bne.n	8005182 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f043 0206 	orr.w	r2, r3, #6
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	f043 0220 	orr.w	r2, r3, #32
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005182:	7bfb      	ldrb	r3, [r7, #15]
}
 8005184:	4618      	mov	r0, r3
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800518e:	b004      	add	sp, #16
 8005190:	4770      	bx	lr
	...

08005194 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005194:	b480      	push	{r7}
 8005196:	b087      	sub	sp, #28
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	4613      	mov	r3, r2
 80051a0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80051a2:	79fb      	ldrb	r3, [r7, #7]
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d165      	bne.n	8005274 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	4a41      	ldr	r2, [pc, #260]	; (80052b0 <USB_SetTurnaroundTime+0x11c>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d906      	bls.n	80051be <USB_SetTurnaroundTime+0x2a>
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	4a40      	ldr	r2, [pc, #256]	; (80052b4 <USB_SetTurnaroundTime+0x120>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d202      	bcs.n	80051be <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80051b8:	230f      	movs	r3, #15
 80051ba:	617b      	str	r3, [r7, #20]
 80051bc:	e062      	b.n	8005284 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	4a3c      	ldr	r2, [pc, #240]	; (80052b4 <USB_SetTurnaroundTime+0x120>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d306      	bcc.n	80051d4 <USB_SetTurnaroundTime+0x40>
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	4a3b      	ldr	r2, [pc, #236]	; (80052b8 <USB_SetTurnaroundTime+0x124>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d202      	bcs.n	80051d4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80051ce:	230e      	movs	r3, #14
 80051d0:	617b      	str	r3, [r7, #20]
 80051d2:	e057      	b.n	8005284 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	4a38      	ldr	r2, [pc, #224]	; (80052b8 <USB_SetTurnaroundTime+0x124>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d306      	bcc.n	80051ea <USB_SetTurnaroundTime+0x56>
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	4a37      	ldr	r2, [pc, #220]	; (80052bc <USB_SetTurnaroundTime+0x128>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d202      	bcs.n	80051ea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80051e4:	230d      	movs	r3, #13
 80051e6:	617b      	str	r3, [r7, #20]
 80051e8:	e04c      	b.n	8005284 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	4a33      	ldr	r2, [pc, #204]	; (80052bc <USB_SetTurnaroundTime+0x128>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d306      	bcc.n	8005200 <USB_SetTurnaroundTime+0x6c>
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	4a32      	ldr	r2, [pc, #200]	; (80052c0 <USB_SetTurnaroundTime+0x12c>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d802      	bhi.n	8005200 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80051fa:	230c      	movs	r3, #12
 80051fc:	617b      	str	r3, [r7, #20]
 80051fe:	e041      	b.n	8005284 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	4a2f      	ldr	r2, [pc, #188]	; (80052c0 <USB_SetTurnaroundTime+0x12c>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d906      	bls.n	8005216 <USB_SetTurnaroundTime+0x82>
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	4a2e      	ldr	r2, [pc, #184]	; (80052c4 <USB_SetTurnaroundTime+0x130>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d802      	bhi.n	8005216 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005210:	230b      	movs	r3, #11
 8005212:	617b      	str	r3, [r7, #20]
 8005214:	e036      	b.n	8005284 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	4a2a      	ldr	r2, [pc, #168]	; (80052c4 <USB_SetTurnaroundTime+0x130>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d906      	bls.n	800522c <USB_SetTurnaroundTime+0x98>
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	4a29      	ldr	r2, [pc, #164]	; (80052c8 <USB_SetTurnaroundTime+0x134>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d802      	bhi.n	800522c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005226:	230a      	movs	r3, #10
 8005228:	617b      	str	r3, [r7, #20]
 800522a:	e02b      	b.n	8005284 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	4a26      	ldr	r2, [pc, #152]	; (80052c8 <USB_SetTurnaroundTime+0x134>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d906      	bls.n	8005242 <USB_SetTurnaroundTime+0xae>
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	4a25      	ldr	r2, [pc, #148]	; (80052cc <USB_SetTurnaroundTime+0x138>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d202      	bcs.n	8005242 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800523c:	2309      	movs	r3, #9
 800523e:	617b      	str	r3, [r7, #20]
 8005240:	e020      	b.n	8005284 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	4a21      	ldr	r2, [pc, #132]	; (80052cc <USB_SetTurnaroundTime+0x138>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d306      	bcc.n	8005258 <USB_SetTurnaroundTime+0xc4>
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	4a20      	ldr	r2, [pc, #128]	; (80052d0 <USB_SetTurnaroundTime+0x13c>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d802      	bhi.n	8005258 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005252:	2308      	movs	r3, #8
 8005254:	617b      	str	r3, [r7, #20]
 8005256:	e015      	b.n	8005284 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	4a1d      	ldr	r2, [pc, #116]	; (80052d0 <USB_SetTurnaroundTime+0x13c>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d906      	bls.n	800526e <USB_SetTurnaroundTime+0xda>
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	4a1c      	ldr	r2, [pc, #112]	; (80052d4 <USB_SetTurnaroundTime+0x140>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d202      	bcs.n	800526e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005268:	2307      	movs	r3, #7
 800526a:	617b      	str	r3, [r7, #20]
 800526c:	e00a      	b.n	8005284 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800526e:	2306      	movs	r3, #6
 8005270:	617b      	str	r3, [r7, #20]
 8005272:	e007      	b.n	8005284 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005274:	79fb      	ldrb	r3, [r7, #7]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d102      	bne.n	8005280 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800527a:	2309      	movs	r3, #9
 800527c:	617b      	str	r3, [r7, #20]
 800527e:	e001      	b.n	8005284 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005280:	2309      	movs	r3, #9
 8005282:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	68da      	ldr	r2, [r3, #12]
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	029b      	lsls	r3, r3, #10
 8005298:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800529c:	431a      	orrs	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	371c      	adds	r7, #28
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr
 80052b0:	00d8acbf 	.word	0x00d8acbf
 80052b4:	00e4e1c0 	.word	0x00e4e1c0
 80052b8:	00f42400 	.word	0x00f42400
 80052bc:	01067380 	.word	0x01067380
 80052c0:	011a499f 	.word	0x011a499f
 80052c4:	01312cff 	.word	0x01312cff
 80052c8:	014ca43f 	.word	0x014ca43f
 80052cc:	016e3600 	.word	0x016e3600
 80052d0:	01a6ab1f 	.word	0x01a6ab1f
 80052d4:	01e84800 	.word	0x01e84800

080052d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f043 0201 	orr.w	r2, r3, #1
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	370c      	adds	r7, #12
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr

080052fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052fa:	b480      	push	{r7}
 80052fc:	b083      	sub	sp, #12
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	f023 0201 	bic.w	r2, r3, #1
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	460b      	mov	r3, r1
 8005326:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005328:	2300      	movs	r3, #0
 800532a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005338:	78fb      	ldrb	r3, [r7, #3]
 800533a:	2b01      	cmp	r3, #1
 800533c:	d115      	bne.n	800536a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800534a:	2001      	movs	r0, #1
 800534c:	f7fb fe4c 	bl	8000fe8 <HAL_Delay>
      ms++;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	3301      	adds	r3, #1
 8005354:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f001 fa45 	bl	80067e6 <USB_GetMode>
 800535c:	4603      	mov	r3, r0
 800535e:	2b01      	cmp	r3, #1
 8005360:	d01e      	beq.n	80053a0 <USB_SetCurrentMode+0x84>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2b31      	cmp	r3, #49	; 0x31
 8005366:	d9f0      	bls.n	800534a <USB_SetCurrentMode+0x2e>
 8005368:	e01a      	b.n	80053a0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800536a:	78fb      	ldrb	r3, [r7, #3]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d115      	bne.n	800539c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800537c:	2001      	movs	r0, #1
 800537e:	f7fb fe33 	bl	8000fe8 <HAL_Delay>
      ms++;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	3301      	adds	r3, #1
 8005386:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f001 fa2c 	bl	80067e6 <USB_GetMode>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d005      	beq.n	80053a0 <USB_SetCurrentMode+0x84>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2b31      	cmp	r3, #49	; 0x31
 8005398:	d9f0      	bls.n	800537c <USB_SetCurrentMode+0x60>
 800539a:	e001      	b.n	80053a0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e005      	b.n	80053ac <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2b32      	cmp	r3, #50	; 0x32
 80053a4:	d101      	bne.n	80053aa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e000      	b.n	80053ac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053b4:	b084      	sub	sp, #16
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b086      	sub	sp, #24
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
 80053be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80053c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80053c6:	2300      	movs	r3, #0
 80053c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80053ce:	2300      	movs	r3, #0
 80053d0:	613b      	str	r3, [r7, #16]
 80053d2:	e009      	b.n	80053e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	3340      	adds	r3, #64	; 0x40
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	4413      	add	r3, r2
 80053de:	2200      	movs	r2, #0
 80053e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	3301      	adds	r3, #1
 80053e6:	613b      	str	r3, [r7, #16]
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	2b0e      	cmp	r3, #14
 80053ec:	d9f2      	bls.n	80053d4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80053ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d11c      	bne.n	800542e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005402:	f043 0302 	orr.w	r3, r3, #2
 8005406:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005418:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005424:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	639a      	str	r2, [r3, #56]	; 0x38
 800542c:	e00b      	b.n	8005446 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005432:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800544c:	461a      	mov	r2, r3
 800544e:	2300      	movs	r3, #0
 8005450:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005458:	4619      	mov	r1, r3
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005460:	461a      	mov	r2, r3
 8005462:	680b      	ldr	r3, [r1, #0]
 8005464:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005468:	2b01      	cmp	r3, #1
 800546a:	d10c      	bne.n	8005486 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800546c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800546e:	2b00      	cmp	r3, #0
 8005470:	d104      	bne.n	800547c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005472:	2100      	movs	r1, #0
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 f965 	bl	8005744 <USB_SetDevSpeed>
 800547a:	e008      	b.n	800548e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800547c:	2101      	movs	r1, #1
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f960 	bl	8005744 <USB_SetDevSpeed>
 8005484:	e003      	b.n	800548e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005486:	2103      	movs	r1, #3
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 f95b 	bl	8005744 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800548e:	2110      	movs	r1, #16
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 f8f3 	bl	800567c <USB_FlushTxFifo>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d001      	beq.n	80054a0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 f91f 	bl	80056e4 <USB_FlushRxFifo>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d001      	beq.n	80054b0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054b6:	461a      	mov	r2, r3
 80054b8:	2300      	movs	r3, #0
 80054ba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c2:	461a      	mov	r2, r3
 80054c4:	2300      	movs	r3, #0
 80054c6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ce:	461a      	mov	r2, r3
 80054d0:	2300      	movs	r3, #0
 80054d2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054d4:	2300      	movs	r3, #0
 80054d6:	613b      	str	r3, [r7, #16]
 80054d8:	e043      	b.n	8005562 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	015a      	lsls	r2, r3, #5
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	4413      	add	r3, r2
 80054e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054f0:	d118      	bne.n	8005524 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d10a      	bne.n	800550e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	015a      	lsls	r2, r3, #5
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	4413      	add	r3, r2
 8005500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005504:	461a      	mov	r2, r3
 8005506:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800550a:	6013      	str	r3, [r2, #0]
 800550c:	e013      	b.n	8005536 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	015a      	lsls	r2, r3, #5
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	4413      	add	r3, r2
 8005516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800551a:	461a      	mov	r2, r3
 800551c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005520:	6013      	str	r3, [r2, #0]
 8005522:	e008      	b.n	8005536 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	015a      	lsls	r2, r3, #5
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	4413      	add	r3, r2
 800552c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005530:	461a      	mov	r2, r3
 8005532:	2300      	movs	r3, #0
 8005534:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	015a      	lsls	r2, r3, #5
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	4413      	add	r3, r2
 800553e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005542:	461a      	mov	r2, r3
 8005544:	2300      	movs	r3, #0
 8005546:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	015a      	lsls	r2, r3, #5
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	4413      	add	r3, r2
 8005550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005554:	461a      	mov	r2, r3
 8005556:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800555a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	3301      	adds	r3, #1
 8005560:	613b      	str	r3, [r7, #16]
 8005562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005564:	693a      	ldr	r2, [r7, #16]
 8005566:	429a      	cmp	r2, r3
 8005568:	d3b7      	bcc.n	80054da <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800556a:	2300      	movs	r3, #0
 800556c:	613b      	str	r3, [r7, #16]
 800556e:	e043      	b.n	80055f8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	015a      	lsls	r2, r3, #5
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	4413      	add	r3, r2
 8005578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005582:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005586:	d118      	bne.n	80055ba <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10a      	bne.n	80055a4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	015a      	lsls	r2, r3, #5
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	4413      	add	r3, r2
 8005596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800559a:	461a      	mov	r2, r3
 800559c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80055a0:	6013      	str	r3, [r2, #0]
 80055a2:	e013      	b.n	80055cc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	015a      	lsls	r2, r3, #5
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	4413      	add	r3, r2
 80055ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b0:	461a      	mov	r2, r3
 80055b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80055b6:	6013      	str	r3, [r2, #0]
 80055b8:	e008      	b.n	80055cc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	015a      	lsls	r2, r3, #5
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	4413      	add	r3, r2
 80055c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c6:	461a      	mov	r2, r3
 80055c8:	2300      	movs	r3, #0
 80055ca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	015a      	lsls	r2, r3, #5
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	4413      	add	r3, r2
 80055d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d8:	461a      	mov	r2, r3
 80055da:	2300      	movs	r3, #0
 80055dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	015a      	lsls	r2, r3, #5
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	4413      	add	r3, r2
 80055e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ea:	461a      	mov	r2, r3
 80055ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	3301      	adds	r3, #1
 80055f6:	613b      	str	r3, [r7, #16]
 80055f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d3b7      	bcc.n	8005570 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800560e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005612:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005620:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005624:	2b00      	cmp	r3, #0
 8005626:	d105      	bne.n	8005634 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	699b      	ldr	r3, [r3, #24]
 800562c:	f043 0210 	orr.w	r2, r3, #16
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	699a      	ldr	r2, [r3, #24]
 8005638:	4b0f      	ldr	r3, [pc, #60]	; (8005678 <USB_DevInit+0x2c4>)
 800563a:	4313      	orrs	r3, r2
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005642:	2b00      	cmp	r3, #0
 8005644:	d005      	beq.n	8005652 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	f043 0208 	orr.w	r2, r3, #8
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005654:	2b01      	cmp	r3, #1
 8005656:	d107      	bne.n	8005668 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005660:	f043 0304 	orr.w	r3, r3, #4
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005668:	7dfb      	ldrb	r3, [r7, #23]
}
 800566a:	4618      	mov	r0, r3
 800566c:	3718      	adds	r7, #24
 800566e:	46bd      	mov	sp, r7
 8005670:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005674:	b004      	add	sp, #16
 8005676:	4770      	bx	lr
 8005678:	803c3800 	.word	0x803c3800

0800567c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005686:	2300      	movs	r3, #0
 8005688:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	3301      	adds	r3, #1
 800568e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	4a13      	ldr	r2, [pc, #76]	; (80056e0 <USB_FlushTxFifo+0x64>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d901      	bls.n	800569c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	e01b      	b.n	80056d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	daf2      	bge.n	800568a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80056a4:	2300      	movs	r3, #0
 80056a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	019b      	lsls	r3, r3, #6
 80056ac:	f043 0220 	orr.w	r2, r3, #32
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	3301      	adds	r3, #1
 80056b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	4a08      	ldr	r2, [pc, #32]	; (80056e0 <USB_FlushTxFifo+0x64>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d901      	bls.n	80056c6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e006      	b.n	80056d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	f003 0320 	and.w	r3, r3, #32
 80056ce:	2b20      	cmp	r3, #32
 80056d0:	d0f0      	beq.n	80056b4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3714      	adds	r7, #20
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr
 80056e0:	00030d40 	.word	0x00030d40

080056e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056ec:	2300      	movs	r3, #0
 80056ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	3301      	adds	r3, #1
 80056f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	4a11      	ldr	r2, [pc, #68]	; (8005740 <USB_FlushRxFifo+0x5c>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d901      	bls.n	8005702 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e018      	b.n	8005734 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	2b00      	cmp	r3, #0
 8005708:	daf2      	bge.n	80056f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800570a:	2300      	movs	r3, #0
 800570c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2210      	movs	r2, #16
 8005712:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	3301      	adds	r3, #1
 8005718:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	4a08      	ldr	r2, [pc, #32]	; (8005740 <USB_FlushRxFifo+0x5c>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d901      	bls.n	8005726 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e006      	b.n	8005734 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	f003 0310 	and.w	r3, r3, #16
 800572e:	2b10      	cmp	r3, #16
 8005730:	d0f0      	beq.n	8005714 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3714      	adds	r7, #20
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr
 8005740:	00030d40 	.word	0x00030d40

08005744 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	460b      	mov	r3, r1
 800574e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	78fb      	ldrb	r3, [r7, #3]
 800575e:	68f9      	ldr	r1, [r7, #12]
 8005760:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005764:	4313      	orrs	r3, r2
 8005766:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3714      	adds	r7, #20
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr

08005776 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005776:	b480      	push	{r7}
 8005778:	b087      	sub	sp, #28
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f003 0306 	and.w	r3, r3, #6
 800578e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d102      	bne.n	800579c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005796:	2300      	movs	r3, #0
 8005798:	75fb      	strb	r3, [r7, #23]
 800579a:	e00a      	b.n	80057b2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d002      	beq.n	80057a8 <USB_GetDevSpeed+0x32>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2b06      	cmp	r3, #6
 80057a6:	d102      	bne.n	80057ae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80057a8:	2302      	movs	r3, #2
 80057aa:	75fb      	strb	r3, [r7, #23]
 80057ac:	e001      	b.n	80057b2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80057ae:	230f      	movs	r3, #15
 80057b0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80057b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	371c      	adds	r7, #28
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b085      	sub	sp, #20
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	785b      	ldrb	r3, [r3, #1]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d13a      	bne.n	8005852 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e2:	69da      	ldr	r2, [r3, #28]
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	f003 030f 	and.w	r3, r3, #15
 80057ec:	2101      	movs	r1, #1
 80057ee:	fa01 f303 	lsl.w	r3, r1, r3
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	68f9      	ldr	r1, [r7, #12]
 80057f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057fa:	4313      	orrs	r3, r2
 80057fc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	015a      	lsls	r2, r3, #5
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	4413      	add	r3, r2
 8005806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d155      	bne.n	80058c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	4413      	add	r3, r2
 800581c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	791b      	ldrb	r3, [r3, #4]
 800582e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005830:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	059b      	lsls	r3, r3, #22
 8005836:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005838:	4313      	orrs	r3, r2
 800583a:	68ba      	ldr	r2, [r7, #8]
 800583c:	0151      	lsls	r1, r2, #5
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	440a      	add	r2, r1
 8005842:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800584a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800584e:	6013      	str	r3, [r2, #0]
 8005850:	e036      	b.n	80058c0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005858:	69da      	ldr	r2, [r3, #28]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	f003 030f 	and.w	r3, r3, #15
 8005862:	2101      	movs	r1, #1
 8005864:	fa01 f303 	lsl.w	r3, r1, r3
 8005868:	041b      	lsls	r3, r3, #16
 800586a:	68f9      	ldr	r1, [r7, #12]
 800586c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005870:	4313      	orrs	r3, r2
 8005872:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	015a      	lsls	r2, r3, #5
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	4413      	add	r3, r2
 800587c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d11a      	bne.n	80058c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	015a      	lsls	r2, r3, #5
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	4413      	add	r3, r2
 8005892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	791b      	ldrb	r3, [r3, #4]
 80058a4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80058a6:	430b      	orrs	r3, r1
 80058a8:	4313      	orrs	r3, r2
 80058aa:	68ba      	ldr	r2, [r7, #8]
 80058ac:	0151      	lsls	r1, r2, #5
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	440a      	add	r2, r1
 80058b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058be:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3714      	adds	r7, #20
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
	...

080058d0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	785b      	ldrb	r3, [r3, #1]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d161      	bne.n	80059b0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	015a      	lsls	r2, r3, #5
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	4413      	add	r3, r2
 80058f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005902:	d11f      	bne.n	8005944 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	015a      	lsls	r2, r3, #5
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	4413      	add	r3, r2
 800590c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68ba      	ldr	r2, [r7, #8]
 8005914:	0151      	lsls	r1, r2, #5
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	440a      	add	r2, r1
 800591a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800591e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005922:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	015a      	lsls	r2, r3, #5
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	4413      	add	r3, r2
 800592c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	0151      	lsls	r1, r2, #5
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	440a      	add	r2, r1
 800593a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800593e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005942:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800594a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	f003 030f 	and.w	r3, r3, #15
 8005954:	2101      	movs	r1, #1
 8005956:	fa01 f303 	lsl.w	r3, r1, r3
 800595a:	b29b      	uxth	r3, r3
 800595c:	43db      	mvns	r3, r3
 800595e:	68f9      	ldr	r1, [r7, #12]
 8005960:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005964:	4013      	ands	r3, r2
 8005966:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800596e:	69da      	ldr	r2, [r3, #28]
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	f003 030f 	and.w	r3, r3, #15
 8005978:	2101      	movs	r1, #1
 800597a:	fa01 f303 	lsl.w	r3, r1, r3
 800597e:	b29b      	uxth	r3, r3
 8005980:	43db      	mvns	r3, r3
 8005982:	68f9      	ldr	r1, [r7, #12]
 8005984:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005988:	4013      	ands	r3, r2
 800598a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	015a      	lsls	r2, r3, #5
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	4413      	add	r3, r2
 8005994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	0159      	lsls	r1, r3, #5
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	440b      	add	r3, r1
 80059a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a6:	4619      	mov	r1, r3
 80059a8:	4b35      	ldr	r3, [pc, #212]	; (8005a80 <USB_DeactivateEndpoint+0x1b0>)
 80059aa:	4013      	ands	r3, r2
 80059ac:	600b      	str	r3, [r1, #0]
 80059ae:	e060      	b.n	8005a72 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	015a      	lsls	r2, r3, #5
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	4413      	add	r3, r2
 80059b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059c6:	d11f      	bne.n	8005a08 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	015a      	lsls	r2, r3, #5
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	4413      	add	r3, r2
 80059d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68ba      	ldr	r2, [r7, #8]
 80059d8:	0151      	lsls	r1, r2, #5
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	440a      	add	r2, r1
 80059de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80059e6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	015a      	lsls	r2, r3, #5
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	4413      	add	r3, r2
 80059f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	0151      	lsls	r1, r2, #5
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	440a      	add	r2, r1
 80059fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a06:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	f003 030f 	and.w	r3, r3, #15
 8005a18:	2101      	movs	r1, #1
 8005a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a1e:	041b      	lsls	r3, r3, #16
 8005a20:	43db      	mvns	r3, r3
 8005a22:	68f9      	ldr	r1, [r7, #12]
 8005a24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a28:	4013      	ands	r3, r2
 8005a2a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a32:	69da      	ldr	r2, [r3, #28]
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	f003 030f 	and.w	r3, r3, #15
 8005a3c:	2101      	movs	r1, #1
 8005a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a42:	041b      	lsls	r3, r3, #16
 8005a44:	43db      	mvns	r3, r3
 8005a46:	68f9      	ldr	r1, [r7, #12]
 8005a48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	015a      	lsls	r2, r3, #5
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	4413      	add	r3, r2
 8005a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	0159      	lsls	r1, r3, #5
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	440b      	add	r3, r1
 8005a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	4b05      	ldr	r3, [pc, #20]	; (8005a84 <USB_DeactivateEndpoint+0x1b4>)
 8005a6e:	4013      	ands	r3, r2
 8005a70:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3714      	adds	r7, #20
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr
 8005a80:	ec337800 	.word	0xec337800
 8005a84:	eff37800 	.word	0xeff37800

08005a88 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b08a      	sub	sp, #40	; 0x28
 8005a8c:	af02      	add	r7, sp, #8
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	4613      	mov	r3, r2
 8005a94:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	785b      	ldrb	r3, [r3, #1]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	f040 815c 	bne.w	8005d62 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d132      	bne.n	8005b18 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	015a      	lsls	r2, r3, #5
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	4413      	add	r3, r2
 8005aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	69ba      	ldr	r2, [r7, #24]
 8005ac2:	0151      	lsls	r1, r2, #5
 8005ac4:	69fa      	ldr	r2, [r7, #28]
 8005ac6:	440a      	add	r2, r1
 8005ac8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005acc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ad0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ad4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	015a      	lsls	r2, r3, #5
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	4413      	add	r3, r2
 8005ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	69ba      	ldr	r2, [r7, #24]
 8005ae6:	0151      	lsls	r1, r2, #5
 8005ae8:	69fa      	ldr	r2, [r7, #28]
 8005aea:	440a      	add	r2, r1
 8005aec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005af0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005af4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	015a      	lsls	r2, r3, #5
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	4413      	add	r3, r2
 8005afe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	69ba      	ldr	r2, [r7, #24]
 8005b06:	0151      	lsls	r1, r2, #5
 8005b08:	69fa      	ldr	r2, [r7, #28]
 8005b0a:	440a      	add	r2, r1
 8005b0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b10:	0cdb      	lsrs	r3, r3, #19
 8005b12:	04db      	lsls	r3, r3, #19
 8005b14:	6113      	str	r3, [r2, #16]
 8005b16:	e074      	b.n	8005c02 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	69ba      	ldr	r2, [r7, #24]
 8005b28:	0151      	lsls	r1, r2, #5
 8005b2a:	69fa      	ldr	r2, [r7, #28]
 8005b2c:	440a      	add	r2, r1
 8005b2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b32:	0cdb      	lsrs	r3, r3, #19
 8005b34:	04db      	lsls	r3, r3, #19
 8005b36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	015a      	lsls	r2, r3, #5
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	4413      	add	r3, r2
 8005b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	69ba      	ldr	r2, [r7, #24]
 8005b48:	0151      	lsls	r1, r2, #5
 8005b4a:	69fa      	ldr	r2, [r7, #28]
 8005b4c:	440a      	add	r2, r1
 8005b4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b52:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b56:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005b5c:	69bb      	ldr	r3, [r7, #24]
 8005b5e:	015a      	lsls	r2, r3, #5
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	4413      	add	r3, r2
 8005b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b68:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	6999      	ldr	r1, [r3, #24]
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	440b      	add	r3, r1
 8005b74:	1e59      	subs	r1, r3, #1
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b7e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005b80:	4b9d      	ldr	r3, [pc, #628]	; (8005df8 <USB_EPStartXfer+0x370>)
 8005b82:	400b      	ands	r3, r1
 8005b84:	69b9      	ldr	r1, [r7, #24]
 8005b86:	0148      	lsls	r0, r1, #5
 8005b88:	69f9      	ldr	r1, [r7, #28]
 8005b8a:	4401      	add	r1, r0
 8005b8c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005b90:	4313      	orrs	r3, r2
 8005b92:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	015a      	lsls	r2, r3, #5
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba0:	691a      	ldr	r2, [r3, #16]
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005baa:	69b9      	ldr	r1, [r7, #24]
 8005bac:	0148      	lsls	r0, r1, #5
 8005bae:	69f9      	ldr	r1, [r7, #28]
 8005bb0:	4401      	add	r1, r0
 8005bb2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	791b      	ldrb	r3, [r3, #4]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d11f      	bne.n	8005c02 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	015a      	lsls	r2, r3, #5
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	4413      	add	r3, r2
 8005bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	0151      	lsls	r1, r2, #5
 8005bd4:	69fa      	ldr	r2, [r7, #28]
 8005bd6:	440a      	add	r2, r1
 8005bd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bdc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005be0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	015a      	lsls	r2, r3, #5
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	4413      	add	r3, r2
 8005bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	69ba      	ldr	r2, [r7, #24]
 8005bf2:	0151      	lsls	r1, r2, #5
 8005bf4:	69fa      	ldr	r2, [r7, #28]
 8005bf6:	440a      	add	r2, r1
 8005bf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bfc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c00:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005c02:	79fb      	ldrb	r3, [r7, #7]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d14b      	bne.n	8005ca0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d009      	beq.n	8005c24 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	791b      	ldrb	r3, [r3, #4]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d128      	bne.n	8005c7e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d110      	bne.n	8005c5e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	015a      	lsls	r2, r3, #5
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	4413      	add	r3, r2
 8005c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	69ba      	ldr	r2, [r7, #24]
 8005c4c:	0151      	lsls	r1, r2, #5
 8005c4e:	69fa      	ldr	r2, [r7, #28]
 8005c50:	440a      	add	r2, r1
 8005c52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c5a:	6013      	str	r3, [r2, #0]
 8005c5c:	e00f      	b.n	8005c7e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	015a      	lsls	r2, r3, #5
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	4413      	add	r3, r2
 8005c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	69ba      	ldr	r2, [r7, #24]
 8005c6e:	0151      	lsls	r1, r2, #5
 8005c70:	69fa      	ldr	r2, [r7, #28]
 8005c72:	440a      	add	r2, r1
 8005c74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c7c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	015a      	lsls	r2, r3, #5
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	4413      	add	r3, r2
 8005c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	69ba      	ldr	r2, [r7, #24]
 8005c8e:	0151      	lsls	r1, r2, #5
 8005c90:	69fa      	ldr	r2, [r7, #28]
 8005c92:	440a      	add	r2, r1
 8005c94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c98:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c9c:	6013      	str	r3, [r2, #0]
 8005c9e:	e133      	b.n	8005f08 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	015a      	lsls	r2, r3, #5
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	69ba      	ldr	r2, [r7, #24]
 8005cb0:	0151      	lsls	r1, r2, #5
 8005cb2:	69fa      	ldr	r2, [r7, #28]
 8005cb4:	440a      	add	r2, r1
 8005cb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005cbe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	791b      	ldrb	r3, [r3, #4]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d015      	beq.n	8005cf4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	699b      	ldr	r3, [r3, #24]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f000 811b 	beq.w	8005f08 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	f003 030f 	and.w	r3, r3, #15
 8005ce2:	2101      	movs	r1, #1
 8005ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ce8:	69f9      	ldr	r1, [r7, #28]
 8005cea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	634b      	str	r3, [r1, #52]	; 0x34
 8005cf2:	e109      	b.n	8005f08 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d110      	bne.n	8005d26 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	015a      	lsls	r2, r3, #5
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	69ba      	ldr	r2, [r7, #24]
 8005d14:	0151      	lsls	r1, r2, #5
 8005d16:	69fa      	ldr	r2, [r7, #28]
 8005d18:	440a      	add	r2, r1
 8005d1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d1e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d22:	6013      	str	r3, [r2, #0]
 8005d24:	e00f      	b.n	8005d46 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	015a      	lsls	r2, r3, #5
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	69ba      	ldr	r2, [r7, #24]
 8005d36:	0151      	lsls	r1, r2, #5
 8005d38:	69fa      	ldr	r2, [r7, #28]
 8005d3a:	440a      	add	r2, r1
 8005d3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d44:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	6919      	ldr	r1, [r3, #16]
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	781a      	ldrb	r2, [r3, #0]
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	b298      	uxth	r0, r3
 8005d54:	79fb      	ldrb	r3, [r7, #7]
 8005d56:	9300      	str	r3, [sp, #0]
 8005d58:	4603      	mov	r3, r0
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f000 fade 	bl	800631c <USB_WritePacket>
 8005d60:	e0d2      	b.n	8005f08 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	015a      	lsls	r2, r3, #5
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	4413      	add	r3, r2
 8005d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	69ba      	ldr	r2, [r7, #24]
 8005d72:	0151      	lsls	r1, r2, #5
 8005d74:	69fa      	ldr	r2, [r7, #28]
 8005d76:	440a      	add	r2, r1
 8005d78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d7c:	0cdb      	lsrs	r3, r3, #19
 8005d7e:	04db      	lsls	r3, r3, #19
 8005d80:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	015a      	lsls	r2, r3, #5
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	4413      	add	r3, r2
 8005d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	69ba      	ldr	r2, [r7, #24]
 8005d92:	0151      	lsls	r1, r2, #5
 8005d94:	69fa      	ldr	r2, [r7, #28]
 8005d96:	440a      	add	r2, r1
 8005d98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d9c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005da0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005da4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d126      	bne.n	8005dfc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	015a      	lsls	r2, r3, #5
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	4413      	add	r3, r2
 8005db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dba:	691a      	ldr	r2, [r3, #16]
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dc4:	69b9      	ldr	r1, [r7, #24]
 8005dc6:	0148      	lsls	r0, r1, #5
 8005dc8:	69f9      	ldr	r1, [r7, #28]
 8005dca:	4401      	add	r1, r0
 8005dcc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	015a      	lsls	r2, r3, #5
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	4413      	add	r3, r2
 8005ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	69ba      	ldr	r2, [r7, #24]
 8005de4:	0151      	lsls	r1, r2, #5
 8005de6:	69fa      	ldr	r2, [r7, #28]
 8005de8:	440a      	add	r2, r1
 8005dea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005df2:	6113      	str	r3, [r2, #16]
 8005df4:	e03a      	b.n	8005e6c <USB_EPStartXfer+0x3e4>
 8005df6:	bf00      	nop
 8005df8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	699a      	ldr	r2, [r3, #24]
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	4413      	add	r3, r2
 8005e06:	1e5a      	subs	r2, r3, #1
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e10:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	8afa      	ldrh	r2, [r7, #22]
 8005e18:	fb03 f202 	mul.w	r2, r3, r2
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	015a      	lsls	r2, r3, #5
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	4413      	add	r3, r2
 8005e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e2c:	691a      	ldr	r2, [r3, #16]
 8005e2e:	8afb      	ldrh	r3, [r7, #22]
 8005e30:	04d9      	lsls	r1, r3, #19
 8005e32:	4b38      	ldr	r3, [pc, #224]	; (8005f14 <USB_EPStartXfer+0x48c>)
 8005e34:	400b      	ands	r3, r1
 8005e36:	69b9      	ldr	r1, [r7, #24]
 8005e38:	0148      	lsls	r0, r1, #5
 8005e3a:	69f9      	ldr	r1, [r7, #28]
 8005e3c:	4401      	add	r1, r0
 8005e3e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e42:	4313      	orrs	r3, r2
 8005e44:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	015a      	lsls	r2, r3, #5
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e52:	691a      	ldr	r2, [r3, #16]
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	69db      	ldr	r3, [r3, #28]
 8005e58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e5c:	69b9      	ldr	r1, [r7, #24]
 8005e5e:	0148      	lsls	r0, r1, #5
 8005e60:	69f9      	ldr	r1, [r7, #28]
 8005e62:	4401      	add	r1, r0
 8005e64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005e6c:	79fb      	ldrb	r3, [r7, #7]
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d10d      	bne.n	8005e8e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d009      	beq.n	8005e8e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	6919      	ldr	r1, [r3, #16]
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	015a      	lsls	r2, r3, #5
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	4413      	add	r3, r2
 8005e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e8a:	460a      	mov	r2, r1
 8005e8c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	791b      	ldrb	r3, [r3, #4]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d128      	bne.n	8005ee8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d110      	bne.n	8005ec8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	015a      	lsls	r2, r3, #5
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	4413      	add	r3, r2
 8005eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	69ba      	ldr	r2, [r7, #24]
 8005eb6:	0151      	lsls	r1, r2, #5
 8005eb8:	69fa      	ldr	r2, [r7, #28]
 8005eba:	440a      	add	r2, r1
 8005ebc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ec0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ec4:	6013      	str	r3, [r2, #0]
 8005ec6:	e00f      	b.n	8005ee8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	015a      	lsls	r2, r3, #5
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	4413      	add	r3, r2
 8005ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	69ba      	ldr	r2, [r7, #24]
 8005ed8:	0151      	lsls	r1, r2, #5
 8005eda:	69fa      	ldr	r2, [r7, #28]
 8005edc:	440a      	add	r2, r1
 8005ede:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ee6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	015a      	lsls	r2, r3, #5
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	4413      	add	r3, r2
 8005ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	69ba      	ldr	r2, [r7, #24]
 8005ef8:	0151      	lsls	r1, r2, #5
 8005efa:	69fa      	ldr	r2, [r7, #28]
 8005efc:	440a      	add	r2, r1
 8005efe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f02:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3720      	adds	r7, #32
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	1ff80000 	.word	0x1ff80000

08005f18 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b087      	sub	sp, #28
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	4613      	mov	r3, r2
 8005f24:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	785b      	ldrb	r3, [r3, #1]
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	f040 80ce 	bne.w	80060d6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d132      	bne.n	8005fa8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	015a      	lsls	r2, r3, #5
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	4413      	add	r3, r2
 8005f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	693a      	ldr	r2, [r7, #16]
 8005f52:	0151      	lsls	r1, r2, #5
 8005f54:	697a      	ldr	r2, [r7, #20]
 8005f56:	440a      	add	r2, r1
 8005f58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f5c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f60:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	015a      	lsls	r2, r3, #5
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	0151      	lsls	r1, r2, #5
 8005f78:	697a      	ldr	r2, [r7, #20]
 8005f7a:	440a      	add	r2, r1
 8005f7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	015a      	lsls	r2, r3, #5
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	0151      	lsls	r1, r2, #5
 8005f98:	697a      	ldr	r2, [r7, #20]
 8005f9a:	440a      	add	r2, r1
 8005f9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fa0:	0cdb      	lsrs	r3, r3, #19
 8005fa2:	04db      	lsls	r3, r3, #19
 8005fa4:	6113      	str	r3, [r2, #16]
 8005fa6:	e04e      	b.n	8006046 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	015a      	lsls	r2, r3, #5
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	4413      	add	r3, r2
 8005fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	0151      	lsls	r1, r2, #5
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	440a      	add	r2, r1
 8005fbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fc2:	0cdb      	lsrs	r3, r3, #19
 8005fc4:	04db      	lsls	r3, r3, #19
 8005fc6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	015a      	lsls	r2, r3, #5
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	4413      	add	r3, r2
 8005fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	0151      	lsls	r1, r2, #5
 8005fda:	697a      	ldr	r2, [r7, #20]
 8005fdc:	440a      	add	r2, r1
 8005fde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fe2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005fe6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005fea:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	699a      	ldr	r2, [r3, #24]
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d903      	bls.n	8006000 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	68da      	ldr	r2, [r3, #12]
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	015a      	lsls	r2, r3, #5
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	4413      	add	r3, r2
 8006008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	0151      	lsls	r1, r2, #5
 8006012:	697a      	ldr	r2, [r7, #20]
 8006014:	440a      	add	r2, r1
 8006016:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800601a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800601e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	015a      	lsls	r2, r3, #5
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	4413      	add	r3, r2
 8006028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800602c:	691a      	ldr	r2, [r3, #16]
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006036:	6939      	ldr	r1, [r7, #16]
 8006038:	0148      	lsls	r0, r1, #5
 800603a:	6979      	ldr	r1, [r7, #20]
 800603c:	4401      	add	r1, r0
 800603e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006042:	4313      	orrs	r3, r2
 8006044:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006046:	79fb      	ldrb	r3, [r7, #7]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d11e      	bne.n	800608a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	695b      	ldr	r3, [r3, #20]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d009      	beq.n	8006068 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	4413      	add	r3, r2
 800605c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006060:	461a      	mov	r2, r3
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	015a      	lsls	r2, r3, #5
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	4413      	add	r3, r2
 8006070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	693a      	ldr	r2, [r7, #16]
 8006078:	0151      	lsls	r1, r2, #5
 800607a:	697a      	ldr	r2, [r7, #20]
 800607c:	440a      	add	r2, r1
 800607e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006082:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006086:	6013      	str	r3, [r2, #0]
 8006088:	e097      	b.n	80061ba <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	015a      	lsls	r2, r3, #5
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	4413      	add	r3, r2
 8006092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	693a      	ldr	r2, [r7, #16]
 800609a:	0151      	lsls	r1, r2, #5
 800609c:	697a      	ldr	r2, [r7, #20]
 800609e:	440a      	add	r2, r1
 80060a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060a8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	f000 8083 	beq.w	80061ba <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	f003 030f 	and.w	r3, r3, #15
 80060c4:	2101      	movs	r1, #1
 80060c6:	fa01 f303 	lsl.w	r3, r1, r3
 80060ca:	6979      	ldr	r1, [r7, #20]
 80060cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060d0:	4313      	orrs	r3, r2
 80060d2:	634b      	str	r3, [r1, #52]	; 0x34
 80060d4:	e071      	b.n	80061ba <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	015a      	lsls	r2, r3, #5
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	4413      	add	r3, r2
 80060de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	0151      	lsls	r1, r2, #5
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	440a      	add	r2, r1
 80060ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060f0:	0cdb      	lsrs	r3, r3, #19
 80060f2:	04db      	lsls	r3, r3, #19
 80060f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	015a      	lsls	r2, r3, #5
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	4413      	add	r3, r2
 80060fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	693a      	ldr	r2, [r7, #16]
 8006106:	0151      	lsls	r1, r2, #5
 8006108:	697a      	ldr	r2, [r7, #20]
 800610a:	440a      	add	r2, r1
 800610c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006110:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006114:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006118:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d003      	beq.n	800612a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	68da      	ldr	r2, [r3, #12]
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	68da      	ldr	r2, [r3, #12]
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	015a      	lsls	r2, r3, #5
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	4413      	add	r3, r2
 800613a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	693a      	ldr	r2, [r7, #16]
 8006142:	0151      	lsls	r1, r2, #5
 8006144:	697a      	ldr	r2, [r7, #20]
 8006146:	440a      	add	r2, r1
 8006148:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800614c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006150:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	015a      	lsls	r2, r3, #5
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	4413      	add	r3, r2
 800615a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800615e:	691a      	ldr	r2, [r3, #16]
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	69db      	ldr	r3, [r3, #28]
 8006164:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006168:	6939      	ldr	r1, [r7, #16]
 800616a:	0148      	lsls	r0, r1, #5
 800616c:	6979      	ldr	r1, [r7, #20]
 800616e:	4401      	add	r1, r0
 8006170:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006174:	4313      	orrs	r3, r2
 8006176:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006178:	79fb      	ldrb	r3, [r7, #7]
 800617a:	2b01      	cmp	r3, #1
 800617c:	d10d      	bne.n	800619a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d009      	beq.n	800619a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	6919      	ldr	r1, [r3, #16]
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	015a      	lsls	r2, r3, #5
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	4413      	add	r3, r2
 8006192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006196:	460a      	mov	r2, r1
 8006198:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	015a      	lsls	r2, r3, #5
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	4413      	add	r3, r2
 80061a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	693a      	ldr	r2, [r7, #16]
 80061aa:	0151      	lsls	r1, r2, #5
 80061ac:	697a      	ldr	r2, [r7, #20]
 80061ae:	440a      	add	r2, r1
 80061b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80061b8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	371c      	adds	r7, #28
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b087      	sub	sp, #28
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80061d2:	2300      	movs	r3, #0
 80061d4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80061d6:	2300      	movs	r3, #0
 80061d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	785b      	ldrb	r3, [r3, #1]
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d14a      	bne.n	800627c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	015a      	lsls	r2, r3, #5
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	4413      	add	r3, r2
 80061f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061fe:	f040 8086 	bne.w	800630e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	015a      	lsls	r2, r3, #5
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	4413      	add	r3, r2
 800620c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	683a      	ldr	r2, [r7, #0]
 8006214:	7812      	ldrb	r2, [r2, #0]
 8006216:	0151      	lsls	r1, r2, #5
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	440a      	add	r2, r1
 800621c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006220:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006224:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	015a      	lsls	r2, r3, #5
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	4413      	add	r3, r2
 8006230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	683a      	ldr	r2, [r7, #0]
 8006238:	7812      	ldrb	r2, [r2, #0]
 800623a:	0151      	lsls	r1, r2, #5
 800623c:	693a      	ldr	r2, [r7, #16]
 800623e:	440a      	add	r2, r1
 8006240:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006244:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006248:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	3301      	adds	r3, #1
 800624e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f242 7210 	movw	r2, #10000	; 0x2710
 8006256:	4293      	cmp	r3, r2
 8006258:	d902      	bls.n	8006260 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	75fb      	strb	r3, [r7, #23]
          break;
 800625e:	e056      	b.n	800630e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	015a      	lsls	r2, r3, #5
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	4413      	add	r3, r2
 800626a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006274:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006278:	d0e7      	beq.n	800624a <USB_EPStopXfer+0x82>
 800627a:	e048      	b.n	800630e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	015a      	lsls	r2, r3, #5
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	4413      	add	r3, r2
 8006286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006290:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006294:	d13b      	bne.n	800630e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	015a      	lsls	r2, r3, #5
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	4413      	add	r3, r2
 80062a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	683a      	ldr	r2, [r7, #0]
 80062a8:	7812      	ldrb	r2, [r2, #0]
 80062aa:	0151      	lsls	r1, r2, #5
 80062ac:	693a      	ldr	r2, [r7, #16]
 80062ae:	440a      	add	r2, r1
 80062b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80062b8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	015a      	lsls	r2, r3, #5
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	4413      	add	r3, r2
 80062c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	683a      	ldr	r2, [r7, #0]
 80062cc:	7812      	ldrb	r2, [r2, #0]
 80062ce:	0151      	lsls	r1, r2, #5
 80062d0:	693a      	ldr	r2, [r7, #16]
 80062d2:	440a      	add	r2, r1
 80062d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	3301      	adds	r3, #1
 80062e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f242 7210 	movw	r2, #10000	; 0x2710
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d902      	bls.n	80062f4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	75fb      	strb	r3, [r7, #23]
          break;
 80062f2:	e00c      	b.n	800630e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	015a      	lsls	r2, r3, #5
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	4413      	add	r3, r2
 80062fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006308:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800630c:	d0e7      	beq.n	80062de <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800630e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006310:	4618      	mov	r0, r3
 8006312:	371c      	adds	r7, #28
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800631c:	b480      	push	{r7}
 800631e:	b089      	sub	sp, #36	; 0x24
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	4611      	mov	r1, r2
 8006328:	461a      	mov	r2, r3
 800632a:	460b      	mov	r3, r1
 800632c:	71fb      	strb	r3, [r7, #7]
 800632e:	4613      	mov	r3, r2
 8006330:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800633a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800633e:	2b00      	cmp	r3, #0
 8006340:	d123      	bne.n	800638a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006342:	88bb      	ldrh	r3, [r7, #4]
 8006344:	3303      	adds	r3, #3
 8006346:	089b      	lsrs	r3, r3, #2
 8006348:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800634a:	2300      	movs	r3, #0
 800634c:	61bb      	str	r3, [r7, #24]
 800634e:	e018      	b.n	8006382 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006350:	79fb      	ldrb	r3, [r7, #7]
 8006352:	031a      	lsls	r2, r3, #12
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	4413      	add	r3, r2
 8006358:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800635c:	461a      	mov	r2, r3
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	3301      	adds	r3, #1
 8006368:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	3301      	adds	r3, #1
 800636e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	3301      	adds	r3, #1
 8006374:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	3301      	adds	r3, #1
 800637a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	3301      	adds	r3, #1
 8006380:	61bb      	str	r3, [r7, #24]
 8006382:	69ba      	ldr	r2, [r7, #24]
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	429a      	cmp	r2, r3
 8006388:	d3e2      	bcc.n	8006350 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	3724      	adds	r7, #36	; 0x24
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006398:	b480      	push	{r7}
 800639a:	b08b      	sub	sp, #44	; 0x2c
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	4613      	mov	r3, r2
 80063a4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80063ae:	88fb      	ldrh	r3, [r7, #6]
 80063b0:	089b      	lsrs	r3, r3, #2
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80063b6:	88fb      	ldrh	r3, [r7, #6]
 80063b8:	f003 0303 	and.w	r3, r3, #3
 80063bc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80063be:	2300      	movs	r3, #0
 80063c0:	623b      	str	r3, [r7, #32]
 80063c2:	e014      	b.n	80063ee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ce:	601a      	str	r2, [r3, #0]
    pDest++;
 80063d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d2:	3301      	adds	r3, #1
 80063d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80063d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d8:	3301      	adds	r3, #1
 80063da:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80063dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063de:	3301      	adds	r3, #1
 80063e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80063e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e4:	3301      	adds	r3, #1
 80063e6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80063e8:	6a3b      	ldr	r3, [r7, #32]
 80063ea:	3301      	adds	r3, #1
 80063ec:	623b      	str	r3, [r7, #32]
 80063ee:	6a3a      	ldr	r2, [r7, #32]
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d3e6      	bcc.n	80063c4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80063f6:	8bfb      	ldrh	r3, [r7, #30]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d01e      	beq.n	800643a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80063fc:	2300      	movs	r3, #0
 80063fe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006406:	461a      	mov	r2, r3
 8006408:	f107 0310 	add.w	r3, r7, #16
 800640c:	6812      	ldr	r2, [r2, #0]
 800640e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006410:	693a      	ldr	r2, [r7, #16]
 8006412:	6a3b      	ldr	r3, [r7, #32]
 8006414:	b2db      	uxtb	r3, r3
 8006416:	00db      	lsls	r3, r3, #3
 8006418:	fa22 f303 	lsr.w	r3, r2, r3
 800641c:	b2da      	uxtb	r2, r3
 800641e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006420:	701a      	strb	r2, [r3, #0]
      i++;
 8006422:	6a3b      	ldr	r3, [r7, #32]
 8006424:	3301      	adds	r3, #1
 8006426:	623b      	str	r3, [r7, #32]
      pDest++;
 8006428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642a:	3301      	adds	r3, #1
 800642c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800642e:	8bfb      	ldrh	r3, [r7, #30]
 8006430:	3b01      	subs	r3, #1
 8006432:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006434:	8bfb      	ldrh	r3, [r7, #30]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d1ea      	bne.n	8006410 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800643a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800643c:	4618      	mov	r0, r3
 800643e:	372c      	adds	r7, #44	; 0x2c
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	785b      	ldrb	r3, [r3, #1]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d12c      	bne.n	80064be <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	015a      	lsls	r2, r3, #5
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	4413      	add	r3, r2
 800646c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2b00      	cmp	r3, #0
 8006474:	db12      	blt.n	800649c <USB_EPSetStall+0x54>
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00f      	beq.n	800649c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	015a      	lsls	r2, r3, #5
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	4413      	add	r3, r2
 8006484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68ba      	ldr	r2, [r7, #8]
 800648c:	0151      	lsls	r1, r2, #5
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	440a      	add	r2, r1
 8006492:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006496:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800649a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	015a      	lsls	r2, r3, #5
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	4413      	add	r3, r2
 80064a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68ba      	ldr	r2, [r7, #8]
 80064ac:	0151      	lsls	r1, r2, #5
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	440a      	add	r2, r1
 80064b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80064ba:	6013      	str	r3, [r2, #0]
 80064bc:	e02b      	b.n	8006516 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	015a      	lsls	r2, r3, #5
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	4413      	add	r3, r2
 80064c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	db12      	blt.n	80064f6 <USB_EPSetStall+0xae>
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00f      	beq.n	80064f6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	015a      	lsls	r2, r3, #5
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	4413      	add	r3, r2
 80064de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68ba      	ldr	r2, [r7, #8]
 80064e6:	0151      	lsls	r1, r2, #5
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	440a      	add	r2, r1
 80064ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80064f4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	015a      	lsls	r2, r3, #5
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	4413      	add	r3, r2
 80064fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68ba      	ldr	r2, [r7, #8]
 8006506:	0151      	lsls	r1, r2, #5
 8006508:	68fa      	ldr	r2, [r7, #12]
 800650a:	440a      	add	r2, r1
 800650c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006510:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006514:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	3714      	adds	r7, #20
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006524:	b480      	push	{r7}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	785b      	ldrb	r3, [r3, #1]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d128      	bne.n	8006592 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	015a      	lsls	r2, r3, #5
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	4413      	add	r3, r2
 8006548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68ba      	ldr	r2, [r7, #8]
 8006550:	0151      	lsls	r1, r2, #5
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	440a      	add	r2, r1
 8006556:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800655a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800655e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	791b      	ldrb	r3, [r3, #4]
 8006564:	2b03      	cmp	r3, #3
 8006566:	d003      	beq.n	8006570 <USB_EPClearStall+0x4c>
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	791b      	ldrb	r3, [r3, #4]
 800656c:	2b02      	cmp	r3, #2
 800656e:	d138      	bne.n	80065e2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	015a      	lsls	r2, r3, #5
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	4413      	add	r3, r2
 8006578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68ba      	ldr	r2, [r7, #8]
 8006580:	0151      	lsls	r1, r2, #5
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	440a      	add	r2, r1
 8006586:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800658a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800658e:	6013      	str	r3, [r2, #0]
 8006590:	e027      	b.n	80065e2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	015a      	lsls	r2, r3, #5
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	4413      	add	r3, r2
 800659a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68ba      	ldr	r2, [r7, #8]
 80065a2:	0151      	lsls	r1, r2, #5
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	440a      	add	r2, r1
 80065a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80065b0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	791b      	ldrb	r3, [r3, #4]
 80065b6:	2b03      	cmp	r3, #3
 80065b8:	d003      	beq.n	80065c2 <USB_EPClearStall+0x9e>
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	791b      	ldrb	r3, [r3, #4]
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d10f      	bne.n	80065e2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	015a      	lsls	r2, r3, #5
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	4413      	add	r3, r2
 80065ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68ba      	ldr	r2, [r7, #8]
 80065d2:	0151      	lsls	r1, r2, #5
 80065d4:	68fa      	ldr	r2, [r7, #12]
 80065d6:	440a      	add	r2, r1
 80065d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065e0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3714      	adds	r7, #20
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	460b      	mov	r3, r1
 80065fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800660e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006612:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	78fb      	ldrb	r3, [r7, #3]
 800661e:	011b      	lsls	r3, r3, #4
 8006620:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006624:	68f9      	ldr	r1, [r7, #12]
 8006626:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800662a:	4313      	orrs	r3, r2
 800662c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	3714      	adds	r7, #20
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800663c:	b480      	push	{r7}
 800663e:	b085      	sub	sp, #20
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68fa      	ldr	r2, [r7, #12]
 8006652:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006656:	f023 0303 	bic.w	r3, r3, #3
 800665a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800666a:	f023 0302 	bic.w	r3, r3, #2
 800666e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	3714      	adds	r7, #20
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr

0800667e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800667e:	b480      	push	{r7}
 8006680:	b085      	sub	sp, #20
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006698:	f023 0303 	bic.w	r3, r3, #3
 800669c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066ac:	f043 0302 	orr.w	r3, r3, #2
 80066b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80066b2:	2300      	movs	r3, #0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3714      	adds	r7, #20
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	695b      	ldr	r3, [r3, #20]
 80066cc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	4013      	ands	r3, r2
 80066d6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80066d8:	68fb      	ldr	r3, [r7, #12]
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3714      	adds	r7, #20
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr

080066e6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80066e6:	b480      	push	{r7}
 80066e8:	b085      	sub	sp, #20
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006702:	69db      	ldr	r3, [r3, #28]
 8006704:	68ba      	ldr	r2, [r7, #8]
 8006706:	4013      	ands	r3, r2
 8006708:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	0c1b      	lsrs	r3, r3, #16
}
 800670e:	4618      	mov	r0, r3
 8006710:	3714      	adds	r7, #20
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr

0800671a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800671a:	b480      	push	{r7}
 800671c:	b085      	sub	sp, #20
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800672c:	699b      	ldr	r3, [r3, #24]
 800672e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006736:	69db      	ldr	r3, [r3, #28]
 8006738:	68ba      	ldr	r2, [r7, #8]
 800673a:	4013      	ands	r3, r2
 800673c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	b29b      	uxth	r3, r3
}
 8006742:	4618      	mov	r0, r3
 8006744:	3714      	adds	r7, #20
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr

0800674e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800674e:	b480      	push	{r7}
 8006750:	b085      	sub	sp, #20
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
 8006756:	460b      	mov	r3, r1
 8006758:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800675e:	78fb      	ldrb	r3, [r7, #3]
 8006760:	015a      	lsls	r2, r3, #5
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	4413      	add	r3, r2
 8006766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006774:	695b      	ldr	r3, [r3, #20]
 8006776:	68ba      	ldr	r2, [r7, #8]
 8006778:	4013      	ands	r3, r2
 800677a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800677c:	68bb      	ldr	r3, [r7, #8]
}
 800677e:	4618      	mov	r0, r3
 8006780:	3714      	adds	r7, #20
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr

0800678a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800678a:	b480      	push	{r7}
 800678c:	b087      	sub	sp, #28
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
 8006792:	460b      	mov	r3, r1
 8006794:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ac:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80067ae:	78fb      	ldrb	r3, [r7, #3]
 80067b0:	f003 030f 	and.w	r3, r3, #15
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	fa22 f303 	lsr.w	r3, r2, r3
 80067ba:	01db      	lsls	r3, r3, #7
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	693a      	ldr	r2, [r7, #16]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80067c4:	78fb      	ldrb	r3, [r7, #3]
 80067c6:	015a      	lsls	r2, r3, #5
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	4413      	add	r3, r2
 80067cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	4013      	ands	r3, r2
 80067d6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80067d8:	68bb      	ldr	r3, [r7, #8]
}
 80067da:	4618      	mov	r0, r3
 80067dc:	371c      	adds	r7, #28
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr

080067e6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80067e6:	b480      	push	{r7}
 80067e8:	b083      	sub	sp, #12
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	695b      	ldr	r3, [r3, #20]
 80067f2:	f003 0301 	and.w	r3, r3, #1
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	370c      	adds	r7, #12
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr

08006802 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006802:	b480      	push	{r7}
 8006804:	b085      	sub	sp, #20
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800681c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006820:	f023 0307 	bic.w	r3, r3, #7
 8006824:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006838:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	3714      	adds	r7, #20
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006848:	b480      	push	{r7}
 800684a:	b087      	sub	sp, #28
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	460b      	mov	r3, r1
 8006852:	607a      	str	r2, [r7, #4]
 8006854:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	333c      	adds	r3, #60	; 0x3c
 800685e:	3304      	adds	r3, #4
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	4a26      	ldr	r2, [pc, #152]	; (8006900 <USB_EP0_OutStart+0xb8>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d90a      	bls.n	8006882 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006878:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800687c:	d101      	bne.n	8006882 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800687e:	2300      	movs	r3, #0
 8006880:	e037      	b.n	80068f2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006888:	461a      	mov	r2, r3
 800688a:	2300      	movs	r3, #0
 800688c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	697a      	ldr	r2, [r7, #20]
 8006898:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800689c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80068a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	697a      	ldr	r2, [r7, #20]
 80068ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068b0:	f043 0318 	orr.w	r3, r3, #24
 80068b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068c4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80068c8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80068ca:	7afb      	ldrb	r3, [r7, #11]
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d10f      	bne.n	80068f0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068d6:	461a      	mov	r2, r3
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	697a      	ldr	r2, [r7, #20]
 80068e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068ea:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80068ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	371c      	adds	r7, #28
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	4f54300a 	.word	0x4f54300a

08006904 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800690c:	2300      	movs	r3, #0
 800690e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	3301      	adds	r3, #1
 8006914:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	4a13      	ldr	r2, [pc, #76]	; (8006968 <USB_CoreReset+0x64>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d901      	bls.n	8006922 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800691e:	2303      	movs	r3, #3
 8006920:	e01b      	b.n	800695a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	2b00      	cmp	r3, #0
 8006928:	daf2      	bge.n	8006910 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800692a:	2300      	movs	r3, #0
 800692c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	f043 0201 	orr.w	r2, r3, #1
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	3301      	adds	r3, #1
 800693e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	4a09      	ldr	r2, [pc, #36]	; (8006968 <USB_CoreReset+0x64>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d901      	bls.n	800694c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006948:	2303      	movs	r3, #3
 800694a:	e006      	b.n	800695a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	f003 0301 	and.w	r3, r3, #1
 8006954:	2b01      	cmp	r3, #1
 8006956:	d0f0      	beq.n	800693a <USB_CoreReset+0x36>

  return HAL_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3714      	adds	r7, #20
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	00030d40 	.word	0x00030d40

0800696c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	460b      	mov	r3, r1
 8006976:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006978:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800697c:	f002 fc94 	bl	80092a8 <USBD_static_malloc>
 8006980:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d109      	bne.n	800699c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	32b0      	adds	r2, #176	; 0xb0
 8006992:	2100      	movs	r1, #0
 8006994:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006998:	2302      	movs	r3, #2
 800699a:	e0d4      	b.n	8006b46 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800699c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80069a0:	2100      	movs	r1, #0
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	f002 fd02 	bl	80093ac <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	32b0      	adds	r2, #176	; 0xb0
 80069b2:	68f9      	ldr	r1, [r7, #12]
 80069b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	32b0      	adds	r2, #176	; 0xb0
 80069c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	7c1b      	ldrb	r3, [r3, #16]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d138      	bne.n	8006a46 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80069d4:	4b5e      	ldr	r3, [pc, #376]	; (8006b50 <USBD_CDC_Init+0x1e4>)
 80069d6:	7819      	ldrb	r1, [r3, #0]
 80069d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069dc:	2202      	movs	r2, #2
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f002 fb3f 	bl	8009062 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80069e4:	4b5a      	ldr	r3, [pc, #360]	; (8006b50 <USBD_CDC_Init+0x1e4>)
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	f003 020f 	and.w	r2, r3, #15
 80069ec:	6879      	ldr	r1, [r7, #4]
 80069ee:	4613      	mov	r3, r2
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	4413      	add	r3, r2
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	440b      	add	r3, r1
 80069f8:	3324      	adds	r3, #36	; 0x24
 80069fa:	2201      	movs	r2, #1
 80069fc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80069fe:	4b55      	ldr	r3, [pc, #340]	; (8006b54 <USBD_CDC_Init+0x1e8>)
 8006a00:	7819      	ldrb	r1, [r3, #0]
 8006a02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a06:	2202      	movs	r2, #2
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f002 fb2a 	bl	8009062 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006a0e:	4b51      	ldr	r3, [pc, #324]	; (8006b54 <USBD_CDC_Init+0x1e8>)
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	f003 020f 	and.w	r2, r3, #15
 8006a16:	6879      	ldr	r1, [r7, #4]
 8006a18:	4613      	mov	r3, r2
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	4413      	add	r3, r2
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	440b      	add	r3, r1
 8006a22:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006a26:	2201      	movs	r2, #1
 8006a28:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006a2a:	4b4b      	ldr	r3, [pc, #300]	; (8006b58 <USBD_CDC_Init+0x1ec>)
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	f003 020f 	and.w	r2, r3, #15
 8006a32:	6879      	ldr	r1, [r7, #4]
 8006a34:	4613      	mov	r3, r2
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	4413      	add	r3, r2
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	440b      	add	r3, r1
 8006a3e:	3326      	adds	r3, #38	; 0x26
 8006a40:	2210      	movs	r2, #16
 8006a42:	801a      	strh	r2, [r3, #0]
 8006a44:	e035      	b.n	8006ab2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006a46:	4b42      	ldr	r3, [pc, #264]	; (8006b50 <USBD_CDC_Init+0x1e4>)
 8006a48:	7819      	ldrb	r1, [r3, #0]
 8006a4a:	2340      	movs	r3, #64	; 0x40
 8006a4c:	2202      	movs	r2, #2
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f002 fb07 	bl	8009062 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006a54:	4b3e      	ldr	r3, [pc, #248]	; (8006b50 <USBD_CDC_Init+0x1e4>)
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	f003 020f 	and.w	r2, r3, #15
 8006a5c:	6879      	ldr	r1, [r7, #4]
 8006a5e:	4613      	mov	r3, r2
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	4413      	add	r3, r2
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	440b      	add	r3, r1
 8006a68:	3324      	adds	r3, #36	; 0x24
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006a6e:	4b39      	ldr	r3, [pc, #228]	; (8006b54 <USBD_CDC_Init+0x1e8>)
 8006a70:	7819      	ldrb	r1, [r3, #0]
 8006a72:	2340      	movs	r3, #64	; 0x40
 8006a74:	2202      	movs	r2, #2
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f002 faf3 	bl	8009062 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006a7c:	4b35      	ldr	r3, [pc, #212]	; (8006b54 <USBD_CDC_Init+0x1e8>)
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	f003 020f 	and.w	r2, r3, #15
 8006a84:	6879      	ldr	r1, [r7, #4]
 8006a86:	4613      	mov	r3, r2
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4413      	add	r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	440b      	add	r3, r1
 8006a90:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006a94:	2201      	movs	r2, #1
 8006a96:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006a98:	4b2f      	ldr	r3, [pc, #188]	; (8006b58 <USBD_CDC_Init+0x1ec>)
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	f003 020f 	and.w	r2, r3, #15
 8006aa0:	6879      	ldr	r1, [r7, #4]
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	4413      	add	r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	440b      	add	r3, r1
 8006aac:	3326      	adds	r3, #38	; 0x26
 8006aae:	2210      	movs	r2, #16
 8006ab0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006ab2:	4b29      	ldr	r3, [pc, #164]	; (8006b58 <USBD_CDC_Init+0x1ec>)
 8006ab4:	7819      	ldrb	r1, [r3, #0]
 8006ab6:	2308      	movs	r3, #8
 8006ab8:	2203      	movs	r2, #3
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f002 fad1 	bl	8009062 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006ac0:	4b25      	ldr	r3, [pc, #148]	; (8006b58 <USBD_CDC_Init+0x1ec>)
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	f003 020f 	and.w	r2, r3, #15
 8006ac8:	6879      	ldr	r1, [r7, #4]
 8006aca:	4613      	mov	r3, r2
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	4413      	add	r3, r2
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	440b      	add	r3, r1
 8006ad4:	3324      	adds	r3, #36	; 0x24
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	33b0      	adds	r3, #176	; 0xb0
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	4413      	add	r3, r2
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d101      	bne.n	8006b14 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006b10:	2302      	movs	r3, #2
 8006b12:	e018      	b.n	8006b46 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	7c1b      	ldrb	r3, [r3, #16]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d10a      	bne.n	8006b32 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006b1c:	4b0d      	ldr	r3, [pc, #52]	; (8006b54 <USBD_CDC_Init+0x1e8>)
 8006b1e:	7819      	ldrb	r1, [r3, #0]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f002 fb88 	bl	8009240 <USBD_LL_PrepareReceive>
 8006b30:	e008      	b.n	8006b44 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006b32:	4b08      	ldr	r3, [pc, #32]	; (8006b54 <USBD_CDC_Init+0x1e8>)
 8006b34:	7819      	ldrb	r1, [r3, #0]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b3c:	2340      	movs	r3, #64	; 0x40
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f002 fb7e 	bl	8009240 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3710      	adds	r7, #16
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	20000093 	.word	0x20000093
 8006b54:	20000094 	.word	0x20000094
 8006b58:	20000095 	.word	0x20000095

08006b5c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	460b      	mov	r3, r1
 8006b66:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006b68:	4b3a      	ldr	r3, [pc, #232]	; (8006c54 <USBD_CDC_DeInit+0xf8>)
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f002 fa9d 	bl	80090ae <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006b74:	4b37      	ldr	r3, [pc, #220]	; (8006c54 <USBD_CDC_DeInit+0xf8>)
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	f003 020f 	and.w	r2, r3, #15
 8006b7c:	6879      	ldr	r1, [r7, #4]
 8006b7e:	4613      	mov	r3, r2
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	4413      	add	r3, r2
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	440b      	add	r3, r1
 8006b88:	3324      	adds	r3, #36	; 0x24
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006b8e:	4b32      	ldr	r3, [pc, #200]	; (8006c58 <USBD_CDC_DeInit+0xfc>)
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	4619      	mov	r1, r3
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f002 fa8a 	bl	80090ae <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006b9a:	4b2f      	ldr	r3, [pc, #188]	; (8006c58 <USBD_CDC_DeInit+0xfc>)
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	f003 020f 	and.w	r2, r3, #15
 8006ba2:	6879      	ldr	r1, [r7, #4]
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	4413      	add	r3, r2
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	440b      	add	r3, r1
 8006bae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006bb6:	4b29      	ldr	r3, [pc, #164]	; (8006c5c <USBD_CDC_DeInit+0x100>)
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	4619      	mov	r1, r3
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f002 fa76 	bl	80090ae <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006bc2:	4b26      	ldr	r3, [pc, #152]	; (8006c5c <USBD_CDC_DeInit+0x100>)
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	f003 020f 	and.w	r2, r3, #15
 8006bca:	6879      	ldr	r1, [r7, #4]
 8006bcc:	4613      	mov	r3, r2
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	4413      	add	r3, r2
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	440b      	add	r3, r1
 8006bd6:	3324      	adds	r3, #36	; 0x24
 8006bd8:	2200      	movs	r2, #0
 8006bda:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006bdc:	4b1f      	ldr	r3, [pc, #124]	; (8006c5c <USBD_CDC_DeInit+0x100>)
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	f003 020f 	and.w	r2, r3, #15
 8006be4:	6879      	ldr	r1, [r7, #4]
 8006be6:	4613      	mov	r3, r2
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	4413      	add	r3, r2
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	440b      	add	r3, r1
 8006bf0:	3326      	adds	r3, #38	; 0x26
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	32b0      	adds	r2, #176	; 0xb0
 8006c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d01f      	beq.n	8006c48 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	33b0      	adds	r3, #176	; 0xb0
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	4413      	add	r3, r2
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	32b0      	adds	r2, #176	; 0xb0
 8006c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f002 fb4a 	bl	80092c4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	32b0      	adds	r2, #176	; 0xb0
 8006c3a:	2100      	movs	r1, #0
 8006c3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3708      	adds	r7, #8
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	20000093 	.word	0x20000093
 8006c58:	20000094 	.word	0x20000094
 8006c5c:	20000095 	.word	0x20000095

08006c60 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b086      	sub	sp, #24
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	32b0      	adds	r2, #176	; 0xb0
 8006c74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c78:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c82:	2300      	movs	r3, #0
 8006c84:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d101      	bne.n	8006c90 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	e0bf      	b.n	8006e10 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d050      	beq.n	8006d3e <USBD_CDC_Setup+0xde>
 8006c9c:	2b20      	cmp	r3, #32
 8006c9e:	f040 80af 	bne.w	8006e00 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	88db      	ldrh	r3, [r3, #6]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d03a      	beq.n	8006d20 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	b25b      	sxtb	r3, r3
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	da1b      	bge.n	8006cec <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	33b0      	adds	r3, #176	; 0xb0
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	4413      	add	r3, r2
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	683a      	ldr	r2, [r7, #0]
 8006cc8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006cca:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006ccc:	683a      	ldr	r2, [r7, #0]
 8006cce:	88d2      	ldrh	r2, [r2, #6]
 8006cd0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	88db      	ldrh	r3, [r3, #6]
 8006cd6:	2b07      	cmp	r3, #7
 8006cd8:	bf28      	it	cs
 8006cda:	2307      	movcs	r3, #7
 8006cdc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	89fa      	ldrh	r2, [r7, #14]
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f001 fd89 	bl	80087fc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006cea:	e090      	b.n	8006e0e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	785a      	ldrb	r2, [r3, #1]
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	88db      	ldrh	r3, [r3, #6]
 8006cfa:	2b3f      	cmp	r3, #63	; 0x3f
 8006cfc:	d803      	bhi.n	8006d06 <USBD_CDC_Setup+0xa6>
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	88db      	ldrh	r3, [r3, #6]
 8006d02:	b2da      	uxtb	r2, r3
 8006d04:	e000      	b.n	8006d08 <USBD_CDC_Setup+0xa8>
 8006d06:	2240      	movs	r2, #64	; 0x40
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006d0e:	6939      	ldr	r1, [r7, #16]
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006d16:	461a      	mov	r2, r3
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f001 fd9b 	bl	8008854 <USBD_CtlPrepareRx>
      break;
 8006d1e:	e076      	b.n	8006e0e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	33b0      	adds	r3, #176	; 0xb0
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	4413      	add	r3, r2
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	683a      	ldr	r2, [r7, #0]
 8006d34:	7850      	ldrb	r0, [r2, #1]
 8006d36:	2200      	movs	r2, #0
 8006d38:	6839      	ldr	r1, [r7, #0]
 8006d3a:	4798      	blx	r3
      break;
 8006d3c:	e067      	b.n	8006e0e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	785b      	ldrb	r3, [r3, #1]
 8006d42:	2b0b      	cmp	r3, #11
 8006d44:	d851      	bhi.n	8006dea <USBD_CDC_Setup+0x18a>
 8006d46:	a201      	add	r2, pc, #4	; (adr r2, 8006d4c <USBD_CDC_Setup+0xec>)
 8006d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d4c:	08006d7d 	.word	0x08006d7d
 8006d50:	08006df9 	.word	0x08006df9
 8006d54:	08006deb 	.word	0x08006deb
 8006d58:	08006deb 	.word	0x08006deb
 8006d5c:	08006deb 	.word	0x08006deb
 8006d60:	08006deb 	.word	0x08006deb
 8006d64:	08006deb 	.word	0x08006deb
 8006d68:	08006deb 	.word	0x08006deb
 8006d6c:	08006deb 	.word	0x08006deb
 8006d70:	08006deb 	.word	0x08006deb
 8006d74:	08006da7 	.word	0x08006da7
 8006d78:	08006dd1 	.word	0x08006dd1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	2b03      	cmp	r3, #3
 8006d86:	d107      	bne.n	8006d98 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006d88:	f107 030a 	add.w	r3, r7, #10
 8006d8c:	2202      	movs	r2, #2
 8006d8e:	4619      	mov	r1, r3
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f001 fd33 	bl	80087fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d96:	e032      	b.n	8006dfe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006d98:	6839      	ldr	r1, [r7, #0]
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f001 fcbd 	bl	800871a <USBD_CtlError>
            ret = USBD_FAIL;
 8006da0:	2303      	movs	r3, #3
 8006da2:	75fb      	strb	r3, [r7, #23]
          break;
 8006da4:	e02b      	b.n	8006dfe <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	2b03      	cmp	r3, #3
 8006db0:	d107      	bne.n	8006dc2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006db2:	f107 030d 	add.w	r3, r7, #13
 8006db6:	2201      	movs	r2, #1
 8006db8:	4619      	mov	r1, r3
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f001 fd1e 	bl	80087fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006dc0:	e01d      	b.n	8006dfe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006dc2:	6839      	ldr	r1, [r7, #0]
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f001 fca8 	bl	800871a <USBD_CtlError>
            ret = USBD_FAIL;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	75fb      	strb	r3, [r7, #23]
          break;
 8006dce:	e016      	b.n	8006dfe <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	2b03      	cmp	r3, #3
 8006dda:	d00f      	beq.n	8006dfc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006ddc:	6839      	ldr	r1, [r7, #0]
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f001 fc9b 	bl	800871a <USBD_CtlError>
            ret = USBD_FAIL;
 8006de4:	2303      	movs	r3, #3
 8006de6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006de8:	e008      	b.n	8006dfc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006dea:	6839      	ldr	r1, [r7, #0]
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f001 fc94 	bl	800871a <USBD_CtlError>
          ret = USBD_FAIL;
 8006df2:	2303      	movs	r3, #3
 8006df4:	75fb      	strb	r3, [r7, #23]
          break;
 8006df6:	e002      	b.n	8006dfe <USBD_CDC_Setup+0x19e>
          break;
 8006df8:	bf00      	nop
 8006dfa:	e008      	b.n	8006e0e <USBD_CDC_Setup+0x1ae>
          break;
 8006dfc:	bf00      	nop
      }
      break;
 8006dfe:	e006      	b.n	8006e0e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006e00:	6839      	ldr	r1, [r7, #0]
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f001 fc89 	bl	800871a <USBD_CtlError>
      ret = USBD_FAIL;
 8006e08:	2303      	movs	r3, #3
 8006e0a:	75fb      	strb	r3, [r7, #23]
      break;
 8006e0c:	bf00      	nop
  }

  return (uint8_t)ret;
 8006e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3718      	adds	r7, #24
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	460b      	mov	r3, r1
 8006e22:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006e2a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	32b0      	adds	r2, #176	; 0xb0
 8006e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d101      	bne.n	8006e42 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	e065      	b.n	8006f0e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	32b0      	adds	r2, #176	; 0xb0
 8006e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e50:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006e52:	78fb      	ldrb	r3, [r7, #3]
 8006e54:	f003 020f 	and.w	r2, r3, #15
 8006e58:	6879      	ldr	r1, [r7, #4]
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	4413      	add	r3, r2
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	440b      	add	r3, r1
 8006e64:	3318      	adds	r3, #24
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d02f      	beq.n	8006ecc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006e6c:	78fb      	ldrb	r3, [r7, #3]
 8006e6e:	f003 020f 	and.w	r2, r3, #15
 8006e72:	6879      	ldr	r1, [r7, #4]
 8006e74:	4613      	mov	r3, r2
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	4413      	add	r3, r2
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	440b      	add	r3, r1
 8006e7e:	3318      	adds	r3, #24
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	78fb      	ldrb	r3, [r7, #3]
 8006e84:	f003 010f 	and.w	r1, r3, #15
 8006e88:	68f8      	ldr	r0, [r7, #12]
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	00db      	lsls	r3, r3, #3
 8006e8e:	440b      	add	r3, r1
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	4403      	add	r3, r0
 8006e94:	3348      	adds	r3, #72	; 0x48
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	fbb2 f1f3 	udiv	r1, r2, r3
 8006e9c:	fb01 f303 	mul.w	r3, r1, r3
 8006ea0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d112      	bne.n	8006ecc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006ea6:	78fb      	ldrb	r3, [r7, #3]
 8006ea8:	f003 020f 	and.w	r2, r3, #15
 8006eac:	6879      	ldr	r1, [r7, #4]
 8006eae:	4613      	mov	r3, r2
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	4413      	add	r3, r2
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	440b      	add	r3, r1
 8006eb8:	3318      	adds	r3, #24
 8006eba:	2200      	movs	r2, #0
 8006ebc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006ebe:	78f9      	ldrb	r1, [r7, #3]
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f002 f99a 	bl	80091fe <USBD_LL_Transmit>
 8006eca:	e01f      	b.n	8006f0c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	33b0      	adds	r3, #176	; 0xb0
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	4413      	add	r3, r2
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d010      	beq.n	8006f0c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	33b0      	adds	r3, #176	; 0xb0
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	4413      	add	r3, r2
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	68ba      	ldr	r2, [r7, #8]
 8006efe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006f02:	68ba      	ldr	r2, [r7, #8]
 8006f04:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006f08:	78fa      	ldrb	r2, [r7, #3]
 8006f0a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3710      	adds	r7, #16
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b084      	sub	sp, #16
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
 8006f1e:	460b      	mov	r3, r1
 8006f20:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	32b0      	adds	r2, #176	; 0xb0
 8006f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f30:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	32b0      	adds	r2, #176	; 0xb0
 8006f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d101      	bne.n	8006f48 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006f44:	2303      	movs	r3, #3
 8006f46:	e01a      	b.n	8006f7e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006f48:	78fb      	ldrb	r3, [r7, #3]
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f002 f998 	bl	8009282 <USBD_LL_GetRxDataSize>
 8006f52:	4602      	mov	r2, r0
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	33b0      	adds	r3, #176	; 0xb0
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	4413      	add	r3, r2
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006f72:	68fa      	ldr	r2, [r7, #12]
 8006f74:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006f78:	4611      	mov	r1, r2
 8006f7a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b084      	sub	sp, #16
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	32b0      	adds	r2, #176	; 0xb0
 8006f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f9c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d101      	bne.n	8006fa8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	e025      	b.n	8006ff4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	33b0      	adds	r3, #176	; 0xb0
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	4413      	add	r3, r2
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d01a      	beq.n	8006ff2 <USBD_CDC_EP0_RxReady+0x6c>
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006fc2:	2bff      	cmp	r3, #255	; 0xff
 8006fc4:	d015      	beq.n	8006ff2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	33b0      	adds	r3, #176	; 0xb0
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	4413      	add	r3, r2
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006fde:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006fe6:	b292      	uxth	r2, r2
 8006fe8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	22ff      	movs	r2, #255	; 0xff
 8006fee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3710      	adds	r7, #16
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b086      	sub	sp, #24
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007004:	2182      	movs	r1, #130	; 0x82
 8007006:	4818      	ldr	r0, [pc, #96]	; (8007068 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007008:	f000 fd4f 	bl	8007aaa <USBD_GetEpDesc>
 800700c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800700e:	2101      	movs	r1, #1
 8007010:	4815      	ldr	r0, [pc, #84]	; (8007068 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007012:	f000 fd4a 	bl	8007aaa <USBD_GetEpDesc>
 8007016:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007018:	2181      	movs	r1, #129	; 0x81
 800701a:	4813      	ldr	r0, [pc, #76]	; (8007068 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800701c:	f000 fd45 	bl	8007aaa <USBD_GetEpDesc>
 8007020:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d002      	beq.n	800702e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	2210      	movs	r2, #16
 800702c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d006      	beq.n	8007042 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	2200      	movs	r2, #0
 8007038:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800703c:	711a      	strb	r2, [r3, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d006      	beq.n	8007056 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2200      	movs	r2, #0
 800704c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007050:	711a      	strb	r2, [r3, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2243      	movs	r2, #67	; 0x43
 800705a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800705c:	4b02      	ldr	r3, [pc, #8]	; (8007068 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800705e:	4618      	mov	r0, r3
 8007060:	3718      	adds	r7, #24
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	20000050 	.word	0x20000050

0800706c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b086      	sub	sp, #24
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007074:	2182      	movs	r1, #130	; 0x82
 8007076:	4818      	ldr	r0, [pc, #96]	; (80070d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007078:	f000 fd17 	bl	8007aaa <USBD_GetEpDesc>
 800707c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800707e:	2101      	movs	r1, #1
 8007080:	4815      	ldr	r0, [pc, #84]	; (80070d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007082:	f000 fd12 	bl	8007aaa <USBD_GetEpDesc>
 8007086:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007088:	2181      	movs	r1, #129	; 0x81
 800708a:	4813      	ldr	r0, [pc, #76]	; (80070d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800708c:	f000 fd0d 	bl	8007aaa <USBD_GetEpDesc>
 8007090:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d002      	beq.n	800709e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	2210      	movs	r2, #16
 800709c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d006      	beq.n	80070b2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	2200      	movs	r2, #0
 80070a8:	711a      	strb	r2, [r3, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f042 0202 	orr.w	r2, r2, #2
 80070b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d006      	beq.n	80070c6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2200      	movs	r2, #0
 80070bc:	711a      	strb	r2, [r3, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	f042 0202 	orr.w	r2, r2, #2
 80070c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2243      	movs	r2, #67	; 0x43
 80070ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80070cc:	4b02      	ldr	r3, [pc, #8]	; (80070d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3718      	adds	r7, #24
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	bf00      	nop
 80070d8:	20000050 	.word	0x20000050

080070dc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b086      	sub	sp, #24
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80070e4:	2182      	movs	r1, #130	; 0x82
 80070e6:	4818      	ldr	r0, [pc, #96]	; (8007148 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80070e8:	f000 fcdf 	bl	8007aaa <USBD_GetEpDesc>
 80070ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80070ee:	2101      	movs	r1, #1
 80070f0:	4815      	ldr	r0, [pc, #84]	; (8007148 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80070f2:	f000 fcda 	bl	8007aaa <USBD_GetEpDesc>
 80070f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80070f8:	2181      	movs	r1, #129	; 0x81
 80070fa:	4813      	ldr	r0, [pc, #76]	; (8007148 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80070fc:	f000 fcd5 	bl	8007aaa <USBD_GetEpDesc>
 8007100:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d002      	beq.n	800710e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	2210      	movs	r2, #16
 800710c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d006      	beq.n	8007122 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	2200      	movs	r2, #0
 8007118:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800711c:	711a      	strb	r2, [r3, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d006      	beq.n	8007136 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2200      	movs	r2, #0
 800712c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007130:	711a      	strb	r2, [r3, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2243      	movs	r2, #67	; 0x43
 800713a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800713c:	4b02      	ldr	r3, [pc, #8]	; (8007148 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800713e:	4618      	mov	r0, r3
 8007140:	3718      	adds	r7, #24
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop
 8007148:	20000050 	.word	0x20000050

0800714c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	220a      	movs	r2, #10
 8007158:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800715a:	4b03      	ldr	r3, [pc, #12]	; (8007168 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800715c:	4618      	mov	r0, r3
 800715e:	370c      	adds	r7, #12
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr
 8007168:	2000000c 	.word	0x2000000c

0800716c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d101      	bne.n	8007180 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800717c:	2303      	movs	r3, #3
 800717e:	e009      	b.n	8007194 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	33b0      	adds	r3, #176	; 0xb0
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	4413      	add	r3, r2
 800718e:	683a      	ldr	r2, [r7, #0]
 8007190:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b087      	sub	sp, #28
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	32b0      	adds	r2, #176	; 0xb0
 80071b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ba:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d101      	bne.n	80071c6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80071c2:	2303      	movs	r3, #3
 80071c4:	e008      	b.n	80071d8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	68ba      	ldr	r2, [r7, #8]
 80071ca:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80071d6:	2300      	movs	r3, #0
}
 80071d8:	4618      	mov	r0, r3
 80071da:	371c      	adds	r7, #28
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b085      	sub	sp, #20
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	32b0      	adds	r2, #176	; 0xb0
 80071f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071fc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d101      	bne.n	8007208 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007204:	2303      	movs	r3, #3
 8007206:	e004      	b.n	8007212 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	683a      	ldr	r2, [r7, #0]
 800720c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3714      	adds	r7, #20
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr
	...

08007220 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	32b0      	adds	r2, #176	; 0xb0
 8007232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007236:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007238:	2301      	movs	r3, #1
 800723a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	32b0      	adds	r2, #176	; 0xb0
 8007246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d101      	bne.n	8007252 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800724e:	2303      	movs	r3, #3
 8007250:	e025      	b.n	800729e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007258:	2b00      	cmp	r3, #0
 800725a:	d11f      	bne.n	800729c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	2201      	movs	r2, #1
 8007260:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007264:	4b10      	ldr	r3, [pc, #64]	; (80072a8 <USBD_CDC_TransmitPacket+0x88>)
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	f003 020f 	and.w	r2, r3, #15
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	4613      	mov	r3, r2
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	4413      	add	r3, r2
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	4403      	add	r3, r0
 800727e:	3318      	adds	r3, #24
 8007280:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007282:	4b09      	ldr	r3, [pc, #36]	; (80072a8 <USBD_CDC_TransmitPacket+0x88>)
 8007284:	7819      	ldrb	r1, [r3, #0]
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f001 ffb3 	bl	80091fe <USBD_LL_Transmit>

    ret = USBD_OK;
 8007298:	2300      	movs	r3, #0
 800729a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800729c:	7bfb      	ldrb	r3, [r7, #15]
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	20000093 	.word	0x20000093

080072ac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	32b0      	adds	r2, #176	; 0xb0
 80072be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072c2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	32b0      	adds	r2, #176	; 0xb0
 80072ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d101      	bne.n	80072da <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80072d6:	2303      	movs	r3, #3
 80072d8:	e018      	b.n	800730c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	7c1b      	ldrb	r3, [r3, #16]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d10a      	bne.n	80072f8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80072e2:	4b0c      	ldr	r3, [pc, #48]	; (8007314 <USBD_CDC_ReceivePacket+0x68>)
 80072e4:	7819      	ldrb	r1, [r3, #0]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80072ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f001 ffa5 	bl	8009240 <USBD_LL_PrepareReceive>
 80072f6:	e008      	b.n	800730a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80072f8:	4b06      	ldr	r3, [pc, #24]	; (8007314 <USBD_CDC_ReceivePacket+0x68>)
 80072fa:	7819      	ldrb	r1, [r3, #0]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007302:	2340      	movs	r3, #64	; 0x40
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f001 ff9b 	bl	8009240 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	3710      	adds	r7, #16
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}
 8007314:	20000094 	.word	0x20000094

08007318 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b086      	sub	sp, #24
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	4613      	mov	r3, r2
 8007324:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d101      	bne.n	8007330 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800732c:	2303      	movs	r3, #3
 800732e:	e01f      	b.n	8007370 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2200      	movs	r2, #0
 8007334:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2200      	movs	r2, #0
 800733c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2200      	movs	r2, #0
 8007344:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d003      	beq.n	8007356 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	68ba      	ldr	r2, [r7, #8]
 8007352:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2201      	movs	r2, #1
 800735a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	79fa      	ldrb	r2, [r7, #7]
 8007362:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007364:	68f8      	ldr	r0, [r7, #12]
 8007366:	f001 fe15 	bl	8008f94 <USBD_LL_Init>
 800736a:	4603      	mov	r3, r0
 800736c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800736e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007370:	4618      	mov	r0, r3
 8007372:	3718      	adds	r7, #24
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007382:	2300      	movs	r3, #0
 8007384:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d101      	bne.n	8007390 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800738c:	2303      	movs	r3, #3
 800738e:	e025      	b.n	80073dc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	683a      	ldr	r2, [r7, #0]
 8007394:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	32ae      	adds	r2, #174	; 0xae
 80073a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00f      	beq.n	80073cc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	32ae      	adds	r2, #174	; 0xae
 80073b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073bc:	f107 020e 	add.w	r2, r7, #14
 80073c0:	4610      	mov	r0, r2
 80073c2:	4798      	blx	r3
 80073c4:	4602      	mov	r2, r0
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80073d2:	1c5a      	adds	r2, r3, #1
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3710      	adds	r7, #16
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f001 fe1d 	bl	800902c <USBD_LL_Start>
 80073f2:	4603      	mov	r3, r0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3708      	adds	r7, #8
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007404:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007406:	4618      	mov	r0, r3
 8007408:	370c      	adds	r7, #12
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr

08007412 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b084      	sub	sp, #16
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
 800741a:	460b      	mov	r3, r1
 800741c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800741e:	2300      	movs	r3, #0
 8007420:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007428:	2b00      	cmp	r3, #0
 800742a:	d009      	beq.n	8007440 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	78fa      	ldrb	r2, [r7, #3]
 8007436:	4611      	mov	r1, r2
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	4798      	blx	r3
 800743c:	4603      	mov	r3, r0
 800743e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007440:	7bfb      	ldrb	r3, [r7, #15]
}
 8007442:	4618      	mov	r0, r3
 8007444:	3710      	adds	r7, #16
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800744a:	b580      	push	{r7, lr}
 800744c:	b084      	sub	sp, #16
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
 8007452:	460b      	mov	r3, r1
 8007454:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007456:	2300      	movs	r3, #0
 8007458:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	78fa      	ldrb	r2, [r7, #3]
 8007464:	4611      	mov	r1, r2
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	4798      	blx	r3
 800746a:	4603      	mov	r3, r0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d001      	beq.n	8007474 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007470:	2303      	movs	r3, #3
 8007472:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007474:	7bfb      	ldrb	r3, [r7, #15]
}
 8007476:	4618      	mov	r0, r3
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}

0800747e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800747e:	b580      	push	{r7, lr}
 8007480:	b084      	sub	sp, #16
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
 8007486:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800748e:	6839      	ldr	r1, [r7, #0]
 8007490:	4618      	mov	r0, r3
 8007492:	f001 f908 	bl	80086a6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2201      	movs	r2, #1
 800749a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80074a4:	461a      	mov	r2, r3
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80074b2:	f003 031f 	and.w	r3, r3, #31
 80074b6:	2b02      	cmp	r3, #2
 80074b8:	d01a      	beq.n	80074f0 <USBD_LL_SetupStage+0x72>
 80074ba:	2b02      	cmp	r3, #2
 80074bc:	d822      	bhi.n	8007504 <USBD_LL_SetupStage+0x86>
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d002      	beq.n	80074c8 <USBD_LL_SetupStage+0x4a>
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d00a      	beq.n	80074dc <USBD_LL_SetupStage+0x5e>
 80074c6:	e01d      	b.n	8007504 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80074ce:	4619      	mov	r1, r3
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 fb5f 	bl	8007b94 <USBD_StdDevReq>
 80074d6:	4603      	mov	r3, r0
 80074d8:	73fb      	strb	r3, [r7, #15]
      break;
 80074da:	e020      	b.n	800751e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80074e2:	4619      	mov	r1, r3
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 fbc7 	bl	8007c78 <USBD_StdItfReq>
 80074ea:	4603      	mov	r3, r0
 80074ec:	73fb      	strb	r3, [r7, #15]
      break;
 80074ee:	e016      	b.n	800751e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80074f6:	4619      	mov	r1, r3
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 fc29 	bl	8007d50 <USBD_StdEPReq>
 80074fe:	4603      	mov	r3, r0
 8007500:	73fb      	strb	r3, [r7, #15]
      break;
 8007502:	e00c      	b.n	800751e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800750a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800750e:	b2db      	uxtb	r3, r3
 8007510:	4619      	mov	r1, r3
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f001 fdea 	bl	80090ec <USBD_LL_StallEP>
 8007518:	4603      	mov	r3, r0
 800751a:	73fb      	strb	r3, [r7, #15]
      break;
 800751c:	bf00      	nop
  }

  return ret;
 800751e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007520:	4618      	mov	r0, r3
 8007522:	3710      	adds	r7, #16
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b086      	sub	sp, #24
 800752c:	af00      	add	r7, sp, #0
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	460b      	mov	r3, r1
 8007532:	607a      	str	r2, [r7, #4]
 8007534:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007536:	2300      	movs	r3, #0
 8007538:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800753a:	7afb      	ldrb	r3, [r7, #11]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d16e      	bne.n	800761e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007546:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800754e:	2b03      	cmp	r3, #3
 8007550:	f040 8098 	bne.w	8007684 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	689a      	ldr	r2, [r3, #8]
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	429a      	cmp	r2, r3
 800755e:	d913      	bls.n	8007588 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	689a      	ldr	r2, [r3, #8]
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	1ad2      	subs	r2, r2, r3
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	68da      	ldr	r2, [r3, #12]
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	4293      	cmp	r3, r2
 8007578:	bf28      	it	cs
 800757a:	4613      	movcs	r3, r2
 800757c:	461a      	mov	r2, r3
 800757e:	6879      	ldr	r1, [r7, #4]
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f001 f984 	bl	800888e <USBD_CtlContinueRx>
 8007586:	e07d      	b.n	8007684 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800758e:	f003 031f 	and.w	r3, r3, #31
 8007592:	2b02      	cmp	r3, #2
 8007594:	d014      	beq.n	80075c0 <USBD_LL_DataOutStage+0x98>
 8007596:	2b02      	cmp	r3, #2
 8007598:	d81d      	bhi.n	80075d6 <USBD_LL_DataOutStage+0xae>
 800759a:	2b00      	cmp	r3, #0
 800759c:	d002      	beq.n	80075a4 <USBD_LL_DataOutStage+0x7c>
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d003      	beq.n	80075aa <USBD_LL_DataOutStage+0x82>
 80075a2:	e018      	b.n	80075d6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80075a4:	2300      	movs	r3, #0
 80075a6:	75bb      	strb	r3, [r7, #22]
            break;
 80075a8:	e018      	b.n	80075dc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	4619      	mov	r1, r3
 80075b4:	68f8      	ldr	r0, [r7, #12]
 80075b6:	f000 fa5e 	bl	8007a76 <USBD_CoreFindIF>
 80075ba:	4603      	mov	r3, r0
 80075bc:	75bb      	strb	r3, [r7, #22]
            break;
 80075be:	e00d      	b.n	80075dc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	4619      	mov	r1, r3
 80075ca:	68f8      	ldr	r0, [r7, #12]
 80075cc:	f000 fa60 	bl	8007a90 <USBD_CoreFindEP>
 80075d0:	4603      	mov	r3, r0
 80075d2:	75bb      	strb	r3, [r7, #22]
            break;
 80075d4:	e002      	b.n	80075dc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80075d6:	2300      	movs	r3, #0
 80075d8:	75bb      	strb	r3, [r7, #22]
            break;
 80075da:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80075dc:	7dbb      	ldrb	r3, [r7, #22]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d119      	bne.n	8007616 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	2b03      	cmp	r3, #3
 80075ec:	d113      	bne.n	8007616 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80075ee:	7dba      	ldrb	r2, [r7, #22]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	32ae      	adds	r2, #174	; 0xae
 80075f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075f8:	691b      	ldr	r3, [r3, #16]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00b      	beq.n	8007616 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80075fe:	7dba      	ldrb	r2, [r7, #22]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007606:	7dba      	ldrb	r2, [r7, #22]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	32ae      	adds	r2, #174	; 0xae
 800760c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007610:	691b      	ldr	r3, [r3, #16]
 8007612:	68f8      	ldr	r0, [r7, #12]
 8007614:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007616:	68f8      	ldr	r0, [r7, #12]
 8007618:	f001 f94a 	bl	80088b0 <USBD_CtlSendStatus>
 800761c:	e032      	b.n	8007684 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800761e:	7afb      	ldrb	r3, [r7, #11]
 8007620:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007624:	b2db      	uxtb	r3, r3
 8007626:	4619      	mov	r1, r3
 8007628:	68f8      	ldr	r0, [r7, #12]
 800762a:	f000 fa31 	bl	8007a90 <USBD_CoreFindEP>
 800762e:	4603      	mov	r3, r0
 8007630:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007632:	7dbb      	ldrb	r3, [r7, #22]
 8007634:	2bff      	cmp	r3, #255	; 0xff
 8007636:	d025      	beq.n	8007684 <USBD_LL_DataOutStage+0x15c>
 8007638:	7dbb      	ldrb	r3, [r7, #22]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d122      	bne.n	8007684 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007644:	b2db      	uxtb	r3, r3
 8007646:	2b03      	cmp	r3, #3
 8007648:	d117      	bne.n	800767a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800764a:	7dba      	ldrb	r2, [r7, #22]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	32ae      	adds	r2, #174	; 0xae
 8007650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007654:	699b      	ldr	r3, [r3, #24]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d00f      	beq.n	800767a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800765a:	7dba      	ldrb	r2, [r7, #22]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007662:	7dba      	ldrb	r2, [r7, #22]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	32ae      	adds	r2, #174	; 0xae
 8007668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800766c:	699b      	ldr	r3, [r3, #24]
 800766e:	7afa      	ldrb	r2, [r7, #11]
 8007670:	4611      	mov	r1, r2
 8007672:	68f8      	ldr	r0, [r7, #12]
 8007674:	4798      	blx	r3
 8007676:	4603      	mov	r3, r0
 8007678:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800767a:	7dfb      	ldrb	r3, [r7, #23]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d001      	beq.n	8007684 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007680:	7dfb      	ldrb	r3, [r7, #23]
 8007682:	e000      	b.n	8007686 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	3718      	adds	r7, #24
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}

0800768e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800768e:	b580      	push	{r7, lr}
 8007690:	b086      	sub	sp, #24
 8007692:	af00      	add	r7, sp, #0
 8007694:	60f8      	str	r0, [r7, #12]
 8007696:	460b      	mov	r3, r1
 8007698:	607a      	str	r2, [r7, #4]
 800769a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800769c:	7afb      	ldrb	r3, [r7, #11]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d16f      	bne.n	8007782 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	3314      	adds	r3, #20
 80076a6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	d15a      	bne.n	8007768 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	689a      	ldr	r2, [r3, #8]
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d914      	bls.n	80076e8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	689a      	ldr	r2, [r3, #8]
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	1ad2      	subs	r2, r2, r3
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	461a      	mov	r2, r3
 80076d2:	6879      	ldr	r1, [r7, #4]
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f001 f8ac 	bl	8008832 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80076da:	2300      	movs	r3, #0
 80076dc:	2200      	movs	r2, #0
 80076de:	2100      	movs	r1, #0
 80076e0:	68f8      	ldr	r0, [r7, #12]
 80076e2:	f001 fdad 	bl	8009240 <USBD_LL_PrepareReceive>
 80076e6:	e03f      	b.n	8007768 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	68da      	ldr	r2, [r3, #12]
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d11c      	bne.n	800772e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	685a      	ldr	r2, [r3, #4]
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d316      	bcc.n	800772e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	685a      	ldr	r2, [r3, #4]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800770a:	429a      	cmp	r2, r3
 800770c:	d20f      	bcs.n	800772e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800770e:	2200      	movs	r2, #0
 8007710:	2100      	movs	r1, #0
 8007712:	68f8      	ldr	r0, [r7, #12]
 8007714:	f001 f88d 	bl	8008832 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2200      	movs	r2, #0
 800771c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007720:	2300      	movs	r3, #0
 8007722:	2200      	movs	r2, #0
 8007724:	2100      	movs	r1, #0
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	f001 fd8a 	bl	8009240 <USBD_LL_PrepareReceive>
 800772c:	e01c      	b.n	8007768 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007734:	b2db      	uxtb	r3, r3
 8007736:	2b03      	cmp	r3, #3
 8007738:	d10f      	bne.n	800775a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007740:	68db      	ldr	r3, [r3, #12]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d009      	beq.n	800775a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2200      	movs	r2, #0
 800774a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	68f8      	ldr	r0, [r7, #12]
 8007758:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800775a:	2180      	movs	r1, #128	; 0x80
 800775c:	68f8      	ldr	r0, [r7, #12]
 800775e:	f001 fcc5 	bl	80090ec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007762:	68f8      	ldr	r0, [r7, #12]
 8007764:	f001 f8b7 	bl	80088d6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d03a      	beq.n	80077e8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007772:	68f8      	ldr	r0, [r7, #12]
 8007774:	f7ff fe42 	bl	80073fc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2200      	movs	r2, #0
 800777c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007780:	e032      	b.n	80077e8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007782:	7afb      	ldrb	r3, [r7, #11]
 8007784:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007788:	b2db      	uxtb	r3, r3
 800778a:	4619      	mov	r1, r3
 800778c:	68f8      	ldr	r0, [r7, #12]
 800778e:	f000 f97f 	bl	8007a90 <USBD_CoreFindEP>
 8007792:	4603      	mov	r3, r0
 8007794:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007796:	7dfb      	ldrb	r3, [r7, #23]
 8007798:	2bff      	cmp	r3, #255	; 0xff
 800779a:	d025      	beq.n	80077e8 <USBD_LL_DataInStage+0x15a>
 800779c:	7dfb      	ldrb	r3, [r7, #23]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d122      	bne.n	80077e8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	2b03      	cmp	r3, #3
 80077ac:	d11c      	bne.n	80077e8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80077ae:	7dfa      	ldrb	r2, [r7, #23]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	32ae      	adds	r2, #174	; 0xae
 80077b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077b8:	695b      	ldr	r3, [r3, #20]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d014      	beq.n	80077e8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80077be:	7dfa      	ldrb	r2, [r7, #23]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80077c6:	7dfa      	ldrb	r2, [r7, #23]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	32ae      	adds	r2, #174	; 0xae
 80077cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077d0:	695b      	ldr	r3, [r3, #20]
 80077d2:	7afa      	ldrb	r2, [r7, #11]
 80077d4:	4611      	mov	r1, r2
 80077d6:	68f8      	ldr	r0, [r7, #12]
 80077d8:	4798      	blx	r3
 80077da:	4603      	mov	r3, r0
 80077dc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80077de:	7dbb      	ldrb	r3, [r7, #22]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d001      	beq.n	80077e8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80077e4:	7dbb      	ldrb	r3, [r7, #22]
 80077e6:	e000      	b.n	80077ea <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80077e8:	2300      	movs	r3, #0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3718      	adds	r7, #24
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}

080077f2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b084      	sub	sp, #16
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80077fa:	2300      	movs	r3, #0
 80077fc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2201      	movs	r2, #1
 8007802:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800782a:	2b00      	cmp	r3, #0
 800782c:	d014      	beq.n	8007858 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d00e      	beq.n	8007858 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	6852      	ldr	r2, [r2, #4]
 8007846:	b2d2      	uxtb	r2, r2
 8007848:	4611      	mov	r1, r2
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	4798      	blx	r3
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d001      	beq.n	8007858 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007854:	2303      	movs	r3, #3
 8007856:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007858:	2340      	movs	r3, #64	; 0x40
 800785a:	2200      	movs	r2, #0
 800785c:	2100      	movs	r1, #0
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f001 fbff 	bl	8009062 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2201      	movs	r2, #1
 8007868:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2240      	movs	r2, #64	; 0x40
 8007870:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007874:	2340      	movs	r3, #64	; 0x40
 8007876:	2200      	movs	r2, #0
 8007878:	2180      	movs	r1, #128	; 0x80
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f001 fbf1 	bl	8009062 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2240      	movs	r2, #64	; 0x40
 800788a:	621a      	str	r2, [r3, #32]

  return ret;
 800788c:	7bfb      	ldrb	r3, [r7, #15]
}
 800788e:	4618      	mov	r0, r3
 8007890:	3710      	adds	r7, #16
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}

08007896 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007896:	b480      	push	{r7}
 8007898:	b083      	sub	sp, #12
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
 800789e:	460b      	mov	r3, r1
 80078a0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	78fa      	ldrb	r2, [r7, #3]
 80078a6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80078a8:	2300      	movs	r3, #0
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	370c      	adds	r7, #12
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr

080078b6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80078b6:	b480      	push	{r7}
 80078b8:	b083      	sub	sp, #12
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078c4:	b2da      	uxtb	r2, r3
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2204      	movs	r2, #4
 80078d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	370c      	adds	r7, #12
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr

080078e2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80078e2:	b480      	push	{r7}
 80078e4:	b083      	sub	sp, #12
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	2b04      	cmp	r3, #4
 80078f4:	d106      	bne.n	8007904 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80078fc:	b2da      	uxtb	r2, r3
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007904:	2300      	movs	r3, #0
}
 8007906:	4618      	mov	r0, r3
 8007908:	370c      	adds	r7, #12
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr

08007912 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007912:	b580      	push	{r7, lr}
 8007914:	b082      	sub	sp, #8
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007920:	b2db      	uxtb	r3, r3
 8007922:	2b03      	cmp	r3, #3
 8007924:	d110      	bne.n	8007948 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800792c:	2b00      	cmp	r3, #0
 800792e:	d00b      	beq.n	8007948 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007936:	69db      	ldr	r3, [r3, #28]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d005      	beq.n	8007948 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007942:	69db      	ldr	r3, [r3, #28]
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007948:	2300      	movs	r3, #0
}
 800794a:	4618      	mov	r0, r3
 800794c:	3708      	adds	r7, #8
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007952:	b580      	push	{r7, lr}
 8007954:	b082      	sub	sp, #8
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
 800795a:	460b      	mov	r3, r1
 800795c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	32ae      	adds	r2, #174	; 0xae
 8007968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d101      	bne.n	8007974 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007970:	2303      	movs	r3, #3
 8007972:	e01c      	b.n	80079ae <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800797a:	b2db      	uxtb	r3, r3
 800797c:	2b03      	cmp	r3, #3
 800797e:	d115      	bne.n	80079ac <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	32ae      	adds	r2, #174	; 0xae
 800798a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800798e:	6a1b      	ldr	r3, [r3, #32]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d00b      	beq.n	80079ac <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	32ae      	adds	r2, #174	; 0xae
 800799e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079a2:	6a1b      	ldr	r3, [r3, #32]
 80079a4:	78fa      	ldrb	r2, [r7, #3]
 80079a6:	4611      	mov	r1, r2
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80079ac:	2300      	movs	r3, #0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3708      	adds	r7, #8
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b082      	sub	sp, #8
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
 80079be:	460b      	mov	r3, r1
 80079c0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	32ae      	adds	r2, #174	; 0xae
 80079cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d101      	bne.n	80079d8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80079d4:	2303      	movs	r3, #3
 80079d6:	e01c      	b.n	8007a12 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	2b03      	cmp	r3, #3
 80079e2:	d115      	bne.n	8007a10 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	32ae      	adds	r2, #174	; 0xae
 80079ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d00b      	beq.n	8007a10 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	32ae      	adds	r2, #174	; 0xae
 8007a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a08:	78fa      	ldrb	r2, [r7, #3]
 8007a0a:	4611      	mov	r1, r2
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007a10:	2300      	movs	r3, #0
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3708      	adds	r7, #8
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007a1a:	b480      	push	{r7}
 8007a1c:	b083      	sub	sp, #12
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007a22:	2300      	movs	r3, #0
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d00e      	beq.n	8007a6c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	6852      	ldr	r2, [r2, #4]
 8007a5a:	b2d2      	uxtb	r2, r2
 8007a5c:	4611      	mov	r1, r2
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	4798      	blx	r3
 8007a62:	4603      	mov	r3, r0
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d001      	beq.n	8007a6c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007a68:	2303      	movs	r3, #3
 8007a6a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3710      	adds	r7, #16
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}

08007a76 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007a76:	b480      	push	{r7}
 8007a78:	b083      	sub	sp, #12
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
 8007a7e:	460b      	mov	r3, r1
 8007a80:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007a82:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	370c      	adds	r7, #12
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	460b      	mov	r3, r1
 8007a9a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007a9c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	370c      	adds	r7, #12
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr

08007aaa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b086      	sub	sp, #24
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	885b      	ldrh	r3, [r3, #2]
 8007ac6:	b29a      	uxth	r2, r3
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d920      	bls.n	8007b14 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007ada:	e013      	b.n	8007b04 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007adc:	f107 030a 	add.w	r3, r7, #10
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	6978      	ldr	r0, [r7, #20]
 8007ae4:	f000 f81b 	bl	8007b1e <USBD_GetNextDesc>
 8007ae8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	785b      	ldrb	r3, [r3, #1]
 8007aee:	2b05      	cmp	r3, #5
 8007af0:	d108      	bne.n	8007b04 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	789b      	ldrb	r3, [r3, #2]
 8007afa:	78fa      	ldrb	r2, [r7, #3]
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d008      	beq.n	8007b12 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007b00:	2300      	movs	r3, #0
 8007b02:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	885b      	ldrh	r3, [r3, #2]
 8007b08:	b29a      	uxth	r2, r3
 8007b0a:	897b      	ldrh	r3, [r7, #10]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d8e5      	bhi.n	8007adc <USBD_GetEpDesc+0x32>
 8007b10:	e000      	b.n	8007b14 <USBD_GetEpDesc+0x6a>
          break;
 8007b12:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007b14:	693b      	ldr	r3, [r7, #16]
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3718      	adds	r7, #24
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}

08007b1e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007b1e:	b480      	push	{r7}
 8007b20:	b085      	sub	sp, #20
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
 8007b26:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	881a      	ldrh	r2, [r3, #0]
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	4413      	add	r3, r2
 8007b38:	b29a      	uxth	r2, r3
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	461a      	mov	r2, r3
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	4413      	add	r3, r2
 8007b48:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3714      	adds	r7, #20
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr

08007b58 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b087      	sub	sp, #28
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007b76:	8a3b      	ldrh	r3, [r7, #16]
 8007b78:	021b      	lsls	r3, r3, #8
 8007b7a:	b21a      	sxth	r2, r3
 8007b7c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007b80:	4313      	orrs	r3, r2
 8007b82:	b21b      	sxth	r3, r3
 8007b84:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007b86:	89fb      	ldrh	r3, [r7, #14]
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	371c      	adds	r7, #28
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007baa:	2b40      	cmp	r3, #64	; 0x40
 8007bac:	d005      	beq.n	8007bba <USBD_StdDevReq+0x26>
 8007bae:	2b40      	cmp	r3, #64	; 0x40
 8007bb0:	d857      	bhi.n	8007c62 <USBD_StdDevReq+0xce>
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d00f      	beq.n	8007bd6 <USBD_StdDevReq+0x42>
 8007bb6:	2b20      	cmp	r3, #32
 8007bb8:	d153      	bne.n	8007c62 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	32ae      	adds	r2, #174	; 0xae
 8007bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	6839      	ldr	r1, [r7, #0]
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	4798      	blx	r3
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8007bd4:	e04a      	b.n	8007c6c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	785b      	ldrb	r3, [r3, #1]
 8007bda:	2b09      	cmp	r3, #9
 8007bdc:	d83b      	bhi.n	8007c56 <USBD_StdDevReq+0xc2>
 8007bde:	a201      	add	r2, pc, #4	; (adr r2, 8007be4 <USBD_StdDevReq+0x50>)
 8007be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be4:	08007c39 	.word	0x08007c39
 8007be8:	08007c4d 	.word	0x08007c4d
 8007bec:	08007c57 	.word	0x08007c57
 8007bf0:	08007c43 	.word	0x08007c43
 8007bf4:	08007c57 	.word	0x08007c57
 8007bf8:	08007c17 	.word	0x08007c17
 8007bfc:	08007c0d 	.word	0x08007c0d
 8007c00:	08007c57 	.word	0x08007c57
 8007c04:	08007c2f 	.word	0x08007c2f
 8007c08:	08007c21 	.word	0x08007c21
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007c0c:	6839      	ldr	r1, [r7, #0]
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 fa3c 	bl	800808c <USBD_GetDescriptor>
          break;
 8007c14:	e024      	b.n	8007c60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007c16:	6839      	ldr	r1, [r7, #0]
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 fba1 	bl	8008360 <USBD_SetAddress>
          break;
 8007c1e:	e01f      	b.n	8007c60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007c20:	6839      	ldr	r1, [r7, #0]
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 fbe0 	bl	80083e8 <USBD_SetConfig>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	73fb      	strb	r3, [r7, #15]
          break;
 8007c2c:	e018      	b.n	8007c60 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007c2e:	6839      	ldr	r1, [r7, #0]
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 fc83 	bl	800853c <USBD_GetConfig>
          break;
 8007c36:	e013      	b.n	8007c60 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007c38:	6839      	ldr	r1, [r7, #0]
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 fcb4 	bl	80085a8 <USBD_GetStatus>
          break;
 8007c40:	e00e      	b.n	8007c60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007c42:	6839      	ldr	r1, [r7, #0]
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 fce3 	bl	8008610 <USBD_SetFeature>
          break;
 8007c4a:	e009      	b.n	8007c60 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007c4c:	6839      	ldr	r1, [r7, #0]
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 fd07 	bl	8008662 <USBD_ClrFeature>
          break;
 8007c54:	e004      	b.n	8007c60 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007c56:	6839      	ldr	r1, [r7, #0]
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f000 fd5e 	bl	800871a <USBD_CtlError>
          break;
 8007c5e:	bf00      	nop
      }
      break;
 8007c60:	e004      	b.n	8007c6c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007c62:	6839      	ldr	r1, [r7, #0]
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 fd58 	bl	800871a <USBD_CtlError>
      break;
 8007c6a:	bf00      	nop
  }

  return ret;
 8007c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3710      	adds	r7, #16
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
 8007c76:	bf00      	nop

08007c78 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c82:	2300      	movs	r3, #0
 8007c84:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c8e:	2b40      	cmp	r3, #64	; 0x40
 8007c90:	d005      	beq.n	8007c9e <USBD_StdItfReq+0x26>
 8007c92:	2b40      	cmp	r3, #64	; 0x40
 8007c94:	d852      	bhi.n	8007d3c <USBD_StdItfReq+0xc4>
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d001      	beq.n	8007c9e <USBD_StdItfReq+0x26>
 8007c9a:	2b20      	cmp	r3, #32
 8007c9c:	d14e      	bne.n	8007d3c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	3b01      	subs	r3, #1
 8007ca8:	2b02      	cmp	r3, #2
 8007caa:	d840      	bhi.n	8007d2e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	889b      	ldrh	r3, [r3, #4]
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d836      	bhi.n	8007d24 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	889b      	ldrh	r3, [r3, #4]
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f7ff fed9 	bl	8007a76 <USBD_CoreFindIF>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007cc8:	7bbb      	ldrb	r3, [r7, #14]
 8007cca:	2bff      	cmp	r3, #255	; 0xff
 8007ccc:	d01d      	beq.n	8007d0a <USBD_StdItfReq+0x92>
 8007cce:	7bbb      	ldrb	r3, [r7, #14]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d11a      	bne.n	8007d0a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007cd4:	7bba      	ldrb	r2, [r7, #14]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	32ae      	adds	r2, #174	; 0xae
 8007cda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d00f      	beq.n	8007d04 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007ce4:	7bba      	ldrb	r2, [r7, #14]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007cec:	7bba      	ldrb	r2, [r7, #14]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	32ae      	adds	r2, #174	; 0xae
 8007cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	6839      	ldr	r1, [r7, #0]
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	4798      	blx	r3
 8007cfe:	4603      	mov	r3, r0
 8007d00:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007d02:	e004      	b.n	8007d0e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007d04:	2303      	movs	r3, #3
 8007d06:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007d08:	e001      	b.n	8007d0e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007d0a:	2303      	movs	r3, #3
 8007d0c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	88db      	ldrh	r3, [r3, #6]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d110      	bne.n	8007d38 <USBD_StdItfReq+0xc0>
 8007d16:	7bfb      	ldrb	r3, [r7, #15]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d10d      	bne.n	8007d38 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 fdc7 	bl	80088b0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007d22:	e009      	b.n	8007d38 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007d24:	6839      	ldr	r1, [r7, #0]
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 fcf7 	bl	800871a <USBD_CtlError>
          break;
 8007d2c:	e004      	b.n	8007d38 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007d2e:	6839      	ldr	r1, [r7, #0]
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 fcf2 	bl	800871a <USBD_CtlError>
          break;
 8007d36:	e000      	b.n	8007d3a <USBD_StdItfReq+0xc2>
          break;
 8007d38:	bf00      	nop
      }
      break;
 8007d3a:	e004      	b.n	8007d46 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007d3c:	6839      	ldr	r1, [r7, #0]
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 fceb 	bl	800871a <USBD_CtlError>
      break;
 8007d44:	bf00      	nop
  }

  return ret;
 8007d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3710      	adds	r7, #16
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	889b      	ldrh	r3, [r3, #4]
 8007d62:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d6c:	2b40      	cmp	r3, #64	; 0x40
 8007d6e:	d007      	beq.n	8007d80 <USBD_StdEPReq+0x30>
 8007d70:	2b40      	cmp	r3, #64	; 0x40
 8007d72:	f200 817f 	bhi.w	8008074 <USBD_StdEPReq+0x324>
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d02a      	beq.n	8007dd0 <USBD_StdEPReq+0x80>
 8007d7a:	2b20      	cmp	r3, #32
 8007d7c:	f040 817a 	bne.w	8008074 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007d80:	7bbb      	ldrb	r3, [r7, #14]
 8007d82:	4619      	mov	r1, r3
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f7ff fe83 	bl	8007a90 <USBD_CoreFindEP>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d8e:	7b7b      	ldrb	r3, [r7, #13]
 8007d90:	2bff      	cmp	r3, #255	; 0xff
 8007d92:	f000 8174 	beq.w	800807e <USBD_StdEPReq+0x32e>
 8007d96:	7b7b      	ldrb	r3, [r7, #13]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f040 8170 	bne.w	800807e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007d9e:	7b7a      	ldrb	r2, [r7, #13]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007da6:	7b7a      	ldrb	r2, [r7, #13]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	32ae      	adds	r2, #174	; 0xae
 8007dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	f000 8163 	beq.w	800807e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007db8:	7b7a      	ldrb	r2, [r7, #13]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	32ae      	adds	r2, #174	; 0xae
 8007dbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	6839      	ldr	r1, [r7, #0]
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	4798      	blx	r3
 8007dca:	4603      	mov	r3, r0
 8007dcc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007dce:	e156      	b.n	800807e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	785b      	ldrb	r3, [r3, #1]
 8007dd4:	2b03      	cmp	r3, #3
 8007dd6:	d008      	beq.n	8007dea <USBD_StdEPReq+0x9a>
 8007dd8:	2b03      	cmp	r3, #3
 8007dda:	f300 8145 	bgt.w	8008068 <USBD_StdEPReq+0x318>
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	f000 809b 	beq.w	8007f1a <USBD_StdEPReq+0x1ca>
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d03c      	beq.n	8007e62 <USBD_StdEPReq+0x112>
 8007de8:	e13e      	b.n	8008068 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	2b02      	cmp	r3, #2
 8007df4:	d002      	beq.n	8007dfc <USBD_StdEPReq+0xac>
 8007df6:	2b03      	cmp	r3, #3
 8007df8:	d016      	beq.n	8007e28 <USBD_StdEPReq+0xd8>
 8007dfa:	e02c      	b.n	8007e56 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007dfc:	7bbb      	ldrb	r3, [r7, #14]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d00d      	beq.n	8007e1e <USBD_StdEPReq+0xce>
 8007e02:	7bbb      	ldrb	r3, [r7, #14]
 8007e04:	2b80      	cmp	r3, #128	; 0x80
 8007e06:	d00a      	beq.n	8007e1e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e08:	7bbb      	ldrb	r3, [r7, #14]
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f001 f96d 	bl	80090ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e12:	2180      	movs	r1, #128	; 0x80
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f001 f969 	bl	80090ec <USBD_LL_StallEP>
 8007e1a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e1c:	e020      	b.n	8007e60 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007e1e:	6839      	ldr	r1, [r7, #0]
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 fc7a 	bl	800871a <USBD_CtlError>
              break;
 8007e26:	e01b      	b.n	8007e60 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	885b      	ldrh	r3, [r3, #2]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d10e      	bne.n	8007e4e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007e30:	7bbb      	ldrb	r3, [r7, #14]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d00b      	beq.n	8007e4e <USBD_StdEPReq+0xfe>
 8007e36:	7bbb      	ldrb	r3, [r7, #14]
 8007e38:	2b80      	cmp	r3, #128	; 0x80
 8007e3a:	d008      	beq.n	8007e4e <USBD_StdEPReq+0xfe>
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	88db      	ldrh	r3, [r3, #6]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d104      	bne.n	8007e4e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e44:	7bbb      	ldrb	r3, [r7, #14]
 8007e46:	4619      	mov	r1, r3
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f001 f94f 	bl	80090ec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 fd2e 	bl	80088b0 <USBD_CtlSendStatus>

              break;
 8007e54:	e004      	b.n	8007e60 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007e56:	6839      	ldr	r1, [r7, #0]
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 fc5e 	bl	800871a <USBD_CtlError>
              break;
 8007e5e:	bf00      	nop
          }
          break;
 8007e60:	e107      	b.n	8008072 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	2b02      	cmp	r3, #2
 8007e6c:	d002      	beq.n	8007e74 <USBD_StdEPReq+0x124>
 8007e6e:	2b03      	cmp	r3, #3
 8007e70:	d016      	beq.n	8007ea0 <USBD_StdEPReq+0x150>
 8007e72:	e04b      	b.n	8007f0c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e74:	7bbb      	ldrb	r3, [r7, #14]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d00d      	beq.n	8007e96 <USBD_StdEPReq+0x146>
 8007e7a:	7bbb      	ldrb	r3, [r7, #14]
 8007e7c:	2b80      	cmp	r3, #128	; 0x80
 8007e7e:	d00a      	beq.n	8007e96 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e80:	7bbb      	ldrb	r3, [r7, #14]
 8007e82:	4619      	mov	r1, r3
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f001 f931 	bl	80090ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e8a:	2180      	movs	r1, #128	; 0x80
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f001 f92d 	bl	80090ec <USBD_LL_StallEP>
 8007e92:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e94:	e040      	b.n	8007f18 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007e96:	6839      	ldr	r1, [r7, #0]
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 fc3e 	bl	800871a <USBD_CtlError>
              break;
 8007e9e:	e03b      	b.n	8007f18 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	885b      	ldrh	r3, [r3, #2]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d136      	bne.n	8007f16 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007ea8:	7bbb      	ldrb	r3, [r7, #14]
 8007eaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d004      	beq.n	8007ebc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007eb2:	7bbb      	ldrb	r3, [r7, #14]
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f001 f937 	bl	800912a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 fcf7 	bl	80088b0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007ec2:	7bbb      	ldrb	r3, [r7, #14]
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f7ff fde2 	bl	8007a90 <USBD_CoreFindEP>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ed0:	7b7b      	ldrb	r3, [r7, #13]
 8007ed2:	2bff      	cmp	r3, #255	; 0xff
 8007ed4:	d01f      	beq.n	8007f16 <USBD_StdEPReq+0x1c6>
 8007ed6:	7b7b      	ldrb	r3, [r7, #13]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d11c      	bne.n	8007f16 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007edc:	7b7a      	ldrb	r2, [r7, #13]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007ee4:	7b7a      	ldrb	r2, [r7, #13]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	32ae      	adds	r2, #174	; 0xae
 8007eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d010      	beq.n	8007f16 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007ef4:	7b7a      	ldrb	r2, [r7, #13]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	32ae      	adds	r2, #174	; 0xae
 8007efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	6839      	ldr	r1, [r7, #0]
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	4798      	blx	r3
 8007f06:	4603      	mov	r3, r0
 8007f08:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007f0a:	e004      	b.n	8007f16 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007f0c:	6839      	ldr	r1, [r7, #0]
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 fc03 	bl	800871a <USBD_CtlError>
              break;
 8007f14:	e000      	b.n	8007f18 <USBD_StdEPReq+0x1c8>
              break;
 8007f16:	bf00      	nop
          }
          break;
 8007f18:	e0ab      	b.n	8008072 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	2b02      	cmp	r3, #2
 8007f24:	d002      	beq.n	8007f2c <USBD_StdEPReq+0x1dc>
 8007f26:	2b03      	cmp	r3, #3
 8007f28:	d032      	beq.n	8007f90 <USBD_StdEPReq+0x240>
 8007f2a:	e097      	b.n	800805c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f2c:	7bbb      	ldrb	r3, [r7, #14]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d007      	beq.n	8007f42 <USBD_StdEPReq+0x1f2>
 8007f32:	7bbb      	ldrb	r3, [r7, #14]
 8007f34:	2b80      	cmp	r3, #128	; 0x80
 8007f36:	d004      	beq.n	8007f42 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007f38:	6839      	ldr	r1, [r7, #0]
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 fbed 	bl	800871a <USBD_CtlError>
                break;
 8007f40:	e091      	b.n	8008066 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	da0b      	bge.n	8007f62 <USBD_StdEPReq+0x212>
 8007f4a:	7bbb      	ldrb	r3, [r7, #14]
 8007f4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f50:	4613      	mov	r3, r2
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	4413      	add	r3, r2
 8007f56:	009b      	lsls	r3, r3, #2
 8007f58:	3310      	adds	r3, #16
 8007f5a:	687a      	ldr	r2, [r7, #4]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	3304      	adds	r3, #4
 8007f60:	e00b      	b.n	8007f7a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f62:	7bbb      	ldrb	r3, [r7, #14]
 8007f64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f68:	4613      	mov	r3, r2
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	4413      	add	r3, r2
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	4413      	add	r3, r2
 8007f78:	3304      	adds	r3, #4
 8007f7a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	2202      	movs	r2, #2
 8007f86:	4619      	mov	r1, r3
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 fc37 	bl	80087fc <USBD_CtlSendData>
              break;
 8007f8e:	e06a      	b.n	8008066 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007f90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	da11      	bge.n	8007fbc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007f98:	7bbb      	ldrb	r3, [r7, #14]
 8007f9a:	f003 020f 	and.w	r2, r3, #15
 8007f9e:	6879      	ldr	r1, [r7, #4]
 8007fa0:	4613      	mov	r3, r2
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	4413      	add	r3, r2
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	440b      	add	r3, r1
 8007faa:	3324      	adds	r3, #36	; 0x24
 8007fac:	881b      	ldrh	r3, [r3, #0]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d117      	bne.n	8007fe2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007fb2:	6839      	ldr	r1, [r7, #0]
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 fbb0 	bl	800871a <USBD_CtlError>
                  break;
 8007fba:	e054      	b.n	8008066 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007fbc:	7bbb      	ldrb	r3, [r7, #14]
 8007fbe:	f003 020f 	and.w	r2, r3, #15
 8007fc2:	6879      	ldr	r1, [r7, #4]
 8007fc4:	4613      	mov	r3, r2
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	4413      	add	r3, r2
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	440b      	add	r3, r1
 8007fce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007fd2:	881b      	ldrh	r3, [r3, #0]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d104      	bne.n	8007fe2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007fd8:	6839      	ldr	r1, [r7, #0]
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 fb9d 	bl	800871a <USBD_CtlError>
                  break;
 8007fe0:	e041      	b.n	8008066 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fe2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	da0b      	bge.n	8008002 <USBD_StdEPReq+0x2b2>
 8007fea:	7bbb      	ldrb	r3, [r7, #14]
 8007fec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ff0:	4613      	mov	r3, r2
 8007ff2:	009b      	lsls	r3, r3, #2
 8007ff4:	4413      	add	r3, r2
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	3310      	adds	r3, #16
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	3304      	adds	r3, #4
 8008000:	e00b      	b.n	800801a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008002:	7bbb      	ldrb	r3, [r7, #14]
 8008004:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008008:	4613      	mov	r3, r2
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	4413      	add	r3, r2
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	4413      	add	r3, r2
 8008018:	3304      	adds	r3, #4
 800801a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800801c:	7bbb      	ldrb	r3, [r7, #14]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d002      	beq.n	8008028 <USBD_StdEPReq+0x2d8>
 8008022:	7bbb      	ldrb	r3, [r7, #14]
 8008024:	2b80      	cmp	r3, #128	; 0x80
 8008026:	d103      	bne.n	8008030 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	2200      	movs	r2, #0
 800802c:	601a      	str	r2, [r3, #0]
 800802e:	e00e      	b.n	800804e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008030:	7bbb      	ldrb	r3, [r7, #14]
 8008032:	4619      	mov	r1, r3
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f001 f897 	bl	8009168 <USBD_LL_IsStallEP>
 800803a:	4603      	mov	r3, r0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d003      	beq.n	8008048 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	2201      	movs	r2, #1
 8008044:	601a      	str	r2, [r3, #0]
 8008046:	e002      	b.n	800804e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	2200      	movs	r2, #0
 800804c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	2202      	movs	r2, #2
 8008052:	4619      	mov	r1, r3
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 fbd1 	bl	80087fc <USBD_CtlSendData>
              break;
 800805a:	e004      	b.n	8008066 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800805c:	6839      	ldr	r1, [r7, #0]
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 fb5b 	bl	800871a <USBD_CtlError>
              break;
 8008064:	bf00      	nop
          }
          break;
 8008066:	e004      	b.n	8008072 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008068:	6839      	ldr	r1, [r7, #0]
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 fb55 	bl	800871a <USBD_CtlError>
          break;
 8008070:	bf00      	nop
      }
      break;
 8008072:	e005      	b.n	8008080 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008074:	6839      	ldr	r1, [r7, #0]
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 fb4f 	bl	800871a <USBD_CtlError>
      break;
 800807c:	e000      	b.n	8008080 <USBD_StdEPReq+0x330>
      break;
 800807e:	bf00      	nop
  }

  return ret;
 8008080:	7bfb      	ldrb	r3, [r7, #15]
}
 8008082:	4618      	mov	r0, r3
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
	...

0800808c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008096:	2300      	movs	r3, #0
 8008098:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800809a:	2300      	movs	r3, #0
 800809c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800809e:	2300      	movs	r3, #0
 80080a0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	885b      	ldrh	r3, [r3, #2]
 80080a6:	0a1b      	lsrs	r3, r3, #8
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	3b01      	subs	r3, #1
 80080ac:	2b06      	cmp	r3, #6
 80080ae:	f200 8128 	bhi.w	8008302 <USBD_GetDescriptor+0x276>
 80080b2:	a201      	add	r2, pc, #4	; (adr r2, 80080b8 <USBD_GetDescriptor+0x2c>)
 80080b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b8:	080080d5 	.word	0x080080d5
 80080bc:	080080ed 	.word	0x080080ed
 80080c0:	0800812d 	.word	0x0800812d
 80080c4:	08008303 	.word	0x08008303
 80080c8:	08008303 	.word	0x08008303
 80080cc:	080082a3 	.word	0x080082a3
 80080d0:	080082cf 	.word	0x080082cf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	7c12      	ldrb	r2, [r2, #16]
 80080e0:	f107 0108 	add.w	r1, r7, #8
 80080e4:	4610      	mov	r0, r2
 80080e6:	4798      	blx	r3
 80080e8:	60f8      	str	r0, [r7, #12]
      break;
 80080ea:	e112      	b.n	8008312 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	7c1b      	ldrb	r3, [r3, #16]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d10d      	bne.n	8008110 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080fc:	f107 0208 	add.w	r2, r7, #8
 8008100:	4610      	mov	r0, r2
 8008102:	4798      	blx	r3
 8008104:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	3301      	adds	r3, #1
 800810a:	2202      	movs	r2, #2
 800810c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800810e:	e100      	b.n	8008312 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008118:	f107 0208 	add.w	r2, r7, #8
 800811c:	4610      	mov	r0, r2
 800811e:	4798      	blx	r3
 8008120:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	3301      	adds	r3, #1
 8008126:	2202      	movs	r2, #2
 8008128:	701a      	strb	r2, [r3, #0]
      break;
 800812a:	e0f2      	b.n	8008312 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	885b      	ldrh	r3, [r3, #2]
 8008130:	b2db      	uxtb	r3, r3
 8008132:	2b05      	cmp	r3, #5
 8008134:	f200 80ac 	bhi.w	8008290 <USBD_GetDescriptor+0x204>
 8008138:	a201      	add	r2, pc, #4	; (adr r2, 8008140 <USBD_GetDescriptor+0xb4>)
 800813a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800813e:	bf00      	nop
 8008140:	08008159 	.word	0x08008159
 8008144:	0800818d 	.word	0x0800818d
 8008148:	080081c1 	.word	0x080081c1
 800814c:	080081f5 	.word	0x080081f5
 8008150:	08008229 	.word	0x08008229
 8008154:	0800825d 	.word	0x0800825d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d00b      	beq.n	800817c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	7c12      	ldrb	r2, [r2, #16]
 8008170:	f107 0108 	add.w	r1, r7, #8
 8008174:	4610      	mov	r0, r2
 8008176:	4798      	blx	r3
 8008178:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800817a:	e091      	b.n	80082a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800817c:	6839      	ldr	r1, [r7, #0]
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 facb 	bl	800871a <USBD_CtlError>
            err++;
 8008184:	7afb      	ldrb	r3, [r7, #11]
 8008186:	3301      	adds	r3, #1
 8008188:	72fb      	strb	r3, [r7, #11]
          break;
 800818a:	e089      	b.n	80082a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d00b      	beq.n	80081b0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	7c12      	ldrb	r2, [r2, #16]
 80081a4:	f107 0108 	add.w	r1, r7, #8
 80081a8:	4610      	mov	r0, r2
 80081aa:	4798      	blx	r3
 80081ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081ae:	e077      	b.n	80082a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081b0:	6839      	ldr	r1, [r7, #0]
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 fab1 	bl	800871a <USBD_CtlError>
            err++;
 80081b8:	7afb      	ldrb	r3, [r7, #11]
 80081ba:	3301      	adds	r3, #1
 80081bc:	72fb      	strb	r3, [r7, #11]
          break;
 80081be:	e06f      	b.n	80082a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d00b      	beq.n	80081e4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	7c12      	ldrb	r2, [r2, #16]
 80081d8:	f107 0108 	add.w	r1, r7, #8
 80081dc:	4610      	mov	r0, r2
 80081de:	4798      	blx	r3
 80081e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081e2:	e05d      	b.n	80082a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081e4:	6839      	ldr	r1, [r7, #0]
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 fa97 	bl	800871a <USBD_CtlError>
            err++;
 80081ec:	7afb      	ldrb	r3, [r7, #11]
 80081ee:	3301      	adds	r3, #1
 80081f0:	72fb      	strb	r3, [r7, #11]
          break;
 80081f2:	e055      	b.n	80082a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081fa:	691b      	ldr	r3, [r3, #16]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d00b      	beq.n	8008218 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008206:	691b      	ldr	r3, [r3, #16]
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	7c12      	ldrb	r2, [r2, #16]
 800820c:	f107 0108 	add.w	r1, r7, #8
 8008210:	4610      	mov	r0, r2
 8008212:	4798      	blx	r3
 8008214:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008216:	e043      	b.n	80082a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008218:	6839      	ldr	r1, [r7, #0]
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f000 fa7d 	bl	800871a <USBD_CtlError>
            err++;
 8008220:	7afb      	ldrb	r3, [r7, #11]
 8008222:	3301      	adds	r3, #1
 8008224:	72fb      	strb	r3, [r7, #11]
          break;
 8008226:	e03b      	b.n	80082a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800822e:	695b      	ldr	r3, [r3, #20]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d00b      	beq.n	800824c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800823a:	695b      	ldr	r3, [r3, #20]
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	7c12      	ldrb	r2, [r2, #16]
 8008240:	f107 0108 	add.w	r1, r7, #8
 8008244:	4610      	mov	r0, r2
 8008246:	4798      	blx	r3
 8008248:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800824a:	e029      	b.n	80082a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800824c:	6839      	ldr	r1, [r7, #0]
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 fa63 	bl	800871a <USBD_CtlError>
            err++;
 8008254:	7afb      	ldrb	r3, [r7, #11]
 8008256:	3301      	adds	r3, #1
 8008258:	72fb      	strb	r3, [r7, #11]
          break;
 800825a:	e021      	b.n	80082a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008262:	699b      	ldr	r3, [r3, #24]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d00b      	beq.n	8008280 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800826e:	699b      	ldr	r3, [r3, #24]
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	7c12      	ldrb	r2, [r2, #16]
 8008274:	f107 0108 	add.w	r1, r7, #8
 8008278:	4610      	mov	r0, r2
 800827a:	4798      	blx	r3
 800827c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800827e:	e00f      	b.n	80082a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008280:	6839      	ldr	r1, [r7, #0]
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 fa49 	bl	800871a <USBD_CtlError>
            err++;
 8008288:	7afb      	ldrb	r3, [r7, #11]
 800828a:	3301      	adds	r3, #1
 800828c:	72fb      	strb	r3, [r7, #11]
          break;
 800828e:	e007      	b.n	80082a0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008290:	6839      	ldr	r1, [r7, #0]
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 fa41 	bl	800871a <USBD_CtlError>
          err++;
 8008298:	7afb      	ldrb	r3, [r7, #11]
 800829a:	3301      	adds	r3, #1
 800829c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800829e:	bf00      	nop
      }
      break;
 80082a0:	e037      	b.n	8008312 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	7c1b      	ldrb	r3, [r3, #16]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d109      	bne.n	80082be <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082b2:	f107 0208 	add.w	r2, r7, #8
 80082b6:	4610      	mov	r0, r2
 80082b8:	4798      	blx	r3
 80082ba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082bc:	e029      	b.n	8008312 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80082be:	6839      	ldr	r1, [r7, #0]
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 fa2a 	bl	800871a <USBD_CtlError>
        err++;
 80082c6:	7afb      	ldrb	r3, [r7, #11]
 80082c8:	3301      	adds	r3, #1
 80082ca:	72fb      	strb	r3, [r7, #11]
      break;
 80082cc:	e021      	b.n	8008312 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	7c1b      	ldrb	r3, [r3, #16]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d10d      	bne.n	80082f2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082de:	f107 0208 	add.w	r2, r7, #8
 80082e2:	4610      	mov	r0, r2
 80082e4:	4798      	blx	r3
 80082e6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	3301      	adds	r3, #1
 80082ec:	2207      	movs	r2, #7
 80082ee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082f0:	e00f      	b.n	8008312 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80082f2:	6839      	ldr	r1, [r7, #0]
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 fa10 	bl	800871a <USBD_CtlError>
        err++;
 80082fa:	7afb      	ldrb	r3, [r7, #11]
 80082fc:	3301      	adds	r3, #1
 80082fe:	72fb      	strb	r3, [r7, #11]
      break;
 8008300:	e007      	b.n	8008312 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008302:	6839      	ldr	r1, [r7, #0]
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 fa08 	bl	800871a <USBD_CtlError>
      err++;
 800830a:	7afb      	ldrb	r3, [r7, #11]
 800830c:	3301      	adds	r3, #1
 800830e:	72fb      	strb	r3, [r7, #11]
      break;
 8008310:	bf00      	nop
  }

  if (err != 0U)
 8008312:	7afb      	ldrb	r3, [r7, #11]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d11e      	bne.n	8008356 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	88db      	ldrh	r3, [r3, #6]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d016      	beq.n	800834e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008320:	893b      	ldrh	r3, [r7, #8]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d00e      	beq.n	8008344 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	88da      	ldrh	r2, [r3, #6]
 800832a:	893b      	ldrh	r3, [r7, #8]
 800832c:	4293      	cmp	r3, r2
 800832e:	bf28      	it	cs
 8008330:	4613      	movcs	r3, r2
 8008332:	b29b      	uxth	r3, r3
 8008334:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008336:	893b      	ldrh	r3, [r7, #8]
 8008338:	461a      	mov	r2, r3
 800833a:	68f9      	ldr	r1, [r7, #12]
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f000 fa5d 	bl	80087fc <USBD_CtlSendData>
 8008342:	e009      	b.n	8008358 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008344:	6839      	ldr	r1, [r7, #0]
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 f9e7 	bl	800871a <USBD_CtlError>
 800834c:	e004      	b.n	8008358 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 faae 	bl	80088b0 <USBD_CtlSendStatus>
 8008354:	e000      	b.n	8008358 <USBD_GetDescriptor+0x2cc>
    return;
 8008356:	bf00      	nop
  }
}
 8008358:	3710      	adds	r7, #16
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop

08008360 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	889b      	ldrh	r3, [r3, #4]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d131      	bne.n	80083d6 <USBD_SetAddress+0x76>
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	88db      	ldrh	r3, [r3, #6]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d12d      	bne.n	80083d6 <USBD_SetAddress+0x76>
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	885b      	ldrh	r3, [r3, #2]
 800837e:	2b7f      	cmp	r3, #127	; 0x7f
 8008380:	d829      	bhi.n	80083d6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	885b      	ldrh	r3, [r3, #2]
 8008386:	b2db      	uxtb	r3, r3
 8008388:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800838c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008394:	b2db      	uxtb	r3, r3
 8008396:	2b03      	cmp	r3, #3
 8008398:	d104      	bne.n	80083a4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800839a:	6839      	ldr	r1, [r7, #0]
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 f9bc 	bl	800871a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083a2:	e01d      	b.n	80083e0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	7bfa      	ldrb	r2, [r7, #15]
 80083a8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80083ac:	7bfb      	ldrb	r3, [r7, #15]
 80083ae:	4619      	mov	r1, r3
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f000 ff05 	bl	80091c0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 fa7a 	bl	80088b0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80083bc:	7bfb      	ldrb	r3, [r7, #15]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d004      	beq.n	80083cc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2202      	movs	r2, #2
 80083c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083ca:	e009      	b.n	80083e0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2201      	movs	r2, #1
 80083d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083d4:	e004      	b.n	80083e0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80083d6:	6839      	ldr	r1, [r7, #0]
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 f99e 	bl	800871a <USBD_CtlError>
  }
}
 80083de:	bf00      	nop
 80083e0:	bf00      	nop
 80083e2:	3710      	adds	r7, #16
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083f2:	2300      	movs	r3, #0
 80083f4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	885b      	ldrh	r3, [r3, #2]
 80083fa:	b2da      	uxtb	r2, r3
 80083fc:	4b4e      	ldr	r3, [pc, #312]	; (8008538 <USBD_SetConfig+0x150>)
 80083fe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008400:	4b4d      	ldr	r3, [pc, #308]	; (8008538 <USBD_SetConfig+0x150>)
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	2b01      	cmp	r3, #1
 8008406:	d905      	bls.n	8008414 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008408:	6839      	ldr	r1, [r7, #0]
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 f985 	bl	800871a <USBD_CtlError>
    return USBD_FAIL;
 8008410:	2303      	movs	r3, #3
 8008412:	e08c      	b.n	800852e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800841a:	b2db      	uxtb	r3, r3
 800841c:	2b02      	cmp	r3, #2
 800841e:	d002      	beq.n	8008426 <USBD_SetConfig+0x3e>
 8008420:	2b03      	cmp	r3, #3
 8008422:	d029      	beq.n	8008478 <USBD_SetConfig+0x90>
 8008424:	e075      	b.n	8008512 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008426:	4b44      	ldr	r3, [pc, #272]	; (8008538 <USBD_SetConfig+0x150>)
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d020      	beq.n	8008470 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800842e:	4b42      	ldr	r3, [pc, #264]	; (8008538 <USBD_SetConfig+0x150>)
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	461a      	mov	r2, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008438:	4b3f      	ldr	r3, [pc, #252]	; (8008538 <USBD_SetConfig+0x150>)
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	4619      	mov	r1, r3
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f7fe ffe7 	bl	8007412 <USBD_SetClassConfig>
 8008444:	4603      	mov	r3, r0
 8008446:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008448:	7bfb      	ldrb	r3, [r7, #15]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d008      	beq.n	8008460 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800844e:	6839      	ldr	r1, [r7, #0]
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 f962 	bl	800871a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2202      	movs	r2, #2
 800845a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800845e:	e065      	b.n	800852c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 fa25 	bl	80088b0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2203      	movs	r2, #3
 800846a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800846e:	e05d      	b.n	800852c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 fa1d 	bl	80088b0 <USBD_CtlSendStatus>
      break;
 8008476:	e059      	b.n	800852c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008478:	4b2f      	ldr	r3, [pc, #188]	; (8008538 <USBD_SetConfig+0x150>)
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d112      	bne.n	80084a6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2202      	movs	r2, #2
 8008484:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008488:	4b2b      	ldr	r3, [pc, #172]	; (8008538 <USBD_SetConfig+0x150>)
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	461a      	mov	r2, r3
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008492:	4b29      	ldr	r3, [pc, #164]	; (8008538 <USBD_SetConfig+0x150>)
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	4619      	mov	r1, r3
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f7fe ffd6 	bl	800744a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 fa06 	bl	80088b0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80084a4:	e042      	b.n	800852c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80084a6:	4b24      	ldr	r3, [pc, #144]	; (8008538 <USBD_SetConfig+0x150>)
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	461a      	mov	r2, r3
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d02a      	beq.n	800850a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	4619      	mov	r1, r3
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f7fe ffc4 	bl	800744a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80084c2:	4b1d      	ldr	r3, [pc, #116]	; (8008538 <USBD_SetConfig+0x150>)
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	461a      	mov	r2, r3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80084cc:	4b1a      	ldr	r3, [pc, #104]	; (8008538 <USBD_SetConfig+0x150>)
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	4619      	mov	r1, r3
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f7fe ff9d 	bl	8007412 <USBD_SetClassConfig>
 80084d8:	4603      	mov	r3, r0
 80084da:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80084dc:	7bfb      	ldrb	r3, [r7, #15]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d00f      	beq.n	8008502 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80084e2:	6839      	ldr	r1, [r7, #0]
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 f918 	bl	800871a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	4619      	mov	r1, r3
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f7fe ffa9 	bl	800744a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2202      	movs	r2, #2
 80084fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008500:	e014      	b.n	800852c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 f9d4 	bl	80088b0 <USBD_CtlSendStatus>
      break;
 8008508:	e010      	b.n	800852c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 f9d0 	bl	80088b0 <USBD_CtlSendStatus>
      break;
 8008510:	e00c      	b.n	800852c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008512:	6839      	ldr	r1, [r7, #0]
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 f900 	bl	800871a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800851a:	4b07      	ldr	r3, [pc, #28]	; (8008538 <USBD_SetConfig+0x150>)
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	4619      	mov	r1, r3
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f7fe ff92 	bl	800744a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008526:	2303      	movs	r3, #3
 8008528:	73fb      	strb	r3, [r7, #15]
      break;
 800852a:	bf00      	nop
  }

  return ret;
 800852c:	7bfb      	ldrb	r3, [r7, #15]
}
 800852e:	4618      	mov	r0, r3
 8008530:	3710      	adds	r7, #16
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	20000270 	.word	0x20000270

0800853c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b082      	sub	sp, #8
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	88db      	ldrh	r3, [r3, #6]
 800854a:	2b01      	cmp	r3, #1
 800854c:	d004      	beq.n	8008558 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800854e:	6839      	ldr	r1, [r7, #0]
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 f8e2 	bl	800871a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008556:	e023      	b.n	80085a0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800855e:	b2db      	uxtb	r3, r3
 8008560:	2b02      	cmp	r3, #2
 8008562:	dc02      	bgt.n	800856a <USBD_GetConfig+0x2e>
 8008564:	2b00      	cmp	r3, #0
 8008566:	dc03      	bgt.n	8008570 <USBD_GetConfig+0x34>
 8008568:	e015      	b.n	8008596 <USBD_GetConfig+0x5a>
 800856a:	2b03      	cmp	r3, #3
 800856c:	d00b      	beq.n	8008586 <USBD_GetConfig+0x4a>
 800856e:	e012      	b.n	8008596 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2200      	movs	r2, #0
 8008574:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	3308      	adds	r3, #8
 800857a:	2201      	movs	r2, #1
 800857c:	4619      	mov	r1, r3
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 f93c 	bl	80087fc <USBD_CtlSendData>
        break;
 8008584:	e00c      	b.n	80085a0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	3304      	adds	r3, #4
 800858a:	2201      	movs	r2, #1
 800858c:	4619      	mov	r1, r3
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 f934 	bl	80087fc <USBD_CtlSendData>
        break;
 8008594:	e004      	b.n	80085a0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008596:	6839      	ldr	r1, [r7, #0]
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 f8be 	bl	800871a <USBD_CtlError>
        break;
 800859e:	bf00      	nop
}
 80085a0:	bf00      	nop
 80085a2:	3708      	adds	r7, #8
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	3b01      	subs	r3, #1
 80085bc:	2b02      	cmp	r3, #2
 80085be:	d81e      	bhi.n	80085fe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	88db      	ldrh	r3, [r3, #6]
 80085c4:	2b02      	cmp	r3, #2
 80085c6:	d004      	beq.n	80085d2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80085c8:	6839      	ldr	r1, [r7, #0]
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 f8a5 	bl	800871a <USBD_CtlError>
        break;
 80085d0:	e01a      	b.n	8008608 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2201      	movs	r2, #1
 80085d6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d005      	beq.n	80085ee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	68db      	ldr	r3, [r3, #12]
 80085e6:	f043 0202 	orr.w	r2, r3, #2
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	330c      	adds	r3, #12
 80085f2:	2202      	movs	r2, #2
 80085f4:	4619      	mov	r1, r3
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f000 f900 	bl	80087fc <USBD_CtlSendData>
      break;
 80085fc:	e004      	b.n	8008608 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80085fe:	6839      	ldr	r1, [r7, #0]
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 f88a 	bl	800871a <USBD_CtlError>
      break;
 8008606:	bf00      	nop
  }
}
 8008608:	bf00      	nop
 800860a:	3708      	adds	r7, #8
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}

08008610 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b082      	sub	sp, #8
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	885b      	ldrh	r3, [r3, #2]
 800861e:	2b01      	cmp	r3, #1
 8008620:	d107      	bne.n	8008632 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2201      	movs	r2, #1
 8008626:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 f940 	bl	80088b0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008630:	e013      	b.n	800865a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	885b      	ldrh	r3, [r3, #2]
 8008636:	2b02      	cmp	r3, #2
 8008638:	d10b      	bne.n	8008652 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	889b      	ldrh	r3, [r3, #4]
 800863e:	0a1b      	lsrs	r3, r3, #8
 8008640:	b29b      	uxth	r3, r3
 8008642:	b2da      	uxtb	r2, r3
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 f930 	bl	80088b0 <USBD_CtlSendStatus>
}
 8008650:	e003      	b.n	800865a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008652:	6839      	ldr	r1, [r7, #0]
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 f860 	bl	800871a <USBD_CtlError>
}
 800865a:	bf00      	nop
 800865c:	3708      	adds	r7, #8
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}

08008662 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008662:	b580      	push	{r7, lr}
 8008664:	b082      	sub	sp, #8
 8008666:	af00      	add	r7, sp, #0
 8008668:	6078      	str	r0, [r7, #4]
 800866a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008672:	b2db      	uxtb	r3, r3
 8008674:	3b01      	subs	r3, #1
 8008676:	2b02      	cmp	r3, #2
 8008678:	d80b      	bhi.n	8008692 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	885b      	ldrh	r3, [r3, #2]
 800867e:	2b01      	cmp	r3, #1
 8008680:	d10c      	bne.n	800869c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2200      	movs	r2, #0
 8008686:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 f910 	bl	80088b0 <USBD_CtlSendStatus>
      }
      break;
 8008690:	e004      	b.n	800869c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008692:	6839      	ldr	r1, [r7, #0]
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 f840 	bl	800871a <USBD_CtlError>
      break;
 800869a:	e000      	b.n	800869e <USBD_ClrFeature+0x3c>
      break;
 800869c:	bf00      	nop
  }
}
 800869e:	bf00      	nop
 80086a0:	3708      	adds	r7, #8
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}

080086a6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80086a6:	b580      	push	{r7, lr}
 80086a8:	b084      	sub	sp, #16
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]
 80086ae:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	781a      	ldrb	r2, [r3, #0]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	3301      	adds	r3, #1
 80086c0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	781a      	ldrb	r2, [r3, #0]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	3301      	adds	r3, #1
 80086ce:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80086d0:	68f8      	ldr	r0, [r7, #12]
 80086d2:	f7ff fa41 	bl	8007b58 <SWAPBYTE>
 80086d6:	4603      	mov	r3, r0
 80086d8:	461a      	mov	r2, r3
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	3301      	adds	r3, #1
 80086e2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	3301      	adds	r3, #1
 80086e8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80086ea:	68f8      	ldr	r0, [r7, #12]
 80086ec:	f7ff fa34 	bl	8007b58 <SWAPBYTE>
 80086f0:	4603      	mov	r3, r0
 80086f2:	461a      	mov	r2, r3
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	3301      	adds	r3, #1
 80086fc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	3301      	adds	r3, #1
 8008702:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008704:	68f8      	ldr	r0, [r7, #12]
 8008706:	f7ff fa27 	bl	8007b58 <SWAPBYTE>
 800870a:	4603      	mov	r3, r0
 800870c:	461a      	mov	r2, r3
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	80da      	strh	r2, [r3, #6]
}
 8008712:	bf00      	nop
 8008714:	3710      	adds	r7, #16
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}

0800871a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800871a:	b580      	push	{r7, lr}
 800871c:	b082      	sub	sp, #8
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
 8008722:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008724:	2180      	movs	r1, #128	; 0x80
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 fce0 	bl	80090ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800872c:	2100      	movs	r1, #0
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 fcdc 	bl	80090ec <USBD_LL_StallEP>
}
 8008734:	bf00      	nop
 8008736:	3708      	adds	r7, #8
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b086      	sub	sp, #24
 8008740:	af00      	add	r7, sp, #0
 8008742:	60f8      	str	r0, [r7, #12]
 8008744:	60b9      	str	r1, [r7, #8]
 8008746:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008748:	2300      	movs	r3, #0
 800874a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d036      	beq.n	80087c0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008756:	6938      	ldr	r0, [r7, #16]
 8008758:	f000 f836 	bl	80087c8 <USBD_GetLen>
 800875c:	4603      	mov	r3, r0
 800875e:	3301      	adds	r3, #1
 8008760:	b29b      	uxth	r3, r3
 8008762:	005b      	lsls	r3, r3, #1
 8008764:	b29a      	uxth	r2, r3
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800876a:	7dfb      	ldrb	r3, [r7, #23]
 800876c:	68ba      	ldr	r2, [r7, #8]
 800876e:	4413      	add	r3, r2
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	7812      	ldrb	r2, [r2, #0]
 8008774:	701a      	strb	r2, [r3, #0]
  idx++;
 8008776:	7dfb      	ldrb	r3, [r7, #23]
 8008778:	3301      	adds	r3, #1
 800877a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800877c:	7dfb      	ldrb	r3, [r7, #23]
 800877e:	68ba      	ldr	r2, [r7, #8]
 8008780:	4413      	add	r3, r2
 8008782:	2203      	movs	r2, #3
 8008784:	701a      	strb	r2, [r3, #0]
  idx++;
 8008786:	7dfb      	ldrb	r3, [r7, #23]
 8008788:	3301      	adds	r3, #1
 800878a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800878c:	e013      	b.n	80087b6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800878e:	7dfb      	ldrb	r3, [r7, #23]
 8008790:	68ba      	ldr	r2, [r7, #8]
 8008792:	4413      	add	r3, r2
 8008794:	693a      	ldr	r2, [r7, #16]
 8008796:	7812      	ldrb	r2, [r2, #0]
 8008798:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	3301      	adds	r3, #1
 800879e:	613b      	str	r3, [r7, #16]
    idx++;
 80087a0:	7dfb      	ldrb	r3, [r7, #23]
 80087a2:	3301      	adds	r3, #1
 80087a4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80087a6:	7dfb      	ldrb	r3, [r7, #23]
 80087a8:	68ba      	ldr	r2, [r7, #8]
 80087aa:	4413      	add	r3, r2
 80087ac:	2200      	movs	r2, #0
 80087ae:	701a      	strb	r2, [r3, #0]
    idx++;
 80087b0:	7dfb      	ldrb	r3, [r7, #23]
 80087b2:	3301      	adds	r3, #1
 80087b4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d1e7      	bne.n	800878e <USBD_GetString+0x52>
 80087be:	e000      	b.n	80087c2 <USBD_GetString+0x86>
    return;
 80087c0:	bf00      	nop
  }
}
 80087c2:	3718      	adds	r7, #24
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b085      	sub	sp, #20
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80087d0:	2300      	movs	r3, #0
 80087d2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80087d8:	e005      	b.n	80087e6 <USBD_GetLen+0x1e>
  {
    len++;
 80087da:	7bfb      	ldrb	r3, [r7, #15]
 80087dc:	3301      	adds	r3, #1
 80087de:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	3301      	adds	r3, #1
 80087e4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d1f5      	bne.n	80087da <USBD_GetLen+0x12>
  }

  return len;
 80087ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3714      	adds	r7, #20
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	60b9      	str	r1, [r7, #8]
 8008806:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2202      	movs	r2, #2
 800880c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	687a      	ldr	r2, [r7, #4]
 8008814:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	68ba      	ldr	r2, [r7, #8]
 8008820:	2100      	movs	r1, #0
 8008822:	68f8      	ldr	r0, [r7, #12]
 8008824:	f000 fceb 	bl	80091fe <USBD_LL_Transmit>

  return USBD_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3710      	adds	r7, #16
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008832:	b580      	push	{r7, lr}
 8008834:	b084      	sub	sp, #16
 8008836:	af00      	add	r7, sp, #0
 8008838:	60f8      	str	r0, [r7, #12]
 800883a:	60b9      	str	r1, [r7, #8]
 800883c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	68ba      	ldr	r2, [r7, #8]
 8008842:	2100      	movs	r1, #0
 8008844:	68f8      	ldr	r0, [r7, #12]
 8008846:	f000 fcda 	bl	80091fe <USBD_LL_Transmit>

  return USBD_OK;
 800884a:	2300      	movs	r3, #0
}
 800884c:	4618      	mov	r0, r3
 800884e:	3710      	adds	r7, #16
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b084      	sub	sp, #16
 8008858:	af00      	add	r7, sp, #0
 800885a:	60f8      	str	r0, [r7, #12]
 800885c:	60b9      	str	r1, [r7, #8]
 800885e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2203      	movs	r2, #3
 8008864:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	687a      	ldr	r2, [r7, #4]
 800886c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	68ba      	ldr	r2, [r7, #8]
 800887c:	2100      	movs	r1, #0
 800887e:	68f8      	ldr	r0, [r7, #12]
 8008880:	f000 fcde 	bl	8009240 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008884:	2300      	movs	r3, #0
}
 8008886:	4618      	mov	r0, r3
 8008888:	3710      	adds	r7, #16
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}

0800888e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800888e:	b580      	push	{r7, lr}
 8008890:	b084      	sub	sp, #16
 8008892:	af00      	add	r7, sp, #0
 8008894:	60f8      	str	r0, [r7, #12]
 8008896:	60b9      	str	r1, [r7, #8]
 8008898:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	68ba      	ldr	r2, [r7, #8]
 800889e:	2100      	movs	r1, #0
 80088a0:	68f8      	ldr	r0, [r7, #12]
 80088a2:	f000 fccd 	bl	8009240 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80088a6:	2300      	movs	r3, #0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3710      	adds	r7, #16
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b082      	sub	sp, #8
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2204      	movs	r2, #4
 80088bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80088c0:	2300      	movs	r3, #0
 80088c2:	2200      	movs	r2, #0
 80088c4:	2100      	movs	r1, #0
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 fc99 	bl	80091fe <USBD_LL_Transmit>

  return USBD_OK;
 80088cc:	2300      	movs	r3, #0
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3708      	adds	r7, #8
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80088d6:	b580      	push	{r7, lr}
 80088d8:	b082      	sub	sp, #8
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2205      	movs	r2, #5
 80088e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088e6:	2300      	movs	r3, #0
 80088e8:	2200      	movs	r2, #0
 80088ea:	2100      	movs	r1, #0
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 fca7 	bl	8009240 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80088f2:	2300      	movs	r3, #0
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3708      	adds	r7, #8
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008900:	2200      	movs	r2, #0
 8008902:	4912      	ldr	r1, [pc, #72]	; (800894c <MX_USB_DEVICE_Init+0x50>)
 8008904:	4812      	ldr	r0, [pc, #72]	; (8008950 <MX_USB_DEVICE_Init+0x54>)
 8008906:	f7fe fd07 	bl	8007318 <USBD_Init>
 800890a:	4603      	mov	r3, r0
 800890c:	2b00      	cmp	r3, #0
 800890e:	d001      	beq.n	8008914 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008910:	f7f8 f96c 	bl	8000bec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008914:	490f      	ldr	r1, [pc, #60]	; (8008954 <MX_USB_DEVICE_Init+0x58>)
 8008916:	480e      	ldr	r0, [pc, #56]	; (8008950 <MX_USB_DEVICE_Init+0x54>)
 8008918:	f7fe fd2e 	bl	8007378 <USBD_RegisterClass>
 800891c:	4603      	mov	r3, r0
 800891e:	2b00      	cmp	r3, #0
 8008920:	d001      	beq.n	8008926 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008922:	f7f8 f963 	bl	8000bec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008926:	490c      	ldr	r1, [pc, #48]	; (8008958 <MX_USB_DEVICE_Init+0x5c>)
 8008928:	4809      	ldr	r0, [pc, #36]	; (8008950 <MX_USB_DEVICE_Init+0x54>)
 800892a:	f7fe fc1f 	bl	800716c <USBD_CDC_RegisterInterface>
 800892e:	4603      	mov	r3, r0
 8008930:	2b00      	cmp	r3, #0
 8008932:	d001      	beq.n	8008938 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008934:	f7f8 f95a 	bl	8000bec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008938:	4805      	ldr	r0, [pc, #20]	; (8008950 <MX_USB_DEVICE_Init+0x54>)
 800893a:	f7fe fd53 	bl	80073e4 <USBD_Start>
 800893e:	4603      	mov	r3, r0
 8008940:	2b00      	cmp	r3, #0
 8008942:	d001      	beq.n	8008948 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008944:	f7f8 f952 	bl	8000bec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008948:	bf00      	nop
 800894a:	bd80      	pop	{r7, pc}
 800894c:	200000ac 	.word	0x200000ac
 8008950:	20000274 	.word	0x20000274
 8008954:	20000018 	.word	0x20000018
 8008958:	20000098 	.word	0x20000098

0800895c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008960:	2200      	movs	r2, #0
 8008962:	4905      	ldr	r1, [pc, #20]	; (8008978 <CDC_Init_FS+0x1c>)
 8008964:	4805      	ldr	r0, [pc, #20]	; (800897c <CDC_Init_FS+0x20>)
 8008966:	f7fe fc1b 	bl	80071a0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800896a:	4905      	ldr	r1, [pc, #20]	; (8008980 <CDC_Init_FS+0x24>)
 800896c:	4803      	ldr	r0, [pc, #12]	; (800897c <CDC_Init_FS+0x20>)
 800896e:	f7fe fc39 	bl	80071e4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008972:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008974:	4618      	mov	r0, r3
 8008976:	bd80      	pop	{r7, pc}
 8008978:	20000d50 	.word	0x20000d50
 800897c:	20000274 	.word	0x20000274
 8008980:	20000550 	.word	0x20000550

08008984 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008984:	b480      	push	{r7}
 8008986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008988:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800898a:	4618      	mov	r0, r3
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr

08008994 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008994:	b480      	push	{r7}
 8008996:	b083      	sub	sp, #12
 8008998:	af00      	add	r7, sp, #0
 800899a:	4603      	mov	r3, r0
 800899c:	6039      	str	r1, [r7, #0]
 800899e:	71fb      	strb	r3, [r7, #7]
 80089a0:	4613      	mov	r3, r2
 80089a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80089a4:	79fb      	ldrb	r3, [r7, #7]
 80089a6:	2b23      	cmp	r3, #35	; 0x23
 80089a8:	d84a      	bhi.n	8008a40 <CDC_Control_FS+0xac>
 80089aa:	a201      	add	r2, pc, #4	; (adr r2, 80089b0 <CDC_Control_FS+0x1c>)
 80089ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089b0:	08008a41 	.word	0x08008a41
 80089b4:	08008a41 	.word	0x08008a41
 80089b8:	08008a41 	.word	0x08008a41
 80089bc:	08008a41 	.word	0x08008a41
 80089c0:	08008a41 	.word	0x08008a41
 80089c4:	08008a41 	.word	0x08008a41
 80089c8:	08008a41 	.word	0x08008a41
 80089cc:	08008a41 	.word	0x08008a41
 80089d0:	08008a41 	.word	0x08008a41
 80089d4:	08008a41 	.word	0x08008a41
 80089d8:	08008a41 	.word	0x08008a41
 80089dc:	08008a41 	.word	0x08008a41
 80089e0:	08008a41 	.word	0x08008a41
 80089e4:	08008a41 	.word	0x08008a41
 80089e8:	08008a41 	.word	0x08008a41
 80089ec:	08008a41 	.word	0x08008a41
 80089f0:	08008a41 	.word	0x08008a41
 80089f4:	08008a41 	.word	0x08008a41
 80089f8:	08008a41 	.word	0x08008a41
 80089fc:	08008a41 	.word	0x08008a41
 8008a00:	08008a41 	.word	0x08008a41
 8008a04:	08008a41 	.word	0x08008a41
 8008a08:	08008a41 	.word	0x08008a41
 8008a0c:	08008a41 	.word	0x08008a41
 8008a10:	08008a41 	.word	0x08008a41
 8008a14:	08008a41 	.word	0x08008a41
 8008a18:	08008a41 	.word	0x08008a41
 8008a1c:	08008a41 	.word	0x08008a41
 8008a20:	08008a41 	.word	0x08008a41
 8008a24:	08008a41 	.word	0x08008a41
 8008a28:	08008a41 	.word	0x08008a41
 8008a2c:	08008a41 	.word	0x08008a41
 8008a30:	08008a41 	.word	0x08008a41
 8008a34:	08008a41 	.word	0x08008a41
 8008a38:	08008a41 	.word	0x08008a41
 8008a3c:	08008a41 	.word	0x08008a41
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008a40:	bf00      	nop
  }

  return (USBD_OK);
 8008a42:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	370c      	adds	r7, #12
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr

08008a50 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008a5a:	6879      	ldr	r1, [r7, #4]
 8008a5c:	4805      	ldr	r0, [pc, #20]	; (8008a74 <CDC_Receive_FS+0x24>)
 8008a5e:	f7fe fbc1 	bl	80071e4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008a62:	4804      	ldr	r0, [pc, #16]	; (8008a74 <CDC_Receive_FS+0x24>)
 8008a64:	f7fe fc22 	bl	80072ac <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008a68:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3708      	adds	r7, #8
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	20000274 	.word	0x20000274

08008a78 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b084      	sub	sp, #16
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	460b      	mov	r3, r1
 8008a82:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008a84:	2300      	movs	r3, #0
 8008a86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008a88:	4b0d      	ldr	r3, [pc, #52]	; (8008ac0 <CDC_Transmit_FS+0x48>)
 8008a8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a8e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d001      	beq.n	8008a9e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	e00b      	b.n	8008ab6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008a9e:	887b      	ldrh	r3, [r7, #2]
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	6879      	ldr	r1, [r7, #4]
 8008aa4:	4806      	ldr	r0, [pc, #24]	; (8008ac0 <CDC_Transmit_FS+0x48>)
 8008aa6:	f7fe fb7b 	bl	80071a0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008aaa:	4805      	ldr	r0, [pc, #20]	; (8008ac0 <CDC_Transmit_FS+0x48>)
 8008aac:	f7fe fbb8 	bl	8007220 <USBD_CDC_TransmitPacket>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3710      	adds	r7, #16
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	bf00      	nop
 8008ac0:	20000274 	.word	0x20000274

08008ac4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b087      	sub	sp, #28
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	60f8      	str	r0, [r7, #12]
 8008acc:	60b9      	str	r1, [r7, #8]
 8008ace:	4613      	mov	r3, r2
 8008ad0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008ad6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	371c      	adds	r7, #28
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae4:	4770      	bx	lr
	...

08008ae8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	4603      	mov	r3, r0
 8008af0:	6039      	str	r1, [r7, #0]
 8008af2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	2212      	movs	r2, #18
 8008af8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008afa:	4b03      	ldr	r3, [pc, #12]	; (8008b08 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	370c      	adds	r7, #12
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr
 8008b08:	200000c8 	.word	0x200000c8

08008b0c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b083      	sub	sp, #12
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	4603      	mov	r3, r0
 8008b14:	6039      	str	r1, [r7, #0]
 8008b16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	2204      	movs	r2, #4
 8008b1c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008b1e:	4b03      	ldr	r3, [pc, #12]	; (8008b2c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	370c      	adds	r7, #12
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr
 8008b2c:	200000dc 	.word	0x200000dc

08008b30 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	4603      	mov	r3, r0
 8008b38:	6039      	str	r1, [r7, #0]
 8008b3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b3c:	79fb      	ldrb	r3, [r7, #7]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d105      	bne.n	8008b4e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008b42:	683a      	ldr	r2, [r7, #0]
 8008b44:	4907      	ldr	r1, [pc, #28]	; (8008b64 <USBD_FS_ProductStrDescriptor+0x34>)
 8008b46:	4808      	ldr	r0, [pc, #32]	; (8008b68 <USBD_FS_ProductStrDescriptor+0x38>)
 8008b48:	f7ff fdf8 	bl	800873c <USBD_GetString>
 8008b4c:	e004      	b.n	8008b58 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008b4e:	683a      	ldr	r2, [r7, #0]
 8008b50:	4904      	ldr	r1, [pc, #16]	; (8008b64 <USBD_FS_ProductStrDescriptor+0x34>)
 8008b52:	4805      	ldr	r0, [pc, #20]	; (8008b68 <USBD_FS_ProductStrDescriptor+0x38>)
 8008b54:	f7ff fdf2 	bl	800873c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b58:	4b02      	ldr	r3, [pc, #8]	; (8008b64 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3708      	adds	r7, #8
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	20001550 	.word	0x20001550
 8008b68:	08009458 	.word	0x08009458

08008b6c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b082      	sub	sp, #8
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	4603      	mov	r3, r0
 8008b74:	6039      	str	r1, [r7, #0]
 8008b76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008b78:	683a      	ldr	r2, [r7, #0]
 8008b7a:	4904      	ldr	r1, [pc, #16]	; (8008b8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008b7c:	4804      	ldr	r0, [pc, #16]	; (8008b90 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008b7e:	f7ff fddd 	bl	800873c <USBD_GetString>
  return USBD_StrDesc;
 8008b82:	4b02      	ldr	r3, [pc, #8]	; (8008b8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3708      	adds	r7, #8
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}
 8008b8c:	20001550 	.word	0x20001550
 8008b90:	08009470 	.word	0x08009470

08008b94 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b082      	sub	sp, #8
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	6039      	str	r1, [r7, #0]
 8008b9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	221a      	movs	r2, #26
 8008ba4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008ba6:	f000 f843 	bl	8008c30 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008baa:	4b02      	ldr	r3, [pc, #8]	; (8008bb4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3708      	adds	r7, #8
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}
 8008bb4:	200000e0 	.word	0x200000e0

08008bb8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	6039      	str	r1, [r7, #0]
 8008bc2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008bc4:	79fb      	ldrb	r3, [r7, #7]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d105      	bne.n	8008bd6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008bca:	683a      	ldr	r2, [r7, #0]
 8008bcc:	4907      	ldr	r1, [pc, #28]	; (8008bec <USBD_FS_ConfigStrDescriptor+0x34>)
 8008bce:	4808      	ldr	r0, [pc, #32]	; (8008bf0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008bd0:	f7ff fdb4 	bl	800873c <USBD_GetString>
 8008bd4:	e004      	b.n	8008be0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008bd6:	683a      	ldr	r2, [r7, #0]
 8008bd8:	4904      	ldr	r1, [pc, #16]	; (8008bec <USBD_FS_ConfigStrDescriptor+0x34>)
 8008bda:	4805      	ldr	r0, [pc, #20]	; (8008bf0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008bdc:	f7ff fdae 	bl	800873c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008be0:	4b02      	ldr	r3, [pc, #8]	; (8008bec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3708      	adds	r7, #8
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}
 8008bea:	bf00      	nop
 8008bec:	20001550 	.word	0x20001550
 8008bf0:	08009484 	.word	0x08009484

08008bf4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b082      	sub	sp, #8
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	6039      	str	r1, [r7, #0]
 8008bfe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008c00:	79fb      	ldrb	r3, [r7, #7]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d105      	bne.n	8008c12 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008c06:	683a      	ldr	r2, [r7, #0]
 8008c08:	4907      	ldr	r1, [pc, #28]	; (8008c28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008c0a:	4808      	ldr	r0, [pc, #32]	; (8008c2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008c0c:	f7ff fd96 	bl	800873c <USBD_GetString>
 8008c10:	e004      	b.n	8008c1c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008c12:	683a      	ldr	r2, [r7, #0]
 8008c14:	4904      	ldr	r1, [pc, #16]	; (8008c28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008c16:	4805      	ldr	r0, [pc, #20]	; (8008c2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008c18:	f7ff fd90 	bl	800873c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c1c:	4b02      	ldr	r3, [pc, #8]	; (8008c28 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3708      	adds	r7, #8
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	20001550 	.word	0x20001550
 8008c2c:	08009490 	.word	0x08009490

08008c30 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008c36:	4b0f      	ldr	r3, [pc, #60]	; (8008c74 <Get_SerialNum+0x44>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008c3c:	4b0e      	ldr	r3, [pc, #56]	; (8008c78 <Get_SerialNum+0x48>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008c42:	4b0e      	ldr	r3, [pc, #56]	; (8008c7c <Get_SerialNum+0x4c>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008c48:	68fa      	ldr	r2, [r7, #12]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	4413      	add	r3, r2
 8008c4e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d009      	beq.n	8008c6a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008c56:	2208      	movs	r2, #8
 8008c58:	4909      	ldr	r1, [pc, #36]	; (8008c80 <Get_SerialNum+0x50>)
 8008c5a:	68f8      	ldr	r0, [r7, #12]
 8008c5c:	f000 f814 	bl	8008c88 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008c60:	2204      	movs	r2, #4
 8008c62:	4908      	ldr	r1, [pc, #32]	; (8008c84 <Get_SerialNum+0x54>)
 8008c64:	68b8      	ldr	r0, [r7, #8]
 8008c66:	f000 f80f 	bl	8008c88 <IntToUnicode>
  }
}
 8008c6a:	bf00      	nop
 8008c6c:	3710      	adds	r7, #16
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	bf00      	nop
 8008c74:	1fff7a10 	.word	0x1fff7a10
 8008c78:	1fff7a14 	.word	0x1fff7a14
 8008c7c:	1fff7a18 	.word	0x1fff7a18
 8008c80:	200000e2 	.word	0x200000e2
 8008c84:	200000f2 	.word	0x200000f2

08008c88 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b087      	sub	sp, #28
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	60b9      	str	r1, [r7, #8]
 8008c92:	4613      	mov	r3, r2
 8008c94:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008c96:	2300      	movs	r3, #0
 8008c98:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	75fb      	strb	r3, [r7, #23]
 8008c9e:	e027      	b.n	8008cf0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	0f1b      	lsrs	r3, r3, #28
 8008ca4:	2b09      	cmp	r3, #9
 8008ca6:	d80b      	bhi.n	8008cc0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	0f1b      	lsrs	r3, r3, #28
 8008cac:	b2da      	uxtb	r2, r3
 8008cae:	7dfb      	ldrb	r3, [r7, #23]
 8008cb0:	005b      	lsls	r3, r3, #1
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	440b      	add	r3, r1
 8008cb8:	3230      	adds	r2, #48	; 0x30
 8008cba:	b2d2      	uxtb	r2, r2
 8008cbc:	701a      	strb	r2, [r3, #0]
 8008cbe:	e00a      	b.n	8008cd6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	0f1b      	lsrs	r3, r3, #28
 8008cc4:	b2da      	uxtb	r2, r3
 8008cc6:	7dfb      	ldrb	r3, [r7, #23]
 8008cc8:	005b      	lsls	r3, r3, #1
 8008cca:	4619      	mov	r1, r3
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	440b      	add	r3, r1
 8008cd0:	3237      	adds	r2, #55	; 0x37
 8008cd2:	b2d2      	uxtb	r2, r2
 8008cd4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	011b      	lsls	r3, r3, #4
 8008cda:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008cdc:	7dfb      	ldrb	r3, [r7, #23]
 8008cde:	005b      	lsls	r3, r3, #1
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	68ba      	ldr	r2, [r7, #8]
 8008ce4:	4413      	add	r3, r2
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008cea:	7dfb      	ldrb	r3, [r7, #23]
 8008cec:	3301      	adds	r3, #1
 8008cee:	75fb      	strb	r3, [r7, #23]
 8008cf0:	7dfa      	ldrb	r2, [r7, #23]
 8008cf2:	79fb      	ldrb	r3, [r7, #7]
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d3d3      	bcc.n	8008ca0 <IntToUnicode+0x18>
  }
}
 8008cf8:	bf00      	nop
 8008cfa:	bf00      	nop
 8008cfc:	371c      	adds	r7, #28
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr
	...

08008d08 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b08a      	sub	sp, #40	; 0x28
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d10:	f107 0314 	add.w	r3, r7, #20
 8008d14:	2200      	movs	r2, #0
 8008d16:	601a      	str	r2, [r3, #0]
 8008d18:	605a      	str	r2, [r3, #4]
 8008d1a:	609a      	str	r2, [r3, #8]
 8008d1c:	60da      	str	r2, [r3, #12]
 8008d1e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d28:	d13a      	bne.n	8008da0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	613b      	str	r3, [r7, #16]
 8008d2e:	4b1e      	ldr	r3, [pc, #120]	; (8008da8 <HAL_PCD_MspInit+0xa0>)
 8008d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d32:	4a1d      	ldr	r2, [pc, #116]	; (8008da8 <HAL_PCD_MspInit+0xa0>)
 8008d34:	f043 0301 	orr.w	r3, r3, #1
 8008d38:	6313      	str	r3, [r2, #48]	; 0x30
 8008d3a:	4b1b      	ldr	r3, [pc, #108]	; (8008da8 <HAL_PCD_MspInit+0xa0>)
 8008d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d3e:	f003 0301 	and.w	r3, r3, #1
 8008d42:	613b      	str	r3, [r7, #16]
 8008d44:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008d46:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d4c:	2302      	movs	r3, #2
 8008d4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d50:	2300      	movs	r3, #0
 8008d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d54:	2303      	movs	r3, #3
 8008d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008d58:	230a      	movs	r3, #10
 8008d5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d5c:	f107 0314 	add.w	r3, r7, #20
 8008d60:	4619      	mov	r1, r3
 8008d62:	4812      	ldr	r0, [pc, #72]	; (8008dac <HAL_PCD_MspInit+0xa4>)
 8008d64:	f7f8 fde6 	bl	8001934 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008d68:	4b0f      	ldr	r3, [pc, #60]	; (8008da8 <HAL_PCD_MspInit+0xa0>)
 8008d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d6c:	4a0e      	ldr	r2, [pc, #56]	; (8008da8 <HAL_PCD_MspInit+0xa0>)
 8008d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d72:	6353      	str	r3, [r2, #52]	; 0x34
 8008d74:	2300      	movs	r3, #0
 8008d76:	60fb      	str	r3, [r7, #12]
 8008d78:	4b0b      	ldr	r3, [pc, #44]	; (8008da8 <HAL_PCD_MspInit+0xa0>)
 8008d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d7c:	4a0a      	ldr	r2, [pc, #40]	; (8008da8 <HAL_PCD_MspInit+0xa0>)
 8008d7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008d82:	6453      	str	r3, [r2, #68]	; 0x44
 8008d84:	4b08      	ldr	r3, [pc, #32]	; (8008da8 <HAL_PCD_MspInit+0xa0>)
 8008d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d8c:	60fb      	str	r3, [r7, #12]
 8008d8e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008d90:	2200      	movs	r2, #0
 8008d92:	2100      	movs	r1, #0
 8008d94:	2043      	movs	r0, #67	; 0x43
 8008d96:	f7f8 fa26 	bl	80011e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008d9a:	2043      	movs	r0, #67	; 0x43
 8008d9c:	f7f8 fa3f 	bl	800121e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008da0:	bf00      	nop
 8008da2:	3728      	adds	r7, #40	; 0x28
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}
 8008da8:	40023800 	.word	0x40023800
 8008dac:	40020000 	.word	0x40020000

08008db0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b082      	sub	sp, #8
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	4610      	mov	r0, r2
 8008dc8:	f7fe fb59 	bl	800747e <USBD_LL_SetupStage>
}
 8008dcc:	bf00      	nop
 8008dce:	3708      	adds	r7, #8
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	460b      	mov	r3, r1
 8008dde:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008de6:	78fa      	ldrb	r2, [r7, #3]
 8008de8:	6879      	ldr	r1, [r7, #4]
 8008dea:	4613      	mov	r3, r2
 8008dec:	00db      	lsls	r3, r3, #3
 8008dee:	4413      	add	r3, r2
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	440b      	add	r3, r1
 8008df4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	78fb      	ldrb	r3, [r7, #3]
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	f7fe fb93 	bl	8007528 <USBD_LL_DataOutStage>
}
 8008e02:	bf00      	nop
 8008e04:	3708      	adds	r7, #8
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}

08008e0a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e0a:	b580      	push	{r7, lr}
 8008e0c:	b082      	sub	sp, #8
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
 8008e12:	460b      	mov	r3, r1
 8008e14:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008e1c:	78fa      	ldrb	r2, [r7, #3]
 8008e1e:	6879      	ldr	r1, [r7, #4]
 8008e20:	4613      	mov	r3, r2
 8008e22:	00db      	lsls	r3, r3, #3
 8008e24:	4413      	add	r3, r2
 8008e26:	009b      	lsls	r3, r3, #2
 8008e28:	440b      	add	r3, r1
 8008e2a:	334c      	adds	r3, #76	; 0x4c
 8008e2c:	681a      	ldr	r2, [r3, #0]
 8008e2e:	78fb      	ldrb	r3, [r7, #3]
 8008e30:	4619      	mov	r1, r3
 8008e32:	f7fe fc2c 	bl	800768e <USBD_LL_DataInStage>
}
 8008e36:	bf00      	nop
 8008e38:	3708      	adds	r7, #8
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}

08008e3e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e3e:	b580      	push	{r7, lr}
 8008e40:	b082      	sub	sp, #8
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f7fe fd60 	bl	8007912 <USBD_LL_SOF>
}
 8008e52:	bf00      	nop
 8008e54:	3708      	adds	r7, #8
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}

08008e5a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e5a:	b580      	push	{r7, lr}
 8008e5c:	b084      	sub	sp, #16
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008e62:	2301      	movs	r3, #1
 8008e64:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	68db      	ldr	r3, [r3, #12]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d102      	bne.n	8008e74 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	73fb      	strb	r3, [r7, #15]
 8008e72:	e008      	b.n	8008e86 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	68db      	ldr	r3, [r3, #12]
 8008e78:	2b02      	cmp	r3, #2
 8008e7a:	d102      	bne.n	8008e82 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	73fb      	strb	r3, [r7, #15]
 8008e80:	e001      	b.n	8008e86 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008e82:	f7f7 feb3 	bl	8000bec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008e8c:	7bfa      	ldrb	r2, [r7, #15]
 8008e8e:	4611      	mov	r1, r2
 8008e90:	4618      	mov	r0, r3
 8008e92:	f7fe fd00 	bl	8007896 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f7fe fca8 	bl	80077f2 <USBD_LL_Reset>
}
 8008ea2:	bf00      	nop
 8008ea4:	3710      	adds	r7, #16
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}
	...

08008eac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b082      	sub	sp, #8
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f7fe fcfb 	bl	80078b6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	687a      	ldr	r2, [r7, #4]
 8008ecc:	6812      	ldr	r2, [r2, #0]
 8008ece:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008ed2:	f043 0301 	orr.w	r3, r3, #1
 8008ed6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6a1b      	ldr	r3, [r3, #32]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d005      	beq.n	8008eec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ee0:	4b04      	ldr	r3, [pc, #16]	; (8008ef4 <HAL_PCD_SuspendCallback+0x48>)
 8008ee2:	691b      	ldr	r3, [r3, #16]
 8008ee4:	4a03      	ldr	r2, [pc, #12]	; (8008ef4 <HAL_PCD_SuspendCallback+0x48>)
 8008ee6:	f043 0306 	orr.w	r3, r3, #6
 8008eea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008eec:	bf00      	nop
 8008eee:	3708      	adds	r7, #8
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}
 8008ef4:	e000ed00 	.word	0xe000ed00

08008ef8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f06:	4618      	mov	r0, r3
 8008f08:	f7fe fceb 	bl	80078e2 <USBD_LL_Resume>
}
 8008f0c:	bf00      	nop
 8008f0e:	3708      	adds	r7, #8
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b082      	sub	sp, #8
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f26:	78fa      	ldrb	r2, [r7, #3]
 8008f28:	4611      	mov	r1, r2
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f7fe fd43 	bl	80079b6 <USBD_LL_IsoOUTIncomplete>
}
 8008f30:	bf00      	nop
 8008f32:	3708      	adds	r7, #8
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b082      	sub	sp, #8
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
 8008f40:	460b      	mov	r3, r1
 8008f42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f4a:	78fa      	ldrb	r2, [r7, #3]
 8008f4c:	4611      	mov	r1, r2
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f7fe fcff 	bl	8007952 <USBD_LL_IsoINIncomplete>
}
 8008f54:	bf00      	nop
 8008f56:	3708      	adds	r7, #8
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b082      	sub	sp, #8
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7fe fd55 	bl	8007a1a <USBD_LL_DevConnected>
}
 8008f70:	bf00      	nop
 8008f72:	3708      	adds	r7, #8
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f86:	4618      	mov	r0, r3
 8008f88:	f7fe fd52 	bl	8007a30 <USBD_LL_DevDisconnected>
}
 8008f8c:	bf00      	nop
 8008f8e:	3708      	adds	r7, #8
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b082      	sub	sp, #8
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d13c      	bne.n	800901e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008fa4:	4a20      	ldr	r2, [pc, #128]	; (8009028 <USBD_LL_Init+0x94>)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	4a1e      	ldr	r2, [pc, #120]	; (8009028 <USBD_LL_Init+0x94>)
 8008fb0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008fb4:	4b1c      	ldr	r3, [pc, #112]	; (8009028 <USBD_LL_Init+0x94>)
 8008fb6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008fba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008fbc:	4b1a      	ldr	r3, [pc, #104]	; (8009028 <USBD_LL_Init+0x94>)
 8008fbe:	2204      	movs	r2, #4
 8008fc0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008fc2:	4b19      	ldr	r3, [pc, #100]	; (8009028 <USBD_LL_Init+0x94>)
 8008fc4:	2202      	movs	r2, #2
 8008fc6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008fc8:	4b17      	ldr	r3, [pc, #92]	; (8009028 <USBD_LL_Init+0x94>)
 8008fca:	2200      	movs	r2, #0
 8008fcc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008fce:	4b16      	ldr	r3, [pc, #88]	; (8009028 <USBD_LL_Init+0x94>)
 8008fd0:	2202      	movs	r2, #2
 8008fd2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008fd4:	4b14      	ldr	r3, [pc, #80]	; (8009028 <USBD_LL_Init+0x94>)
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008fda:	4b13      	ldr	r3, [pc, #76]	; (8009028 <USBD_LL_Init+0x94>)
 8008fdc:	2200      	movs	r2, #0
 8008fde:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008fe0:	4b11      	ldr	r3, [pc, #68]	; (8009028 <USBD_LL_Init+0x94>)
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008fe6:	4b10      	ldr	r3, [pc, #64]	; (8009028 <USBD_LL_Init+0x94>)
 8008fe8:	2200      	movs	r2, #0
 8008fea:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008fec:	4b0e      	ldr	r3, [pc, #56]	; (8009028 <USBD_LL_Init+0x94>)
 8008fee:	2200      	movs	r2, #0
 8008ff0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008ff2:	480d      	ldr	r0, [pc, #52]	; (8009028 <USBD_LL_Init+0x94>)
 8008ff4:	f7f8 fe6b 	bl	8001cce <HAL_PCD_Init>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d001      	beq.n	8009002 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008ffe:	f7f7 fdf5 	bl	8000bec <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009002:	2180      	movs	r1, #128	; 0x80
 8009004:	4808      	ldr	r0, [pc, #32]	; (8009028 <USBD_LL_Init+0x94>)
 8009006:	f7fa f8c2 	bl	800318e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800900a:	2240      	movs	r2, #64	; 0x40
 800900c:	2100      	movs	r1, #0
 800900e:	4806      	ldr	r0, [pc, #24]	; (8009028 <USBD_LL_Init+0x94>)
 8009010:	f7fa f876 	bl	8003100 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009014:	2280      	movs	r2, #128	; 0x80
 8009016:	2101      	movs	r1, #1
 8009018:	4803      	ldr	r0, [pc, #12]	; (8009028 <USBD_LL_Init+0x94>)
 800901a:	f7fa f871 	bl	8003100 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800901e:	2300      	movs	r3, #0
}
 8009020:	4618      	mov	r0, r3
 8009022:	3708      	adds	r7, #8
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}
 8009028:	20001750 	.word	0x20001750

0800902c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b084      	sub	sp, #16
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009034:	2300      	movs	r3, #0
 8009036:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009038:	2300      	movs	r3, #0
 800903a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009042:	4618      	mov	r0, r3
 8009044:	f7f8 ff60 	bl	8001f08 <HAL_PCD_Start>
 8009048:	4603      	mov	r3, r0
 800904a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800904c:	7bfb      	ldrb	r3, [r7, #15]
 800904e:	4618      	mov	r0, r3
 8009050:	f000 f942 	bl	80092d8 <USBD_Get_USB_Status>
 8009054:	4603      	mov	r3, r0
 8009056:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009058:	7bbb      	ldrb	r3, [r7, #14]
}
 800905a:	4618      	mov	r0, r3
 800905c:	3710      	adds	r7, #16
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}

08009062 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009062:	b580      	push	{r7, lr}
 8009064:	b084      	sub	sp, #16
 8009066:	af00      	add	r7, sp, #0
 8009068:	6078      	str	r0, [r7, #4]
 800906a:	4608      	mov	r0, r1
 800906c:	4611      	mov	r1, r2
 800906e:	461a      	mov	r2, r3
 8009070:	4603      	mov	r3, r0
 8009072:	70fb      	strb	r3, [r7, #3]
 8009074:	460b      	mov	r3, r1
 8009076:	70bb      	strb	r3, [r7, #2]
 8009078:	4613      	mov	r3, r2
 800907a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800907c:	2300      	movs	r3, #0
 800907e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009080:	2300      	movs	r3, #0
 8009082:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800908a:	78bb      	ldrb	r3, [r7, #2]
 800908c:	883a      	ldrh	r2, [r7, #0]
 800908e:	78f9      	ldrb	r1, [r7, #3]
 8009090:	f7f9 fc31 	bl	80028f6 <HAL_PCD_EP_Open>
 8009094:	4603      	mov	r3, r0
 8009096:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009098:	7bfb      	ldrb	r3, [r7, #15]
 800909a:	4618      	mov	r0, r3
 800909c:	f000 f91c 	bl	80092d8 <USBD_Get_USB_Status>
 80090a0:	4603      	mov	r3, r0
 80090a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3710      	adds	r7, #16
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}

080090ae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090ae:	b580      	push	{r7, lr}
 80090b0:	b084      	sub	sp, #16
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	6078      	str	r0, [r7, #4]
 80090b6:	460b      	mov	r3, r1
 80090b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090ba:	2300      	movs	r3, #0
 80090bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090be:	2300      	movs	r3, #0
 80090c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80090c8:	78fa      	ldrb	r2, [r7, #3]
 80090ca:	4611      	mov	r1, r2
 80090cc:	4618      	mov	r0, r3
 80090ce:	f7f9 fc7a 	bl	80029c6 <HAL_PCD_EP_Close>
 80090d2:	4603      	mov	r3, r0
 80090d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090d6:	7bfb      	ldrb	r3, [r7, #15]
 80090d8:	4618      	mov	r0, r3
 80090da:	f000 f8fd 	bl	80092d8 <USBD_Get_USB_Status>
 80090de:	4603      	mov	r3, r0
 80090e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3710      	adds	r7, #16
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b084      	sub	sp, #16
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	460b      	mov	r3, r1
 80090f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090f8:	2300      	movs	r3, #0
 80090fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090fc:	2300      	movs	r3, #0
 80090fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009106:	78fa      	ldrb	r2, [r7, #3]
 8009108:	4611      	mov	r1, r2
 800910a:	4618      	mov	r0, r3
 800910c:	f7f9 fd52 	bl	8002bb4 <HAL_PCD_EP_SetStall>
 8009110:	4603      	mov	r3, r0
 8009112:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009114:	7bfb      	ldrb	r3, [r7, #15]
 8009116:	4618      	mov	r0, r3
 8009118:	f000 f8de 	bl	80092d8 <USBD_Get_USB_Status>
 800911c:	4603      	mov	r3, r0
 800911e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009120:	7bbb      	ldrb	r3, [r7, #14]
}
 8009122:	4618      	mov	r0, r3
 8009124:	3710      	adds	r7, #16
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}

0800912a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800912a:	b580      	push	{r7, lr}
 800912c:	b084      	sub	sp, #16
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
 8009132:	460b      	mov	r3, r1
 8009134:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009136:	2300      	movs	r3, #0
 8009138:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800913a:	2300      	movs	r3, #0
 800913c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009144:	78fa      	ldrb	r2, [r7, #3]
 8009146:	4611      	mov	r1, r2
 8009148:	4618      	mov	r0, r3
 800914a:	f7f9 fd97 	bl	8002c7c <HAL_PCD_EP_ClrStall>
 800914e:	4603      	mov	r3, r0
 8009150:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009152:	7bfb      	ldrb	r3, [r7, #15]
 8009154:	4618      	mov	r0, r3
 8009156:	f000 f8bf 	bl	80092d8 <USBD_Get_USB_Status>
 800915a:	4603      	mov	r3, r0
 800915c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800915e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009160:	4618      	mov	r0, r3
 8009162:	3710      	adds	r7, #16
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009168:	b480      	push	{r7}
 800916a:	b085      	sub	sp, #20
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	460b      	mov	r3, r1
 8009172:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800917a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800917c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009180:	2b00      	cmp	r3, #0
 8009182:	da0b      	bge.n	800919c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009184:	78fb      	ldrb	r3, [r7, #3]
 8009186:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800918a:	68f9      	ldr	r1, [r7, #12]
 800918c:	4613      	mov	r3, r2
 800918e:	00db      	lsls	r3, r3, #3
 8009190:	4413      	add	r3, r2
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	440b      	add	r3, r1
 8009196:	333e      	adds	r3, #62	; 0x3e
 8009198:	781b      	ldrb	r3, [r3, #0]
 800919a:	e00b      	b.n	80091b4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800919c:	78fb      	ldrb	r3, [r7, #3]
 800919e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80091a2:	68f9      	ldr	r1, [r7, #12]
 80091a4:	4613      	mov	r3, r2
 80091a6:	00db      	lsls	r3, r3, #3
 80091a8:	4413      	add	r3, r2
 80091aa:	009b      	lsls	r3, r3, #2
 80091ac:	440b      	add	r3, r1
 80091ae:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80091b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3714      	adds	r7, #20
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr

080091c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b084      	sub	sp, #16
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	460b      	mov	r3, r1
 80091ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091cc:	2300      	movs	r3, #0
 80091ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091d0:	2300      	movs	r3, #0
 80091d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80091da:	78fa      	ldrb	r2, [r7, #3]
 80091dc:	4611      	mov	r1, r2
 80091de:	4618      	mov	r0, r3
 80091e0:	f7f9 fb64 	bl	80028ac <HAL_PCD_SetAddress>
 80091e4:	4603      	mov	r3, r0
 80091e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091e8:	7bfb      	ldrb	r3, [r7, #15]
 80091ea:	4618      	mov	r0, r3
 80091ec:	f000 f874 	bl	80092d8 <USBD_Get_USB_Status>
 80091f0:	4603      	mov	r3, r0
 80091f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3710      	adds	r7, #16
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}

080091fe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80091fe:	b580      	push	{r7, lr}
 8009200:	b086      	sub	sp, #24
 8009202:	af00      	add	r7, sp, #0
 8009204:	60f8      	str	r0, [r7, #12]
 8009206:	607a      	str	r2, [r7, #4]
 8009208:	603b      	str	r3, [r7, #0]
 800920a:	460b      	mov	r3, r1
 800920c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800920e:	2300      	movs	r3, #0
 8009210:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009212:	2300      	movs	r3, #0
 8009214:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800921c:	7af9      	ldrb	r1, [r7, #11]
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	687a      	ldr	r2, [r7, #4]
 8009222:	f7f9 fc7d 	bl	8002b20 <HAL_PCD_EP_Transmit>
 8009226:	4603      	mov	r3, r0
 8009228:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800922a:	7dfb      	ldrb	r3, [r7, #23]
 800922c:	4618      	mov	r0, r3
 800922e:	f000 f853 	bl	80092d8 <USBD_Get_USB_Status>
 8009232:	4603      	mov	r3, r0
 8009234:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009236:	7dbb      	ldrb	r3, [r7, #22]
}
 8009238:	4618      	mov	r0, r3
 800923a:	3718      	adds	r7, #24
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}

08009240 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b086      	sub	sp, #24
 8009244:	af00      	add	r7, sp, #0
 8009246:	60f8      	str	r0, [r7, #12]
 8009248:	607a      	str	r2, [r7, #4]
 800924a:	603b      	str	r3, [r7, #0]
 800924c:	460b      	mov	r3, r1
 800924e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009250:	2300      	movs	r3, #0
 8009252:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009254:	2300      	movs	r3, #0
 8009256:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800925e:	7af9      	ldrb	r1, [r7, #11]
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	687a      	ldr	r2, [r7, #4]
 8009264:	f7f9 fbf9 	bl	8002a5a <HAL_PCD_EP_Receive>
 8009268:	4603      	mov	r3, r0
 800926a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800926c:	7dfb      	ldrb	r3, [r7, #23]
 800926e:	4618      	mov	r0, r3
 8009270:	f000 f832 	bl	80092d8 <USBD_Get_USB_Status>
 8009274:	4603      	mov	r3, r0
 8009276:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009278:	7dbb      	ldrb	r3, [r7, #22]
}
 800927a:	4618      	mov	r0, r3
 800927c:	3718      	adds	r7, #24
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}

08009282 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009282:	b580      	push	{r7, lr}
 8009284:	b082      	sub	sp, #8
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
 800928a:	460b      	mov	r3, r1
 800928c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009294:	78fa      	ldrb	r2, [r7, #3]
 8009296:	4611      	mov	r1, r2
 8009298:	4618      	mov	r0, r3
 800929a:	f7f9 fc29 	bl	8002af0 <HAL_PCD_EP_GetRxCount>
 800929e:	4603      	mov	r3, r0
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3708      	adds	r7, #8
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b083      	sub	sp, #12
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80092b0:	4b03      	ldr	r3, [pc, #12]	; (80092c0 <USBD_static_malloc+0x18>)
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	370c      	adds	r7, #12
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr
 80092be:	bf00      	nop
 80092c0:	20001c5c 	.word	0x20001c5c

080092c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b083      	sub	sp, #12
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]

}
 80092cc:	bf00      	nop
 80092ce:	370c      	adds	r7, #12
 80092d0:	46bd      	mov	sp, r7
 80092d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d6:	4770      	bx	lr

080092d8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80092d8:	b480      	push	{r7}
 80092da:	b085      	sub	sp, #20
 80092dc:	af00      	add	r7, sp, #0
 80092de:	4603      	mov	r3, r0
 80092e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092e2:	2300      	movs	r3, #0
 80092e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80092e6:	79fb      	ldrb	r3, [r7, #7]
 80092e8:	2b03      	cmp	r3, #3
 80092ea:	d817      	bhi.n	800931c <USBD_Get_USB_Status+0x44>
 80092ec:	a201      	add	r2, pc, #4	; (adr r2, 80092f4 <USBD_Get_USB_Status+0x1c>)
 80092ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092f2:	bf00      	nop
 80092f4:	08009305 	.word	0x08009305
 80092f8:	0800930b 	.word	0x0800930b
 80092fc:	08009311 	.word	0x08009311
 8009300:	08009317 	.word	0x08009317
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009304:	2300      	movs	r3, #0
 8009306:	73fb      	strb	r3, [r7, #15]
    break;
 8009308:	e00b      	b.n	8009322 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800930a:	2303      	movs	r3, #3
 800930c:	73fb      	strb	r3, [r7, #15]
    break;
 800930e:	e008      	b.n	8009322 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009310:	2301      	movs	r3, #1
 8009312:	73fb      	strb	r3, [r7, #15]
    break;
 8009314:	e005      	b.n	8009322 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009316:	2303      	movs	r3, #3
 8009318:	73fb      	strb	r3, [r7, #15]
    break;
 800931a:	e002      	b.n	8009322 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800931c:	2303      	movs	r3, #3
 800931e:	73fb      	strb	r3, [r7, #15]
    break;
 8009320:	bf00      	nop
  }
  return usb_status;
 8009322:	7bfb      	ldrb	r3, [r7, #15]
}
 8009324:	4618      	mov	r0, r3
 8009326:	3714      	adds	r7, #20
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <__libc_init_array>:
 8009330:	b570      	push	{r4, r5, r6, lr}
 8009332:	4d0d      	ldr	r5, [pc, #52]	; (8009368 <__libc_init_array+0x38>)
 8009334:	4c0d      	ldr	r4, [pc, #52]	; (800936c <__libc_init_array+0x3c>)
 8009336:	1b64      	subs	r4, r4, r5
 8009338:	10a4      	asrs	r4, r4, #2
 800933a:	2600      	movs	r6, #0
 800933c:	42a6      	cmp	r6, r4
 800933e:	d109      	bne.n	8009354 <__libc_init_array+0x24>
 8009340:	4d0b      	ldr	r5, [pc, #44]	; (8009370 <__libc_init_array+0x40>)
 8009342:	4c0c      	ldr	r4, [pc, #48]	; (8009374 <__libc_init_array+0x44>)
 8009344:	f000 f87c 	bl	8009440 <_init>
 8009348:	1b64      	subs	r4, r4, r5
 800934a:	10a4      	asrs	r4, r4, #2
 800934c:	2600      	movs	r6, #0
 800934e:	42a6      	cmp	r6, r4
 8009350:	d105      	bne.n	800935e <__libc_init_array+0x2e>
 8009352:	bd70      	pop	{r4, r5, r6, pc}
 8009354:	f855 3b04 	ldr.w	r3, [r5], #4
 8009358:	4798      	blx	r3
 800935a:	3601      	adds	r6, #1
 800935c:	e7ee      	b.n	800933c <__libc_init_array+0xc>
 800935e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009362:	4798      	blx	r3
 8009364:	3601      	adds	r6, #1
 8009366:	e7f2      	b.n	800934e <__libc_init_array+0x1e>
 8009368:	080094e8 	.word	0x080094e8
 800936c:	080094e8 	.word	0x080094e8
 8009370:	080094e8 	.word	0x080094e8
 8009374:	080094ec 	.word	0x080094ec

08009378 <__itoa>:
 8009378:	1e93      	subs	r3, r2, #2
 800937a:	2b22      	cmp	r3, #34	; 0x22
 800937c:	b510      	push	{r4, lr}
 800937e:	460c      	mov	r4, r1
 8009380:	d904      	bls.n	800938c <__itoa+0x14>
 8009382:	2300      	movs	r3, #0
 8009384:	700b      	strb	r3, [r1, #0]
 8009386:	461c      	mov	r4, r3
 8009388:	4620      	mov	r0, r4
 800938a:	bd10      	pop	{r4, pc}
 800938c:	2a0a      	cmp	r2, #10
 800938e:	d109      	bne.n	80093a4 <__itoa+0x2c>
 8009390:	2800      	cmp	r0, #0
 8009392:	da07      	bge.n	80093a4 <__itoa+0x2c>
 8009394:	232d      	movs	r3, #45	; 0x2d
 8009396:	700b      	strb	r3, [r1, #0]
 8009398:	4240      	negs	r0, r0
 800939a:	2101      	movs	r1, #1
 800939c:	4421      	add	r1, r4
 800939e:	f000 f80d 	bl	80093bc <__utoa>
 80093a2:	e7f1      	b.n	8009388 <__itoa+0x10>
 80093a4:	2100      	movs	r1, #0
 80093a6:	e7f9      	b.n	800939c <__itoa+0x24>

080093a8 <itoa>:
 80093a8:	f7ff bfe6 	b.w	8009378 <__itoa>

080093ac <memset>:
 80093ac:	4402      	add	r2, r0
 80093ae:	4603      	mov	r3, r0
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d100      	bne.n	80093b6 <memset+0xa>
 80093b4:	4770      	bx	lr
 80093b6:	f803 1b01 	strb.w	r1, [r3], #1
 80093ba:	e7f9      	b.n	80093b0 <memset+0x4>

080093bc <__utoa>:
 80093bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093be:	4c1f      	ldr	r4, [pc, #124]	; (800943c <__utoa+0x80>)
 80093c0:	b08b      	sub	sp, #44	; 0x2c
 80093c2:	4605      	mov	r5, r0
 80093c4:	460b      	mov	r3, r1
 80093c6:	466e      	mov	r6, sp
 80093c8:	f104 0c20 	add.w	ip, r4, #32
 80093cc:	6820      	ldr	r0, [r4, #0]
 80093ce:	6861      	ldr	r1, [r4, #4]
 80093d0:	4637      	mov	r7, r6
 80093d2:	c703      	stmia	r7!, {r0, r1}
 80093d4:	3408      	adds	r4, #8
 80093d6:	4564      	cmp	r4, ip
 80093d8:	463e      	mov	r6, r7
 80093da:	d1f7      	bne.n	80093cc <__utoa+0x10>
 80093dc:	7921      	ldrb	r1, [r4, #4]
 80093de:	7139      	strb	r1, [r7, #4]
 80093e0:	1e91      	subs	r1, r2, #2
 80093e2:	6820      	ldr	r0, [r4, #0]
 80093e4:	6038      	str	r0, [r7, #0]
 80093e6:	2922      	cmp	r1, #34	; 0x22
 80093e8:	f04f 0100 	mov.w	r1, #0
 80093ec:	d904      	bls.n	80093f8 <__utoa+0x3c>
 80093ee:	7019      	strb	r1, [r3, #0]
 80093f0:	460b      	mov	r3, r1
 80093f2:	4618      	mov	r0, r3
 80093f4:	b00b      	add	sp, #44	; 0x2c
 80093f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093f8:	1e58      	subs	r0, r3, #1
 80093fa:	4684      	mov	ip, r0
 80093fc:	fbb5 f7f2 	udiv	r7, r5, r2
 8009400:	fb02 5617 	mls	r6, r2, r7, r5
 8009404:	3628      	adds	r6, #40	; 0x28
 8009406:	446e      	add	r6, sp
 8009408:	460c      	mov	r4, r1
 800940a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800940e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8009412:	462e      	mov	r6, r5
 8009414:	42b2      	cmp	r2, r6
 8009416:	f101 0101 	add.w	r1, r1, #1
 800941a:	463d      	mov	r5, r7
 800941c:	d9ee      	bls.n	80093fc <__utoa+0x40>
 800941e:	2200      	movs	r2, #0
 8009420:	545a      	strb	r2, [r3, r1]
 8009422:	1919      	adds	r1, r3, r4
 8009424:	1aa5      	subs	r5, r4, r2
 8009426:	42aa      	cmp	r2, r5
 8009428:	dae3      	bge.n	80093f2 <__utoa+0x36>
 800942a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800942e:	780e      	ldrb	r6, [r1, #0]
 8009430:	7006      	strb	r6, [r0, #0]
 8009432:	3201      	adds	r2, #1
 8009434:	f801 5901 	strb.w	r5, [r1], #-1
 8009438:	e7f4      	b.n	8009424 <__utoa+0x68>
 800943a:	bf00      	nop
 800943c:	080094b8 	.word	0x080094b8

08009440 <_init>:
 8009440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009442:	bf00      	nop
 8009444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009446:	bc08      	pop	{r3}
 8009448:	469e      	mov	lr, r3
 800944a:	4770      	bx	lr

0800944c <_fini>:
 800944c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800944e:	bf00      	nop
 8009450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009452:	bc08      	pop	{r3}
 8009454:	469e      	mov	lr, r3
 8009456:	4770      	bx	lr
