
ad7606_f407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009120  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080092a8  080092a8  000192a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009308  08009308  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08009308  08009308  00019308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009310  08009310  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009310  08009310  00019310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009314  08009314  00019314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08009318  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          00001d78  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00006004  20001e74  20001e74  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016b4b  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000362b  00000000  00000000  00036c77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001370  00000000  00000000  0003a2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011e8  00000000  00000000  0003b618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000244f9  00000000  00000000  0003c800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017842  00000000  00000000  00060cf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cec6c  00000000  00000000  0007853b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001471a7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000513c  00000000  00000000  001471f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009290 	.word	0x08009290

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	08009290 	.word	0x08009290

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <AD7606_Init>:
 *               the configuration information for TIM mmodule.
 * @retval None
 */
void AD7606_Init(AD7606_HandleTyeDef *dev, SPI_HandleTypeDef *spiHandle,
		DMA_HandleTypeDef *dmaHandle, TIM_HandleTypeDef *timHandle)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	607a      	str	r2, [r7, #4]
 80004d8:	603b      	str	r3, [r7, #0]
	dev->hspi = spiHandle;
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	68ba      	ldr	r2, [r7, #8]
 80004de:	601a      	str	r2, [r3, #0]
	dev->hdmarx = dmaHandle;
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	687a      	ldr	r2, [r7, #4]
 80004e4:	609a      	str	r2, [r3, #8]
	dev->htim = timHandle;
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	683a      	ldr	r2, [r7, #0]
 80004ea:	605a      	str	r2, [r3, #4]
	return;
 80004ec:	bf00      	nop
}
 80004ee:	3714      	adds	r7, #20
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr

080004f8 <AD7606_RST>:
/**
 * @brief  Reset AD7606 Module before using
 * @retval None
 */
void AD7606_RST(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
	AD_RST_H;
 80004fc:	2201      	movs	r2, #1
 80004fe:	2104      	movs	r1, #4
 8000500:	4806      	ldr	r0, [pc, #24]	; (800051c <AD7606_RST+0x24>)
 8000502:	f001 fbbb 	bl	8001c7c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000506:	2001      	movs	r0, #1
 8000508:	f000 fd5e 	bl	8000fc8 <HAL_Delay>
	AD_RST_L;
 800050c:	2200      	movs	r2, #0
 800050e:	2104      	movs	r1, #4
 8000510:	4802      	ldr	r0, [pc, #8]	; (800051c <AD7606_RST+0x24>)
 8000512:	f001 fbb3 	bl	8001c7c <HAL_GPIO_WritePin>
}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40020800 	.word	0x40020800

08000520 <AD7606_OS_SET>:
 * @brief  Init oversampling rate for AD7606
 * @param osRate,
 * @retval None
 */
void AD7606_OS_SET(uint8_t osRate)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	71fb      	strb	r3, [r7, #7]
	switch (osRate)
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	2b20      	cmp	r3, #32
 800052e:	dc49      	bgt.n	80005c4 <AD7606_OS_SET+0xa4>
 8000530:	2b00      	cmp	r3, #0
 8000532:	f340 80ba 	ble.w	80006aa <AD7606_OS_SET+0x18a>
 8000536:	3b01      	subs	r3, #1
 8000538:	2b1f      	cmp	r3, #31
 800053a:	f200 80b6 	bhi.w	80006aa <AD7606_OS_SET+0x18a>
 800053e:	a201      	add	r2, pc, #4	; (adr r2, 8000544 <AD7606_OS_SET+0x24>)
 8000540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000544:	080005cb 	.word	0x080005cb
 8000548:	080005eb 	.word	0x080005eb
 800054c:	080006ab 	.word	0x080006ab
 8000550:	0800060b 	.word	0x0800060b
 8000554:	080006ab 	.word	0x080006ab
 8000558:	080006ab 	.word	0x080006ab
 800055c:	080006ab 	.word	0x080006ab
 8000560:	0800062b 	.word	0x0800062b
 8000564:	080006ab 	.word	0x080006ab
 8000568:	080006ab 	.word	0x080006ab
 800056c:	080006ab 	.word	0x080006ab
 8000570:	080006ab 	.word	0x080006ab
 8000574:	080006ab 	.word	0x080006ab
 8000578:	080006ab 	.word	0x080006ab
 800057c:	080006ab 	.word	0x080006ab
 8000580:	0800064b 	.word	0x0800064b
 8000584:	080006ab 	.word	0x080006ab
 8000588:	080006ab 	.word	0x080006ab
 800058c:	080006ab 	.word	0x080006ab
 8000590:	080006ab 	.word	0x080006ab
 8000594:	080006ab 	.word	0x080006ab
 8000598:	080006ab 	.word	0x080006ab
 800059c:	080006ab 	.word	0x080006ab
 80005a0:	080006ab 	.word	0x080006ab
 80005a4:	080006ab 	.word	0x080006ab
 80005a8:	080006ab 	.word	0x080006ab
 80005ac:	080006ab 	.word	0x080006ab
 80005b0:	080006ab 	.word	0x080006ab
 80005b4:	080006ab 	.word	0x080006ab
 80005b8:	080006ab 	.word	0x080006ab
 80005bc:	080006ab 	.word	0x080006ab
 80005c0:	0800066b 	.word	0x0800066b
 80005c4:	2b40      	cmp	r3, #64	; 0x40
 80005c6:	d060      	beq.n	800068a <AD7606_OS_SET+0x16a>
 80005c8:	e06f      	b.n	80006aa <AD7606_OS_SET+0x18a>
	{
	case OS_NO_RATIO:	//000
		AD_OS0_L;
 80005ca:	2200      	movs	r2, #0
 80005cc:	2102      	movs	r1, #2
 80005ce:	4841      	ldr	r0, [pc, #260]	; (80006d4 <AD7606_OS_SET+0x1b4>)
 80005d0:	f001 fb54 	bl	8001c7c <HAL_GPIO_WritePin>
		AD_OS1_L;
 80005d4:	2200      	movs	r2, #0
 80005d6:	2101      	movs	r1, #1
 80005d8:	483e      	ldr	r0, [pc, #248]	; (80006d4 <AD7606_OS_SET+0x1b4>)
 80005da:	f001 fb4f 	bl	8001c7c <HAL_GPIO_WritePin>
		AD_OS2_L;
 80005de:	2200      	movs	r2, #0
 80005e0:	2101      	movs	r1, #1
 80005e2:	483c      	ldr	r0, [pc, #240]	; (80006d4 <AD7606_OS_SET+0x1b4>)
 80005e4:	f001 fb4a 	bl	8001c7c <HAL_GPIO_WritePin>
		break;
 80005e8:	e06f      	b.n	80006ca <AD7606_OS_SET+0x1aa>
	case OS_RATIO_2:	//001
		AD_OS0_H;
 80005ea:	2201      	movs	r2, #1
 80005ec:	2102      	movs	r1, #2
 80005ee:	4839      	ldr	r0, [pc, #228]	; (80006d4 <AD7606_OS_SET+0x1b4>)
 80005f0:	f001 fb44 	bl	8001c7c <HAL_GPIO_WritePin>
		AD_OS1_L;
 80005f4:	2200      	movs	r2, #0
 80005f6:	2101      	movs	r1, #1
 80005f8:	4836      	ldr	r0, [pc, #216]	; (80006d4 <AD7606_OS_SET+0x1b4>)
 80005fa:	f001 fb3f 	bl	8001c7c <HAL_GPIO_WritePin>
		AD_OS2_L;
 80005fe:	2200      	movs	r2, #0
 8000600:	2101      	movs	r1, #1
 8000602:	4834      	ldr	r0, [pc, #208]	; (80006d4 <AD7606_OS_SET+0x1b4>)
 8000604:	f001 fb3a 	bl	8001c7c <HAL_GPIO_WritePin>
		break;
 8000608:	e05f      	b.n	80006ca <AD7606_OS_SET+0x1aa>
	case OS_RATIO_4:	//010
		AD_OS0_L;
 800060a:	2200      	movs	r2, #0
 800060c:	2102      	movs	r1, #2
 800060e:	4831      	ldr	r0, [pc, #196]	; (80006d4 <AD7606_OS_SET+0x1b4>)
 8000610:	f001 fb34 	bl	8001c7c <HAL_GPIO_WritePin>
		AD_OS1_H;
 8000614:	2201      	movs	r2, #1
 8000616:	2101      	movs	r1, #1
 8000618:	482e      	ldr	r0, [pc, #184]	; (80006d4 <AD7606_OS_SET+0x1b4>)
 800061a:	f001 fb2f 	bl	8001c7c <HAL_GPIO_WritePin>
		AD_OS2_L;
 800061e:	2200      	movs	r2, #0
 8000620:	2101      	movs	r1, #1
 8000622:	482c      	ldr	r0, [pc, #176]	; (80006d4 <AD7606_OS_SET+0x1b4>)
 8000624:	f001 fb2a 	bl	8001c7c <HAL_GPIO_WritePin>
		break;
 8000628:	e04f      	b.n	80006ca <AD7606_OS_SET+0x1aa>
	case OS_RATIO_8:	//011
		AD_OS0_H;
 800062a:	2201      	movs	r2, #1
 800062c:	2102      	movs	r1, #2
 800062e:	4829      	ldr	r0, [pc, #164]	; (80006d4 <AD7606_OS_SET+0x1b4>)
 8000630:	f001 fb24 	bl	8001c7c <HAL_GPIO_WritePin>
		AD_OS1_H;
 8000634:	2201      	movs	r2, #1
 8000636:	2101      	movs	r1, #1
 8000638:	4826      	ldr	r0, [pc, #152]	; (80006d4 <AD7606_OS_SET+0x1b4>)
 800063a:	f001 fb1f 	bl	8001c7c <HAL_GPIO_WritePin>
		AD_OS2_L;
 800063e:	2200      	movs	r2, #0
 8000640:	2101      	movs	r1, #1
 8000642:	4824      	ldr	r0, [pc, #144]	; (80006d4 <AD7606_OS_SET+0x1b4>)
 8000644:	f001 fb1a 	bl	8001c7c <HAL_GPIO_WritePin>
		break;
 8000648:	e03f      	b.n	80006ca <AD7606_OS_SET+0x1aa>
	case OS_RATIO_16:	//100
		AD_OS0_L;
 800064a:	2200      	movs	r2, #0
 800064c:	2102      	movs	r1, #2
 800064e:	4821      	ldr	r0, [pc, #132]	; (80006d4 <AD7606_OS_SET+0x1b4>)
 8000650:	f001 fb14 	bl	8001c7c <HAL_GPIO_WritePin>
		AD_OS1_L;
 8000654:	2200      	movs	r2, #0
 8000656:	2101      	movs	r1, #1
 8000658:	481e      	ldr	r0, [pc, #120]	; (80006d4 <AD7606_OS_SET+0x1b4>)
 800065a:	f001 fb0f 	bl	8001c7c <HAL_GPIO_WritePin>
		AD_OS2_H;
 800065e:	2201      	movs	r2, #1
 8000660:	2108      	movs	r1, #8
 8000662:	481d      	ldr	r0, [pc, #116]	; (80006d8 <AD7606_OS_SET+0x1b8>)
 8000664:	f001 fb0a 	bl	8001c7c <HAL_GPIO_WritePin>
		break;
 8000668:	e02f      	b.n	80006ca <AD7606_OS_SET+0x1aa>
	case OS_RATIO_32:	//101
		AD_OS0_H;
 800066a:	2201      	movs	r2, #1
 800066c:	2102      	movs	r1, #2
 800066e:	4819      	ldr	r0, [pc, #100]	; (80006d4 <AD7606_OS_SET+0x1b4>)
 8000670:	f001 fb04 	bl	8001c7c <HAL_GPIO_WritePin>
		AD_OS1_L;
 8000674:	2200      	movs	r2, #0
 8000676:	2101      	movs	r1, #1
 8000678:	4816      	ldr	r0, [pc, #88]	; (80006d4 <AD7606_OS_SET+0x1b4>)
 800067a:	f001 faff 	bl	8001c7c <HAL_GPIO_WritePin>
		AD_OS2_H;
 800067e:	2201      	movs	r2, #1
 8000680:	2108      	movs	r1, #8
 8000682:	4815      	ldr	r0, [pc, #84]	; (80006d8 <AD7606_OS_SET+0x1b8>)
 8000684:	f001 fafa 	bl	8001c7c <HAL_GPIO_WritePin>
		break;
 8000688:	e01f      	b.n	80006ca <AD7606_OS_SET+0x1aa>
	case OS_RATIO_64:	//110
		AD_OS0_L;
 800068a:	2200      	movs	r2, #0
 800068c:	2102      	movs	r1, #2
 800068e:	4811      	ldr	r0, [pc, #68]	; (80006d4 <AD7606_OS_SET+0x1b4>)
 8000690:	f001 faf4 	bl	8001c7c <HAL_GPIO_WritePin>
		AD_OS1_H;
 8000694:	2201      	movs	r2, #1
 8000696:	2101      	movs	r1, #1
 8000698:	480e      	ldr	r0, [pc, #56]	; (80006d4 <AD7606_OS_SET+0x1b4>)
 800069a:	f001 faef 	bl	8001c7c <HAL_GPIO_WritePin>
		AD_OS2_H;
 800069e:	2201      	movs	r2, #1
 80006a0:	2108      	movs	r1, #8
 80006a2:	480d      	ldr	r0, [pc, #52]	; (80006d8 <AD7606_OS_SET+0x1b8>)
 80006a4:	f001 faea 	bl	8001c7c <HAL_GPIO_WritePin>
		break;
 80006a8:	e00f      	b.n	80006ca <AD7606_OS_SET+0x1aa>
	default:
		AD_OS0_L;
 80006aa:	2200      	movs	r2, #0
 80006ac:	2102      	movs	r1, #2
 80006ae:	4809      	ldr	r0, [pc, #36]	; (80006d4 <AD7606_OS_SET+0x1b4>)
 80006b0:	f001 fae4 	bl	8001c7c <HAL_GPIO_WritePin>
		AD_OS1_L;
 80006b4:	2200      	movs	r2, #0
 80006b6:	2101      	movs	r1, #1
 80006b8:	4806      	ldr	r0, [pc, #24]	; (80006d4 <AD7606_OS_SET+0x1b4>)
 80006ba:	f001 fadf 	bl	8001c7c <HAL_GPIO_WritePin>
		AD_OS2_L;
 80006be:	2200      	movs	r2, #0
 80006c0:	2101      	movs	r1, #1
 80006c2:	4804      	ldr	r0, [pc, #16]	; (80006d4 <AD7606_OS_SET+0x1b4>)
 80006c4:	f001 fada 	bl	8001c7c <HAL_GPIO_WritePin>
		break;
 80006c8:	bf00      	nop

	}
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40020000 	.word	0x40020000
 80006d8:	40020800 	.word	0x40020800

080006dc <AD7606_StartReadBytes_DMA>:
 * @param  Size amount of data to be received
 * @retval HAL status
 */
HAL_StatusTypeDef AD7606_StartReadBytes_DMA(AD7606_HandleTyeDef *dev,
		int16_t *pAdcDataBuf, uint16_t Size)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	4613      	mov	r3, r2
 80006e8:	80fb      	strh	r3, [r7, #6]
	//Set Transaction Information
	dev->pAdcDataBufPtr = pAdcDataBuf;
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	68ba      	ldr	r2, [r7, #8]
 80006ee:	60da      	str	r2, [r3, #12]
	dev->adcDataBufSize = Size;
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	88fa      	ldrh	r2, [r7, #6]
 80006f4:	821a      	strh	r2, [r3, #16]
	//wait until the BUSY pin is at reset state (Logic "0")
	while (HAL_GPIO_ReadPin(AD_BUSY_GPIO_Port, AD_BUSY_Pin) == GPIO_PIN_SET);
 80006f6:	bf00      	nop
 80006f8:	2110      	movs	r1, #16
 80006fa:	480a      	ldr	r0, [pc, #40]	; (8000724 <AD7606_StartReadBytes_DMA+0x48>)
 80006fc:	f001 faa6 	bl	8001c4c <HAL_GPIO_ReadPin>
 8000700:	4603      	mov	r3, r0
 8000702:	2b01      	cmp	r3, #1
 8000704:	d0f8      	beq.n	80006f8 <AD7606_StartReadBytes_DMA+0x1c>
//	HAL_Delay(0.0000015);
	return HAL_SPI_Receive_DMA(dev->hspi, (uint8_t*) dev->pAdcDataBufPtr,
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	6818      	ldr	r0, [r3, #0]
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	68d9      	ldr	r1, [r3, #12]
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	8a1b      	ldrh	r3, [r3, #16]
 8000712:	461a      	mov	r2, r3
 8000714:	f003 fa42 	bl	8003b9c <HAL_SPI_Receive_DMA>
 8000718:	4603      	mov	r3, r0
			dev->adcDataBufSize);
}
 800071a:	4618      	mov	r0, r3
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40020800 	.word	0x40020800

08000728 <AD7606_CVST_START>:
 * @param  dev pointer to a AD7606_HandleTyeDef structure that contains
 *               the configuration information for AD7606 module.
 * @retval HAL status
 */
HAL_StatusTypeDef AD7606_CVST_START(AD7606_HandleTyeDef *dev)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]

	return HAL_TIM_PWM_Start(dev->htim, TIM_CHANNEL_2);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	685b      	ldr	r3, [r3, #4]
 8000734:	2104      	movs	r1, #4
 8000736:	4618      	mov	r0, r3
 8000738:	f003 fedc 	bl	80044f4 <HAL_TIM_PWM_Start>
 800073c:	4603      	mov	r3, r0
}
 800073e:	4618      	mov	r0, r3
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
	...

08000748 <AD7606_ConvertToVoltage>:
 * @retval HAL status
 */

void AD7606_ConvertToVoltage(uint16_t channelNum, int16_t *pAdcDataBuf,
		float *pVoltDataBuf)
{
 8000748:	b480      	push	{r7}
 800074a:	b087      	sub	sp, #28
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	60b9      	str	r1, [r7, #8]
 8000752:	607a      	str	r2, [r7, #4]
 8000754:	81fb      	strh	r3, [r7, #14]
	uint16_t i;
	for (i = 0; i < channelNum; i++)
 8000756:	2300      	movs	r3, #0
 8000758:	82fb      	strh	r3, [r7, #22]
 800075a:	e01a      	b.n	8000792 <AD7606_ConvertToVoltage+0x4a>
	{
		pVoltDataBuf[i] = ((float) pAdcDataBuf[i] * AD7606_RANGE_VALUE_10)
 800075c:	8afb      	ldrh	r3, [r7, #22]
 800075e:	005b      	lsls	r3, r3, #1
 8000760:	68ba      	ldr	r2, [r7, #8]
 8000762:	4413      	add	r3, r2
 8000764:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000768:	ee07 3a90 	vmov	s15, r3
 800076c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000770:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000774:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000778:	8afb      	ldrh	r3, [r7, #22]
 800077a:	009b      	lsls	r3, r3, #2
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	4413      	add	r3, r2
				/ 32768.0;
 8000780:	eddf 6a09 	vldr	s13, [pc, #36]	; 80007a8 <AD7606_ConvertToVoltage+0x60>
 8000784:	eec7 7a26 	vdiv.f32	s15, s14, s13
		pVoltDataBuf[i] = ((float) pAdcDataBuf[i] * AD7606_RANGE_VALUE_10)
 8000788:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < channelNum; i++)
 800078c:	8afb      	ldrh	r3, [r7, #22]
 800078e:	3301      	adds	r3, #1
 8000790:	82fb      	strh	r3, [r7, #22]
 8000792:	8afa      	ldrh	r2, [r7, #22]
 8000794:	89fb      	ldrh	r3, [r7, #14]
 8000796:	429a      	cmp	r2, r3
 8000798:	d3e0      	bcc.n	800075c <AD7606_ConvertToVoltage+0x14>
	}
	return;
 800079a:	bf00      	nop
}
 800079c:	371c      	adds	r7, #28
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	47000000 	.word	0x47000000

080007ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b0:	f000 fb98 	bl	8000ee4 <HAL_Init>

  /* USER CODE BEGIN Init */
  AD7606_Init(&had7606, &hspi1, &hdma_spi1_rx, &htim2);
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <main+0x54>)
 80007b6:	4a13      	ldr	r2, [pc, #76]	; (8000804 <main+0x58>)
 80007b8:	4913      	ldr	r1, [pc, #76]	; (8000808 <main+0x5c>)
 80007ba:	4814      	ldr	r0, [pc, #80]	; (800080c <main+0x60>)
 80007bc:	f7ff fe86 	bl	80004cc <AD7606_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c0:	f000 f82a 	bl	8000818 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c4:	f000 f95e 	bl	8000a84 <MX_GPIO_Init>
  MX_DMA_Init();
 80007c8:	f000 f93c 	bl	8000a44 <MX_DMA_Init>
  MX_SPI1_Init();
 80007cc:	f000 f88e 	bl	80008ec <MX_SPI1_Init>
  MX_TIM2_Init();
 80007d0:	f000 f8c4 	bl	800095c <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80007d4:	f008 f83c 	bl	8008850 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  AD7606_OS_SET(1);
 80007d8:	2001      	movs	r0, #1
 80007da:	f7ff fea1 	bl	8000520 <AD7606_OS_SET>
  AD7606_RST();
 80007de:	f7ff fe8b 	bl	80004f8 <AD7606_RST>
  AD7606_CVST_START(&had7606);
 80007e2:	480a      	ldr	r0, [pc, #40]	; (800080c <main+0x60>)
 80007e4:	f7ff ffa0 	bl	8000728 <AD7606_CVST_START>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

//	  AD7606_StartReadBytes(&had7606, adcDataBuf, ADC_DATA_BUF_SIZE, 10);
	  AD7606_StartReadBytes_DMA(&had7606, adcDataBuf, ADC_DATA_BUF_SIZE);
 80007e8:	2208      	movs	r2, #8
 80007ea:	4909      	ldr	r1, [pc, #36]	; (8000810 <main+0x64>)
 80007ec:	4807      	ldr	r0, [pc, #28]	; (800080c <main+0x60>)
 80007ee:	f7ff ff75 	bl	80006dc <AD7606_StartReadBytes_DMA>
	  AD7606_ConvertToVoltage(READ_8_CHANNEL, adcDataBuf, voltageDataBuf);
 80007f2:	4a08      	ldr	r2, [pc, #32]	; (8000814 <main+0x68>)
 80007f4:	4906      	ldr	r1, [pc, #24]	; (8000810 <main+0x64>)
 80007f6:	2008      	movs	r0, #8
 80007f8:	f7ff ffa6 	bl	8000748 <AD7606_ConvertToVoltage>
	  AD7606_StartReadBytes_DMA(&had7606, adcDataBuf, ADC_DATA_BUF_SIZE);
 80007fc:	e7f4      	b.n	80007e8 <main+0x3c>
 80007fe:	bf00      	nop
 8000800:	200001d0 	.word	0x200001d0
 8000804:	20000170 	.word	0x20000170
 8000808:	20000118 	.word	0x20000118
 800080c:	20000248 	.word	0x20000248
 8000810:	20000218 	.word	0x20000218
 8000814:	20000228 	.word	0x20000228

08000818 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b094      	sub	sp, #80	; 0x50
 800081c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081e:	f107 0320 	add.w	r3, r7, #32
 8000822:	2230      	movs	r2, #48	; 0x30
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f008 fd2a 	bl	8009280 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800082c:	f107 030c 	add.w	r3, r7, #12
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800083c:	2300      	movs	r3, #0
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	4b28      	ldr	r3, [pc, #160]	; (80008e4 <SystemClock_Config+0xcc>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000844:	4a27      	ldr	r2, [pc, #156]	; (80008e4 <SystemClock_Config+0xcc>)
 8000846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084a:	6413      	str	r3, [r2, #64]	; 0x40
 800084c:	4b25      	ldr	r3, [pc, #148]	; (80008e4 <SystemClock_Config+0xcc>)
 800084e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000858:	2300      	movs	r3, #0
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	4b22      	ldr	r3, [pc, #136]	; (80008e8 <SystemClock_Config+0xd0>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a21      	ldr	r2, [pc, #132]	; (80008e8 <SystemClock_Config+0xd0>)
 8000862:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000866:	6013      	str	r3, [r2, #0]
 8000868:	4b1f      	ldr	r3, [pc, #124]	; (80008e8 <SystemClock_Config+0xd0>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000874:	2301      	movs	r3, #1
 8000876:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000878:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800087e:	2302      	movs	r3, #2
 8000880:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000882:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000886:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000888:	2308      	movs	r3, #8
 800088a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800088c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000890:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000892:	2302      	movs	r3, #2
 8000894:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000896:	2307      	movs	r3, #7
 8000898:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089a:	f107 0320 	add.w	r3, r7, #32
 800089e:	4618      	mov	r0, r3
 80008a0:	f002 fc82 	bl	80031a8 <HAL_RCC_OscConfig>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80008aa:	f000 f98f 	bl	8000bcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ae:	230f      	movs	r3, #15
 80008b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b2:	2302      	movs	r3, #2
 80008b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b6:	2300      	movs	r3, #0
 80008b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008c6:	f107 030c 	add.w	r3, r7, #12
 80008ca:	2105      	movs	r1, #5
 80008cc:	4618      	mov	r0, r3
 80008ce:	f002 fee3 	bl	8003698 <HAL_RCC_ClockConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80008d8:	f000 f978 	bl	8000bcc <Error_Handler>
  }
}
 80008dc:	bf00      	nop
 80008de:	3750      	adds	r7, #80	; 0x50
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40007000 	.word	0x40007000

080008ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008f0:	4b18      	ldr	r3, [pc, #96]	; (8000954 <MX_SPI1_Init+0x68>)
 80008f2:	4a19      	ldr	r2, [pc, #100]	; (8000958 <MX_SPI1_Init+0x6c>)
 80008f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008f6:	4b17      	ldr	r3, [pc, #92]	; (8000954 <MX_SPI1_Init+0x68>)
 80008f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80008fe:	4b15      	ldr	r3, [pc, #84]	; (8000954 <MX_SPI1_Init+0x68>)
 8000900:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000904:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000906:	4b13      	ldr	r3, [pc, #76]	; (8000954 <MX_SPI1_Init+0x68>)
 8000908:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800090c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_SPI1_Init+0x68>)
 8000910:	2202      	movs	r2, #2
 8000912:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <MX_SPI1_Init+0x68>)
 8000916:	2201      	movs	r2, #1
 8000918:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <MX_SPI1_Init+0x68>)
 800091c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000920:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000922:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_SPI1_Init+0x68>)
 8000924:	2208      	movs	r2, #8
 8000926:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000928:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <MX_SPI1_Init+0x68>)
 800092a:	2200      	movs	r2, #0
 800092c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_SPI1_Init+0x68>)
 8000930:	2200      	movs	r2, #0
 8000932:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000934:	4b07      	ldr	r3, [pc, #28]	; (8000954 <MX_SPI1_Init+0x68>)
 8000936:	2200      	movs	r2, #0
 8000938:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <MX_SPI1_Init+0x68>)
 800093c:	220a      	movs	r2, #10
 800093e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000940:	4804      	ldr	r0, [pc, #16]	; (8000954 <MX_SPI1_Init+0x68>)
 8000942:	f003 f8a1 	bl	8003a88 <HAL_SPI_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 800094c:	f000 f93e 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000118 	.word	0x20000118
 8000958:	40013000 	.word	0x40013000

0800095c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08e      	sub	sp, #56	; 0x38
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000962:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000970:	f107 0320 	add.w	r3, r7, #32
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
 8000988:	615a      	str	r2, [r3, #20]
 800098a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800098c:	4b2c      	ldr	r3, [pc, #176]	; (8000a40 <MX_TIM2_Init+0xe4>)
 800098e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000992:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84;
 8000994:	4b2a      	ldr	r3, [pc, #168]	; (8000a40 <MX_TIM2_Init+0xe4>)
 8000996:	2254      	movs	r2, #84	; 0x54
 8000998:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099a:	4b29      	ldr	r3, [pc, #164]	; (8000a40 <MX_TIM2_Init+0xe4>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80009a0:	4b27      	ldr	r3, [pc, #156]	; (8000a40 <MX_TIM2_Init+0xe4>)
 80009a2:	2263      	movs	r2, #99	; 0x63
 80009a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a6:	4b26      	ldr	r3, [pc, #152]	; (8000a40 <MX_TIM2_Init+0xe4>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ac:	4b24      	ldr	r3, [pc, #144]	; (8000a40 <MX_TIM2_Init+0xe4>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009b2:	4823      	ldr	r0, [pc, #140]	; (8000a40 <MX_TIM2_Init+0xe4>)
 80009b4:	f003 fcf6 	bl	80043a4 <HAL_TIM_Base_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80009be:	f000 f905 	bl	8000bcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009cc:	4619      	mov	r1, r3
 80009ce:	481c      	ldr	r0, [pc, #112]	; (8000a40 <MX_TIM2_Init+0xe4>)
 80009d0:	f003 ff1a 	bl	8004808 <HAL_TIM_ConfigClockSource>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80009da:	f000 f8f7 	bl	8000bcc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009de:	4818      	ldr	r0, [pc, #96]	; (8000a40 <MX_TIM2_Init+0xe4>)
 80009e0:	f003 fd2f 	bl	8004442 <HAL_TIM_PWM_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80009ea:	f000 f8ef 	bl	8000bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ee:	2300      	movs	r3, #0
 80009f0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009f6:	f107 0320 	add.w	r3, r7, #32
 80009fa:	4619      	mov	r1, r3
 80009fc:	4810      	ldr	r0, [pc, #64]	; (8000a40 <MX_TIM2_Init+0xe4>)
 80009fe:	f004 fadb 	bl	8004fb8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000a08:	f000 f8e0 	bl	8000bcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a0c:	2360      	movs	r3, #96	; 0x60
 8000a0e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 95;
 8000a10:	235f      	movs	r3, #95	; 0x5f
 8000a12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	2204      	movs	r2, #4
 8000a20:	4619      	mov	r1, r3
 8000a22:	4807      	ldr	r0, [pc, #28]	; (8000a40 <MX_TIM2_Init+0xe4>)
 8000a24:	f003 fe2e 	bl	8004684 <HAL_TIM_PWM_ConfigChannel>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000a2e:	f000 f8cd 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a32:	4803      	ldr	r0, [pc, #12]	; (8000a40 <MX_TIM2_Init+0xe4>)
 8000a34:	f000 f9a4 	bl	8000d80 <HAL_TIM_MspPostInit>

}
 8000a38:	bf00      	nop
 8000a3a:	3738      	adds	r7, #56	; 0x38
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	200001d0 	.word	0x200001d0

08000a44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <MX_DMA_Init+0x3c>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a0b      	ldr	r2, [pc, #44]	; (8000a80 <MX_DMA_Init+0x3c>)
 8000a54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <MX_DMA_Init+0x3c>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2100      	movs	r1, #0
 8000a6a:	2038      	movs	r0, #56	; 0x38
 8000a6c:	f000 fbab 	bl	80011c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a70:	2038      	movs	r0, #56	; 0x38
 8000a72:	f000 fbc4 	bl	80011fe <HAL_NVIC_EnableIRQ>

}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40023800 	.word	0x40023800

08000a84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08a      	sub	sp, #40	; 0x28
 8000a88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
 8000a98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]
 8000a9e:	4b47      	ldr	r3, [pc, #284]	; (8000bbc <MX_GPIO_Init+0x138>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a46      	ldr	r2, [pc, #280]	; (8000bbc <MX_GPIO_Init+0x138>)
 8000aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b44      	ldr	r3, [pc, #272]	; (8000bbc <MX_GPIO_Init+0x138>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	4b40      	ldr	r3, [pc, #256]	; (8000bbc <MX_GPIO_Init+0x138>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a3f      	ldr	r2, [pc, #252]	; (8000bbc <MX_GPIO_Init+0x138>)
 8000ac0:	f043 0304 	orr.w	r3, r3, #4
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b3d      	ldr	r3, [pc, #244]	; (8000bbc <MX_GPIO_Init+0x138>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0304 	and.w	r3, r3, #4
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	4b39      	ldr	r3, [pc, #228]	; (8000bbc <MX_GPIO_Init+0x138>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a38      	ldr	r2, [pc, #224]	; (8000bbc <MX_GPIO_Init+0x138>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b36      	ldr	r3, [pc, #216]	; (8000bbc <MX_GPIO_Init+0x138>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	4b32      	ldr	r3, [pc, #200]	; (8000bbc <MX_GPIO_Init+0x138>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a31      	ldr	r2, [pc, #196]	; (8000bbc <MX_GPIO_Init+0x138>)
 8000af8:	f043 0308 	orr.w	r3, r3, #8
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b2f      	ldr	r3, [pc, #188]	; (8000bbc <MX_GPIO_Init+0x138>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0308 	and.w	r3, r3, #8
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	603b      	str	r3, [r7, #0]
 8000b0e:	4b2b      	ldr	r3, [pc, #172]	; (8000bbc <MX_GPIO_Init+0x138>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a2a      	ldr	r2, [pc, #168]	; (8000bbc <MX_GPIO_Init+0x138>)
 8000b14:	f043 0302 	orr.w	r3, r3, #2
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b28      	ldr	r3, [pc, #160]	; (8000bbc <MX_GPIO_Init+0x138>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0302 	and.w	r3, r3, #2
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD_RST_Pin|AD_OS2_Pin, GPIO_PIN_RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	210c      	movs	r1, #12
 8000b2a:	4825      	ldr	r0, [pc, #148]	; (8000bc0 <MX_GPIO_Init+0x13c>)
 8000b2c:	f001 f8a6 	bl	8001c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AD_OS1_Pin|AD_OS0_Pin, GPIO_PIN_RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2103      	movs	r1, #3
 8000b34:	4823      	ldr	r0, [pc, #140]	; (8000bc4 <MX_GPIO_Init+0x140>)
 8000b36:	f001 f8a1 	bl	8001c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b40:	4821      	ldr	r0, [pc, #132]	; (8000bc8 <MX_GPIO_Init+0x144>)
 8000b42:	f001 f89b 	bl	8001c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : AD_RST_Pin AD_OS2_Pin */
  GPIO_InitStruct.Pin = AD_RST_Pin|AD_OS2_Pin;
 8000b46:	230c      	movs	r3, #12
 8000b48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	2300      	movs	r3, #0
 8000b54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4818      	ldr	r0, [pc, #96]	; (8000bc0 <MX_GPIO_Init+0x13c>)
 8000b5e:	f000 fed9 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD_OS1_Pin AD_OS0_Pin */
  GPIO_InitStruct.Pin = AD_OS1_Pin|AD_OS0_Pin;
 8000b62:	2303      	movs	r3, #3
 8000b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b66:	2301      	movs	r3, #1
 8000b68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	4619      	mov	r1, r3
 8000b78:	4812      	ldr	r0, [pc, #72]	; (8000bc4 <MX_GPIO_Init+0x140>)
 8000b7a:	f000 fecb 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD_BUSY_Pin AD_FRST_Pin */
  GPIO_InitStruct.Pin = AD_BUSY_Pin|AD_FRST_Pin;
 8000b7e:	2330      	movs	r3, #48	; 0x30
 8000b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	4619      	mov	r1, r3
 8000b90:	480b      	ldr	r0, [pc, #44]	; (8000bc0 <MX_GPIO_Init+0x13c>)
 8000b92:	f000 febf 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 8000b96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	4619      	mov	r1, r3
 8000bae:	4806      	ldr	r0, [pc, #24]	; (8000bc8 <MX_GPIO_Init+0x144>)
 8000bb0:	f000 feb0 	bl	8001914 <HAL_GPIO_Init>

}
 8000bb4:	bf00      	nop
 8000bb6:	3728      	adds	r7, #40	; 0x28
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40020800 	.word	0x40020800
 8000bc4:	40020000 	.word	0x40020000
 8000bc8:	40020c00 	.word	0x40020c00

08000bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd0:	b672      	cpsid	i
}
 8000bd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <Error_Handler+0x8>
	...

08000bd8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <HAL_MspInit+0x4c>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be6:	4a0f      	ldr	r2, [pc, #60]	; (8000c24 <HAL_MspInit+0x4c>)
 8000be8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bec:	6453      	str	r3, [r2, #68]	; 0x44
 8000bee:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <HAL_MspInit+0x4c>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	603b      	str	r3, [r7, #0]
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <HAL_MspInit+0x4c>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	4a08      	ldr	r2, [pc, #32]	; (8000c24 <HAL_MspInit+0x4c>)
 8000c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c08:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_MspInit+0x4c>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	40023800 	.word	0x40023800

08000c28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08a      	sub	sp, #40	; 0x28
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a39      	ldr	r2, [pc, #228]	; (8000d2c <HAL_SPI_MspInit+0x104>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d16b      	bne.n	8000d22 <HAL_SPI_MspInit+0xfa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
 8000c4e:	4b38      	ldr	r3, [pc, #224]	; (8000d30 <HAL_SPI_MspInit+0x108>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c52:	4a37      	ldr	r2, [pc, #220]	; (8000d30 <HAL_SPI_MspInit+0x108>)
 8000c54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c58:	6453      	str	r3, [r2, #68]	; 0x44
 8000c5a:	4b35      	ldr	r3, [pc, #212]	; (8000d30 <HAL_SPI_MspInit+0x108>)
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	4b31      	ldr	r3, [pc, #196]	; (8000d30 <HAL_SPI_MspInit+0x108>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a30      	ldr	r2, [pc, #192]	; (8000d30 <HAL_SPI_MspInit+0x108>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b2e      	ldr	r3, [pc, #184]	; (8000d30 <HAL_SPI_MspInit+0x108>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = AD_CS_Pin;
 8000c82:	2310      	movs	r3, #16
 8000c84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c92:	2305      	movs	r3, #5
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AD_CS_GPIO_Port, &GPIO_InitStruct);
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4825      	ldr	r0, [pc, #148]	; (8000d34 <HAL_SPI_MspInit+0x10c>)
 8000c9e:	f000 fe39 	bl	8001914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AD_SCK_Pin|AD_DOU_A_Pin;
 8000ca2:	2360      	movs	r3, #96	; 0x60
 8000ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cb2:	2305      	movs	r3, #5
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	4619      	mov	r1, r3
 8000cbc:	481d      	ldr	r0, [pc, #116]	; (8000d34 <HAL_SPI_MspInit+0x10c>)
 8000cbe:	f000 fe29 	bl	8001914 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8000cc2:	4b1d      	ldr	r3, [pc, #116]	; (8000d38 <HAL_SPI_MspInit+0x110>)
 8000cc4:	4a1d      	ldr	r2, [pc, #116]	; (8000d3c <HAL_SPI_MspInit+0x114>)
 8000cc6:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000cc8:	4b1b      	ldr	r3, [pc, #108]	; (8000d38 <HAL_SPI_MspInit+0x110>)
 8000cca:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000cce:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cd0:	4b19      	ldr	r3, [pc, #100]	; (8000d38 <HAL_SPI_MspInit+0x110>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cd6:	4b18      	ldr	r3, [pc, #96]	; (8000d38 <HAL_SPI_MspInit+0x110>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cdc:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <HAL_SPI_MspInit+0x110>)
 8000cde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ce2:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ce4:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <HAL_SPI_MspInit+0x110>)
 8000ce6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cea:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <HAL_SPI_MspInit+0x110>)
 8000cee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cf2:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000cf4:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <HAL_SPI_MspInit+0x110>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000cfa:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <HAL_SPI_MspInit+0x110>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d00:	4b0d      	ldr	r3, [pc, #52]	; (8000d38 <HAL_SPI_MspInit+0x110>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000d06:	480c      	ldr	r0, [pc, #48]	; (8000d38 <HAL_SPI_MspInit+0x110>)
 8000d08:	f000 fa94 	bl	8001234 <HAL_DMA_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <HAL_SPI_MspInit+0xee>
    {
      Error_Handler();
 8000d12:	f7ff ff5b 	bl	8000bcc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4a07      	ldr	r2, [pc, #28]	; (8000d38 <HAL_SPI_MspInit+0x110>)
 8000d1a:	64da      	str	r2, [r3, #76]	; 0x4c
 8000d1c:	4a06      	ldr	r2, [pc, #24]	; (8000d38 <HAL_SPI_MspInit+0x110>)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d22:	bf00      	nop
 8000d24:	3728      	adds	r7, #40	; 0x28
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40013000 	.word	0x40013000
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40020000 	.word	0x40020000
 8000d38:	20000170 	.word	0x20000170
 8000d3c:	40026410 	.word	0x40026410

08000d40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d50:	d10d      	bne.n	8000d6e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <HAL_TIM_Base_MspInit+0x3c>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	4a08      	ldr	r2, [pc, #32]	; (8000d7c <HAL_TIM_Base_MspInit+0x3c>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6413      	str	r3, [r2, #64]	; 0x40
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_TIM_Base_MspInit+0x3c>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d6e:	bf00      	nop
 8000d70:	3714      	adds	r7, #20
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	40023800 	.word	0x40023800

08000d80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b088      	sub	sp, #32
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 030c 	add.w	r3, r7, #12
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000da0:	d11d      	bne.n	8000dde <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <HAL_TIM_MspPostInit+0x68>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	4a0f      	ldr	r2, [pc, #60]	; (8000de8 <HAL_TIM_MspPostInit+0x68>)
 8000dac:	f043 0302 	orr.w	r3, r3, #2
 8000db0:	6313      	str	r3, [r2, #48]	; 0x30
 8000db2:	4b0d      	ldr	r3, [pc, #52]	; (8000de8 <HAL_TIM_MspPostInit+0x68>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	f003 0302 	and.w	r3, r3, #2
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = AD_CVST_Pin;
 8000dbe:	2308      	movs	r3, #8
 8000dc0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AD_CVST_GPIO_Port, &GPIO_InitStruct);
 8000dd2:	f107 030c 	add.w	r3, r7, #12
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4804      	ldr	r0, [pc, #16]	; (8000dec <HAL_TIM_MspPostInit+0x6c>)
 8000dda:	f000 fd9b 	bl	8001914 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000dde:	bf00      	nop
 8000de0:	3720      	adds	r7, #32
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40020400 	.word	0x40020400

08000df0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <NMI_Handler+0x4>

08000df6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <HardFault_Handler+0x4>

08000dfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <MemManage_Handler+0x4>

08000e02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e06:	e7fe      	b.n	8000e06 <BusFault_Handler+0x4>

08000e08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <UsageFault_Handler+0x4>

08000e0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e3c:	f000 f8a4 	bl	8000f88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000e48:	4802      	ldr	r0, [pc, #8]	; (8000e54 <DMA2_Stream0_IRQHandler+0x10>)
 8000e4a:	f000 faf9 	bl	8001440 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000170 	.word	0x20000170

08000e58 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e5c:	4802      	ldr	r0, [pc, #8]	; (8000e68 <OTG_FS_IRQHandler+0x10>)
 8000e5e:	f001 f876 	bl	8001f4e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20001748 	.word	0x20001748

08000e6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <SystemInit+0x20>)
 8000e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e76:	4a05      	ldr	r2, [pc, #20]	; (8000e8c <SystemInit+0x20>)
 8000e78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ec8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e94:	480d      	ldr	r0, [pc, #52]	; (8000ecc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e96:	490e      	ldr	r1, [pc, #56]	; (8000ed0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e98:	4a0e      	ldr	r2, [pc, #56]	; (8000ed4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e9c:	e002      	b.n	8000ea4 <LoopCopyDataInit>

08000e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea2:	3304      	adds	r3, #4

08000ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea8:	d3f9      	bcc.n	8000e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eaa:	4a0b      	ldr	r2, [pc, #44]	; (8000ed8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000eac:	4c0b      	ldr	r4, [pc, #44]	; (8000edc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb0:	e001      	b.n	8000eb6 <LoopFillZerobss>

08000eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb4:	3204      	adds	r2, #4

08000eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb8:	d3fb      	bcc.n	8000eb2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eba:	f7ff ffd7 	bl	8000e6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ebe:	f008 f9bb 	bl	8009238 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ec2:	f7ff fc73 	bl	80007ac <main>
  bx  lr    
 8000ec6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ec8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed0:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000ed4:	08009318 	.word	0x08009318
  ldr r2, =_sbss
 8000ed8:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000edc:	20001e74 	.word	0x20001e74

08000ee0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ee0:	e7fe      	b.n	8000ee0 <ADC_IRQHandler>
	...

08000ee4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ee8:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <HAL_Init+0x40>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a0d      	ldr	r2, [pc, #52]	; (8000f24 <HAL_Init+0x40>)
 8000eee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ef2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ef4:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <HAL_Init+0x40>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <HAL_Init+0x40>)
 8000efa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000efe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f00:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <HAL_Init+0x40>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a07      	ldr	r2, [pc, #28]	; (8000f24 <HAL_Init+0x40>)
 8000f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f0c:	2003      	movs	r0, #3
 8000f0e:	f000 f94f 	bl	80011b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f12:	200f      	movs	r0, #15
 8000f14:	f000 f808 	bl	8000f28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f18:	f7ff fe5e 	bl	8000bd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40023c00 	.word	0x40023c00

08000f28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f30:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <HAL_InitTick+0x54>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <HAL_InitTick+0x58>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 f967 	bl	800121a <HAL_SYSTICK_Config>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e00e      	b.n	8000f74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2b0f      	cmp	r3, #15
 8000f5a:	d80a      	bhi.n	8000f72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	6879      	ldr	r1, [r7, #4]
 8000f60:	f04f 30ff 	mov.w	r0, #4294967295
 8000f64:	f000 f92f 	bl	80011c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f68:	4a06      	ldr	r2, [pc, #24]	; (8000f84 <HAL_InitTick+0x5c>)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	e000      	b.n	8000f74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000000 	.word	0x20000000
 8000f80:	20000008 	.word	0x20000008
 8000f84:	20000004 	.word	0x20000004

08000f88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_IncTick+0x20>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	461a      	mov	r2, r3
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_IncTick+0x24>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4413      	add	r3, r2
 8000f98:	4a04      	ldr	r2, [pc, #16]	; (8000fac <HAL_IncTick+0x24>)
 8000f9a:	6013      	str	r3, [r2, #0]
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000008 	.word	0x20000008
 8000fac:	20000264 	.word	0x20000264

08000fb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb4:	4b03      	ldr	r3, [pc, #12]	; (8000fc4 <HAL_GetTick+0x14>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	20000264 	.word	0x20000264

08000fc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fd0:	f7ff ffee 	bl	8000fb0 <HAL_GetTick>
 8000fd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe0:	d005      	beq.n	8000fee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	; (800100c <HAL_Delay+0x44>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	4413      	add	r3, r2
 8000fec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fee:	bf00      	nop
 8000ff0:	f7ff ffde 	bl	8000fb0 <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d8f7      	bhi.n	8000ff0 <HAL_Delay+0x28>
  {
  }
}
 8001000:	bf00      	nop
 8001002:	bf00      	nop
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000008 	.word	0x20000008

08001010 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800102c:	4013      	ands	r3, r2
 800102e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001038:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800103c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001042:	4a04      	ldr	r2, [pc, #16]	; (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	60d3      	str	r3, [r2, #12]
}
 8001048:	bf00      	nop
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800105c:	4b04      	ldr	r3, [pc, #16]	; (8001070 <__NVIC_GetPriorityGrouping+0x18>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	0a1b      	lsrs	r3, r3, #8
 8001062:	f003 0307 	and.w	r3, r3, #7
}
 8001066:	4618      	mov	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	2b00      	cmp	r3, #0
 8001084:	db0b      	blt.n	800109e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	f003 021f 	and.w	r2, r3, #31
 800108c:	4907      	ldr	r1, [pc, #28]	; (80010ac <__NVIC_EnableIRQ+0x38>)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	095b      	lsrs	r3, r3, #5
 8001094:	2001      	movs	r0, #1
 8001096:	fa00 f202 	lsl.w	r2, r0, r2
 800109a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	e000e100 	.word	0xe000e100

080010b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	6039      	str	r1, [r7, #0]
 80010ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	db0a      	blt.n	80010da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	490c      	ldr	r1, [pc, #48]	; (80010fc <__NVIC_SetPriority+0x4c>)
 80010ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ce:	0112      	lsls	r2, r2, #4
 80010d0:	b2d2      	uxtb	r2, r2
 80010d2:	440b      	add	r3, r1
 80010d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d8:	e00a      	b.n	80010f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	4908      	ldr	r1, [pc, #32]	; (8001100 <__NVIC_SetPriority+0x50>)
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	f003 030f 	and.w	r3, r3, #15
 80010e6:	3b04      	subs	r3, #4
 80010e8:	0112      	lsls	r2, r2, #4
 80010ea:	b2d2      	uxtb	r2, r2
 80010ec:	440b      	add	r3, r1
 80010ee:	761a      	strb	r2, [r3, #24]
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000e100 	.word	0xe000e100
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001104:	b480      	push	{r7}
 8001106:	b089      	sub	sp, #36	; 0x24
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	f1c3 0307 	rsb	r3, r3, #7
 800111e:	2b04      	cmp	r3, #4
 8001120:	bf28      	it	cs
 8001122:	2304      	movcs	r3, #4
 8001124:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	3304      	adds	r3, #4
 800112a:	2b06      	cmp	r3, #6
 800112c:	d902      	bls.n	8001134 <NVIC_EncodePriority+0x30>
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	3b03      	subs	r3, #3
 8001132:	e000      	b.n	8001136 <NVIC_EncodePriority+0x32>
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001138:	f04f 32ff 	mov.w	r2, #4294967295
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43da      	mvns	r2, r3
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	401a      	ands	r2, r3
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800114c:	f04f 31ff 	mov.w	r1, #4294967295
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	fa01 f303 	lsl.w	r3, r1, r3
 8001156:	43d9      	mvns	r1, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800115c:	4313      	orrs	r3, r2
         );
}
 800115e:	4618      	mov	r0, r3
 8001160:	3724      	adds	r7, #36	; 0x24
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
	...

0800116c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3b01      	subs	r3, #1
 8001178:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800117c:	d301      	bcc.n	8001182 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800117e:	2301      	movs	r3, #1
 8001180:	e00f      	b.n	80011a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001182:	4a0a      	ldr	r2, [pc, #40]	; (80011ac <SysTick_Config+0x40>)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3b01      	subs	r3, #1
 8001188:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800118a:	210f      	movs	r1, #15
 800118c:	f04f 30ff 	mov.w	r0, #4294967295
 8001190:	f7ff ff8e 	bl	80010b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001194:	4b05      	ldr	r3, [pc, #20]	; (80011ac <SysTick_Config+0x40>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800119a:	4b04      	ldr	r3, [pc, #16]	; (80011ac <SysTick_Config+0x40>)
 800119c:	2207      	movs	r2, #7
 800119e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	e000e010 	.word	0xe000e010

080011b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff ff29 	bl	8001010 <__NVIC_SetPriorityGrouping>
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b086      	sub	sp, #24
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	4603      	mov	r3, r0
 80011ce:	60b9      	str	r1, [r7, #8]
 80011d0:	607a      	str	r2, [r7, #4]
 80011d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011d8:	f7ff ff3e 	bl	8001058 <__NVIC_GetPriorityGrouping>
 80011dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	68b9      	ldr	r1, [r7, #8]
 80011e2:	6978      	ldr	r0, [r7, #20]
 80011e4:	f7ff ff8e 	bl	8001104 <NVIC_EncodePriority>
 80011e8:	4602      	mov	r2, r0
 80011ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ee:	4611      	mov	r1, r2
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ff5d 	bl	80010b0 <__NVIC_SetPriority>
}
 80011f6:	bf00      	nop
 80011f8:	3718      	adds	r7, #24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
 8001204:	4603      	mov	r3, r0
 8001206:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff31 	bl	8001074 <__NVIC_EnableIRQ>
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff ffa2 	bl	800116c <SysTick_Config>
 8001228:	4603      	mov	r3, r0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001240:	f7ff feb6 	bl	8000fb0 <HAL_GetTick>
 8001244:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d101      	bne.n	8001250 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	e099      	b.n	8001384 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2202      	movs	r2, #2
 8001254:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f022 0201 	bic.w	r2, r2, #1
 800126e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001270:	e00f      	b.n	8001292 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001272:	f7ff fe9d 	bl	8000fb0 <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	2b05      	cmp	r3, #5
 800127e:	d908      	bls.n	8001292 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2220      	movs	r2, #32
 8001284:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2203      	movs	r2, #3
 800128a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e078      	b.n	8001384 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	2b00      	cmp	r3, #0
 800129e:	d1e8      	bne.n	8001272 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	4b38      	ldr	r3, [pc, #224]	; (800138c <HAL_DMA_Init+0x158>)
 80012ac:	4013      	ands	r3, r2
 80012ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	691b      	ldr	r3, [r3, #16]
 80012c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a1b      	ldr	r3, [r3, #32]
 80012dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012de:	697a      	ldr	r2, [r7, #20]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e8:	2b04      	cmp	r3, #4
 80012ea:	d107      	bne.n	80012fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f4:	4313      	orrs	r3, r2
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	697a      	ldr	r2, [r7, #20]
 8001302:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	695b      	ldr	r3, [r3, #20]
 800130a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	f023 0307 	bic.w	r3, r3, #7
 8001312:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001318:	697a      	ldr	r2, [r7, #20]
 800131a:	4313      	orrs	r3, r2
 800131c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001322:	2b04      	cmp	r3, #4
 8001324:	d117      	bne.n	8001356 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800132a:	697a      	ldr	r2, [r7, #20]
 800132c:	4313      	orrs	r3, r2
 800132e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001334:	2b00      	cmp	r3, #0
 8001336:	d00e      	beq.n	8001356 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f000 fa6f 	bl	800181c <DMA_CheckFifoParam>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d008      	beq.n	8001356 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2240      	movs	r2, #64	; 0x40
 8001348:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2201      	movs	r2, #1
 800134e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001352:	2301      	movs	r3, #1
 8001354:	e016      	b.n	8001384 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	697a      	ldr	r2, [r7, #20]
 800135c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f000 fa26 	bl	80017b0 <DMA_CalcBaseAndBitshift>
 8001364:	4603      	mov	r3, r0
 8001366:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800136c:	223f      	movs	r2, #63	; 0x3f
 800136e:	409a      	lsls	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2201      	movs	r2, #1
 800137e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	f010803f 	.word	0xf010803f

08001390 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
 800139c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800139e:	2300      	movs	r3, #0
 80013a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d101      	bne.n	80013b6 <HAL_DMA_Start_IT+0x26>
 80013b2:	2302      	movs	r3, #2
 80013b4:	e040      	b.n	8001438 <HAL_DMA_Start_IT+0xa8>
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	2201      	movs	r2, #1
 80013ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d12f      	bne.n	800142a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2202      	movs	r2, #2
 80013ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2200      	movs	r2, #0
 80013d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	68b9      	ldr	r1, [r7, #8]
 80013de:	68f8      	ldr	r0, [r7, #12]
 80013e0:	f000 f9b8 	bl	8001754 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013e8:	223f      	movs	r2, #63	; 0x3f
 80013ea:	409a      	lsls	r2, r3
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f042 0216 	orr.w	r2, r2, #22
 80013fe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001404:	2b00      	cmp	r3, #0
 8001406:	d007      	beq.n	8001418 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f042 0208 	orr.w	r2, r2, #8
 8001416:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f042 0201 	orr.w	r2, r2, #1
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	e005      	b.n	8001436 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2200      	movs	r2, #0
 800142e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001432:	2302      	movs	r3, #2
 8001434:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001436:	7dfb      	ldrb	r3, [r7, #23]
}
 8001438:	4618      	mov	r0, r3
 800143a:	3718      	adds	r7, #24
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001448:	2300      	movs	r3, #0
 800144a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800144c:	4b8e      	ldr	r3, [pc, #568]	; (8001688 <HAL_DMA_IRQHandler+0x248>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a8e      	ldr	r2, [pc, #568]	; (800168c <HAL_DMA_IRQHandler+0x24c>)
 8001452:	fba2 2303 	umull	r2, r3, r2, r3
 8001456:	0a9b      	lsrs	r3, r3, #10
 8001458:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800145e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800146a:	2208      	movs	r2, #8
 800146c:	409a      	lsls	r2, r3
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	4013      	ands	r3, r2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d01a      	beq.n	80014ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	2b00      	cmp	r3, #0
 8001482:	d013      	beq.n	80014ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f022 0204 	bic.w	r2, r2, #4
 8001492:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001498:	2208      	movs	r2, #8
 800149a:	409a      	lsls	r2, r3
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014a4:	f043 0201 	orr.w	r2, r3, #1
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014b0:	2201      	movs	r2, #1
 80014b2:	409a      	lsls	r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	4013      	ands	r3, r2
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d012      	beq.n	80014e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d00b      	beq.n	80014e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ce:	2201      	movs	r2, #1
 80014d0:	409a      	lsls	r2, r3
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014da:	f043 0202 	orr.w	r2, r3, #2
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014e6:	2204      	movs	r2, #4
 80014e8:	409a      	lsls	r2, r3
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	4013      	ands	r3, r2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d012      	beq.n	8001518 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d00b      	beq.n	8001518 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001504:	2204      	movs	r2, #4
 8001506:	409a      	lsls	r2, r3
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001510:	f043 0204 	orr.w	r2, r3, #4
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800151c:	2210      	movs	r2, #16
 800151e:	409a      	lsls	r2, r3
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4013      	ands	r3, r2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d043      	beq.n	80015b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0308 	and.w	r3, r3, #8
 8001532:	2b00      	cmp	r3, #0
 8001534:	d03c      	beq.n	80015b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800153a:	2210      	movs	r2, #16
 800153c:	409a      	lsls	r2, r3
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d018      	beq.n	8001582 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d108      	bne.n	8001570 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	2b00      	cmp	r3, #0
 8001564:	d024      	beq.n	80015b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	4798      	blx	r3
 800156e:	e01f      	b.n	80015b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001574:	2b00      	cmp	r3, #0
 8001576:	d01b      	beq.n	80015b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	4798      	blx	r3
 8001580:	e016      	b.n	80015b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800158c:	2b00      	cmp	r3, #0
 800158e:	d107      	bne.n	80015a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f022 0208 	bic.w	r2, r2, #8
 800159e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d003      	beq.n	80015b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b4:	2220      	movs	r2, #32
 80015b6:	409a      	lsls	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	4013      	ands	r3, r2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	f000 808f 	beq.w	80016e0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0310 	and.w	r3, r3, #16
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f000 8087 	beq.w	80016e0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d6:	2220      	movs	r2, #32
 80015d8:	409a      	lsls	r2, r3
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b05      	cmp	r3, #5
 80015e8:	d136      	bne.n	8001658 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f022 0216 	bic.w	r2, r2, #22
 80015f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	695a      	ldr	r2, [r3, #20]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001608:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	2b00      	cmp	r3, #0
 8001610:	d103      	bne.n	800161a <HAL_DMA_IRQHandler+0x1da>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001616:	2b00      	cmp	r3, #0
 8001618:	d007      	beq.n	800162a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 0208 	bic.w	r2, r2, #8
 8001628:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800162e:	223f      	movs	r2, #63	; 0x3f
 8001630:	409a      	lsls	r2, r3
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2201      	movs	r2, #1
 800163a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800164a:	2b00      	cmp	r3, #0
 800164c:	d07e      	beq.n	800174c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	4798      	blx	r3
        }
        return;
 8001656:	e079      	b.n	800174c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d01d      	beq.n	80016a2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d10d      	bne.n	8001690 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001678:	2b00      	cmp	r3, #0
 800167a:	d031      	beq.n	80016e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	4798      	blx	r3
 8001684:	e02c      	b.n	80016e0 <HAL_DMA_IRQHandler+0x2a0>
 8001686:	bf00      	nop
 8001688:	20000000 	.word	0x20000000
 800168c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001694:	2b00      	cmp	r3, #0
 8001696:	d023      	beq.n	80016e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	4798      	blx	r3
 80016a0:	e01e      	b.n	80016e0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d10f      	bne.n	80016d0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f022 0210 	bic.w	r2, r2, #16
 80016be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d003      	beq.n	80016e0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d032      	beq.n	800174e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d022      	beq.n	800173a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2205      	movs	r2, #5
 80016f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f022 0201 	bic.w	r2, r2, #1
 800170a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	3301      	adds	r3, #1
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	429a      	cmp	r2, r3
 8001716:	d307      	bcc.n	8001728 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f2      	bne.n	800170c <HAL_DMA_IRQHandler+0x2cc>
 8001726:	e000      	b.n	800172a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001728:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2201      	movs	r2, #1
 800172e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173e:	2b00      	cmp	r3, #0
 8001740:	d005      	beq.n	800174e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	4798      	blx	r3
 800174a:	e000      	b.n	800174e <HAL_DMA_IRQHandler+0x30e>
        return;
 800174c:	bf00      	nop
    }
  }
}
 800174e:	3718      	adds	r7, #24
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
 8001760:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001770:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	2b40      	cmp	r3, #64	; 0x40
 8001780:	d108      	bne.n	8001794 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	68ba      	ldr	r2, [r7, #8]
 8001790:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001792:	e007      	b.n	80017a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	68ba      	ldr	r2, [r7, #8]
 800179a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	60da      	str	r2, [r3, #12]
}
 80017a4:	bf00      	nop
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	3b10      	subs	r3, #16
 80017c0:	4a14      	ldr	r2, [pc, #80]	; (8001814 <DMA_CalcBaseAndBitshift+0x64>)
 80017c2:	fba2 2303 	umull	r2, r3, r2, r3
 80017c6:	091b      	lsrs	r3, r3, #4
 80017c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80017ca:	4a13      	ldr	r2, [pc, #76]	; (8001818 <DMA_CalcBaseAndBitshift+0x68>)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	4413      	add	r3, r2
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	461a      	mov	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2b03      	cmp	r3, #3
 80017dc:	d909      	bls.n	80017f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80017e6:	f023 0303 	bic.w	r3, r3, #3
 80017ea:	1d1a      	adds	r2, r3, #4
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	659a      	str	r2, [r3, #88]	; 0x58
 80017f0:	e007      	b.n	8001802 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80017fa:	f023 0303 	bic.w	r3, r3, #3
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001806:	4618      	mov	r0, r3
 8001808:	3714      	adds	r7, #20
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	aaaaaaab 	.word	0xaaaaaaab
 8001818:	08009300 	.word	0x08009300

0800181c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001824:	2300      	movs	r3, #0
 8001826:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d11f      	bne.n	8001876 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	2b03      	cmp	r3, #3
 800183a:	d856      	bhi.n	80018ea <DMA_CheckFifoParam+0xce>
 800183c:	a201      	add	r2, pc, #4	; (adr r2, 8001844 <DMA_CheckFifoParam+0x28>)
 800183e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001842:	bf00      	nop
 8001844:	08001855 	.word	0x08001855
 8001848:	08001867 	.word	0x08001867
 800184c:	08001855 	.word	0x08001855
 8001850:	080018eb 	.word	0x080018eb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001858:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d046      	beq.n	80018ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001864:	e043      	b.n	80018ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800186e:	d140      	bne.n	80018f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001874:	e03d      	b.n	80018f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	699b      	ldr	r3, [r3, #24]
 800187a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800187e:	d121      	bne.n	80018c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	2b03      	cmp	r3, #3
 8001884:	d837      	bhi.n	80018f6 <DMA_CheckFifoParam+0xda>
 8001886:	a201      	add	r2, pc, #4	; (adr r2, 800188c <DMA_CheckFifoParam+0x70>)
 8001888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800188c:	0800189d 	.word	0x0800189d
 8001890:	080018a3 	.word	0x080018a3
 8001894:	0800189d 	.word	0x0800189d
 8001898:	080018b5 	.word	0x080018b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	73fb      	strb	r3, [r7, #15]
      break;
 80018a0:	e030      	b.n	8001904 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d025      	beq.n	80018fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018b2:	e022      	b.n	80018fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80018bc:	d11f      	bne.n	80018fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80018c2:	e01c      	b.n	80018fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d903      	bls.n	80018d2 <DMA_CheckFifoParam+0xb6>
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	2b03      	cmp	r3, #3
 80018ce:	d003      	beq.n	80018d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80018d0:	e018      	b.n	8001904 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	73fb      	strb	r3, [r7, #15]
      break;
 80018d6:	e015      	b.n	8001904 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d00e      	beq.n	8001902 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	73fb      	strb	r3, [r7, #15]
      break;
 80018e8:	e00b      	b.n	8001902 <DMA_CheckFifoParam+0xe6>
      break;
 80018ea:	bf00      	nop
 80018ec:	e00a      	b.n	8001904 <DMA_CheckFifoParam+0xe8>
      break;
 80018ee:	bf00      	nop
 80018f0:	e008      	b.n	8001904 <DMA_CheckFifoParam+0xe8>
      break;
 80018f2:	bf00      	nop
 80018f4:	e006      	b.n	8001904 <DMA_CheckFifoParam+0xe8>
      break;
 80018f6:	bf00      	nop
 80018f8:	e004      	b.n	8001904 <DMA_CheckFifoParam+0xe8>
      break;
 80018fa:	bf00      	nop
 80018fc:	e002      	b.n	8001904 <DMA_CheckFifoParam+0xe8>
      break;   
 80018fe:	bf00      	nop
 8001900:	e000      	b.n	8001904 <DMA_CheckFifoParam+0xe8>
      break;
 8001902:	bf00      	nop
    }
  } 
  
  return status; 
 8001904:	7bfb      	ldrb	r3, [r7, #15]
}
 8001906:	4618      	mov	r0, r3
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop

08001914 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001914:	b480      	push	{r7}
 8001916:	b089      	sub	sp, #36	; 0x24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001922:	2300      	movs	r3, #0
 8001924:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001926:	2300      	movs	r3, #0
 8001928:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800192a:	2300      	movs	r3, #0
 800192c:	61fb      	str	r3, [r7, #28]
 800192e:	e16b      	b.n	8001c08 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001930:	2201      	movs	r2, #1
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	697a      	ldr	r2, [r7, #20]
 8001940:	4013      	ands	r3, r2
 8001942:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	429a      	cmp	r2, r3
 800194a:	f040 815a 	bne.w	8001c02 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f003 0303 	and.w	r3, r3, #3
 8001956:	2b01      	cmp	r3, #1
 8001958:	d005      	beq.n	8001966 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001962:	2b02      	cmp	r3, #2
 8001964:	d130      	bne.n	80019c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	2203      	movs	r2, #3
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43db      	mvns	r3, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4013      	ands	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	68da      	ldr	r2, [r3, #12]
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4313      	orrs	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800199c:	2201      	movs	r2, #1
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4013      	ands	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	091b      	lsrs	r3, r3, #4
 80019b2:	f003 0201 	and.w	r2, r3, #1
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4313      	orrs	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f003 0303 	and.w	r3, r3, #3
 80019d0:	2b03      	cmp	r3, #3
 80019d2:	d017      	beq.n	8001a04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	2203      	movs	r2, #3
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4013      	ands	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f003 0303 	and.w	r3, r3, #3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d123      	bne.n	8001a58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	08da      	lsrs	r2, r3, #3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3208      	adds	r2, #8
 8001a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	220f      	movs	r2, #15
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4013      	ands	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	691a      	ldr	r2, [r3, #16]
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	08da      	lsrs	r2, r3, #3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	3208      	adds	r2, #8
 8001a52:	69b9      	ldr	r1, [r7, #24]
 8001a54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	2203      	movs	r2, #3
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 0203 	and.w	r2, r3, #3
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f000 80b4 	beq.w	8001c02 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	4b60      	ldr	r3, [pc, #384]	; (8001c20 <HAL_GPIO_Init+0x30c>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa2:	4a5f      	ldr	r2, [pc, #380]	; (8001c20 <HAL_GPIO_Init+0x30c>)
 8001aa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aaa:	4b5d      	ldr	r3, [pc, #372]	; (8001c20 <HAL_GPIO_Init+0x30c>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ab6:	4a5b      	ldr	r2, [pc, #364]	; (8001c24 <HAL_GPIO_Init+0x310>)
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	089b      	lsrs	r3, r3, #2
 8001abc:	3302      	adds	r3, #2
 8001abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	f003 0303 	and.w	r3, r3, #3
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	220f      	movs	r2, #15
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a52      	ldr	r2, [pc, #328]	; (8001c28 <HAL_GPIO_Init+0x314>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d02b      	beq.n	8001b3a <HAL_GPIO_Init+0x226>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a51      	ldr	r2, [pc, #324]	; (8001c2c <HAL_GPIO_Init+0x318>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d025      	beq.n	8001b36 <HAL_GPIO_Init+0x222>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a50      	ldr	r2, [pc, #320]	; (8001c30 <HAL_GPIO_Init+0x31c>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d01f      	beq.n	8001b32 <HAL_GPIO_Init+0x21e>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a4f      	ldr	r2, [pc, #316]	; (8001c34 <HAL_GPIO_Init+0x320>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d019      	beq.n	8001b2e <HAL_GPIO_Init+0x21a>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a4e      	ldr	r2, [pc, #312]	; (8001c38 <HAL_GPIO_Init+0x324>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d013      	beq.n	8001b2a <HAL_GPIO_Init+0x216>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a4d      	ldr	r2, [pc, #308]	; (8001c3c <HAL_GPIO_Init+0x328>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d00d      	beq.n	8001b26 <HAL_GPIO_Init+0x212>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a4c      	ldr	r2, [pc, #304]	; (8001c40 <HAL_GPIO_Init+0x32c>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d007      	beq.n	8001b22 <HAL_GPIO_Init+0x20e>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a4b      	ldr	r2, [pc, #300]	; (8001c44 <HAL_GPIO_Init+0x330>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d101      	bne.n	8001b1e <HAL_GPIO_Init+0x20a>
 8001b1a:	2307      	movs	r3, #7
 8001b1c:	e00e      	b.n	8001b3c <HAL_GPIO_Init+0x228>
 8001b1e:	2308      	movs	r3, #8
 8001b20:	e00c      	b.n	8001b3c <HAL_GPIO_Init+0x228>
 8001b22:	2306      	movs	r3, #6
 8001b24:	e00a      	b.n	8001b3c <HAL_GPIO_Init+0x228>
 8001b26:	2305      	movs	r3, #5
 8001b28:	e008      	b.n	8001b3c <HAL_GPIO_Init+0x228>
 8001b2a:	2304      	movs	r3, #4
 8001b2c:	e006      	b.n	8001b3c <HAL_GPIO_Init+0x228>
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e004      	b.n	8001b3c <HAL_GPIO_Init+0x228>
 8001b32:	2302      	movs	r3, #2
 8001b34:	e002      	b.n	8001b3c <HAL_GPIO_Init+0x228>
 8001b36:	2301      	movs	r3, #1
 8001b38:	e000      	b.n	8001b3c <HAL_GPIO_Init+0x228>
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	69fa      	ldr	r2, [r7, #28]
 8001b3e:	f002 0203 	and.w	r2, r2, #3
 8001b42:	0092      	lsls	r2, r2, #2
 8001b44:	4093      	lsls	r3, r2
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b4c:	4935      	ldr	r1, [pc, #212]	; (8001c24 <HAL_GPIO_Init+0x310>)
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	089b      	lsrs	r3, r3, #2
 8001b52:	3302      	adds	r3, #2
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b5a:	4b3b      	ldr	r3, [pc, #236]	; (8001c48 <HAL_GPIO_Init+0x334>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	43db      	mvns	r3, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4013      	ands	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b7e:	4a32      	ldr	r2, [pc, #200]	; (8001c48 <HAL_GPIO_Init+0x334>)
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b84:	4b30      	ldr	r3, [pc, #192]	; (8001c48 <HAL_GPIO_Init+0x334>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4013      	ands	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ba8:	4a27      	ldr	r2, [pc, #156]	; (8001c48 <HAL_GPIO_Init+0x334>)
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bae:	4b26      	ldr	r3, [pc, #152]	; (8001c48 <HAL_GPIO_Init+0x334>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bd2:	4a1d      	ldr	r2, [pc, #116]	; (8001c48 <HAL_GPIO_Init+0x334>)
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bd8:	4b1b      	ldr	r3, [pc, #108]	; (8001c48 <HAL_GPIO_Init+0x334>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d003      	beq.n	8001bfc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bfc:	4a12      	ldr	r2, [pc, #72]	; (8001c48 <HAL_GPIO_Init+0x334>)
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	3301      	adds	r3, #1
 8001c06:	61fb      	str	r3, [r7, #28]
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	2b0f      	cmp	r3, #15
 8001c0c:	f67f ae90 	bls.w	8001930 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c10:	bf00      	nop
 8001c12:	bf00      	nop
 8001c14:	3724      	adds	r7, #36	; 0x24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	40023800 	.word	0x40023800
 8001c24:	40013800 	.word	0x40013800
 8001c28:	40020000 	.word	0x40020000
 8001c2c:	40020400 	.word	0x40020400
 8001c30:	40020800 	.word	0x40020800
 8001c34:	40020c00 	.word	0x40020c00
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40021400 	.word	0x40021400
 8001c40:	40021800 	.word	0x40021800
 8001c44:	40021c00 	.word	0x40021c00
 8001c48:	40013c00 	.word	0x40013c00

08001c4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	460b      	mov	r3, r1
 8001c56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	691a      	ldr	r2, [r3, #16]
 8001c5c:	887b      	ldrh	r3, [r7, #2]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d002      	beq.n	8001c6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c64:	2301      	movs	r3, #1
 8001c66:	73fb      	strb	r3, [r7, #15]
 8001c68:	e001      	b.n	8001c6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	807b      	strh	r3, [r7, #2]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c8c:	787b      	ldrb	r3, [r7, #1]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c92:	887a      	ldrh	r2, [r7, #2]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c98:	e003      	b.n	8001ca2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c9a:	887b      	ldrh	r3, [r7, #2]
 8001c9c:	041a      	lsls	r2, r3, #16
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	619a      	str	r2, [r3, #24]
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001cae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cb0:	b08f      	sub	sp, #60	; 0x3c
 8001cb2:	af0a      	add	r7, sp, #40	; 0x28
 8001cb4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d101      	bne.n	8001cc0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e10f      	b.n	8001ee0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d106      	bne.n	8001ce0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f006 ff98 	bl	8008c10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2203      	movs	r2, #3
 8001ce4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d102      	bne.n	8001cfa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f003 faeb 	bl	80052da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	603b      	str	r3, [r7, #0]
 8001d0a:	687e      	ldr	r6, [r7, #4]
 8001d0c:	466d      	mov	r5, sp
 8001d0e:	f106 0410 	add.w	r4, r6, #16
 8001d12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d1e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d22:	1d33      	adds	r3, r6, #4
 8001d24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d26:	6838      	ldr	r0, [r7, #0]
 8001d28:	f003 f9c2 	bl	80050b0 <USB_CoreInit>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d005      	beq.n	8001d3e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2202      	movs	r2, #2
 8001d36:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e0d0      	b.n	8001ee0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2100      	movs	r1, #0
 8001d44:	4618      	mov	r0, r3
 8001d46:	f003 fad9 	bl	80052fc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	73fb      	strb	r3, [r7, #15]
 8001d4e:	e04a      	b.n	8001de6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d50:	7bfa      	ldrb	r2, [r7, #15]
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	4613      	mov	r3, r2
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	4413      	add	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	440b      	add	r3, r1
 8001d5e:	333d      	adds	r3, #61	; 0x3d
 8001d60:	2201      	movs	r2, #1
 8001d62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d64:	7bfa      	ldrb	r2, [r7, #15]
 8001d66:	6879      	ldr	r1, [r7, #4]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	4413      	add	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	440b      	add	r3, r1
 8001d72:	333c      	adds	r3, #60	; 0x3c
 8001d74:	7bfa      	ldrb	r2, [r7, #15]
 8001d76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d78:	7bfa      	ldrb	r2, [r7, #15]
 8001d7a:	7bfb      	ldrb	r3, [r7, #15]
 8001d7c:	b298      	uxth	r0, r3
 8001d7e:	6879      	ldr	r1, [r7, #4]
 8001d80:	4613      	mov	r3, r2
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	4413      	add	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	440b      	add	r3, r1
 8001d8a:	3344      	adds	r3, #68	; 0x44
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d90:	7bfa      	ldrb	r2, [r7, #15]
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	4613      	mov	r3, r2
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	4413      	add	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	3340      	adds	r3, #64	; 0x40
 8001da0:	2200      	movs	r2, #0
 8001da2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001da4:	7bfa      	ldrb	r2, [r7, #15]
 8001da6:	6879      	ldr	r1, [r7, #4]
 8001da8:	4613      	mov	r3, r2
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	4413      	add	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	440b      	add	r3, r1
 8001db2:	3348      	adds	r3, #72	; 0x48
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001db8:	7bfa      	ldrb	r2, [r7, #15]
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	4413      	add	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	334c      	adds	r3, #76	; 0x4c
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001dcc:	7bfa      	ldrb	r2, [r7, #15]
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	4413      	add	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	440b      	add	r3, r1
 8001dda:	3354      	adds	r3, #84	; 0x54
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001de0:	7bfb      	ldrb	r3, [r7, #15]
 8001de2:	3301      	adds	r3, #1
 8001de4:	73fb      	strb	r3, [r7, #15]
 8001de6:	7bfa      	ldrb	r2, [r7, #15]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d3af      	bcc.n	8001d50 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001df0:	2300      	movs	r3, #0
 8001df2:	73fb      	strb	r3, [r7, #15]
 8001df4:	e044      	b.n	8001e80 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001df6:	7bfa      	ldrb	r2, [r7, #15]
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	4413      	add	r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	440b      	add	r3, r1
 8001e04:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001e08:	2200      	movs	r2, #0
 8001e0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e0c:	7bfa      	ldrb	r2, [r7, #15]
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	4613      	mov	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	4413      	add	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	440b      	add	r3, r1
 8001e1a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001e1e:	7bfa      	ldrb	r2, [r7, #15]
 8001e20:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e22:	7bfa      	ldrb	r2, [r7, #15]
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	4613      	mov	r3, r2
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	4413      	add	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	440b      	add	r3, r1
 8001e30:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001e34:	2200      	movs	r2, #0
 8001e36:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e38:	7bfa      	ldrb	r2, [r7, #15]
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	4413      	add	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	440b      	add	r3, r1
 8001e46:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e4e:	7bfa      	ldrb	r2, [r7, #15]
 8001e50:	6879      	ldr	r1, [r7, #4]
 8001e52:	4613      	mov	r3, r2
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	4413      	add	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	440b      	add	r3, r1
 8001e5c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e64:	7bfa      	ldrb	r2, [r7, #15]
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	4413      	add	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	440b      	add	r3, r1
 8001e72:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e7a:	7bfb      	ldrb	r3, [r7, #15]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	73fb      	strb	r3, [r7, #15]
 8001e80:	7bfa      	ldrb	r2, [r7, #15]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d3b5      	bcc.n	8001df6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	603b      	str	r3, [r7, #0]
 8001e90:	687e      	ldr	r6, [r7, #4]
 8001e92:	466d      	mov	r5, sp
 8001e94:	f106 0410 	add.w	r4, r6, #16
 8001e98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ea0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ea4:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ea8:	1d33      	adds	r3, r6, #4
 8001eaa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eac:	6838      	ldr	r0, [r7, #0]
 8001eae:	f003 fa71 	bl	8005394 <USB_DevInit>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d005      	beq.n	8001ec4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2202      	movs	r2, #2
 8001ebc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e00d      	b.n	8001ee0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f004 fbc0 	bl	800665e <USB_DevDisconnect>

  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ee8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d101      	bne.n	8001f04 <HAL_PCD_Start+0x1c>
 8001f00:	2302      	movs	r3, #2
 8001f02:	e020      	b.n	8001f46 <HAL_PCD_Start+0x5e>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d109      	bne.n	8001f28 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d005      	beq.n	8001f28 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f20:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f003 f9c3 	bl	80052b8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f004 fb70 	bl	800661c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f4e:	b590      	push	{r4, r7, lr}
 8001f50:	b08d      	sub	sp, #52	; 0x34
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f5c:	6a3b      	ldr	r3, [r7, #32]
 8001f5e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f004 fc2e 	bl	80067c6 <USB_GetMode>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f040 848a 	bne.w	8002886 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f004 fb92 	bl	80066a0 <USB_ReadInterrupts>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 8480 	beq.w	8002884 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	0a1b      	lsrs	r3, r3, #8
 8001f8e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f004 fb7f 	bl	80066a0 <USB_ReadInterrupts>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d107      	bne.n	8001fbc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	695a      	ldr	r2, [r3, #20]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f002 0202 	and.w	r2, r2, #2
 8001fba:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f004 fb6d 	bl	80066a0 <USB_ReadInterrupts>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	f003 0310 	and.w	r3, r3, #16
 8001fcc:	2b10      	cmp	r3, #16
 8001fce:	d161      	bne.n	8002094 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	699a      	ldr	r2, [r3, #24]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 0210 	bic.w	r2, r2, #16
 8001fde:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001fe0:	6a3b      	ldr	r3, [r7, #32]
 8001fe2:	6a1b      	ldr	r3, [r3, #32]
 8001fe4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	f003 020f 	and.w	r2, r3, #15
 8001fec:	4613      	mov	r3, r2
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	0c5b      	lsrs	r3, r3, #17
 8002004:	f003 030f 	and.w	r3, r3, #15
 8002008:	2b02      	cmp	r3, #2
 800200a:	d124      	bne.n	8002056 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002012:	4013      	ands	r3, r2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d035      	beq.n	8002084 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	091b      	lsrs	r3, r3, #4
 8002020:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002022:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002026:	b29b      	uxth	r3, r3
 8002028:	461a      	mov	r2, r3
 800202a:	6a38      	ldr	r0, [r7, #32]
 800202c:	f004 f9a4 	bl	8006378 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	691a      	ldr	r2, [r3, #16]
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	091b      	lsrs	r3, r3, #4
 8002038:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800203c:	441a      	add	r2, r3
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	6a1a      	ldr	r2, [r3, #32]
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	091b      	lsrs	r3, r3, #4
 800204a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800204e:	441a      	add	r2, r3
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	621a      	str	r2, [r3, #32]
 8002054:	e016      	b.n	8002084 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	0c5b      	lsrs	r3, r3, #17
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	2b06      	cmp	r3, #6
 8002060:	d110      	bne.n	8002084 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002068:	2208      	movs	r2, #8
 800206a:	4619      	mov	r1, r3
 800206c:	6a38      	ldr	r0, [r7, #32]
 800206e:	f004 f983 	bl	8006378 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	6a1a      	ldr	r2, [r3, #32]
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	091b      	lsrs	r3, r3, #4
 800207a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800207e:	441a      	add	r2, r3
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	699a      	ldr	r2, [r3, #24]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f042 0210 	orr.w	r2, r2, #16
 8002092:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f004 fb01 	bl	80066a0 <USB_ReadInterrupts>
 800209e:	4603      	mov	r3, r0
 80020a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020a4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80020a8:	f040 80a7 	bne.w	80021fa <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80020ac:	2300      	movs	r3, #0
 80020ae:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f004 fb06 	bl	80066c6 <USB_ReadDevAllOutEpInterrupt>
 80020ba:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80020bc:	e099      	b.n	80021f2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80020be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f000 808e 	beq.w	80021e6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020d0:	b2d2      	uxtb	r2, r2
 80020d2:	4611      	mov	r1, r2
 80020d4:	4618      	mov	r0, r3
 80020d6:	f004 fb2a 	bl	800672e <USB_ReadDevOutEPInterrupt>
 80020da:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00c      	beq.n	8002100 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	015a      	lsls	r2, r3, #5
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	4413      	add	r3, r2
 80020ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020f2:	461a      	mov	r2, r3
 80020f4:	2301      	movs	r3, #1
 80020f6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80020f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 fec2 	bl	8002e84 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	f003 0308 	and.w	r3, r3, #8
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00c      	beq.n	8002124 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210c:	015a      	lsls	r2, r3, #5
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	4413      	add	r3, r2
 8002112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002116:	461a      	mov	r2, r3
 8002118:	2308      	movs	r3, #8
 800211a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800211c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 ff98 	bl	8003054 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	f003 0310 	and.w	r3, r3, #16
 800212a:	2b00      	cmp	r3, #0
 800212c:	d008      	beq.n	8002140 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	015a      	lsls	r2, r3, #5
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	4413      	add	r3, r2
 8002136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800213a:	461a      	mov	r2, r3
 800213c:	2310      	movs	r3, #16
 800213e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d030      	beq.n	80021ac <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800214a:	6a3b      	ldr	r3, [r7, #32]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002152:	2b80      	cmp	r3, #128	; 0x80
 8002154:	d109      	bne.n	800216a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	69fa      	ldr	r2, [r7, #28]
 8002160:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002164:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002168:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800216a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800216c:	4613      	mov	r3, r2
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	4413      	add	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	4413      	add	r3, r2
 800217c:	3304      	adds	r3, #4
 800217e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	78db      	ldrb	r3, [r3, #3]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d108      	bne.n	800219a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	2200      	movs	r2, #0
 800218c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800218e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002190:	b2db      	uxtb	r3, r3
 8002192:	4619      	mov	r1, r3
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f006 fe41 	bl	8008e1c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	015a      	lsls	r2, r3, #5
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	4413      	add	r3, r2
 80021a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021a6:	461a      	mov	r2, r3
 80021a8:	2302      	movs	r3, #2
 80021aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	f003 0320 	and.w	r3, r3, #32
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d008      	beq.n	80021c8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b8:	015a      	lsls	r2, r3, #5
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	4413      	add	r3, r2
 80021be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021c2:	461a      	mov	r2, r3
 80021c4:	2320      	movs	r3, #32
 80021c6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d009      	beq.n	80021e6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	015a      	lsls	r2, r3, #5
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	4413      	add	r3, r2
 80021da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021de:	461a      	mov	r2, r3
 80021e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021e4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	3301      	adds	r3, #1
 80021ea:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80021ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ee:	085b      	lsrs	r3, r3, #1
 80021f0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80021f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f47f af62 	bne.w	80020be <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4618      	mov	r0, r3
 8002200:	f004 fa4e 	bl	80066a0 <USB_ReadInterrupts>
 8002204:	4603      	mov	r3, r0
 8002206:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800220a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800220e:	f040 80db 	bne.w	80023c8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f004 fa6f 	bl	80066fa <USB_ReadDevAllInEpInterrupt>
 800221c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800221e:	2300      	movs	r3, #0
 8002220:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002222:	e0cd      	b.n	80023c0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	f000 80c2 	beq.w	80023b4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	4611      	mov	r1, r2
 800223a:	4618      	mov	r0, r3
 800223c:	f004 fa95 	bl	800676a <USB_ReadDevInEPInterrupt>
 8002240:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b00      	cmp	r3, #0
 800224a:	d057      	beq.n	80022fc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	2201      	movs	r2, #1
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002260:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	43db      	mvns	r3, r3
 8002266:	69f9      	ldr	r1, [r7, #28]
 8002268:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800226c:	4013      	ands	r3, r2
 800226e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	015a      	lsls	r2, r3, #5
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	4413      	add	r3, r2
 8002278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800227c:	461a      	mov	r2, r3
 800227e:	2301      	movs	r3, #1
 8002280:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d132      	bne.n	80022f0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800228e:	4613      	mov	r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	4413      	add	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	440b      	add	r3, r1
 8002298:	334c      	adds	r3, #76	; 0x4c
 800229a:	6819      	ldr	r1, [r3, #0]
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a0:	4613      	mov	r3, r2
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	4413      	add	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4403      	add	r3, r0
 80022aa:	3348      	adds	r3, #72	; 0x48
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4419      	add	r1, r3
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022b4:	4613      	mov	r3, r2
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	4413      	add	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4403      	add	r3, r0
 80022be:	334c      	adds	r3, #76	; 0x4c
 80022c0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d113      	bne.n	80022f0 <HAL_PCD_IRQHandler+0x3a2>
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022cc:	4613      	mov	r3, r2
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	4413      	add	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	3354      	adds	r3, #84	; 0x54
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d108      	bne.n	80022f0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6818      	ldr	r0, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022e8:	461a      	mov	r2, r3
 80022ea:	2101      	movs	r1, #1
 80022ec:	f004 fa9c 	bl	8006828 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80022f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	4619      	mov	r1, r3
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f006 fd0b 	bl	8008d12 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	2b00      	cmp	r3, #0
 8002304:	d008      	beq.n	8002318 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	015a      	lsls	r2, r3, #5
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	4413      	add	r3, r2
 800230e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002312:	461a      	mov	r2, r3
 8002314:	2308      	movs	r3, #8
 8002316:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	f003 0310 	and.w	r3, r3, #16
 800231e:	2b00      	cmp	r3, #0
 8002320:	d008      	beq.n	8002334 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	015a      	lsls	r2, r3, #5
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	4413      	add	r3, r2
 800232a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800232e:	461a      	mov	r2, r3
 8002330:	2310      	movs	r3, #16
 8002332:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800233a:	2b00      	cmp	r3, #0
 800233c:	d008      	beq.n	8002350 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	015a      	lsls	r2, r3, #5
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	4413      	add	r3, r2
 8002346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800234a:	461a      	mov	r2, r3
 800234c:	2340      	movs	r3, #64	; 0x40
 800234e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d023      	beq.n	80023a2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800235a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800235c:	6a38      	ldr	r0, [r7, #32]
 800235e:	f003 f97d 	bl	800565c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002364:	4613      	mov	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	4413      	add	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	3338      	adds	r3, #56	; 0x38
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	4413      	add	r3, r2
 8002372:	3304      	adds	r3, #4
 8002374:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	78db      	ldrb	r3, [r3, #3]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d108      	bne.n	8002390 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	2200      	movs	r2, #0
 8002382:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	b2db      	uxtb	r3, r3
 8002388:	4619      	mov	r1, r3
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f006 fd58 	bl	8008e40 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	015a      	lsls	r2, r3, #5
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	4413      	add	r3, r2
 8002398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800239c:	461a      	mov	r2, r3
 800239e:	2302      	movs	r3, #2
 80023a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d003      	beq.n	80023b4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80023ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 fcdb 	bl	8002d6a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	3301      	adds	r3, #1
 80023b8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80023ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023bc:	085b      	lsrs	r3, r3, #1
 80023be:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80023c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f47f af2e 	bne.w	8002224 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f004 f967 	bl	80066a0 <USB_ReadInterrupts>
 80023d2:	4603      	mov	r3, r0
 80023d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80023d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023dc:	d122      	bne.n	8002424 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	69fa      	ldr	r2, [r7, #28]
 80023e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023ec:	f023 0301 	bic.w	r3, r3, #1
 80023f0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d108      	bne.n	800240e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002404:	2100      	movs	r1, #0
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 fec2 	bl	8003190 <HAL_PCDEx_LPM_Callback>
 800240c:	e002      	b.n	8002414 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f006 fcf6 	bl	8008e00 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	695a      	ldr	r2, [r3, #20]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002422:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4618      	mov	r0, r3
 800242a:	f004 f939 	bl	80066a0 <USB_ReadInterrupts>
 800242e:	4603      	mov	r3, r0
 8002430:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002434:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002438:	d112      	bne.n	8002460 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b01      	cmp	r3, #1
 8002448:	d102      	bne.n	8002450 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f006 fcb2 	bl	8008db4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	695a      	ldr	r2, [r3, #20]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800245e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4618      	mov	r0, r3
 8002466:	f004 f91b 	bl	80066a0 <USB_ReadInterrupts>
 800246a:	4603      	mov	r3, r0
 800246c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002474:	f040 80b7 	bne.w	80025e6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	69fa      	ldr	r2, [r7, #28]
 8002482:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002486:	f023 0301 	bic.w	r3, r3, #1
 800248a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2110      	movs	r1, #16
 8002492:	4618      	mov	r0, r3
 8002494:	f003 f8e2 	bl	800565c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002498:	2300      	movs	r3, #0
 800249a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800249c:	e046      	b.n	800252c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800249e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a0:	015a      	lsls	r2, r3, #5
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	4413      	add	r3, r2
 80024a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024aa:	461a      	mov	r2, r3
 80024ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80024b0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80024b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b4:	015a      	lsls	r2, r3, #5
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	4413      	add	r3, r2
 80024ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024c2:	0151      	lsls	r1, r2, #5
 80024c4:	69fa      	ldr	r2, [r7, #28]
 80024c6:	440a      	add	r2, r1
 80024c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80024cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024d0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80024d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d4:	015a      	lsls	r2, r3, #5
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	4413      	add	r3, r2
 80024da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024de:	461a      	mov	r2, r3
 80024e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80024e4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80024e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e8:	015a      	lsls	r2, r3, #5
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	4413      	add	r3, r2
 80024ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024f6:	0151      	lsls	r1, r2, #5
 80024f8:	69fa      	ldr	r2, [r7, #28]
 80024fa:	440a      	add	r2, r1
 80024fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002500:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002504:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002508:	015a      	lsls	r2, r3, #5
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	4413      	add	r3, r2
 800250e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002516:	0151      	lsls	r1, r2, #5
 8002518:	69fa      	ldr	r2, [r7, #28]
 800251a:	440a      	add	r2, r1
 800251c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002520:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002524:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002528:	3301      	adds	r3, #1
 800252a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002532:	429a      	cmp	r2, r3
 8002534:	d3b3      	bcc.n	800249e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	69fa      	ldr	r2, [r7, #28]
 8002540:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002544:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002548:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	2b00      	cmp	r3, #0
 8002550:	d016      	beq.n	8002580 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002558:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800255c:	69fa      	ldr	r2, [r7, #28]
 800255e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002562:	f043 030b 	orr.w	r3, r3, #11
 8002566:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002572:	69fa      	ldr	r2, [r7, #28]
 8002574:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002578:	f043 030b 	orr.w	r3, r3, #11
 800257c:	6453      	str	r3, [r2, #68]	; 0x44
 800257e:	e015      	b.n	80025ac <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002586:	695b      	ldr	r3, [r3, #20]
 8002588:	69fa      	ldr	r2, [r7, #28]
 800258a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800258e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002592:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002596:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	69fa      	ldr	r2, [r7, #28]
 80025a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025a6:	f043 030b 	orr.w	r3, r3, #11
 80025aa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	69fa      	ldr	r2, [r7, #28]
 80025b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025ba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80025be:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6818      	ldr	r0, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025d0:	461a      	mov	r2, r3
 80025d2:	f004 f929 	bl	8006828 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	695a      	ldr	r2, [r3, #20]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80025e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f004 f858 	bl	80066a0 <USB_ReadInterrupts>
 80025f0:	4603      	mov	r3, r0
 80025f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025fa:	d124      	bne.n	8002646 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f004 f8ee 	bl	80067e2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f003 f8a3 	bl	8005756 <USB_GetDevSpeed>
 8002610:	4603      	mov	r3, r0
 8002612:	461a      	mov	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681c      	ldr	r4, [r3, #0]
 800261c:	f001 fa28 	bl	8003a70 <HAL_RCC_GetHCLKFreq>
 8002620:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002626:	b2db      	uxtb	r3, r3
 8002628:	461a      	mov	r2, r3
 800262a:	4620      	mov	r0, r4
 800262c:	f002 fda2 	bl	8005174 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f006 fb96 	bl	8008d62 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	695a      	ldr	r2, [r3, #20]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002644:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f004 f828 	bl	80066a0 <USB_ReadInterrupts>
 8002650:	4603      	mov	r3, r0
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	2b08      	cmp	r3, #8
 8002658:	d10a      	bne.n	8002670 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f006 fb73 	bl	8008d46 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	695a      	ldr	r2, [r3, #20]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f002 0208 	and.w	r2, r2, #8
 800266e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f004 f813 	bl	80066a0 <USB_ReadInterrupts>
 800267a:	4603      	mov	r3, r0
 800267c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002680:	2b80      	cmp	r3, #128	; 0x80
 8002682:	d122      	bne.n	80026ca <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002684:	6a3b      	ldr	r3, [r7, #32]
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800268c:	6a3b      	ldr	r3, [r7, #32]
 800268e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002690:	2301      	movs	r3, #1
 8002692:	627b      	str	r3, [r7, #36]	; 0x24
 8002694:	e014      	b.n	80026c0 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002696:	6879      	ldr	r1, [r7, #4]
 8002698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800269a:	4613      	mov	r3, r2
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	4413      	add	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	440b      	add	r3, r1
 80026a4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d105      	bne.n	80026ba <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	4619      	mov	r1, r3
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f000 fb27 	bl	8002d08 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026bc:	3301      	adds	r3, #1
 80026be:	627b      	str	r3, [r7, #36]	; 0x24
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d3e5      	bcc.n	8002696 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f003 ffe6 	bl	80066a0 <USB_ReadInterrupts>
 80026d4:	4603      	mov	r3, r0
 80026d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026de:	d13b      	bne.n	8002758 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026e0:	2301      	movs	r3, #1
 80026e2:	627b      	str	r3, [r7, #36]	; 0x24
 80026e4:	e02b      	b.n	800273e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	015a      	lsls	r2, r3, #5
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	4413      	add	r3, r2
 80026ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026fa:	4613      	mov	r3, r2
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	4413      	add	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	440b      	add	r3, r1
 8002704:	3340      	adds	r3, #64	; 0x40
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d115      	bne.n	8002738 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800270c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800270e:	2b00      	cmp	r3, #0
 8002710:	da12      	bge.n	8002738 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002716:	4613      	mov	r3, r2
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	4413      	add	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	440b      	add	r3, r1
 8002720:	333f      	adds	r3, #63	; 0x3f
 8002722:	2201      	movs	r2, #1
 8002724:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	b2db      	uxtb	r3, r3
 800272a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800272e:	b2db      	uxtb	r3, r3
 8002730:	4619      	mov	r1, r3
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 fae8 	bl	8002d08 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	3301      	adds	r3, #1
 800273c:	627b      	str	r3, [r7, #36]	; 0x24
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002744:	429a      	cmp	r2, r3
 8002746:	d3ce      	bcc.n	80026e6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	695a      	ldr	r2, [r3, #20]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002756:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4618      	mov	r0, r3
 800275e:	f003 ff9f 	bl	80066a0 <USB_ReadInterrupts>
 8002762:	4603      	mov	r3, r0
 8002764:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002768:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800276c:	d155      	bne.n	800281a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800276e:	2301      	movs	r3, #1
 8002770:	627b      	str	r3, [r7, #36]	; 0x24
 8002772:	e045      	b.n	8002800 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	015a      	lsls	r2, r3, #5
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	4413      	add	r3, r2
 800277c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002784:	6879      	ldr	r1, [r7, #4]
 8002786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002788:	4613      	mov	r3, r2
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	4413      	add	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	440b      	add	r3, r1
 8002792:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d12e      	bne.n	80027fa <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800279c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800279e:	2b00      	cmp	r3, #0
 80027a0:	da2b      	bge.n	80027fa <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80027ae:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d121      	bne.n	80027fa <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80027b6:	6879      	ldr	r1, [r7, #4]
 80027b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ba:	4613      	mov	r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	4413      	add	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	440b      	add	r3, r1
 80027c4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80027c8:	2201      	movs	r2, #1
 80027ca:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80027cc:	6a3b      	ldr	r3, [r7, #32]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80027d4:	6a3b      	ldr	r3, [r7, #32]
 80027d6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80027d8:	6a3b      	ldr	r3, [r7, #32]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10a      	bne.n	80027fa <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	69fa      	ldr	r2, [r7, #28]
 80027ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027f6:	6053      	str	r3, [r2, #4]
            break;
 80027f8:	e007      	b.n	800280a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fc:	3301      	adds	r3, #1
 80027fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002806:	429a      	cmp	r2, r3
 8002808:	d3b4      	bcc.n	8002774 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	695a      	ldr	r2, [r3, #20]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002818:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4618      	mov	r0, r3
 8002820:	f003 ff3e 	bl	80066a0 <USB_ReadInterrupts>
 8002824:	4603      	mov	r3, r0
 8002826:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800282a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800282e:	d10a      	bne.n	8002846 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f006 fb17 	bl	8008e64 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	695a      	ldr	r2, [r3, #20]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002844:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f003 ff28 	bl	80066a0 <USB_ReadInterrupts>
 8002850:	4603      	mov	r3, r0
 8002852:	f003 0304 	and.w	r3, r3, #4
 8002856:	2b04      	cmp	r3, #4
 8002858:	d115      	bne.n	8002886 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	2b00      	cmp	r3, #0
 800286a:	d002      	beq.n	8002872 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f006 fb07 	bl	8008e80 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6859      	ldr	r1, [r3, #4]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	430a      	orrs	r2, r1
 8002880:	605a      	str	r2, [r3, #4]
 8002882:	e000      	b.n	8002886 <HAL_PCD_IRQHandler+0x938>
      return;
 8002884:	bf00      	nop
    }
  }
}
 8002886:	3734      	adds	r7, #52	; 0x34
 8002888:	46bd      	mov	sp, r7
 800288a:	bd90      	pop	{r4, r7, pc}

0800288c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d101      	bne.n	80028a6 <HAL_PCD_SetAddress+0x1a>
 80028a2:	2302      	movs	r3, #2
 80028a4:	e013      	b.n	80028ce <HAL_PCD_SetAddress+0x42>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	78fa      	ldrb	r2, [r7, #3]
 80028b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	78fa      	ldrb	r2, [r7, #3]
 80028bc:	4611      	mov	r1, r2
 80028be:	4618      	mov	r0, r3
 80028c0:	f003 fe86 	bl	80065d0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b084      	sub	sp, #16
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
 80028de:	4608      	mov	r0, r1
 80028e0:	4611      	mov	r1, r2
 80028e2:	461a      	mov	r2, r3
 80028e4:	4603      	mov	r3, r0
 80028e6:	70fb      	strb	r3, [r7, #3]
 80028e8:	460b      	mov	r3, r1
 80028ea:	803b      	strh	r3, [r7, #0]
 80028ec:	4613      	mov	r3, r2
 80028ee:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80028f0:	2300      	movs	r3, #0
 80028f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	da0f      	bge.n	800291c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028fc:	78fb      	ldrb	r3, [r7, #3]
 80028fe:	f003 020f 	and.w	r2, r3, #15
 8002902:	4613      	mov	r3, r2
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	4413      	add	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	3338      	adds	r3, #56	; 0x38
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	4413      	add	r3, r2
 8002910:	3304      	adds	r3, #4
 8002912:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2201      	movs	r2, #1
 8002918:	705a      	strb	r2, [r3, #1]
 800291a:	e00f      	b.n	800293c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800291c:	78fb      	ldrb	r3, [r7, #3]
 800291e:	f003 020f 	and.w	r2, r3, #15
 8002922:	4613      	mov	r3, r2
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	4413      	add	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	4413      	add	r3, r2
 8002932:	3304      	adds	r3, #4
 8002934:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800293c:	78fb      	ldrb	r3, [r7, #3]
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	b2da      	uxtb	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002948:	883a      	ldrh	r2, [r7, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	78ba      	ldrb	r2, [r7, #2]
 8002952:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	785b      	ldrb	r3, [r3, #1]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d004      	beq.n	8002966 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	b29a      	uxth	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002966:	78bb      	ldrb	r3, [r7, #2]
 8002968:	2b02      	cmp	r3, #2
 800296a:	d102      	bne.n	8002972 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002978:	2b01      	cmp	r3, #1
 800297a:	d101      	bne.n	8002980 <HAL_PCD_EP_Open+0xaa>
 800297c:	2302      	movs	r3, #2
 800297e:	e00e      	b.n	800299e <HAL_PCD_EP_Open+0xc8>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68f9      	ldr	r1, [r7, #12]
 800298e:	4618      	mov	r0, r3
 8002990:	f002 ff06 	bl	80057a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800299c:	7afb      	ldrb	r3, [r7, #11]
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b084      	sub	sp, #16
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
 80029ae:	460b      	mov	r3, r1
 80029b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	da0f      	bge.n	80029da <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029ba:	78fb      	ldrb	r3, [r7, #3]
 80029bc:	f003 020f 	and.w	r2, r3, #15
 80029c0:	4613      	mov	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	4413      	add	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	3338      	adds	r3, #56	; 0x38
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	4413      	add	r3, r2
 80029ce:	3304      	adds	r3, #4
 80029d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2201      	movs	r2, #1
 80029d6:	705a      	strb	r2, [r3, #1]
 80029d8:	e00f      	b.n	80029fa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029da:	78fb      	ldrb	r3, [r7, #3]
 80029dc:	f003 020f 	and.w	r2, r3, #15
 80029e0:	4613      	mov	r3, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	4413      	add	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	4413      	add	r3, r2
 80029f0:	3304      	adds	r3, #4
 80029f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80029fa:	78fb      	ldrb	r3, [r7, #3]
 80029fc:	f003 030f 	and.w	r3, r3, #15
 8002a00:	b2da      	uxtb	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d101      	bne.n	8002a14 <HAL_PCD_EP_Close+0x6e>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e00e      	b.n	8002a32 <HAL_PCD_EP_Close+0x8c>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68f9      	ldr	r1, [r7, #12]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f002 ff44 	bl	80058b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b086      	sub	sp, #24
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	60f8      	str	r0, [r7, #12]
 8002a42:	607a      	str	r2, [r7, #4]
 8002a44:	603b      	str	r3, [r7, #0]
 8002a46:	460b      	mov	r3, r1
 8002a48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a4a:	7afb      	ldrb	r3, [r7, #11]
 8002a4c:	f003 020f 	and.w	r2, r3, #15
 8002a50:	4613      	mov	r3, r2
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	4413      	add	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	4413      	add	r3, r2
 8002a60:	3304      	adds	r3, #4
 8002a62:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	2200      	movs	r2, #0
 8002a74:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a7c:	7afb      	ldrb	r3, [r7, #11]
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	b2da      	uxtb	r2, r3
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d102      	bne.n	8002a96 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a96:	7afb      	ldrb	r3, [r7, #11]
 8002a98:	f003 030f 	and.w	r3, r3, #15
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d109      	bne.n	8002ab4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6818      	ldr	r0, [r3, #0]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	461a      	mov	r2, r3
 8002aac:	6979      	ldr	r1, [r7, #20]
 8002aae:	f003 fa23 	bl	8005ef8 <USB_EP0StartXfer>
 8002ab2:	e008      	b.n	8002ac6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6818      	ldr	r0, [r3, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	461a      	mov	r2, r3
 8002ac0:	6979      	ldr	r1, [r7, #20]
 8002ac2:	f002 ffd1 	bl	8005a68 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3718      	adds	r7, #24
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002adc:	78fb      	ldrb	r3, [r7, #3]
 8002ade:	f003 020f 	and.w	r2, r3, #15
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	4413      	add	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	440b      	add	r3, r1
 8002aee:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002af2:	681b      	ldr	r3, [r3, #0]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	607a      	str	r2, [r7, #4]
 8002b0a:	603b      	str	r3, [r7, #0]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b10:	7afb      	ldrb	r3, [r7, #11]
 8002b12:	f003 020f 	and.w	r2, r3, #15
 8002b16:	4613      	mov	r3, r2
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	3338      	adds	r3, #56	; 0x38
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	4413      	add	r3, r2
 8002b24:	3304      	adds	r3, #4
 8002b26:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	2200      	movs	r2, #0
 8002b38:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b40:	7afb      	ldrb	r3, [r7, #11]
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	b2da      	uxtb	r2, r3
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d102      	bne.n	8002b5a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b5a:	7afb      	ldrb	r3, [r7, #11]
 8002b5c:	f003 030f 	and.w	r3, r3, #15
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d109      	bne.n	8002b78 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6818      	ldr	r0, [r3, #0]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	461a      	mov	r2, r3
 8002b70:	6979      	ldr	r1, [r7, #20]
 8002b72:	f003 f9c1 	bl	8005ef8 <USB_EP0StartXfer>
 8002b76:	e008      	b.n	8002b8a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6818      	ldr	r0, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	461a      	mov	r2, r3
 8002b84:	6979      	ldr	r1, [r7, #20]
 8002b86:	f002 ff6f 	bl	8005a68 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ba0:	78fb      	ldrb	r3, [r7, #3]
 8002ba2:	f003 020f 	and.w	r2, r3, #15
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d901      	bls.n	8002bb2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e050      	b.n	8002c54 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002bb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	da0f      	bge.n	8002bda <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bba:	78fb      	ldrb	r3, [r7, #3]
 8002bbc:	f003 020f 	and.w	r2, r3, #15
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	4413      	add	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	3338      	adds	r3, #56	; 0x38
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	4413      	add	r3, r2
 8002bce:	3304      	adds	r3, #4
 8002bd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	705a      	strb	r2, [r3, #1]
 8002bd8:	e00d      	b.n	8002bf6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002bda:	78fa      	ldrb	r2, [r7, #3]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	4413      	add	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	4413      	add	r3, r2
 8002bec:	3304      	adds	r3, #4
 8002bee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bfc:	78fb      	ldrb	r3, [r7, #3]
 8002bfe:	f003 030f 	and.w	r3, r3, #15
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d101      	bne.n	8002c16 <HAL_PCD_EP_SetStall+0x82>
 8002c12:	2302      	movs	r3, #2
 8002c14:	e01e      	b.n	8002c54 <HAL_PCD_EP_SetStall+0xc0>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68f9      	ldr	r1, [r7, #12]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f003 fbff 	bl	8006428 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c2a:	78fb      	ldrb	r3, [r7, #3]
 8002c2c:	f003 030f 	and.w	r3, r3, #15
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d10a      	bne.n	8002c4a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6818      	ldr	r0, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	b2d9      	uxtb	r1, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c44:	461a      	mov	r2, r3
 8002c46:	f003 fdef 	bl	8006828 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	460b      	mov	r3, r1
 8002c66:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c68:	78fb      	ldrb	r3, [r7, #3]
 8002c6a:	f003 020f 	and.w	r2, r3, #15
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d901      	bls.n	8002c7a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e042      	b.n	8002d00 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	da0f      	bge.n	8002ca2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c82:	78fb      	ldrb	r3, [r7, #3]
 8002c84:	f003 020f 	and.w	r2, r3, #15
 8002c88:	4613      	mov	r3, r2
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	4413      	add	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	3338      	adds	r3, #56	; 0x38
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	4413      	add	r3, r2
 8002c96:	3304      	adds	r3, #4
 8002c98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	705a      	strb	r2, [r3, #1]
 8002ca0:	e00f      	b.n	8002cc2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ca2:	78fb      	ldrb	r3, [r7, #3]
 8002ca4:	f003 020f 	and.w	r2, r3, #15
 8002ca8:	4613      	mov	r3, r2
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	4413      	add	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	3304      	adds	r3, #4
 8002cba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cc8:	78fb      	ldrb	r3, [r7, #3]
 8002cca:	f003 030f 	and.w	r3, r3, #15
 8002cce:	b2da      	uxtb	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d101      	bne.n	8002ce2 <HAL_PCD_EP_ClrStall+0x86>
 8002cde:	2302      	movs	r3, #2
 8002ce0:	e00e      	b.n	8002d00 <HAL_PCD_EP_ClrStall+0xa4>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68f9      	ldr	r1, [r7, #12]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f003 fc07 	bl	8006504 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	460b      	mov	r3, r1
 8002d12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002d14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	da0c      	bge.n	8002d36 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d1c:	78fb      	ldrb	r3, [r7, #3]
 8002d1e:	f003 020f 	and.w	r2, r3, #15
 8002d22:	4613      	mov	r3, r2
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	4413      	add	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	3338      	adds	r3, #56	; 0x38
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	4413      	add	r3, r2
 8002d30:	3304      	adds	r3, #4
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	e00c      	b.n	8002d50 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d36:	78fb      	ldrb	r3, [r7, #3]
 8002d38:	f003 020f 	and.w	r2, r3, #15
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	4413      	add	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3304      	adds	r3, #4
 8002d4e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68f9      	ldr	r1, [r7, #12]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f003 fa26 	bl	80061a8 <USB_EPStopXfer>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002d60:	7afb      	ldrb	r3, [r7, #11]
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b08a      	sub	sp, #40	; 0x28
 8002d6e:	af02      	add	r7, sp, #8
 8002d70:	6078      	str	r0, [r7, #4]
 8002d72:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	4613      	mov	r3, r2
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	4413      	add	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	3338      	adds	r3, #56	; 0x38
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	3304      	adds	r3, #4
 8002d90:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6a1a      	ldr	r2, [r3, #32]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d901      	bls.n	8002da2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e06c      	b.n	8002e7c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	699a      	ldr	r2, [r3, #24]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	69fa      	ldr	r2, [r7, #28]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d902      	bls.n	8002dbe <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	3303      	adds	r3, #3
 8002dc2:	089b      	lsrs	r3, r3, #2
 8002dc4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002dc6:	e02b      	b.n	8002e20 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	699a      	ldr	r2, [r3, #24]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	69fa      	ldr	r2, [r7, #28]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d902      	bls.n	8002de4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	3303      	adds	r3, #3
 8002de8:	089b      	lsrs	r3, r3, #2
 8002dea:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6919      	ldr	r1, [r3, #16]
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	9300      	str	r3, [sp, #0]
 8002e00:	4603      	mov	r3, r0
 8002e02:	6978      	ldr	r0, [r7, #20]
 8002e04:	f003 fa7a 	bl	80062fc <USB_WritePacket>

    ep->xfer_buff  += len;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	691a      	ldr	r2, [r3, #16]
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	441a      	add	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6a1a      	ldr	r2, [r3, #32]
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	441a      	add	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	015a      	lsls	r2, r3, #5
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	4413      	add	r3, r2
 8002e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d809      	bhi.n	8002e4a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6a1a      	ldr	r2, [r3, #32]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d203      	bcs.n	8002e4a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1be      	bne.n	8002dc8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	699a      	ldr	r2, [r3, #24]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d811      	bhi.n	8002e7a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	f003 030f 	and.w	r3, r3, #15
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	6939      	ldr	r1, [r7, #16]
 8002e72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e76:	4013      	ands	r3, r2
 8002e78:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3720      	adds	r7, #32
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b088      	sub	sp, #32
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	333c      	adds	r3, #60	; 0x3c
 8002e9c:	3304      	adds	r3, #4
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	015a      	lsls	r2, r3, #5
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d17b      	bne.n	8002fb2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	f003 0308 	and.w	r3, r3, #8
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d015      	beq.n	8002ef0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	4a61      	ldr	r2, [pc, #388]	; (800304c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	f240 80b9 	bls.w	8003040 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f000 80b3 	beq.w	8003040 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	015a      	lsls	r2, r3, #5
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002eec:	6093      	str	r3, [r2, #8]
 8002eee:	e0a7      	b.n	8003040 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	f003 0320 	and.w	r3, r3, #32
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d009      	beq.n	8002f0e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	015a      	lsls	r2, r3, #5
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	4413      	add	r3, r2
 8002f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f06:	461a      	mov	r2, r3
 8002f08:	2320      	movs	r3, #32
 8002f0a:	6093      	str	r3, [r2, #8]
 8002f0c:	e098      	b.n	8003040 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f040 8093 	bne.w	8003040 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	4a4b      	ldr	r2, [pc, #300]	; (800304c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d90f      	bls.n	8002f42 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00a      	beq.n	8002f42 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	015a      	lsls	r2, r3, #5
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	4413      	add	r3, r2
 8002f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f38:	461a      	mov	r2, r3
 8002f3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f3e:	6093      	str	r3, [r2, #8]
 8002f40:	e07e      	b.n	8003040 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	4613      	mov	r3, r2
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	4413      	add	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	4413      	add	r3, r2
 8002f54:	3304      	adds	r3, #4
 8002f56:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	69da      	ldr	r2, [r3, #28]
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	0159      	lsls	r1, r3, #5
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	440b      	add	r3, r1
 8002f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f6e:	1ad2      	subs	r2, r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d114      	bne.n	8002fa4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d109      	bne.n	8002f96 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6818      	ldr	r0, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	2101      	movs	r1, #1
 8002f90:	f003 fc4a 	bl	8006828 <USB_EP0_OutStart>
 8002f94:	e006      	b.n	8002fa4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	691a      	ldr	r2, [r3, #16]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	441a      	add	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	4619      	mov	r1, r3
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f005 fe96 	bl	8008cdc <HAL_PCD_DataOutStageCallback>
 8002fb0:	e046      	b.n	8003040 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	4a26      	ldr	r2, [pc, #152]	; (8003050 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d124      	bne.n	8003004 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00a      	beq.n	8002fda <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	015a      	lsls	r2, r3, #5
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	4413      	add	r3, r2
 8002fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fd6:	6093      	str	r3, [r2, #8]
 8002fd8:	e032      	b.n	8003040 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	f003 0320 	and.w	r3, r3, #32
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d008      	beq.n	8002ff6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	015a      	lsls	r2, r3, #5
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	4413      	add	r3, r2
 8002fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	2320      	movs	r3, #32
 8002ff4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f005 fe6d 	bl	8008cdc <HAL_PCD_DataOutStageCallback>
 8003002:	e01d      	b.n	8003040 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d114      	bne.n	8003034 <PCD_EP_OutXfrComplete_int+0x1b0>
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	4613      	mov	r3, r2
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	4413      	add	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	440b      	add	r3, r1
 8003018:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d108      	bne.n	8003034 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6818      	ldr	r0, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800302c:	461a      	mov	r2, r3
 800302e:	2100      	movs	r1, #0
 8003030:	f003 fbfa 	bl	8006828 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	b2db      	uxtb	r3, r3
 8003038:	4619      	mov	r1, r3
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f005 fe4e 	bl	8008cdc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3720      	adds	r7, #32
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	4f54300a 	.word	0x4f54300a
 8003050:	4f54310a 	.word	0x4f54310a

08003054 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	333c      	adds	r3, #60	; 0x3c
 800306c:	3304      	adds	r3, #4
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	015a      	lsls	r2, r3, #5
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	4413      	add	r3, r2
 800307a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	4a15      	ldr	r2, [pc, #84]	; (80030dc <PCD_EP_OutSetupPacket_int+0x88>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d90e      	bls.n	80030a8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003090:	2b00      	cmp	r3, #0
 8003092:	d009      	beq.n	80030a8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	015a      	lsls	r2, r3, #5
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	4413      	add	r3, r2
 800309c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030a0:	461a      	mov	r2, r3
 80030a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030a6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f005 fe05 	bl	8008cb8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	4a0a      	ldr	r2, [pc, #40]	; (80030dc <PCD_EP_OutSetupPacket_int+0x88>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d90c      	bls.n	80030d0 <PCD_EP_OutSetupPacket_int+0x7c>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d108      	bne.n	80030d0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6818      	ldr	r0, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80030c8:	461a      	mov	r2, r3
 80030ca:	2101      	movs	r1, #1
 80030cc:	f003 fbac 	bl	8006828 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	4f54300a 	.word	0x4f54300a

080030e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	460b      	mov	r3, r1
 80030ea:	70fb      	strb	r3, [r7, #3]
 80030ec:	4613      	mov	r3, r2
 80030ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80030f8:	78fb      	ldrb	r3, [r7, #3]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d107      	bne.n	800310e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80030fe:	883b      	ldrh	r3, [r7, #0]
 8003100:	0419      	lsls	r1, r3, #16
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68ba      	ldr	r2, [r7, #8]
 8003108:	430a      	orrs	r2, r1
 800310a:	629a      	str	r2, [r3, #40]	; 0x28
 800310c:	e028      	b.n	8003160 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003114:	0c1b      	lsrs	r3, r3, #16
 8003116:	68ba      	ldr	r2, [r7, #8]
 8003118:	4413      	add	r3, r2
 800311a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800311c:	2300      	movs	r3, #0
 800311e:	73fb      	strb	r3, [r7, #15]
 8003120:	e00d      	b.n	800313e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	7bfb      	ldrb	r3, [r7, #15]
 8003128:	3340      	adds	r3, #64	; 0x40
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	0c1b      	lsrs	r3, r3, #16
 8003132:	68ba      	ldr	r2, [r7, #8]
 8003134:	4413      	add	r3, r2
 8003136:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003138:	7bfb      	ldrb	r3, [r7, #15]
 800313a:	3301      	adds	r3, #1
 800313c:	73fb      	strb	r3, [r7, #15]
 800313e:	7bfa      	ldrb	r2, [r7, #15]
 8003140:	78fb      	ldrb	r3, [r7, #3]
 8003142:	3b01      	subs	r3, #1
 8003144:	429a      	cmp	r2, r3
 8003146:	d3ec      	bcc.n	8003122 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003148:	883b      	ldrh	r3, [r7, #0]
 800314a:	0418      	lsls	r0, r3, #16
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6819      	ldr	r1, [r3, #0]
 8003150:	78fb      	ldrb	r3, [r7, #3]
 8003152:	3b01      	subs	r3, #1
 8003154:	68ba      	ldr	r2, [r7, #8]
 8003156:	4302      	orrs	r2, r0
 8003158:	3340      	adds	r3, #64	; 0x40
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3714      	adds	r7, #20
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr

0800316e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800316e:	b480      	push	{r7}
 8003170:	b083      	sub	sp, #12
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
 8003176:	460b      	mov	r3, r1
 8003178:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	887a      	ldrh	r2, [r7, #2]
 8003180:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	460b      	mov	r3, r1
 800319a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e267      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d075      	beq.n	80032b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031c6:	4b88      	ldr	r3, [pc, #544]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 030c 	and.w	r3, r3, #12
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	d00c      	beq.n	80031ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031d2:	4b85      	ldr	r3, [pc, #532]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031da:	2b08      	cmp	r3, #8
 80031dc:	d112      	bne.n	8003204 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031de:	4b82      	ldr	r3, [pc, #520]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031ea:	d10b      	bne.n	8003204 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ec:	4b7e      	ldr	r3, [pc, #504]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d05b      	beq.n	80032b0 <HAL_RCC_OscConfig+0x108>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d157      	bne.n	80032b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e242      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800320c:	d106      	bne.n	800321c <HAL_RCC_OscConfig+0x74>
 800320e:	4b76      	ldr	r3, [pc, #472]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a75      	ldr	r2, [pc, #468]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 8003214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003218:	6013      	str	r3, [r2, #0]
 800321a:	e01d      	b.n	8003258 <HAL_RCC_OscConfig+0xb0>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003224:	d10c      	bne.n	8003240 <HAL_RCC_OscConfig+0x98>
 8003226:	4b70      	ldr	r3, [pc, #448]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a6f      	ldr	r2, [pc, #444]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 800322c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003230:	6013      	str	r3, [r2, #0]
 8003232:	4b6d      	ldr	r3, [pc, #436]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a6c      	ldr	r2, [pc, #432]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 8003238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	e00b      	b.n	8003258 <HAL_RCC_OscConfig+0xb0>
 8003240:	4b69      	ldr	r3, [pc, #420]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a68      	ldr	r2, [pc, #416]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 8003246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800324a:	6013      	str	r3, [r2, #0]
 800324c:	4b66      	ldr	r3, [pc, #408]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a65      	ldr	r2, [pc, #404]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 8003252:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003256:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d013      	beq.n	8003288 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003260:	f7fd fea6 	bl	8000fb0 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003268:	f7fd fea2 	bl	8000fb0 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b64      	cmp	r3, #100	; 0x64
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e207      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327a:	4b5b      	ldr	r3, [pc, #364]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0f0      	beq.n	8003268 <HAL_RCC_OscConfig+0xc0>
 8003286:	e014      	b.n	80032b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003288:	f7fd fe92 	bl	8000fb0 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003290:	f7fd fe8e 	bl	8000fb0 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b64      	cmp	r3, #100	; 0x64
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e1f3      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032a2:	4b51      	ldr	r3, [pc, #324]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1f0      	bne.n	8003290 <HAL_RCC_OscConfig+0xe8>
 80032ae:	e000      	b.n	80032b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d063      	beq.n	8003386 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032be:	4b4a      	ldr	r3, [pc, #296]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 030c 	and.w	r3, r3, #12
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00b      	beq.n	80032e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ca:	4b47      	ldr	r3, [pc, #284]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032d2:	2b08      	cmp	r3, #8
 80032d4:	d11c      	bne.n	8003310 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032d6:	4b44      	ldr	r3, [pc, #272]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d116      	bne.n	8003310 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032e2:	4b41      	ldr	r3, [pc, #260]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d005      	beq.n	80032fa <HAL_RCC_OscConfig+0x152>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d001      	beq.n	80032fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e1c7      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032fa:	4b3b      	ldr	r3, [pc, #236]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	4937      	ldr	r1, [pc, #220]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 800330a:	4313      	orrs	r3, r2
 800330c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800330e:	e03a      	b.n	8003386 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d020      	beq.n	800335a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003318:	4b34      	ldr	r3, [pc, #208]	; (80033ec <HAL_RCC_OscConfig+0x244>)
 800331a:	2201      	movs	r2, #1
 800331c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331e:	f7fd fe47 	bl	8000fb0 <HAL_GetTick>
 8003322:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003324:	e008      	b.n	8003338 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003326:	f7fd fe43 	bl	8000fb0 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b02      	cmp	r3, #2
 8003332:	d901      	bls.n	8003338 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e1a8      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003338:	4b2b      	ldr	r3, [pc, #172]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d0f0      	beq.n	8003326 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003344:	4b28      	ldr	r3, [pc, #160]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	4925      	ldr	r1, [pc, #148]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 8003354:	4313      	orrs	r3, r2
 8003356:	600b      	str	r3, [r1, #0]
 8003358:	e015      	b.n	8003386 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800335a:	4b24      	ldr	r3, [pc, #144]	; (80033ec <HAL_RCC_OscConfig+0x244>)
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003360:	f7fd fe26 	bl	8000fb0 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003368:	f7fd fe22 	bl	8000fb0 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e187      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800337a:	4b1b      	ldr	r3, [pc, #108]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1f0      	bne.n	8003368 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0308 	and.w	r3, r3, #8
 800338e:	2b00      	cmp	r3, #0
 8003390:	d036      	beq.n	8003400 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d016      	beq.n	80033c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800339a:	4b15      	ldr	r3, [pc, #84]	; (80033f0 <HAL_RCC_OscConfig+0x248>)
 800339c:	2201      	movs	r2, #1
 800339e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a0:	f7fd fe06 	bl	8000fb0 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033a8:	f7fd fe02 	bl	8000fb0 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e167      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ba:	4b0b      	ldr	r3, [pc, #44]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 80033bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0f0      	beq.n	80033a8 <HAL_RCC_OscConfig+0x200>
 80033c6:	e01b      	b.n	8003400 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033c8:	4b09      	ldr	r3, [pc, #36]	; (80033f0 <HAL_RCC_OscConfig+0x248>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ce:	f7fd fdef 	bl	8000fb0 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033d4:	e00e      	b.n	80033f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033d6:	f7fd fdeb 	bl	8000fb0 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d907      	bls.n	80033f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e150      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
 80033e8:	40023800 	.word	0x40023800
 80033ec:	42470000 	.word	0x42470000
 80033f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033f4:	4b88      	ldr	r3, [pc, #544]	; (8003618 <HAL_RCC_OscConfig+0x470>)
 80033f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1ea      	bne.n	80033d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 8097 	beq.w	800353c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800340e:	2300      	movs	r3, #0
 8003410:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003412:	4b81      	ldr	r3, [pc, #516]	; (8003618 <HAL_RCC_OscConfig+0x470>)
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10f      	bne.n	800343e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800341e:	2300      	movs	r3, #0
 8003420:	60bb      	str	r3, [r7, #8]
 8003422:	4b7d      	ldr	r3, [pc, #500]	; (8003618 <HAL_RCC_OscConfig+0x470>)
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	4a7c      	ldr	r2, [pc, #496]	; (8003618 <HAL_RCC_OscConfig+0x470>)
 8003428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800342c:	6413      	str	r3, [r2, #64]	; 0x40
 800342e:	4b7a      	ldr	r3, [pc, #488]	; (8003618 <HAL_RCC_OscConfig+0x470>)
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003436:	60bb      	str	r3, [r7, #8]
 8003438:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800343a:	2301      	movs	r3, #1
 800343c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800343e:	4b77      	ldr	r3, [pc, #476]	; (800361c <HAL_RCC_OscConfig+0x474>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003446:	2b00      	cmp	r3, #0
 8003448:	d118      	bne.n	800347c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800344a:	4b74      	ldr	r3, [pc, #464]	; (800361c <HAL_RCC_OscConfig+0x474>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a73      	ldr	r2, [pc, #460]	; (800361c <HAL_RCC_OscConfig+0x474>)
 8003450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003454:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003456:	f7fd fdab 	bl	8000fb0 <HAL_GetTick>
 800345a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800345c:	e008      	b.n	8003470 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800345e:	f7fd fda7 	bl	8000fb0 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d901      	bls.n	8003470 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e10c      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003470:	4b6a      	ldr	r3, [pc, #424]	; (800361c <HAL_RCC_OscConfig+0x474>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003478:	2b00      	cmp	r3, #0
 800347a:	d0f0      	beq.n	800345e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d106      	bne.n	8003492 <HAL_RCC_OscConfig+0x2ea>
 8003484:	4b64      	ldr	r3, [pc, #400]	; (8003618 <HAL_RCC_OscConfig+0x470>)
 8003486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003488:	4a63      	ldr	r2, [pc, #396]	; (8003618 <HAL_RCC_OscConfig+0x470>)
 800348a:	f043 0301 	orr.w	r3, r3, #1
 800348e:	6713      	str	r3, [r2, #112]	; 0x70
 8003490:	e01c      	b.n	80034cc <HAL_RCC_OscConfig+0x324>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	2b05      	cmp	r3, #5
 8003498:	d10c      	bne.n	80034b4 <HAL_RCC_OscConfig+0x30c>
 800349a:	4b5f      	ldr	r3, [pc, #380]	; (8003618 <HAL_RCC_OscConfig+0x470>)
 800349c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349e:	4a5e      	ldr	r2, [pc, #376]	; (8003618 <HAL_RCC_OscConfig+0x470>)
 80034a0:	f043 0304 	orr.w	r3, r3, #4
 80034a4:	6713      	str	r3, [r2, #112]	; 0x70
 80034a6:	4b5c      	ldr	r3, [pc, #368]	; (8003618 <HAL_RCC_OscConfig+0x470>)
 80034a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034aa:	4a5b      	ldr	r2, [pc, #364]	; (8003618 <HAL_RCC_OscConfig+0x470>)
 80034ac:	f043 0301 	orr.w	r3, r3, #1
 80034b0:	6713      	str	r3, [r2, #112]	; 0x70
 80034b2:	e00b      	b.n	80034cc <HAL_RCC_OscConfig+0x324>
 80034b4:	4b58      	ldr	r3, [pc, #352]	; (8003618 <HAL_RCC_OscConfig+0x470>)
 80034b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b8:	4a57      	ldr	r2, [pc, #348]	; (8003618 <HAL_RCC_OscConfig+0x470>)
 80034ba:	f023 0301 	bic.w	r3, r3, #1
 80034be:	6713      	str	r3, [r2, #112]	; 0x70
 80034c0:	4b55      	ldr	r3, [pc, #340]	; (8003618 <HAL_RCC_OscConfig+0x470>)
 80034c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c4:	4a54      	ldr	r2, [pc, #336]	; (8003618 <HAL_RCC_OscConfig+0x470>)
 80034c6:	f023 0304 	bic.w	r3, r3, #4
 80034ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d015      	beq.n	8003500 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d4:	f7fd fd6c 	bl	8000fb0 <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034da:	e00a      	b.n	80034f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034dc:	f7fd fd68 	bl	8000fb0 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e0cb      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f2:	4b49      	ldr	r3, [pc, #292]	; (8003618 <HAL_RCC_OscConfig+0x470>)
 80034f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d0ee      	beq.n	80034dc <HAL_RCC_OscConfig+0x334>
 80034fe:	e014      	b.n	800352a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003500:	f7fd fd56 	bl	8000fb0 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003506:	e00a      	b.n	800351e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003508:	f7fd fd52 	bl	8000fb0 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	f241 3288 	movw	r2, #5000	; 0x1388
 8003516:	4293      	cmp	r3, r2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e0b5      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800351e:	4b3e      	ldr	r3, [pc, #248]	; (8003618 <HAL_RCC_OscConfig+0x470>)
 8003520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1ee      	bne.n	8003508 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800352a:	7dfb      	ldrb	r3, [r7, #23]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d105      	bne.n	800353c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003530:	4b39      	ldr	r3, [pc, #228]	; (8003618 <HAL_RCC_OscConfig+0x470>)
 8003532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003534:	4a38      	ldr	r2, [pc, #224]	; (8003618 <HAL_RCC_OscConfig+0x470>)
 8003536:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800353a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 80a1 	beq.w	8003688 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003546:	4b34      	ldr	r3, [pc, #208]	; (8003618 <HAL_RCC_OscConfig+0x470>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 030c 	and.w	r3, r3, #12
 800354e:	2b08      	cmp	r3, #8
 8003550:	d05c      	beq.n	800360c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	2b02      	cmp	r3, #2
 8003558:	d141      	bne.n	80035de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800355a:	4b31      	ldr	r3, [pc, #196]	; (8003620 <HAL_RCC_OscConfig+0x478>)
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003560:	f7fd fd26 	bl	8000fb0 <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003568:	f7fd fd22 	bl	8000fb0 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e087      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800357a:	4b27      	ldr	r3, [pc, #156]	; (8003618 <HAL_RCC_OscConfig+0x470>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1f0      	bne.n	8003568 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	69da      	ldr	r2, [r3, #28]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003594:	019b      	lsls	r3, r3, #6
 8003596:	431a      	orrs	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359c:	085b      	lsrs	r3, r3, #1
 800359e:	3b01      	subs	r3, #1
 80035a0:	041b      	lsls	r3, r3, #16
 80035a2:	431a      	orrs	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a8:	061b      	lsls	r3, r3, #24
 80035aa:	491b      	ldr	r1, [pc, #108]	; (8003618 <HAL_RCC_OscConfig+0x470>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035b0:	4b1b      	ldr	r3, [pc, #108]	; (8003620 <HAL_RCC_OscConfig+0x478>)
 80035b2:	2201      	movs	r2, #1
 80035b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b6:	f7fd fcfb 	bl	8000fb0 <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035bc:	e008      	b.n	80035d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035be:	f7fd fcf7 	bl	8000fb0 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e05c      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035d0:	4b11      	ldr	r3, [pc, #68]	; (8003618 <HAL_RCC_OscConfig+0x470>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d0f0      	beq.n	80035be <HAL_RCC_OscConfig+0x416>
 80035dc:	e054      	b.n	8003688 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035de:	4b10      	ldr	r3, [pc, #64]	; (8003620 <HAL_RCC_OscConfig+0x478>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e4:	f7fd fce4 	bl	8000fb0 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035ec:	f7fd fce0 	bl	8000fb0 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e045      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035fe:	4b06      	ldr	r3, [pc, #24]	; (8003618 <HAL_RCC_OscConfig+0x470>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1f0      	bne.n	80035ec <HAL_RCC_OscConfig+0x444>
 800360a:	e03d      	b.n	8003688 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d107      	bne.n	8003624 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e038      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
 8003618:	40023800 	.word	0x40023800
 800361c:	40007000 	.word	0x40007000
 8003620:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003624:	4b1b      	ldr	r3, [pc, #108]	; (8003694 <HAL_RCC_OscConfig+0x4ec>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d028      	beq.n	8003684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800363c:	429a      	cmp	r2, r3
 800363e:	d121      	bne.n	8003684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800364a:	429a      	cmp	r2, r3
 800364c:	d11a      	bne.n	8003684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003654:	4013      	ands	r3, r2
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800365a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800365c:	4293      	cmp	r3, r2
 800365e:	d111      	bne.n	8003684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366a:	085b      	lsrs	r3, r3, #1
 800366c:	3b01      	subs	r3, #1
 800366e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003670:	429a      	cmp	r2, r3
 8003672:	d107      	bne.n	8003684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003680:	429a      	cmp	r2, r3
 8003682:	d001      	beq.n	8003688 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e000      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3718      	adds	r7, #24
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	40023800 	.word	0x40023800

08003698 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d101      	bne.n	80036ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e0cc      	b.n	8003846 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036ac:	4b68      	ldr	r3, [pc, #416]	; (8003850 <HAL_RCC_ClockConfig+0x1b8>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0307 	and.w	r3, r3, #7
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d90c      	bls.n	80036d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ba:	4b65      	ldr	r3, [pc, #404]	; (8003850 <HAL_RCC_ClockConfig+0x1b8>)
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	b2d2      	uxtb	r2, r2
 80036c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c2:	4b63      	ldr	r3, [pc, #396]	; (8003850 <HAL_RCC_ClockConfig+0x1b8>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d001      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e0b8      	b.n	8003846 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d020      	beq.n	8003722 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0304 	and.w	r3, r3, #4
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d005      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036ec:	4b59      	ldr	r3, [pc, #356]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	4a58      	ldr	r2, [pc, #352]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 80036f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0308 	and.w	r3, r3, #8
 8003700:	2b00      	cmp	r3, #0
 8003702:	d005      	beq.n	8003710 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003704:	4b53      	ldr	r3, [pc, #332]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	4a52      	ldr	r2, [pc, #328]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 800370a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800370e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003710:	4b50      	ldr	r3, [pc, #320]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	494d      	ldr	r1, [pc, #308]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 800371e:	4313      	orrs	r3, r2
 8003720:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	d044      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d107      	bne.n	8003746 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003736:	4b47      	ldr	r3, [pc, #284]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d119      	bne.n	8003776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e07f      	b.n	8003846 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2b02      	cmp	r3, #2
 800374c:	d003      	beq.n	8003756 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003752:	2b03      	cmp	r3, #3
 8003754:	d107      	bne.n	8003766 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003756:	4b3f      	ldr	r3, [pc, #252]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d109      	bne.n	8003776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e06f      	b.n	8003846 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003766:	4b3b      	ldr	r3, [pc, #236]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e067      	b.n	8003846 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003776:	4b37      	ldr	r3, [pc, #220]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f023 0203 	bic.w	r2, r3, #3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	4934      	ldr	r1, [pc, #208]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 8003784:	4313      	orrs	r3, r2
 8003786:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003788:	f7fd fc12 	bl	8000fb0 <HAL_GetTick>
 800378c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800378e:	e00a      	b.n	80037a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003790:	f7fd fc0e 	bl	8000fb0 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	f241 3288 	movw	r2, #5000	; 0x1388
 800379e:	4293      	cmp	r3, r2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e04f      	b.n	8003846 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a6:	4b2b      	ldr	r3, [pc, #172]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f003 020c 	and.w	r2, r3, #12
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d1eb      	bne.n	8003790 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037b8:	4b25      	ldr	r3, [pc, #148]	; (8003850 <HAL_RCC_ClockConfig+0x1b8>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0307 	and.w	r3, r3, #7
 80037c0:	683a      	ldr	r2, [r7, #0]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d20c      	bcs.n	80037e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037c6:	4b22      	ldr	r3, [pc, #136]	; (8003850 <HAL_RCC_ClockConfig+0x1b8>)
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	b2d2      	uxtb	r2, r2
 80037cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ce:	4b20      	ldr	r3, [pc, #128]	; (8003850 <HAL_RCC_ClockConfig+0x1b8>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0307 	and.w	r3, r3, #7
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d001      	beq.n	80037e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e032      	b.n	8003846 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d008      	beq.n	80037fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037ec:	4b19      	ldr	r3, [pc, #100]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	4916      	ldr	r1, [pc, #88]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0308 	and.w	r3, r3, #8
 8003806:	2b00      	cmp	r3, #0
 8003808:	d009      	beq.n	800381e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800380a:	4b12      	ldr	r3, [pc, #72]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	490e      	ldr	r1, [pc, #56]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 800381a:	4313      	orrs	r3, r2
 800381c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800381e:	f000 f821 	bl	8003864 <HAL_RCC_GetSysClockFreq>
 8003822:	4602      	mov	r2, r0
 8003824:	4b0b      	ldr	r3, [pc, #44]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	091b      	lsrs	r3, r3, #4
 800382a:	f003 030f 	and.w	r3, r3, #15
 800382e:	490a      	ldr	r1, [pc, #40]	; (8003858 <HAL_RCC_ClockConfig+0x1c0>)
 8003830:	5ccb      	ldrb	r3, [r1, r3]
 8003832:	fa22 f303 	lsr.w	r3, r2, r3
 8003836:	4a09      	ldr	r2, [pc, #36]	; (800385c <HAL_RCC_ClockConfig+0x1c4>)
 8003838:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800383a:	4b09      	ldr	r3, [pc, #36]	; (8003860 <HAL_RCC_ClockConfig+0x1c8>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4618      	mov	r0, r3
 8003840:	f7fd fb72 	bl	8000f28 <HAL_InitTick>

  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	40023c00 	.word	0x40023c00
 8003854:	40023800 	.word	0x40023800
 8003858:	080092f0 	.word	0x080092f0
 800385c:	20000000 	.word	0x20000000
 8003860:	20000004 	.word	0x20000004

08003864 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003868:	b094      	sub	sp, #80	; 0x50
 800386a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800386c:	2300      	movs	r3, #0
 800386e:	647b      	str	r3, [r7, #68]	; 0x44
 8003870:	2300      	movs	r3, #0
 8003872:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003874:	2300      	movs	r3, #0
 8003876:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003878:	2300      	movs	r3, #0
 800387a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800387c:	4b79      	ldr	r3, [pc, #484]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x200>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f003 030c 	and.w	r3, r3, #12
 8003884:	2b08      	cmp	r3, #8
 8003886:	d00d      	beq.n	80038a4 <HAL_RCC_GetSysClockFreq+0x40>
 8003888:	2b08      	cmp	r3, #8
 800388a:	f200 80e1 	bhi.w	8003a50 <HAL_RCC_GetSysClockFreq+0x1ec>
 800388e:	2b00      	cmp	r3, #0
 8003890:	d002      	beq.n	8003898 <HAL_RCC_GetSysClockFreq+0x34>
 8003892:	2b04      	cmp	r3, #4
 8003894:	d003      	beq.n	800389e <HAL_RCC_GetSysClockFreq+0x3a>
 8003896:	e0db      	b.n	8003a50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003898:	4b73      	ldr	r3, [pc, #460]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x204>)
 800389a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800389c:	e0db      	b.n	8003a56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800389e:	4b73      	ldr	r3, [pc, #460]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x208>)
 80038a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038a2:	e0d8      	b.n	8003a56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038a4:	4b6f      	ldr	r3, [pc, #444]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x200>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038ac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038ae:	4b6d      	ldr	r3, [pc, #436]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x200>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d063      	beq.n	8003982 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038ba:	4b6a      	ldr	r3, [pc, #424]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x200>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	099b      	lsrs	r3, r3, #6
 80038c0:	2200      	movs	r2, #0
 80038c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80038c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80038c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038cc:	633b      	str	r3, [r7, #48]	; 0x30
 80038ce:	2300      	movs	r3, #0
 80038d0:	637b      	str	r3, [r7, #52]	; 0x34
 80038d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80038d6:	4622      	mov	r2, r4
 80038d8:	462b      	mov	r3, r5
 80038da:	f04f 0000 	mov.w	r0, #0
 80038de:	f04f 0100 	mov.w	r1, #0
 80038e2:	0159      	lsls	r1, r3, #5
 80038e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038e8:	0150      	lsls	r0, r2, #5
 80038ea:	4602      	mov	r2, r0
 80038ec:	460b      	mov	r3, r1
 80038ee:	4621      	mov	r1, r4
 80038f0:	1a51      	subs	r1, r2, r1
 80038f2:	6139      	str	r1, [r7, #16]
 80038f4:	4629      	mov	r1, r5
 80038f6:	eb63 0301 	sbc.w	r3, r3, r1
 80038fa:	617b      	str	r3, [r7, #20]
 80038fc:	f04f 0200 	mov.w	r2, #0
 8003900:	f04f 0300 	mov.w	r3, #0
 8003904:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003908:	4659      	mov	r1, fp
 800390a:	018b      	lsls	r3, r1, #6
 800390c:	4651      	mov	r1, sl
 800390e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003912:	4651      	mov	r1, sl
 8003914:	018a      	lsls	r2, r1, #6
 8003916:	4651      	mov	r1, sl
 8003918:	ebb2 0801 	subs.w	r8, r2, r1
 800391c:	4659      	mov	r1, fp
 800391e:	eb63 0901 	sbc.w	r9, r3, r1
 8003922:	f04f 0200 	mov.w	r2, #0
 8003926:	f04f 0300 	mov.w	r3, #0
 800392a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800392e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003932:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003936:	4690      	mov	r8, r2
 8003938:	4699      	mov	r9, r3
 800393a:	4623      	mov	r3, r4
 800393c:	eb18 0303 	adds.w	r3, r8, r3
 8003940:	60bb      	str	r3, [r7, #8]
 8003942:	462b      	mov	r3, r5
 8003944:	eb49 0303 	adc.w	r3, r9, r3
 8003948:	60fb      	str	r3, [r7, #12]
 800394a:	f04f 0200 	mov.w	r2, #0
 800394e:	f04f 0300 	mov.w	r3, #0
 8003952:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003956:	4629      	mov	r1, r5
 8003958:	024b      	lsls	r3, r1, #9
 800395a:	4621      	mov	r1, r4
 800395c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003960:	4621      	mov	r1, r4
 8003962:	024a      	lsls	r2, r1, #9
 8003964:	4610      	mov	r0, r2
 8003966:	4619      	mov	r1, r3
 8003968:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800396a:	2200      	movs	r2, #0
 800396c:	62bb      	str	r3, [r7, #40]	; 0x28
 800396e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003970:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003974:	f7fc fc28 	bl	80001c8 <__aeabi_uldivmod>
 8003978:	4602      	mov	r2, r0
 800397a:	460b      	mov	r3, r1
 800397c:	4613      	mov	r3, r2
 800397e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003980:	e058      	b.n	8003a34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003982:	4b38      	ldr	r3, [pc, #224]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x200>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	099b      	lsrs	r3, r3, #6
 8003988:	2200      	movs	r2, #0
 800398a:	4618      	mov	r0, r3
 800398c:	4611      	mov	r1, r2
 800398e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003992:	623b      	str	r3, [r7, #32]
 8003994:	2300      	movs	r3, #0
 8003996:	627b      	str	r3, [r7, #36]	; 0x24
 8003998:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800399c:	4642      	mov	r2, r8
 800399e:	464b      	mov	r3, r9
 80039a0:	f04f 0000 	mov.w	r0, #0
 80039a4:	f04f 0100 	mov.w	r1, #0
 80039a8:	0159      	lsls	r1, r3, #5
 80039aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039ae:	0150      	lsls	r0, r2, #5
 80039b0:	4602      	mov	r2, r0
 80039b2:	460b      	mov	r3, r1
 80039b4:	4641      	mov	r1, r8
 80039b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80039ba:	4649      	mov	r1, r9
 80039bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80039c0:	f04f 0200 	mov.w	r2, #0
 80039c4:	f04f 0300 	mov.w	r3, #0
 80039c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80039cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80039d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80039d4:	ebb2 040a 	subs.w	r4, r2, sl
 80039d8:	eb63 050b 	sbc.w	r5, r3, fp
 80039dc:	f04f 0200 	mov.w	r2, #0
 80039e0:	f04f 0300 	mov.w	r3, #0
 80039e4:	00eb      	lsls	r3, r5, #3
 80039e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039ea:	00e2      	lsls	r2, r4, #3
 80039ec:	4614      	mov	r4, r2
 80039ee:	461d      	mov	r5, r3
 80039f0:	4643      	mov	r3, r8
 80039f2:	18e3      	adds	r3, r4, r3
 80039f4:	603b      	str	r3, [r7, #0]
 80039f6:	464b      	mov	r3, r9
 80039f8:	eb45 0303 	adc.w	r3, r5, r3
 80039fc:	607b      	str	r3, [r7, #4]
 80039fe:	f04f 0200 	mov.w	r2, #0
 8003a02:	f04f 0300 	mov.w	r3, #0
 8003a06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a0a:	4629      	mov	r1, r5
 8003a0c:	028b      	lsls	r3, r1, #10
 8003a0e:	4621      	mov	r1, r4
 8003a10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a14:	4621      	mov	r1, r4
 8003a16:	028a      	lsls	r2, r1, #10
 8003a18:	4610      	mov	r0, r2
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a1e:	2200      	movs	r2, #0
 8003a20:	61bb      	str	r3, [r7, #24]
 8003a22:	61fa      	str	r2, [r7, #28]
 8003a24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a28:	f7fc fbce 	bl	80001c8 <__aeabi_uldivmod>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	460b      	mov	r3, r1
 8003a30:	4613      	mov	r3, r2
 8003a32:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a34:	4b0b      	ldr	r3, [pc, #44]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	0c1b      	lsrs	r3, r3, #16
 8003a3a:	f003 0303 	and.w	r3, r3, #3
 8003a3e:	3301      	adds	r3, #1
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003a44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a4e:	e002      	b.n	8003a56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a50:	4b05      	ldr	r3, [pc, #20]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a52:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3750      	adds	r7, #80	; 0x50
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a62:	bf00      	nop
 8003a64:	40023800 	.word	0x40023800
 8003a68:	00f42400 	.word	0x00f42400
 8003a6c:	007a1200 	.word	0x007a1200

08003a70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a70:	b480      	push	{r7}
 8003a72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a74:	4b03      	ldr	r3, [pc, #12]	; (8003a84 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a76:	681b      	ldr	r3, [r3, #0]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	20000000 	.word	0x20000000

08003a88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e07b      	b.n	8003b92 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d108      	bne.n	8003ab4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003aaa:	d009      	beq.n	8003ac0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	61da      	str	r2, [r3, #28]
 8003ab2:	e005      	b.n	8003ac0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d106      	bne.n	8003ae0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7fd f8a4 	bl	8000c28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003af6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b12:	431a      	orrs	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	431a      	orrs	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	431a      	orrs	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b30:	431a      	orrs	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b44:	ea42 0103 	orr.w	r1, r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	430a      	orrs	r2, r1
 8003b56:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	0c1b      	lsrs	r3, r3, #16
 8003b5e:	f003 0104 	and.w	r1, r3, #4
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b66:	f003 0210 	and.w	r2, r3, #16
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	69da      	ldr	r2, [r3, #28]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b80:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
	...

08003b9c <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003baa:	2300      	movs	r3, #0
 8003bac:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d110      	bne.n	8003bd8 <HAL_SPI_Receive_DMA+0x3c>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bbe:	d10b      	bne.n	8003bd8 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2204      	movs	r2, #4
 8003bc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8003bc8:	88fb      	ldrh	r3, [r7, #6]
 8003bca:	68ba      	ldr	r2, [r7, #8]
 8003bcc:	68b9      	ldr	r1, [r7, #8]
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f000 f8ac 	bl	8003d2c <HAL_SPI_TransmitReceive_DMA>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	e09f      	b.n	8003d18 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d101      	bne.n	8003be6 <HAL_SPI_Receive_DMA+0x4a>
 8003be2:	2302      	movs	r3, #2
 8003be4:	e098      	b.n	8003d18 <HAL_SPI_Receive_DMA+0x17c>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d002      	beq.n	8003c00 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003bfe:	e086      	b.n	8003d0e <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d002      	beq.n	8003c0c <HAL_SPI_Receive_DMA+0x70>
 8003c06:	88fb      	ldrh	r3, [r7, #6]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d102      	bne.n	8003c12 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c10:	e07d      	b.n	8003d0e <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2204      	movs	r2, #4
 8003c16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	88fa      	ldrh	r2, [r7, #6]
 8003c2a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	88fa      	ldrh	r2, [r7, #6]
 8003c30:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c52:	d10f      	bne.n	8003c74 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c62:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c72:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c78:	4a29      	ldr	r2, [pc, #164]	; (8003d20 <HAL_SPI_Receive_DMA+0x184>)
 8003c7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c80:	4a28      	ldr	r2, [pc, #160]	; (8003d24 <HAL_SPI_Receive_DMA+0x188>)
 8003c82:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c88:	4a27      	ldr	r2, [pc, #156]	; (8003d28 <HAL_SPI_Receive_DMA+0x18c>)
 8003c8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c90:	2200      	movs	r2, #0
 8003c92:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	330c      	adds	r3, #12
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003caa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003cac:	f7fd fb70 	bl	8001390 <HAL_DMA_Start_IT>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00c      	beq.n	8003cd0 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cba:	f043 0210 	orr.w	r2, r3, #16
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003cce:	e01e      	b.n	8003d0e <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cda:	2b40      	cmp	r3, #64	; 0x40
 8003cdc:	d007      	beq.n	8003cee <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cec:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	685a      	ldr	r2, [r3, #4]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f042 0220 	orr.w	r2, r2, #32
 8003cfc:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	685a      	ldr	r2, [r3, #4]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f042 0201 	orr.w	r2, r2, #1
 8003d0c:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d16:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3718      	adds	r7, #24
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	080040cd 	.word	0x080040cd
 8003d24:	08003f95 	.word	0x08003f95
 8003d28:	08004105 	.word	0x08004105

08003d2c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b086      	sub	sp, #24
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
 8003d38:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d101      	bne.n	8003d4c <HAL_SPI_TransmitReceive_DMA+0x20>
 8003d48:	2302      	movs	r3, #2
 8003d4a:	e0e3      	b.n	8003f14 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d5a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003d62:	7dbb      	ldrb	r3, [r7, #22]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d00d      	beq.n	8003d84 <HAL_SPI_TransmitReceive_DMA+0x58>
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d6e:	d106      	bne.n	8003d7e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d102      	bne.n	8003d7e <HAL_SPI_TransmitReceive_DMA+0x52>
 8003d78:	7dbb      	ldrb	r3, [r7, #22]
 8003d7a:	2b04      	cmp	r3, #4
 8003d7c:	d002      	beq.n	8003d84 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8003d7e:	2302      	movs	r3, #2
 8003d80:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003d82:	e0c2      	b.n	8003f0a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d005      	beq.n	8003d96 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d002      	beq.n	8003d96 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003d90:	887b      	ldrh	r3, [r7, #2]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d102      	bne.n	8003d9c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003d9a:	e0b6      	b.n	8003f0a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b04      	cmp	r3, #4
 8003da6:	d003      	beq.n	8003db0 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2205      	movs	r2, #5
 8003dac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	68ba      	ldr	r2, [r7, #8]
 8003dba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	887a      	ldrh	r2, [r7, #2]
 8003dc0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	887a      	ldrh	r2, [r7, #2]
 8003dc6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	887a      	ldrh	r2, [r7, #2]
 8003dd2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	887a      	ldrh	r2, [r7, #2]
 8003dd8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b04      	cmp	r3, #4
 8003df0:	d108      	bne.n	8003e04 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003df6:	4a49      	ldr	r2, [pc, #292]	; (8003f1c <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8003df8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dfe:	4a48      	ldr	r2, [pc, #288]	; (8003f20 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8003e00:	63da      	str	r2, [r3, #60]	; 0x3c
 8003e02:	e007      	b.n	8003e14 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e08:	4a46      	ldr	r2, [pc, #280]	; (8003f24 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8003e0a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e10:	4a45      	ldr	r2, [pc, #276]	; (8003f28 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8003e12:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e18:	4a44      	ldr	r2, [pc, #272]	; (8003f2c <HAL_SPI_TransmitReceive_DMA+0x200>)
 8003e1a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e20:	2200      	movs	r2, #0
 8003e22:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	330c      	adds	r3, #12
 8003e2e:	4619      	mov	r1, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e34:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e3a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003e3c:	f7fd faa8 	bl	8001390 <HAL_DMA_Start_IT>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00c      	beq.n	8003e60 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4a:	f043 0210 	orr.w	r2, r3, #16
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003e5e:	e054      	b.n	8003f0a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	685a      	ldr	r2, [r3, #4]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f042 0201 	orr.w	r2, r2, #1
 8003e6e:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e74:	2200      	movs	r2, #0
 8003e76:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e84:	2200      	movs	r2, #0
 8003e86:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e98:	4619      	mov	r1, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	330c      	adds	r3, #12
 8003ea0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ea6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003ea8:	f7fd fa72 	bl	8001390 <HAL_DMA_Start_IT>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00c      	beq.n	8003ecc <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb6:	f043 0210 	orr.w	r2, r3, #16
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003eca:	e01e      	b.n	8003f0a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed6:	2b40      	cmp	r3, #64	; 0x40
 8003ed8:	d007      	beq.n	8003eea <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ee8:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f042 0220 	orr.w	r2, r2, #32
 8003ef8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	685a      	ldr	r2, [r3, #4]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f042 0202 	orr.w	r2, r2, #2
 8003f08:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3718      	adds	r7, #24
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	080040cd 	.word	0x080040cd
 8003f20:	08003f95 	.word	0x08003f95
 8003f24:	080040e9 	.word	0x080040e9
 8003f28:	0800403d 	.word	0x0800403d
 8003f2c:	08004105 	.word	0x08004105

08003f30 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa0:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fa2:	f7fd f805 	bl	8000fb0 <HAL_GetTick>
 8003fa6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fb6:	d03b      	beq.n	8004030 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f022 0220 	bic.w	r2, r2, #32
 8003fc6:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d10d      	bne.n	8003fec <SPI_DMAReceiveCplt+0x58>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fd8:	d108      	bne.n	8003fec <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	685a      	ldr	r2, [r3, #4]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 0203 	bic.w	r2, r2, #3
 8003fe8:	605a      	str	r2, [r3, #4]
 8003fea:	e007      	b.n	8003ffc <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f022 0201 	bic.w	r2, r2, #1
 8003ffa:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003ffc:	68ba      	ldr	r2, [r7, #8]
 8003ffe:	2164      	movs	r1, #100	; 0x64
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f000 f927 	bl	8004254 <SPI_EndRxTransaction>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d002      	beq.n	8004012 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2220      	movs	r2, #32
 8004010:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004024:	2b00      	cmp	r3, #0
 8004026:	d003      	beq.n	8004030 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f7ff ffa9 	bl	8003f80 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800402e:	e002      	b.n	8004036 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	f7ff ff7d 	bl	8003f30 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004036:	3710      	adds	r7, #16
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004048:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800404a:	f7fc ffb1 	bl	8000fb0 <HAL_GetTick>
 800404e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800405e:	d02f      	beq.n	80040c0 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 0220 	bic.w	r2, r2, #32
 800406e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004070:	68ba      	ldr	r2, [r7, #8]
 8004072:	2164      	movs	r1, #100	; 0x64
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f000 f953 	bl	8004320 <SPI_EndRxTxTransaction>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d005      	beq.n	800408c <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004084:	f043 0220 	orr.w	r2, r3, #32
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 0203 	bic.w	r2, r2, #3
 800409a:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d003      	beq.n	80040c0 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f7ff ff61 	bl	8003f80 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80040be:	e002      	b.n	80040c6 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f7ff ff3f 	bl	8003f44 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f7ff ff3c 	bl	8003f58 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80040e0:	bf00      	nop
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f7ff ff38 	bl	8003f6c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80040fc:	bf00      	nop
 80040fe:	3710      	adds	r7, #16
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004110:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 0203 	bic.w	r2, r2, #3
 8004120:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004126:	f043 0210 	orr.w	r2, r3, #16
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f7ff ff22 	bl	8003f80 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800413c:	bf00      	nop
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b088      	sub	sp, #32
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	603b      	str	r3, [r7, #0]
 8004150:	4613      	mov	r3, r2
 8004152:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004154:	f7fc ff2c 	bl	8000fb0 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415c:	1a9b      	subs	r3, r3, r2
 800415e:	683a      	ldr	r2, [r7, #0]
 8004160:	4413      	add	r3, r2
 8004162:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004164:	f7fc ff24 	bl	8000fb0 <HAL_GetTick>
 8004168:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800416a:	4b39      	ldr	r3, [pc, #228]	; (8004250 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	015b      	lsls	r3, r3, #5
 8004170:	0d1b      	lsrs	r3, r3, #20
 8004172:	69fa      	ldr	r2, [r7, #28]
 8004174:	fb02 f303 	mul.w	r3, r2, r3
 8004178:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800417a:	e054      	b.n	8004226 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004182:	d050      	beq.n	8004226 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004184:	f7fc ff14 	bl	8000fb0 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	69fa      	ldr	r2, [r7, #28]
 8004190:	429a      	cmp	r2, r3
 8004192:	d902      	bls.n	800419a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d13d      	bne.n	8004216 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80041a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041b2:	d111      	bne.n	80041d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041bc:	d004      	beq.n	80041c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041c6:	d107      	bne.n	80041d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041e0:	d10f      	bne.n	8004202 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041f0:	601a      	str	r2, [r3, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004200:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e017      	b.n	8004246 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d101      	bne.n	8004220 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800421c:	2300      	movs	r3, #0
 800421e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	3b01      	subs	r3, #1
 8004224:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	689a      	ldr	r2, [r3, #8]
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	4013      	ands	r3, r2
 8004230:	68ba      	ldr	r2, [r7, #8]
 8004232:	429a      	cmp	r2, r3
 8004234:	bf0c      	ite	eq
 8004236:	2301      	moveq	r3, #1
 8004238:	2300      	movne	r3, #0
 800423a:	b2db      	uxtb	r3, r3
 800423c:	461a      	mov	r2, r3
 800423e:	79fb      	ldrb	r3, [r7, #7]
 8004240:	429a      	cmp	r2, r3
 8004242:	d19b      	bne.n	800417c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3720      	adds	r7, #32
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	20000000 	.word	0x20000000

08004254 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af02      	add	r7, sp, #8
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004268:	d111      	bne.n	800428e <SPI_EndRxTransaction+0x3a>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004272:	d004      	beq.n	800427e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800427c:	d107      	bne.n	800428e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800428c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004296:	d12a      	bne.n	80042ee <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042a0:	d012      	beq.n	80042c8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	2200      	movs	r2, #0
 80042aa:	2180      	movs	r1, #128	; 0x80
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f7ff ff49 	bl	8004144 <SPI_WaitFlagStateUntilTimeout>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d02d      	beq.n	8004314 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042bc:	f043 0220 	orr.w	r2, r3, #32
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e026      	b.n	8004316 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	9300      	str	r3, [sp, #0]
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	2200      	movs	r2, #0
 80042d0:	2101      	movs	r1, #1
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f7ff ff36 	bl	8004144 <SPI_WaitFlagStateUntilTimeout>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d01a      	beq.n	8004314 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e2:	f043 0220 	orr.w	r2, r3, #32
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e013      	b.n	8004316 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	2200      	movs	r2, #0
 80042f6:	2101      	movs	r1, #1
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f7ff ff23 	bl	8004144 <SPI_WaitFlagStateUntilTimeout>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d007      	beq.n	8004314 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004308:	f043 0220 	orr.w	r2, r3, #32
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e000      	b.n	8004316 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3710      	adds	r7, #16
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
	...

08004320 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b088      	sub	sp, #32
 8004324:	af02      	add	r7, sp, #8
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800432c:	4b1b      	ldr	r3, [pc, #108]	; (800439c <SPI_EndRxTxTransaction+0x7c>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a1b      	ldr	r2, [pc, #108]	; (80043a0 <SPI_EndRxTxTransaction+0x80>)
 8004332:	fba2 2303 	umull	r2, r3, r2, r3
 8004336:	0d5b      	lsrs	r3, r3, #21
 8004338:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800433c:	fb02 f303 	mul.w	r3, r2, r3
 8004340:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800434a:	d112      	bne.n	8004372 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	9300      	str	r3, [sp, #0]
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	2200      	movs	r2, #0
 8004354:	2180      	movs	r1, #128	; 0x80
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f7ff fef4 	bl	8004144 <SPI_WaitFlagStateUntilTimeout>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d016      	beq.n	8004390 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004366:	f043 0220 	orr.w	r2, r3, #32
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e00f      	b.n	8004392 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00a      	beq.n	800438e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	3b01      	subs	r3, #1
 800437c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004388:	2b80      	cmp	r3, #128	; 0x80
 800438a:	d0f2      	beq.n	8004372 <SPI_EndRxTxTransaction+0x52>
 800438c:	e000      	b.n	8004390 <SPI_EndRxTxTransaction+0x70>
        break;
 800438e:	bf00      	nop
  }

  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3718      	adds	r7, #24
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	20000000 	.word	0x20000000
 80043a0:	165e9f81 	.word	0x165e9f81

080043a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e041      	b.n	800443a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d106      	bne.n	80043d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f7fc fcb8 	bl	8000d40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2202      	movs	r2, #2
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	3304      	adds	r3, #4
 80043e0:	4619      	mov	r1, r3
 80043e2:	4610      	mov	r0, r2
 80043e4:	f000 fad8 	bl	8004998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3708      	adds	r7, #8
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b082      	sub	sp, #8
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d101      	bne.n	8004454 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e041      	b.n	80044d8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b00      	cmp	r3, #0
 800445e:	d106      	bne.n	800446e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 f839 	bl	80044e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2202      	movs	r2, #2
 8004472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	3304      	adds	r3, #4
 800447e:	4619      	mov	r1, r3
 8004480:	4610      	mov	r0, r2
 8004482:	f000 fa89 	bl	8004998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2201      	movs	r2, #1
 8004492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2201      	movs	r2, #1
 80044a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3708      	adds	r7, #8
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d109      	bne.n	8004518 <HAL_TIM_PWM_Start+0x24>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b01      	cmp	r3, #1
 800450e:	bf14      	ite	ne
 8004510:	2301      	movne	r3, #1
 8004512:	2300      	moveq	r3, #0
 8004514:	b2db      	uxtb	r3, r3
 8004516:	e022      	b.n	800455e <HAL_TIM_PWM_Start+0x6a>
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	2b04      	cmp	r3, #4
 800451c:	d109      	bne.n	8004532 <HAL_TIM_PWM_Start+0x3e>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b01      	cmp	r3, #1
 8004528:	bf14      	ite	ne
 800452a:	2301      	movne	r3, #1
 800452c:	2300      	moveq	r3, #0
 800452e:	b2db      	uxtb	r3, r3
 8004530:	e015      	b.n	800455e <HAL_TIM_PWM_Start+0x6a>
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	2b08      	cmp	r3, #8
 8004536:	d109      	bne.n	800454c <HAL_TIM_PWM_Start+0x58>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800453e:	b2db      	uxtb	r3, r3
 8004540:	2b01      	cmp	r3, #1
 8004542:	bf14      	ite	ne
 8004544:	2301      	movne	r3, #1
 8004546:	2300      	moveq	r3, #0
 8004548:	b2db      	uxtb	r3, r3
 800454a:	e008      	b.n	800455e <HAL_TIM_PWM_Start+0x6a>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004552:	b2db      	uxtb	r3, r3
 8004554:	2b01      	cmp	r3, #1
 8004556:	bf14      	ite	ne
 8004558:	2301      	movne	r3, #1
 800455a:	2300      	moveq	r3, #0
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e07c      	b.n	8004660 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d104      	bne.n	8004576 <HAL_TIM_PWM_Start+0x82>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2202      	movs	r2, #2
 8004570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004574:	e013      	b.n	800459e <HAL_TIM_PWM_Start+0xaa>
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	2b04      	cmp	r3, #4
 800457a:	d104      	bne.n	8004586 <HAL_TIM_PWM_Start+0x92>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2202      	movs	r2, #2
 8004580:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004584:	e00b      	b.n	800459e <HAL_TIM_PWM_Start+0xaa>
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	2b08      	cmp	r3, #8
 800458a:	d104      	bne.n	8004596 <HAL_TIM_PWM_Start+0xa2>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2202      	movs	r2, #2
 8004590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004594:	e003      	b.n	800459e <HAL_TIM_PWM_Start+0xaa>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2202      	movs	r2, #2
 800459a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2201      	movs	r2, #1
 80045a4:	6839      	ldr	r1, [r7, #0]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 fce0 	bl	8004f6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a2d      	ldr	r2, [pc, #180]	; (8004668 <HAL_TIM_PWM_Start+0x174>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d004      	beq.n	80045c0 <HAL_TIM_PWM_Start+0xcc>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a2c      	ldr	r2, [pc, #176]	; (800466c <HAL_TIM_PWM_Start+0x178>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d101      	bne.n	80045c4 <HAL_TIM_PWM_Start+0xd0>
 80045c0:	2301      	movs	r3, #1
 80045c2:	e000      	b.n	80045c6 <HAL_TIM_PWM_Start+0xd2>
 80045c4:	2300      	movs	r3, #0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d007      	beq.n	80045da <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a22      	ldr	r2, [pc, #136]	; (8004668 <HAL_TIM_PWM_Start+0x174>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d022      	beq.n	800462a <HAL_TIM_PWM_Start+0x136>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ec:	d01d      	beq.n	800462a <HAL_TIM_PWM_Start+0x136>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a1f      	ldr	r2, [pc, #124]	; (8004670 <HAL_TIM_PWM_Start+0x17c>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d018      	beq.n	800462a <HAL_TIM_PWM_Start+0x136>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a1d      	ldr	r2, [pc, #116]	; (8004674 <HAL_TIM_PWM_Start+0x180>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d013      	beq.n	800462a <HAL_TIM_PWM_Start+0x136>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a1c      	ldr	r2, [pc, #112]	; (8004678 <HAL_TIM_PWM_Start+0x184>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d00e      	beq.n	800462a <HAL_TIM_PWM_Start+0x136>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a16      	ldr	r2, [pc, #88]	; (800466c <HAL_TIM_PWM_Start+0x178>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d009      	beq.n	800462a <HAL_TIM_PWM_Start+0x136>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a18      	ldr	r2, [pc, #96]	; (800467c <HAL_TIM_PWM_Start+0x188>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d004      	beq.n	800462a <HAL_TIM_PWM_Start+0x136>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a16      	ldr	r2, [pc, #88]	; (8004680 <HAL_TIM_PWM_Start+0x18c>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d111      	bne.n	800464e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f003 0307 	and.w	r3, r3, #7
 8004634:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2b06      	cmp	r3, #6
 800463a:	d010      	beq.n	800465e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f042 0201 	orr.w	r2, r2, #1
 800464a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800464c:	e007      	b.n	800465e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f042 0201 	orr.w	r2, r2, #1
 800465c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	40010000 	.word	0x40010000
 800466c:	40010400 	.word	0x40010400
 8004670:	40000400 	.word	0x40000400
 8004674:	40000800 	.word	0x40000800
 8004678:	40000c00 	.word	0x40000c00
 800467c:	40014000 	.word	0x40014000
 8004680:	40001800 	.word	0x40001800

08004684 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004690:	2300      	movs	r3, #0
 8004692:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800469a:	2b01      	cmp	r3, #1
 800469c:	d101      	bne.n	80046a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800469e:	2302      	movs	r3, #2
 80046a0:	e0ae      	b.n	8004800 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2b0c      	cmp	r3, #12
 80046ae:	f200 809f 	bhi.w	80047f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80046b2:	a201      	add	r2, pc, #4	; (adr r2, 80046b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b8:	080046ed 	.word	0x080046ed
 80046bc:	080047f1 	.word	0x080047f1
 80046c0:	080047f1 	.word	0x080047f1
 80046c4:	080047f1 	.word	0x080047f1
 80046c8:	0800472d 	.word	0x0800472d
 80046cc:	080047f1 	.word	0x080047f1
 80046d0:	080047f1 	.word	0x080047f1
 80046d4:	080047f1 	.word	0x080047f1
 80046d8:	0800476f 	.word	0x0800476f
 80046dc:	080047f1 	.word	0x080047f1
 80046e0:	080047f1 	.word	0x080047f1
 80046e4:	080047f1 	.word	0x080047f1
 80046e8:	080047af 	.word	0x080047af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68b9      	ldr	r1, [r7, #8]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f000 f9f0 	bl	8004ad8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	699a      	ldr	r2, [r3, #24]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 0208 	orr.w	r2, r2, #8
 8004706:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	699a      	ldr	r2, [r3, #24]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f022 0204 	bic.w	r2, r2, #4
 8004716:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6999      	ldr	r1, [r3, #24]
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	691a      	ldr	r2, [r3, #16]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	430a      	orrs	r2, r1
 8004728:	619a      	str	r2, [r3, #24]
      break;
 800472a:	e064      	b.n	80047f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68b9      	ldr	r1, [r7, #8]
 8004732:	4618      	mov	r0, r3
 8004734:	f000 fa40 	bl	8004bb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	699a      	ldr	r2, [r3, #24]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004746:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	699a      	ldr	r2, [r3, #24]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004756:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6999      	ldr	r1, [r3, #24]
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	021a      	lsls	r2, r3, #8
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	430a      	orrs	r2, r1
 800476a:	619a      	str	r2, [r3, #24]
      break;
 800476c:	e043      	b.n	80047f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68b9      	ldr	r1, [r7, #8]
 8004774:	4618      	mov	r0, r3
 8004776:	f000 fa95 	bl	8004ca4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	69da      	ldr	r2, [r3, #28]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f042 0208 	orr.w	r2, r2, #8
 8004788:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	69da      	ldr	r2, [r3, #28]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f022 0204 	bic.w	r2, r2, #4
 8004798:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	69d9      	ldr	r1, [r3, #28]
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	691a      	ldr	r2, [r3, #16]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	61da      	str	r2, [r3, #28]
      break;
 80047ac:	e023      	b.n	80047f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68b9      	ldr	r1, [r7, #8]
 80047b4:	4618      	mov	r0, r3
 80047b6:	f000 fae9 	bl	8004d8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	69da      	ldr	r2, [r3, #28]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	69da      	ldr	r2, [r3, #28]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	69d9      	ldr	r1, [r3, #28]
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	021a      	lsls	r2, r3, #8
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	61da      	str	r2, [r3, #28]
      break;
 80047ee:	e002      	b.n	80047f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	75fb      	strb	r3, [r7, #23]
      break;
 80047f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004800:	4618      	mov	r0, r3
 8004802:	3718      	adds	r7, #24
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004812:	2300      	movs	r3, #0
 8004814:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800481c:	2b01      	cmp	r3, #1
 800481e:	d101      	bne.n	8004824 <HAL_TIM_ConfigClockSource+0x1c>
 8004820:	2302      	movs	r3, #2
 8004822:	e0b4      	b.n	800498e <HAL_TIM_ConfigClockSource+0x186>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2202      	movs	r2, #2
 8004830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004842:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800484a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800485c:	d03e      	beq.n	80048dc <HAL_TIM_ConfigClockSource+0xd4>
 800485e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004862:	f200 8087 	bhi.w	8004974 <HAL_TIM_ConfigClockSource+0x16c>
 8004866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800486a:	f000 8086 	beq.w	800497a <HAL_TIM_ConfigClockSource+0x172>
 800486e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004872:	d87f      	bhi.n	8004974 <HAL_TIM_ConfigClockSource+0x16c>
 8004874:	2b70      	cmp	r3, #112	; 0x70
 8004876:	d01a      	beq.n	80048ae <HAL_TIM_ConfigClockSource+0xa6>
 8004878:	2b70      	cmp	r3, #112	; 0x70
 800487a:	d87b      	bhi.n	8004974 <HAL_TIM_ConfigClockSource+0x16c>
 800487c:	2b60      	cmp	r3, #96	; 0x60
 800487e:	d050      	beq.n	8004922 <HAL_TIM_ConfigClockSource+0x11a>
 8004880:	2b60      	cmp	r3, #96	; 0x60
 8004882:	d877      	bhi.n	8004974 <HAL_TIM_ConfigClockSource+0x16c>
 8004884:	2b50      	cmp	r3, #80	; 0x50
 8004886:	d03c      	beq.n	8004902 <HAL_TIM_ConfigClockSource+0xfa>
 8004888:	2b50      	cmp	r3, #80	; 0x50
 800488a:	d873      	bhi.n	8004974 <HAL_TIM_ConfigClockSource+0x16c>
 800488c:	2b40      	cmp	r3, #64	; 0x40
 800488e:	d058      	beq.n	8004942 <HAL_TIM_ConfigClockSource+0x13a>
 8004890:	2b40      	cmp	r3, #64	; 0x40
 8004892:	d86f      	bhi.n	8004974 <HAL_TIM_ConfigClockSource+0x16c>
 8004894:	2b30      	cmp	r3, #48	; 0x30
 8004896:	d064      	beq.n	8004962 <HAL_TIM_ConfigClockSource+0x15a>
 8004898:	2b30      	cmp	r3, #48	; 0x30
 800489a:	d86b      	bhi.n	8004974 <HAL_TIM_ConfigClockSource+0x16c>
 800489c:	2b20      	cmp	r3, #32
 800489e:	d060      	beq.n	8004962 <HAL_TIM_ConfigClockSource+0x15a>
 80048a0:	2b20      	cmp	r3, #32
 80048a2:	d867      	bhi.n	8004974 <HAL_TIM_ConfigClockSource+0x16c>
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d05c      	beq.n	8004962 <HAL_TIM_ConfigClockSource+0x15a>
 80048a8:	2b10      	cmp	r3, #16
 80048aa:	d05a      	beq.n	8004962 <HAL_TIM_ConfigClockSource+0x15a>
 80048ac:	e062      	b.n	8004974 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6818      	ldr	r0, [r3, #0]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	6899      	ldr	r1, [r3, #8]
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	685a      	ldr	r2, [r3, #4]
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	f000 fb35 	bl	8004f2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80048d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	609a      	str	r2, [r3, #8]
      break;
 80048da:	e04f      	b.n	800497c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6818      	ldr	r0, [r3, #0]
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	6899      	ldr	r1, [r3, #8]
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	f000 fb1e 	bl	8004f2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689a      	ldr	r2, [r3, #8]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048fe:	609a      	str	r2, [r3, #8]
      break;
 8004900:	e03c      	b.n	800497c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6818      	ldr	r0, [r3, #0]
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	6859      	ldr	r1, [r3, #4]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	461a      	mov	r2, r3
 8004910:	f000 fa92 	bl	8004e38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2150      	movs	r1, #80	; 0x50
 800491a:	4618      	mov	r0, r3
 800491c:	f000 faeb 	bl	8004ef6 <TIM_ITRx_SetConfig>
      break;
 8004920:	e02c      	b.n	800497c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6818      	ldr	r0, [r3, #0]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	6859      	ldr	r1, [r3, #4]
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	461a      	mov	r2, r3
 8004930:	f000 fab1 	bl	8004e96 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2160      	movs	r1, #96	; 0x60
 800493a:	4618      	mov	r0, r3
 800493c:	f000 fadb 	bl	8004ef6 <TIM_ITRx_SetConfig>
      break;
 8004940:	e01c      	b.n	800497c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6818      	ldr	r0, [r3, #0]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	6859      	ldr	r1, [r3, #4]
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	461a      	mov	r2, r3
 8004950:	f000 fa72 	bl	8004e38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2140      	movs	r1, #64	; 0x40
 800495a:	4618      	mov	r0, r3
 800495c:	f000 facb 	bl	8004ef6 <TIM_ITRx_SetConfig>
      break;
 8004960:	e00c      	b.n	800497c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4619      	mov	r1, r3
 800496c:	4610      	mov	r0, r2
 800496e:	f000 fac2 	bl	8004ef6 <TIM_ITRx_SetConfig>
      break;
 8004972:	e003      	b.n	800497c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	73fb      	strb	r3, [r7, #15]
      break;
 8004978:	e000      	b.n	800497c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800497a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800498c:	7bfb      	ldrb	r3, [r7, #15]
}
 800498e:	4618      	mov	r0, r3
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
	...

08004998 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a40      	ldr	r2, [pc, #256]	; (8004aac <TIM_Base_SetConfig+0x114>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d013      	beq.n	80049d8 <TIM_Base_SetConfig+0x40>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049b6:	d00f      	beq.n	80049d8 <TIM_Base_SetConfig+0x40>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a3d      	ldr	r2, [pc, #244]	; (8004ab0 <TIM_Base_SetConfig+0x118>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d00b      	beq.n	80049d8 <TIM_Base_SetConfig+0x40>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a3c      	ldr	r2, [pc, #240]	; (8004ab4 <TIM_Base_SetConfig+0x11c>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d007      	beq.n	80049d8 <TIM_Base_SetConfig+0x40>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a3b      	ldr	r2, [pc, #236]	; (8004ab8 <TIM_Base_SetConfig+0x120>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d003      	beq.n	80049d8 <TIM_Base_SetConfig+0x40>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a3a      	ldr	r2, [pc, #232]	; (8004abc <TIM_Base_SetConfig+0x124>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d108      	bne.n	80049ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a2f      	ldr	r2, [pc, #188]	; (8004aac <TIM_Base_SetConfig+0x114>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d02b      	beq.n	8004a4a <TIM_Base_SetConfig+0xb2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049f8:	d027      	beq.n	8004a4a <TIM_Base_SetConfig+0xb2>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a2c      	ldr	r2, [pc, #176]	; (8004ab0 <TIM_Base_SetConfig+0x118>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d023      	beq.n	8004a4a <TIM_Base_SetConfig+0xb2>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a2b      	ldr	r2, [pc, #172]	; (8004ab4 <TIM_Base_SetConfig+0x11c>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d01f      	beq.n	8004a4a <TIM_Base_SetConfig+0xb2>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a2a      	ldr	r2, [pc, #168]	; (8004ab8 <TIM_Base_SetConfig+0x120>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d01b      	beq.n	8004a4a <TIM_Base_SetConfig+0xb2>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a29      	ldr	r2, [pc, #164]	; (8004abc <TIM_Base_SetConfig+0x124>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d017      	beq.n	8004a4a <TIM_Base_SetConfig+0xb2>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a28      	ldr	r2, [pc, #160]	; (8004ac0 <TIM_Base_SetConfig+0x128>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d013      	beq.n	8004a4a <TIM_Base_SetConfig+0xb2>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a27      	ldr	r2, [pc, #156]	; (8004ac4 <TIM_Base_SetConfig+0x12c>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d00f      	beq.n	8004a4a <TIM_Base_SetConfig+0xb2>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a26      	ldr	r2, [pc, #152]	; (8004ac8 <TIM_Base_SetConfig+0x130>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d00b      	beq.n	8004a4a <TIM_Base_SetConfig+0xb2>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a25      	ldr	r2, [pc, #148]	; (8004acc <TIM_Base_SetConfig+0x134>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d007      	beq.n	8004a4a <TIM_Base_SetConfig+0xb2>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a24      	ldr	r2, [pc, #144]	; (8004ad0 <TIM_Base_SetConfig+0x138>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d003      	beq.n	8004a4a <TIM_Base_SetConfig+0xb2>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a23      	ldr	r2, [pc, #140]	; (8004ad4 <TIM_Base_SetConfig+0x13c>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d108      	bne.n	8004a5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	689a      	ldr	r2, [r3, #8]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a0a      	ldr	r2, [pc, #40]	; (8004aac <TIM_Base_SetConfig+0x114>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d003      	beq.n	8004a90 <TIM_Base_SetConfig+0xf8>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a0c      	ldr	r2, [pc, #48]	; (8004abc <TIM_Base_SetConfig+0x124>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d103      	bne.n	8004a98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	691a      	ldr	r2, [r3, #16]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	615a      	str	r2, [r3, #20]
}
 8004a9e:	bf00      	nop
 8004aa0:	3714      	adds	r7, #20
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	40010000 	.word	0x40010000
 8004ab0:	40000400 	.word	0x40000400
 8004ab4:	40000800 	.word	0x40000800
 8004ab8:	40000c00 	.word	0x40000c00
 8004abc:	40010400 	.word	0x40010400
 8004ac0:	40014000 	.word	0x40014000
 8004ac4:	40014400 	.word	0x40014400
 8004ac8:	40014800 	.word	0x40014800
 8004acc:	40001800 	.word	0x40001800
 8004ad0:	40001c00 	.word	0x40001c00
 8004ad4:	40002000 	.word	0x40002000

08004ad8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	f023 0201 	bic.w	r2, r3, #1
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f023 0303 	bic.w	r3, r3, #3
 8004b0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	f023 0302 	bic.w	r3, r3, #2
 8004b20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a20      	ldr	r2, [pc, #128]	; (8004bb0 <TIM_OC1_SetConfig+0xd8>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d003      	beq.n	8004b3c <TIM_OC1_SetConfig+0x64>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a1f      	ldr	r2, [pc, #124]	; (8004bb4 <TIM_OC1_SetConfig+0xdc>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d10c      	bne.n	8004b56 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	f023 0308 	bic.w	r3, r3, #8
 8004b42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	697a      	ldr	r2, [r7, #20]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f023 0304 	bic.w	r3, r3, #4
 8004b54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a15      	ldr	r2, [pc, #84]	; (8004bb0 <TIM_OC1_SetConfig+0xd8>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d003      	beq.n	8004b66 <TIM_OC1_SetConfig+0x8e>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a14      	ldr	r2, [pc, #80]	; (8004bb4 <TIM_OC1_SetConfig+0xdc>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d111      	bne.n	8004b8a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	693a      	ldr	r2, [r7, #16]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	685a      	ldr	r2, [r3, #4]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	697a      	ldr	r2, [r7, #20]
 8004ba2:	621a      	str	r2, [r3, #32]
}
 8004ba4:	bf00      	nop
 8004ba6:	371c      	adds	r7, #28
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr
 8004bb0:	40010000 	.word	0x40010000
 8004bb4:	40010400 	.word	0x40010400

08004bb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b087      	sub	sp, #28
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	f023 0210 	bic.w	r2, r3, #16
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	021b      	lsls	r3, r3, #8
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	f023 0320 	bic.w	r3, r3, #32
 8004c02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	011b      	lsls	r3, r3, #4
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a22      	ldr	r2, [pc, #136]	; (8004c9c <TIM_OC2_SetConfig+0xe4>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d003      	beq.n	8004c20 <TIM_OC2_SetConfig+0x68>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a21      	ldr	r2, [pc, #132]	; (8004ca0 <TIM_OC2_SetConfig+0xe8>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d10d      	bne.n	8004c3c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	011b      	lsls	r3, r3, #4
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a17      	ldr	r2, [pc, #92]	; (8004c9c <TIM_OC2_SetConfig+0xe4>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d003      	beq.n	8004c4c <TIM_OC2_SetConfig+0x94>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a16      	ldr	r2, [pc, #88]	; (8004ca0 <TIM_OC2_SetConfig+0xe8>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d113      	bne.n	8004c74 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	695b      	ldr	r3, [r3, #20]
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	693a      	ldr	r2, [r7, #16]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	697a      	ldr	r2, [r7, #20]
 8004c8c:	621a      	str	r2, [r3, #32]
}
 8004c8e:	bf00      	nop
 8004c90:	371c      	adds	r7, #28
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	40010000 	.word	0x40010000
 8004ca0:	40010400 	.word	0x40010400

08004ca4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b087      	sub	sp, #28
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	69db      	ldr	r3, [r3, #28]
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f023 0303 	bic.w	r3, r3, #3
 8004cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004cec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	021b      	lsls	r3, r3, #8
 8004cf4:	697a      	ldr	r2, [r7, #20]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a21      	ldr	r2, [pc, #132]	; (8004d84 <TIM_OC3_SetConfig+0xe0>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d003      	beq.n	8004d0a <TIM_OC3_SetConfig+0x66>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a20      	ldr	r2, [pc, #128]	; (8004d88 <TIM_OC3_SetConfig+0xe4>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d10d      	bne.n	8004d26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	021b      	lsls	r3, r3, #8
 8004d18:	697a      	ldr	r2, [r7, #20]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a16      	ldr	r2, [pc, #88]	; (8004d84 <TIM_OC3_SetConfig+0xe0>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d003      	beq.n	8004d36 <TIM_OC3_SetConfig+0x92>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a15      	ldr	r2, [pc, #84]	; (8004d88 <TIM_OC3_SetConfig+0xe4>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d113      	bne.n	8004d5e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	011b      	lsls	r3, r3, #4
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	011b      	lsls	r3, r3, #4
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	685a      	ldr	r2, [r3, #4]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	697a      	ldr	r2, [r7, #20]
 8004d76:	621a      	str	r2, [r3, #32]
}
 8004d78:	bf00      	nop
 8004d7a:	371c      	adds	r7, #28
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr
 8004d84:	40010000 	.word	0x40010000
 8004d88:	40010400 	.word	0x40010400

08004d8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b087      	sub	sp, #28
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a1b      	ldr	r3, [r3, #32]
 8004da6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	69db      	ldr	r3, [r3, #28]
 8004db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	021b      	lsls	r3, r3, #8
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004dd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	031b      	lsls	r3, r3, #12
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a12      	ldr	r2, [pc, #72]	; (8004e30 <TIM_OC4_SetConfig+0xa4>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d003      	beq.n	8004df4 <TIM_OC4_SetConfig+0x68>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a11      	ldr	r2, [pc, #68]	; (8004e34 <TIM_OC4_SetConfig+0xa8>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d109      	bne.n	8004e08 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	695b      	ldr	r3, [r3, #20]
 8004e00:	019b      	lsls	r3, r3, #6
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	697a      	ldr	r2, [r7, #20]
 8004e0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	685a      	ldr	r2, [r3, #4]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	693a      	ldr	r2, [r7, #16]
 8004e20:	621a      	str	r2, [r3, #32]
}
 8004e22:	bf00      	nop
 8004e24:	371c      	adds	r7, #28
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	40010000 	.word	0x40010000
 8004e34:	40010400 	.word	0x40010400

08004e38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b087      	sub	sp, #28
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6a1b      	ldr	r3, [r3, #32]
 8004e48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	f023 0201 	bic.w	r2, r3, #1
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	011b      	lsls	r3, r3, #4
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f023 030a 	bic.w	r3, r3, #10
 8004e74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	621a      	str	r2, [r3, #32]
}
 8004e8a:	bf00      	nop
 8004e8c:	371c      	adds	r7, #28
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr

08004e96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e96:	b480      	push	{r7}
 8004e98:	b087      	sub	sp, #28
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	60f8      	str	r0, [r7, #12]
 8004e9e:	60b9      	str	r1, [r7, #8]
 8004ea0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	f023 0210 	bic.w	r2, r3, #16
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6a1b      	ldr	r3, [r3, #32]
 8004eb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ec0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	031b      	lsls	r3, r3, #12
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ed2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	011b      	lsls	r3, r3, #4
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	621a      	str	r2, [r3, #32]
}
 8004eea:	bf00      	nop
 8004eec:	371c      	adds	r7, #28
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr

08004ef6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	b085      	sub	sp, #20
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
 8004efe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f0e:	683a      	ldr	r2, [r7, #0]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	f043 0307 	orr.w	r3, r3, #7
 8004f18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	609a      	str	r2, [r3, #8]
}
 8004f20:	bf00      	nop
 8004f22:	3714      	adds	r7, #20
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b087      	sub	sp, #28
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	607a      	str	r2, [r7, #4]
 8004f38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	021a      	lsls	r2, r3, #8
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	431a      	orrs	r2, r3
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	697a      	ldr	r2, [r7, #20]
 8004f5e:	609a      	str	r2, [r3, #8]
}
 8004f60:	bf00      	nop
 8004f62:	371c      	adds	r7, #28
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b087      	sub	sp, #28
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	f003 031f 	and.w	r3, r3, #31
 8004f7e:	2201      	movs	r2, #1
 8004f80:	fa02 f303 	lsl.w	r3, r2, r3
 8004f84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6a1a      	ldr	r2, [r3, #32]
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	43db      	mvns	r3, r3
 8004f8e:	401a      	ands	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6a1a      	ldr	r2, [r3, #32]
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	f003 031f 	and.w	r3, r3, #31
 8004f9e:	6879      	ldr	r1, [r7, #4]
 8004fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa4:	431a      	orrs	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	621a      	str	r2, [r3, #32]
}
 8004faa:	bf00      	nop
 8004fac:	371c      	adds	r7, #28
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
	...

08004fb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d101      	bne.n	8004fd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fcc:	2302      	movs	r3, #2
 8004fce:	e05a      	b.n	8005086 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2202      	movs	r2, #2
 8004fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a21      	ldr	r2, [pc, #132]	; (8005094 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d022      	beq.n	800505a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800501c:	d01d      	beq.n	800505a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a1d      	ldr	r2, [pc, #116]	; (8005098 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d018      	beq.n	800505a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a1b      	ldr	r2, [pc, #108]	; (800509c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d013      	beq.n	800505a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a1a      	ldr	r2, [pc, #104]	; (80050a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d00e      	beq.n	800505a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a18      	ldr	r2, [pc, #96]	; (80050a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d009      	beq.n	800505a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a17      	ldr	r2, [pc, #92]	; (80050a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d004      	beq.n	800505a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a15      	ldr	r2, [pc, #84]	; (80050ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d10c      	bne.n	8005074 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005060:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	68ba      	ldr	r2, [r7, #8]
 8005068:	4313      	orrs	r3, r2
 800506a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68ba      	ldr	r2, [r7, #8]
 8005072:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	40010000 	.word	0x40010000
 8005098:	40000400 	.word	0x40000400
 800509c:	40000800 	.word	0x40000800
 80050a0:	40000c00 	.word	0x40000c00
 80050a4:	40010400 	.word	0x40010400
 80050a8:	40014000 	.word	0x40014000
 80050ac:	40001800 	.word	0x40001800

080050b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050b0:	b084      	sub	sp, #16
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b084      	sub	sp, #16
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
 80050ba:	f107 001c 	add.w	r0, r7, #28
 80050be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d122      	bne.n	800510e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80050dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80050f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d105      	bne.n	8005102 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f001 fbee 	bl	80068e4 <USB_CoreReset>
 8005108:	4603      	mov	r3, r0
 800510a:	73fb      	strb	r3, [r7, #15]
 800510c:	e01a      	b.n	8005144 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f001 fbe2 	bl	80068e4 <USB_CoreReset>
 8005120:	4603      	mov	r3, r0
 8005122:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005126:	2b00      	cmp	r3, #0
 8005128:	d106      	bne.n	8005138 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	639a      	str	r2, [r3, #56]	; 0x38
 8005136:	e005      	b.n	8005144 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005146:	2b01      	cmp	r3, #1
 8005148:	d10b      	bne.n	8005162 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f043 0206 	orr.w	r2, r3, #6
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f043 0220 	orr.w	r2, r3, #32
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005162:	7bfb      	ldrb	r3, [r7, #15]
}
 8005164:	4618      	mov	r0, r3
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800516e:	b004      	add	sp, #16
 8005170:	4770      	bx	lr
	...

08005174 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005174:	b480      	push	{r7}
 8005176:	b087      	sub	sp, #28
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	4613      	mov	r3, r2
 8005180:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005182:	79fb      	ldrb	r3, [r7, #7]
 8005184:	2b02      	cmp	r3, #2
 8005186:	d165      	bne.n	8005254 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	4a41      	ldr	r2, [pc, #260]	; (8005290 <USB_SetTurnaroundTime+0x11c>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d906      	bls.n	800519e <USB_SetTurnaroundTime+0x2a>
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	4a40      	ldr	r2, [pc, #256]	; (8005294 <USB_SetTurnaroundTime+0x120>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d202      	bcs.n	800519e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005198:	230f      	movs	r3, #15
 800519a:	617b      	str	r3, [r7, #20]
 800519c:	e062      	b.n	8005264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	4a3c      	ldr	r2, [pc, #240]	; (8005294 <USB_SetTurnaroundTime+0x120>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d306      	bcc.n	80051b4 <USB_SetTurnaroundTime+0x40>
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	4a3b      	ldr	r2, [pc, #236]	; (8005298 <USB_SetTurnaroundTime+0x124>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d202      	bcs.n	80051b4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80051ae:	230e      	movs	r3, #14
 80051b0:	617b      	str	r3, [r7, #20]
 80051b2:	e057      	b.n	8005264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	4a38      	ldr	r2, [pc, #224]	; (8005298 <USB_SetTurnaroundTime+0x124>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d306      	bcc.n	80051ca <USB_SetTurnaroundTime+0x56>
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	4a37      	ldr	r2, [pc, #220]	; (800529c <USB_SetTurnaroundTime+0x128>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d202      	bcs.n	80051ca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80051c4:	230d      	movs	r3, #13
 80051c6:	617b      	str	r3, [r7, #20]
 80051c8:	e04c      	b.n	8005264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	4a33      	ldr	r2, [pc, #204]	; (800529c <USB_SetTurnaroundTime+0x128>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d306      	bcc.n	80051e0 <USB_SetTurnaroundTime+0x6c>
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	4a32      	ldr	r2, [pc, #200]	; (80052a0 <USB_SetTurnaroundTime+0x12c>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d802      	bhi.n	80051e0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80051da:	230c      	movs	r3, #12
 80051dc:	617b      	str	r3, [r7, #20]
 80051de:	e041      	b.n	8005264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	4a2f      	ldr	r2, [pc, #188]	; (80052a0 <USB_SetTurnaroundTime+0x12c>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d906      	bls.n	80051f6 <USB_SetTurnaroundTime+0x82>
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	4a2e      	ldr	r2, [pc, #184]	; (80052a4 <USB_SetTurnaroundTime+0x130>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d802      	bhi.n	80051f6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80051f0:	230b      	movs	r3, #11
 80051f2:	617b      	str	r3, [r7, #20]
 80051f4:	e036      	b.n	8005264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	4a2a      	ldr	r2, [pc, #168]	; (80052a4 <USB_SetTurnaroundTime+0x130>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d906      	bls.n	800520c <USB_SetTurnaroundTime+0x98>
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	4a29      	ldr	r2, [pc, #164]	; (80052a8 <USB_SetTurnaroundTime+0x134>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d802      	bhi.n	800520c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005206:	230a      	movs	r3, #10
 8005208:	617b      	str	r3, [r7, #20]
 800520a:	e02b      	b.n	8005264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	4a26      	ldr	r2, [pc, #152]	; (80052a8 <USB_SetTurnaroundTime+0x134>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d906      	bls.n	8005222 <USB_SetTurnaroundTime+0xae>
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	4a25      	ldr	r2, [pc, #148]	; (80052ac <USB_SetTurnaroundTime+0x138>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d202      	bcs.n	8005222 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800521c:	2309      	movs	r3, #9
 800521e:	617b      	str	r3, [r7, #20]
 8005220:	e020      	b.n	8005264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	4a21      	ldr	r2, [pc, #132]	; (80052ac <USB_SetTurnaroundTime+0x138>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d306      	bcc.n	8005238 <USB_SetTurnaroundTime+0xc4>
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	4a20      	ldr	r2, [pc, #128]	; (80052b0 <USB_SetTurnaroundTime+0x13c>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d802      	bhi.n	8005238 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005232:	2308      	movs	r3, #8
 8005234:	617b      	str	r3, [r7, #20]
 8005236:	e015      	b.n	8005264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	4a1d      	ldr	r2, [pc, #116]	; (80052b0 <USB_SetTurnaroundTime+0x13c>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d906      	bls.n	800524e <USB_SetTurnaroundTime+0xda>
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	4a1c      	ldr	r2, [pc, #112]	; (80052b4 <USB_SetTurnaroundTime+0x140>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d202      	bcs.n	800524e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005248:	2307      	movs	r3, #7
 800524a:	617b      	str	r3, [r7, #20]
 800524c:	e00a      	b.n	8005264 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800524e:	2306      	movs	r3, #6
 8005250:	617b      	str	r3, [r7, #20]
 8005252:	e007      	b.n	8005264 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005254:	79fb      	ldrb	r3, [r7, #7]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d102      	bne.n	8005260 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800525a:	2309      	movs	r3, #9
 800525c:	617b      	str	r3, [r7, #20]
 800525e:	e001      	b.n	8005264 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005260:	2309      	movs	r3, #9
 8005262:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	68da      	ldr	r2, [r3, #12]
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	029b      	lsls	r3, r3, #10
 8005278:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800527c:	431a      	orrs	r2, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	371c      	adds	r7, #28
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr
 8005290:	00d8acbf 	.word	0x00d8acbf
 8005294:	00e4e1c0 	.word	0x00e4e1c0
 8005298:	00f42400 	.word	0x00f42400
 800529c:	01067380 	.word	0x01067380
 80052a0:	011a499f 	.word	0x011a499f
 80052a4:	01312cff 	.word	0x01312cff
 80052a8:	014ca43f 	.word	0x014ca43f
 80052ac:	016e3600 	.word	0x016e3600
 80052b0:	01a6ab1f 	.word	0x01a6ab1f
 80052b4:	01e84800 	.word	0x01e84800

080052b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f043 0201 	orr.w	r2, r3, #1
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	370c      	adds	r7, #12
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052da:	b480      	push	{r7}
 80052dc:	b083      	sub	sp, #12
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f023 0201 	bic.w	r2, r3, #1
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	460b      	mov	r3, r1
 8005306:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005308:	2300      	movs	r3, #0
 800530a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005318:	78fb      	ldrb	r3, [r7, #3]
 800531a:	2b01      	cmp	r3, #1
 800531c:	d115      	bne.n	800534a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800532a:	2001      	movs	r0, #1
 800532c:	f7fb fe4c 	bl	8000fc8 <HAL_Delay>
      ms++;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	3301      	adds	r3, #1
 8005334:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f001 fa45 	bl	80067c6 <USB_GetMode>
 800533c:	4603      	mov	r3, r0
 800533e:	2b01      	cmp	r3, #1
 8005340:	d01e      	beq.n	8005380 <USB_SetCurrentMode+0x84>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2b31      	cmp	r3, #49	; 0x31
 8005346:	d9f0      	bls.n	800532a <USB_SetCurrentMode+0x2e>
 8005348:	e01a      	b.n	8005380 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800534a:	78fb      	ldrb	r3, [r7, #3]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d115      	bne.n	800537c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800535c:	2001      	movs	r0, #1
 800535e:	f7fb fe33 	bl	8000fc8 <HAL_Delay>
      ms++;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	3301      	adds	r3, #1
 8005366:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f001 fa2c 	bl	80067c6 <USB_GetMode>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d005      	beq.n	8005380 <USB_SetCurrentMode+0x84>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2b31      	cmp	r3, #49	; 0x31
 8005378:	d9f0      	bls.n	800535c <USB_SetCurrentMode+0x60>
 800537a:	e001      	b.n	8005380 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e005      	b.n	800538c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2b32      	cmp	r3, #50	; 0x32
 8005384:	d101      	bne.n	800538a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e000      	b.n	800538c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3710      	adds	r7, #16
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005394:	b084      	sub	sp, #16
 8005396:	b580      	push	{r7, lr}
 8005398:	b086      	sub	sp, #24
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
 800539e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80053a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80053a6:	2300      	movs	r3, #0
 80053a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80053ae:	2300      	movs	r3, #0
 80053b0:	613b      	str	r3, [r7, #16]
 80053b2:	e009      	b.n	80053c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	3340      	adds	r3, #64	; 0x40
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	4413      	add	r3, r2
 80053be:	2200      	movs	r2, #0
 80053c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	3301      	adds	r3, #1
 80053c6:	613b      	str	r3, [r7, #16]
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	2b0e      	cmp	r3, #14
 80053cc:	d9f2      	bls.n	80053b4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80053ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d11c      	bne.n	800540e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053e2:	f043 0302 	orr.w	r3, r3, #2
 80053e6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005404:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	639a      	str	r2, [r3, #56]	; 0x38
 800540c:	e00b      	b.n	8005426 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005412:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800542c:	461a      	mov	r2, r3
 800542e:	2300      	movs	r3, #0
 8005430:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005438:	4619      	mov	r1, r3
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005440:	461a      	mov	r2, r3
 8005442:	680b      	ldr	r3, [r1, #0]
 8005444:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005448:	2b01      	cmp	r3, #1
 800544a:	d10c      	bne.n	8005466 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800544c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800544e:	2b00      	cmp	r3, #0
 8005450:	d104      	bne.n	800545c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005452:	2100      	movs	r1, #0
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f965 	bl	8005724 <USB_SetDevSpeed>
 800545a:	e008      	b.n	800546e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800545c:	2101      	movs	r1, #1
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f960 	bl	8005724 <USB_SetDevSpeed>
 8005464:	e003      	b.n	800546e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005466:	2103      	movs	r1, #3
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 f95b 	bl	8005724 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800546e:	2110      	movs	r1, #16
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 f8f3 	bl	800565c <USB_FlushTxFifo>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d001      	beq.n	8005480 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 f91f 	bl	80056c4 <USB_FlushRxFifo>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d001      	beq.n	8005490 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005496:	461a      	mov	r2, r3
 8005498:	2300      	movs	r3, #0
 800549a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054a2:	461a      	mov	r2, r3
 80054a4:	2300      	movs	r3, #0
 80054a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ae:	461a      	mov	r2, r3
 80054b0:	2300      	movs	r3, #0
 80054b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054b4:	2300      	movs	r3, #0
 80054b6:	613b      	str	r3, [r7, #16]
 80054b8:	e043      	b.n	8005542 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	015a      	lsls	r2, r3, #5
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	4413      	add	r3, r2
 80054c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054d0:	d118      	bne.n	8005504 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d10a      	bne.n	80054ee <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	015a      	lsls	r2, r3, #5
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	4413      	add	r3, r2
 80054e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e4:	461a      	mov	r2, r3
 80054e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054ea:	6013      	str	r3, [r2, #0]
 80054ec:	e013      	b.n	8005516 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	015a      	lsls	r2, r3, #5
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	4413      	add	r3, r2
 80054f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054fa:	461a      	mov	r2, r3
 80054fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005500:	6013      	str	r3, [r2, #0]
 8005502:	e008      	b.n	8005516 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	4413      	add	r3, r2
 800550c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005510:	461a      	mov	r2, r3
 8005512:	2300      	movs	r3, #0
 8005514:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	015a      	lsls	r2, r3, #5
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	4413      	add	r3, r2
 800551e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005522:	461a      	mov	r2, r3
 8005524:	2300      	movs	r3, #0
 8005526:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	015a      	lsls	r2, r3, #5
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	4413      	add	r3, r2
 8005530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005534:	461a      	mov	r2, r3
 8005536:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800553a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	3301      	adds	r3, #1
 8005540:	613b      	str	r3, [r7, #16]
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	429a      	cmp	r2, r3
 8005548:	d3b7      	bcc.n	80054ba <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800554a:	2300      	movs	r3, #0
 800554c:	613b      	str	r3, [r7, #16]
 800554e:	e043      	b.n	80055d8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	015a      	lsls	r2, r3, #5
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	4413      	add	r3, r2
 8005558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005562:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005566:	d118      	bne.n	800559a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d10a      	bne.n	8005584 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	015a      	lsls	r2, r3, #5
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	4413      	add	r3, r2
 8005576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800557a:	461a      	mov	r2, r3
 800557c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005580:	6013      	str	r3, [r2, #0]
 8005582:	e013      	b.n	80055ac <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	015a      	lsls	r2, r3, #5
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	4413      	add	r3, r2
 800558c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005590:	461a      	mov	r2, r3
 8005592:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005596:	6013      	str	r3, [r2, #0]
 8005598:	e008      	b.n	80055ac <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	015a      	lsls	r2, r3, #5
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	4413      	add	r3, r2
 80055a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a6:	461a      	mov	r2, r3
 80055a8:	2300      	movs	r3, #0
 80055aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	015a      	lsls	r2, r3, #5
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	4413      	add	r3, r2
 80055b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b8:	461a      	mov	r2, r3
 80055ba:	2300      	movs	r3, #0
 80055bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	015a      	lsls	r2, r3, #5
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	4413      	add	r3, r2
 80055c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ca:	461a      	mov	r2, r3
 80055cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	3301      	adds	r3, #1
 80055d6:	613b      	str	r3, [r7, #16]
 80055d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d3b7      	bcc.n	8005550 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055f2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005600:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005604:	2b00      	cmp	r3, #0
 8005606:	d105      	bne.n	8005614 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	f043 0210 	orr.w	r2, r3, #16
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	699a      	ldr	r2, [r3, #24]
 8005618:	4b0f      	ldr	r3, [pc, #60]	; (8005658 <USB_DevInit+0x2c4>)
 800561a:	4313      	orrs	r3, r2
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005622:	2b00      	cmp	r3, #0
 8005624:	d005      	beq.n	8005632 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	f043 0208 	orr.w	r2, r3, #8
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005634:	2b01      	cmp	r3, #1
 8005636:	d107      	bne.n	8005648 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005640:	f043 0304 	orr.w	r3, r3, #4
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005648:	7dfb      	ldrb	r3, [r7, #23]
}
 800564a:	4618      	mov	r0, r3
 800564c:	3718      	adds	r7, #24
 800564e:	46bd      	mov	sp, r7
 8005650:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005654:	b004      	add	sp, #16
 8005656:	4770      	bx	lr
 8005658:	803c3800 	.word	0x803c3800

0800565c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005666:	2300      	movs	r3, #0
 8005668:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	3301      	adds	r3, #1
 800566e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	4a13      	ldr	r2, [pc, #76]	; (80056c0 <USB_FlushTxFifo+0x64>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d901      	bls.n	800567c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e01b      	b.n	80056b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	2b00      	cmp	r3, #0
 8005682:	daf2      	bge.n	800566a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005684:	2300      	movs	r3, #0
 8005686:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	019b      	lsls	r3, r3, #6
 800568c:	f043 0220 	orr.w	r2, r3, #32
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	3301      	adds	r3, #1
 8005698:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	4a08      	ldr	r2, [pc, #32]	; (80056c0 <USB_FlushTxFifo+0x64>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d901      	bls.n	80056a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e006      	b.n	80056b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	f003 0320 	and.w	r3, r3, #32
 80056ae:	2b20      	cmp	r3, #32
 80056b0:	d0f0      	beq.n	8005694 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3714      	adds	r7, #20
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr
 80056c0:	00030d40 	.word	0x00030d40

080056c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056cc:	2300      	movs	r3, #0
 80056ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	3301      	adds	r3, #1
 80056d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	4a11      	ldr	r2, [pc, #68]	; (8005720 <USB_FlushRxFifo+0x5c>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d901      	bls.n	80056e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e018      	b.n	8005714 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	daf2      	bge.n	80056d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80056ea:	2300      	movs	r3, #0
 80056ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2210      	movs	r2, #16
 80056f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	3301      	adds	r3, #1
 80056f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	4a08      	ldr	r2, [pc, #32]	; (8005720 <USB_FlushRxFifo+0x5c>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d901      	bls.n	8005706 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e006      	b.n	8005714 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	f003 0310 	and.w	r3, r3, #16
 800570e:	2b10      	cmp	r3, #16
 8005710:	d0f0      	beq.n	80056f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3714      	adds	r7, #20
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr
 8005720:	00030d40 	.word	0x00030d40

08005724 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	460b      	mov	r3, r1
 800572e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	78fb      	ldrb	r3, [r7, #3]
 800573e:	68f9      	ldr	r1, [r7, #12]
 8005740:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005744:	4313      	orrs	r3, r2
 8005746:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005756:	b480      	push	{r7}
 8005758:	b087      	sub	sp, #28
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	f003 0306 	and.w	r3, r3, #6
 800576e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d102      	bne.n	800577c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005776:	2300      	movs	r3, #0
 8005778:	75fb      	strb	r3, [r7, #23]
 800577a:	e00a      	b.n	8005792 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2b02      	cmp	r3, #2
 8005780:	d002      	beq.n	8005788 <USB_GetDevSpeed+0x32>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2b06      	cmp	r3, #6
 8005786:	d102      	bne.n	800578e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005788:	2302      	movs	r3, #2
 800578a:	75fb      	strb	r3, [r7, #23]
 800578c:	e001      	b.n	8005792 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800578e:	230f      	movs	r3, #15
 8005790:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005792:	7dfb      	ldrb	r3, [r7, #23]
}
 8005794:	4618      	mov	r0, r3
 8005796:	371c      	adds	r7, #28
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	785b      	ldrb	r3, [r3, #1]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d13a      	bne.n	8005832 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057c2:	69da      	ldr	r2, [r3, #28]
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	f003 030f 	and.w	r3, r3, #15
 80057cc:	2101      	movs	r1, #1
 80057ce:	fa01 f303 	lsl.w	r3, r1, r3
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	68f9      	ldr	r1, [r7, #12]
 80057d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057da:	4313      	orrs	r3, r2
 80057dc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	015a      	lsls	r2, r3, #5
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	4413      	add	r3, r2
 80057e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d155      	bne.n	80058a0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	015a      	lsls	r2, r3, #5
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	4413      	add	r3, r2
 80057fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	791b      	ldrb	r3, [r3, #4]
 800580e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005810:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	059b      	lsls	r3, r3, #22
 8005816:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005818:	4313      	orrs	r3, r2
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	0151      	lsls	r1, r2, #5
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	440a      	add	r2, r1
 8005822:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800582a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800582e:	6013      	str	r3, [r2, #0]
 8005830:	e036      	b.n	80058a0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005838:	69da      	ldr	r2, [r3, #28]
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	f003 030f 	and.w	r3, r3, #15
 8005842:	2101      	movs	r1, #1
 8005844:	fa01 f303 	lsl.w	r3, r1, r3
 8005848:	041b      	lsls	r3, r3, #16
 800584a:	68f9      	ldr	r1, [r7, #12]
 800584c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005850:	4313      	orrs	r3, r2
 8005852:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	015a      	lsls	r2, r3, #5
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	4413      	add	r3, r2
 800585c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d11a      	bne.n	80058a0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	015a      	lsls	r2, r3, #5
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	4413      	add	r3, r2
 8005872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	791b      	ldrb	r3, [r3, #4]
 8005884:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005886:	430b      	orrs	r3, r1
 8005888:	4313      	orrs	r3, r2
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	0151      	lsls	r1, r2, #5
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	440a      	add	r2, r1
 8005892:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005896:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800589a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800589e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3714      	adds	r7, #20
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
	...

080058b0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	785b      	ldrb	r3, [r3, #1]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d161      	bne.n	8005990 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	015a      	lsls	r2, r3, #5
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	4413      	add	r3, r2
 80058d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058e2:	d11f      	bne.n	8005924 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	015a      	lsls	r2, r3, #5
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	4413      	add	r3, r2
 80058ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	0151      	lsls	r1, r2, #5
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	440a      	add	r2, r1
 80058fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005902:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	015a      	lsls	r2, r3, #5
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	4413      	add	r3, r2
 800590c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68ba      	ldr	r2, [r7, #8]
 8005914:	0151      	lsls	r1, r2, #5
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	440a      	add	r2, r1
 800591a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800591e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005922:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800592a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	f003 030f 	and.w	r3, r3, #15
 8005934:	2101      	movs	r1, #1
 8005936:	fa01 f303 	lsl.w	r3, r1, r3
 800593a:	b29b      	uxth	r3, r3
 800593c:	43db      	mvns	r3, r3
 800593e:	68f9      	ldr	r1, [r7, #12]
 8005940:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005944:	4013      	ands	r3, r2
 8005946:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800594e:	69da      	ldr	r2, [r3, #28]
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	f003 030f 	and.w	r3, r3, #15
 8005958:	2101      	movs	r1, #1
 800595a:	fa01 f303 	lsl.w	r3, r1, r3
 800595e:	b29b      	uxth	r3, r3
 8005960:	43db      	mvns	r3, r3
 8005962:	68f9      	ldr	r1, [r7, #12]
 8005964:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005968:	4013      	ands	r3, r2
 800596a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	015a      	lsls	r2, r3, #5
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	4413      	add	r3, r2
 8005974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	0159      	lsls	r1, r3, #5
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	440b      	add	r3, r1
 8005982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005986:	4619      	mov	r1, r3
 8005988:	4b35      	ldr	r3, [pc, #212]	; (8005a60 <USB_DeactivateEndpoint+0x1b0>)
 800598a:	4013      	ands	r3, r2
 800598c:	600b      	str	r3, [r1, #0]
 800598e:	e060      	b.n	8005a52 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	015a      	lsls	r2, r3, #5
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	4413      	add	r3, r2
 8005998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059a6:	d11f      	bne.n	80059e8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	015a      	lsls	r2, r3, #5
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	4413      	add	r3, r2
 80059b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68ba      	ldr	r2, [r7, #8]
 80059b8:	0151      	lsls	r1, r2, #5
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	440a      	add	r2, r1
 80059be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80059c6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	015a      	lsls	r2, r3, #5
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	4413      	add	r3, r2
 80059d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68ba      	ldr	r2, [r7, #8]
 80059d8:	0151      	lsls	r1, r2, #5
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	440a      	add	r2, r1
 80059de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	f003 030f 	and.w	r3, r3, #15
 80059f8:	2101      	movs	r1, #1
 80059fa:	fa01 f303 	lsl.w	r3, r1, r3
 80059fe:	041b      	lsls	r3, r3, #16
 8005a00:	43db      	mvns	r3, r3
 8005a02:	68f9      	ldr	r1, [r7, #12]
 8005a04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a08:	4013      	ands	r3, r2
 8005a0a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a12:	69da      	ldr	r2, [r3, #28]
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	f003 030f 	and.w	r3, r3, #15
 8005a1c:	2101      	movs	r1, #1
 8005a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a22:	041b      	lsls	r3, r3, #16
 8005a24:	43db      	mvns	r3, r3
 8005a26:	68f9      	ldr	r1, [r7, #12]
 8005a28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	015a      	lsls	r2, r3, #5
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	4413      	add	r3, r2
 8005a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	0159      	lsls	r1, r3, #5
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	440b      	add	r3, r1
 8005a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	4b05      	ldr	r3, [pc, #20]	; (8005a64 <USB_DeactivateEndpoint+0x1b4>)
 8005a4e:	4013      	ands	r3, r2
 8005a50:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3714      	adds	r7, #20
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr
 8005a60:	ec337800 	.word	0xec337800
 8005a64:	eff37800 	.word	0xeff37800

08005a68 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b08a      	sub	sp, #40	; 0x28
 8005a6c:	af02      	add	r7, sp, #8
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	4613      	mov	r3, r2
 8005a74:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	785b      	ldrb	r3, [r3, #1]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	f040 815c 	bne.w	8005d42 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d132      	bne.n	8005af8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	015a      	lsls	r2, r3, #5
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	69ba      	ldr	r2, [r7, #24]
 8005aa2:	0151      	lsls	r1, r2, #5
 8005aa4:	69fa      	ldr	r2, [r7, #28]
 8005aa6:	440a      	add	r2, r1
 8005aa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ab0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ab4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	015a      	lsls	r2, r3, #5
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	4413      	add	r3, r2
 8005abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	69ba      	ldr	r2, [r7, #24]
 8005ac6:	0151      	lsls	r1, r2, #5
 8005ac8:	69fa      	ldr	r2, [r7, #28]
 8005aca:	440a      	add	r2, r1
 8005acc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ad0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ad4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	015a      	lsls	r2, r3, #5
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	4413      	add	r3, r2
 8005ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	69ba      	ldr	r2, [r7, #24]
 8005ae6:	0151      	lsls	r1, r2, #5
 8005ae8:	69fa      	ldr	r2, [r7, #28]
 8005aea:	440a      	add	r2, r1
 8005aec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005af0:	0cdb      	lsrs	r3, r3, #19
 8005af2:	04db      	lsls	r3, r3, #19
 8005af4:	6113      	str	r3, [r2, #16]
 8005af6:	e074      	b.n	8005be2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	015a      	lsls	r2, r3, #5
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	4413      	add	r3, r2
 8005b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	69ba      	ldr	r2, [r7, #24]
 8005b08:	0151      	lsls	r1, r2, #5
 8005b0a:	69fa      	ldr	r2, [r7, #28]
 8005b0c:	440a      	add	r2, r1
 8005b0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b12:	0cdb      	lsrs	r3, r3, #19
 8005b14:	04db      	lsls	r3, r3, #19
 8005b16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	69ba      	ldr	r2, [r7, #24]
 8005b28:	0151      	lsls	r1, r2, #5
 8005b2a:	69fa      	ldr	r2, [r7, #28]
 8005b2c:	440a      	add	r2, r1
 8005b2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b32:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b36:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	015a      	lsls	r2, r3, #5
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	4413      	add	r3, r2
 8005b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b48:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	6999      	ldr	r1, [r3, #24]
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	440b      	add	r3, r1
 8005b54:	1e59      	subs	r1, r3, #1
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b5e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005b60:	4b9d      	ldr	r3, [pc, #628]	; (8005dd8 <USB_EPStartXfer+0x370>)
 8005b62:	400b      	ands	r3, r1
 8005b64:	69b9      	ldr	r1, [r7, #24]
 8005b66:	0148      	lsls	r0, r1, #5
 8005b68:	69f9      	ldr	r1, [r7, #28]
 8005b6a:	4401      	add	r1, r0
 8005b6c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005b70:	4313      	orrs	r3, r2
 8005b72:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	015a      	lsls	r2, r3, #5
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b80:	691a      	ldr	r2, [r3, #16]
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b8a:	69b9      	ldr	r1, [r7, #24]
 8005b8c:	0148      	lsls	r0, r1, #5
 8005b8e:	69f9      	ldr	r1, [r7, #28]
 8005b90:	4401      	add	r1, r0
 8005b92:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005b96:	4313      	orrs	r3, r2
 8005b98:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	791b      	ldrb	r3, [r3, #4]
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d11f      	bne.n	8005be2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	015a      	lsls	r2, r3, #5
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	4413      	add	r3, r2
 8005baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	69ba      	ldr	r2, [r7, #24]
 8005bb2:	0151      	lsls	r1, r2, #5
 8005bb4:	69fa      	ldr	r2, [r7, #28]
 8005bb6:	440a      	add	r2, r1
 8005bb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bbc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005bc0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	015a      	lsls	r2, r3, #5
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	4413      	add	r3, r2
 8005bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	0151      	lsls	r1, r2, #5
 8005bd4:	69fa      	ldr	r2, [r7, #28]
 8005bd6:	440a      	add	r2, r1
 8005bd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bdc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005be0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005be2:	79fb      	ldrb	r3, [r7, #7]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d14b      	bne.n	8005c80 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	695b      	ldr	r3, [r3, #20]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d009      	beq.n	8005c04 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	015a      	lsls	r2, r3, #5
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	791b      	ldrb	r3, [r3, #4]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d128      	bne.n	8005c5e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d110      	bne.n	8005c3e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	015a      	lsls	r2, r3, #5
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	4413      	add	r3, r2
 8005c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	69ba      	ldr	r2, [r7, #24]
 8005c2c:	0151      	lsls	r1, r2, #5
 8005c2e:	69fa      	ldr	r2, [r7, #28]
 8005c30:	440a      	add	r2, r1
 8005c32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c3a:	6013      	str	r3, [r2, #0]
 8005c3c:	e00f      	b.n	8005c5e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	015a      	lsls	r2, r3, #5
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	4413      	add	r3, r2
 8005c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	69ba      	ldr	r2, [r7, #24]
 8005c4e:	0151      	lsls	r1, r2, #5
 8005c50:	69fa      	ldr	r2, [r7, #28]
 8005c52:	440a      	add	r2, r1
 8005c54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c5c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	015a      	lsls	r2, r3, #5
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	4413      	add	r3, r2
 8005c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	69ba      	ldr	r2, [r7, #24]
 8005c6e:	0151      	lsls	r1, r2, #5
 8005c70:	69fa      	ldr	r2, [r7, #28]
 8005c72:	440a      	add	r2, r1
 8005c74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c78:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c7c:	6013      	str	r3, [r2, #0]
 8005c7e:	e133      	b.n	8005ee8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	015a      	lsls	r2, r3, #5
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	4413      	add	r3, r2
 8005c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	69ba      	ldr	r2, [r7, #24]
 8005c90:	0151      	lsls	r1, r2, #5
 8005c92:	69fa      	ldr	r2, [r7, #28]
 8005c94:	440a      	add	r2, r1
 8005c96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c9a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c9e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	791b      	ldrb	r3, [r3, #4]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d015      	beq.n	8005cd4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f000 811b 	beq.w	8005ee8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	f003 030f 	and.w	r3, r3, #15
 8005cc2:	2101      	movs	r1, #1
 8005cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8005cc8:	69f9      	ldr	r1, [r7, #28]
 8005cca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	634b      	str	r3, [r1, #52]	; 0x34
 8005cd2:	e109      	b.n	8005ee8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d110      	bne.n	8005d06 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	015a      	lsls	r2, r3, #5
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	4413      	add	r3, r2
 8005cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	69ba      	ldr	r2, [r7, #24]
 8005cf4:	0151      	lsls	r1, r2, #5
 8005cf6:	69fa      	ldr	r2, [r7, #28]
 8005cf8:	440a      	add	r2, r1
 8005cfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cfe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d02:	6013      	str	r3, [r2, #0]
 8005d04:	e00f      	b.n	8005d26 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	015a      	lsls	r2, r3, #5
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	69ba      	ldr	r2, [r7, #24]
 8005d16:	0151      	lsls	r1, r2, #5
 8005d18:	69fa      	ldr	r2, [r7, #28]
 8005d1a:	440a      	add	r2, r1
 8005d1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d24:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	6919      	ldr	r1, [r3, #16]
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	781a      	ldrb	r2, [r3, #0]
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	b298      	uxth	r0, r3
 8005d34:	79fb      	ldrb	r3, [r7, #7]
 8005d36:	9300      	str	r3, [sp, #0]
 8005d38:	4603      	mov	r3, r0
 8005d3a:	68f8      	ldr	r0, [r7, #12]
 8005d3c:	f000 fade 	bl	80062fc <USB_WritePacket>
 8005d40:	e0d2      	b.n	8005ee8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	015a      	lsls	r2, r3, #5
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	4413      	add	r3, r2
 8005d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	69ba      	ldr	r2, [r7, #24]
 8005d52:	0151      	lsls	r1, r2, #5
 8005d54:	69fa      	ldr	r2, [r7, #28]
 8005d56:	440a      	add	r2, r1
 8005d58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d5c:	0cdb      	lsrs	r3, r3, #19
 8005d5e:	04db      	lsls	r3, r3, #19
 8005d60:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	015a      	lsls	r2, r3, #5
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	4413      	add	r3, r2
 8005d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	69ba      	ldr	r2, [r7, #24]
 8005d72:	0151      	lsls	r1, r2, #5
 8005d74:	69fa      	ldr	r2, [r7, #28]
 8005d76:	440a      	add	r2, r1
 8005d78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d7c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d80:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d84:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d126      	bne.n	8005ddc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	015a      	lsls	r2, r3, #5
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	4413      	add	r3, r2
 8005d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d9a:	691a      	ldr	r2, [r3, #16]
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005da4:	69b9      	ldr	r1, [r7, #24]
 8005da6:	0148      	lsls	r0, r1, #5
 8005da8:	69f9      	ldr	r1, [r7, #28]
 8005daa:	4401      	add	r1, r0
 8005dac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005db0:	4313      	orrs	r3, r2
 8005db2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	015a      	lsls	r2, r3, #5
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	4413      	add	r3, r2
 8005dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	69ba      	ldr	r2, [r7, #24]
 8005dc4:	0151      	lsls	r1, r2, #5
 8005dc6:	69fa      	ldr	r2, [r7, #28]
 8005dc8:	440a      	add	r2, r1
 8005dca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005dd2:	6113      	str	r3, [r2, #16]
 8005dd4:	e03a      	b.n	8005e4c <USB_EPStartXfer+0x3e4>
 8005dd6:	bf00      	nop
 8005dd8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	699a      	ldr	r2, [r3, #24]
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	4413      	add	r3, r2
 8005de6:	1e5a      	subs	r2, r3, #1
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005df0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	8afa      	ldrh	r2, [r7, #22]
 8005df8:	fb03 f202 	mul.w	r2, r3, r2
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	015a      	lsls	r2, r3, #5
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	4413      	add	r3, r2
 8005e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e0c:	691a      	ldr	r2, [r3, #16]
 8005e0e:	8afb      	ldrh	r3, [r7, #22]
 8005e10:	04d9      	lsls	r1, r3, #19
 8005e12:	4b38      	ldr	r3, [pc, #224]	; (8005ef4 <USB_EPStartXfer+0x48c>)
 8005e14:	400b      	ands	r3, r1
 8005e16:	69b9      	ldr	r1, [r7, #24]
 8005e18:	0148      	lsls	r0, r1, #5
 8005e1a:	69f9      	ldr	r1, [r7, #28]
 8005e1c:	4401      	add	r1, r0
 8005e1e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e22:	4313      	orrs	r3, r2
 8005e24:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	015a      	lsls	r2, r3, #5
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e32:	691a      	ldr	r2, [r3, #16]
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	69db      	ldr	r3, [r3, #28]
 8005e38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e3c:	69b9      	ldr	r1, [r7, #24]
 8005e3e:	0148      	lsls	r0, r1, #5
 8005e40:	69f9      	ldr	r1, [r7, #28]
 8005e42:	4401      	add	r1, r0
 8005e44:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005e4c:	79fb      	ldrb	r3, [r7, #7]
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d10d      	bne.n	8005e6e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d009      	beq.n	8005e6e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	6919      	ldr	r1, [r3, #16]
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	015a      	lsls	r2, r3, #5
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	4413      	add	r3, r2
 8005e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e6a:	460a      	mov	r2, r1
 8005e6c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	791b      	ldrb	r3, [r3, #4]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d128      	bne.n	8005ec8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d110      	bne.n	8005ea8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	015a      	lsls	r2, r3, #5
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	69ba      	ldr	r2, [r7, #24]
 8005e96:	0151      	lsls	r1, r2, #5
 8005e98:	69fa      	ldr	r2, [r7, #28]
 8005e9a:	440a      	add	r2, r1
 8005e9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ea0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ea4:	6013      	str	r3, [r2, #0]
 8005ea6:	e00f      	b.n	8005ec8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	015a      	lsls	r2, r3, #5
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	4413      	add	r3, r2
 8005eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	69ba      	ldr	r2, [r7, #24]
 8005eb8:	0151      	lsls	r1, r2, #5
 8005eba:	69fa      	ldr	r2, [r7, #28]
 8005ebc:	440a      	add	r2, r1
 8005ebe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ec2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ec6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	015a      	lsls	r2, r3, #5
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	4413      	add	r3, r2
 8005ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	69ba      	ldr	r2, [r7, #24]
 8005ed8:	0151      	lsls	r1, r2, #5
 8005eda:	69fa      	ldr	r2, [r7, #28]
 8005edc:	440a      	add	r2, r1
 8005ede:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ee2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ee6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3720      	adds	r7, #32
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	1ff80000 	.word	0x1ff80000

08005ef8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b087      	sub	sp, #28
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	4613      	mov	r3, r2
 8005f04:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	785b      	ldrb	r3, [r3, #1]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	f040 80ce 	bne.w	80060b6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d132      	bne.n	8005f88 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	015a      	lsls	r2, r3, #5
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	4413      	add	r3, r2
 8005f2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	693a      	ldr	r2, [r7, #16]
 8005f32:	0151      	lsls	r1, r2, #5
 8005f34:	697a      	ldr	r2, [r7, #20]
 8005f36:	440a      	add	r2, r1
 8005f38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f3c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f40:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	015a      	lsls	r2, r3, #5
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	693a      	ldr	r2, [r7, #16]
 8005f56:	0151      	lsls	r1, r2, #5
 8005f58:	697a      	ldr	r2, [r7, #20]
 8005f5a:	440a      	add	r2, r1
 8005f5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	015a      	lsls	r2, r3, #5
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	0151      	lsls	r1, r2, #5
 8005f78:	697a      	ldr	r2, [r7, #20]
 8005f7a:	440a      	add	r2, r1
 8005f7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f80:	0cdb      	lsrs	r3, r3, #19
 8005f82:	04db      	lsls	r3, r3, #19
 8005f84:	6113      	str	r3, [r2, #16]
 8005f86:	e04e      	b.n	8006026 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	015a      	lsls	r2, r3, #5
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	4413      	add	r3, r2
 8005f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	693a      	ldr	r2, [r7, #16]
 8005f98:	0151      	lsls	r1, r2, #5
 8005f9a:	697a      	ldr	r2, [r7, #20]
 8005f9c:	440a      	add	r2, r1
 8005f9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fa2:	0cdb      	lsrs	r3, r3, #19
 8005fa4:	04db      	lsls	r3, r3, #19
 8005fa6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	015a      	lsls	r2, r3, #5
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	4413      	add	r3, r2
 8005fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	0151      	lsls	r1, r2, #5
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	440a      	add	r2, r1
 8005fbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fc2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005fc6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005fca:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	699a      	ldr	r2, [r3, #24]
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d903      	bls.n	8005fe0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	68da      	ldr	r2, [r3, #12]
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	015a      	lsls	r2, r3, #5
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	693a      	ldr	r2, [r7, #16]
 8005ff0:	0151      	lsls	r1, r2, #5
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	440a      	add	r2, r1
 8005ff6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ffa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ffe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	015a      	lsls	r2, r3, #5
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	4413      	add	r3, r2
 8006008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800600c:	691a      	ldr	r2, [r3, #16]
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006016:	6939      	ldr	r1, [r7, #16]
 8006018:	0148      	lsls	r0, r1, #5
 800601a:	6979      	ldr	r1, [r7, #20]
 800601c:	4401      	add	r1, r0
 800601e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006022:	4313      	orrs	r3, r2
 8006024:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006026:	79fb      	ldrb	r3, [r7, #7]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d11e      	bne.n	800606a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	695b      	ldr	r3, [r3, #20]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d009      	beq.n	8006048 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	015a      	lsls	r2, r3, #5
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	4413      	add	r3, r2
 800603c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006040:	461a      	mov	r2, r3
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	015a      	lsls	r2, r3, #5
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	4413      	add	r3, r2
 8006050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	693a      	ldr	r2, [r7, #16]
 8006058:	0151      	lsls	r1, r2, #5
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	440a      	add	r2, r1
 800605e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006062:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006066:	6013      	str	r3, [r2, #0]
 8006068:	e097      	b.n	800619a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	015a      	lsls	r2, r3, #5
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	4413      	add	r3, r2
 8006072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	0151      	lsls	r1, r2, #5
 800607c:	697a      	ldr	r2, [r7, #20]
 800607e:	440a      	add	r2, r1
 8006080:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006084:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006088:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	2b00      	cmp	r3, #0
 8006090:	f000 8083 	beq.w	800619a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800609a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	f003 030f 	and.w	r3, r3, #15
 80060a4:	2101      	movs	r1, #1
 80060a6:	fa01 f303 	lsl.w	r3, r1, r3
 80060aa:	6979      	ldr	r1, [r7, #20]
 80060ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060b0:	4313      	orrs	r3, r2
 80060b2:	634b      	str	r3, [r1, #52]	; 0x34
 80060b4:	e071      	b.n	800619a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	015a      	lsls	r2, r3, #5
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	4413      	add	r3, r2
 80060be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c2:	691b      	ldr	r3, [r3, #16]
 80060c4:	693a      	ldr	r2, [r7, #16]
 80060c6:	0151      	lsls	r1, r2, #5
 80060c8:	697a      	ldr	r2, [r7, #20]
 80060ca:	440a      	add	r2, r1
 80060cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060d0:	0cdb      	lsrs	r3, r3, #19
 80060d2:	04db      	lsls	r3, r3, #19
 80060d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	015a      	lsls	r2, r3, #5
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	4413      	add	r3, r2
 80060de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	0151      	lsls	r1, r2, #5
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	440a      	add	r2, r1
 80060ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80060f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80060f8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d003      	beq.n	800610a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	68da      	ldr	r2, [r3, #12]
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	68da      	ldr	r2, [r3, #12]
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	015a      	lsls	r2, r3, #5
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	4413      	add	r3, r2
 800611a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	693a      	ldr	r2, [r7, #16]
 8006122:	0151      	lsls	r1, r2, #5
 8006124:	697a      	ldr	r2, [r7, #20]
 8006126:	440a      	add	r2, r1
 8006128:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800612c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006130:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	015a      	lsls	r2, r3, #5
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	4413      	add	r3, r2
 800613a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800613e:	691a      	ldr	r2, [r3, #16]
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	69db      	ldr	r3, [r3, #28]
 8006144:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006148:	6939      	ldr	r1, [r7, #16]
 800614a:	0148      	lsls	r0, r1, #5
 800614c:	6979      	ldr	r1, [r7, #20]
 800614e:	4401      	add	r1, r0
 8006150:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006154:	4313      	orrs	r3, r2
 8006156:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006158:	79fb      	ldrb	r3, [r7, #7]
 800615a:	2b01      	cmp	r3, #1
 800615c:	d10d      	bne.n	800617a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d009      	beq.n	800617a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	6919      	ldr	r1, [r3, #16]
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	015a      	lsls	r2, r3, #5
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	4413      	add	r3, r2
 8006172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006176:	460a      	mov	r2, r1
 8006178:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	015a      	lsls	r2, r3, #5
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	4413      	add	r3, r2
 8006182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	0151      	lsls	r1, r2, #5
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	440a      	add	r2, r1
 8006190:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006194:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006198:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	371c      	adds	r7, #28
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b087      	sub	sp, #28
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80061b2:	2300      	movs	r3, #0
 80061b4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80061b6:	2300      	movs	r3, #0
 80061b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	785b      	ldrb	r3, [r3, #1]
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d14a      	bne.n	800625c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	015a      	lsls	r2, r3, #5
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	4413      	add	r3, r2
 80061d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061de:	f040 8086 	bne.w	80062ee <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	015a      	lsls	r2, r3, #5
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	4413      	add	r3, r2
 80061ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	683a      	ldr	r2, [r7, #0]
 80061f4:	7812      	ldrb	r2, [r2, #0]
 80061f6:	0151      	lsls	r1, r2, #5
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	440a      	add	r2, r1
 80061fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006200:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006204:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	015a      	lsls	r2, r3, #5
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	4413      	add	r3, r2
 8006210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	683a      	ldr	r2, [r7, #0]
 8006218:	7812      	ldrb	r2, [r2, #0]
 800621a:	0151      	lsls	r1, r2, #5
 800621c:	693a      	ldr	r2, [r7, #16]
 800621e:	440a      	add	r2, r1
 8006220:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006224:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006228:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	3301      	adds	r3, #1
 800622e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f242 7210 	movw	r2, #10000	; 0x2710
 8006236:	4293      	cmp	r3, r2
 8006238:	d902      	bls.n	8006240 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	75fb      	strb	r3, [r7, #23]
          break;
 800623e:	e056      	b.n	80062ee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	015a      	lsls	r2, r3, #5
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	4413      	add	r3, r2
 800624a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006254:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006258:	d0e7      	beq.n	800622a <USB_EPStopXfer+0x82>
 800625a:	e048      	b.n	80062ee <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	015a      	lsls	r2, r3, #5
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	4413      	add	r3, r2
 8006266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006270:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006274:	d13b      	bne.n	80062ee <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	015a      	lsls	r2, r3, #5
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	4413      	add	r3, r2
 8006280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	683a      	ldr	r2, [r7, #0]
 8006288:	7812      	ldrb	r2, [r2, #0]
 800628a:	0151      	lsls	r1, r2, #5
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	440a      	add	r2, r1
 8006290:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006294:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006298:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	015a      	lsls	r2, r3, #5
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	4413      	add	r3, r2
 80062a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	683a      	ldr	r2, [r7, #0]
 80062ac:	7812      	ldrb	r2, [r2, #0]
 80062ae:	0151      	lsls	r1, r2, #5
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	440a      	add	r2, r1
 80062b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062bc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	3301      	adds	r3, #1
 80062c2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f242 7210 	movw	r2, #10000	; 0x2710
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d902      	bls.n	80062d4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	75fb      	strb	r3, [r7, #23]
          break;
 80062d2:	e00c      	b.n	80062ee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	015a      	lsls	r2, r3, #5
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	4413      	add	r3, r2
 80062de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062ec:	d0e7      	beq.n	80062be <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80062ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	371c      	adds	r7, #28
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b089      	sub	sp, #36	; 0x24
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	4611      	mov	r1, r2
 8006308:	461a      	mov	r2, r3
 800630a:	460b      	mov	r3, r1
 800630c:	71fb      	strb	r3, [r7, #7]
 800630e:	4613      	mov	r3, r2
 8006310:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800631a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800631e:	2b00      	cmp	r3, #0
 8006320:	d123      	bne.n	800636a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006322:	88bb      	ldrh	r3, [r7, #4]
 8006324:	3303      	adds	r3, #3
 8006326:	089b      	lsrs	r3, r3, #2
 8006328:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800632a:	2300      	movs	r3, #0
 800632c:	61bb      	str	r3, [r7, #24]
 800632e:	e018      	b.n	8006362 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006330:	79fb      	ldrb	r3, [r7, #7]
 8006332:	031a      	lsls	r2, r3, #12
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	4413      	add	r3, r2
 8006338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800633c:	461a      	mov	r2, r3
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	3301      	adds	r3, #1
 8006348:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	3301      	adds	r3, #1
 800634e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	3301      	adds	r3, #1
 8006354:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	3301      	adds	r3, #1
 800635a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	3301      	adds	r3, #1
 8006360:	61bb      	str	r3, [r7, #24]
 8006362:	69ba      	ldr	r2, [r7, #24]
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	429a      	cmp	r2, r3
 8006368:	d3e2      	bcc.n	8006330 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800636a:	2300      	movs	r3, #0
}
 800636c:	4618      	mov	r0, r3
 800636e:	3724      	adds	r7, #36	; 0x24
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006378:	b480      	push	{r7}
 800637a:	b08b      	sub	sp, #44	; 0x2c
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	4613      	mov	r3, r2
 8006384:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800638e:	88fb      	ldrh	r3, [r7, #6]
 8006390:	089b      	lsrs	r3, r3, #2
 8006392:	b29b      	uxth	r3, r3
 8006394:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006396:	88fb      	ldrh	r3, [r7, #6]
 8006398:	f003 0303 	and.w	r3, r3, #3
 800639c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800639e:	2300      	movs	r3, #0
 80063a0:	623b      	str	r3, [r7, #32]
 80063a2:	e014      	b.n	80063ce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ae:	601a      	str	r2, [r3, #0]
    pDest++;
 80063b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b2:	3301      	adds	r3, #1
 80063b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80063b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b8:	3301      	adds	r3, #1
 80063ba:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80063bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063be:	3301      	adds	r3, #1
 80063c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80063c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c4:	3301      	adds	r3, #1
 80063c6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80063c8:	6a3b      	ldr	r3, [r7, #32]
 80063ca:	3301      	adds	r3, #1
 80063cc:	623b      	str	r3, [r7, #32]
 80063ce:	6a3a      	ldr	r2, [r7, #32]
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d3e6      	bcc.n	80063a4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80063d6:	8bfb      	ldrh	r3, [r7, #30]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d01e      	beq.n	800641a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80063dc:	2300      	movs	r3, #0
 80063de:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063e6:	461a      	mov	r2, r3
 80063e8:	f107 0310 	add.w	r3, r7, #16
 80063ec:	6812      	ldr	r2, [r2, #0]
 80063ee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	6a3b      	ldr	r3, [r7, #32]
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	00db      	lsls	r3, r3, #3
 80063f8:	fa22 f303 	lsr.w	r3, r2, r3
 80063fc:	b2da      	uxtb	r2, r3
 80063fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006400:	701a      	strb	r2, [r3, #0]
      i++;
 8006402:	6a3b      	ldr	r3, [r7, #32]
 8006404:	3301      	adds	r3, #1
 8006406:	623b      	str	r3, [r7, #32]
      pDest++;
 8006408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640a:	3301      	adds	r3, #1
 800640c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800640e:	8bfb      	ldrh	r3, [r7, #30]
 8006410:	3b01      	subs	r3, #1
 8006412:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006414:	8bfb      	ldrh	r3, [r7, #30]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1ea      	bne.n	80063f0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800641a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800641c:	4618      	mov	r0, r3
 800641e:	372c      	adds	r7, #44	; 0x2c
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006428:	b480      	push	{r7}
 800642a:	b085      	sub	sp, #20
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	785b      	ldrb	r3, [r3, #1]
 8006440:	2b01      	cmp	r3, #1
 8006442:	d12c      	bne.n	800649e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	015a      	lsls	r2, r3, #5
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	4413      	add	r3, r2
 800644c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	db12      	blt.n	800647c <USB_EPSetStall+0x54>
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00f      	beq.n	800647c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	015a      	lsls	r2, r3, #5
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	4413      	add	r3, r2
 8006464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68ba      	ldr	r2, [r7, #8]
 800646c:	0151      	lsls	r1, r2, #5
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	440a      	add	r2, r1
 8006472:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006476:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800647a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	015a      	lsls	r2, r3, #5
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	4413      	add	r3, r2
 8006484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68ba      	ldr	r2, [r7, #8]
 800648c:	0151      	lsls	r1, r2, #5
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	440a      	add	r2, r1
 8006492:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006496:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800649a:	6013      	str	r3, [r2, #0]
 800649c:	e02b      	b.n	80064f6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	015a      	lsls	r2, r3, #5
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	4413      	add	r3, r2
 80064a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	db12      	blt.n	80064d6 <USB_EPSetStall+0xae>
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00f      	beq.n	80064d6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	015a      	lsls	r2, r3, #5
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	4413      	add	r3, r2
 80064be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68ba      	ldr	r2, [r7, #8]
 80064c6:	0151      	lsls	r1, r2, #5
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	440a      	add	r2, r1
 80064cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80064d4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	015a      	lsls	r2, r3, #5
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	4413      	add	r3, r2
 80064de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68ba      	ldr	r2, [r7, #8]
 80064e6:	0151      	lsls	r1, r2, #5
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	440a      	add	r2, r1
 80064ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80064f4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3714      	adds	r7, #20
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006504:	b480      	push	{r7}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	785b      	ldrb	r3, [r3, #1]
 800651c:	2b01      	cmp	r3, #1
 800651e:	d128      	bne.n	8006572 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	015a      	lsls	r2, r3, #5
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	4413      	add	r3, r2
 8006528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68ba      	ldr	r2, [r7, #8]
 8006530:	0151      	lsls	r1, r2, #5
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	440a      	add	r2, r1
 8006536:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800653a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800653e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	791b      	ldrb	r3, [r3, #4]
 8006544:	2b03      	cmp	r3, #3
 8006546:	d003      	beq.n	8006550 <USB_EPClearStall+0x4c>
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	791b      	ldrb	r3, [r3, #4]
 800654c:	2b02      	cmp	r3, #2
 800654e:	d138      	bne.n	80065c2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	015a      	lsls	r2, r3, #5
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	4413      	add	r3, r2
 8006558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68ba      	ldr	r2, [r7, #8]
 8006560:	0151      	lsls	r1, r2, #5
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	440a      	add	r2, r1
 8006566:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800656a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800656e:	6013      	str	r3, [r2, #0]
 8006570:	e027      	b.n	80065c2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	015a      	lsls	r2, r3, #5
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	4413      	add	r3, r2
 800657a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68ba      	ldr	r2, [r7, #8]
 8006582:	0151      	lsls	r1, r2, #5
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	440a      	add	r2, r1
 8006588:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800658c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006590:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	791b      	ldrb	r3, [r3, #4]
 8006596:	2b03      	cmp	r3, #3
 8006598:	d003      	beq.n	80065a2 <USB_EPClearStall+0x9e>
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	791b      	ldrb	r3, [r3, #4]
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d10f      	bne.n	80065c2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	015a      	lsls	r2, r3, #5
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	4413      	add	r3, r2
 80065aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	68ba      	ldr	r2, [r7, #8]
 80065b2:	0151      	lsls	r1, r2, #5
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	440a      	add	r2, r1
 80065b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065c0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3714      	adds	r7, #20
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b085      	sub	sp, #20
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	460b      	mov	r3, r1
 80065da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065ee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80065f2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	78fb      	ldrb	r3, [r7, #3]
 80065fe:	011b      	lsls	r3, r3, #4
 8006600:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006604:	68f9      	ldr	r1, [r7, #12]
 8006606:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800660a:	4313      	orrs	r3, r2
 800660c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3714      	adds	r7, #20
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006636:	f023 0303 	bic.w	r3, r3, #3
 800663a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800664a:	f023 0302 	bic.w	r3, r3, #2
 800664e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3714      	adds	r7, #20
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr

0800665e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800665e:	b480      	push	{r7}
 8006660:	b085      	sub	sp, #20
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006678:	f023 0303 	bic.w	r3, r3, #3
 800667c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800668c:	f043 0302 	orr.w	r3, r3, #2
 8006690:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	3714      	adds	r7, #20
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	695b      	ldr	r3, [r3, #20]
 80066ac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	699b      	ldr	r3, [r3, #24]
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	4013      	ands	r3, r2
 80066b6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80066b8:	68fb      	ldr	r3, [r7, #12]
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3714      	adds	r7, #20
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr

080066c6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80066c6:	b480      	push	{r7}
 80066c8:	b085      	sub	sp, #20
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066d8:	699b      	ldr	r3, [r3, #24]
 80066da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066e2:	69db      	ldr	r3, [r3, #28]
 80066e4:	68ba      	ldr	r2, [r7, #8]
 80066e6:	4013      	ands	r3, r2
 80066e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	0c1b      	lsrs	r3, r3, #16
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3714      	adds	r7, #20
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr

080066fa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80066fa:	b480      	push	{r7}
 80066fc:	b085      	sub	sp, #20
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006716:	69db      	ldr	r3, [r3, #28]
 8006718:	68ba      	ldr	r2, [r7, #8]
 800671a:	4013      	ands	r3, r2
 800671c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	b29b      	uxth	r3, r3
}
 8006722:	4618      	mov	r0, r3
 8006724:	3714      	adds	r7, #20
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr

0800672e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800672e:	b480      	push	{r7}
 8006730:	b085      	sub	sp, #20
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
 8006736:	460b      	mov	r3, r1
 8006738:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800673e:	78fb      	ldrb	r3, [r7, #3]
 8006740:	015a      	lsls	r2, r3, #5
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	4413      	add	r3, r2
 8006746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006754:	695b      	ldr	r3, [r3, #20]
 8006756:	68ba      	ldr	r2, [r7, #8]
 8006758:	4013      	ands	r3, r2
 800675a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800675c:	68bb      	ldr	r3, [r7, #8]
}
 800675e:	4618      	mov	r0, r3
 8006760:	3714      	adds	r7, #20
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr

0800676a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800676a:	b480      	push	{r7}
 800676c:	b087      	sub	sp, #28
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
 8006772:	460b      	mov	r3, r1
 8006774:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800678a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800678c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800678e:	78fb      	ldrb	r3, [r7, #3]
 8006790:	f003 030f 	and.w	r3, r3, #15
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	fa22 f303 	lsr.w	r3, r2, r3
 800679a:	01db      	lsls	r3, r3, #7
 800679c:	b2db      	uxtb	r3, r3
 800679e:	693a      	ldr	r2, [r7, #16]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80067a4:	78fb      	ldrb	r3, [r7, #3]
 80067a6:	015a      	lsls	r2, r3, #5
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	4413      	add	r3, r2
 80067ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	693a      	ldr	r2, [r7, #16]
 80067b4:	4013      	ands	r3, r2
 80067b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80067b8:	68bb      	ldr	r3, [r7, #8]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	371c      	adds	r7, #28
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr

080067c6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80067c6:	b480      	push	{r7}
 80067c8:	b083      	sub	sp, #12
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	695b      	ldr	r3, [r3, #20]
 80067d2:	f003 0301 	and.w	r3, r3, #1
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	370c      	adds	r7, #12
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr

080067e2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80067e2:	b480      	push	{r7}
 80067e4:	b085      	sub	sp, #20
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	68fa      	ldr	r2, [r7, #12]
 80067f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067fc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006800:	f023 0307 	bic.w	r3, r3, #7
 8006804:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006818:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800681a:	2300      	movs	r3, #0
}
 800681c:	4618      	mov	r0, r3
 800681e:	3714      	adds	r7, #20
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006828:	b480      	push	{r7}
 800682a:	b087      	sub	sp, #28
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	460b      	mov	r3, r1
 8006832:	607a      	str	r2, [r7, #4]
 8006834:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	333c      	adds	r3, #60	; 0x3c
 800683e:	3304      	adds	r3, #4
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	4a26      	ldr	r2, [pc, #152]	; (80068e0 <USB_EP0_OutStart+0xb8>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d90a      	bls.n	8006862 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006858:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800685c:	d101      	bne.n	8006862 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800685e:	2300      	movs	r3, #0
 8006860:	e037      	b.n	80068d2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006868:	461a      	mov	r2, r3
 800686a:	2300      	movs	r3, #0
 800686c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	697a      	ldr	r2, [r7, #20]
 8006878:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800687c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006880:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	697a      	ldr	r2, [r7, #20]
 800688c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006890:	f043 0318 	orr.w	r3, r3, #24
 8006894:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	697a      	ldr	r2, [r7, #20]
 80068a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068a4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80068a8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80068aa:	7afb      	ldrb	r3, [r7, #11]
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d10f      	bne.n	80068d0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b6:	461a      	mov	r2, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	697a      	ldr	r2, [r7, #20]
 80068c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068ca:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80068ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	371c      	adds	r7, #28
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr
 80068de:	bf00      	nop
 80068e0:	4f54300a 	.word	0x4f54300a

080068e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068ec:	2300      	movs	r3, #0
 80068ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	3301      	adds	r3, #1
 80068f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	4a13      	ldr	r2, [pc, #76]	; (8006948 <USB_CoreReset+0x64>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d901      	bls.n	8006902 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80068fe:	2303      	movs	r3, #3
 8006900:	e01b      	b.n	800693a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	2b00      	cmp	r3, #0
 8006908:	daf2      	bge.n	80068f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800690a:	2300      	movs	r3, #0
 800690c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	f043 0201 	orr.w	r2, r3, #1
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	3301      	adds	r3, #1
 800691e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	4a09      	ldr	r2, [pc, #36]	; (8006948 <USB_CoreReset+0x64>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d901      	bls.n	800692c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006928:	2303      	movs	r3, #3
 800692a:	e006      	b.n	800693a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	f003 0301 	and.w	r3, r3, #1
 8006934:	2b01      	cmp	r3, #1
 8006936:	d0f0      	beq.n	800691a <USB_CoreReset+0x36>

  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3714      	adds	r7, #20
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr
 8006946:	bf00      	nop
 8006948:	00030d40 	.word	0x00030d40

0800694c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	460b      	mov	r3, r1
 8006956:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006958:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800695c:	f002 fc28 	bl	80091b0 <USBD_static_malloc>
 8006960:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d109      	bne.n	800697c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	32b0      	adds	r2, #176	; 0xb0
 8006972:	2100      	movs	r1, #0
 8006974:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006978:	2302      	movs	r3, #2
 800697a:	e0d4      	b.n	8006b26 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800697c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006980:	2100      	movs	r1, #0
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	f002 fc7c 	bl	8009280 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	32b0      	adds	r2, #176	; 0xb0
 8006992:	68f9      	ldr	r1, [r7, #12]
 8006994:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	32b0      	adds	r2, #176	; 0xb0
 80069a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	7c1b      	ldrb	r3, [r3, #16]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d138      	bne.n	8006a26 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80069b4:	4b5e      	ldr	r3, [pc, #376]	; (8006b30 <USBD_CDC_Init+0x1e4>)
 80069b6:	7819      	ldrb	r1, [r3, #0]
 80069b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069bc:	2202      	movs	r2, #2
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f002 fad3 	bl	8008f6a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80069c4:	4b5a      	ldr	r3, [pc, #360]	; (8006b30 <USBD_CDC_Init+0x1e4>)
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	f003 020f 	and.w	r2, r3, #15
 80069cc:	6879      	ldr	r1, [r7, #4]
 80069ce:	4613      	mov	r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4413      	add	r3, r2
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	440b      	add	r3, r1
 80069d8:	3324      	adds	r3, #36	; 0x24
 80069da:	2201      	movs	r2, #1
 80069dc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80069de:	4b55      	ldr	r3, [pc, #340]	; (8006b34 <USBD_CDC_Init+0x1e8>)
 80069e0:	7819      	ldrb	r1, [r3, #0]
 80069e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069e6:	2202      	movs	r2, #2
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f002 fabe 	bl	8008f6a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80069ee:	4b51      	ldr	r3, [pc, #324]	; (8006b34 <USBD_CDC_Init+0x1e8>)
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	f003 020f 	and.w	r2, r3, #15
 80069f6:	6879      	ldr	r1, [r7, #4]
 80069f8:	4613      	mov	r3, r2
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	4413      	add	r3, r2
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	440b      	add	r3, r1
 8006a02:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006a06:	2201      	movs	r2, #1
 8006a08:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006a0a:	4b4b      	ldr	r3, [pc, #300]	; (8006b38 <USBD_CDC_Init+0x1ec>)
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	f003 020f 	and.w	r2, r3, #15
 8006a12:	6879      	ldr	r1, [r7, #4]
 8006a14:	4613      	mov	r3, r2
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	4413      	add	r3, r2
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	440b      	add	r3, r1
 8006a1e:	3326      	adds	r3, #38	; 0x26
 8006a20:	2210      	movs	r2, #16
 8006a22:	801a      	strh	r2, [r3, #0]
 8006a24:	e035      	b.n	8006a92 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006a26:	4b42      	ldr	r3, [pc, #264]	; (8006b30 <USBD_CDC_Init+0x1e4>)
 8006a28:	7819      	ldrb	r1, [r3, #0]
 8006a2a:	2340      	movs	r3, #64	; 0x40
 8006a2c:	2202      	movs	r2, #2
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f002 fa9b 	bl	8008f6a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006a34:	4b3e      	ldr	r3, [pc, #248]	; (8006b30 <USBD_CDC_Init+0x1e4>)
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	f003 020f 	and.w	r2, r3, #15
 8006a3c:	6879      	ldr	r1, [r7, #4]
 8006a3e:	4613      	mov	r3, r2
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	4413      	add	r3, r2
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	440b      	add	r3, r1
 8006a48:	3324      	adds	r3, #36	; 0x24
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006a4e:	4b39      	ldr	r3, [pc, #228]	; (8006b34 <USBD_CDC_Init+0x1e8>)
 8006a50:	7819      	ldrb	r1, [r3, #0]
 8006a52:	2340      	movs	r3, #64	; 0x40
 8006a54:	2202      	movs	r2, #2
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f002 fa87 	bl	8008f6a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006a5c:	4b35      	ldr	r3, [pc, #212]	; (8006b34 <USBD_CDC_Init+0x1e8>)
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	f003 020f 	and.w	r2, r3, #15
 8006a64:	6879      	ldr	r1, [r7, #4]
 8006a66:	4613      	mov	r3, r2
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	4413      	add	r3, r2
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	440b      	add	r3, r1
 8006a70:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006a74:	2201      	movs	r2, #1
 8006a76:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006a78:	4b2f      	ldr	r3, [pc, #188]	; (8006b38 <USBD_CDC_Init+0x1ec>)
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	f003 020f 	and.w	r2, r3, #15
 8006a80:	6879      	ldr	r1, [r7, #4]
 8006a82:	4613      	mov	r3, r2
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	4413      	add	r3, r2
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	440b      	add	r3, r1
 8006a8c:	3326      	adds	r3, #38	; 0x26
 8006a8e:	2210      	movs	r2, #16
 8006a90:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006a92:	4b29      	ldr	r3, [pc, #164]	; (8006b38 <USBD_CDC_Init+0x1ec>)
 8006a94:	7819      	ldrb	r1, [r3, #0]
 8006a96:	2308      	movs	r3, #8
 8006a98:	2203      	movs	r2, #3
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f002 fa65 	bl	8008f6a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006aa0:	4b25      	ldr	r3, [pc, #148]	; (8006b38 <USBD_CDC_Init+0x1ec>)
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	f003 020f 	and.w	r2, r3, #15
 8006aa8:	6879      	ldr	r1, [r7, #4]
 8006aaa:	4613      	mov	r3, r2
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	4413      	add	r3, r2
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	440b      	add	r3, r1
 8006ab4:	3324      	adds	r3, #36	; 0x24
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	33b0      	adds	r3, #176	; 0xb0
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	4413      	add	r3, r2
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d101      	bne.n	8006af4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006af0:	2302      	movs	r3, #2
 8006af2:	e018      	b.n	8006b26 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	7c1b      	ldrb	r3, [r3, #16]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d10a      	bne.n	8006b12 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006afc:	4b0d      	ldr	r3, [pc, #52]	; (8006b34 <USBD_CDC_Init+0x1e8>)
 8006afe:	7819      	ldrb	r1, [r3, #0]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f002 fb1c 	bl	8009148 <USBD_LL_PrepareReceive>
 8006b10:	e008      	b.n	8006b24 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006b12:	4b08      	ldr	r3, [pc, #32]	; (8006b34 <USBD_CDC_Init+0x1e8>)
 8006b14:	7819      	ldrb	r1, [r3, #0]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b1c:	2340      	movs	r3, #64	; 0x40
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f002 fb12 	bl	8009148 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3710      	adds	r7, #16
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	20000093 	.word	0x20000093
 8006b34:	20000094 	.word	0x20000094
 8006b38:	20000095 	.word	0x20000095

08006b3c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	460b      	mov	r3, r1
 8006b46:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006b48:	4b3a      	ldr	r3, [pc, #232]	; (8006c34 <USBD_CDC_DeInit+0xf8>)
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f002 fa31 	bl	8008fb6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006b54:	4b37      	ldr	r3, [pc, #220]	; (8006c34 <USBD_CDC_DeInit+0xf8>)
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	f003 020f 	and.w	r2, r3, #15
 8006b5c:	6879      	ldr	r1, [r7, #4]
 8006b5e:	4613      	mov	r3, r2
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	4413      	add	r3, r2
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	440b      	add	r3, r1
 8006b68:	3324      	adds	r3, #36	; 0x24
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006b6e:	4b32      	ldr	r3, [pc, #200]	; (8006c38 <USBD_CDC_DeInit+0xfc>)
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	4619      	mov	r1, r3
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f002 fa1e 	bl	8008fb6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006b7a:	4b2f      	ldr	r3, [pc, #188]	; (8006c38 <USBD_CDC_DeInit+0xfc>)
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	f003 020f 	and.w	r2, r3, #15
 8006b82:	6879      	ldr	r1, [r7, #4]
 8006b84:	4613      	mov	r3, r2
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	4413      	add	r3, r2
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	440b      	add	r3, r1
 8006b8e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006b92:	2200      	movs	r2, #0
 8006b94:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006b96:	4b29      	ldr	r3, [pc, #164]	; (8006c3c <USBD_CDC_DeInit+0x100>)
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f002 fa0a 	bl	8008fb6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006ba2:	4b26      	ldr	r3, [pc, #152]	; (8006c3c <USBD_CDC_DeInit+0x100>)
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	f003 020f 	and.w	r2, r3, #15
 8006baa:	6879      	ldr	r1, [r7, #4]
 8006bac:	4613      	mov	r3, r2
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	4413      	add	r3, r2
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	440b      	add	r3, r1
 8006bb6:	3324      	adds	r3, #36	; 0x24
 8006bb8:	2200      	movs	r2, #0
 8006bba:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006bbc:	4b1f      	ldr	r3, [pc, #124]	; (8006c3c <USBD_CDC_DeInit+0x100>)
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	f003 020f 	and.w	r2, r3, #15
 8006bc4:	6879      	ldr	r1, [r7, #4]
 8006bc6:	4613      	mov	r3, r2
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	4413      	add	r3, r2
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	440b      	add	r3, r1
 8006bd0:	3326      	adds	r3, #38	; 0x26
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	32b0      	adds	r2, #176	; 0xb0
 8006be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d01f      	beq.n	8006c28 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	33b0      	adds	r3, #176	; 0xb0
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	4413      	add	r3, r2
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	32b0      	adds	r2, #176	; 0xb0
 8006c06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f002 fade 	bl	80091cc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	32b0      	adds	r2, #176	; 0xb0
 8006c1a:	2100      	movs	r1, #0
 8006c1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3708      	adds	r7, #8
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	20000093 	.word	0x20000093
 8006c38:	20000094 	.word	0x20000094
 8006c3c:	20000095 	.word	0x20000095

08006c40 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b086      	sub	sp, #24
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	32b0      	adds	r2, #176	; 0xb0
 8006c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c58:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c62:	2300      	movs	r3, #0
 8006c64:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d101      	bne.n	8006c70 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	e0bf      	b.n	8006df0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d050      	beq.n	8006d1e <USBD_CDC_Setup+0xde>
 8006c7c:	2b20      	cmp	r3, #32
 8006c7e:	f040 80af 	bne.w	8006de0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	88db      	ldrh	r3, [r3, #6]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d03a      	beq.n	8006d00 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	b25b      	sxtb	r3, r3
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	da1b      	bge.n	8006ccc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	33b0      	adds	r3, #176	; 0xb0
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	4413      	add	r3, r2
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	683a      	ldr	r2, [r7, #0]
 8006ca8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006caa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006cac:	683a      	ldr	r2, [r7, #0]
 8006cae:	88d2      	ldrh	r2, [r2, #6]
 8006cb0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	88db      	ldrh	r3, [r3, #6]
 8006cb6:	2b07      	cmp	r3, #7
 8006cb8:	bf28      	it	cs
 8006cba:	2307      	movcs	r3, #7
 8006cbc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	89fa      	ldrh	r2, [r7, #14]
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f001 fd43 	bl	8008750 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006cca:	e090      	b.n	8006dee <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	785a      	ldrb	r2, [r3, #1]
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	88db      	ldrh	r3, [r3, #6]
 8006cda:	2b3f      	cmp	r3, #63	; 0x3f
 8006cdc:	d803      	bhi.n	8006ce6 <USBD_CDC_Setup+0xa6>
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	88db      	ldrh	r3, [r3, #6]
 8006ce2:	b2da      	uxtb	r2, r3
 8006ce4:	e000      	b.n	8006ce8 <USBD_CDC_Setup+0xa8>
 8006ce6:	2240      	movs	r2, #64	; 0x40
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006cee:	6939      	ldr	r1, [r7, #16]
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f001 fd55 	bl	80087a8 <USBD_CtlPrepareRx>
      break;
 8006cfe:	e076      	b.n	8006dee <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	33b0      	adds	r3, #176	; 0xb0
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	4413      	add	r3, r2
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	683a      	ldr	r2, [r7, #0]
 8006d14:	7850      	ldrb	r0, [r2, #1]
 8006d16:	2200      	movs	r2, #0
 8006d18:	6839      	ldr	r1, [r7, #0]
 8006d1a:	4798      	blx	r3
      break;
 8006d1c:	e067      	b.n	8006dee <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	785b      	ldrb	r3, [r3, #1]
 8006d22:	2b0b      	cmp	r3, #11
 8006d24:	d851      	bhi.n	8006dca <USBD_CDC_Setup+0x18a>
 8006d26:	a201      	add	r2, pc, #4	; (adr r2, 8006d2c <USBD_CDC_Setup+0xec>)
 8006d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d2c:	08006d5d 	.word	0x08006d5d
 8006d30:	08006dd9 	.word	0x08006dd9
 8006d34:	08006dcb 	.word	0x08006dcb
 8006d38:	08006dcb 	.word	0x08006dcb
 8006d3c:	08006dcb 	.word	0x08006dcb
 8006d40:	08006dcb 	.word	0x08006dcb
 8006d44:	08006dcb 	.word	0x08006dcb
 8006d48:	08006dcb 	.word	0x08006dcb
 8006d4c:	08006dcb 	.word	0x08006dcb
 8006d50:	08006dcb 	.word	0x08006dcb
 8006d54:	08006d87 	.word	0x08006d87
 8006d58:	08006db1 	.word	0x08006db1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	2b03      	cmp	r3, #3
 8006d66:	d107      	bne.n	8006d78 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006d68:	f107 030a 	add.w	r3, r7, #10
 8006d6c:	2202      	movs	r2, #2
 8006d6e:	4619      	mov	r1, r3
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f001 fced 	bl	8008750 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d76:	e032      	b.n	8006dde <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006d78:	6839      	ldr	r1, [r7, #0]
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f001 fc77 	bl	800866e <USBD_CtlError>
            ret = USBD_FAIL;
 8006d80:	2303      	movs	r3, #3
 8006d82:	75fb      	strb	r3, [r7, #23]
          break;
 8006d84:	e02b      	b.n	8006dde <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	2b03      	cmp	r3, #3
 8006d90:	d107      	bne.n	8006da2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006d92:	f107 030d 	add.w	r3, r7, #13
 8006d96:	2201      	movs	r2, #1
 8006d98:	4619      	mov	r1, r3
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f001 fcd8 	bl	8008750 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006da0:	e01d      	b.n	8006dde <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006da2:	6839      	ldr	r1, [r7, #0]
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f001 fc62 	bl	800866e <USBD_CtlError>
            ret = USBD_FAIL;
 8006daa:	2303      	movs	r3, #3
 8006dac:	75fb      	strb	r3, [r7, #23]
          break;
 8006dae:	e016      	b.n	8006dde <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	2b03      	cmp	r3, #3
 8006dba:	d00f      	beq.n	8006ddc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006dbc:	6839      	ldr	r1, [r7, #0]
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f001 fc55 	bl	800866e <USBD_CtlError>
            ret = USBD_FAIL;
 8006dc4:	2303      	movs	r3, #3
 8006dc6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006dc8:	e008      	b.n	8006ddc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006dca:	6839      	ldr	r1, [r7, #0]
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f001 fc4e 	bl	800866e <USBD_CtlError>
          ret = USBD_FAIL;
 8006dd2:	2303      	movs	r3, #3
 8006dd4:	75fb      	strb	r3, [r7, #23]
          break;
 8006dd6:	e002      	b.n	8006dde <USBD_CDC_Setup+0x19e>
          break;
 8006dd8:	bf00      	nop
 8006dda:	e008      	b.n	8006dee <USBD_CDC_Setup+0x1ae>
          break;
 8006ddc:	bf00      	nop
      }
      break;
 8006dde:	e006      	b.n	8006dee <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006de0:	6839      	ldr	r1, [r7, #0]
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f001 fc43 	bl	800866e <USBD_CtlError>
      ret = USBD_FAIL;
 8006de8:	2303      	movs	r3, #3
 8006dea:	75fb      	strb	r3, [r7, #23]
      break;
 8006dec:	bf00      	nop
  }

  return (uint8_t)ret;
 8006dee:	7dfb      	ldrb	r3, [r7, #23]
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3718      	adds	r7, #24
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	460b      	mov	r3, r1
 8006e02:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006e0a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	32b0      	adds	r2, #176	; 0xb0
 8006e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d101      	bne.n	8006e22 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006e1e:	2303      	movs	r3, #3
 8006e20:	e065      	b.n	8006eee <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	32b0      	adds	r2, #176	; 0xb0
 8006e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e30:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006e32:	78fb      	ldrb	r3, [r7, #3]
 8006e34:	f003 020f 	and.w	r2, r3, #15
 8006e38:	6879      	ldr	r1, [r7, #4]
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	4413      	add	r3, r2
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	440b      	add	r3, r1
 8006e44:	3318      	adds	r3, #24
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d02f      	beq.n	8006eac <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006e4c:	78fb      	ldrb	r3, [r7, #3]
 8006e4e:	f003 020f 	and.w	r2, r3, #15
 8006e52:	6879      	ldr	r1, [r7, #4]
 8006e54:	4613      	mov	r3, r2
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	4413      	add	r3, r2
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	440b      	add	r3, r1
 8006e5e:	3318      	adds	r3, #24
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	78fb      	ldrb	r3, [r7, #3]
 8006e64:	f003 010f 	and.w	r1, r3, #15
 8006e68:	68f8      	ldr	r0, [r7, #12]
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	00db      	lsls	r3, r3, #3
 8006e6e:	440b      	add	r3, r1
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	4403      	add	r3, r0
 8006e74:	3348      	adds	r3, #72	; 0x48
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	fbb2 f1f3 	udiv	r1, r2, r3
 8006e7c:	fb01 f303 	mul.w	r3, r1, r3
 8006e80:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d112      	bne.n	8006eac <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006e86:	78fb      	ldrb	r3, [r7, #3]
 8006e88:	f003 020f 	and.w	r2, r3, #15
 8006e8c:	6879      	ldr	r1, [r7, #4]
 8006e8e:	4613      	mov	r3, r2
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	4413      	add	r3, r2
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	440b      	add	r3, r1
 8006e98:	3318      	adds	r3, #24
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006e9e:	78f9      	ldrb	r1, [r7, #3]
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f002 f92e 	bl	8009106 <USBD_LL_Transmit>
 8006eaa:	e01f      	b.n	8006eec <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	33b0      	adds	r3, #176	; 0xb0
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	4413      	add	r3, r2
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d010      	beq.n	8006eec <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	33b0      	adds	r3, #176	; 0xb0
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	4413      	add	r3, r2
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	68ba      	ldr	r2, [r7, #8]
 8006ede:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006ee2:	68ba      	ldr	r2, [r7, #8]
 8006ee4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006ee8:	78fa      	ldrb	r2, [r7, #3]
 8006eea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3710      	adds	r7, #16
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ef6:	b580      	push	{r7, lr}
 8006ef8:	b084      	sub	sp, #16
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
 8006efe:	460b      	mov	r3, r1
 8006f00:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	32b0      	adds	r2, #176	; 0xb0
 8006f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f10:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	32b0      	adds	r2, #176	; 0xb0
 8006f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d101      	bne.n	8006f28 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006f24:	2303      	movs	r3, #3
 8006f26:	e01a      	b.n	8006f5e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006f28:	78fb      	ldrb	r3, [r7, #3]
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f002 f92c 	bl	800918a <USBD_LL_GetRxDataSize>
 8006f32:	4602      	mov	r2, r0
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	33b0      	adds	r3, #176	; 0xb0
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	4413      	add	r3, r2
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006f58:	4611      	mov	r1, r2
 8006f5a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006f5c:	2300      	movs	r3, #0
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3710      	adds	r7, #16
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}

08006f66 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006f66:	b580      	push	{r7, lr}
 8006f68:	b084      	sub	sp, #16
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	32b0      	adds	r2, #176	; 0xb0
 8006f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f7c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d101      	bne.n	8006f88 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006f84:	2303      	movs	r3, #3
 8006f86:	e025      	b.n	8006fd4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	33b0      	adds	r3, #176	; 0xb0
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	4413      	add	r3, r2
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d01a      	beq.n	8006fd2 <USBD_CDC_EP0_RxReady+0x6c>
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006fa2:	2bff      	cmp	r3, #255	; 0xff
 8006fa4:	d015      	beq.n	8006fd2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	33b0      	adds	r3, #176	; 0xb0
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	4413      	add	r3, r2
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	68fa      	ldr	r2, [r7, #12]
 8006fba:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006fbe:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006fc6:	b292      	uxth	r2, r2
 8006fc8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	22ff      	movs	r2, #255	; 0xff
 8006fce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3710      	adds	r7, #16
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b086      	sub	sp, #24
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006fe4:	2182      	movs	r1, #130	; 0x82
 8006fe6:	4818      	ldr	r0, [pc, #96]	; (8007048 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006fe8:	f000 fd09 	bl	80079fe <USBD_GetEpDesc>
 8006fec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006fee:	2101      	movs	r1, #1
 8006ff0:	4815      	ldr	r0, [pc, #84]	; (8007048 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006ff2:	f000 fd04 	bl	80079fe <USBD_GetEpDesc>
 8006ff6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006ff8:	2181      	movs	r1, #129	; 0x81
 8006ffa:	4813      	ldr	r0, [pc, #76]	; (8007048 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006ffc:	f000 fcff 	bl	80079fe <USBD_GetEpDesc>
 8007000:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d002      	beq.n	800700e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	2210      	movs	r2, #16
 800700c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d006      	beq.n	8007022 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	2200      	movs	r2, #0
 8007018:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800701c:	711a      	strb	r2, [r3, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d006      	beq.n	8007036 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2200      	movs	r2, #0
 800702c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007030:	711a      	strb	r2, [r3, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2243      	movs	r2, #67	; 0x43
 800703a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800703c:	4b02      	ldr	r3, [pc, #8]	; (8007048 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800703e:	4618      	mov	r0, r3
 8007040:	3718      	adds	r7, #24
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	20000050 	.word	0x20000050

0800704c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b086      	sub	sp, #24
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007054:	2182      	movs	r1, #130	; 0x82
 8007056:	4818      	ldr	r0, [pc, #96]	; (80070b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007058:	f000 fcd1 	bl	80079fe <USBD_GetEpDesc>
 800705c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800705e:	2101      	movs	r1, #1
 8007060:	4815      	ldr	r0, [pc, #84]	; (80070b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007062:	f000 fccc 	bl	80079fe <USBD_GetEpDesc>
 8007066:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007068:	2181      	movs	r1, #129	; 0x81
 800706a:	4813      	ldr	r0, [pc, #76]	; (80070b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800706c:	f000 fcc7 	bl	80079fe <USBD_GetEpDesc>
 8007070:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d002      	beq.n	800707e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	2210      	movs	r2, #16
 800707c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d006      	beq.n	8007092 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	2200      	movs	r2, #0
 8007088:	711a      	strb	r2, [r3, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	f042 0202 	orr.w	r2, r2, #2
 8007090:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d006      	beq.n	80070a6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2200      	movs	r2, #0
 800709c:	711a      	strb	r2, [r3, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	f042 0202 	orr.w	r2, r2, #2
 80070a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2243      	movs	r2, #67	; 0x43
 80070aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80070ac:	4b02      	ldr	r3, [pc, #8]	; (80070b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3718      	adds	r7, #24
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	20000050 	.word	0x20000050

080070bc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b086      	sub	sp, #24
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80070c4:	2182      	movs	r1, #130	; 0x82
 80070c6:	4818      	ldr	r0, [pc, #96]	; (8007128 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80070c8:	f000 fc99 	bl	80079fe <USBD_GetEpDesc>
 80070cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80070ce:	2101      	movs	r1, #1
 80070d0:	4815      	ldr	r0, [pc, #84]	; (8007128 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80070d2:	f000 fc94 	bl	80079fe <USBD_GetEpDesc>
 80070d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80070d8:	2181      	movs	r1, #129	; 0x81
 80070da:	4813      	ldr	r0, [pc, #76]	; (8007128 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80070dc:	f000 fc8f 	bl	80079fe <USBD_GetEpDesc>
 80070e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d002      	beq.n	80070ee <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	2210      	movs	r2, #16
 80070ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d006      	beq.n	8007102 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070fc:	711a      	strb	r2, [r3, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d006      	beq.n	8007116 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2200      	movs	r2, #0
 800710c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007110:	711a      	strb	r2, [r3, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2243      	movs	r2, #67	; 0x43
 800711a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800711c:	4b02      	ldr	r3, [pc, #8]	; (8007128 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800711e:	4618      	mov	r0, r3
 8007120:	3718      	adds	r7, #24
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	20000050 	.word	0x20000050

0800712c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	220a      	movs	r2, #10
 8007138:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800713a:	4b03      	ldr	r3, [pc, #12]	; (8007148 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800713c:	4618      	mov	r0, r3
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr
 8007148:	2000000c 	.word	0x2000000c

0800714c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d101      	bne.n	8007160 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800715c:	2303      	movs	r3, #3
 800715e:	e009      	b.n	8007174 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	33b0      	adds	r3, #176	; 0xb0
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	4413      	add	r3, r2
 800716e:	683a      	ldr	r2, [r7, #0]
 8007170:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	370c      	adds	r7, #12
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007180:	b480      	push	{r7}
 8007182:	b087      	sub	sp, #28
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	32b0      	adds	r2, #176	; 0xb0
 8007196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800719a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d101      	bne.n	80071a6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80071a2:	2303      	movs	r3, #3
 80071a4:	e008      	b.n	80071b8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	68ba      	ldr	r2, [r7, #8]
 80071aa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80071b6:	2300      	movs	r3, #0
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	371c      	adds	r7, #28
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b085      	sub	sp, #20
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	32b0      	adds	r2, #176	; 0xb0
 80071d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071dc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d101      	bne.n	80071e8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80071e4:	2303      	movs	r3, #3
 80071e6:	e004      	b.n	80071f2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	683a      	ldr	r2, [r7, #0]
 80071ec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3714      	adds	r7, #20
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr
	...

08007200 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	32b0      	adds	r2, #176	; 0xb0
 8007212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007216:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	32b0      	adds	r2, #176	; 0xb0
 8007222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d101      	bne.n	800722e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800722a:	2303      	movs	r3, #3
 800722c:	e018      	b.n	8007260 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	7c1b      	ldrb	r3, [r3, #16]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d10a      	bne.n	800724c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007236:	4b0c      	ldr	r3, [pc, #48]	; (8007268 <USBD_CDC_ReceivePacket+0x68>)
 8007238:	7819      	ldrb	r1, [r3, #0]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007240:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f001 ff7f 	bl	8009148 <USBD_LL_PrepareReceive>
 800724a:	e008      	b.n	800725e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800724c:	4b06      	ldr	r3, [pc, #24]	; (8007268 <USBD_CDC_ReceivePacket+0x68>)
 800724e:	7819      	ldrb	r1, [r3, #0]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007256:	2340      	movs	r3, #64	; 0x40
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f001 ff75 	bl	8009148 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800725e:	2300      	movs	r3, #0
}
 8007260:	4618      	mov	r0, r3
 8007262:	3710      	adds	r7, #16
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}
 8007268:	20000094 	.word	0x20000094

0800726c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b086      	sub	sp, #24
 8007270:	af00      	add	r7, sp, #0
 8007272:	60f8      	str	r0, [r7, #12]
 8007274:	60b9      	str	r1, [r7, #8]
 8007276:	4613      	mov	r3, r2
 8007278:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d101      	bne.n	8007284 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007280:	2303      	movs	r3, #3
 8007282:	e01f      	b.n	80072c4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2200      	movs	r2, #0
 8007288:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2200      	movs	r2, #0
 8007290:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2200      	movs	r2, #0
 8007298:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d003      	beq.n	80072aa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	68ba      	ldr	r2, [r7, #8]
 80072a6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2201      	movs	r2, #1
 80072ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	79fa      	ldrb	r2, [r7, #7]
 80072b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	f001 fdef 	bl	8008e9c <USBD_LL_Init>
 80072be:	4603      	mov	r3, r0
 80072c0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80072c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3718      	adds	r7, #24
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80072d6:	2300      	movs	r3, #0
 80072d8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d101      	bne.n	80072e4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80072e0:	2303      	movs	r3, #3
 80072e2:	e025      	b.n	8007330 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	683a      	ldr	r2, [r7, #0]
 80072e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	32ae      	adds	r2, #174	; 0xae
 80072f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d00f      	beq.n	8007320 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	32ae      	adds	r2, #174	; 0xae
 800730a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800730e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007310:	f107 020e 	add.w	r2, r7, #14
 8007314:	4610      	mov	r0, r2
 8007316:	4798      	blx	r3
 8007318:	4602      	mov	r2, r0
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007326:	1c5a      	adds	r2, r3, #1
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800732e:	2300      	movs	r3, #0
}
 8007330:	4618      	mov	r0, r3
 8007332:	3710      	adds	r7, #16
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f001 fdf7 	bl	8008f34 <USBD_LL_Start>
 8007346:	4603      	mov	r3, r0
}
 8007348:	4618      	mov	r0, r3
 800734a:	3708      	adds	r7, #8
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007358:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800735a:	4618      	mov	r0, r3
 800735c:	370c      	adds	r7, #12
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr

08007366 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007366:	b580      	push	{r7, lr}
 8007368:	b084      	sub	sp, #16
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
 800736e:	460b      	mov	r3, r1
 8007370:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007372:	2300      	movs	r3, #0
 8007374:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800737c:	2b00      	cmp	r3, #0
 800737e:	d009      	beq.n	8007394 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	78fa      	ldrb	r2, [r7, #3]
 800738a:	4611      	mov	r1, r2
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	4798      	blx	r3
 8007390:	4603      	mov	r3, r0
 8007392:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007394:	7bfb      	ldrb	r3, [r7, #15]
}
 8007396:	4618      	mov	r0, r3
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}

0800739e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800739e:	b580      	push	{r7, lr}
 80073a0:	b084      	sub	sp, #16
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
 80073a6:	460b      	mov	r3, r1
 80073a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80073aa:	2300      	movs	r3, #0
 80073ac:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	78fa      	ldrb	r2, [r7, #3]
 80073b8:	4611      	mov	r1, r2
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	4798      	blx	r3
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d001      	beq.n	80073c8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80073c4:	2303      	movs	r3, #3
 80073c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80073c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b084      	sub	sp, #16
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
 80073da:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80073e2:	6839      	ldr	r1, [r7, #0]
 80073e4:	4618      	mov	r0, r3
 80073e6:	f001 f908 	bl	80085fa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2201      	movs	r2, #1
 80073ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80073f8:	461a      	mov	r2, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007406:	f003 031f 	and.w	r3, r3, #31
 800740a:	2b02      	cmp	r3, #2
 800740c:	d01a      	beq.n	8007444 <USBD_LL_SetupStage+0x72>
 800740e:	2b02      	cmp	r3, #2
 8007410:	d822      	bhi.n	8007458 <USBD_LL_SetupStage+0x86>
 8007412:	2b00      	cmp	r3, #0
 8007414:	d002      	beq.n	800741c <USBD_LL_SetupStage+0x4a>
 8007416:	2b01      	cmp	r3, #1
 8007418:	d00a      	beq.n	8007430 <USBD_LL_SetupStage+0x5e>
 800741a:	e01d      	b.n	8007458 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007422:	4619      	mov	r1, r3
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 fb5f 	bl	8007ae8 <USBD_StdDevReq>
 800742a:	4603      	mov	r3, r0
 800742c:	73fb      	strb	r3, [r7, #15]
      break;
 800742e:	e020      	b.n	8007472 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007436:	4619      	mov	r1, r3
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 fbc7 	bl	8007bcc <USBD_StdItfReq>
 800743e:	4603      	mov	r3, r0
 8007440:	73fb      	strb	r3, [r7, #15]
      break;
 8007442:	e016      	b.n	8007472 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800744a:	4619      	mov	r1, r3
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 fc29 	bl	8007ca4 <USBD_StdEPReq>
 8007452:	4603      	mov	r3, r0
 8007454:	73fb      	strb	r3, [r7, #15]
      break;
 8007456:	e00c      	b.n	8007472 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800745e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007462:	b2db      	uxtb	r3, r3
 8007464:	4619      	mov	r1, r3
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f001 fdc4 	bl	8008ff4 <USBD_LL_StallEP>
 800746c:	4603      	mov	r3, r0
 800746e:	73fb      	strb	r3, [r7, #15]
      break;
 8007470:	bf00      	nop
  }

  return ret;
 8007472:	7bfb      	ldrb	r3, [r7, #15]
}
 8007474:	4618      	mov	r0, r3
 8007476:	3710      	adds	r7, #16
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b086      	sub	sp, #24
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	460b      	mov	r3, r1
 8007486:	607a      	str	r2, [r7, #4]
 8007488:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800748a:	2300      	movs	r3, #0
 800748c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800748e:	7afb      	ldrb	r3, [r7, #11]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d16e      	bne.n	8007572 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800749a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80074a2:	2b03      	cmp	r3, #3
 80074a4:	f040 8098 	bne.w	80075d8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	689a      	ldr	r2, [r3, #8]
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d913      	bls.n	80074dc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	689a      	ldr	r2, [r3, #8]
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	1ad2      	subs	r2, r2, r3
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	68da      	ldr	r2, [r3, #12]
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	4293      	cmp	r3, r2
 80074cc:	bf28      	it	cs
 80074ce:	4613      	movcs	r3, r2
 80074d0:	461a      	mov	r2, r3
 80074d2:	6879      	ldr	r1, [r7, #4]
 80074d4:	68f8      	ldr	r0, [r7, #12]
 80074d6:	f001 f984 	bl	80087e2 <USBD_CtlContinueRx>
 80074da:	e07d      	b.n	80075d8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80074e2:	f003 031f 	and.w	r3, r3, #31
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	d014      	beq.n	8007514 <USBD_LL_DataOutStage+0x98>
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d81d      	bhi.n	800752a <USBD_LL_DataOutStage+0xae>
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d002      	beq.n	80074f8 <USBD_LL_DataOutStage+0x7c>
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d003      	beq.n	80074fe <USBD_LL_DataOutStage+0x82>
 80074f6:	e018      	b.n	800752a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80074f8:	2300      	movs	r3, #0
 80074fa:	75bb      	strb	r3, [r7, #22]
            break;
 80074fc:	e018      	b.n	8007530 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007504:	b2db      	uxtb	r3, r3
 8007506:	4619      	mov	r1, r3
 8007508:	68f8      	ldr	r0, [r7, #12]
 800750a:	f000 fa5e 	bl	80079ca <USBD_CoreFindIF>
 800750e:	4603      	mov	r3, r0
 8007510:	75bb      	strb	r3, [r7, #22]
            break;
 8007512:	e00d      	b.n	8007530 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800751a:	b2db      	uxtb	r3, r3
 800751c:	4619      	mov	r1, r3
 800751e:	68f8      	ldr	r0, [r7, #12]
 8007520:	f000 fa60 	bl	80079e4 <USBD_CoreFindEP>
 8007524:	4603      	mov	r3, r0
 8007526:	75bb      	strb	r3, [r7, #22]
            break;
 8007528:	e002      	b.n	8007530 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800752a:	2300      	movs	r3, #0
 800752c:	75bb      	strb	r3, [r7, #22]
            break;
 800752e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007530:	7dbb      	ldrb	r3, [r7, #22]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d119      	bne.n	800756a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800753c:	b2db      	uxtb	r3, r3
 800753e:	2b03      	cmp	r3, #3
 8007540:	d113      	bne.n	800756a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007542:	7dba      	ldrb	r2, [r7, #22]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	32ae      	adds	r2, #174	; 0xae
 8007548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800754c:	691b      	ldr	r3, [r3, #16]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d00b      	beq.n	800756a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007552:	7dba      	ldrb	r2, [r7, #22]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800755a:	7dba      	ldrb	r2, [r7, #22]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	32ae      	adds	r2, #174	; 0xae
 8007560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	68f8      	ldr	r0, [r7, #12]
 8007568:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	f001 f94a 	bl	8008804 <USBD_CtlSendStatus>
 8007570:	e032      	b.n	80075d8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007572:	7afb      	ldrb	r3, [r7, #11]
 8007574:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007578:	b2db      	uxtb	r3, r3
 800757a:	4619      	mov	r1, r3
 800757c:	68f8      	ldr	r0, [r7, #12]
 800757e:	f000 fa31 	bl	80079e4 <USBD_CoreFindEP>
 8007582:	4603      	mov	r3, r0
 8007584:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007586:	7dbb      	ldrb	r3, [r7, #22]
 8007588:	2bff      	cmp	r3, #255	; 0xff
 800758a:	d025      	beq.n	80075d8 <USBD_LL_DataOutStage+0x15c>
 800758c:	7dbb      	ldrb	r3, [r7, #22]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d122      	bne.n	80075d8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007598:	b2db      	uxtb	r3, r3
 800759a:	2b03      	cmp	r3, #3
 800759c:	d117      	bne.n	80075ce <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800759e:	7dba      	ldrb	r2, [r7, #22]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	32ae      	adds	r2, #174	; 0xae
 80075a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075a8:	699b      	ldr	r3, [r3, #24]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d00f      	beq.n	80075ce <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80075ae:	7dba      	ldrb	r2, [r7, #22]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80075b6:	7dba      	ldrb	r2, [r7, #22]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	32ae      	adds	r2, #174	; 0xae
 80075bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075c0:	699b      	ldr	r3, [r3, #24]
 80075c2:	7afa      	ldrb	r2, [r7, #11]
 80075c4:	4611      	mov	r1, r2
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	4798      	blx	r3
 80075ca:	4603      	mov	r3, r0
 80075cc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80075ce:	7dfb      	ldrb	r3, [r7, #23]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d001      	beq.n	80075d8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80075d4:	7dfb      	ldrb	r3, [r7, #23]
 80075d6:	e000      	b.n	80075da <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80075d8:	2300      	movs	r3, #0
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3718      	adds	r7, #24
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}

080075e2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b086      	sub	sp, #24
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	60f8      	str	r0, [r7, #12]
 80075ea:	460b      	mov	r3, r1
 80075ec:	607a      	str	r2, [r7, #4]
 80075ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80075f0:	7afb      	ldrb	r3, [r7, #11]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d16f      	bne.n	80076d6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	3314      	adds	r3, #20
 80075fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007602:	2b02      	cmp	r3, #2
 8007604:	d15a      	bne.n	80076bc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	689a      	ldr	r2, [r3, #8]
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	68db      	ldr	r3, [r3, #12]
 800760e:	429a      	cmp	r2, r3
 8007610:	d914      	bls.n	800763c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	689a      	ldr	r2, [r3, #8]
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	1ad2      	subs	r2, r2, r3
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	461a      	mov	r2, r3
 8007626:	6879      	ldr	r1, [r7, #4]
 8007628:	68f8      	ldr	r0, [r7, #12]
 800762a:	f001 f8ac 	bl	8008786 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800762e:	2300      	movs	r3, #0
 8007630:	2200      	movs	r2, #0
 8007632:	2100      	movs	r1, #0
 8007634:	68f8      	ldr	r0, [r7, #12]
 8007636:	f001 fd87 	bl	8009148 <USBD_LL_PrepareReceive>
 800763a:	e03f      	b.n	80076bc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	68da      	ldr	r2, [r3, #12]
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	429a      	cmp	r2, r3
 8007646:	d11c      	bne.n	8007682 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	685a      	ldr	r2, [r3, #4]
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007650:	429a      	cmp	r2, r3
 8007652:	d316      	bcc.n	8007682 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	685a      	ldr	r2, [r3, #4]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800765e:	429a      	cmp	r2, r3
 8007660:	d20f      	bcs.n	8007682 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007662:	2200      	movs	r2, #0
 8007664:	2100      	movs	r1, #0
 8007666:	68f8      	ldr	r0, [r7, #12]
 8007668:	f001 f88d 	bl	8008786 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2200      	movs	r2, #0
 8007670:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007674:	2300      	movs	r3, #0
 8007676:	2200      	movs	r2, #0
 8007678:	2100      	movs	r1, #0
 800767a:	68f8      	ldr	r0, [r7, #12]
 800767c:	f001 fd64 	bl	8009148 <USBD_LL_PrepareReceive>
 8007680:	e01c      	b.n	80076bc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007688:	b2db      	uxtb	r3, r3
 800768a:	2b03      	cmp	r3, #3
 800768c:	d10f      	bne.n	80076ae <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d009      	beq.n	80076ae <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2200      	movs	r2, #0
 800769e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076a8:	68db      	ldr	r3, [r3, #12]
 80076aa:	68f8      	ldr	r0, [r7, #12]
 80076ac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80076ae:	2180      	movs	r1, #128	; 0x80
 80076b0:	68f8      	ldr	r0, [r7, #12]
 80076b2:	f001 fc9f 	bl	8008ff4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	f001 f8b7 	bl	800882a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d03a      	beq.n	800773c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80076c6:	68f8      	ldr	r0, [r7, #12]
 80076c8:	f7ff fe42 	bl	8007350 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80076d4:	e032      	b.n	800773c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80076d6:	7afb      	ldrb	r3, [r7, #11]
 80076d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	4619      	mov	r1, r3
 80076e0:	68f8      	ldr	r0, [r7, #12]
 80076e2:	f000 f97f 	bl	80079e4 <USBD_CoreFindEP>
 80076e6:	4603      	mov	r3, r0
 80076e8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80076ea:	7dfb      	ldrb	r3, [r7, #23]
 80076ec:	2bff      	cmp	r3, #255	; 0xff
 80076ee:	d025      	beq.n	800773c <USBD_LL_DataInStage+0x15a>
 80076f0:	7dfb      	ldrb	r3, [r7, #23]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d122      	bne.n	800773c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	2b03      	cmp	r3, #3
 8007700:	d11c      	bne.n	800773c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007702:	7dfa      	ldrb	r2, [r7, #23]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	32ae      	adds	r2, #174	; 0xae
 8007708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800770c:	695b      	ldr	r3, [r3, #20]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d014      	beq.n	800773c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007712:	7dfa      	ldrb	r2, [r7, #23]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800771a:	7dfa      	ldrb	r2, [r7, #23]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	32ae      	adds	r2, #174	; 0xae
 8007720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007724:	695b      	ldr	r3, [r3, #20]
 8007726:	7afa      	ldrb	r2, [r7, #11]
 8007728:	4611      	mov	r1, r2
 800772a:	68f8      	ldr	r0, [r7, #12]
 800772c:	4798      	blx	r3
 800772e:	4603      	mov	r3, r0
 8007730:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007732:	7dbb      	ldrb	r3, [r7, #22]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d001      	beq.n	800773c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007738:	7dbb      	ldrb	r3, [r7, #22]
 800773a:	e000      	b.n	800773e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	3718      	adds	r7, #24
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b084      	sub	sp, #16
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800774e:	2300      	movs	r3, #0
 8007750:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2201      	movs	r2, #1
 8007756:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800777e:	2b00      	cmp	r3, #0
 8007780:	d014      	beq.n	80077ac <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00e      	beq.n	80077ac <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	6852      	ldr	r2, [r2, #4]
 800779a:	b2d2      	uxtb	r2, r2
 800779c:	4611      	mov	r1, r2
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	4798      	blx	r3
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d001      	beq.n	80077ac <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80077a8:	2303      	movs	r3, #3
 80077aa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80077ac:	2340      	movs	r3, #64	; 0x40
 80077ae:	2200      	movs	r2, #0
 80077b0:	2100      	movs	r1, #0
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f001 fbd9 	bl	8008f6a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2201      	movs	r2, #1
 80077bc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2240      	movs	r2, #64	; 0x40
 80077c4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80077c8:	2340      	movs	r3, #64	; 0x40
 80077ca:	2200      	movs	r2, #0
 80077cc:	2180      	movs	r1, #128	; 0x80
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f001 fbcb 	bl	8008f6a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2240      	movs	r2, #64	; 0x40
 80077de:	621a      	str	r2, [r3, #32]

  return ret;
 80077e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80077ea:	b480      	push	{r7}
 80077ec:	b083      	sub	sp, #12
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
 80077f2:	460b      	mov	r3, r1
 80077f4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	78fa      	ldrb	r2, [r7, #3]
 80077fa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	370c      	adds	r7, #12
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr

0800780a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800780a:	b480      	push	{r7}
 800780c:	b083      	sub	sp, #12
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007818:	b2da      	uxtb	r2, r3
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2204      	movs	r2, #4
 8007824:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	370c      	adds	r7, #12
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr

08007836 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007836:	b480      	push	{r7}
 8007838:	b083      	sub	sp, #12
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007844:	b2db      	uxtb	r3, r3
 8007846:	2b04      	cmp	r3, #4
 8007848:	d106      	bne.n	8007858 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007850:	b2da      	uxtb	r2, r3
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	370c      	adds	r7, #12
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr

08007866 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b082      	sub	sp, #8
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b03      	cmp	r3, #3
 8007878:	d110      	bne.n	800789c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007880:	2b00      	cmp	r3, #0
 8007882:	d00b      	beq.n	800789c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800788a:	69db      	ldr	r3, [r3, #28]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d005      	beq.n	800789c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007896:	69db      	ldr	r3, [r3, #28]
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3708      	adds	r7, #8
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}

080078a6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80078a6:	b580      	push	{r7, lr}
 80078a8:	b082      	sub	sp, #8
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
 80078ae:	460b      	mov	r3, r1
 80078b0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	32ae      	adds	r2, #174	; 0xae
 80078bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d101      	bne.n	80078c8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80078c4:	2303      	movs	r3, #3
 80078c6:	e01c      	b.n	8007902 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	2b03      	cmp	r3, #3
 80078d2:	d115      	bne.n	8007900 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	32ae      	adds	r2, #174	; 0xae
 80078de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078e2:	6a1b      	ldr	r3, [r3, #32]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d00b      	beq.n	8007900 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	32ae      	adds	r2, #174	; 0xae
 80078f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078f6:	6a1b      	ldr	r3, [r3, #32]
 80078f8:	78fa      	ldrb	r2, [r7, #3]
 80078fa:	4611      	mov	r1, r2
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3708      	adds	r7, #8
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}

0800790a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800790a:	b580      	push	{r7, lr}
 800790c:	b082      	sub	sp, #8
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
 8007912:	460b      	mov	r3, r1
 8007914:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	32ae      	adds	r2, #174	; 0xae
 8007920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d101      	bne.n	800792c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007928:	2303      	movs	r3, #3
 800792a:	e01c      	b.n	8007966 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007932:	b2db      	uxtb	r3, r3
 8007934:	2b03      	cmp	r3, #3
 8007936:	d115      	bne.n	8007964 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	32ae      	adds	r2, #174	; 0xae
 8007942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007948:	2b00      	cmp	r3, #0
 800794a:	d00b      	beq.n	8007964 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	32ae      	adds	r2, #174	; 0xae
 8007956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800795a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795c:	78fa      	ldrb	r2, [r7, #3]
 800795e:	4611      	mov	r1, r2
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	3708      	adds	r7, #8
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}

0800796e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800796e:	b480      	push	{r7}
 8007970:	b083      	sub	sp, #12
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007976:	2300      	movs	r3, #0
}
 8007978:	4618      	mov	r0, r3
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800798c:	2300      	movs	r3, #0
 800798e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d00e      	beq.n	80079c0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	6852      	ldr	r2, [r2, #4]
 80079ae:	b2d2      	uxtb	r2, r2
 80079b0:	4611      	mov	r1, r2
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	4798      	blx	r3
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d001      	beq.n	80079c0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80079bc:	2303      	movs	r3, #3
 80079be:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80079c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3710      	adds	r7, #16
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80079ca:	b480      	push	{r7}
 80079cc:	b083      	sub	sp, #12
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
 80079d2:	460b      	mov	r3, r1
 80079d4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80079d6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80079d8:	4618      	mov	r0, r3
 80079da:	370c      	adds	r7, #12
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	460b      	mov	r3, r1
 80079ee:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80079f0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	370c      	adds	r7, #12
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr

080079fe <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b086      	sub	sp, #24
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
 8007a06:	460b      	mov	r3, r1
 8007a08:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007a12:	2300      	movs	r3, #0
 8007a14:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	885b      	ldrh	r3, [r3, #2]
 8007a1a:	b29a      	uxth	r2, r3
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d920      	bls.n	8007a68 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007a2e:	e013      	b.n	8007a58 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007a30:	f107 030a 	add.w	r3, r7, #10
 8007a34:	4619      	mov	r1, r3
 8007a36:	6978      	ldr	r0, [r7, #20]
 8007a38:	f000 f81b 	bl	8007a72 <USBD_GetNextDesc>
 8007a3c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	785b      	ldrb	r3, [r3, #1]
 8007a42:	2b05      	cmp	r3, #5
 8007a44:	d108      	bne.n	8007a58 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	789b      	ldrb	r3, [r3, #2]
 8007a4e:	78fa      	ldrb	r2, [r7, #3]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d008      	beq.n	8007a66 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007a54:	2300      	movs	r3, #0
 8007a56:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	885b      	ldrh	r3, [r3, #2]
 8007a5c:	b29a      	uxth	r2, r3
 8007a5e:	897b      	ldrh	r3, [r7, #10]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d8e5      	bhi.n	8007a30 <USBD_GetEpDesc+0x32>
 8007a64:	e000      	b.n	8007a68 <USBD_GetEpDesc+0x6a>
          break;
 8007a66:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007a68:	693b      	ldr	r3, [r7, #16]
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3718      	adds	r7, #24
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}

08007a72 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007a72:	b480      	push	{r7}
 8007a74:	b085      	sub	sp, #20
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
 8007a7a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	881a      	ldrh	r2, [r3, #0]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	4413      	add	r3, r2
 8007a8c:	b29a      	uxth	r2, r3
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	461a      	mov	r2, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3714      	adds	r7, #20
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b087      	sub	sp, #28
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007aca:	8a3b      	ldrh	r3, [r7, #16]
 8007acc:	021b      	lsls	r3, r3, #8
 8007ace:	b21a      	sxth	r2, r3
 8007ad0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	b21b      	sxth	r3, r3
 8007ad8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007ada:	89fb      	ldrh	r3, [r7, #14]
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	371c      	adds	r7, #28
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007af2:	2300      	movs	r3, #0
 8007af4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007afe:	2b40      	cmp	r3, #64	; 0x40
 8007b00:	d005      	beq.n	8007b0e <USBD_StdDevReq+0x26>
 8007b02:	2b40      	cmp	r3, #64	; 0x40
 8007b04:	d857      	bhi.n	8007bb6 <USBD_StdDevReq+0xce>
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d00f      	beq.n	8007b2a <USBD_StdDevReq+0x42>
 8007b0a:	2b20      	cmp	r3, #32
 8007b0c:	d153      	bne.n	8007bb6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	32ae      	adds	r2, #174	; 0xae
 8007b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	6839      	ldr	r1, [r7, #0]
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	4798      	blx	r3
 8007b24:	4603      	mov	r3, r0
 8007b26:	73fb      	strb	r3, [r7, #15]
      break;
 8007b28:	e04a      	b.n	8007bc0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	785b      	ldrb	r3, [r3, #1]
 8007b2e:	2b09      	cmp	r3, #9
 8007b30:	d83b      	bhi.n	8007baa <USBD_StdDevReq+0xc2>
 8007b32:	a201      	add	r2, pc, #4	; (adr r2, 8007b38 <USBD_StdDevReq+0x50>)
 8007b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b38:	08007b8d 	.word	0x08007b8d
 8007b3c:	08007ba1 	.word	0x08007ba1
 8007b40:	08007bab 	.word	0x08007bab
 8007b44:	08007b97 	.word	0x08007b97
 8007b48:	08007bab 	.word	0x08007bab
 8007b4c:	08007b6b 	.word	0x08007b6b
 8007b50:	08007b61 	.word	0x08007b61
 8007b54:	08007bab 	.word	0x08007bab
 8007b58:	08007b83 	.word	0x08007b83
 8007b5c:	08007b75 	.word	0x08007b75
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007b60:	6839      	ldr	r1, [r7, #0]
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 fa3c 	bl	8007fe0 <USBD_GetDescriptor>
          break;
 8007b68:	e024      	b.n	8007bb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007b6a:	6839      	ldr	r1, [r7, #0]
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 fba1 	bl	80082b4 <USBD_SetAddress>
          break;
 8007b72:	e01f      	b.n	8007bb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007b74:	6839      	ldr	r1, [r7, #0]
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 fbe0 	bl	800833c <USBD_SetConfig>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	73fb      	strb	r3, [r7, #15]
          break;
 8007b80:	e018      	b.n	8007bb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007b82:	6839      	ldr	r1, [r7, #0]
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 fc83 	bl	8008490 <USBD_GetConfig>
          break;
 8007b8a:	e013      	b.n	8007bb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007b8c:	6839      	ldr	r1, [r7, #0]
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 fcb4 	bl	80084fc <USBD_GetStatus>
          break;
 8007b94:	e00e      	b.n	8007bb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007b96:	6839      	ldr	r1, [r7, #0]
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 fce3 	bl	8008564 <USBD_SetFeature>
          break;
 8007b9e:	e009      	b.n	8007bb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007ba0:	6839      	ldr	r1, [r7, #0]
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 fd07 	bl	80085b6 <USBD_ClrFeature>
          break;
 8007ba8:	e004      	b.n	8007bb4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007baa:	6839      	ldr	r1, [r7, #0]
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 fd5e 	bl	800866e <USBD_CtlError>
          break;
 8007bb2:	bf00      	nop
      }
      break;
 8007bb4:	e004      	b.n	8007bc0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007bb6:	6839      	ldr	r1, [r7, #0]
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 fd58 	bl	800866e <USBD_CtlError>
      break;
 8007bbe:	bf00      	nop
  }

  return ret;
 8007bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3710      	adds	r7, #16
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}
 8007bca:	bf00      	nop

08007bcc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b084      	sub	sp, #16
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007be2:	2b40      	cmp	r3, #64	; 0x40
 8007be4:	d005      	beq.n	8007bf2 <USBD_StdItfReq+0x26>
 8007be6:	2b40      	cmp	r3, #64	; 0x40
 8007be8:	d852      	bhi.n	8007c90 <USBD_StdItfReq+0xc4>
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d001      	beq.n	8007bf2 <USBD_StdItfReq+0x26>
 8007bee:	2b20      	cmp	r3, #32
 8007bf0:	d14e      	bne.n	8007c90 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	3b01      	subs	r3, #1
 8007bfc:	2b02      	cmp	r3, #2
 8007bfe:	d840      	bhi.n	8007c82 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	889b      	ldrh	r3, [r3, #4]
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d836      	bhi.n	8007c78 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	889b      	ldrh	r3, [r3, #4]
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	4619      	mov	r1, r3
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f7ff fed9 	bl	80079ca <USBD_CoreFindIF>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c1c:	7bbb      	ldrb	r3, [r7, #14]
 8007c1e:	2bff      	cmp	r3, #255	; 0xff
 8007c20:	d01d      	beq.n	8007c5e <USBD_StdItfReq+0x92>
 8007c22:	7bbb      	ldrb	r3, [r7, #14]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d11a      	bne.n	8007c5e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007c28:	7bba      	ldrb	r2, [r7, #14]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	32ae      	adds	r2, #174	; 0xae
 8007c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00f      	beq.n	8007c58 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007c38:	7bba      	ldrb	r2, [r7, #14]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007c40:	7bba      	ldrb	r2, [r7, #14]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	32ae      	adds	r2, #174	; 0xae
 8007c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	6839      	ldr	r1, [r7, #0]
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	4798      	blx	r3
 8007c52:	4603      	mov	r3, r0
 8007c54:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007c56:	e004      	b.n	8007c62 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007c58:	2303      	movs	r3, #3
 8007c5a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007c5c:	e001      	b.n	8007c62 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007c5e:	2303      	movs	r3, #3
 8007c60:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	88db      	ldrh	r3, [r3, #6]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d110      	bne.n	8007c8c <USBD_StdItfReq+0xc0>
 8007c6a:	7bfb      	ldrb	r3, [r7, #15]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d10d      	bne.n	8007c8c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 fdc7 	bl	8008804 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007c76:	e009      	b.n	8007c8c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007c78:	6839      	ldr	r1, [r7, #0]
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 fcf7 	bl	800866e <USBD_CtlError>
          break;
 8007c80:	e004      	b.n	8007c8c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007c82:	6839      	ldr	r1, [r7, #0]
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 fcf2 	bl	800866e <USBD_CtlError>
          break;
 8007c8a:	e000      	b.n	8007c8e <USBD_StdItfReq+0xc2>
          break;
 8007c8c:	bf00      	nop
      }
      break;
 8007c8e:	e004      	b.n	8007c9a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007c90:	6839      	ldr	r1, [r7, #0]
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 fceb 	bl	800866e <USBD_CtlError>
      break;
 8007c98:	bf00      	nop
  }

  return ret;
 8007c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3710      	adds	r7, #16
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	889b      	ldrh	r3, [r3, #4]
 8007cb6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007cc0:	2b40      	cmp	r3, #64	; 0x40
 8007cc2:	d007      	beq.n	8007cd4 <USBD_StdEPReq+0x30>
 8007cc4:	2b40      	cmp	r3, #64	; 0x40
 8007cc6:	f200 817f 	bhi.w	8007fc8 <USBD_StdEPReq+0x324>
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d02a      	beq.n	8007d24 <USBD_StdEPReq+0x80>
 8007cce:	2b20      	cmp	r3, #32
 8007cd0:	f040 817a 	bne.w	8007fc8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007cd4:	7bbb      	ldrb	r3, [r7, #14]
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f7ff fe83 	bl	80079e4 <USBD_CoreFindEP>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ce2:	7b7b      	ldrb	r3, [r7, #13]
 8007ce4:	2bff      	cmp	r3, #255	; 0xff
 8007ce6:	f000 8174 	beq.w	8007fd2 <USBD_StdEPReq+0x32e>
 8007cea:	7b7b      	ldrb	r3, [r7, #13]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	f040 8170 	bne.w	8007fd2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007cf2:	7b7a      	ldrb	r2, [r7, #13]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007cfa:	7b7a      	ldrb	r2, [r7, #13]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	32ae      	adds	r2, #174	; 0xae
 8007d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	f000 8163 	beq.w	8007fd2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007d0c:	7b7a      	ldrb	r2, [r7, #13]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	32ae      	adds	r2, #174	; 0xae
 8007d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	6839      	ldr	r1, [r7, #0]
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	4798      	blx	r3
 8007d1e:	4603      	mov	r3, r0
 8007d20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007d22:	e156      	b.n	8007fd2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	785b      	ldrb	r3, [r3, #1]
 8007d28:	2b03      	cmp	r3, #3
 8007d2a:	d008      	beq.n	8007d3e <USBD_StdEPReq+0x9a>
 8007d2c:	2b03      	cmp	r3, #3
 8007d2e:	f300 8145 	bgt.w	8007fbc <USBD_StdEPReq+0x318>
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	f000 809b 	beq.w	8007e6e <USBD_StdEPReq+0x1ca>
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d03c      	beq.n	8007db6 <USBD_StdEPReq+0x112>
 8007d3c:	e13e      	b.n	8007fbc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	2b02      	cmp	r3, #2
 8007d48:	d002      	beq.n	8007d50 <USBD_StdEPReq+0xac>
 8007d4a:	2b03      	cmp	r3, #3
 8007d4c:	d016      	beq.n	8007d7c <USBD_StdEPReq+0xd8>
 8007d4e:	e02c      	b.n	8007daa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d50:	7bbb      	ldrb	r3, [r7, #14]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d00d      	beq.n	8007d72 <USBD_StdEPReq+0xce>
 8007d56:	7bbb      	ldrb	r3, [r7, #14]
 8007d58:	2b80      	cmp	r3, #128	; 0x80
 8007d5a:	d00a      	beq.n	8007d72 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007d5c:	7bbb      	ldrb	r3, [r7, #14]
 8007d5e:	4619      	mov	r1, r3
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f001 f947 	bl	8008ff4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d66:	2180      	movs	r1, #128	; 0x80
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f001 f943 	bl	8008ff4 <USBD_LL_StallEP>
 8007d6e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007d70:	e020      	b.n	8007db4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007d72:	6839      	ldr	r1, [r7, #0]
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 fc7a 	bl	800866e <USBD_CtlError>
              break;
 8007d7a:	e01b      	b.n	8007db4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	885b      	ldrh	r3, [r3, #2]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d10e      	bne.n	8007da2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007d84:	7bbb      	ldrb	r3, [r7, #14]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00b      	beq.n	8007da2 <USBD_StdEPReq+0xfe>
 8007d8a:	7bbb      	ldrb	r3, [r7, #14]
 8007d8c:	2b80      	cmp	r3, #128	; 0x80
 8007d8e:	d008      	beq.n	8007da2 <USBD_StdEPReq+0xfe>
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	88db      	ldrh	r3, [r3, #6]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d104      	bne.n	8007da2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007d98:	7bbb      	ldrb	r3, [r7, #14]
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f001 f929 	bl	8008ff4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 fd2e 	bl	8008804 <USBD_CtlSendStatus>

              break;
 8007da8:	e004      	b.n	8007db4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007daa:	6839      	ldr	r1, [r7, #0]
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 fc5e 	bl	800866e <USBD_CtlError>
              break;
 8007db2:	bf00      	nop
          }
          break;
 8007db4:	e107      	b.n	8007fc6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	2b02      	cmp	r3, #2
 8007dc0:	d002      	beq.n	8007dc8 <USBD_StdEPReq+0x124>
 8007dc2:	2b03      	cmp	r3, #3
 8007dc4:	d016      	beq.n	8007df4 <USBD_StdEPReq+0x150>
 8007dc6:	e04b      	b.n	8007e60 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007dc8:	7bbb      	ldrb	r3, [r7, #14]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d00d      	beq.n	8007dea <USBD_StdEPReq+0x146>
 8007dce:	7bbb      	ldrb	r3, [r7, #14]
 8007dd0:	2b80      	cmp	r3, #128	; 0x80
 8007dd2:	d00a      	beq.n	8007dea <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007dd4:	7bbb      	ldrb	r3, [r7, #14]
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f001 f90b 	bl	8008ff4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007dde:	2180      	movs	r1, #128	; 0x80
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f001 f907 	bl	8008ff4 <USBD_LL_StallEP>
 8007de6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007de8:	e040      	b.n	8007e6c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007dea:	6839      	ldr	r1, [r7, #0]
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 fc3e 	bl	800866e <USBD_CtlError>
              break;
 8007df2:	e03b      	b.n	8007e6c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	885b      	ldrh	r3, [r3, #2]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d136      	bne.n	8007e6a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007dfc:	7bbb      	ldrb	r3, [r7, #14]
 8007dfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d004      	beq.n	8007e10 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007e06:	7bbb      	ldrb	r3, [r7, #14]
 8007e08:	4619      	mov	r1, r3
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f001 f911 	bl	8009032 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 fcf7 	bl	8008804 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007e16:	7bbb      	ldrb	r3, [r7, #14]
 8007e18:	4619      	mov	r1, r3
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f7ff fde2 	bl	80079e4 <USBD_CoreFindEP>
 8007e20:	4603      	mov	r3, r0
 8007e22:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e24:	7b7b      	ldrb	r3, [r7, #13]
 8007e26:	2bff      	cmp	r3, #255	; 0xff
 8007e28:	d01f      	beq.n	8007e6a <USBD_StdEPReq+0x1c6>
 8007e2a:	7b7b      	ldrb	r3, [r7, #13]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d11c      	bne.n	8007e6a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007e30:	7b7a      	ldrb	r2, [r7, #13]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007e38:	7b7a      	ldrb	r2, [r7, #13]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	32ae      	adds	r2, #174	; 0xae
 8007e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d010      	beq.n	8007e6a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007e48:	7b7a      	ldrb	r2, [r7, #13]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	32ae      	adds	r2, #174	; 0xae
 8007e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	6839      	ldr	r1, [r7, #0]
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	4798      	blx	r3
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007e5e:	e004      	b.n	8007e6a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007e60:	6839      	ldr	r1, [r7, #0]
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 fc03 	bl	800866e <USBD_CtlError>
              break;
 8007e68:	e000      	b.n	8007e6c <USBD_StdEPReq+0x1c8>
              break;
 8007e6a:	bf00      	nop
          }
          break;
 8007e6c:	e0ab      	b.n	8007fc6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	2b02      	cmp	r3, #2
 8007e78:	d002      	beq.n	8007e80 <USBD_StdEPReq+0x1dc>
 8007e7a:	2b03      	cmp	r3, #3
 8007e7c:	d032      	beq.n	8007ee4 <USBD_StdEPReq+0x240>
 8007e7e:	e097      	b.n	8007fb0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e80:	7bbb      	ldrb	r3, [r7, #14]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d007      	beq.n	8007e96 <USBD_StdEPReq+0x1f2>
 8007e86:	7bbb      	ldrb	r3, [r7, #14]
 8007e88:	2b80      	cmp	r3, #128	; 0x80
 8007e8a:	d004      	beq.n	8007e96 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007e8c:	6839      	ldr	r1, [r7, #0]
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 fbed 	bl	800866e <USBD_CtlError>
                break;
 8007e94:	e091      	b.n	8007fba <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	da0b      	bge.n	8007eb6 <USBD_StdEPReq+0x212>
 8007e9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ea0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ea4:	4613      	mov	r3, r2
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	4413      	add	r3, r2
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	3310      	adds	r3, #16
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	4413      	add	r3, r2
 8007eb2:	3304      	adds	r3, #4
 8007eb4:	e00b      	b.n	8007ece <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007eb6:	7bbb      	ldrb	r3, [r7, #14]
 8007eb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ebc:	4613      	mov	r3, r2
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	4413      	add	r3, r2
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	4413      	add	r3, r2
 8007ecc:	3304      	adds	r3, #4
 8007ece:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	2202      	movs	r2, #2
 8007eda:	4619      	mov	r1, r3
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 fc37 	bl	8008750 <USBD_CtlSendData>
              break;
 8007ee2:	e06a      	b.n	8007fba <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007ee4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	da11      	bge.n	8007f10 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007eec:	7bbb      	ldrb	r3, [r7, #14]
 8007eee:	f003 020f 	and.w	r2, r3, #15
 8007ef2:	6879      	ldr	r1, [r7, #4]
 8007ef4:	4613      	mov	r3, r2
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	4413      	add	r3, r2
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	440b      	add	r3, r1
 8007efe:	3324      	adds	r3, #36	; 0x24
 8007f00:	881b      	ldrh	r3, [r3, #0]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d117      	bne.n	8007f36 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007f06:	6839      	ldr	r1, [r7, #0]
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 fbb0 	bl	800866e <USBD_CtlError>
                  break;
 8007f0e:	e054      	b.n	8007fba <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007f10:	7bbb      	ldrb	r3, [r7, #14]
 8007f12:	f003 020f 	and.w	r2, r3, #15
 8007f16:	6879      	ldr	r1, [r7, #4]
 8007f18:	4613      	mov	r3, r2
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	4413      	add	r3, r2
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	440b      	add	r3, r1
 8007f22:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007f26:	881b      	ldrh	r3, [r3, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d104      	bne.n	8007f36 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007f2c:	6839      	ldr	r1, [r7, #0]
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 fb9d 	bl	800866e <USBD_CtlError>
                  break;
 8007f34:	e041      	b.n	8007fba <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	da0b      	bge.n	8007f56 <USBD_StdEPReq+0x2b2>
 8007f3e:	7bbb      	ldrb	r3, [r7, #14]
 8007f40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f44:	4613      	mov	r3, r2
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	4413      	add	r3, r2
 8007f4a:	009b      	lsls	r3, r3, #2
 8007f4c:	3310      	adds	r3, #16
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	4413      	add	r3, r2
 8007f52:	3304      	adds	r3, #4
 8007f54:	e00b      	b.n	8007f6e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f56:	7bbb      	ldrb	r3, [r7, #14]
 8007f58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f5c:	4613      	mov	r3, r2
 8007f5e:	009b      	lsls	r3, r3, #2
 8007f60:	4413      	add	r3, r2
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	4413      	add	r3, r2
 8007f6c:	3304      	adds	r3, #4
 8007f6e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007f70:	7bbb      	ldrb	r3, [r7, #14]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d002      	beq.n	8007f7c <USBD_StdEPReq+0x2d8>
 8007f76:	7bbb      	ldrb	r3, [r7, #14]
 8007f78:	2b80      	cmp	r3, #128	; 0x80
 8007f7a:	d103      	bne.n	8007f84 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	601a      	str	r2, [r3, #0]
 8007f82:	e00e      	b.n	8007fa2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007f84:	7bbb      	ldrb	r3, [r7, #14]
 8007f86:	4619      	mov	r1, r3
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f001 f871 	bl	8009070 <USBD_LL_IsStallEP>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d003      	beq.n	8007f9c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	2201      	movs	r2, #1
 8007f98:	601a      	str	r2, [r3, #0]
 8007f9a:	e002      	b.n	8007fa2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	2202      	movs	r2, #2
 8007fa6:	4619      	mov	r1, r3
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 fbd1 	bl	8008750 <USBD_CtlSendData>
              break;
 8007fae:	e004      	b.n	8007fba <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007fb0:	6839      	ldr	r1, [r7, #0]
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 fb5b 	bl	800866e <USBD_CtlError>
              break;
 8007fb8:	bf00      	nop
          }
          break;
 8007fba:	e004      	b.n	8007fc6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007fbc:	6839      	ldr	r1, [r7, #0]
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 fb55 	bl	800866e <USBD_CtlError>
          break;
 8007fc4:	bf00      	nop
      }
      break;
 8007fc6:	e005      	b.n	8007fd4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007fc8:	6839      	ldr	r1, [r7, #0]
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 fb4f 	bl	800866e <USBD_CtlError>
      break;
 8007fd0:	e000      	b.n	8007fd4 <USBD_StdEPReq+0x330>
      break;
 8007fd2:	bf00      	nop
  }

  return ret;
 8007fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3710      	adds	r7, #16
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
	...

08007fe0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007fea:	2300      	movs	r3, #0
 8007fec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	885b      	ldrh	r3, [r3, #2]
 8007ffa:	0a1b      	lsrs	r3, r3, #8
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	3b01      	subs	r3, #1
 8008000:	2b06      	cmp	r3, #6
 8008002:	f200 8128 	bhi.w	8008256 <USBD_GetDescriptor+0x276>
 8008006:	a201      	add	r2, pc, #4	; (adr r2, 800800c <USBD_GetDescriptor+0x2c>)
 8008008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800800c:	08008029 	.word	0x08008029
 8008010:	08008041 	.word	0x08008041
 8008014:	08008081 	.word	0x08008081
 8008018:	08008257 	.word	0x08008257
 800801c:	08008257 	.word	0x08008257
 8008020:	080081f7 	.word	0x080081f7
 8008024:	08008223 	.word	0x08008223
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	7c12      	ldrb	r2, [r2, #16]
 8008034:	f107 0108 	add.w	r1, r7, #8
 8008038:	4610      	mov	r0, r2
 800803a:	4798      	blx	r3
 800803c:	60f8      	str	r0, [r7, #12]
      break;
 800803e:	e112      	b.n	8008266 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	7c1b      	ldrb	r3, [r3, #16]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d10d      	bne.n	8008064 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800804e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008050:	f107 0208 	add.w	r2, r7, #8
 8008054:	4610      	mov	r0, r2
 8008056:	4798      	blx	r3
 8008058:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	3301      	adds	r3, #1
 800805e:	2202      	movs	r2, #2
 8008060:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008062:	e100      	b.n	8008266 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800806a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800806c:	f107 0208 	add.w	r2, r7, #8
 8008070:	4610      	mov	r0, r2
 8008072:	4798      	blx	r3
 8008074:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	3301      	adds	r3, #1
 800807a:	2202      	movs	r2, #2
 800807c:	701a      	strb	r2, [r3, #0]
      break;
 800807e:	e0f2      	b.n	8008266 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	885b      	ldrh	r3, [r3, #2]
 8008084:	b2db      	uxtb	r3, r3
 8008086:	2b05      	cmp	r3, #5
 8008088:	f200 80ac 	bhi.w	80081e4 <USBD_GetDescriptor+0x204>
 800808c:	a201      	add	r2, pc, #4	; (adr r2, 8008094 <USBD_GetDescriptor+0xb4>)
 800808e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008092:	bf00      	nop
 8008094:	080080ad 	.word	0x080080ad
 8008098:	080080e1 	.word	0x080080e1
 800809c:	08008115 	.word	0x08008115
 80080a0:	08008149 	.word	0x08008149
 80080a4:	0800817d 	.word	0x0800817d
 80080a8:	080081b1 	.word	0x080081b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d00b      	beq.n	80080d0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	7c12      	ldrb	r2, [r2, #16]
 80080c4:	f107 0108 	add.w	r1, r7, #8
 80080c8:	4610      	mov	r0, r2
 80080ca:	4798      	blx	r3
 80080cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080ce:	e091      	b.n	80081f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080d0:	6839      	ldr	r1, [r7, #0]
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 facb 	bl	800866e <USBD_CtlError>
            err++;
 80080d8:	7afb      	ldrb	r3, [r7, #11]
 80080da:	3301      	adds	r3, #1
 80080dc:	72fb      	strb	r3, [r7, #11]
          break;
 80080de:	e089      	b.n	80081f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d00b      	beq.n	8008104 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080f2:	689b      	ldr	r3, [r3, #8]
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	7c12      	ldrb	r2, [r2, #16]
 80080f8:	f107 0108 	add.w	r1, r7, #8
 80080fc:	4610      	mov	r0, r2
 80080fe:	4798      	blx	r3
 8008100:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008102:	e077      	b.n	80081f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008104:	6839      	ldr	r1, [r7, #0]
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 fab1 	bl	800866e <USBD_CtlError>
            err++;
 800810c:	7afb      	ldrb	r3, [r7, #11]
 800810e:	3301      	adds	r3, #1
 8008110:	72fb      	strb	r3, [r7, #11]
          break;
 8008112:	e06f      	b.n	80081f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800811a:	68db      	ldr	r3, [r3, #12]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d00b      	beq.n	8008138 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	7c12      	ldrb	r2, [r2, #16]
 800812c:	f107 0108 	add.w	r1, r7, #8
 8008130:	4610      	mov	r0, r2
 8008132:	4798      	blx	r3
 8008134:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008136:	e05d      	b.n	80081f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008138:	6839      	ldr	r1, [r7, #0]
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 fa97 	bl	800866e <USBD_CtlError>
            err++;
 8008140:	7afb      	ldrb	r3, [r7, #11]
 8008142:	3301      	adds	r3, #1
 8008144:	72fb      	strb	r3, [r7, #11]
          break;
 8008146:	e055      	b.n	80081f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800814e:	691b      	ldr	r3, [r3, #16]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d00b      	beq.n	800816c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800815a:	691b      	ldr	r3, [r3, #16]
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	7c12      	ldrb	r2, [r2, #16]
 8008160:	f107 0108 	add.w	r1, r7, #8
 8008164:	4610      	mov	r0, r2
 8008166:	4798      	blx	r3
 8008168:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800816a:	e043      	b.n	80081f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800816c:	6839      	ldr	r1, [r7, #0]
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 fa7d 	bl	800866e <USBD_CtlError>
            err++;
 8008174:	7afb      	ldrb	r3, [r7, #11]
 8008176:	3301      	adds	r3, #1
 8008178:	72fb      	strb	r3, [r7, #11]
          break;
 800817a:	e03b      	b.n	80081f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008182:	695b      	ldr	r3, [r3, #20]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d00b      	beq.n	80081a0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800818e:	695b      	ldr	r3, [r3, #20]
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	7c12      	ldrb	r2, [r2, #16]
 8008194:	f107 0108 	add.w	r1, r7, #8
 8008198:	4610      	mov	r0, r2
 800819a:	4798      	blx	r3
 800819c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800819e:	e029      	b.n	80081f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081a0:	6839      	ldr	r1, [r7, #0]
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 fa63 	bl	800866e <USBD_CtlError>
            err++;
 80081a8:	7afb      	ldrb	r3, [r7, #11]
 80081aa:	3301      	adds	r3, #1
 80081ac:	72fb      	strb	r3, [r7, #11]
          break;
 80081ae:	e021      	b.n	80081f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081b6:	699b      	ldr	r3, [r3, #24]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d00b      	beq.n	80081d4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081c2:	699b      	ldr	r3, [r3, #24]
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	7c12      	ldrb	r2, [r2, #16]
 80081c8:	f107 0108 	add.w	r1, r7, #8
 80081cc:	4610      	mov	r0, r2
 80081ce:	4798      	blx	r3
 80081d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081d2:	e00f      	b.n	80081f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081d4:	6839      	ldr	r1, [r7, #0]
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 fa49 	bl	800866e <USBD_CtlError>
            err++;
 80081dc:	7afb      	ldrb	r3, [r7, #11]
 80081de:	3301      	adds	r3, #1
 80081e0:	72fb      	strb	r3, [r7, #11]
          break;
 80081e2:	e007      	b.n	80081f4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80081e4:	6839      	ldr	r1, [r7, #0]
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 fa41 	bl	800866e <USBD_CtlError>
          err++;
 80081ec:	7afb      	ldrb	r3, [r7, #11]
 80081ee:	3301      	adds	r3, #1
 80081f0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80081f2:	bf00      	nop
      }
      break;
 80081f4:	e037      	b.n	8008266 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	7c1b      	ldrb	r3, [r3, #16]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d109      	bne.n	8008212 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008206:	f107 0208 	add.w	r2, r7, #8
 800820a:	4610      	mov	r0, r2
 800820c:	4798      	blx	r3
 800820e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008210:	e029      	b.n	8008266 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008212:	6839      	ldr	r1, [r7, #0]
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 fa2a 	bl	800866e <USBD_CtlError>
        err++;
 800821a:	7afb      	ldrb	r3, [r7, #11]
 800821c:	3301      	adds	r3, #1
 800821e:	72fb      	strb	r3, [r7, #11]
      break;
 8008220:	e021      	b.n	8008266 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	7c1b      	ldrb	r3, [r3, #16]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d10d      	bne.n	8008246 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008232:	f107 0208 	add.w	r2, r7, #8
 8008236:	4610      	mov	r0, r2
 8008238:	4798      	blx	r3
 800823a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	3301      	adds	r3, #1
 8008240:	2207      	movs	r2, #7
 8008242:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008244:	e00f      	b.n	8008266 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008246:	6839      	ldr	r1, [r7, #0]
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 fa10 	bl	800866e <USBD_CtlError>
        err++;
 800824e:	7afb      	ldrb	r3, [r7, #11]
 8008250:	3301      	adds	r3, #1
 8008252:	72fb      	strb	r3, [r7, #11]
      break;
 8008254:	e007      	b.n	8008266 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008256:	6839      	ldr	r1, [r7, #0]
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f000 fa08 	bl	800866e <USBD_CtlError>
      err++;
 800825e:	7afb      	ldrb	r3, [r7, #11]
 8008260:	3301      	adds	r3, #1
 8008262:	72fb      	strb	r3, [r7, #11]
      break;
 8008264:	bf00      	nop
  }

  if (err != 0U)
 8008266:	7afb      	ldrb	r3, [r7, #11]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d11e      	bne.n	80082aa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	88db      	ldrh	r3, [r3, #6]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d016      	beq.n	80082a2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008274:	893b      	ldrh	r3, [r7, #8]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00e      	beq.n	8008298 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	88da      	ldrh	r2, [r3, #6]
 800827e:	893b      	ldrh	r3, [r7, #8]
 8008280:	4293      	cmp	r3, r2
 8008282:	bf28      	it	cs
 8008284:	4613      	movcs	r3, r2
 8008286:	b29b      	uxth	r3, r3
 8008288:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800828a:	893b      	ldrh	r3, [r7, #8]
 800828c:	461a      	mov	r2, r3
 800828e:	68f9      	ldr	r1, [r7, #12]
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 fa5d 	bl	8008750 <USBD_CtlSendData>
 8008296:	e009      	b.n	80082ac <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008298:	6839      	ldr	r1, [r7, #0]
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 f9e7 	bl	800866e <USBD_CtlError>
 80082a0:	e004      	b.n	80082ac <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 faae 	bl	8008804 <USBD_CtlSendStatus>
 80082a8:	e000      	b.n	80082ac <USBD_GetDescriptor+0x2cc>
    return;
 80082aa:	bf00      	nop
  }
}
 80082ac:	3710      	adds	r7, #16
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
 80082b2:	bf00      	nop

080082b4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	889b      	ldrh	r3, [r3, #4]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d131      	bne.n	800832a <USBD_SetAddress+0x76>
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	88db      	ldrh	r3, [r3, #6]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d12d      	bne.n	800832a <USBD_SetAddress+0x76>
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	885b      	ldrh	r3, [r3, #2]
 80082d2:	2b7f      	cmp	r3, #127	; 0x7f
 80082d4:	d829      	bhi.n	800832a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	885b      	ldrh	r3, [r3, #2]
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	2b03      	cmp	r3, #3
 80082ec:	d104      	bne.n	80082f8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80082ee:	6839      	ldr	r1, [r7, #0]
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 f9bc 	bl	800866e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082f6:	e01d      	b.n	8008334 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	7bfa      	ldrb	r2, [r7, #15]
 80082fc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008300:	7bfb      	ldrb	r3, [r7, #15]
 8008302:	4619      	mov	r1, r3
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 fedf 	bl	80090c8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 fa7a 	bl	8008804 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008310:	7bfb      	ldrb	r3, [r7, #15]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d004      	beq.n	8008320 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2202      	movs	r2, #2
 800831a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800831e:	e009      	b.n	8008334 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2201      	movs	r2, #1
 8008324:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008328:	e004      	b.n	8008334 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800832a:	6839      	ldr	r1, [r7, #0]
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 f99e 	bl	800866e <USBD_CtlError>
  }
}
 8008332:	bf00      	nop
 8008334:	bf00      	nop
 8008336:	3710      	adds	r7, #16
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b084      	sub	sp, #16
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008346:	2300      	movs	r3, #0
 8008348:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	885b      	ldrh	r3, [r3, #2]
 800834e:	b2da      	uxtb	r2, r3
 8008350:	4b4e      	ldr	r3, [pc, #312]	; (800848c <USBD_SetConfig+0x150>)
 8008352:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008354:	4b4d      	ldr	r3, [pc, #308]	; (800848c <USBD_SetConfig+0x150>)
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	2b01      	cmp	r3, #1
 800835a:	d905      	bls.n	8008368 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800835c:	6839      	ldr	r1, [r7, #0]
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 f985 	bl	800866e <USBD_CtlError>
    return USBD_FAIL;
 8008364:	2303      	movs	r3, #3
 8008366:	e08c      	b.n	8008482 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800836e:	b2db      	uxtb	r3, r3
 8008370:	2b02      	cmp	r3, #2
 8008372:	d002      	beq.n	800837a <USBD_SetConfig+0x3e>
 8008374:	2b03      	cmp	r3, #3
 8008376:	d029      	beq.n	80083cc <USBD_SetConfig+0x90>
 8008378:	e075      	b.n	8008466 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800837a:	4b44      	ldr	r3, [pc, #272]	; (800848c <USBD_SetConfig+0x150>)
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d020      	beq.n	80083c4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008382:	4b42      	ldr	r3, [pc, #264]	; (800848c <USBD_SetConfig+0x150>)
 8008384:	781b      	ldrb	r3, [r3, #0]
 8008386:	461a      	mov	r2, r3
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800838c:	4b3f      	ldr	r3, [pc, #252]	; (800848c <USBD_SetConfig+0x150>)
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	4619      	mov	r1, r3
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f7fe ffe7 	bl	8007366 <USBD_SetClassConfig>
 8008398:	4603      	mov	r3, r0
 800839a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800839c:	7bfb      	ldrb	r3, [r7, #15]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d008      	beq.n	80083b4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80083a2:	6839      	ldr	r1, [r7, #0]
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 f962 	bl	800866e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2202      	movs	r2, #2
 80083ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80083b2:	e065      	b.n	8008480 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 fa25 	bl	8008804 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2203      	movs	r2, #3
 80083be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80083c2:	e05d      	b.n	8008480 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 fa1d 	bl	8008804 <USBD_CtlSendStatus>
      break;
 80083ca:	e059      	b.n	8008480 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80083cc:	4b2f      	ldr	r3, [pc, #188]	; (800848c <USBD_SetConfig+0x150>)
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d112      	bne.n	80083fa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2202      	movs	r2, #2
 80083d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80083dc:	4b2b      	ldr	r3, [pc, #172]	; (800848c <USBD_SetConfig+0x150>)
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	461a      	mov	r2, r3
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80083e6:	4b29      	ldr	r3, [pc, #164]	; (800848c <USBD_SetConfig+0x150>)
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	4619      	mov	r1, r3
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f7fe ffd6 	bl	800739e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 fa06 	bl	8008804 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80083f8:	e042      	b.n	8008480 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80083fa:	4b24      	ldr	r3, [pc, #144]	; (800848c <USBD_SetConfig+0x150>)
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	461a      	mov	r2, r3
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	429a      	cmp	r2, r3
 8008406:	d02a      	beq.n	800845e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	b2db      	uxtb	r3, r3
 800840e:	4619      	mov	r1, r3
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f7fe ffc4 	bl	800739e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008416:	4b1d      	ldr	r3, [pc, #116]	; (800848c <USBD_SetConfig+0x150>)
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	461a      	mov	r2, r3
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008420:	4b1a      	ldr	r3, [pc, #104]	; (800848c <USBD_SetConfig+0x150>)
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	4619      	mov	r1, r3
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f7fe ff9d 	bl	8007366 <USBD_SetClassConfig>
 800842c:	4603      	mov	r3, r0
 800842e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008430:	7bfb      	ldrb	r3, [r7, #15]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d00f      	beq.n	8008456 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008436:	6839      	ldr	r1, [r7, #0]
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 f918 	bl	800866e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	b2db      	uxtb	r3, r3
 8008444:	4619      	mov	r1, r3
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f7fe ffa9 	bl	800739e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2202      	movs	r2, #2
 8008450:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008454:	e014      	b.n	8008480 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 f9d4 	bl	8008804 <USBD_CtlSendStatus>
      break;
 800845c:	e010      	b.n	8008480 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 f9d0 	bl	8008804 <USBD_CtlSendStatus>
      break;
 8008464:	e00c      	b.n	8008480 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008466:	6839      	ldr	r1, [r7, #0]
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 f900 	bl	800866e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800846e:	4b07      	ldr	r3, [pc, #28]	; (800848c <USBD_SetConfig+0x150>)
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	4619      	mov	r1, r3
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f7fe ff92 	bl	800739e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800847a:	2303      	movs	r3, #3
 800847c:	73fb      	strb	r3, [r7, #15]
      break;
 800847e:	bf00      	nop
  }

  return ret;
 8008480:	7bfb      	ldrb	r3, [r7, #15]
}
 8008482:	4618      	mov	r0, r3
 8008484:	3710      	adds	r7, #16
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop
 800848c:	20000268 	.word	0x20000268

08008490 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	88db      	ldrh	r3, [r3, #6]
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d004      	beq.n	80084ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80084a2:	6839      	ldr	r1, [r7, #0]
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 f8e2 	bl	800866e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80084aa:	e023      	b.n	80084f4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	2b02      	cmp	r3, #2
 80084b6:	dc02      	bgt.n	80084be <USBD_GetConfig+0x2e>
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	dc03      	bgt.n	80084c4 <USBD_GetConfig+0x34>
 80084bc:	e015      	b.n	80084ea <USBD_GetConfig+0x5a>
 80084be:	2b03      	cmp	r3, #3
 80084c0:	d00b      	beq.n	80084da <USBD_GetConfig+0x4a>
 80084c2:	e012      	b.n	80084ea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	3308      	adds	r3, #8
 80084ce:	2201      	movs	r2, #1
 80084d0:	4619      	mov	r1, r3
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 f93c 	bl	8008750 <USBD_CtlSendData>
        break;
 80084d8:	e00c      	b.n	80084f4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	3304      	adds	r3, #4
 80084de:	2201      	movs	r2, #1
 80084e0:	4619      	mov	r1, r3
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 f934 	bl	8008750 <USBD_CtlSendData>
        break;
 80084e8:	e004      	b.n	80084f4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80084ea:	6839      	ldr	r1, [r7, #0]
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 f8be 	bl	800866e <USBD_CtlError>
        break;
 80084f2:	bf00      	nop
}
 80084f4:	bf00      	nop
 80084f6:	3708      	adds	r7, #8
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b082      	sub	sp, #8
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800850c:	b2db      	uxtb	r3, r3
 800850e:	3b01      	subs	r3, #1
 8008510:	2b02      	cmp	r3, #2
 8008512:	d81e      	bhi.n	8008552 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	88db      	ldrh	r3, [r3, #6]
 8008518:	2b02      	cmp	r3, #2
 800851a:	d004      	beq.n	8008526 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800851c:	6839      	ldr	r1, [r7, #0]
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 f8a5 	bl	800866e <USBD_CtlError>
        break;
 8008524:	e01a      	b.n	800855c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2201      	movs	r2, #1
 800852a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008532:	2b00      	cmp	r3, #0
 8008534:	d005      	beq.n	8008542 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	68db      	ldr	r3, [r3, #12]
 800853a:	f043 0202 	orr.w	r2, r3, #2
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	330c      	adds	r3, #12
 8008546:	2202      	movs	r2, #2
 8008548:	4619      	mov	r1, r3
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 f900 	bl	8008750 <USBD_CtlSendData>
      break;
 8008550:	e004      	b.n	800855c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008552:	6839      	ldr	r1, [r7, #0]
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 f88a 	bl	800866e <USBD_CtlError>
      break;
 800855a:	bf00      	nop
  }
}
 800855c:	bf00      	nop
 800855e:	3708      	adds	r7, #8
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	885b      	ldrh	r3, [r3, #2]
 8008572:	2b01      	cmp	r3, #1
 8008574:	d107      	bne.n	8008586 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2201      	movs	r2, #1
 800857a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 f940 	bl	8008804 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008584:	e013      	b.n	80085ae <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	885b      	ldrh	r3, [r3, #2]
 800858a:	2b02      	cmp	r3, #2
 800858c:	d10b      	bne.n	80085a6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	889b      	ldrh	r3, [r3, #4]
 8008592:	0a1b      	lsrs	r3, r3, #8
 8008594:	b29b      	uxth	r3, r3
 8008596:	b2da      	uxtb	r2, r3
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 f930 	bl	8008804 <USBD_CtlSendStatus>
}
 80085a4:	e003      	b.n	80085ae <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80085a6:	6839      	ldr	r1, [r7, #0]
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 f860 	bl	800866e <USBD_CtlError>
}
 80085ae:	bf00      	nop
 80085b0:	3708      	adds	r7, #8
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b082      	sub	sp, #8
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
 80085be:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	3b01      	subs	r3, #1
 80085ca:	2b02      	cmp	r3, #2
 80085cc:	d80b      	bhi.n	80085e6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	885b      	ldrh	r3, [r3, #2]
 80085d2:	2b01      	cmp	r3, #1
 80085d4:	d10c      	bne.n	80085f0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2200      	movs	r2, #0
 80085da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 f910 	bl	8008804 <USBD_CtlSendStatus>
      }
      break;
 80085e4:	e004      	b.n	80085f0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80085e6:	6839      	ldr	r1, [r7, #0]
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 f840 	bl	800866e <USBD_CtlError>
      break;
 80085ee:	e000      	b.n	80085f2 <USBD_ClrFeature+0x3c>
      break;
 80085f0:	bf00      	nop
  }
}
 80085f2:	bf00      	nop
 80085f4:	3708      	adds	r7, #8
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}

080085fa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80085fa:	b580      	push	{r7, lr}
 80085fc:	b084      	sub	sp, #16
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
 8008602:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	781a      	ldrb	r2, [r3, #0]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	3301      	adds	r3, #1
 8008614:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	781a      	ldrb	r2, [r3, #0]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	3301      	adds	r3, #1
 8008622:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008624:	68f8      	ldr	r0, [r7, #12]
 8008626:	f7ff fa41 	bl	8007aac <SWAPBYTE>
 800862a:	4603      	mov	r3, r0
 800862c:	461a      	mov	r2, r3
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	3301      	adds	r3, #1
 8008636:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	3301      	adds	r3, #1
 800863c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800863e:	68f8      	ldr	r0, [r7, #12]
 8008640:	f7ff fa34 	bl	8007aac <SWAPBYTE>
 8008644:	4603      	mov	r3, r0
 8008646:	461a      	mov	r2, r3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	3301      	adds	r3, #1
 8008650:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	3301      	adds	r3, #1
 8008656:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008658:	68f8      	ldr	r0, [r7, #12]
 800865a:	f7ff fa27 	bl	8007aac <SWAPBYTE>
 800865e:	4603      	mov	r3, r0
 8008660:	461a      	mov	r2, r3
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	80da      	strh	r2, [r3, #6]
}
 8008666:	bf00      	nop
 8008668:	3710      	adds	r7, #16
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}

0800866e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800866e:	b580      	push	{r7, lr}
 8008670:	b082      	sub	sp, #8
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
 8008676:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008678:	2180      	movs	r1, #128	; 0x80
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 fcba 	bl	8008ff4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008680:	2100      	movs	r1, #0
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 fcb6 	bl	8008ff4 <USBD_LL_StallEP>
}
 8008688:	bf00      	nop
 800868a:	3708      	adds	r7, #8
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b086      	sub	sp, #24
 8008694:	af00      	add	r7, sp, #0
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800869c:	2300      	movs	r3, #0
 800869e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d036      	beq.n	8008714 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80086aa:	6938      	ldr	r0, [r7, #16]
 80086ac:	f000 f836 	bl	800871c <USBD_GetLen>
 80086b0:	4603      	mov	r3, r0
 80086b2:	3301      	adds	r3, #1
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	005b      	lsls	r3, r3, #1
 80086b8:	b29a      	uxth	r2, r3
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80086be:	7dfb      	ldrb	r3, [r7, #23]
 80086c0:	68ba      	ldr	r2, [r7, #8]
 80086c2:	4413      	add	r3, r2
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	7812      	ldrb	r2, [r2, #0]
 80086c8:	701a      	strb	r2, [r3, #0]
  idx++;
 80086ca:	7dfb      	ldrb	r3, [r7, #23]
 80086cc:	3301      	adds	r3, #1
 80086ce:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80086d0:	7dfb      	ldrb	r3, [r7, #23]
 80086d2:	68ba      	ldr	r2, [r7, #8]
 80086d4:	4413      	add	r3, r2
 80086d6:	2203      	movs	r2, #3
 80086d8:	701a      	strb	r2, [r3, #0]
  idx++;
 80086da:	7dfb      	ldrb	r3, [r7, #23]
 80086dc:	3301      	adds	r3, #1
 80086de:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80086e0:	e013      	b.n	800870a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80086e2:	7dfb      	ldrb	r3, [r7, #23]
 80086e4:	68ba      	ldr	r2, [r7, #8]
 80086e6:	4413      	add	r3, r2
 80086e8:	693a      	ldr	r2, [r7, #16]
 80086ea:	7812      	ldrb	r2, [r2, #0]
 80086ec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	3301      	adds	r3, #1
 80086f2:	613b      	str	r3, [r7, #16]
    idx++;
 80086f4:	7dfb      	ldrb	r3, [r7, #23]
 80086f6:	3301      	adds	r3, #1
 80086f8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80086fa:	7dfb      	ldrb	r3, [r7, #23]
 80086fc:	68ba      	ldr	r2, [r7, #8]
 80086fe:	4413      	add	r3, r2
 8008700:	2200      	movs	r2, #0
 8008702:	701a      	strb	r2, [r3, #0]
    idx++;
 8008704:	7dfb      	ldrb	r3, [r7, #23]
 8008706:	3301      	adds	r3, #1
 8008708:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d1e7      	bne.n	80086e2 <USBD_GetString+0x52>
 8008712:	e000      	b.n	8008716 <USBD_GetString+0x86>
    return;
 8008714:	bf00      	nop
  }
}
 8008716:	3718      	adds	r7, #24
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800871c:	b480      	push	{r7}
 800871e:	b085      	sub	sp, #20
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008724:	2300      	movs	r3, #0
 8008726:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800872c:	e005      	b.n	800873a <USBD_GetLen+0x1e>
  {
    len++;
 800872e:	7bfb      	ldrb	r3, [r7, #15]
 8008730:	3301      	adds	r3, #1
 8008732:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	3301      	adds	r3, #1
 8008738:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d1f5      	bne.n	800872e <USBD_GetLen+0x12>
  }

  return len;
 8008742:	7bfb      	ldrb	r3, [r7, #15]
}
 8008744:	4618      	mov	r0, r3
 8008746:	3714      	adds	r7, #20
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr

08008750 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b084      	sub	sp, #16
 8008754:	af00      	add	r7, sp, #0
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	60b9      	str	r1, [r7, #8]
 800875a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2202      	movs	r2, #2
 8008760:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	68ba      	ldr	r2, [r7, #8]
 8008774:	2100      	movs	r1, #0
 8008776:	68f8      	ldr	r0, [r7, #12]
 8008778:	f000 fcc5 	bl	8009106 <USBD_LL_Transmit>

  return USBD_OK;
 800877c:	2300      	movs	r3, #0
}
 800877e:	4618      	mov	r0, r3
 8008780:	3710      	adds	r7, #16
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}

08008786 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008786:	b580      	push	{r7, lr}
 8008788:	b084      	sub	sp, #16
 800878a:	af00      	add	r7, sp, #0
 800878c:	60f8      	str	r0, [r7, #12]
 800878e:	60b9      	str	r1, [r7, #8]
 8008790:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	68ba      	ldr	r2, [r7, #8]
 8008796:	2100      	movs	r1, #0
 8008798:	68f8      	ldr	r0, [r7, #12]
 800879a:	f000 fcb4 	bl	8009106 <USBD_LL_Transmit>

  return USBD_OK;
 800879e:	2300      	movs	r3, #0
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3710      	adds	r7, #16
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	60f8      	str	r0, [r7, #12]
 80087b0:	60b9      	str	r1, [r7, #8]
 80087b2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2203      	movs	r2, #3
 80087b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	68ba      	ldr	r2, [r7, #8]
 80087d0:	2100      	movs	r1, #0
 80087d2:	68f8      	ldr	r0, [r7, #12]
 80087d4:	f000 fcb8 	bl	8009148 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80087d8:	2300      	movs	r3, #0
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3710      	adds	r7, #16
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}

080087e2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80087e2:	b580      	push	{r7, lr}
 80087e4:	b084      	sub	sp, #16
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	60f8      	str	r0, [r7, #12]
 80087ea:	60b9      	str	r1, [r7, #8]
 80087ec:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	68ba      	ldr	r2, [r7, #8]
 80087f2:	2100      	movs	r1, #0
 80087f4:	68f8      	ldr	r0, [r7, #12]
 80087f6:	f000 fca7 	bl	8009148 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80087fa:	2300      	movs	r3, #0
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3710      	adds	r7, #16
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b082      	sub	sp, #8
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2204      	movs	r2, #4
 8008810:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008814:	2300      	movs	r3, #0
 8008816:	2200      	movs	r2, #0
 8008818:	2100      	movs	r1, #0
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 fc73 	bl	8009106 <USBD_LL_Transmit>

  return USBD_OK;
 8008820:	2300      	movs	r3, #0
}
 8008822:	4618      	mov	r0, r3
 8008824:	3708      	adds	r7, #8
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}

0800882a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b082      	sub	sp, #8
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2205      	movs	r2, #5
 8008836:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800883a:	2300      	movs	r3, #0
 800883c:	2200      	movs	r2, #0
 800883e:	2100      	movs	r1, #0
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 fc81 	bl	8009148 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008846:	2300      	movs	r3, #0
}
 8008848:	4618      	mov	r0, r3
 800884a:	3708      	adds	r7, #8
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008854:	2200      	movs	r2, #0
 8008856:	4912      	ldr	r1, [pc, #72]	; (80088a0 <MX_USB_DEVICE_Init+0x50>)
 8008858:	4812      	ldr	r0, [pc, #72]	; (80088a4 <MX_USB_DEVICE_Init+0x54>)
 800885a:	f7fe fd07 	bl	800726c <USBD_Init>
 800885e:	4603      	mov	r3, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d001      	beq.n	8008868 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008864:	f7f8 f9b2 	bl	8000bcc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008868:	490f      	ldr	r1, [pc, #60]	; (80088a8 <MX_USB_DEVICE_Init+0x58>)
 800886a:	480e      	ldr	r0, [pc, #56]	; (80088a4 <MX_USB_DEVICE_Init+0x54>)
 800886c:	f7fe fd2e 	bl	80072cc <USBD_RegisterClass>
 8008870:	4603      	mov	r3, r0
 8008872:	2b00      	cmp	r3, #0
 8008874:	d001      	beq.n	800887a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008876:	f7f8 f9a9 	bl	8000bcc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800887a:	490c      	ldr	r1, [pc, #48]	; (80088ac <MX_USB_DEVICE_Init+0x5c>)
 800887c:	4809      	ldr	r0, [pc, #36]	; (80088a4 <MX_USB_DEVICE_Init+0x54>)
 800887e:	f7fe fc65 	bl	800714c <USBD_CDC_RegisterInterface>
 8008882:	4603      	mov	r3, r0
 8008884:	2b00      	cmp	r3, #0
 8008886:	d001      	beq.n	800888c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008888:	f7f8 f9a0 	bl	8000bcc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800888c:	4805      	ldr	r0, [pc, #20]	; (80088a4 <MX_USB_DEVICE_Init+0x54>)
 800888e:	f7fe fd53 	bl	8007338 <USBD_Start>
 8008892:	4603      	mov	r3, r0
 8008894:	2b00      	cmp	r3, #0
 8008896:	d001      	beq.n	800889c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008898:	f7f8 f998 	bl	8000bcc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800889c:	bf00      	nop
 800889e:	bd80      	pop	{r7, pc}
 80088a0:	200000ac 	.word	0x200000ac
 80088a4:	2000026c 	.word	0x2000026c
 80088a8:	20000018 	.word	0x20000018
 80088ac:	20000098 	.word	0x20000098

080088b0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80088b4:	2200      	movs	r2, #0
 80088b6:	4905      	ldr	r1, [pc, #20]	; (80088cc <CDC_Init_FS+0x1c>)
 80088b8:	4805      	ldr	r0, [pc, #20]	; (80088d0 <CDC_Init_FS+0x20>)
 80088ba:	f7fe fc61 	bl	8007180 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80088be:	4905      	ldr	r1, [pc, #20]	; (80088d4 <CDC_Init_FS+0x24>)
 80088c0:	4803      	ldr	r0, [pc, #12]	; (80088d0 <CDC_Init_FS+0x20>)
 80088c2:	f7fe fc7f 	bl	80071c4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80088c6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	bd80      	pop	{r7, pc}
 80088cc:	20000d48 	.word	0x20000d48
 80088d0:	2000026c 	.word	0x2000026c
 80088d4:	20000548 	.word	0x20000548

080088d8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80088d8:	b480      	push	{r7}
 80088da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80088dc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80088de:	4618      	mov	r0, r3
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr

080088e8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b083      	sub	sp, #12
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	4603      	mov	r3, r0
 80088f0:	6039      	str	r1, [r7, #0]
 80088f2:	71fb      	strb	r3, [r7, #7]
 80088f4:	4613      	mov	r3, r2
 80088f6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80088f8:	79fb      	ldrb	r3, [r7, #7]
 80088fa:	2b23      	cmp	r3, #35	; 0x23
 80088fc:	d84a      	bhi.n	8008994 <CDC_Control_FS+0xac>
 80088fe:	a201      	add	r2, pc, #4	; (adr r2, 8008904 <CDC_Control_FS+0x1c>)
 8008900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008904:	08008995 	.word	0x08008995
 8008908:	08008995 	.word	0x08008995
 800890c:	08008995 	.word	0x08008995
 8008910:	08008995 	.word	0x08008995
 8008914:	08008995 	.word	0x08008995
 8008918:	08008995 	.word	0x08008995
 800891c:	08008995 	.word	0x08008995
 8008920:	08008995 	.word	0x08008995
 8008924:	08008995 	.word	0x08008995
 8008928:	08008995 	.word	0x08008995
 800892c:	08008995 	.word	0x08008995
 8008930:	08008995 	.word	0x08008995
 8008934:	08008995 	.word	0x08008995
 8008938:	08008995 	.word	0x08008995
 800893c:	08008995 	.word	0x08008995
 8008940:	08008995 	.word	0x08008995
 8008944:	08008995 	.word	0x08008995
 8008948:	08008995 	.word	0x08008995
 800894c:	08008995 	.word	0x08008995
 8008950:	08008995 	.word	0x08008995
 8008954:	08008995 	.word	0x08008995
 8008958:	08008995 	.word	0x08008995
 800895c:	08008995 	.word	0x08008995
 8008960:	08008995 	.word	0x08008995
 8008964:	08008995 	.word	0x08008995
 8008968:	08008995 	.word	0x08008995
 800896c:	08008995 	.word	0x08008995
 8008970:	08008995 	.word	0x08008995
 8008974:	08008995 	.word	0x08008995
 8008978:	08008995 	.word	0x08008995
 800897c:	08008995 	.word	0x08008995
 8008980:	08008995 	.word	0x08008995
 8008984:	08008995 	.word	0x08008995
 8008988:	08008995 	.word	0x08008995
 800898c:	08008995 	.word	0x08008995
 8008990:	08008995 	.word	0x08008995
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008994:	bf00      	nop
  }

  return (USBD_OK);
 8008996:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008998:	4618      	mov	r0, r3
 800899a:	370c      	adds	r7, #12
 800899c:	46bd      	mov	sp, r7
 800899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a2:	4770      	bx	lr

080089a4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b082      	sub	sp, #8
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80089ae:	6879      	ldr	r1, [r7, #4]
 80089b0:	4805      	ldr	r0, [pc, #20]	; (80089c8 <CDC_Receive_FS+0x24>)
 80089b2:	f7fe fc07 	bl	80071c4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80089b6:	4804      	ldr	r0, [pc, #16]	; (80089c8 <CDC_Receive_FS+0x24>)
 80089b8:	f7fe fc22 	bl	8007200 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80089bc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3708      	adds	r7, #8
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop
 80089c8:	2000026c 	.word	0x2000026c

080089cc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b087      	sub	sp, #28
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	60f8      	str	r0, [r7, #12]
 80089d4:	60b9      	str	r1, [r7, #8]
 80089d6:	4613      	mov	r3, r2
 80089d8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80089da:	2300      	movs	r3, #0
 80089dc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80089de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	371c      	adds	r7, #28
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr
	...

080089f0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b083      	sub	sp, #12
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	4603      	mov	r3, r0
 80089f8:	6039      	str	r1, [r7, #0]
 80089fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	2212      	movs	r2, #18
 8008a00:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008a02:	4b03      	ldr	r3, [pc, #12]	; (8008a10 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	370c      	adds	r7, #12
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr
 8008a10:	200000c8 	.word	0x200000c8

08008a14 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	6039      	str	r1, [r7, #0]
 8008a1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	2204      	movs	r2, #4
 8008a24:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008a26:	4b03      	ldr	r3, [pc, #12]	; (8008a34 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	370c      	adds	r7, #12
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr
 8008a34:	200000dc 	.word	0x200000dc

08008a38 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b082      	sub	sp, #8
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	4603      	mov	r3, r0
 8008a40:	6039      	str	r1, [r7, #0]
 8008a42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008a44:	79fb      	ldrb	r3, [r7, #7]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d105      	bne.n	8008a56 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008a4a:	683a      	ldr	r2, [r7, #0]
 8008a4c:	4907      	ldr	r1, [pc, #28]	; (8008a6c <USBD_FS_ProductStrDescriptor+0x34>)
 8008a4e:	4808      	ldr	r0, [pc, #32]	; (8008a70 <USBD_FS_ProductStrDescriptor+0x38>)
 8008a50:	f7ff fe1e 	bl	8008690 <USBD_GetString>
 8008a54:	e004      	b.n	8008a60 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008a56:	683a      	ldr	r2, [r7, #0]
 8008a58:	4904      	ldr	r1, [pc, #16]	; (8008a6c <USBD_FS_ProductStrDescriptor+0x34>)
 8008a5a:	4805      	ldr	r0, [pc, #20]	; (8008a70 <USBD_FS_ProductStrDescriptor+0x38>)
 8008a5c:	f7ff fe18 	bl	8008690 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a60:	4b02      	ldr	r3, [pc, #8]	; (8008a6c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3708      	adds	r7, #8
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	bf00      	nop
 8008a6c:	20001548 	.word	0x20001548
 8008a70:	080092a8 	.word	0x080092a8

08008a74 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b082      	sub	sp, #8
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	6039      	str	r1, [r7, #0]
 8008a7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008a80:	683a      	ldr	r2, [r7, #0]
 8008a82:	4904      	ldr	r1, [pc, #16]	; (8008a94 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008a84:	4804      	ldr	r0, [pc, #16]	; (8008a98 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008a86:	f7ff fe03 	bl	8008690 <USBD_GetString>
  return USBD_StrDesc;
 8008a8a:	4b02      	ldr	r3, [pc, #8]	; (8008a94 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3708      	adds	r7, #8
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}
 8008a94:	20001548 	.word	0x20001548
 8008a98:	080092c0 	.word	0x080092c0

08008a9c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	6039      	str	r1, [r7, #0]
 8008aa6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	221a      	movs	r2, #26
 8008aac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008aae:	f000 f843 	bl	8008b38 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008ab2:	4b02      	ldr	r3, [pc, #8]	; (8008abc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3708      	adds	r7, #8
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}
 8008abc:	200000e0 	.word	0x200000e0

08008ac0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	6039      	str	r1, [r7, #0]
 8008aca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008acc:	79fb      	ldrb	r3, [r7, #7]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d105      	bne.n	8008ade <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008ad2:	683a      	ldr	r2, [r7, #0]
 8008ad4:	4907      	ldr	r1, [pc, #28]	; (8008af4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008ad6:	4808      	ldr	r0, [pc, #32]	; (8008af8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008ad8:	f7ff fdda 	bl	8008690 <USBD_GetString>
 8008adc:	e004      	b.n	8008ae8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008ade:	683a      	ldr	r2, [r7, #0]
 8008ae0:	4904      	ldr	r1, [pc, #16]	; (8008af4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008ae2:	4805      	ldr	r0, [pc, #20]	; (8008af8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008ae4:	f7ff fdd4 	bl	8008690 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ae8:	4b02      	ldr	r3, [pc, #8]	; (8008af4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3708      	adds	r7, #8
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}
 8008af2:	bf00      	nop
 8008af4:	20001548 	.word	0x20001548
 8008af8:	080092d4 	.word	0x080092d4

08008afc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b082      	sub	sp, #8
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	4603      	mov	r3, r0
 8008b04:	6039      	str	r1, [r7, #0]
 8008b06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b08:	79fb      	ldrb	r3, [r7, #7]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d105      	bne.n	8008b1a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b0e:	683a      	ldr	r2, [r7, #0]
 8008b10:	4907      	ldr	r1, [pc, #28]	; (8008b30 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b12:	4808      	ldr	r0, [pc, #32]	; (8008b34 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b14:	f7ff fdbc 	bl	8008690 <USBD_GetString>
 8008b18:	e004      	b.n	8008b24 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b1a:	683a      	ldr	r2, [r7, #0]
 8008b1c:	4904      	ldr	r1, [pc, #16]	; (8008b30 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b1e:	4805      	ldr	r0, [pc, #20]	; (8008b34 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b20:	f7ff fdb6 	bl	8008690 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b24:	4b02      	ldr	r3, [pc, #8]	; (8008b30 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3708      	adds	r7, #8
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	20001548 	.word	0x20001548
 8008b34:	080092e0 	.word	0x080092e0

08008b38 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008b3e:	4b0f      	ldr	r3, [pc, #60]	; (8008b7c <Get_SerialNum+0x44>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008b44:	4b0e      	ldr	r3, [pc, #56]	; (8008b80 <Get_SerialNum+0x48>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008b4a:	4b0e      	ldr	r3, [pc, #56]	; (8008b84 <Get_SerialNum+0x4c>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008b50:	68fa      	ldr	r2, [r7, #12]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	4413      	add	r3, r2
 8008b56:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d009      	beq.n	8008b72 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008b5e:	2208      	movs	r2, #8
 8008b60:	4909      	ldr	r1, [pc, #36]	; (8008b88 <Get_SerialNum+0x50>)
 8008b62:	68f8      	ldr	r0, [r7, #12]
 8008b64:	f000 f814 	bl	8008b90 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008b68:	2204      	movs	r2, #4
 8008b6a:	4908      	ldr	r1, [pc, #32]	; (8008b8c <Get_SerialNum+0x54>)
 8008b6c:	68b8      	ldr	r0, [r7, #8]
 8008b6e:	f000 f80f 	bl	8008b90 <IntToUnicode>
  }
}
 8008b72:	bf00      	nop
 8008b74:	3710      	adds	r7, #16
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	1fff7a10 	.word	0x1fff7a10
 8008b80:	1fff7a14 	.word	0x1fff7a14
 8008b84:	1fff7a18 	.word	0x1fff7a18
 8008b88:	200000e2 	.word	0x200000e2
 8008b8c:	200000f2 	.word	0x200000f2

08008b90 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b087      	sub	sp, #28
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	60f8      	str	r0, [r7, #12]
 8008b98:	60b9      	str	r1, [r7, #8]
 8008b9a:	4613      	mov	r3, r2
 8008b9c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	75fb      	strb	r3, [r7, #23]
 8008ba6:	e027      	b.n	8008bf8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	0f1b      	lsrs	r3, r3, #28
 8008bac:	2b09      	cmp	r3, #9
 8008bae:	d80b      	bhi.n	8008bc8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	0f1b      	lsrs	r3, r3, #28
 8008bb4:	b2da      	uxtb	r2, r3
 8008bb6:	7dfb      	ldrb	r3, [r7, #23]
 8008bb8:	005b      	lsls	r3, r3, #1
 8008bba:	4619      	mov	r1, r3
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	440b      	add	r3, r1
 8008bc0:	3230      	adds	r2, #48	; 0x30
 8008bc2:	b2d2      	uxtb	r2, r2
 8008bc4:	701a      	strb	r2, [r3, #0]
 8008bc6:	e00a      	b.n	8008bde <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	0f1b      	lsrs	r3, r3, #28
 8008bcc:	b2da      	uxtb	r2, r3
 8008bce:	7dfb      	ldrb	r3, [r7, #23]
 8008bd0:	005b      	lsls	r3, r3, #1
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	440b      	add	r3, r1
 8008bd8:	3237      	adds	r2, #55	; 0x37
 8008bda:	b2d2      	uxtb	r2, r2
 8008bdc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	011b      	lsls	r3, r3, #4
 8008be2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008be4:	7dfb      	ldrb	r3, [r7, #23]
 8008be6:	005b      	lsls	r3, r3, #1
 8008be8:	3301      	adds	r3, #1
 8008bea:	68ba      	ldr	r2, [r7, #8]
 8008bec:	4413      	add	r3, r2
 8008bee:	2200      	movs	r2, #0
 8008bf0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008bf2:	7dfb      	ldrb	r3, [r7, #23]
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	75fb      	strb	r3, [r7, #23]
 8008bf8:	7dfa      	ldrb	r2, [r7, #23]
 8008bfa:	79fb      	ldrb	r3, [r7, #7]
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d3d3      	bcc.n	8008ba8 <IntToUnicode+0x18>
  }
}
 8008c00:	bf00      	nop
 8008c02:	bf00      	nop
 8008c04:	371c      	adds	r7, #28
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr
	...

08008c10 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b08a      	sub	sp, #40	; 0x28
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c18:	f107 0314 	add.w	r3, r7, #20
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	601a      	str	r2, [r3, #0]
 8008c20:	605a      	str	r2, [r3, #4]
 8008c22:	609a      	str	r2, [r3, #8]
 8008c24:	60da      	str	r2, [r3, #12]
 8008c26:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c30:	d13a      	bne.n	8008ca8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c32:	2300      	movs	r3, #0
 8008c34:	613b      	str	r3, [r7, #16]
 8008c36:	4b1e      	ldr	r3, [pc, #120]	; (8008cb0 <HAL_PCD_MspInit+0xa0>)
 8008c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c3a:	4a1d      	ldr	r2, [pc, #116]	; (8008cb0 <HAL_PCD_MspInit+0xa0>)
 8008c3c:	f043 0301 	orr.w	r3, r3, #1
 8008c40:	6313      	str	r3, [r2, #48]	; 0x30
 8008c42:	4b1b      	ldr	r3, [pc, #108]	; (8008cb0 <HAL_PCD_MspInit+0xa0>)
 8008c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c46:	f003 0301 	and.w	r3, r3, #1
 8008c4a:	613b      	str	r3, [r7, #16]
 8008c4c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008c4e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008c52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c54:	2302      	movs	r3, #2
 8008c56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008c5c:	2303      	movs	r3, #3
 8008c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008c60:	230a      	movs	r3, #10
 8008c62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c64:	f107 0314 	add.w	r3, r7, #20
 8008c68:	4619      	mov	r1, r3
 8008c6a:	4812      	ldr	r0, [pc, #72]	; (8008cb4 <HAL_PCD_MspInit+0xa4>)
 8008c6c:	f7f8 fe52 	bl	8001914 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008c70:	4b0f      	ldr	r3, [pc, #60]	; (8008cb0 <HAL_PCD_MspInit+0xa0>)
 8008c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c74:	4a0e      	ldr	r2, [pc, #56]	; (8008cb0 <HAL_PCD_MspInit+0xa0>)
 8008c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c7a:	6353      	str	r3, [r2, #52]	; 0x34
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	60fb      	str	r3, [r7, #12]
 8008c80:	4b0b      	ldr	r3, [pc, #44]	; (8008cb0 <HAL_PCD_MspInit+0xa0>)
 8008c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c84:	4a0a      	ldr	r2, [pc, #40]	; (8008cb0 <HAL_PCD_MspInit+0xa0>)
 8008c86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008c8a:	6453      	str	r3, [r2, #68]	; 0x44
 8008c8c:	4b08      	ldr	r3, [pc, #32]	; (8008cb0 <HAL_PCD_MspInit+0xa0>)
 8008c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c94:	60fb      	str	r3, [r7, #12]
 8008c96:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008c98:	2200      	movs	r2, #0
 8008c9a:	2100      	movs	r1, #0
 8008c9c:	2043      	movs	r0, #67	; 0x43
 8008c9e:	f7f8 fa92 	bl	80011c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008ca2:	2043      	movs	r0, #67	; 0x43
 8008ca4:	f7f8 faab 	bl	80011fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008ca8:	bf00      	nop
 8008caa:	3728      	adds	r7, #40	; 0x28
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}
 8008cb0:	40023800 	.word	0x40023800
 8008cb4:	40020000 	.word	0x40020000

08008cb8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b082      	sub	sp, #8
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008ccc:	4619      	mov	r1, r3
 8008cce:	4610      	mov	r0, r2
 8008cd0:	f7fe fb7f 	bl	80073d2 <USBD_LL_SetupStage>
}
 8008cd4:	bf00      	nop
 8008cd6:	3708      	adds	r7, #8
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b082      	sub	sp, #8
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008cee:	78fa      	ldrb	r2, [r7, #3]
 8008cf0:	6879      	ldr	r1, [r7, #4]
 8008cf2:	4613      	mov	r3, r2
 8008cf4:	00db      	lsls	r3, r3, #3
 8008cf6:	4413      	add	r3, r2
 8008cf8:	009b      	lsls	r3, r3, #2
 8008cfa:	440b      	add	r3, r1
 8008cfc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008d00:	681a      	ldr	r2, [r3, #0]
 8008d02:	78fb      	ldrb	r3, [r7, #3]
 8008d04:	4619      	mov	r1, r3
 8008d06:	f7fe fbb9 	bl	800747c <USBD_LL_DataOutStage>
}
 8008d0a:	bf00      	nop
 8008d0c:	3708      	adds	r7, #8
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}

08008d12 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b082      	sub	sp, #8
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
 8008d1a:	460b      	mov	r3, r1
 8008d1c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008d24:	78fa      	ldrb	r2, [r7, #3]
 8008d26:	6879      	ldr	r1, [r7, #4]
 8008d28:	4613      	mov	r3, r2
 8008d2a:	00db      	lsls	r3, r3, #3
 8008d2c:	4413      	add	r3, r2
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	440b      	add	r3, r1
 8008d32:	334c      	adds	r3, #76	; 0x4c
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	78fb      	ldrb	r3, [r7, #3]
 8008d38:	4619      	mov	r1, r3
 8008d3a:	f7fe fc52 	bl	80075e2 <USBD_LL_DataInStage>
}
 8008d3e:	bf00      	nop
 8008d40:	3708      	adds	r7, #8
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}

08008d46 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b082      	sub	sp, #8
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d54:	4618      	mov	r0, r3
 8008d56:	f7fe fd86 	bl	8007866 <USBD_LL_SOF>
}
 8008d5a:	bf00      	nop
 8008d5c:	3708      	adds	r7, #8
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b084      	sub	sp, #16
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	68db      	ldr	r3, [r3, #12]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d102      	bne.n	8008d7c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008d76:	2300      	movs	r3, #0
 8008d78:	73fb      	strb	r3, [r7, #15]
 8008d7a:	e008      	b.n	8008d8e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	68db      	ldr	r3, [r3, #12]
 8008d80:	2b02      	cmp	r3, #2
 8008d82:	d102      	bne.n	8008d8a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008d84:	2301      	movs	r3, #1
 8008d86:	73fb      	strb	r3, [r7, #15]
 8008d88:	e001      	b.n	8008d8e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008d8a:	f7f7 ff1f 	bl	8000bcc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d94:	7bfa      	ldrb	r2, [r7, #15]
 8008d96:	4611      	mov	r1, r2
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f7fe fd26 	bl	80077ea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008da4:	4618      	mov	r0, r3
 8008da6:	f7fe fcce 	bl	8007746 <USBD_LL_Reset>
}
 8008daa:	bf00      	nop
 8008dac:	3710      	adds	r7, #16
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
	...

08008db4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b082      	sub	sp, #8
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f7fe fd21 	bl	800780a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	6812      	ldr	r2, [r2, #0]
 8008dd6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008dda:	f043 0301 	orr.w	r3, r3, #1
 8008dde:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6a1b      	ldr	r3, [r3, #32]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d005      	beq.n	8008df4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008de8:	4b04      	ldr	r3, [pc, #16]	; (8008dfc <HAL_PCD_SuspendCallback+0x48>)
 8008dea:	691b      	ldr	r3, [r3, #16]
 8008dec:	4a03      	ldr	r2, [pc, #12]	; (8008dfc <HAL_PCD_SuspendCallback+0x48>)
 8008dee:	f043 0306 	orr.w	r3, r3, #6
 8008df2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008df4:	bf00      	nop
 8008df6:	3708      	adds	r7, #8
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}
 8008dfc:	e000ed00 	.word	0xe000ed00

08008e00 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b082      	sub	sp, #8
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f7fe fd11 	bl	8007836 <USBD_LL_Resume>
}
 8008e14:	bf00      	nop
 8008e16:	3708      	adds	r7, #8
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b082      	sub	sp, #8
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	460b      	mov	r3, r1
 8008e26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008e2e:	78fa      	ldrb	r2, [r7, #3]
 8008e30:	4611      	mov	r1, r2
 8008e32:	4618      	mov	r0, r3
 8008e34:	f7fe fd69 	bl	800790a <USBD_LL_IsoOUTIncomplete>
}
 8008e38:	bf00      	nop
 8008e3a:	3708      	adds	r7, #8
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	460b      	mov	r3, r1
 8008e4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008e52:	78fa      	ldrb	r2, [r7, #3]
 8008e54:	4611      	mov	r1, r2
 8008e56:	4618      	mov	r0, r3
 8008e58:	f7fe fd25 	bl	80078a6 <USBD_LL_IsoINIncomplete>
}
 8008e5c:	bf00      	nop
 8008e5e:	3708      	adds	r7, #8
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}

08008e64 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b082      	sub	sp, #8
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008e72:	4618      	mov	r0, r3
 8008e74:	f7fe fd7b 	bl	800796e <USBD_LL_DevConnected>
}
 8008e78:	bf00      	nop
 8008e7a:	3708      	adds	r7, #8
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f7fe fd78 	bl	8007984 <USBD_LL_DevDisconnected>
}
 8008e94:	bf00      	nop
 8008e96:	3708      	adds	r7, #8
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b082      	sub	sp, #8
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	781b      	ldrb	r3, [r3, #0]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d13c      	bne.n	8008f26 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008eac:	4a20      	ldr	r2, [pc, #128]	; (8008f30 <USBD_LL_Init+0x94>)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	4a1e      	ldr	r2, [pc, #120]	; (8008f30 <USBD_LL_Init+0x94>)
 8008eb8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008ebc:	4b1c      	ldr	r3, [pc, #112]	; (8008f30 <USBD_LL_Init+0x94>)
 8008ebe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008ec2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008ec4:	4b1a      	ldr	r3, [pc, #104]	; (8008f30 <USBD_LL_Init+0x94>)
 8008ec6:	2204      	movs	r2, #4
 8008ec8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008eca:	4b19      	ldr	r3, [pc, #100]	; (8008f30 <USBD_LL_Init+0x94>)
 8008ecc:	2202      	movs	r2, #2
 8008ece:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008ed0:	4b17      	ldr	r3, [pc, #92]	; (8008f30 <USBD_LL_Init+0x94>)
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008ed6:	4b16      	ldr	r3, [pc, #88]	; (8008f30 <USBD_LL_Init+0x94>)
 8008ed8:	2202      	movs	r2, #2
 8008eda:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008edc:	4b14      	ldr	r3, [pc, #80]	; (8008f30 <USBD_LL_Init+0x94>)
 8008ede:	2200      	movs	r2, #0
 8008ee0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008ee2:	4b13      	ldr	r3, [pc, #76]	; (8008f30 <USBD_LL_Init+0x94>)
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008ee8:	4b11      	ldr	r3, [pc, #68]	; (8008f30 <USBD_LL_Init+0x94>)
 8008eea:	2200      	movs	r2, #0
 8008eec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008eee:	4b10      	ldr	r3, [pc, #64]	; (8008f30 <USBD_LL_Init+0x94>)
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008ef4:	4b0e      	ldr	r3, [pc, #56]	; (8008f30 <USBD_LL_Init+0x94>)
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008efa:	480d      	ldr	r0, [pc, #52]	; (8008f30 <USBD_LL_Init+0x94>)
 8008efc:	f7f8 fed7 	bl	8001cae <HAL_PCD_Init>
 8008f00:	4603      	mov	r3, r0
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d001      	beq.n	8008f0a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008f06:	f7f7 fe61 	bl	8000bcc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008f0a:	2180      	movs	r1, #128	; 0x80
 8008f0c:	4808      	ldr	r0, [pc, #32]	; (8008f30 <USBD_LL_Init+0x94>)
 8008f0e:	f7fa f92e 	bl	800316e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008f12:	2240      	movs	r2, #64	; 0x40
 8008f14:	2100      	movs	r1, #0
 8008f16:	4806      	ldr	r0, [pc, #24]	; (8008f30 <USBD_LL_Init+0x94>)
 8008f18:	f7fa f8e2 	bl	80030e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008f1c:	2280      	movs	r2, #128	; 0x80
 8008f1e:	2101      	movs	r1, #1
 8008f20:	4803      	ldr	r0, [pc, #12]	; (8008f30 <USBD_LL_Init+0x94>)
 8008f22:	f7fa f8dd 	bl	80030e0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008f26:	2300      	movs	r3, #0
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3708      	adds	r7, #8
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}
 8008f30:	20001748 	.word	0x20001748

08008f34 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f40:	2300      	movs	r3, #0
 8008f42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f7f8 ffcc 	bl	8001ee8 <HAL_PCD_Start>
 8008f50:	4603      	mov	r3, r0
 8008f52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f54:	7bfb      	ldrb	r3, [r7, #15]
 8008f56:	4618      	mov	r0, r3
 8008f58:	f000 f942 	bl	80091e0 <USBD_Get_USB_Status>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f60:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3710      	adds	r7, #16
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}

08008f6a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008f6a:	b580      	push	{r7, lr}
 8008f6c:	b084      	sub	sp, #16
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
 8008f72:	4608      	mov	r0, r1
 8008f74:	4611      	mov	r1, r2
 8008f76:	461a      	mov	r2, r3
 8008f78:	4603      	mov	r3, r0
 8008f7a:	70fb      	strb	r3, [r7, #3]
 8008f7c:	460b      	mov	r3, r1
 8008f7e:	70bb      	strb	r3, [r7, #2]
 8008f80:	4613      	mov	r3, r2
 8008f82:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f84:	2300      	movs	r3, #0
 8008f86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008f92:	78bb      	ldrb	r3, [r7, #2]
 8008f94:	883a      	ldrh	r2, [r7, #0]
 8008f96:	78f9      	ldrb	r1, [r7, #3]
 8008f98:	f7f9 fc9d 	bl	80028d6 <HAL_PCD_EP_Open>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fa0:	7bfb      	ldrb	r3, [r7, #15]
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f000 f91c 	bl	80091e0 <USBD_Get_USB_Status>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fac:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3710      	adds	r7, #16
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}

08008fb6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fb6:	b580      	push	{r7, lr}
 8008fb8:	b084      	sub	sp, #16
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
 8008fbe:	460b      	mov	r3, r1
 8008fc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008fd0:	78fa      	ldrb	r2, [r7, #3]
 8008fd2:	4611      	mov	r1, r2
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f7f9 fce6 	bl	80029a6 <HAL_PCD_EP_Close>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fde:	7bfb      	ldrb	r3, [r7, #15]
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f000 f8fd 	bl	80091e0 <USBD_Get_USB_Status>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fea:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3710      	adds	r7, #16
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	460b      	mov	r3, r1
 8008ffe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009000:	2300      	movs	r3, #0
 8009002:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009004:	2300      	movs	r3, #0
 8009006:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800900e:	78fa      	ldrb	r2, [r7, #3]
 8009010:	4611      	mov	r1, r2
 8009012:	4618      	mov	r0, r3
 8009014:	f7f9 fdbe 	bl	8002b94 <HAL_PCD_EP_SetStall>
 8009018:	4603      	mov	r3, r0
 800901a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800901c:	7bfb      	ldrb	r3, [r7, #15]
 800901e:	4618      	mov	r0, r3
 8009020:	f000 f8de 	bl	80091e0 <USBD_Get_USB_Status>
 8009024:	4603      	mov	r3, r0
 8009026:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009028:	7bbb      	ldrb	r3, [r7, #14]
}
 800902a:	4618      	mov	r0, r3
 800902c:	3710      	adds	r7, #16
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}

08009032 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009032:	b580      	push	{r7, lr}
 8009034:	b084      	sub	sp, #16
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
 800903a:	460b      	mov	r3, r1
 800903c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800903e:	2300      	movs	r3, #0
 8009040:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009042:	2300      	movs	r3, #0
 8009044:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800904c:	78fa      	ldrb	r2, [r7, #3]
 800904e:	4611      	mov	r1, r2
 8009050:	4618      	mov	r0, r3
 8009052:	f7f9 fe03 	bl	8002c5c <HAL_PCD_EP_ClrStall>
 8009056:	4603      	mov	r3, r0
 8009058:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800905a:	7bfb      	ldrb	r3, [r7, #15]
 800905c:	4618      	mov	r0, r3
 800905e:	f000 f8bf 	bl	80091e0 <USBD_Get_USB_Status>
 8009062:	4603      	mov	r3, r0
 8009064:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009066:	7bbb      	ldrb	r3, [r7, #14]
}
 8009068:	4618      	mov	r0, r3
 800906a:	3710      	adds	r7, #16
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009070:	b480      	push	{r7}
 8009072:	b085      	sub	sp, #20
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	460b      	mov	r3, r1
 800907a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009082:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009084:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009088:	2b00      	cmp	r3, #0
 800908a:	da0b      	bge.n	80090a4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800908c:	78fb      	ldrb	r3, [r7, #3]
 800908e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009092:	68f9      	ldr	r1, [r7, #12]
 8009094:	4613      	mov	r3, r2
 8009096:	00db      	lsls	r3, r3, #3
 8009098:	4413      	add	r3, r2
 800909a:	009b      	lsls	r3, r3, #2
 800909c:	440b      	add	r3, r1
 800909e:	333e      	adds	r3, #62	; 0x3e
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	e00b      	b.n	80090bc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80090a4:	78fb      	ldrb	r3, [r7, #3]
 80090a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80090aa:	68f9      	ldr	r1, [r7, #12]
 80090ac:	4613      	mov	r3, r2
 80090ae:	00db      	lsls	r3, r3, #3
 80090b0:	4413      	add	r3, r2
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	440b      	add	r3, r1
 80090b6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80090ba:	781b      	ldrb	r3, [r3, #0]
  }
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3714      	adds	r7, #20
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr

080090c8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b084      	sub	sp, #16
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	460b      	mov	r3, r1
 80090d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090d4:	2300      	movs	r3, #0
 80090d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090d8:	2300      	movs	r3, #0
 80090da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80090e2:	78fa      	ldrb	r2, [r7, #3]
 80090e4:	4611      	mov	r1, r2
 80090e6:	4618      	mov	r0, r3
 80090e8:	f7f9 fbd0 	bl	800288c <HAL_PCD_SetAddress>
 80090ec:	4603      	mov	r3, r0
 80090ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090f0:	7bfb      	ldrb	r3, [r7, #15]
 80090f2:	4618      	mov	r0, r3
 80090f4:	f000 f874 	bl	80091e0 <USBD_Get_USB_Status>
 80090f8:	4603      	mov	r3, r0
 80090fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3710      	adds	r7, #16
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}

08009106 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009106:	b580      	push	{r7, lr}
 8009108:	b086      	sub	sp, #24
 800910a:	af00      	add	r7, sp, #0
 800910c:	60f8      	str	r0, [r7, #12]
 800910e:	607a      	str	r2, [r7, #4]
 8009110:	603b      	str	r3, [r7, #0]
 8009112:	460b      	mov	r3, r1
 8009114:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009116:	2300      	movs	r3, #0
 8009118:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800911a:	2300      	movs	r3, #0
 800911c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009124:	7af9      	ldrb	r1, [r7, #11]
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	687a      	ldr	r2, [r7, #4]
 800912a:	f7f9 fce9 	bl	8002b00 <HAL_PCD_EP_Transmit>
 800912e:	4603      	mov	r3, r0
 8009130:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009132:	7dfb      	ldrb	r3, [r7, #23]
 8009134:	4618      	mov	r0, r3
 8009136:	f000 f853 	bl	80091e0 <USBD_Get_USB_Status>
 800913a:	4603      	mov	r3, r0
 800913c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800913e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009140:	4618      	mov	r0, r3
 8009142:	3718      	adds	r7, #24
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}

08009148 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b086      	sub	sp, #24
 800914c:	af00      	add	r7, sp, #0
 800914e:	60f8      	str	r0, [r7, #12]
 8009150:	607a      	str	r2, [r7, #4]
 8009152:	603b      	str	r3, [r7, #0]
 8009154:	460b      	mov	r3, r1
 8009156:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009158:	2300      	movs	r3, #0
 800915a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800915c:	2300      	movs	r3, #0
 800915e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009166:	7af9      	ldrb	r1, [r7, #11]
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	687a      	ldr	r2, [r7, #4]
 800916c:	f7f9 fc65 	bl	8002a3a <HAL_PCD_EP_Receive>
 8009170:	4603      	mov	r3, r0
 8009172:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009174:	7dfb      	ldrb	r3, [r7, #23]
 8009176:	4618      	mov	r0, r3
 8009178:	f000 f832 	bl	80091e0 <USBD_Get_USB_Status>
 800917c:	4603      	mov	r3, r0
 800917e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009180:	7dbb      	ldrb	r3, [r7, #22]
}
 8009182:	4618      	mov	r0, r3
 8009184:	3718      	adds	r7, #24
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}

0800918a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800918a:	b580      	push	{r7, lr}
 800918c:	b082      	sub	sp, #8
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
 8009192:	460b      	mov	r3, r1
 8009194:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800919c:	78fa      	ldrb	r2, [r7, #3]
 800919e:	4611      	mov	r1, r2
 80091a0:	4618      	mov	r0, r3
 80091a2:	f7f9 fc95 	bl	8002ad0 <HAL_PCD_EP_GetRxCount>
 80091a6:	4603      	mov	r3, r0
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3708      	adds	r7, #8
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b083      	sub	sp, #12
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80091b8:	4b03      	ldr	r3, [pc, #12]	; (80091c8 <USBD_static_malloc+0x18>)
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	370c      	adds	r7, #12
 80091be:	46bd      	mov	sp, r7
 80091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c4:	4770      	bx	lr
 80091c6:	bf00      	nop
 80091c8:	20001c54 	.word	0x20001c54

080091cc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b083      	sub	sp, #12
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]

}
 80091d4:	bf00      	nop
 80091d6:	370c      	adds	r7, #12
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr

080091e0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b085      	sub	sp, #20
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	4603      	mov	r3, r0
 80091e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091ea:	2300      	movs	r3, #0
 80091ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80091ee:	79fb      	ldrb	r3, [r7, #7]
 80091f0:	2b03      	cmp	r3, #3
 80091f2:	d817      	bhi.n	8009224 <USBD_Get_USB_Status+0x44>
 80091f4:	a201      	add	r2, pc, #4	; (adr r2, 80091fc <USBD_Get_USB_Status+0x1c>)
 80091f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091fa:	bf00      	nop
 80091fc:	0800920d 	.word	0x0800920d
 8009200:	08009213 	.word	0x08009213
 8009204:	08009219 	.word	0x08009219
 8009208:	0800921f 	.word	0x0800921f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800920c:	2300      	movs	r3, #0
 800920e:	73fb      	strb	r3, [r7, #15]
    break;
 8009210:	e00b      	b.n	800922a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009212:	2303      	movs	r3, #3
 8009214:	73fb      	strb	r3, [r7, #15]
    break;
 8009216:	e008      	b.n	800922a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009218:	2301      	movs	r3, #1
 800921a:	73fb      	strb	r3, [r7, #15]
    break;
 800921c:	e005      	b.n	800922a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800921e:	2303      	movs	r3, #3
 8009220:	73fb      	strb	r3, [r7, #15]
    break;
 8009222:	e002      	b.n	800922a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009224:	2303      	movs	r3, #3
 8009226:	73fb      	strb	r3, [r7, #15]
    break;
 8009228:	bf00      	nop
  }
  return usb_status;
 800922a:	7bfb      	ldrb	r3, [r7, #15]
}
 800922c:	4618      	mov	r0, r3
 800922e:	3714      	adds	r7, #20
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr

08009238 <__libc_init_array>:
 8009238:	b570      	push	{r4, r5, r6, lr}
 800923a:	4d0d      	ldr	r5, [pc, #52]	; (8009270 <__libc_init_array+0x38>)
 800923c:	4c0d      	ldr	r4, [pc, #52]	; (8009274 <__libc_init_array+0x3c>)
 800923e:	1b64      	subs	r4, r4, r5
 8009240:	10a4      	asrs	r4, r4, #2
 8009242:	2600      	movs	r6, #0
 8009244:	42a6      	cmp	r6, r4
 8009246:	d109      	bne.n	800925c <__libc_init_array+0x24>
 8009248:	4d0b      	ldr	r5, [pc, #44]	; (8009278 <__libc_init_array+0x40>)
 800924a:	4c0c      	ldr	r4, [pc, #48]	; (800927c <__libc_init_array+0x44>)
 800924c:	f000 f820 	bl	8009290 <_init>
 8009250:	1b64      	subs	r4, r4, r5
 8009252:	10a4      	asrs	r4, r4, #2
 8009254:	2600      	movs	r6, #0
 8009256:	42a6      	cmp	r6, r4
 8009258:	d105      	bne.n	8009266 <__libc_init_array+0x2e>
 800925a:	bd70      	pop	{r4, r5, r6, pc}
 800925c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009260:	4798      	blx	r3
 8009262:	3601      	adds	r6, #1
 8009264:	e7ee      	b.n	8009244 <__libc_init_array+0xc>
 8009266:	f855 3b04 	ldr.w	r3, [r5], #4
 800926a:	4798      	blx	r3
 800926c:	3601      	adds	r6, #1
 800926e:	e7f2      	b.n	8009256 <__libc_init_array+0x1e>
 8009270:	08009310 	.word	0x08009310
 8009274:	08009310 	.word	0x08009310
 8009278:	08009310 	.word	0x08009310
 800927c:	08009314 	.word	0x08009314

08009280 <memset>:
 8009280:	4402      	add	r2, r0
 8009282:	4603      	mov	r3, r0
 8009284:	4293      	cmp	r3, r2
 8009286:	d100      	bne.n	800928a <memset+0xa>
 8009288:	4770      	bx	lr
 800928a:	f803 1b01 	strb.w	r1, [r3], #1
 800928e:	e7f9      	b.n	8009284 <memset+0x4>

08009290 <_init>:
 8009290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009292:	bf00      	nop
 8009294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009296:	bc08      	pop	{r3}
 8009298:	469e      	mov	lr, r3
 800929a:	4770      	bx	lr

0800929c <_fini>:
 800929c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800929e:	bf00      	nop
 80092a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092a2:	bc08      	pop	{r3}
 80092a4:	469e      	mov	lr, r3
 80092a6:	4770      	bx	lr
